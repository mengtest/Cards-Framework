//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NCSpeedLight_RongCloudAdapterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NCSpeedLight.RongCloudAdapter), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("RequestToken", RequestToken);
		L.RegFunction("Login", Login);
		L.RegFunction("StartRecordVoice", StartRecordVoice);
		L.RegFunction("StopRecordVoice", StopRecordVoice);
		L.RegFunction("SendVoiceMessage", SendVoiceMessage);
		L.RegFunction("PlayVoice", PlayVoice);
		L.RegFunction("OnRecivedMessage", OnRecivedMessage);
		L.RegFunction("OnConnectStatusChanged", OnConnectStatusChanged);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("ReceiveVoiceCallback", get_ReceiveVoiceCallback, set_ReceiveVoiceCallback);
		L.RegVar("APP_KEY", get_APP_KEY, set_APP_KEY);
		L.RegVar("APP_SECRET", get_APP_SECRET, set_APP_SECRET);
		L.RegVar("TOKEN", get_TOKEN, set_TOKEN);
		L.RegVar("USER_ID", get_USER_ID, set_USER_ID);
		L.RegVar("RESPONSE_CODE", get_RESPONSE_CODE, set_RESPONSE_CODE);
		L.RegFunction("ReceiveVoiceCallbackDelegate", NCSpeedLight_RongCloudAdapter_ReceiveVoiceCallbackDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate), func) as NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate;
			}

			NCSpeedLight.RongCloudAdapter.Initialize(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestToken(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NCSpeedLight.RongCloudAdapter obj = (NCSpeedLight.RongCloudAdapter)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.RongCloudAdapter));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			System.Collections.IEnumerator o = obj.RequestToken(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			NCSpeedLight.RongCloudAdapter.Login(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartRecordVoice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			RCloud.RCVoiceCaptureCallback.VoiceCaptureFinishedCallback arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (RCloud.RCVoiceCaptureCallback.VoiceCaptureFinishedCallback)ToLua.CheckObject(L, 1, typeof(RCloud.RCVoiceCaptureCallback.VoiceCaptureFinishedCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(RCloud.RCVoiceCaptureCallback.VoiceCaptureFinishedCallback), func) as RCloud.RCVoiceCaptureCallback.VoiceCaptureFinishedCallback;
			}

			RCloud.RCVoiceCaptureCallback.VoiceCaptureVolumeCallback arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (RCloud.RCVoiceCaptureCallback.VoiceCaptureVolumeCallback)ToLua.CheckObject(L, 2, typeof(RCloud.RCVoiceCaptureCallback.VoiceCaptureVolumeCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(RCloud.RCVoiceCaptureCallback.VoiceCaptureVolumeCallback), func) as RCloud.RCVoiceCaptureCallback.VoiceCaptureVolumeCallback;
			}

			RCloud.RCVoiceCaptureCallback.VoiceCaptureErrorCallback arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (RCloud.RCVoiceCaptureCallback.VoiceCaptureErrorCallback)ToLua.CheckObject(L, 3, typeof(RCloud.RCVoiceCaptureCallback.VoiceCaptureErrorCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(RCloud.RCVoiceCaptureCallback.VoiceCaptureErrorCallback), func) as RCloud.RCVoiceCaptureCallback.VoiceCaptureErrorCallback;
			}

			NCSpeedLight.RongCloudAdapter.StartRecordVoice(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopRecordVoice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NCSpeedLight.RongCloudAdapter.StopRecordVoice();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendVoiceMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			NCSpeedLight.RongCloudAdapter.SendVoiceMessage(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayVoice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			NCSpeedLight.RongCloudAdapter.PlayVoice(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRecivedMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NCSpeedLight.RongCloudAdapter obj = (NCSpeedLight.RongCloudAdapter)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.RongCloudAdapter));
			RCloud.RCMessage arg0 = (RCloud.RCMessage)ToLua.CheckObject(L, 2, typeof(RCloud.RCMessage));
			obj.OnRecivedMessage(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnectStatusChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NCSpeedLight.RongCloudAdapter obj = (NCSpeedLight.RongCloudAdapter)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.RongCloudAdapter));
			RCloud.ConnectionStatus arg0 = (RCloud.ConnectionStatus)ToLua.CheckObject(L, 2, typeof(RCloud.ConnectionStatus));
			obj.OnConnectStatusChanged(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NCSpeedLight.RongCloudAdapter.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveVoiceCallback(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallback);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_APP_KEY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NCSpeedLight.RongCloudAdapter.APP_KEY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_APP_SECRET(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NCSpeedLight.RongCloudAdapter.APP_SECRET);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TOKEN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NCSpeedLight.RongCloudAdapter.TOKEN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_USER_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NCSpeedLight.RongCloudAdapter.USER_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RESPONSE_CODE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NCSpeedLight.RongCloudAdapter.RESPONSE_CODE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			NCSpeedLight.RongCloudAdapter arg0 = (NCSpeedLight.RongCloudAdapter)ToLua.CheckUnityObject(L, 2, typeof(NCSpeedLight.RongCloudAdapter));
			NCSpeedLight.RongCloudAdapter.Instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveVoiceCallback(IntPtr L)
	{
		try
		{
			NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate), func) as NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate;
			}

			NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_APP_KEY(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			NCSpeedLight.RongCloudAdapter.APP_KEY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_APP_SECRET(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			NCSpeedLight.RongCloudAdapter.APP_SECRET = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TOKEN(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			NCSpeedLight.RongCloudAdapter.TOKEN = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_USER_ID(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			NCSpeedLight.RongCloudAdapter.USER_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RESPONSE_CODE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NCSpeedLight.RongCloudAdapter.RESPONSE_CODE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NCSpeedLight_RongCloudAdapter_ReceiveVoiceCallbackDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.RongCloudAdapter.ReceiveVoiceCallbackDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

