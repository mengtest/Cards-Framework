//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_FileStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.FileStream), typeof(System.IO.Stream));
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("Read", Read);
		L.RegFunction("BeginRead", BeginRead);
		L.RegFunction("EndRead", EndRead);
		L.RegFunction("Write", Write);
		L.RegFunction("BeginWrite", BeginWrite);
		L.RegFunction("EndWrite", EndWrite);
		L.RegFunction("Seek", Seek);
		L.RegFunction("SetLength", SetLength);
		L.RegFunction("Flush", Flush);
		L.RegFunction("Lock", Lock);
		L.RegFunction("Unlock", Unlock);
		L.RegFunction("GetAccessControl", GetAccessControl);
		L.RegFunction("SetAccessControl", SetAccessControl);
		L.RegFunction("New", _CreateSystem_IO_FileStream);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CanRead", get_CanRead, null);
		L.RegVar("CanWrite", get_CanWrite, null);
		L.RegVar("CanSeek", get_CanSeek, null);
		L.RegVar("IsAsync", get_IsAsync, null);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Length", get_Length, null);
		L.RegVar("Position", get_Position, set_Position);
		L.RegVar("SafeFileHandle", get_SafeFileHandle, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_IO_FileStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Microsoft.Win32.SafeHandles.SafeFileHandle), typeof(System.IO.FileAccess)))
			{
				Microsoft.Win32.SafeHandles.SafeFileHandle arg0 = (Microsoft.Win32.SafeHandles.SafeFileHandle)ToLua.CheckObject(L, 1, typeof(Microsoft.Win32.SafeHandles.SafeFileHandle));
				System.IO.FileAccess arg1 = (System.IO.FileAccess)ToLua.CheckObject(L, 2, typeof(System.IO.FileAccess));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Microsoft.Win32.SafeHandles.SafeFileHandle), typeof(System.IO.FileAccess), typeof(int)))
			{
				Microsoft.Win32.SafeHandles.SafeFileHandle arg0 = (Microsoft.Win32.SafeHandles.SafeFileHandle)ToLua.CheckObject(L, 1, typeof(Microsoft.Win32.SafeHandles.SafeFileHandle));
				System.IO.FileAccess arg1 = (System.IO.FileAccess)ToLua.CheckObject(L, 2, typeof(System.IO.FileAccess));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.IO.FileAccess)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.CheckObject(L, 3, typeof(System.IO.FileAccess));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Microsoft.Win32.SafeHandles.SafeFileHandle), typeof(System.IO.FileAccess), typeof(int), typeof(bool)))
			{
				Microsoft.Win32.SafeHandles.SafeFileHandle arg0 = (Microsoft.Win32.SafeHandles.SafeFileHandle)ToLua.CheckObject(L, 1, typeof(Microsoft.Win32.SafeHandles.SafeFileHandle));
				System.IO.FileAccess arg1 = (System.IO.FileAccess)ToLua.CheckObject(L, 2, typeof(System.IO.FileAccess));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.IO.FileAccess), typeof(System.IO.FileShare)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.CheckObject(L, 3, typeof(System.IO.FileAccess));
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, typeof(System.IO.FileShare));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.IO.FileAccess), typeof(System.IO.FileShare), typeof(int)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.CheckObject(L, 3, typeof(System.IO.FileAccess));
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, typeof(System.IO.FileShare));
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.Security.AccessControl.FileSystemRights), typeof(System.IO.FileShare), typeof(int), typeof(System.IO.FileOptions)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.Security.AccessControl.FileSystemRights arg2 = (System.Security.AccessControl.FileSystemRights)ToLua.CheckObject(L, 3, typeof(System.Security.AccessControl.FileSystemRights));
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, typeof(System.IO.FileShare));
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.IO.FileOptions arg5 = (System.IO.FileOptions)ToLua.CheckObject(L, 6, typeof(System.IO.FileOptions));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.IO.FileAccess), typeof(System.IO.FileShare), typeof(int), typeof(bool)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.CheckObject(L, 3, typeof(System.IO.FileAccess));
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, typeof(System.IO.FileShare));
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.IO.FileAccess), typeof(System.IO.FileShare), typeof(int), typeof(System.IO.FileOptions)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.CheckObject(L, 3, typeof(System.IO.FileAccess));
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, typeof(System.IO.FileShare));
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.IO.FileOptions arg5 = (System.IO.FileOptions)ToLua.CheckObject(L, 6, typeof(System.IO.FileOptions));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IO.FileMode), typeof(System.Security.AccessControl.FileSystemRights), typeof(System.IO.FileShare), typeof(int), typeof(System.IO.FileOptions), typeof(System.Security.AccessControl.FileSecurity)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, typeof(System.IO.FileMode));
				System.Security.AccessControl.FileSystemRights arg2 = (System.Security.AccessControl.FileSystemRights)ToLua.CheckObject(L, 3, typeof(System.Security.AccessControl.FileSystemRights));
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, typeof(System.IO.FileShare));
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.IO.FileOptions arg5 = (System.IO.FileOptions)ToLua.CheckObject(L, 6, typeof(System.IO.FileOptions));
				System.Security.AccessControl.FileSecurity arg6 = (System.Security.AccessControl.FileSecurity)ToLua.CheckObject(L, 7, typeof(System.Security.AccessControl.FileSecurity));
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.IO.FileStream.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			int o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.AsyncCallback arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.AsyncCallback)ToLua.CheckObject(L, 5, typeof(System.AsyncCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.AsyncCallback), func) as System.AsyncCallback;
			}

			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginRead(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject(L, 2, typeof(System.IAsyncResult));
			int o = obj.EndRead(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.Write(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.AsyncCallback arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.AsyncCallback)ToLua.CheckObject(L, 5, typeof(System.AsyncCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.AsyncCallback), func) as System.AsyncCallback;
			}

			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginWrite(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject(L, 2, typeof(System.IAsyncResult));
			obj.EndWrite(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			System.IO.SeekOrigin arg1 = (System.IO.SeekOrigin)ToLua.CheckObject(L, 3, typeof(System.IO.SeekOrigin));
			long o = obj.Seek(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetLength(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			obj.Flush();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			obj.Lock(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			obj.Unlock(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAccessControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			System.Security.AccessControl.FileSecurity o = obj.GetAccessControl();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAccessControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject(L, 1, typeof(System.IO.FileStream));
			System.Security.AccessControl.FileSecurity arg0 = (System.Security.AccessControl.FileSecurity)ToLua.CheckObject(L, 2, typeof(System.Security.AccessControl.FileSecurity));
			obj.SetAccessControl(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.CanRead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanRead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanWrite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.CanWrite;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanWrite on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanSeek(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.CanSeek;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanSeek on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAsync(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.IsAsync;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAsync on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			long ret = obj.Length;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Length on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			long ret = obj.Position;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SafeFileHandle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			Microsoft.Win32.SafeHandles.SafeFileHandle ret = obj.SafeFileHandle;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SafeFileHandle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Position on a nil value" : e.Message);
		}
	}
}

