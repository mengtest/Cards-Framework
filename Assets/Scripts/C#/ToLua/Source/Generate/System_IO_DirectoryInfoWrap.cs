//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_DirectoryInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.DirectoryInfo), typeof(System.IO.FileSystemInfo));
		L.RegFunction("Create", Create);
		L.RegFunction("CreateSubdirectory", CreateSubdirectory);
		L.RegFunction("GetFiles", GetFiles);
		L.RegFunction("GetDirectories", GetDirectories);
		L.RegFunction("GetFileSystemInfos", GetFileSystemInfos);
		L.RegFunction("Delete", Delete);
		L.RegFunction("MoveTo", MoveTo);
		L.RegFunction("ToString", ToString);
		L.RegFunction("SetAccessControl", SetAccessControl);
		L.RegFunction("New", _CreateSystem_IO_DirectoryInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Exists", get_Exists, null);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Parent", get_Parent, null);
		L.RegVar("Root", get_Root, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_IO_DirectoryInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.DirectoryInfo obj = new System.IO.DirectoryInfo(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.IO.DirectoryInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				obj.Create();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(System.Security.AccessControl.DirectorySecurity)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				System.Security.AccessControl.DirectorySecurity arg0 = (System.Security.AccessControl.DirectorySecurity)ToLua.ToObject(L, 2);
				obj.Create(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.DirectoryInfo.Create");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateSubdirectory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IO.DirectoryInfo o = obj.CreateSubdirectory(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string), typeof(System.Security.AccessControl.DirectorySecurity)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Security.AccessControl.DirectorySecurity arg1 = (System.Security.AccessControl.DirectorySecurity)ToLua.ToObject(L, 3);
				System.IO.DirectoryInfo o = obj.CreateSubdirectory(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.DirectoryInfo.CreateSubdirectory");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFiles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				System.IO.FileInfo[] o = obj.GetFiles();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IO.FileInfo[] o = obj.GetFiles(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string), typeof(System.IO.SearchOption)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IO.SearchOption arg1 = (System.IO.SearchOption)ToLua.ToObject(L, 3);
				System.IO.FileInfo[] o = obj.GetFiles(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.DirectoryInfo.GetFiles");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDirectories(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				System.IO.DirectoryInfo[] o = obj.GetDirectories();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IO.DirectoryInfo[] o = obj.GetDirectories(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string), typeof(System.IO.SearchOption)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IO.SearchOption arg1 = (System.IO.SearchOption)ToLua.ToObject(L, 3);
				System.IO.DirectoryInfo[] o = obj.GetDirectories(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.DirectoryInfo.GetDirectories");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileSystemInfos(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				System.IO.FileSystemInfo[] o = obj.GetFileSystemInfos();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(string)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IO.FileSystemInfo[] o = obj.GetFileSystemInfos(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.DirectoryInfo.GetFileSystemInfos");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Delete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				obj.Delete();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.DirectoryInfo), typeof(bool)))
			{
				System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.ToObject(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Delete(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.DirectoryInfo.Delete");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.CheckObject(L, 1, typeof(System.IO.DirectoryInfo));
			string arg0 = ToLua.CheckString(L, 2);
			obj.MoveTo(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.CheckObject(L, 1, typeof(System.IO.DirectoryInfo));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAccessControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)ToLua.CheckObject(L, 1, typeof(System.IO.DirectoryInfo));
			System.Security.AccessControl.DirectorySecurity arg0 = (System.Security.AccessControl.DirectorySecurity)ToLua.CheckObject(L, 2, typeof(System.Security.AccessControl.DirectorySecurity));
			obj.SetAccessControl(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Exists(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)o;
			bool ret = obj.Exists;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Exists on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Parent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)o;
			System.IO.DirectoryInfo ret = obj.Parent;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Parent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Root(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.DirectoryInfo obj = (System.IO.DirectoryInfo)o;
			System.IO.DirectoryInfo ret = obj.Root;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Root on a nil value" : e.Message);
		}
	}
}

