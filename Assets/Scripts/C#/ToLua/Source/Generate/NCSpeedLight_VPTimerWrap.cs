//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NCSpeedLight_VPTimerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NCSpeedLight.VPTimer), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("In", In);
		L.RegFunction("Start", Start);
		L.RegFunction("CancelAll", CancelAll);
		L.RegFunction("DestroyAll", DestroyAll);
		L.RegFunction("EditorGetStats", EditorGetStats);
		L.RegFunction("EditorGetMethodInfo", EditorGetMethodInfo);
		L.RegFunction("EditorGetMethodId", EditorGetMethodId);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MaxEventsPerFrame", get_MaxEventsPerFrame, set_MaxEventsPerFrame);
		L.RegVar("WasAddedCorrectly", get_WasAddedCorrectly, null);
		L.RegFunction("Callback", NCSpeedLight_VPTimer_Callback);
		L.RegFunction("ArgCallback", NCSpeedLight_VPTimer_ArgCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int In(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(NCSpeedLight.VPTimer.Callback), typeof(NCSpeedLight.VPTimer.Handle)))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				NCSpeedLight.VPTimer.Callback arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (NCSpeedLight.VPTimer.Callback)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.Callback), func) as NCSpeedLight.VPTimer.Callback;
				}

				NCSpeedLight.VPTimer.Handle arg2 = (NCSpeedLight.VPTimer.Handle)ToLua.ToObject(L, 3);
				NCSpeedLight.VPTimer.In(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(NCSpeedLight.VPTimer.Callback), typeof(int), typeof(NCSpeedLight.VPTimer.Handle)))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				NCSpeedLight.VPTimer.Callback arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (NCSpeedLight.VPTimer.Callback)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.Callback), func) as NCSpeedLight.VPTimer.Callback;
				}

				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				NCSpeedLight.VPTimer.Handle arg3 = (NCSpeedLight.VPTimer.Handle)ToLua.ToObject(L, 4);
				NCSpeedLight.VPTimer.In(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(NCSpeedLight.VPTimer.ArgCallback), typeof(object), typeof(NCSpeedLight.VPTimer.Handle)))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				NCSpeedLight.VPTimer.ArgCallback arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (NCSpeedLight.VPTimer.ArgCallback)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.ArgCallback), func) as NCSpeedLight.VPTimer.ArgCallback;
				}

				object arg2 = ToLua.ToVarObject(L, 3);
				NCSpeedLight.VPTimer.Handle arg3 = (NCSpeedLight.VPTimer.Handle)ToLua.ToObject(L, 4);
				NCSpeedLight.VPTimer.In(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(NCSpeedLight.VPTimer.Callback), typeof(int), typeof(float), typeof(NCSpeedLight.VPTimer.Handle)))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				NCSpeedLight.VPTimer.Callback arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (NCSpeedLight.VPTimer.Callback)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.Callback), func) as NCSpeedLight.VPTimer.Callback;
				}

				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				NCSpeedLight.VPTimer.Handle arg4 = (NCSpeedLight.VPTimer.Handle)ToLua.ToObject(L, 5);
				NCSpeedLight.VPTimer.In(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(NCSpeedLight.VPTimer.ArgCallback), typeof(object), typeof(int), typeof(NCSpeedLight.VPTimer.Handle)))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				NCSpeedLight.VPTimer.ArgCallback arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (NCSpeedLight.VPTimer.ArgCallback)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.ArgCallback), func) as NCSpeedLight.VPTimer.ArgCallback;
				}

				object arg2 = ToLua.ToVarObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				NCSpeedLight.VPTimer.Handle arg4 = (NCSpeedLight.VPTimer.Handle)ToLua.ToObject(L, 5);
				NCSpeedLight.VPTimer.In(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(NCSpeedLight.VPTimer.ArgCallback), typeof(object), typeof(int), typeof(float), typeof(NCSpeedLight.VPTimer.Handle)))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				NCSpeedLight.VPTimer.ArgCallback arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (NCSpeedLight.VPTimer.ArgCallback)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.ArgCallback), func) as NCSpeedLight.VPTimer.ArgCallback;
				}

				object arg2 = ToLua.ToVarObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				NCSpeedLight.VPTimer.Handle arg5 = (NCSpeedLight.VPTimer.Handle)ToLua.ToObject(L, 6);
				NCSpeedLight.VPTimer.In(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NCSpeedLight.VPTimer.In");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NCSpeedLight.VPTimer.Handle arg0 = (NCSpeedLight.VPTimer.Handle)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.VPTimer.Handle));
			NCSpeedLight.VPTimer.Start(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NCSpeedLight.VPTimer.CancelAll();
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				NCSpeedLight.VPTimer.CancelAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NCSpeedLight.VPTimer.CancelAll");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NCSpeedLight.VPTimer.DestroyAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorGetStats(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NCSpeedLight.VPTimer.Stats o = NCSpeedLight.VPTimer.EditorGetStats();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorGetMethodInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = NCSpeedLight.VPTimer.EditorGetMethodInfo(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorGetMethodId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = NCSpeedLight.VPTimer.EditorGetMethodId(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxEventsPerFrame(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NCSpeedLight.VPTimer.MaxEventsPerFrame);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WasAddedCorrectly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.VPTimer obj = (NCSpeedLight.VPTimer)o;
			bool ret = obj.WasAddedCorrectly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WasAddedCorrectly on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxEventsPerFrame(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NCSpeedLight.VPTimer.MaxEventsPerFrame = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NCSpeedLight_VPTimer_Callback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.Callback), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.Callback), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NCSpeedLight_VPTimer_ArgCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.ArgCallback), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.VPTimer.ArgCallback), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

