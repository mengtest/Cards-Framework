//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_StreamWriterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.StreamWriter), typeof(System.IO.TextWriter));
		L.RegFunction("Flush", Flush);
		L.RegFunction("Write", Write);
		L.RegFunction("Close", Close);
		L.RegFunction("New", _CreateSystem_IO_StreamWriter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Null", get_Null, null);
		L.RegVar("AutoFlush", get_AutoFlush, set_AutoFlush);
		L.RegVar("BaseStream", get_BaseStream, null);
		L.RegVar("Encoding", get_Encoding, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_IO_StreamWriter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.Stream)))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject(L, 1, typeof(System.IO.Stream));
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(bool)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.Stream), typeof(System.Text.Encoding)))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject(L, 1, typeof(System.IO.Stream));
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.CheckObject(L, 2, typeof(System.Text.Encoding));
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(bool), typeof(System.Text.Encoding)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				System.Text.Encoding arg2 = (System.Text.Encoding)ToLua.CheckObject(L, 3, typeof(System.Text.Encoding));
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.Stream), typeof(System.Text.Encoding), typeof(int)))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject(L, 1, typeof(System.IO.Stream));
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.CheckObject(L, 2, typeof(System.Text.Encoding));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(bool), typeof(System.Text.Encoding), typeof(int)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				System.Text.Encoding arg2 = (System.Text.Encoding)ToLua.CheckObject(L, 3, typeof(System.Text.Encoding));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.IO.StreamWriter obj = new System.IO.StreamWriter(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.IO.StreamWriter.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.CheckObject(L, 1, typeof(System.IO.StreamWriter));
			obj.Flush();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(bool)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(double)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(string)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(char[])))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(object)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(string), typeof(object)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.Write(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(char[]), typeof(int), typeof(int)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(string), typeof(object), typeof(object)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(string), typeof(object), typeof(object), typeof(object)))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				obj.Write(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (TypeChecker.CheckTypes(L, 1, typeof(System.IO.StreamWriter), typeof(string)) && TypeChecker.CheckParamsType(L, typeof(object), 3, count - 2))
			{
				System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
				obj.Write(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.StreamWriter.Write");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.StreamWriter obj = (System.IO.StreamWriter)ToLua.CheckObject(L, 1, typeof(System.IO.StreamWriter));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.IO.StreamWriter.Null);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoFlush(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.StreamWriter obj = (System.IO.StreamWriter)o;
			bool ret = obj.AutoFlush;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AutoFlush on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.StreamWriter obj = (System.IO.StreamWriter)o;
			System.IO.Stream ret = obj.BaseStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BaseStream on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Encoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.StreamWriter obj = (System.IO.StreamWriter)o;
			System.Text.Encoding ret = obj.Encoding;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Encoding on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutoFlush(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.StreamWriter obj = (System.IO.StreamWriter)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AutoFlush = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AutoFlush on a nil value" : e.Message);
		}
	}
}

