//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NCSpeedLight_ServerConnection_ListenerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NCSpeedLight.ServerConnection.Listener), typeof(System.Object));
		L.RegFunction("New", _CreateNCSpeedLight_ServerConnection_Listener);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnConnected", get_OnConnected, set_OnConnected);
		L.RegVar("OnDisconnected", get_OnDisconnected, set_OnDisconnected);
		L.RegVar("OnReconnected", get_OnReconnected, set_OnReconnected);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNCSpeedLight_ServerConnection_Listener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NCSpeedLight.ServerConnection.Listener obj = new NCSpeedLight.ServerConnection.Listener();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NCSpeedLight.ServerConnection.Listener.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.ServerConnection.Listener obj = (NCSpeedLight.ServerConnection.Listener)o;
			NCSpeedLight.ServerConnection.ConnectionDelegate ret = obj.OnConnected;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnConnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.ServerConnection.Listener obj = (NCSpeedLight.ServerConnection.Listener)o;
			NCSpeedLight.ServerConnection.ConnectionDelegate ret = obj.OnDisconnected;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnDisconnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReconnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.ServerConnection.Listener obj = (NCSpeedLight.ServerConnection.Listener)o;
			NCSpeedLight.ServerConnection.ConnectionDelegate ret = obj.OnReconnected;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnReconnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.ServerConnection.Listener obj = (NCSpeedLight.ServerConnection.Listener)o;
			NCSpeedLight.ServerConnection.ConnectionDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NCSpeedLight.ServerConnection.ConnectionDelegate)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.ServerConnection.ConnectionDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.ServerConnection.ConnectionDelegate), func) as NCSpeedLight.ServerConnection.ConnectionDelegate;
			}

			obj.OnConnected = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnConnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.ServerConnection.Listener obj = (NCSpeedLight.ServerConnection.Listener)o;
			NCSpeedLight.ServerConnection.ConnectionDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NCSpeedLight.ServerConnection.ConnectionDelegate)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.ServerConnection.ConnectionDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.ServerConnection.ConnectionDelegate), func) as NCSpeedLight.ServerConnection.ConnectionDelegate;
			}

			obj.OnDisconnected = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnDisconnected on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReconnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NCSpeedLight.ServerConnection.Listener obj = (NCSpeedLight.ServerConnection.Listener)o;
			NCSpeedLight.ServerConnection.ConnectionDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NCSpeedLight.ServerConnection.ConnectionDelegate)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.ServerConnection.ConnectionDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.ServerConnection.ConnectionDelegate), func) as NCSpeedLight.ServerConnection.ConnectionDelegate;
			}

			obj.OnReconnected = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnReconnected on a nil value" : e.Message);
		}
	}
}

