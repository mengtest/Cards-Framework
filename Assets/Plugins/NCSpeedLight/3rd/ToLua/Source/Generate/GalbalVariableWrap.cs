//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GalbalVariableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("GalbalVariable");
		L.RegConstant("LOGIN_SERVER_PORT", 50000);
		L.RegConstant("UI_ROOT_HEIGHT", 720);
		L.RegConstant("UI_ROOT_WIDTH", 1224);
		L.RegVar("UI_PRFAB_BASE_DIRECTORY", get_UI_PRFAB_BASE_DIRECTORY, null);
		L.RegConstant("COPY_ID", 10001);
		L.RegVar("LOGIN_SERVER_ADDRESS", get_LOGIN_SERVER_ADDRESS, set_LOGIN_SERVER_ADDRESS);
		L.RegVar("IsSinglePlayer", get_IsSinglePlayer, set_IsSinglePlayer);
		L.RegVar("m_PlayersNode", get_m_PlayersNode, set_m_PlayersNode);
		L.RegVar("SCREEN_SCALE", get_SCREEN_SCALE, null);
		L.RegVar("UICamera", get_UICamera, null);
		L.RegVar("UIRoot", get_UIRoot, null);
		L.RegVar("DialogNode", get_DialogNode, null);
		L.RegVar("PlayersNode", get_PlayersNode, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UI_PRFAB_BASE_DIRECTORY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GalbalVariable.UI_PRFAB_BASE_DIRECTORY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LOGIN_SERVER_ADDRESS(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GalbalVariable.LOGIN_SERVER_ADDRESS);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSinglePlayer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GalbalVariable.IsSinglePlayer);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_PlayersNode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GalbalVariable.m_PlayersNode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SCREEN_SCALE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GalbalVariable.SCREEN_SCALE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UICamera(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GalbalVariable.UICamera);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRoot(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GalbalVariable.UIRoot);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DialogNode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GalbalVariable.DialogNode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlayersNode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GalbalVariable.PlayersNode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LOGIN_SERVER_ADDRESS(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GalbalVariable.LOGIN_SERVER_ADDRESS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsSinglePlayer(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GalbalVariable.IsSinglePlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_PlayersNode(IntPtr L)
	{
		try
		{
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			GalbalVariable.m_PlayersNode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

