//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SceneWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Scene), typeof(State));
		L.RegFunction("RegisterEvent", RegisterEvent);
		L.RegFunction("UnregisterEvent", UnregisterEvent);
		L.RegFunction("NotifyEvent", NotifyEvent);
		L.RegFunction("Begin", Begin);
		L.RegFunction("Update", Update);
		L.RegFunction("End", End);
		L.RegFunction("New", _CreateScene);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EventManager", get_EventManager, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Scene obj = new Scene(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Scene.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Scene obj = (Scene)ToLua.CheckObject(L, 1, typeof(Scene));
			SceneEventType arg0 = (SceneEventType)ToLua.CheckObject(L, 2, typeof(SceneEventType));
			EventHandlerDelegate arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (EventHandlerDelegate)ToLua.CheckObject(L, 3, typeof(EventHandlerDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(EventHandlerDelegate), func) as EventHandlerDelegate;
			}

			obj.RegisterEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Scene obj = (Scene)ToLua.CheckObject(L, 1, typeof(Scene));
			SceneEventType arg0 = (SceneEventType)ToLua.CheckObject(L, 2, typeof(SceneEventType));
			EventHandlerDelegate arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (EventHandlerDelegate)ToLua.CheckObject(L, 3, typeof(EventHandlerDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(EventHandlerDelegate), func) as EventHandlerDelegate;
			}

			obj.UnregisterEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Scene obj = (Scene)ToLua.CheckObject(L, 1, typeof(Scene));
			Evt arg0 = (Evt)ToLua.CheckObject(L, 2, typeof(Evt));
			obj.NotifyEvent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Begin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Scene obj = (Scene)ToLua.CheckObject(L, 1, typeof(Scene));
			obj.Begin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Scene obj = (Scene)ToLua.CheckObject(L, 1, typeof(Scene));
			obj.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int End(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Scene obj = (Scene)ToLua.CheckObject(L, 1, typeof(Scene));
			obj.End();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Scene obj = (Scene)o;
			SceneEventManager ret = obj.EventManager;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EventManager on a nil value" : e.Message);
		}
	}
}

