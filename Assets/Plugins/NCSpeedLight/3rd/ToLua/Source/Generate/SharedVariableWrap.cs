//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SharedVariableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("SharedVariable");
		L.RegConstant("LOGIN_SERVER_PORT", 50000);
		L.RegConstant("UI_ROOT_HEIGHT", 720);
		L.RegConstant("UI_ROOT_WIDTH", 1224);
		L.RegConstant("COPY_ID", 10001);
		L.RegVar("LOGIN_SERVER_ADDRESS", get_LOGIN_SERVER_ADDRESS, set_LOGIN_SERVER_ADDRESS);
		L.RegVar("IsSinglePlayer", get_IsSinglePlayer, set_IsSinglePlayer);
		L.RegVar("GAME_NAME", get_GAME_NAME, set_GAME_NAME);
		L.RegVar("SCREEN_SCALE", get_SCREEN_SCALE, null);
		L.RegVar("DATA_PATH", get_DATA_PATH, null);
		L.RegVar("APP_CONTENT_PATH", get_APP_CONTENT_PATH, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LOGIN_SERVER_ADDRESS(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SharedVariable.LOGIN_SERVER_ADDRESS);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSinglePlayer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SharedVariable.IsSinglePlayer);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GAME_NAME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SharedVariable.GAME_NAME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SCREEN_SCALE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, SharedVariable.SCREEN_SCALE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DATA_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SharedVariable.DATA_PATH);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_APP_CONTENT_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SharedVariable.APP_CONTENT_PATH);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LOGIN_SERVER_ADDRESS(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			SharedVariable.LOGIN_SERVER_ADDRESS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsSinglePlayer(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SharedVariable.IsSinglePlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GAME_NAME(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			SharedVariable.GAME_NAME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

