//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ServerConnection_ListenerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ServerConnection.Listener), typeof(System.Object));
		L.RegFunction("New", _CreateServerConnection_Listener);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnConnect", get_OnConnect, set_OnConnect);
		L.RegVar("OnUpdate", get_OnUpdate, set_OnUpdate);
		L.RegVar("OnDisconnect", get_OnDisconnect, set_OnDisconnect);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateServerConnection_Listener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ServerConnection.Listener obj = new ServerConnection.Listener();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ServerConnection.Listener.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ServerConnection.Listener obj = (ServerConnection.Listener)o;
			ServerConnection.ConnectionDelegate ret = obj.OnConnect;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnConnect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ServerConnection.Listener obj = (ServerConnection.Listener)o;
			ServerConnection.ConnectionDelegate ret = obj.OnUpdate;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnUpdate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisconnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ServerConnection.Listener obj = (ServerConnection.Listener)o;
			ServerConnection.ConnectionDelegate ret = obj.OnDisconnect;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnDisconnect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ServerConnection.Listener obj = (ServerConnection.Listener)o;
			ServerConnection.ConnectionDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ServerConnection.ConnectionDelegate)ToLua.CheckObject(L, 2, typeof(ServerConnection.ConnectionDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ServerConnection.ConnectionDelegate), func) as ServerConnection.ConnectionDelegate;
			}

			obj.OnConnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnConnect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ServerConnection.Listener obj = (ServerConnection.Listener)o;
			ServerConnection.ConnectionDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ServerConnection.ConnectionDelegate)ToLua.CheckObject(L, 2, typeof(ServerConnection.ConnectionDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ServerConnection.ConnectionDelegate), func) as ServerConnection.ConnectionDelegate;
			}

			obj.OnUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnUpdate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisconnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ServerConnection.Listener obj = (ServerConnection.Listener)o;
			ServerConnection.ConnectionDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ServerConnection.ConnectionDelegate)ToLua.CheckObject(L, 2, typeof(ServerConnection.ConnectionDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ServerConnection.ConnectionDelegate), func) as ServerConnection.ConnectionDelegate;
			}

			obj.OnDisconnect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnDisconnect on a nil value" : e.Message);
		}
	}
}

