//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIButtonKeysWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIButtonKeys), typeof(UIKeyNavigation));
		L.RegFunction("Upgrade", Upgrade);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("selectOnClick", get_selectOnClick, set_selectOnClick);
		L.RegVar("selectOnUp", get_selectOnUp, set_selectOnUp);
		L.RegVar("selectOnDown", get_selectOnDown, set_selectOnDown);
		L.RegVar("selectOnLeft", get_selectOnLeft, set_selectOnLeft);
		L.RegVar("selectOnRight", get_selectOnRight, set_selectOnRight);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Upgrade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIButtonKeys obj = (UIButtonKeys)ToLua.CheckObject(L, 1, typeof(UIButtonKeys));
			obj.Upgrade();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectOnClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys ret = obj.selectOnClick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnClick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectOnUp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys ret = obj.selectOnUp;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnUp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectOnDown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys ret = obj.selectOnDown;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnDown on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectOnLeft(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys ret = obj.selectOnLeft;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnLeft on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectOnRight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys ret = obj.selectOnRight;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnRight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectOnClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys arg0 = (UIButtonKeys)ToLua.CheckUnityObject(L, 2, typeof(UIButtonKeys));
			obj.selectOnClick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnClick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectOnUp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys arg0 = (UIButtonKeys)ToLua.CheckUnityObject(L, 2, typeof(UIButtonKeys));
			obj.selectOnUp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnUp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectOnDown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys arg0 = (UIButtonKeys)ToLua.CheckUnityObject(L, 2, typeof(UIButtonKeys));
			obj.selectOnDown = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnDown on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectOnLeft(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys arg0 = (UIButtonKeys)ToLua.CheckUnityObject(L, 2, typeof(UIButtonKeys));
			obj.selectOnLeft = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnLeft on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectOnRight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIButtonKeys obj = (UIButtonKeys)o;
			UIButtonKeys arg0 = (UIButtonKeys)ToLua.CheckUnityObject(L, 2, typeof(UIButtonKeys));
			obj.selectOnRight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index selectOnRight on a nil value" : e.Message);
		}
	}
}

