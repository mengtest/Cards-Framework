//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StateMachineWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(StateMachine), typeof(System.Object));
		L.RegFunction("Update", Update);
		L.RegFunction("GetState", GetState);
		L.RegFunction("RegisterState", RegisterState);
		L.RegFunction("UnRegisterState", UnRegisterState);
		L.RegFunction("SetNextState", SetNextState);
		L.RegFunction("GetNextState", GetNextState);
		L.RegFunction("GetCurrentState", GetCurrentState);
		L.RegFunction("GetLastState", GetLastState);
		L.RegFunction("New", _CreateStateMachine);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateStateMachine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				StateMachine obj = new StateMachine();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: StateMachine.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			obj.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			string arg0 = ToLua.CheckString(L, 2);
			State o = obj.GetState(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			State arg0 = (State)ToLua.CheckObject(L, 2, typeof(State));
			bool o = obj.RegisterState(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.UnRegisterState(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNextState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SetNextState(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			State o = obj.GetNextState();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			State o = obj.GetCurrentState();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			StateMachine obj = (StateMachine)ToLua.CheckObject(L, 1, typeof(StateMachine));
			State o = obj.GetLastState();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

