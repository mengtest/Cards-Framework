//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NCSpeedLight_NetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NCSpeedLight.NetManager), typeof(System.Object));
		L.RegFunction("CreateConnection", CreateConnection);
		L.RegFunction("DeleteConnection", DeleteConnection);
		L.RegFunction("GetConnection", GetConnection);
		L.RegFunction("Update", Update);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("SendNetPacket", SendNetPacket);
		L.RegFunction("New", _CreateNCSpeedLight_NetManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrentLatency", get_CurrentLatency, set_CurrentLatency);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNCSpeedLight_NetManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NCSpeedLight.NetManager obj = new NCSpeedLight.NetManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NCSpeedLight.NetManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			NCSpeedLight.NetManager obj = (NCSpeedLight.NetManager)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.NetManager));
			NCSpeedLight.NetManager.ServerType arg0 = (NCSpeedLight.NetManager.ServerType)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.NetManager.ServerType));
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			NCSpeedLight.NetConnection.StateListener arg3 = (NCSpeedLight.NetConnection.StateListener)ToLua.CheckObject(L, 5, typeof(NCSpeedLight.NetConnection.StateListener));
			bool o = obj.CreateConnection(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NCSpeedLight.NetManager obj = (NCSpeedLight.NetManager)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.NetManager));
			NCSpeedLight.NetManager.ServerType arg0 = (NCSpeedLight.NetManager.ServerType)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.NetManager.ServerType));
			obj.DeleteConnection(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NCSpeedLight.NetManager obj = (NCSpeedLight.NetManager)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.NetManager));
			NCSpeedLight.NetManager.ServerType arg0 = (NCSpeedLight.NetManager.ServerType)ToLua.CheckObject(L, 2, typeof(NCSpeedLight.NetManager.ServerType));
			NCSpeedLight.NetConnection o = obj.GetConnection(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NCSpeedLight.NetManager obj = (NCSpeedLight.NetManager)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.NetManager));
			obj.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NCSpeedLight.NetManager obj = (NCSpeedLight.NetManager)ToLua.CheckObject(L, 1, typeof(NCSpeedLight.NetManager));
			obj.Destroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendNetPacket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			NCSpeedLight.NetManager.SendNetPacket(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentLatency(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NCSpeedLight.NetManager.CurrentLatency);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NCSpeedLight.NetManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentLatency(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NCSpeedLight.NetManager.CurrentLatency = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

