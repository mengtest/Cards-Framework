//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NCSpeedLight_ResManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NCSpeedLight.ResManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("LoadAssetSync", LoadAssetSync);
		L.RegFunction("LoadAssetAsync", LoadAssetAsync);
		L.RegFunction("InProgress", InProgress);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AssetBundleSourceURL", get_AssetBundleSourceURL, set_AssetBundleSourceURL);
		L.RegVar("AssetBundleSourceDirectory", get_AssetBundleSourceDirectory, set_AssetBundleSourceDirectory);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("IsInitialized", get_IsInitialized, set_IsInitialized);
		L.RegVar("PostResManagerInitialized", get_PostResManagerInitialized, set_PostResManagerInitialized);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NCSpeedLight.ResManager.Initialize();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetSync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Type)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				UnityEngine.Object o = NCSpeedLight.ResManager.LoadAssetSync(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.Object o = NCSpeedLight.ResManager.LoadAssetSync(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NCSpeedLight.ResManager.LoadAssetSync");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Type), typeof(NCSpeedLight.LoadAssetCallback), typeof(object)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				NCSpeedLight.LoadAssetCallback arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (NCSpeedLight.LoadAssetCallback)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.LoadAssetCallback), func) as NCSpeedLight.LoadAssetCallback;
				}

				object arg3 = ToLua.ToVarObject(L, 4);
				NCSpeedLight.LoadAssetOperation o = NCSpeedLight.ResManager.LoadAssetAsync(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Type), typeof(bool), typeof(NCSpeedLight.LoadAssetCallback), typeof(object)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				NCSpeedLight.LoadAssetCallback arg3 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg3 = (NCSpeedLight.LoadAssetCallback)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg3 = DelegateFactory.CreateDelegate(typeof(NCSpeedLight.LoadAssetCallback), func) as NCSpeedLight.LoadAssetCallback;
				}

				object arg4 = ToLua.ToVarObject(L, 5);
				NCSpeedLight.LoadAssetOperation o = NCSpeedLight.ResManager.LoadAssetAsync(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NCSpeedLight.ResManager.LoadAssetAsync");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InProgress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NCSpeedLight.LoadAssetOperation o = NCSpeedLight.ResManager.InProgress(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetBundleSourceURL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NCSpeedLight.ResManager.AssetBundleSourceURL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetBundleSourceDirectory(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NCSpeedLight.ResManager.AssetBundleSourceDirectory);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NCSpeedLight.ResManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsInitialized(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NCSpeedLight.ResManager.IsInitialized);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PostResManagerInitialized(IntPtr L)
	{
		ToLua.Push(L, new EventObject("NCSpeedLight.ResManager.PostResManagerInitialized"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetBundleSourceURL(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			NCSpeedLight.ResManager.AssetBundleSourceURL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetBundleSourceDirectory(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			NCSpeedLight.ResManager.AssetBundleSourceDirectory = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			NCSpeedLight.ResManager arg0 = (NCSpeedLight.ResManager)ToLua.CheckUnityObject(L, 2, typeof(NCSpeedLight.ResManager));
			NCSpeedLight.ResManager.Instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsInitialized(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NCSpeedLight.ResManager.IsInitialized = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PostResManagerInitialized(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'NCSpeedLight.ResManager.PostResManagerInitialized' can only appear on the left hand side of += or -= when used outside of the type 'NCSpeedLight.ResManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				NCSpeedLight.PostResManagerInitializedDelegate ev = (NCSpeedLight.PostResManagerInitializedDelegate)DelegateFactory.CreateDelegate(typeof(NCSpeedLight.PostResManagerInitializedDelegate), arg0.func);
				NCSpeedLight.ResManager.PostResManagerInitialized += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				NCSpeedLight.PostResManagerInitializedDelegate ev = (NCSpeedLight.PostResManagerInitializedDelegate)LuaMisc.GetEventHandler(null, typeof(NCSpeedLight.ResManager), "PostResManagerInitialized");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (NCSpeedLight.PostResManagerInitializedDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						NCSpeedLight.ResManager.PostResManagerInitialized -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

