// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_systemset.txt

#ifndef PROTOBUF_SP_5fsystemset_2etxt__INCLUDED
#define PROTOBUF_SP_5fsystemset_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fsystemset_2etxt();
void protobuf_AssignDesc_SP_5fsystemset_2etxt();
void protobuf_ShutdownFile_SP_5fsystemset_2etxt();

class SM_SystemSet_cdkey_request;
class SM_SystemSet_cdkey_subdata;
class SM_SystemSet_cdkey_return;
class SM_SystemSet_data_request;

// ===================================================================

class SM_SystemSet_cdkey_request : public ::google::protobuf::Message {
 public:
  SM_SystemSet_cdkey_request();
  virtual ~SM_SystemSet_cdkey_request();

  SM_SystemSet_cdkey_request(const SM_SystemSet_cdkey_request& from);

  inline SM_SystemSet_cdkey_request& operator=(const SM_SystemSet_cdkey_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_SystemSet_cdkey_request& default_instance();

  void Swap(SM_SystemSet_cdkey_request* other);

  // implements Message ----------------------------------------------

  SM_SystemSet_cdkey_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_SystemSet_cdkey_request& from);
  void MergeFrom(const SM_SystemSet_cdkey_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_serverid = 1;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // required int32 m_roleid = 2;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 2;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // required string m_cdkey = 3;
  inline bool has_m_cdkey() const;
  inline void clear_m_cdkey();
  static const int kMCdkeyFieldNumber = 3;
  inline const ::std::string& m_cdkey() const;
  inline void set_m_cdkey(const ::std::string& value);
  inline void set_m_cdkey(const char* value);
  inline void set_m_cdkey(const char* value, size_t size);
  inline ::std::string* mutable_m_cdkey();
  inline ::std::string* release_m_cdkey();
  inline void set_allocated_m_cdkey(::std::string* m_cdkey);

  // @@protoc_insertion_point(class_scope:SM_SystemSet_cdkey_request)
 private:
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_cdkey();
  inline void clear_has_m_cdkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_serverid_;
  ::google::protobuf::int32 m_roleid_;
  ::std::string* m_cdkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fsystemset_2etxt();
  friend void protobuf_AssignDesc_SP_5fsystemset_2etxt();
  friend void protobuf_ShutdownFile_SP_5fsystemset_2etxt();

  void InitAsDefaultInstance();
  static SM_SystemSet_cdkey_request* default_instance_;
};
// -------------------------------------------------------------------

class SM_SystemSet_cdkey_subdata : public ::google::protobuf::Message {
 public:
  SM_SystemSet_cdkey_subdata();
  virtual ~SM_SystemSet_cdkey_subdata();

  SM_SystemSet_cdkey_subdata(const SM_SystemSet_cdkey_subdata& from);

  inline SM_SystemSet_cdkey_subdata& operator=(const SM_SystemSet_cdkey_subdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_SystemSet_cdkey_subdata& default_instance();

  void Swap(SM_SystemSet_cdkey_subdata* other);

  // implements Message ----------------------------------------------

  SM_SystemSet_cdkey_subdata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_SystemSet_cdkey_subdata& from);
  void MergeFrom(const SM_SystemSet_cdkey_subdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objectid = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // required int32 m_objectnum = 2;
  inline bool has_m_objectnum() const;
  inline void clear_m_objectnum();
  static const int kMObjectnumFieldNumber = 2;
  inline ::google::protobuf::int32 m_objectnum() const;
  inline void set_m_objectnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_SystemSet_cdkey_subdata)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_objectnum();
  inline void clear_has_m_objectnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::int32 m_objectnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fsystemset_2etxt();
  friend void protobuf_AssignDesc_SP_5fsystemset_2etxt();
  friend void protobuf_ShutdownFile_SP_5fsystemset_2etxt();

  void InitAsDefaultInstance();
  static SM_SystemSet_cdkey_subdata* default_instance_;
};
// -------------------------------------------------------------------

class SM_SystemSet_cdkey_return : public ::google::protobuf::Message {
 public:
  SM_SystemSet_cdkey_return();
  virtual ~SM_SystemSet_cdkey_return();

  SM_SystemSet_cdkey_return(const SM_SystemSet_cdkey_return& from);

  inline SM_SystemSet_cdkey_return& operator=(const SM_SystemSet_cdkey_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_SystemSet_cdkey_return& default_instance();

  void Swap(SM_SystemSet_cdkey_return* other);

  // implements Message ----------------------------------------------

  SM_SystemSet_cdkey_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_SystemSet_cdkey_return& from);
  void MergeFrom(const SM_SystemSet_cdkey_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 m_typeid = 2;
  inline bool has_m_typeid() const;
  inline void clear_m_typeid();
  static const int kMTypeidFieldNumber = 2;
  inline ::google::protobuf::int32 m_typeid() const;
  inline void set_m_typeid(::google::protobuf::int32 value);

  // optional string m_cdkey = 3;
  inline bool has_m_cdkey() const;
  inline void clear_m_cdkey();
  static const int kMCdkeyFieldNumber = 3;
  inline const ::std::string& m_cdkey() const;
  inline void set_m_cdkey(const ::std::string& value);
  inline void set_m_cdkey(const char* value);
  inline void set_m_cdkey(const char* value, size_t size);
  inline ::std::string* mutable_m_cdkey();
  inline ::std::string* release_m_cdkey();
  inline void set_allocated_m_cdkey(::std::string* m_cdkey);

  // optional int32 m_cdtype = 4;
  inline bool has_m_cdtype() const;
  inline void clear_m_cdtype();
  static const int kMCdtypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_cdtype() const;
  inline void set_m_cdtype(::google::protobuf::int32 value);

  // optional string m_name = 5;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 5;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // @@protoc_insertion_point(class_scope:SM_SystemSet_cdkey_return)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_typeid();
  inline void clear_has_m_typeid();
  inline void set_has_m_cdkey();
  inline void clear_has_m_cdkey();
  inline void set_has_m_cdtype();
  inline void clear_has_m_cdtype();
  inline void set_has_m_name();
  inline void clear_has_m_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_typeid_;
  ::std::string* m_cdkey_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_cdtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fsystemset_2etxt();
  friend void protobuf_AssignDesc_SP_5fsystemset_2etxt();
  friend void protobuf_ShutdownFile_SP_5fsystemset_2etxt();

  void InitAsDefaultInstance();
  static SM_SystemSet_cdkey_return* default_instance_;
};
// -------------------------------------------------------------------

class SM_SystemSet_data_request : public ::google::protobuf::Message {
 public:
  SM_SystemSet_data_request();
  virtual ~SM_SystemSet_data_request();

  SM_SystemSet_data_request(const SM_SystemSet_data_request& from);

  inline SM_SystemSet_data_request& operator=(const SM_SystemSet_data_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_SystemSet_data_request& default_instance();

  void Swap(SM_SystemSet_data_request* other);

  // implements Message ----------------------------------------------

  SM_SystemSet_data_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_SystemSet_data_request& from);
  void MergeFrom(const SM_SystemSet_data_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_serverid = 1;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // required int32 m_accountid = 2;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountidFieldNumber = 2;
  inline ::google::protobuf::int32 m_accountid() const;
  inline void set_m_accountid(::google::protobuf::int32 value);

  // required int32 m_roleid = 3;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 3;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_SystemSet_data_request)
 private:
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_serverid_;
  ::google::protobuf::int32 m_accountid_;
  ::google::protobuf::int32 m_roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fsystemset_2etxt();
  friend void protobuf_AssignDesc_SP_5fsystemset_2etxt();
  friend void protobuf_ShutdownFile_SP_5fsystemset_2etxt();

  void InitAsDefaultInstance();
  static SM_SystemSet_data_request* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_SystemSet_cdkey_request

// required int32 m_serverid = 1;
inline bool SM_SystemSet_cdkey_request::has_m_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_SystemSet_cdkey_request::set_has_m_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_SystemSet_cdkey_request::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_SystemSet_cdkey_request::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_request::m_serverid() const {
  return m_serverid_;
}
inline void SM_SystemSet_cdkey_request::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// required int32 m_roleid = 2;
inline bool SM_SystemSet_cdkey_request::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_SystemSet_cdkey_request::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_SystemSet_cdkey_request::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_SystemSet_cdkey_request::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_request::m_roleid() const {
  return m_roleid_;
}
inline void SM_SystemSet_cdkey_request::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// required string m_cdkey = 3;
inline bool SM_SystemSet_cdkey_request::has_m_cdkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_SystemSet_cdkey_request::set_has_m_cdkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_SystemSet_cdkey_request::clear_has_m_cdkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_SystemSet_cdkey_request::clear_m_cdkey() {
  if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    m_cdkey_->clear();
  }
  clear_has_m_cdkey();
}
inline const ::std::string& SM_SystemSet_cdkey_request::m_cdkey() const {
  return *m_cdkey_;
}
inline void SM_SystemSet_cdkey_request::set_m_cdkey(const ::std::string& value) {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  m_cdkey_->assign(value);
}
inline void SM_SystemSet_cdkey_request::set_m_cdkey(const char* value) {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  m_cdkey_->assign(value);
}
inline void SM_SystemSet_cdkey_request::set_m_cdkey(const char* value, size_t size) {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  m_cdkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_SystemSet_cdkey_request::mutable_m_cdkey() {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  return m_cdkey_;
}
inline ::std::string* SM_SystemSet_cdkey_request::release_m_cdkey() {
  clear_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_cdkey_;
    m_cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_SystemSet_cdkey_request::set_allocated_m_cdkey(::std::string* m_cdkey) {
  if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_cdkey_;
  }
  if (m_cdkey) {
    set_has_m_cdkey();
    m_cdkey_ = m_cdkey;
  } else {
    clear_has_m_cdkey();
    m_cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SM_SystemSet_cdkey_subdata

// required int32 m_objectid = 1;
inline bool SM_SystemSet_cdkey_subdata::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_SystemSet_cdkey_subdata::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_SystemSet_cdkey_subdata::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_SystemSet_cdkey_subdata::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_subdata::m_objectid() const {
  return m_objectid_;
}
inline void SM_SystemSet_cdkey_subdata::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// required int32 m_objectnum = 2;
inline bool SM_SystemSet_cdkey_subdata::has_m_objectnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_SystemSet_cdkey_subdata::set_has_m_objectnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_SystemSet_cdkey_subdata::clear_has_m_objectnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_SystemSet_cdkey_subdata::clear_m_objectnum() {
  m_objectnum_ = 0;
  clear_has_m_objectnum();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_subdata::m_objectnum() const {
  return m_objectnum_;
}
inline void SM_SystemSet_cdkey_subdata::set_m_objectnum(::google::protobuf::int32 value) {
  set_has_m_objectnum();
  m_objectnum_ = value;
}

// -------------------------------------------------------------------

// SM_SystemSet_cdkey_return

// required int32 m_result = 1;
inline bool SM_SystemSet_cdkey_return::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_SystemSet_cdkey_return::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_SystemSet_cdkey_return::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_SystemSet_cdkey_return::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_return::m_result() const {
  return m_result_;
}
inline void SM_SystemSet_cdkey_return::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 m_typeid = 2;
inline bool SM_SystemSet_cdkey_return::has_m_typeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_SystemSet_cdkey_return::set_has_m_typeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_SystemSet_cdkey_return::clear_has_m_typeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_SystemSet_cdkey_return::clear_m_typeid() {
  m_typeid_ = 0;
  clear_has_m_typeid();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_return::m_typeid() const {
  return m_typeid_;
}
inline void SM_SystemSet_cdkey_return::set_m_typeid(::google::protobuf::int32 value) {
  set_has_m_typeid();
  m_typeid_ = value;
}

// optional string m_cdkey = 3;
inline bool SM_SystemSet_cdkey_return::has_m_cdkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_SystemSet_cdkey_return::set_has_m_cdkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_SystemSet_cdkey_return::clear_has_m_cdkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_SystemSet_cdkey_return::clear_m_cdkey() {
  if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    m_cdkey_->clear();
  }
  clear_has_m_cdkey();
}
inline const ::std::string& SM_SystemSet_cdkey_return::m_cdkey() const {
  return *m_cdkey_;
}
inline void SM_SystemSet_cdkey_return::set_m_cdkey(const ::std::string& value) {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  m_cdkey_->assign(value);
}
inline void SM_SystemSet_cdkey_return::set_m_cdkey(const char* value) {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  m_cdkey_->assign(value);
}
inline void SM_SystemSet_cdkey_return::set_m_cdkey(const char* value, size_t size) {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  m_cdkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_SystemSet_cdkey_return::mutable_m_cdkey() {
  set_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    m_cdkey_ = new ::std::string;
  }
  return m_cdkey_;
}
inline ::std::string* SM_SystemSet_cdkey_return::release_m_cdkey() {
  clear_has_m_cdkey();
  if (m_cdkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_cdkey_;
    m_cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_SystemSet_cdkey_return::set_allocated_m_cdkey(::std::string* m_cdkey) {
  if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_cdkey_;
  }
  if (m_cdkey) {
    set_has_m_cdkey();
    m_cdkey_ = m_cdkey;
  } else {
    clear_has_m_cdkey();
    m_cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_cdtype = 4;
inline bool SM_SystemSet_cdkey_return::has_m_cdtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_SystemSet_cdkey_return::set_has_m_cdtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_SystemSet_cdkey_return::clear_has_m_cdtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_SystemSet_cdkey_return::clear_m_cdtype() {
  m_cdtype_ = 0;
  clear_has_m_cdtype();
}
inline ::google::protobuf::int32 SM_SystemSet_cdkey_return::m_cdtype() const {
  return m_cdtype_;
}
inline void SM_SystemSet_cdkey_return::set_m_cdtype(::google::protobuf::int32 value) {
  set_has_m_cdtype();
  m_cdtype_ = value;
}

// optional string m_name = 5;
inline bool SM_SystemSet_cdkey_return::has_m_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_SystemSet_cdkey_return::set_has_m_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_SystemSet_cdkey_return::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_SystemSet_cdkey_return::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& SM_SystemSet_cdkey_return::m_name() const {
  return *m_name_;
}
inline void SM_SystemSet_cdkey_return::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void SM_SystemSet_cdkey_return::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void SM_SystemSet_cdkey_return::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_SystemSet_cdkey_return::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* SM_SystemSet_cdkey_return::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_SystemSet_cdkey_return::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SM_SystemSet_data_request

// required int32 m_serverid = 1;
inline bool SM_SystemSet_data_request::has_m_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_SystemSet_data_request::set_has_m_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_SystemSet_data_request::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_SystemSet_data_request::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 SM_SystemSet_data_request::m_serverid() const {
  return m_serverid_;
}
inline void SM_SystemSet_data_request::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// required int32 m_accountid = 2;
inline bool SM_SystemSet_data_request::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_SystemSet_data_request::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_SystemSet_data_request::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_SystemSet_data_request::clear_m_accountid() {
  m_accountid_ = 0;
  clear_has_m_accountid();
}
inline ::google::protobuf::int32 SM_SystemSet_data_request::m_accountid() const {
  return m_accountid_;
}
inline void SM_SystemSet_data_request::set_m_accountid(::google::protobuf::int32 value) {
  set_has_m_accountid();
  m_accountid_ = value;
}

// required int32 m_roleid = 3;
inline bool SM_SystemSet_data_request::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_SystemSet_data_request::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_SystemSet_data_request::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_SystemSet_data_request::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 SM_SystemSet_data_request::m_roleid() const {
  return m_roleid_;
}
inline void SM_SystemSet_data_request::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fsystemset_2etxt__INCLUDED
