// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_battle.txt

#ifndef PROTOBUF_SP_5fbattle_2etxt__INCLUDED
#define PROTOBUF_SP_5fbattle_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fbattle_2etxt();
void protobuf_AssignDesc_SP_5fbattle_2etxt();
void protobuf_ShutdownFile_SP_5fbattle_2etxt();

class SM_ChallengeReturn;
class GM_CenterGmidVServer;

// ===================================================================

class SM_ChallengeReturn : public ::google::protobuf::Message {
 public:
  SM_ChallengeReturn();
  virtual ~SM_ChallengeReturn();

  SM_ChallengeReturn(const SM_ChallengeReturn& from);

  inline SM_ChallengeReturn& operator=(const SM_ChallengeReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_ChallengeReturn& default_instance();

  void Swap(SM_ChallengeReturn* other);

  // implements Message ----------------------------------------------

  SM_ChallengeReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_ChallengeReturn& from);
  void MergeFrom(const SM_ChallengeReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 roleList = 1;
  inline int rolelist_size() const;
  inline void clear_rolelist();
  static const int kRoleListFieldNumber = 1;
  inline ::google::protobuf::uint32 rolelist(int index) const;
  inline void set_rolelist(int index, ::google::protobuf::uint32 value);
  inline void add_rolelist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rolelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rolelist();

  // required uint32 fbAllPlayerNum = 2;
  inline bool has_fballplayernum() const;
  inline void clear_fballplayernum();
  static const int kFbAllPlayerNumFieldNumber = 2;
  inline ::google::protobuf::uint32 fballplayernum() const;
  inline void set_fballplayernum(::google::protobuf::uint32 value);

  // optional string m_fbIp = 3;
  inline bool has_m_fbip() const;
  inline void clear_m_fbip();
  static const int kMFbIpFieldNumber = 3;
  inline const ::std::string& m_fbip() const;
  inline void set_m_fbip(const ::std::string& value);
  inline void set_m_fbip(const char* value);
  inline void set_m_fbip(const char* value, size_t size);
  inline ::std::string* mutable_m_fbip();
  inline ::std::string* release_m_fbip();
  inline void set_allocated_m_fbip(::std::string* m_fbip);

  // optional int32 m_addfbid = 4;
  inline bool has_m_addfbid() const;
  inline void clear_m_addfbid();
  static const int kMAddfbidFieldNumber = 4;
  inline ::google::protobuf::int32 m_addfbid() const;
  inline void set_m_addfbid(::google::protobuf::int32 value);

  // optional int32 m_fbtypeid = 5;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFbtypeidFieldNumber = 5;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // repeated .GM_CenterGmidVServer m_roleinfo = 6;
  inline int m_roleinfo_size() const;
  inline void clear_m_roleinfo();
  static const int kMRoleinfoFieldNumber = 6;
  inline const ::GM_CenterGmidVServer& m_roleinfo(int index) const;
  inline ::GM_CenterGmidVServer* mutable_m_roleinfo(int index);
  inline ::GM_CenterGmidVServer* add_m_roleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_CenterGmidVServer >&
      m_roleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_CenterGmidVServer >*
      mutable_m_roleinfo();

  // optional string m_playWay = 7;
  inline bool has_m_playway() const;
  inline void clear_m_playway();
  static const int kMPlayWayFieldNumber = 7;
  inline const ::std::string& m_playway() const;
  inline void set_m_playway(const ::std::string& value);
  inline void set_m_playway(const char* value);
  inline void set_m_playway(const char* value, size_t size);
  inline ::std::string* mutable_m_playway();
  inline ::std::string* release_m_playway();
  inline void set_allocated_m_playway(::std::string* m_playway);

  // optional int32 m_playerCount = 8;
  inline bool has_m_playercount() const;
  inline void clear_m_playercount();
  static const int kMPlayerCountFieldNumber = 8;
  inline ::google::protobuf::int32 m_playercount() const;
  inline void set_m_playercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_ChallengeReturn)
 private:
  inline void set_has_fballplayernum();
  inline void clear_has_fballplayernum();
  inline void set_has_m_fbip();
  inline void clear_has_m_fbip();
  inline void set_has_m_addfbid();
  inline void clear_has_m_addfbid();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_playway();
  inline void clear_has_m_playway();
  inline void set_has_m_playercount();
  inline void clear_has_m_playercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rolelist_;
  ::std::string* m_fbip_;
  ::google::protobuf::uint32 fballplayernum_;
  ::google::protobuf::int32 m_addfbid_;
  ::google::protobuf::RepeatedPtrField< ::GM_CenterGmidVServer > m_roleinfo_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 m_playercount_;
  ::std::string* m_playway_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fbattle_2etxt();
  friend void protobuf_AssignDesc_SP_5fbattle_2etxt();
  friend void protobuf_ShutdownFile_SP_5fbattle_2etxt();

  void InitAsDefaultInstance();
  static SM_ChallengeReturn* default_instance_;
};
// -------------------------------------------------------------------

class GM_CenterGmidVServer : public ::google::protobuf::Message {
 public:
  GM_CenterGmidVServer();
  virtual ~GM_CenterGmidVServer();

  GM_CenterGmidVServer(const GM_CenterGmidVServer& from);

  inline GM_CenterGmidVServer& operator=(const GM_CenterGmidVServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_CenterGmidVServer& default_instance();

  void Swap(GM_CenterGmidVServer* other);

  // implements Message ----------------------------------------------

  GM_CenterGmidVServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_CenterGmidVServer& from);
  void MergeFrom(const GM_CenterGmidVServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_serverId = 1;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // optional int32 m_rolegmid = 2;
  inline bool has_m_rolegmid() const;
  inline void clear_m_rolegmid();
  static const int kMRolegmidFieldNumber = 2;
  inline ::google::protobuf::int32 m_rolegmid() const;
  inline void set_m_rolegmid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_CenterGmidVServer)
 private:
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();
  inline void set_has_m_rolegmid();
  inline void clear_has_m_rolegmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_serverid_;
  ::google::protobuf::int32 m_rolegmid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fbattle_2etxt();
  friend void protobuf_AssignDesc_SP_5fbattle_2etxt();
  friend void protobuf_ShutdownFile_SP_5fbattle_2etxt();

  void InitAsDefaultInstance();
  static GM_CenterGmidVServer* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_ChallengeReturn

// repeated uint32 roleList = 1;
inline int SM_ChallengeReturn::rolelist_size() const {
  return rolelist_.size();
}
inline void SM_ChallengeReturn::clear_rolelist() {
  rolelist_.Clear();
}
inline ::google::protobuf::uint32 SM_ChallengeReturn::rolelist(int index) const {
  return rolelist_.Get(index);
}
inline void SM_ChallengeReturn::set_rolelist(int index, ::google::protobuf::uint32 value) {
  rolelist_.Set(index, value);
}
inline void SM_ChallengeReturn::add_rolelist(::google::protobuf::uint32 value) {
  rolelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SM_ChallengeReturn::rolelist() const {
  return rolelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SM_ChallengeReturn::mutable_rolelist() {
  return &rolelist_;
}

// required uint32 fbAllPlayerNum = 2;
inline bool SM_ChallengeReturn::has_fballplayernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_ChallengeReturn::set_has_fballplayernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_ChallengeReturn::clear_has_fballplayernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_ChallengeReturn::clear_fballplayernum() {
  fballplayernum_ = 0u;
  clear_has_fballplayernum();
}
inline ::google::protobuf::uint32 SM_ChallengeReturn::fballplayernum() const {
  return fballplayernum_;
}
inline void SM_ChallengeReturn::set_fballplayernum(::google::protobuf::uint32 value) {
  set_has_fballplayernum();
  fballplayernum_ = value;
}

// optional string m_fbIp = 3;
inline bool SM_ChallengeReturn::has_m_fbip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_ChallengeReturn::set_has_m_fbip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_ChallengeReturn::clear_has_m_fbip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_ChallengeReturn::clear_m_fbip() {
  if (m_fbip_ != &::google::protobuf::internal::kEmptyString) {
    m_fbip_->clear();
  }
  clear_has_m_fbip();
}
inline const ::std::string& SM_ChallengeReturn::m_fbip() const {
  return *m_fbip_;
}
inline void SM_ChallengeReturn::set_m_fbip(const ::std::string& value) {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  m_fbip_->assign(value);
}
inline void SM_ChallengeReturn::set_m_fbip(const char* value) {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  m_fbip_->assign(value);
}
inline void SM_ChallengeReturn::set_m_fbip(const char* value, size_t size) {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  m_fbip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_ChallengeReturn::mutable_m_fbip() {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  return m_fbip_;
}
inline ::std::string* SM_ChallengeReturn::release_m_fbip() {
  clear_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_fbip_;
    m_fbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_ChallengeReturn::set_allocated_m_fbip(::std::string* m_fbip) {
  if (m_fbip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbip_;
  }
  if (m_fbip) {
    set_has_m_fbip();
    m_fbip_ = m_fbip;
  } else {
    clear_has_m_fbip();
    m_fbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_addfbid = 4;
inline bool SM_ChallengeReturn::has_m_addfbid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_ChallengeReturn::set_has_m_addfbid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_ChallengeReturn::clear_has_m_addfbid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_ChallengeReturn::clear_m_addfbid() {
  m_addfbid_ = 0;
  clear_has_m_addfbid();
}
inline ::google::protobuf::int32 SM_ChallengeReturn::m_addfbid() const {
  return m_addfbid_;
}
inline void SM_ChallengeReturn::set_m_addfbid(::google::protobuf::int32 value) {
  set_has_m_addfbid();
  m_addfbid_ = value;
}

// optional int32 m_fbtypeid = 5;
inline bool SM_ChallengeReturn::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_ChallengeReturn::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_ChallengeReturn::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_ChallengeReturn::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 SM_ChallengeReturn::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void SM_ChallengeReturn::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// repeated .GM_CenterGmidVServer m_roleinfo = 6;
inline int SM_ChallengeReturn::m_roleinfo_size() const {
  return m_roleinfo_.size();
}
inline void SM_ChallengeReturn::clear_m_roleinfo() {
  m_roleinfo_.Clear();
}
inline const ::GM_CenterGmidVServer& SM_ChallengeReturn::m_roleinfo(int index) const {
  return m_roleinfo_.Get(index);
}
inline ::GM_CenterGmidVServer* SM_ChallengeReturn::mutable_m_roleinfo(int index) {
  return m_roleinfo_.Mutable(index);
}
inline ::GM_CenterGmidVServer* SM_ChallengeReturn::add_m_roleinfo() {
  return m_roleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_CenterGmidVServer >&
SM_ChallengeReturn::m_roleinfo() const {
  return m_roleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_CenterGmidVServer >*
SM_ChallengeReturn::mutable_m_roleinfo() {
  return &m_roleinfo_;
}

// optional string m_playWay = 7;
inline bool SM_ChallengeReturn::has_m_playway() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_ChallengeReturn::set_has_m_playway() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_ChallengeReturn::clear_has_m_playway() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_ChallengeReturn::clear_m_playway() {
  if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
    m_playway_->clear();
  }
  clear_has_m_playway();
}
inline const ::std::string& SM_ChallengeReturn::m_playway() const {
  return *m_playway_;
}
inline void SM_ChallengeReturn::set_m_playway(const ::std::string& value) {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  m_playway_->assign(value);
}
inline void SM_ChallengeReturn::set_m_playway(const char* value) {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  m_playway_->assign(value);
}
inline void SM_ChallengeReturn::set_m_playway(const char* value, size_t size) {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  m_playway_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_ChallengeReturn::mutable_m_playway() {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  return m_playway_;
}
inline ::std::string* SM_ChallengeReturn::release_m_playway() {
  clear_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_playway_;
    m_playway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_ChallengeReturn::set_allocated_m_playway(::std::string* m_playway) {
  if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playway_;
  }
  if (m_playway) {
    set_has_m_playway();
    m_playway_ = m_playway;
  } else {
    clear_has_m_playway();
    m_playway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_playerCount = 8;
inline bool SM_ChallengeReturn::has_m_playercount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_ChallengeReturn::set_has_m_playercount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_ChallengeReturn::clear_has_m_playercount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_ChallengeReturn::clear_m_playercount() {
  m_playercount_ = 0;
  clear_has_m_playercount();
}
inline ::google::protobuf::int32 SM_ChallengeReturn::m_playercount() const {
  return m_playercount_;
}
inline void SM_ChallengeReturn::set_m_playercount(::google::protobuf::int32 value) {
  set_has_m_playercount();
  m_playercount_ = value;
}

// -------------------------------------------------------------------

// GM_CenterGmidVServer

// required int32 m_serverId = 1;
inline bool GM_CenterGmidVServer::has_m_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_CenterGmidVServer::set_has_m_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_CenterGmidVServer::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_CenterGmidVServer::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 GM_CenterGmidVServer::m_serverid() const {
  return m_serverid_;
}
inline void GM_CenterGmidVServer::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// optional int32 m_rolegmid = 2;
inline bool GM_CenterGmidVServer::has_m_rolegmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_CenterGmidVServer::set_has_m_rolegmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_CenterGmidVServer::clear_has_m_rolegmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_CenterGmidVServer::clear_m_rolegmid() {
  m_rolegmid_ = 0;
  clear_has_m_rolegmid();
}
inline ::google::protobuf::int32 GM_CenterGmidVServer::m_rolegmid() const {
  return m_rolegmid_;
}
inline void GM_CenterGmidVServer::set_m_rolegmid(::google::protobuf::int32 value) {
  set_has_m_rolegmid();
  m_rolegmid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fbattle_2etxt__INCLUDED
