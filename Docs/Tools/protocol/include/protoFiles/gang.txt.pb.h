// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gang.txt

#ifndef PROTOBUF_gang_2etxt__INCLUDED
#define PROTOBUF_gang_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gang_2etxt();
void protobuf_AssignDesc_gang_2etxt();
void protobuf_ShutdownFile_gang_2etxt();

class GM_GangInfo;
class GM_MyGang;
class GM_AllGangInfo;
class GM_AllGangApply;
class GM_CreateGang;
class GM_GangRoleOperate;
class GM_GangRole;
class GM_AllGangRole;
class GM_GangNoticeChange;
class GM_GangQuickJoin;
class GM_GangLog;
class GM_AllGangLog;
class GM_GangRankInfo;
class GM_GangRank;
class GM_GangIntroduction;
class GM_GangFB_FBInfo_Request;
class GM_GangFB_FBInfo;
class GM_GangFB_FBInfo_Return;
class GM_GangFB_RankInfo_Request;
class GM_GangFB_RankInfo;
class GM_GangFB_RankInfo_Return;
class GM_GangFB_Fight_Request;
class GM_GangFB_Fight_Return;
class GM_GangFB_Reward;
class GM_GangFB_TakeFight;
class GM_GangShop;
class GM_GangShopObj;
class GM_GangModuleInfo;
class GM_GangHall;
class GM_GangTemp;
class GM_BlessResult;
class GM_BlessObj;
class GM_GangModuleInfoList;
class GM_GangNotify;
class GM_ApplyResult;

// ===================================================================

class GM_GangInfo : public ::google::protobuf::Message {
 public:
  GM_GangInfo();
  virtual ~GM_GangInfo();

  GM_GangInfo(const GM_GangInfo& from);

  inline GM_GangInfo& operator=(const GM_GangInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangInfo& default_instance();

  void Swap(GM_GangInfo* other);

  // implements Message ----------------------------------------------

  GM_GangInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangInfo& from);
  void MergeFrom(const GM_GangInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string leaderName = 4;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 4;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional int32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 memberNum = 6;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 6;
  inline ::google::protobuf::int32 membernum() const;
  inline void set_membernum(::google::protobuf::int32 value);

  // optional int32 maxMember = 7;
  inline bool has_maxmember() const;
  inline void clear_maxmember();
  static const int kMaxMemberFieldNumber = 7;
  inline ::google::protobuf::int32 maxmember() const;
  inline void set_maxmember(::google::protobuf::int32 value);

  // optional string pronoce = 8;
  inline bool has_pronoce() const;
  inline void clear_pronoce();
  static const int kPronoceFieldNumber = 8;
  inline const ::std::string& pronoce() const;
  inline void set_pronoce(const ::std::string& value);
  inline void set_pronoce(const char* value);
  inline void set_pronoce(const char* value, size_t size);
  inline ::std::string* mutable_pronoce();
  inline ::std::string* release_pronoce();
  inline void set_allocated_pronoce(::std::string* pronoce);

  // optional int32 isApply = 9;
  inline bool has_isapply() const;
  inline void clear_isapply();
  static const int kIsApplyFieldNumber = 9;
  inline ::google::protobuf::int32 isapply() const;
  inline void set_isapply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangInfo)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_membernum();
  inline void clear_has_membernum();
  inline void set_has_maxmember();
  inline void clear_has_maxmember();
  inline void set_has_pronoce();
  inline void clear_has_pronoce();
  inline void set_has_isapply();
  inline void clear_has_isapply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 lv_;
  ::std::string* leadername_;
  ::google::protobuf::int32 membernum_;
  ::google::protobuf::int32 maxmember_;
  ::std::string* pronoce_;
  ::google::protobuf::int32 isapply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_MyGang : public ::google::protobuf::Message {
 public:
  GM_MyGang();
  virtual ~GM_MyGang();

  GM_MyGang(const GM_MyGang& from);

  inline GM_MyGang& operator=(const GM_MyGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_MyGang& default_instance();

  void Swap(GM_MyGang* other);

  // implements Message ----------------------------------------------

  GM_MyGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_MyGang& from);
  void MergeFrom(const GM_MyGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional .GM_GangInfo baseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::GM_GangInfo& baseinfo() const;
  inline ::GM_GangInfo* mutable_baseinfo();
  inline ::GM_GangInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::GM_GangInfo* baseinfo);

  // optional int32 pow = 3;
  inline bool has_pow() const;
  inline void clear_pow();
  static const int kPowFieldNumber = 3;
  inline ::google::protobuf::int32 pow() const;
  inline void set_pow(::google::protobuf::int32 value);

  // optional int32 richies = 4;
  inline bool has_richies() const;
  inline void clear_richies();
  static const int kRichiesFieldNumber = 4;
  inline ::google::protobuf::int32 richies() const;
  inline void set_richies(::google::protobuf::int32 value);

  // optional string notice = 6;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 6;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional int32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // repeated .GM_GangRole roles = 11;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 11;
  inline const ::GM_GangRole& roles(int index) const;
  inline ::GM_GangRole* mutable_roles(int index);
  inline ::GM_GangRole* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRole >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangRole >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:GM_MyGang)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_pow();
  inline void clear_has_pow();
  inline void set_has_richies();
  inline void clear_has_richies();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GM_GangInfo* baseinfo_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 pow_;
  ::std::string* notice_;
  ::google::protobuf::int32 richies_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::RepeatedPtrField< ::GM_GangRole > roles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_MyGang* default_instance_;
};
// -------------------------------------------------------------------

class GM_AllGangInfo : public ::google::protobuf::Message {
 public:
  GM_AllGangInfo();
  virtual ~GM_AllGangInfo();

  GM_AllGangInfo(const GM_AllGangInfo& from);

  inline GM_AllGangInfo& operator=(const GM_AllGangInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AllGangInfo& default_instance();

  void Swap(GM_AllGangInfo* other);

  // implements Message ----------------------------------------------

  GM_AllGangInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AllGangInfo& from);
  void MergeFrom(const GM_AllGangInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 m_allgangcount = 2;
  inline bool has_m_allgangcount() const;
  inline void clear_m_allgangcount();
  static const int kMAllgangcountFieldNumber = 2;
  inline ::google::protobuf::int32 m_allgangcount() const;
  inline void set_m_allgangcount(::google::protobuf::int32 value);

  // repeated .GM_GangInfo gang = 3;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 3;
  inline const ::GM_GangInfo& gang(int index) const;
  inline ::GM_GangInfo* mutable_gang(int index);
  inline ::GM_GangInfo* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangInfo >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangInfo >*
      mutable_gang();

  // @@protoc_insertion_point(class_scope:GM_AllGangInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_m_allgangcount();
  inline void clear_has_m_allgangcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 m_allgangcount_;
  ::google::protobuf::RepeatedPtrField< ::GM_GangInfo > gang_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_AllGangInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_AllGangApply : public ::google::protobuf::Message {
 public:
  GM_AllGangApply();
  virtual ~GM_AllGangApply();

  GM_AllGangApply(const GM_AllGangApply& from);

  inline GM_AllGangApply& operator=(const GM_AllGangApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AllGangApply& default_instance();

  void Swap(GM_AllGangApply* other);

  // implements Message ----------------------------------------------

  GM_AllGangApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AllGangApply& from);
  void MergeFrom(const GM_AllGangApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .GM_GangRole roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::GM_GangRole& roles(int index) const;
  inline ::GM_GangRole* mutable_roles(int index);
  inline ::GM_GangRole* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRole >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangRole >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:GM_AllGangApply)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangRole > roles_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_AllGangApply* default_instance_;
};
// -------------------------------------------------------------------

class GM_CreateGang : public ::google::protobuf::Message {
 public:
  GM_CreateGang();
  virtual ~GM_CreateGang();

  GM_CreateGang(const GM_CreateGang& from);

  inline GM_CreateGang& operator=(const GM_CreateGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_CreateGang& default_instance();

  void Swap(GM_CreateGang* other);

  // implements Message ----------------------------------------------

  GM_CreateGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_CreateGang& from);
  void MergeFrom(const GM_CreateGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:GM_CreateGang)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_CreateGang* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRoleOperate : public ::google::protobuf::Message {
 public:
  GM_GangRoleOperate();
  virtual ~GM_GangRoleOperate();

  GM_GangRoleOperate(const GM_GangRoleOperate& from);

  inline GM_GangRoleOperate& operator=(const GM_GangRoleOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRoleOperate& default_instance();

  void Swap(GM_GangRoleOperate* other);

  // implements Message ----------------------------------------------

  GM_GangRoleOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRoleOperate& from);
  void MergeFrom(const GM_GangRoleOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 operId = 2;
  inline bool has_operid() const;
  inline void clear_operid();
  static const int kOperIdFieldNumber = 2;
  inline ::google::protobuf::int32 operid() const;
  inline void set_operid(::google::protobuf::int32 value);

  // optional int32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional int32 isAgree = 4;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 4;
  inline ::google::protobuf::int32 isagree() const;
  inline void set_isagree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRoleOperate)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_operid();
  inline void clear_has_operid();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_isagree();
  inline void clear_has_isagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 operid_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 isagree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRoleOperate* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRole : public ::google::protobuf::Message {
 public:
  GM_GangRole();
  virtual ~GM_GangRole();

  GM_GangRole(const GM_GangRole& from);

  inline GM_GangRole& operator=(const GM_GangRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRole& default_instance();

  void Swap(GM_GangRole* other);

  // implements Message ----------------------------------------------

  GM_GangRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRole& from);
  void MergeFrom(const GM_GangRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 vocation = 6;
  inline bool has_vocation() const;
  inline void clear_vocation();
  static const int kVocationFieldNumber = 6;
  inline ::google::protobuf::int32 vocation() const;
  inline void set_vocation(::google::protobuf::int32 value);

  // optional int32 job = 7;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 7;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional int32 lastLogin = 8;
  inline bool has_lastlogin() const;
  inline void clear_lastlogin();
  static const int kLastLoginFieldNumber = 8;
  inline ::google::protobuf::int32 lastlogin() const;
  inline void set_lastlogin(::google::protobuf::int32 value);

  // optional int32 hisRichies = 9;
  inline bool has_hisrichies() const;
  inline void clear_hisrichies();
  static const int kHisRichiesFieldNumber = 9;
  inline ::google::protobuf::int32 hisrichies() const;
  inline void set_hisrichies(::google::protobuf::int32 value);

  // optional int32 power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 richies = 11;
  inline bool has_richies() const;
  inline void clear_richies();
  static const int kRichiesFieldNumber = 11;
  inline ::google::protobuf::int32 richies() const;
  inline void set_richies(::google::protobuf::int32 value);

  // optional int32 flag = 12;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 12;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 contype = 13;
  inline bool has_contype() const;
  inline void clear_contype();
  static const int kContypeFieldNumber = 13;
  inline ::google::protobuf::int32 contype() const;
  inline void set_contype(::google::protobuf::int32 value);

  // optional int32 isfriend = 14;
  inline bool has_isfriend() const;
  inline void clear_isfriend();
  static const int kIsfriendFieldNumber = 14;
  inline ::google::protobuf::int32 isfriend() const;
  inline void set_isfriend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRole)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_vocation();
  inline void clear_has_vocation();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_lastlogin();
  inline void clear_has_lastlogin();
  inline void set_has_hisrichies();
  inline void clear_has_hisrichies();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_richies();
  inline void clear_has_richies();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_contype();
  inline void clear_has_contype();
  inline void set_has_isfriend();
  inline void clear_has_isfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 rank_;
  ::std::string* name_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 vocation_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 lastlogin_;
  ::google::protobuf::int32 hisrichies_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 richies_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 contype_;
  ::google::protobuf::int32 isfriend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRole* default_instance_;
};
// -------------------------------------------------------------------

class GM_AllGangRole : public ::google::protobuf::Message {
 public:
  GM_AllGangRole();
  virtual ~GM_AllGangRole();

  GM_AllGangRole(const GM_AllGangRole& from);

  inline GM_AllGangRole& operator=(const GM_AllGangRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AllGangRole& default_instance();

  void Swap(GM_AllGangRole* other);

  // implements Message ----------------------------------------------

  GM_AllGangRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AllGangRole& from);
  void MergeFrom(const GM_AllGangRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .GM_GangRole roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::GM_GangRole& roles(int index) const;
  inline ::GM_GangRole* mutable_roles(int index);
  inline ::GM_GangRole* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRole >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangRole >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:GM_AllGangRole)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangRole > roles_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_AllGangRole* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangNoticeChange : public ::google::protobuf::Message {
 public:
  GM_GangNoticeChange();
  virtual ~GM_GangNoticeChange();

  GM_GangNoticeChange(const GM_GangNoticeChange& from);

  inline GM_GangNoticeChange& operator=(const GM_GangNoticeChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangNoticeChange& default_instance();

  void Swap(GM_GangNoticeChange* other);

  // implements Message ----------------------------------------------

  GM_GangNoticeChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangNoticeChange& from);
  void MergeFrom(const GM_GangNoticeChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:GM_GangNoticeChange)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangNoticeChange* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangQuickJoin : public ::google::protobuf::Message {
 public:
  GM_GangQuickJoin();
  virtual ~GM_GangQuickJoin();

  GM_GangQuickJoin(const GM_GangQuickJoin& from);

  inline GM_GangQuickJoin& operator=(const GM_GangQuickJoin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangQuickJoin& default_instance();

  void Swap(GM_GangQuickJoin* other);

  // implements Message ----------------------------------------------

  GM_GangQuickJoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangQuickJoin& from);
  void MergeFrom(const GM_GangQuickJoin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int64 gangGmid = 2;
  inline int ganggmid_size() const;
  inline void clear_ganggmid();
  static const int kGangGmidFieldNumber = 2;
  inline ::google::protobuf::int64 ganggmid(int index) const;
  inline void set_ganggmid(int index, ::google::protobuf::int64 value);
  inline void add_ganggmid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ganggmid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ganggmid();

  // @@protoc_insertion_point(class_scope:GM_GangQuickJoin)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ganggmid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangQuickJoin* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangLog : public ::google::protobuf::Message {
 public:
  GM_GangLog();
  virtual ~GM_GangLog();

  GM_GangLog(const GM_GangLog& from);

  inline GM_GangLog& operator=(const GM_GangLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangLog& default_instance();

  void Swap(GM_GangLog* other);

  // implements Message ----------------------------------------------

  GM_GangLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangLog& from);
  void MergeFrom(const GM_GangLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log = 1;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const char* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  inline void set_allocated_log(::std::string* log);

  // optional string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional int32 m_roleId = 3;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIdFieldNumber = 3;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_profession = 4;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 m_profession() const;
  inline void set_m_profession(::google::protobuf::int32 value);

  // optional string m_rolename = 5;
  inline bool has_m_rolename() const;
  inline void clear_m_rolename();
  static const int kMRolenameFieldNumber = 5;
  inline const ::std::string& m_rolename() const;
  inline void set_m_rolename(const ::std::string& value);
  inline void set_m_rolename(const char* value);
  inline void set_m_rolename(const char* value, size_t size);
  inline ::std::string* mutable_m_rolename();
  inline ::std::string* release_m_rolename();
  inline void set_allocated_m_rolename(::std::string* m_rolename);

  // optional int32 m_rolelv = 6;
  inline bool has_m_rolelv() const;
  inline void clear_m_rolelv();
  static const int kMRolelvFieldNumber = 6;
  inline ::google::protobuf::int32 m_rolelv() const;
  inline void set_m_rolelv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangLog)
 private:
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();
  inline void set_has_m_rolename();
  inline void clear_has_m_rolename();
  inline void set_has_m_rolelv();
  inline void clear_has_m_rolelv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* log_;
  ::std::string* time_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_profession_;
  ::std::string* m_rolename_;
  ::google::protobuf::int32 m_rolelv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangLog* default_instance_;
};
// -------------------------------------------------------------------

class GM_AllGangLog : public ::google::protobuf::Message {
 public:
  GM_AllGangLog();
  virtual ~GM_AllGangLog();

  GM_AllGangLog(const GM_AllGangLog& from);

  inline GM_AllGangLog& operator=(const GM_AllGangLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AllGangLog& default_instance();

  void Swap(GM_AllGangLog* other);

  // implements Message ----------------------------------------------

  GM_AllGangLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AllGangLog& from);
  void MergeFrom(const GM_AllGangLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // repeated .GM_GangLog logs = 2;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 2;
  inline const ::GM_GangLog& logs(int index) const;
  inline ::GM_GangLog* mutable_logs(int index);
  inline ::GM_GangLog* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangLog >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangLog >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:GM_AllGangLog)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::RepeatedPtrField< ::GM_GangLog > logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_AllGangLog* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRankInfo : public ::google::protobuf::Message {
 public:
  GM_GangRankInfo();
  virtual ~GM_GangRankInfo();

  GM_GangRankInfo(const GM_GangRankInfo& from);

  inline GM_GangRankInfo& operator=(const GM_GangRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRankInfo& default_instance();

  void Swap(GM_GangRankInfo* other);

  // implements Message ----------------------------------------------

  GM_GangRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRankInfo& from);
  void MergeFrom(const GM_GangRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_place = 6;
  inline bool has_m_place() const;
  inline void clear_m_place();
  static const int kMPlaceFieldNumber = 6;
  inline ::google::protobuf::int32 m_place() const;
  inline void set_m_place(::google::protobuf::int32 value);

  // optional string m_gangName = 2;
  inline bool has_m_gangname() const;
  inline void clear_m_gangname();
  static const int kMGangNameFieldNumber = 2;
  inline const ::std::string& m_gangname() const;
  inline void set_m_gangname(const ::std::string& value);
  inline void set_m_gangname(const char* value);
  inline void set_m_gangname(const char* value, size_t size);
  inline ::std::string* mutable_m_gangname();
  inline ::std::string* release_m_gangname();
  inline void set_allocated_m_gangname(::std::string* m_gangname);

  // optional int32 m_level = 4;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 4;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_value = 5;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 5;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_people = 1;
  inline bool has_m_people() const;
  inline void clear_m_people();
  static const int kMPeopleFieldNumber = 1;
  inline ::google::protobuf::int32 m_people() const;
  inline void set_m_people(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRankInfo)
 private:
  inline void set_has_m_place();
  inline void clear_has_m_place();
  inline void set_has_m_gangname();
  inline void clear_has_m_gangname();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_people();
  inline void clear_has_m_people();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_gangname_;
  ::google::protobuf::int32 m_place_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_people_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRank : public ::google::protobuf::Message {
 public:
  GM_GangRank();
  virtual ~GM_GangRank();

  GM_GangRank(const GM_GangRank& from);

  inline GM_GangRank& operator=(const GM_GangRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRank& default_instance();

  void Swap(GM_GangRank* other);

  // implements Message ----------------------------------------------

  GM_GangRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRank& from);
  void MergeFrom(const GM_GangRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_GangRankInfo gangrank = 2;
  inline int gangrank_size() const;
  inline void clear_gangrank();
  static const int kGangrankFieldNumber = 2;
  inline const ::GM_GangRankInfo& gangrank(int index) const;
  inline ::GM_GangRankInfo* mutable_gangrank(int index);
  inline ::GM_GangRankInfo* add_gangrank();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRankInfo >&
      gangrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangRankInfo >*
      mutable_gangrank();

  // optional int32 m_myGangRank = 3;
  inline bool has_m_mygangrank() const;
  inline void clear_m_mygangrank();
  static const int kMMyGangRankFieldNumber = 3;
  inline ::google::protobuf::int32 m_mygangrank() const;
  inline void set_m_mygangrank(::google::protobuf::int32 value);

  // optional string m_myGangName = 4;
  inline bool has_m_mygangname() const;
  inline void clear_m_mygangname();
  static const int kMMyGangNameFieldNumber = 4;
  inline const ::std::string& m_mygangname() const;
  inline void set_m_mygangname(const ::std::string& value);
  inline void set_m_mygangname(const char* value);
  inline void set_m_mygangname(const char* value, size_t size);
  inline ::std::string* mutable_m_mygangname();
  inline ::std::string* release_m_mygangname();
  inline void set_allocated_m_mygangname(::std::string* m_mygangname);

  // @@protoc_insertion_point(class_scope:GM_GangRank)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_m_mygangrank();
  inline void clear_has_m_mygangrank();
  inline void set_has_m_mygangname();
  inline void clear_has_m_mygangname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangRankInfo > gangrank_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 m_mygangrank_;
  ::std::string* m_mygangname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRank* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangIntroduction : public ::google::protobuf::Message {
 public:
  GM_GangIntroduction();
  virtual ~GM_GangIntroduction();

  GM_GangIntroduction(const GM_GangIntroduction& from);

  inline GM_GangIntroduction& operator=(const GM_GangIntroduction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangIntroduction& default_instance();

  void Swap(GM_GangIntroduction* other);

  // implements Message ----------------------------------------------

  GM_GangIntroduction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangIntroduction& from);
  void MergeFrom(const GM_GangIntroduction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gangLevel = 1;
  inline bool has_ganglevel() const;
  inline void clear_ganglevel();
  static const int kGangLevelFieldNumber = 1;
  inline ::google::protobuf::int32 ganglevel() const;
  inline void set_ganglevel(::google::protobuf::int32 value);

  // required int32 gangMembers = 2;
  inline bool has_gangmembers() const;
  inline void clear_gangmembers();
  static const int kGangMembersFieldNumber = 2;
  inline ::google::protobuf::int32 gangmembers() const;
  inline void set_gangmembers(::google::protobuf::int32 value);

  // optional string gangLeader = 3;
  inline bool has_gangleader() const;
  inline void clear_gangleader();
  static const int kGangLeaderFieldNumber = 3;
  inline const ::std::string& gangleader() const;
  inline void set_gangleader(const ::std::string& value);
  inline void set_gangleader(const char* value);
  inline void set_gangleader(const char* value, size_t size);
  inline ::std::string* mutable_gangleader();
  inline ::std::string* release_gangleader();
  inline void set_allocated_gangleader(::std::string* gangleader);

  // optional string gangNotice = 4;
  inline bool has_gangnotice() const;
  inline void clear_gangnotice();
  static const int kGangNoticeFieldNumber = 4;
  inline const ::std::string& gangnotice() const;
  inline void set_gangnotice(const ::std::string& value);
  inline void set_gangnotice(const char* value);
  inline void set_gangnotice(const char* value, size_t size);
  inline ::std::string* mutable_gangnotice();
  inline ::std::string* release_gangnotice();
  inline void set_allocated_gangnotice(::std::string* gangnotice);

  // optional string gangName = 5;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 5;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // optional int32 maxMembers = 6;
  inline bool has_maxmembers() const;
  inline void clear_maxmembers();
  static const int kMaxMembersFieldNumber = 6;
  inline ::google::protobuf::int32 maxmembers() const;
  inline void set_maxmembers(::google::protobuf::int32 value);

  // optional int32 gangRank = 7;
  inline bool has_gangrank() const;
  inline void clear_gangrank();
  static const int kGangRankFieldNumber = 7;
  inline ::google::protobuf::int32 gangrank() const;
  inline void set_gangrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangIntroduction)
 private:
  inline void set_has_ganglevel();
  inline void clear_has_ganglevel();
  inline void set_has_gangmembers();
  inline void clear_has_gangmembers();
  inline void set_has_gangleader();
  inline void clear_has_gangleader();
  inline void set_has_gangnotice();
  inline void clear_has_gangnotice();
  inline void set_has_gangname();
  inline void clear_has_gangname();
  inline void set_has_maxmembers();
  inline void clear_has_maxmembers();
  inline void set_has_gangrank();
  inline void clear_has_gangrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ganglevel_;
  ::google::protobuf::int32 gangmembers_;
  ::std::string* gangleader_;
  ::std::string* gangnotice_;
  ::std::string* gangname_;
  ::google::protobuf::int32 maxmembers_;
  ::google::protobuf::int32 gangrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangIntroduction* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_FBInfo_Request : public ::google::protobuf::Message {
 public:
  GM_GangFB_FBInfo_Request();
  virtual ~GM_GangFB_FBInfo_Request();

  GM_GangFB_FBInfo_Request(const GM_GangFB_FBInfo_Request& from);

  inline GM_GangFB_FBInfo_Request& operator=(const GM_GangFB_FBInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_FBInfo_Request& default_instance();

  void Swap(GM_GangFB_FBInfo_Request* other);

  // implements Message ----------------------------------------------

  GM_GangFB_FBInfo_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_FBInfo_Request& from);
  void MergeFrom(const GM_GangFB_FBInfo_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_FBInfo_Request)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_FBInfo_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_FBInfo : public ::google::protobuf::Message {
 public:
  GM_GangFB_FBInfo();
  virtual ~GM_GangFB_FBInfo();

  GM_GangFB_FBInfo(const GM_GangFB_FBInfo& from);

  inline GM_GangFB_FBInfo& operator=(const GM_GangFB_FBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_FBInfo& default_instance();

  void Swap(GM_GangFB_FBInfo* other);

  // implements Message ----------------------------------------------

  GM_GangFB_FBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_FBInfo& from);
  void MergeFrom(const GM_GangFB_FBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // optional int32 challenge = 2;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  inline ::google::protobuf::int32 challenge() const;
  inline void set_challenge(::google::protobuf::int32 value);

  // optional int32 lefttimes = 3;
  inline bool has_lefttimes() const;
  inline void clear_lefttimes();
  static const int kLefttimesFieldNumber = 3;
  inline ::google::protobuf::int32 lefttimes() const;
  inline void set_lefttimes(::google::protobuf::int32 value);

  // optional float percent = 4;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 4;
  inline float percent() const;
  inline void set_percent(float value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_FBInfo)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_lefttimes();
  inline void clear_has_lefttimes();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;
  ::google::protobuf::int32 challenge_;
  ::google::protobuf::int32 lefttimes_;
  float percent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_FBInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_FBInfo_Return : public ::google::protobuf::Message {
 public:
  GM_GangFB_FBInfo_Return();
  virtual ~GM_GangFB_FBInfo_Return();

  GM_GangFB_FBInfo_Return(const GM_GangFB_FBInfo_Return& from);

  inline GM_GangFB_FBInfo_Return& operator=(const GM_GangFB_FBInfo_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_FBInfo_Return& default_instance();

  void Swap(GM_GangFB_FBInfo_Return* other);

  // implements Message ----------------------------------------------

  GM_GangFB_FBInfo_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_FBInfo_Return& from);
  void MergeFrom(const GM_GangFB_FBInfo_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GM_GangFB_FBInfo fbinfo = 2;
  inline int fbinfo_size() const;
  inline void clear_fbinfo();
  static const int kFbinfoFieldNumber = 2;
  inline const ::GM_GangFB_FBInfo& fbinfo(int index) const;
  inline ::GM_GangFB_FBInfo* mutable_fbinfo(int index);
  inline ::GM_GangFB_FBInfo* add_fbinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFB_FBInfo >&
      fbinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangFB_FBInfo >*
      mutable_fbinfo();

  // @@protoc_insertion_point(class_scope:GM_GangFB_FBInfo_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangFB_FBInfo > fbinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_FBInfo_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_RankInfo_Request : public ::google::protobuf::Message {
 public:
  GM_GangFB_RankInfo_Request();
  virtual ~GM_GangFB_RankInfo_Request();

  GM_GangFB_RankInfo_Request(const GM_GangFB_RankInfo_Request& from);

  inline GM_GangFB_RankInfo_Request& operator=(const GM_GangFB_RankInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_RankInfo_Request& default_instance();

  void Swap(GM_GangFB_RankInfo_Request* other);

  // implements Message ----------------------------------------------

  GM_GangFB_RankInfo_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_RankInfo_Request& from);
  void MergeFrom(const GM_GangFB_RankInfo_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_RankInfo_Request)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_RankInfo_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_RankInfo : public ::google::protobuf::Message {
 public:
  GM_GangFB_RankInfo();
  virtual ~GM_GangFB_RankInfo();

  GM_GangFB_RankInfo(const GM_GangFB_RankInfo& from);

  inline GM_GangFB_RankInfo& operator=(const GM_GangFB_RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_RankInfo& default_instance();

  void Swap(GM_GangFB_RankInfo* other);

  // implements Message ----------------------------------------------

  GM_GangFB_RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_RankInfo& from);
  void MergeFrom(const GM_GangFB_RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string rolename = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 totalmage = 4;
  inline bool has_totalmage() const;
  inline void clear_totalmage();
  static const int kTotalmageFieldNumber = 4;
  inline ::google::protobuf::int32 totalmage() const;
  inline void set_totalmage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_RankInfo)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_totalmage();
  inline void clear_has_totalmage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;
  ::google::protobuf::int32 rank_;
  ::std::string* rolename_;
  ::google::protobuf::int32 totalmage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_RankInfo_Return : public ::google::protobuf::Message {
 public:
  GM_GangFB_RankInfo_Return();
  virtual ~GM_GangFB_RankInfo_Return();

  GM_GangFB_RankInfo_Return(const GM_GangFB_RankInfo_Return& from);

  inline GM_GangFB_RankInfo_Return& operator=(const GM_GangFB_RankInfo_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_RankInfo_Return& default_instance();

  void Swap(GM_GangFB_RankInfo_Return* other);

  // implements Message ----------------------------------------------

  GM_GangFB_RankInfo_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_RankInfo_Return& from);
  void MergeFrom(const GM_GangFB_RankInfo_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GM_GangFB_RankInfo rankinfo = 2;
  inline int rankinfo_size() const;
  inline void clear_rankinfo();
  static const int kRankinfoFieldNumber = 2;
  inline const ::GM_GangFB_RankInfo& rankinfo(int index) const;
  inline ::GM_GangFB_RankInfo* mutable_rankinfo(int index);
  inline ::GM_GangFB_RankInfo* add_rankinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFB_RankInfo >&
      rankinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangFB_RankInfo >*
      mutable_rankinfo();

  // @@protoc_insertion_point(class_scope:GM_GangFB_RankInfo_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangFB_RankInfo > rankinfo_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_RankInfo_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_Fight_Request : public ::google::protobuf::Message {
 public:
  GM_GangFB_Fight_Request();
  virtual ~GM_GangFB_Fight_Request();

  GM_GangFB_Fight_Request(const GM_GangFB_Fight_Request& from);

  inline GM_GangFB_Fight_Request& operator=(const GM_GangFB_Fight_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_Fight_Request& default_instance();

  void Swap(GM_GangFB_Fight_Request* other);

  // implements Message ----------------------------------------------

  GM_GangFB_Fight_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_Fight_Request& from);
  void MergeFrom(const GM_GangFB_Fight_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_Fight_Request)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_Fight_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_Fight_Return : public ::google::protobuf::Message {
 public:
  GM_GangFB_Fight_Return();
  virtual ~GM_GangFB_Fight_Return();

  GM_GangFB_Fight_Return(const GM_GangFB_Fight_Return& from);

  inline GM_GangFB_Fight_Return& operator=(const GM_GangFB_Fight_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_Fight_Return& default_instance();

  void Swap(GM_GangFB_Fight_Return* other);

  // implements Message ----------------------------------------------

  GM_GangFB_Fight_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_Fight_Return& from);
  void MergeFrom(const GM_GangFB_Fight_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_Fight_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_Fight_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_Reward : public ::google::protobuf::Message {
 public:
  GM_GangFB_Reward();
  virtual ~GM_GangFB_Reward();

  GM_GangFB_Reward(const GM_GangFB_Reward& from);

  inline GM_GangFB_Reward& operator=(const GM_GangFB_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_Reward& default_instance();

  void Swap(GM_GangFB_Reward* other);

  // implements Message ----------------------------------------------

  GM_GangFB_Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_Reward& from);
  void MergeFrom(const GM_GangFB_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objectid = 1;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFB_Reward)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_Reward* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFB_TakeFight : public ::google::protobuf::Message {
 public:
  GM_GangFB_TakeFight();
  virtual ~GM_GangFB_TakeFight();

  GM_GangFB_TakeFight(const GM_GangFB_TakeFight& from);

  inline GM_GangFB_TakeFight& operator=(const GM_GangFB_TakeFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFB_TakeFight& default_instance();

  void Swap(GM_GangFB_TakeFight* other);

  // implements Message ----------------------------------------------

  GM_GangFB_TakeFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFB_TakeFight& from);
  void MergeFrom(const GM_GangFB_TakeFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 damage = 1;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 1;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // repeated .GM_GangFB_Reward rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::GM_GangFB_Reward& rewards(int index) const;
  inline ::GM_GangFB_Reward* mutable_rewards(int index);
  inline ::GM_GangFB_Reward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFB_Reward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangFB_Reward >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:GM_GangFB_TakeFight)
 private:
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangFB_Reward > rewards_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFB_TakeFight* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangShop : public ::google::protobuf::Message {
 public:
  GM_GangShop();
  virtual ~GM_GangShop();

  GM_GangShop(const GM_GangShop& from);

  inline GM_GangShop& operator=(const GM_GangShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangShop& default_instance();

  void Swap(GM_GangShop* other);

  // implements Message ----------------------------------------------

  GM_GangShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangShop& from);
  void MergeFrom(const GM_GangShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_uplecost = 2;
  inline bool has_m_uplecost() const;
  inline void clear_m_uplecost();
  static const int kMUplecostFieldNumber = 2;
  inline ::google::protobuf::int32 m_uplecost() const;
  inline void set_m_uplecost(::google::protobuf::int32 value);

  // repeated .GM_GangShopObj m_shopobj = 3;
  inline int m_shopobj_size() const;
  inline void clear_m_shopobj();
  static const int kMShopobjFieldNumber = 3;
  inline const ::GM_GangShopObj& m_shopobj(int index) const;
  inline ::GM_GangShopObj* mutable_m_shopobj(int index);
  inline ::GM_GangShopObj* add_m_shopobj();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangShopObj >&
      m_shopobj() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangShopObj >*
      mutable_m_shopobj();

  // @@protoc_insertion_point(class_scope:GM_GangShop)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_uplecost();
  inline void clear_has_m_uplecost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_uplecost_;
  ::google::protobuf::RepeatedPtrField< ::GM_GangShopObj > m_shopobj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangShop* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangShopObj : public ::google::protobuf::Message {
 public:
  GM_GangShopObj();
  virtual ~GM_GangShopObj();

  GM_GangShopObj(const GM_GangShopObj& from);

  inline GM_GangShopObj& operator=(const GM_GangShopObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangShopObj& default_instance();

  void Swap(GM_GangShopObj* other);

  // implements Message ----------------------------------------------

  GM_GangShopObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangShopObj& from);
  void MergeFrom(const GM_GangShopObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // optional int32 m_showtype = 2;
  inline bool has_m_showtype() const;
  inline void clear_m_showtype();
  static const int kMShowtypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_showtype() const;
  inline void set_m_showtype(::google::protobuf::int32 value);

  // optional int32 m_remain = 3;
  inline bool has_m_remain() const;
  inline void clear_m_remain();
  static const int kMRemainFieldNumber = 3;
  inline ::google::protobuf::int32 m_remain() const;
  inline void set_m_remain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangShopObj)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_showtype();
  inline void clear_has_m_showtype();
  inline void set_has_m_remain();
  inline void clear_has_m_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_showtype_;
  ::google::protobuf::int32 m_remain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangShopObj* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangModuleInfo : public ::google::protobuf::Message {
 public:
  GM_GangModuleInfo();
  virtual ~GM_GangModuleInfo();

  GM_GangModuleInfo(const GM_GangModuleInfo& from);

  inline GM_GangModuleInfo& operator=(const GM_GangModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangModuleInfo& default_instance();

  void Swap(GM_GangModuleInfo* other);

  // implements Message ----------------------------------------------

  GM_GangModuleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangModuleInfo& from);
  void MergeFrom(const GM_GangModuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 moduleid = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleidFieldNumber = 1;
  inline ::google::protobuf::int32 moduleid() const;
  inline void set_moduleid(::google::protobuf::int32 value);

  // optional int32 isUnlock = 2;
  inline bool has_isunlock() const;
  inline void clear_isunlock();
  static const int kIsUnlockFieldNumber = 2;
  inline ::google::protobuf::int32 isunlock() const;
  inline void set_isunlock(::google::protobuf::int32 value);

  // optional .GM_GangHall m_HallData = 3;
  inline bool has_m_halldata() const;
  inline void clear_m_halldata();
  static const int kMHallDataFieldNumber = 3;
  inline const ::GM_GangHall& m_halldata() const;
  inline ::GM_GangHall* mutable_m_halldata();
  inline ::GM_GangHall* release_m_halldata();
  inline void set_allocated_m_halldata(::GM_GangHall* m_halldata);

  // optional .GM_GangTemp m_TempData = 4;
  inline bool has_m_tempdata() const;
  inline void clear_m_tempdata();
  static const int kMTempDataFieldNumber = 4;
  inline const ::GM_GangTemp& m_tempdata() const;
  inline ::GM_GangTemp* mutable_m_tempdata();
  inline ::GM_GangTemp* release_m_tempdata();
  inline void set_allocated_m_tempdata(::GM_GangTemp* m_tempdata);

  // optional .GM_GangShop m_ShopData = 5;
  inline bool has_m_shopdata() const;
  inline void clear_m_shopdata();
  static const int kMShopDataFieldNumber = 5;
  inline const ::GM_GangShop& m_shopdata() const;
  inline ::GM_GangShop* mutable_m_shopdata();
  inline ::GM_GangShop* release_m_shopdata();
  inline void set_allocated_m_shopdata(::GM_GangShop* m_shopdata);

  // optional int32 maxlv = 6;
  inline bool has_maxlv() const;
  inline void clear_maxlv();
  static const int kMaxlvFieldNumber = 6;
  inline ::google::protobuf::int32 maxlv() const;
  inline void set_maxlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangModuleInfo)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_isunlock();
  inline void clear_has_isunlock();
  inline void set_has_m_halldata();
  inline void clear_has_m_halldata();
  inline void set_has_m_tempdata();
  inline void clear_has_m_tempdata();
  inline void set_has_m_shopdata();
  inline void clear_has_m_shopdata();
  inline void set_has_maxlv();
  inline void clear_has_maxlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 moduleid_;
  ::google::protobuf::int32 isunlock_;
  ::GM_GangHall* m_halldata_;
  ::GM_GangTemp* m_tempdata_;
  ::GM_GangShop* m_shopdata_;
  ::google::protobuf::int32 maxlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangModuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangHall : public ::google::protobuf::Message {
 public:
  GM_GangHall();
  virtual ~GM_GangHall();

  GM_GangHall(const GM_GangHall& from);

  inline GM_GangHall& operator=(const GM_GangHall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangHall& default_instance();

  void Swap(GM_GangHall* other);

  // implements Message ----------------------------------------------

  GM_GangHall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangHall& from);
  void MergeFrom(const GM_GangHall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_uplecost = 2;
  inline bool has_m_uplecost() const;
  inline void clear_m_uplecost();
  static const int kMUplecostFieldNumber = 2;
  inline ::google::protobuf::int32 m_uplecost() const;
  inline void set_m_uplecost(::google::protobuf::int32 value);

  // optional int32 m_ishall = 4;
  inline bool has_m_ishall() const;
  inline void clear_m_ishall();
  static const int kMIshallFieldNumber = 4;
  inline ::google::protobuf::int32 m_ishall() const;
  inline void set_m_ishall(::google::protobuf::int32 value);

  // repeated string m_hallLog = 5;
  inline int m_halllog_size() const;
  inline void clear_m_halllog();
  static const int kMHallLogFieldNumber = 5;
  inline const ::std::string& m_halllog(int index) const;
  inline ::std::string* mutable_m_halllog(int index);
  inline void set_m_halllog(int index, const ::std::string& value);
  inline void set_m_halllog(int index, const char* value);
  inline void set_m_halllog(int index, const char* value, size_t size);
  inline ::std::string* add_m_halllog();
  inline void add_m_halllog(const ::std::string& value);
  inline void add_m_halllog(const char* value);
  inline void add_m_halllog(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_halllog() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_halllog();

  // @@protoc_insertion_point(class_scope:GM_GangHall)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_uplecost();
  inline void clear_has_m_uplecost();
  inline void set_has_m_ishall();
  inline void clear_has_m_ishall();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_uplecost_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_halllog_;
  ::google::protobuf::int32 m_ishall_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangHall* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangTemp : public ::google::protobuf::Message {
 public:
  GM_GangTemp();
  virtual ~GM_GangTemp();

  GM_GangTemp(const GM_GangTemp& from);

  inline GM_GangTemp& operator=(const GM_GangTemp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangTemp& default_instance();

  void Swap(GM_GangTemp* other);

  // implements Message ----------------------------------------------

  GM_GangTemp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangTemp& from);
  void MergeFrom(const GM_GangTemp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_uplecost = 2;
  inline bool has_m_uplecost() const;
  inline void clear_m_uplecost();
  static const int kMUplecostFieldNumber = 2;
  inline ::google::protobuf::int32 m_uplecost() const;
  inline void set_m_uplecost(::google::protobuf::int32 value);

  // optional int32 m_remain = 3;
  inline bool has_m_remain() const;
  inline void clear_m_remain();
  static const int kMRemainFieldNumber = 3;
  inline ::google::protobuf::int32 m_remain() const;
  inline void set_m_remain(::google::protobuf::int32 value);

  // optional int32 m_cost = 4;
  inline bool has_m_cost() const;
  inline void clear_m_cost();
  static const int kMCostFieldNumber = 4;
  inline ::google::protobuf::int32 m_cost() const;
  inline void set_m_cost(::google::protobuf::int32 value);

  // optional int32 m_isbless = 5;
  inline bool has_m_isbless() const;
  inline void clear_m_isbless();
  static const int kMIsblessFieldNumber = 5;
  inline ::google::protobuf::int32 m_isbless() const;
  inline void set_m_isbless(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangTemp)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_uplecost();
  inline void clear_has_m_uplecost();
  inline void set_has_m_remain();
  inline void clear_has_m_remain();
  inline void set_has_m_cost();
  inline void clear_has_m_cost();
  inline void set_has_m_isbless();
  inline void clear_has_m_isbless();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_uplecost_;
  ::google::protobuf::int32 m_remain_;
  ::google::protobuf::int32 m_cost_;
  ::google::protobuf::int32 m_isbless_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangTemp* default_instance_;
};
// -------------------------------------------------------------------

class GM_BlessResult : public ::google::protobuf::Message {
 public:
  GM_BlessResult();
  virtual ~GM_BlessResult();

  GM_BlessResult(const GM_BlessResult& from);

  inline GM_BlessResult& operator=(const GM_BlessResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_BlessResult& default_instance();

  void Swap(GM_BlessResult* other);

  // implements Message ----------------------------------------------

  GM_BlessResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_BlessResult& from);
  void MergeFrom(const GM_BlessResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // repeated .GM_BlessObj m_objs = 2;
  inline int m_objs_size() const;
  inline void clear_m_objs();
  static const int kMObjsFieldNumber = 2;
  inline const ::GM_BlessObj& m_objs(int index) const;
  inline ::GM_BlessObj* mutable_m_objs(int index);
  inline ::GM_BlessObj* add_m_objs();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_BlessObj >&
      m_objs() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_BlessObj >*
      mutable_m_objs();

  // @@protoc_insertion_point(class_scope:GM_BlessResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_BlessObj > m_objs_;
  ::google::protobuf::int32 m_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_BlessResult* default_instance_;
};
// -------------------------------------------------------------------

class GM_BlessObj : public ::google::protobuf::Message {
 public:
  GM_BlessObj();
  virtual ~GM_BlessObj();

  GM_BlessObj(const GM_BlessObj& from);

  inline GM_BlessObj& operator=(const GM_BlessObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_BlessObj& default_instance();

  void Swap(GM_BlessObj* other);

  // implements Message ----------------------------------------------

  GM_BlessObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_BlessObj& from);
  void MergeFrom(const GM_BlessObj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // required int32 m_objcount = 2;
  inline bool has_m_objcount() const;
  inline void clear_m_objcount();
  static const int kMObjcountFieldNumber = 2;
  inline ::google::protobuf::int32 m_objcount() const;
  inline void set_m_objcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_BlessObj)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_objcount();
  inline void clear_has_m_objcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_objcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_BlessObj* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangModuleInfoList : public ::google::protobuf::Message {
 public:
  GM_GangModuleInfoList();
  virtual ~GM_GangModuleInfoList();

  GM_GangModuleInfoList(const GM_GangModuleInfoList& from);

  inline GM_GangModuleInfoList& operator=(const GM_GangModuleInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangModuleInfoList& default_instance();

  void Swap(GM_GangModuleInfoList* other);

  // implements Message ----------------------------------------------

  GM_GangModuleInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangModuleInfoList& from);
  void MergeFrom(const GM_GangModuleInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hasGang = 1;
  inline bool has_hasgang() const;
  inline void clear_hasgang();
  static const int kHasGangFieldNumber = 1;
  inline ::google::protobuf::int32 hasgang() const;
  inline void set_hasgang(::google::protobuf::int32 value);

  // repeated .GM_GangModuleInfo gangModuleInfo = 2;
  inline int gangmoduleinfo_size() const;
  inline void clear_gangmoduleinfo();
  static const int kGangModuleInfoFieldNumber = 2;
  inline const ::GM_GangModuleInfo& gangmoduleinfo(int index) const;
  inline ::GM_GangModuleInfo* mutable_gangmoduleinfo(int index);
  inline ::GM_GangModuleInfo* add_gangmoduleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangModuleInfo >&
      gangmoduleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangModuleInfo >*
      mutable_gangmoduleinfo();

  // @@protoc_insertion_point(class_scope:GM_GangModuleInfoList)
 private:
  inline void set_has_hasgang();
  inline void clear_has_hasgang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangModuleInfo > gangmoduleinfo_;
  ::google::protobuf::int32 hasgang_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangModuleInfoList* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangNotify : public ::google::protobuf::Message {
 public:
  GM_GangNotify();
  virtual ~GM_GangNotify();

  GM_GangNotify(const GM_GangNotify& from);

  inline GM_GangNotify& operator=(const GM_GangNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangNotify& default_instance();

  void Swap(GM_GangNotify* other);

  // implements Message ----------------------------------------------

  GM_GangNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangNotify& from);
  void MergeFrom(const GM_GangNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 m_ganggmid = 1;
  inline bool has_m_ganggmid() const;
  inline void clear_m_ganggmid();
  static const int kMGanggmidFieldNumber = 1;
  inline ::google::protobuf::int64 m_ganggmid() const;
  inline void set_m_ganggmid(::google::protobuf::int64 value);

  // optional int32 m_gangexp = 2;
  inline bool has_m_gangexp() const;
  inline void clear_m_gangexp();
  static const int kMGangexpFieldNumber = 2;
  inline ::google::protobuf::int32 m_gangexp() const;
  inline void set_m_gangexp(::google::protobuf::int32 value);

  // optional int32 m_ganglv = 3;
  inline bool has_m_ganglv() const;
  inline void clear_m_ganglv();
  static const int kMGanglvFieldNumber = 3;
  inline ::google::protobuf::int32 m_ganglv() const;
  inline void set_m_ganglv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangNotify)
 private:
  inline void set_has_m_ganggmid();
  inline void clear_has_m_ganggmid();
  inline void set_has_m_gangexp();
  inline void clear_has_m_gangexp();
  inline void set_has_m_ganglv();
  inline void clear_has_m_ganglv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_ganggmid_;
  ::google::protobuf::int32 m_gangexp_;
  ::google::protobuf::int32 m_ganglv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangNotify* default_instance_;
};
// -------------------------------------------------------------------

class GM_ApplyResult : public ::google::protobuf::Message {
 public:
  GM_ApplyResult();
  virtual ~GM_ApplyResult();

  GM_ApplyResult(const GM_ApplyResult& from);

  inline GM_ApplyResult& operator=(const GM_ApplyResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ApplyResult& default_instance();

  void Swap(GM_ApplyResult* other);

  // implements Message ----------------------------------------------

  GM_ApplyResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ApplyResult& from);
  void MergeFrom(const GM_ApplyResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int64 m_preganggmid = 2;
  inline bool has_m_preganggmid() const;
  inline void clear_m_preganggmid();
  static const int kMPreganggmidFieldNumber = 2;
  inline ::google::protobuf::int64 m_preganggmid() const;
  inline void set_m_preganggmid(::google::protobuf::int64 value);

  // optional int64 m_nowganggmid = 3;
  inline bool has_m_nowganggmid() const;
  inline void clear_m_nowganggmid();
  static const int kMNowganggmidFieldNumber = 3;
  inline ::google::protobuf::int64 m_nowganggmid() const;
  inline void set_m_nowganggmid(::google::protobuf::int64 value);

  // optional int32 m_applycount = 4;
  inline bool has_m_applycount() const;
  inline void clear_m_applycount();
  static const int kMApplycountFieldNumber = 4;
  inline ::google::protobuf::int32 m_applycount() const;
  inline void set_m_applycount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ApplyResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_preganggmid();
  inline void clear_has_m_preganggmid();
  inline void set_has_m_nowganggmid();
  inline void clear_has_m_nowganggmid();
  inline void set_has_m_applycount();
  inline void clear_has_m_applycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_preganggmid_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_applycount_;
  ::google::protobuf::int64 m_nowganggmid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gang_2etxt();
  friend void protobuf_AssignDesc_gang_2etxt();
  friend void protobuf_ShutdownFile_gang_2etxt();

  void InitAsDefaultInstance();
  static GM_ApplyResult* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_GangInfo

// required int64 gmid = 1;
inline bool GM_GangInfo::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangInfo::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangInfo::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangInfo::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_GangInfo::gmid() const {
  return gmid_;
}
inline void GM_GangInfo::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 rank = 2;
inline bool GM_GangInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GM_GangInfo::rank() const {
  return rank_;
}
inline void GM_GangInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string name = 3;
inline bool GM_GangInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_GangInfo::name() const {
  return *name_;
}
inline void GM_GangInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_GangInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string leaderName = 4;
inline bool GM_GangInfo::has_leadername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangInfo::set_has_leadername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangInfo::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangInfo::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& GM_GangInfo::leadername() const {
  return *leadername_;
}
inline void GM_GangInfo::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void GM_GangInfo::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void GM_GangInfo::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangInfo::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}
inline ::std::string* GM_GangInfo::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangInfo::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 lv = 5;
inline bool GM_GangInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 GM_GangInfo::lv() const {
  return lv_;
}
inline void GM_GangInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 memberNum = 6;
inline bool GM_GangInfo::has_membernum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangInfo::set_has_membernum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangInfo::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangInfo::clear_membernum() {
  membernum_ = 0;
  clear_has_membernum();
}
inline ::google::protobuf::int32 GM_GangInfo::membernum() const {
  return membernum_;
}
inline void GM_GangInfo::set_membernum(::google::protobuf::int32 value) {
  set_has_membernum();
  membernum_ = value;
}

// optional int32 maxMember = 7;
inline bool GM_GangInfo::has_maxmember() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GangInfo::set_has_maxmember() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GangInfo::clear_has_maxmember() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GangInfo::clear_maxmember() {
  maxmember_ = 0;
  clear_has_maxmember();
}
inline ::google::protobuf::int32 GM_GangInfo::maxmember() const {
  return maxmember_;
}
inline void GM_GangInfo::set_maxmember(::google::protobuf::int32 value) {
  set_has_maxmember();
  maxmember_ = value;
}

// optional string pronoce = 8;
inline bool GM_GangInfo::has_pronoce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GangInfo::set_has_pronoce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GangInfo::clear_has_pronoce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GangInfo::clear_pronoce() {
  if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
    pronoce_->clear();
  }
  clear_has_pronoce();
}
inline const ::std::string& GM_GangInfo::pronoce() const {
  return *pronoce_;
}
inline void GM_GangInfo::set_pronoce(const ::std::string& value) {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  pronoce_->assign(value);
}
inline void GM_GangInfo::set_pronoce(const char* value) {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  pronoce_->assign(value);
}
inline void GM_GangInfo::set_pronoce(const char* value, size_t size) {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  pronoce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangInfo::mutable_pronoce() {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  return pronoce_;
}
inline ::std::string* GM_GangInfo::release_pronoce() {
  clear_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pronoce_;
    pronoce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangInfo::set_allocated_pronoce(::std::string* pronoce) {
  if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
    delete pronoce_;
  }
  if (pronoce) {
    set_has_pronoce();
    pronoce_ = pronoce;
  } else {
    clear_has_pronoce();
    pronoce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isApply = 9;
inline bool GM_GangInfo::has_isapply() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GangInfo::set_has_isapply() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GangInfo::clear_has_isapply() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GangInfo::clear_isapply() {
  isapply_ = 0;
  clear_has_isapply();
}
inline ::google::protobuf::int32 GM_GangInfo::isapply() const {
  return isapply_;
}
inline void GM_GangInfo::set_isapply(::google::protobuf::int32 value) {
  set_has_isapply();
  isapply_ = value;
}

// -------------------------------------------------------------------

// GM_MyGang

// required int32 roleId = 1;
inline bool GM_MyGang::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_MyGang::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_MyGang::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_MyGang::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_MyGang::roleid() const {
  return roleid_;
}
inline void GM_MyGang::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional .GM_GangInfo baseInfo = 2;
inline bool GM_MyGang::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_MyGang::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_MyGang::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_MyGang::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::GM_GangInfo::Clear();
  clear_has_baseinfo();
}
inline const ::GM_GangInfo& GM_MyGang::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::GM_GangInfo* GM_MyGang::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::GM_GangInfo;
  return baseinfo_;
}
inline ::GM_GangInfo* GM_MyGang::release_baseinfo() {
  clear_has_baseinfo();
  ::GM_GangInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void GM_MyGang::set_allocated_baseinfo(::GM_GangInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// optional int32 pow = 3;
inline bool GM_MyGang::has_pow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_MyGang::set_has_pow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_MyGang::clear_has_pow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_MyGang::clear_pow() {
  pow_ = 0;
  clear_has_pow();
}
inline ::google::protobuf::int32 GM_MyGang::pow() const {
  return pow_;
}
inline void GM_MyGang::set_pow(::google::protobuf::int32 value) {
  set_has_pow();
  pow_ = value;
}

// optional int32 richies = 4;
inline bool GM_MyGang::has_richies() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_MyGang::set_has_richies() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_MyGang::clear_has_richies() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_MyGang::clear_richies() {
  richies_ = 0;
  clear_has_richies();
}
inline ::google::protobuf::int32 GM_MyGang::richies() const {
  return richies_;
}
inline void GM_MyGang::set_richies(::google::protobuf::int32 value) {
  set_has_richies();
  richies_ = value;
}

// optional string notice = 6;
inline bool GM_MyGang::has_notice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_MyGang::set_has_notice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_MyGang::clear_has_notice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_MyGang::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& GM_MyGang::notice() const {
  return *notice_;
}
inline void GM_MyGang::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GM_MyGang::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GM_MyGang::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_MyGang::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GM_MyGang::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_MyGang::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 exp = 7;
inline bool GM_MyGang::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_MyGang::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_MyGang::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_MyGang::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GM_MyGang::exp() const {
  return exp_;
}
inline void GM_MyGang::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .GM_GangRole roles = 11;
inline int GM_MyGang::roles_size() const {
  return roles_.size();
}
inline void GM_MyGang::clear_roles() {
  roles_.Clear();
}
inline const ::GM_GangRole& GM_MyGang::roles(int index) const {
  return roles_.Get(index);
}
inline ::GM_GangRole* GM_MyGang::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::GM_GangRole* GM_MyGang::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRole >&
GM_MyGang::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangRole >*
GM_MyGang::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// GM_AllGangInfo

// required int32 roleId = 1;
inline bool GM_AllGangInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AllGangInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AllGangInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AllGangInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_AllGangInfo::roleid() const {
  return roleid_;
}
inline void GM_AllGangInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 m_allgangcount = 2;
inline bool GM_AllGangInfo::has_m_allgangcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_AllGangInfo::set_has_m_allgangcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_AllGangInfo::clear_has_m_allgangcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_AllGangInfo::clear_m_allgangcount() {
  m_allgangcount_ = 0;
  clear_has_m_allgangcount();
}
inline ::google::protobuf::int32 GM_AllGangInfo::m_allgangcount() const {
  return m_allgangcount_;
}
inline void GM_AllGangInfo::set_m_allgangcount(::google::protobuf::int32 value) {
  set_has_m_allgangcount();
  m_allgangcount_ = value;
}

// repeated .GM_GangInfo gang = 3;
inline int GM_AllGangInfo::gang_size() const {
  return gang_.size();
}
inline void GM_AllGangInfo::clear_gang() {
  gang_.Clear();
}
inline const ::GM_GangInfo& GM_AllGangInfo::gang(int index) const {
  return gang_.Get(index);
}
inline ::GM_GangInfo* GM_AllGangInfo::mutable_gang(int index) {
  return gang_.Mutable(index);
}
inline ::GM_GangInfo* GM_AllGangInfo::add_gang() {
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangInfo >&
GM_AllGangInfo::gang() const {
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangInfo >*
GM_AllGangInfo::mutable_gang() {
  return &gang_;
}

// -------------------------------------------------------------------

// GM_AllGangApply

// required int32 roleId = 1;
inline bool GM_AllGangApply::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AllGangApply::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AllGangApply::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AllGangApply::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_AllGangApply::roleid() const {
  return roleid_;
}
inline void GM_AllGangApply::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .GM_GangRole roles = 2;
inline int GM_AllGangApply::roles_size() const {
  return roles_.size();
}
inline void GM_AllGangApply::clear_roles() {
  roles_.Clear();
}
inline const ::GM_GangRole& GM_AllGangApply::roles(int index) const {
  return roles_.Get(index);
}
inline ::GM_GangRole* GM_AllGangApply::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::GM_GangRole* GM_AllGangApply::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRole >&
GM_AllGangApply::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangRole >*
GM_AllGangApply::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// GM_CreateGang

// required int32 roleId = 1;
inline bool GM_CreateGang::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_CreateGang::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_CreateGang::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_CreateGang::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_CreateGang::roleid() const {
  return roleid_;
}
inline void GM_CreateGang::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool GM_CreateGang::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_CreateGang::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_CreateGang::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_CreateGang::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_CreateGang::name() const {
  return *name_;
}
inline void GM_CreateGang::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_CreateGang::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_CreateGang::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_CreateGang::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_CreateGang::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_CreateGang::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GangRoleOperate

// required int32 roleId = 1;
inline bool GM_GangRoleOperate::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRoleOperate::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRoleOperate::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRoleOperate::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangRoleOperate::roleid() const {
  return roleid_;
}
inline void GM_GangRoleOperate::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 operId = 2;
inline bool GM_GangRoleOperate::has_operid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRoleOperate::set_has_operid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRoleOperate::clear_has_operid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRoleOperate::clear_operid() {
  operid_ = 0;
  clear_has_operid();
}
inline ::google::protobuf::int32 GM_GangRoleOperate::operid() const {
  return operid_;
}
inline void GM_GangRoleOperate::set_operid(::google::protobuf::int32 value) {
  set_has_operid();
  operid_ = value;
}

// optional int32 job = 3;
inline bool GM_GangRoleOperate::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangRoleOperate::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangRoleOperate::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangRoleOperate::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 GM_GangRoleOperate::job() const {
  return job_;
}
inline void GM_GangRoleOperate::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional int32 isAgree = 4;
inline bool GM_GangRoleOperate::has_isagree() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRoleOperate::set_has_isagree() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRoleOperate::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRoleOperate::clear_isagree() {
  isagree_ = 0;
  clear_has_isagree();
}
inline ::google::protobuf::int32 GM_GangRoleOperate::isagree() const {
  return isagree_;
}
inline void GM_GangRoleOperate::set_isagree(::google::protobuf::int32 value) {
  set_has_isagree();
  isagree_ = value;
}

// -------------------------------------------------------------------

// GM_GangRole

// required int32 roleId = 1;
inline bool GM_GangRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRole::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRole::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRole::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangRole::roleid() const {
  return roleid_;
}
inline void GM_GangRole::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 rank = 2;
inline bool GM_GangRole::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRole::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRole::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRole::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GM_GangRole::rank() const {
  return rank_;
}
inline void GM_GangRole::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string name = 3;
inline bool GM_GangRole::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangRole::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_GangRole::name() const {
  return *name_;
}
inline void GM_GangRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_GangRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangRole::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 lv = 5;
inline bool GM_GangRole::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRole::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRole::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRole::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 GM_GangRole::lv() const {
  return lv_;
}
inline void GM_GangRole::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 vocation = 6;
inline bool GM_GangRole::has_vocation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangRole::set_has_vocation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangRole::clear_has_vocation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangRole::clear_vocation() {
  vocation_ = 0;
  clear_has_vocation();
}
inline ::google::protobuf::int32 GM_GangRole::vocation() const {
  return vocation_;
}
inline void GM_GangRole::set_vocation(::google::protobuf::int32 value) {
  set_has_vocation();
  vocation_ = value;
}

// optional int32 job = 7;
inline bool GM_GangRole::has_job() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangRole::set_has_job() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangRole::clear_has_job() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangRole::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 GM_GangRole::job() const {
  return job_;
}
inline void GM_GangRole::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional int32 lastLogin = 8;
inline bool GM_GangRole::has_lastlogin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GangRole::set_has_lastlogin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GangRole::clear_has_lastlogin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GangRole::clear_lastlogin() {
  lastlogin_ = 0;
  clear_has_lastlogin();
}
inline ::google::protobuf::int32 GM_GangRole::lastlogin() const {
  return lastlogin_;
}
inline void GM_GangRole::set_lastlogin(::google::protobuf::int32 value) {
  set_has_lastlogin();
  lastlogin_ = value;
}

// optional int32 hisRichies = 9;
inline bool GM_GangRole::has_hisrichies() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GangRole::set_has_hisrichies() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GangRole::clear_has_hisrichies() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GangRole::clear_hisrichies() {
  hisrichies_ = 0;
  clear_has_hisrichies();
}
inline ::google::protobuf::int32 GM_GangRole::hisrichies() const {
  return hisrichies_;
}
inline void GM_GangRole::set_hisrichies(::google::protobuf::int32 value) {
  set_has_hisrichies();
  hisrichies_ = value;
}

// optional int32 power = 10;
inline bool GM_GangRole::has_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GangRole::set_has_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GangRole::clear_has_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GangRole::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 GM_GangRole::power() const {
  return power_;
}
inline void GM_GangRole::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 richies = 11;
inline bool GM_GangRole::has_richies() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_GangRole::set_has_richies() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_GangRole::clear_has_richies() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_GangRole::clear_richies() {
  richies_ = 0;
  clear_has_richies();
}
inline ::google::protobuf::int32 GM_GangRole::richies() const {
  return richies_;
}
inline void GM_GangRole::set_richies(::google::protobuf::int32 value) {
  set_has_richies();
  richies_ = value;
}

// optional int32 flag = 12;
inline bool GM_GangRole::has_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_GangRole::set_has_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_GangRole::clear_has_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_GangRole::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GM_GangRole::flag() const {
  return flag_;
}
inline void GM_GangRole::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 contype = 13;
inline bool GM_GangRole::has_contype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_GangRole::set_has_contype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_GangRole::clear_has_contype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_GangRole::clear_contype() {
  contype_ = 0;
  clear_has_contype();
}
inline ::google::protobuf::int32 GM_GangRole::contype() const {
  return contype_;
}
inline void GM_GangRole::set_contype(::google::protobuf::int32 value) {
  set_has_contype();
  contype_ = value;
}

// optional int32 isfriend = 14;
inline bool GM_GangRole::has_isfriend() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GM_GangRole::set_has_isfriend() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GM_GangRole::clear_has_isfriend() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GM_GangRole::clear_isfriend() {
  isfriend_ = 0;
  clear_has_isfriend();
}
inline ::google::protobuf::int32 GM_GangRole::isfriend() const {
  return isfriend_;
}
inline void GM_GangRole::set_isfriend(::google::protobuf::int32 value) {
  set_has_isfriend();
  isfriend_ = value;
}

// -------------------------------------------------------------------

// GM_AllGangRole

// required int32 roleId = 1;
inline bool GM_AllGangRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AllGangRole::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AllGangRole::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AllGangRole::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_AllGangRole::roleid() const {
  return roleid_;
}
inline void GM_AllGangRole::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .GM_GangRole roles = 2;
inline int GM_AllGangRole::roles_size() const {
  return roles_.size();
}
inline void GM_AllGangRole::clear_roles() {
  roles_.Clear();
}
inline const ::GM_GangRole& GM_AllGangRole::roles(int index) const {
  return roles_.Get(index);
}
inline ::GM_GangRole* GM_AllGangRole::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::GM_GangRole* GM_AllGangRole::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRole >&
GM_AllGangRole::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangRole >*
GM_AllGangRole::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// GM_GangNoticeChange

// required int32 roleId = 1;
inline bool GM_GangNoticeChange::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangNoticeChange::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangNoticeChange::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangNoticeChange::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangNoticeChange::roleid() const {
  return roleid_;
}
inline void GM_GangNoticeChange::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string notice = 2;
inline bool GM_GangNoticeChange::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangNoticeChange::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangNoticeChange::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangNoticeChange::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& GM_GangNoticeChange::notice() const {
  return *notice_;
}
inline void GM_GangNoticeChange::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GM_GangNoticeChange::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GM_GangNoticeChange::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangNoticeChange::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GM_GangNoticeChange::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangNoticeChange::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GangQuickJoin

// required int32 result = 1;
inline bool GM_GangQuickJoin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangQuickJoin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangQuickJoin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangQuickJoin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangQuickJoin::result() const {
  return result_;
}
inline void GM_GangQuickJoin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated int64 gangGmid = 2;
inline int GM_GangQuickJoin::ganggmid_size() const {
  return ganggmid_.size();
}
inline void GM_GangQuickJoin::clear_ganggmid() {
  ganggmid_.Clear();
}
inline ::google::protobuf::int64 GM_GangQuickJoin::ganggmid(int index) const {
  return ganggmid_.Get(index);
}
inline void GM_GangQuickJoin::set_ganggmid(int index, ::google::protobuf::int64 value) {
  ganggmid_.Set(index, value);
}
inline void GM_GangQuickJoin::add_ganggmid(::google::protobuf::int64 value) {
  ganggmid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GM_GangQuickJoin::ganggmid() const {
  return ganggmid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GM_GangQuickJoin::mutable_ganggmid() {
  return &ganggmid_;
}

// -------------------------------------------------------------------

// GM_GangLog

// required string log = 1;
inline bool GM_GangLog::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangLog::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangLog::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangLog::clear_log() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& GM_GangLog::log() const {
  return *log_;
}
inline void GM_GangLog::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void GM_GangLog::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void GM_GangLog::set_log(const char* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangLog::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  return log_;
}
inline ::std::string* GM_GangLog::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangLog::set_allocated_log(::std::string* log) {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (log) {
    set_has_log();
    log_ = log;
  } else {
    clear_has_log();
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string time = 2;
inline bool GM_GangLog::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangLog::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangLog::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& GM_GangLog::time() const {
  return *time_;
}
inline void GM_GangLog::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void GM_GangLog::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void GM_GangLog::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangLog::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* GM_GangLog::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangLog::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_roleId = 3;
inline bool GM_GangLog::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangLog::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangLog::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangLog::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_GangLog::m_roleid() const {
  return m_roleid_;
}
inline void GM_GangLog::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_profession = 4;
inline bool GM_GangLog::has_m_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangLog::set_has_m_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangLog::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangLog::clear_m_profession() {
  m_profession_ = 0;
  clear_has_m_profession();
}
inline ::google::protobuf::int32 GM_GangLog::m_profession() const {
  return m_profession_;
}
inline void GM_GangLog::set_m_profession(::google::protobuf::int32 value) {
  set_has_m_profession();
  m_profession_ = value;
}

// optional string m_rolename = 5;
inline bool GM_GangLog::has_m_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangLog::set_has_m_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangLog::clear_has_m_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangLog::clear_m_rolename() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    m_rolename_->clear();
  }
  clear_has_m_rolename();
}
inline const ::std::string& GM_GangLog::m_rolename() const {
  return *m_rolename_;
}
inline void GM_GangLog::set_m_rolename(const ::std::string& value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_GangLog::set_m_rolename(const char* value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_GangLog::set_m_rolename(const char* value, size_t size) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangLog::mutable_m_rolename() {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  return m_rolename_;
}
inline ::std::string* GM_GangLog::release_m_rolename() {
  clear_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rolename_;
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangLog::set_allocated_m_rolename(::std::string* m_rolename) {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_rolename) {
    set_has_m_rolename();
    m_rolename_ = m_rolename;
  } else {
    clear_has_m_rolename();
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rolelv = 6;
inline bool GM_GangLog::has_m_rolelv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangLog::set_has_m_rolelv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangLog::clear_has_m_rolelv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangLog::clear_m_rolelv() {
  m_rolelv_ = 0;
  clear_has_m_rolelv();
}
inline ::google::protobuf::int32 GM_GangLog::m_rolelv() const {
  return m_rolelv_;
}
inline void GM_GangLog::set_m_rolelv(::google::protobuf::int32 value) {
  set_has_m_rolelv();
  m_rolelv_ = value;
}

// -------------------------------------------------------------------

// GM_AllGangLog

// required int64 gmid = 1;
inline bool GM_AllGangLog::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AllGangLog::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AllGangLog::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AllGangLog::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_AllGangLog::gmid() const {
  return gmid_;
}
inline void GM_AllGangLog::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// repeated .GM_GangLog logs = 2;
inline int GM_AllGangLog::logs_size() const {
  return logs_.size();
}
inline void GM_AllGangLog::clear_logs() {
  logs_.Clear();
}
inline const ::GM_GangLog& GM_AllGangLog::logs(int index) const {
  return logs_.Get(index);
}
inline ::GM_GangLog* GM_AllGangLog::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::GM_GangLog* GM_AllGangLog::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangLog >&
GM_AllGangLog::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangLog >*
GM_AllGangLog::mutable_logs() {
  return &logs_;
}

// -------------------------------------------------------------------

// GM_GangRankInfo

// required int32 m_place = 6;
inline bool GM_GangRankInfo::has_m_place() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRankInfo::set_has_m_place() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRankInfo::clear_has_m_place() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRankInfo::clear_m_place() {
  m_place_ = 0;
  clear_has_m_place();
}
inline ::google::protobuf::int32 GM_GangRankInfo::m_place() const {
  return m_place_;
}
inline void GM_GangRankInfo::set_m_place(::google::protobuf::int32 value) {
  set_has_m_place();
  m_place_ = value;
}

// optional string m_gangName = 2;
inline bool GM_GangRankInfo::has_m_gangname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRankInfo::set_has_m_gangname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRankInfo::clear_has_m_gangname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRankInfo::clear_m_gangname() {
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    m_gangname_->clear();
  }
  clear_has_m_gangname();
}
inline const ::std::string& GM_GangRankInfo::m_gangname() const {
  return *m_gangname_;
}
inline void GM_GangRankInfo::set_m_gangname(const ::std::string& value) {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  m_gangname_->assign(value);
}
inline void GM_GangRankInfo::set_m_gangname(const char* value) {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  m_gangname_->assign(value);
}
inline void GM_GangRankInfo::set_m_gangname(const char* value, size_t size) {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  m_gangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangRankInfo::mutable_m_gangname() {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  return m_gangname_;
}
inline ::std::string* GM_GangRankInfo::release_m_gangname() {
  clear_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_gangname_;
    m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangRankInfo::set_allocated_m_gangname(::std::string* m_gangname) {
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gangname_;
  }
  if (m_gangname) {
    set_has_m_gangname();
    m_gangname_ = m_gangname;
  } else {
    clear_has_m_gangname();
    m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_level = 4;
inline bool GM_GangRankInfo::has_m_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangRankInfo::set_has_m_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangRankInfo::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangRankInfo::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 GM_GangRankInfo::m_level() const {
  return m_level_;
}
inline void GM_GangRankInfo::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_value = 5;
inline bool GM_GangRankInfo::has_m_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRankInfo::set_has_m_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRankInfo::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRankInfo::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 GM_GangRankInfo::m_value() const {
  return m_value_;
}
inline void GM_GangRankInfo::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_people = 1;
inline bool GM_GangRankInfo::has_m_people() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangRankInfo::set_has_m_people() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangRankInfo::clear_has_m_people() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangRankInfo::clear_m_people() {
  m_people_ = 0;
  clear_has_m_people();
}
inline ::google::protobuf::int32 GM_GangRankInfo::m_people() const {
  return m_people_;
}
inline void GM_GangRankInfo::set_m_people(::google::protobuf::int32 value) {
  set_has_m_people();
  m_people_ = value;
}

// -------------------------------------------------------------------

// GM_GangRank

// required int32 count = 1;
inline bool GM_GangRank::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRank::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRank::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRank::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_GangRank::count() const {
  return count_;
}
inline void GM_GangRank::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_GangRankInfo gangrank = 2;
inline int GM_GangRank::gangrank_size() const {
  return gangrank_.size();
}
inline void GM_GangRank::clear_gangrank() {
  gangrank_.Clear();
}
inline const ::GM_GangRankInfo& GM_GangRank::gangrank(int index) const {
  return gangrank_.Get(index);
}
inline ::GM_GangRankInfo* GM_GangRank::mutable_gangrank(int index) {
  return gangrank_.Mutable(index);
}
inline ::GM_GangRankInfo* GM_GangRank::add_gangrank() {
  return gangrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRankInfo >&
GM_GangRank::gangrank() const {
  return gangrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangRankInfo >*
GM_GangRank::mutable_gangrank() {
  return &gangrank_;
}

// optional int32 m_myGangRank = 3;
inline bool GM_GangRank::has_m_mygangrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangRank::set_has_m_mygangrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangRank::clear_has_m_mygangrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangRank::clear_m_mygangrank() {
  m_mygangrank_ = 0;
  clear_has_m_mygangrank();
}
inline ::google::protobuf::int32 GM_GangRank::m_mygangrank() const {
  return m_mygangrank_;
}
inline void GM_GangRank::set_m_mygangrank(::google::protobuf::int32 value) {
  set_has_m_mygangrank();
  m_mygangrank_ = value;
}

// optional string m_myGangName = 4;
inline bool GM_GangRank::has_m_mygangname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRank::set_has_m_mygangname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRank::clear_has_m_mygangname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRank::clear_m_mygangname() {
  if (m_mygangname_ != &::google::protobuf::internal::kEmptyString) {
    m_mygangname_->clear();
  }
  clear_has_m_mygangname();
}
inline const ::std::string& GM_GangRank::m_mygangname() const {
  return *m_mygangname_;
}
inline void GM_GangRank::set_m_mygangname(const ::std::string& value) {
  set_has_m_mygangname();
  if (m_mygangname_ == &::google::protobuf::internal::kEmptyString) {
    m_mygangname_ = new ::std::string;
  }
  m_mygangname_->assign(value);
}
inline void GM_GangRank::set_m_mygangname(const char* value) {
  set_has_m_mygangname();
  if (m_mygangname_ == &::google::protobuf::internal::kEmptyString) {
    m_mygangname_ = new ::std::string;
  }
  m_mygangname_->assign(value);
}
inline void GM_GangRank::set_m_mygangname(const char* value, size_t size) {
  set_has_m_mygangname();
  if (m_mygangname_ == &::google::protobuf::internal::kEmptyString) {
    m_mygangname_ = new ::std::string;
  }
  m_mygangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangRank::mutable_m_mygangname() {
  set_has_m_mygangname();
  if (m_mygangname_ == &::google::protobuf::internal::kEmptyString) {
    m_mygangname_ = new ::std::string;
  }
  return m_mygangname_;
}
inline ::std::string* GM_GangRank::release_m_mygangname() {
  clear_has_m_mygangname();
  if (m_mygangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_mygangname_;
    m_mygangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangRank::set_allocated_m_mygangname(::std::string* m_mygangname) {
  if (m_mygangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mygangname_;
  }
  if (m_mygangname) {
    set_has_m_mygangname();
    m_mygangname_ = m_mygangname;
  } else {
    clear_has_m_mygangname();
    m_mygangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GangIntroduction

// optional int32 gangLevel = 1;
inline bool GM_GangIntroduction::has_ganglevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangIntroduction::set_has_ganglevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangIntroduction::clear_has_ganglevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangIntroduction::clear_ganglevel() {
  ganglevel_ = 0;
  clear_has_ganglevel();
}
inline ::google::protobuf::int32 GM_GangIntroduction::ganglevel() const {
  return ganglevel_;
}
inline void GM_GangIntroduction::set_ganglevel(::google::protobuf::int32 value) {
  set_has_ganglevel();
  ganglevel_ = value;
}

// required int32 gangMembers = 2;
inline bool GM_GangIntroduction::has_gangmembers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangIntroduction::set_has_gangmembers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangIntroduction::clear_has_gangmembers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangIntroduction::clear_gangmembers() {
  gangmembers_ = 0;
  clear_has_gangmembers();
}
inline ::google::protobuf::int32 GM_GangIntroduction::gangmembers() const {
  return gangmembers_;
}
inline void GM_GangIntroduction::set_gangmembers(::google::protobuf::int32 value) {
  set_has_gangmembers();
  gangmembers_ = value;
}

// optional string gangLeader = 3;
inline bool GM_GangIntroduction::has_gangleader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangIntroduction::set_has_gangleader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangIntroduction::clear_has_gangleader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangIntroduction::clear_gangleader() {
  if (gangleader_ != &::google::protobuf::internal::kEmptyString) {
    gangleader_->clear();
  }
  clear_has_gangleader();
}
inline const ::std::string& GM_GangIntroduction::gangleader() const {
  return *gangleader_;
}
inline void GM_GangIntroduction::set_gangleader(const ::std::string& value) {
  set_has_gangleader();
  if (gangleader_ == &::google::protobuf::internal::kEmptyString) {
    gangleader_ = new ::std::string;
  }
  gangleader_->assign(value);
}
inline void GM_GangIntroduction::set_gangleader(const char* value) {
  set_has_gangleader();
  if (gangleader_ == &::google::protobuf::internal::kEmptyString) {
    gangleader_ = new ::std::string;
  }
  gangleader_->assign(value);
}
inline void GM_GangIntroduction::set_gangleader(const char* value, size_t size) {
  set_has_gangleader();
  if (gangleader_ == &::google::protobuf::internal::kEmptyString) {
    gangleader_ = new ::std::string;
  }
  gangleader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangIntroduction::mutable_gangleader() {
  set_has_gangleader();
  if (gangleader_ == &::google::protobuf::internal::kEmptyString) {
    gangleader_ = new ::std::string;
  }
  return gangleader_;
}
inline ::std::string* GM_GangIntroduction::release_gangleader() {
  clear_has_gangleader();
  if (gangleader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gangleader_;
    gangleader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangIntroduction::set_allocated_gangleader(::std::string* gangleader) {
  if (gangleader_ != &::google::protobuf::internal::kEmptyString) {
    delete gangleader_;
  }
  if (gangleader) {
    set_has_gangleader();
    gangleader_ = gangleader;
  } else {
    clear_has_gangleader();
    gangleader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gangNotice = 4;
inline bool GM_GangIntroduction::has_gangnotice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangIntroduction::set_has_gangnotice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangIntroduction::clear_has_gangnotice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangIntroduction::clear_gangnotice() {
  if (gangnotice_ != &::google::protobuf::internal::kEmptyString) {
    gangnotice_->clear();
  }
  clear_has_gangnotice();
}
inline const ::std::string& GM_GangIntroduction::gangnotice() const {
  return *gangnotice_;
}
inline void GM_GangIntroduction::set_gangnotice(const ::std::string& value) {
  set_has_gangnotice();
  if (gangnotice_ == &::google::protobuf::internal::kEmptyString) {
    gangnotice_ = new ::std::string;
  }
  gangnotice_->assign(value);
}
inline void GM_GangIntroduction::set_gangnotice(const char* value) {
  set_has_gangnotice();
  if (gangnotice_ == &::google::protobuf::internal::kEmptyString) {
    gangnotice_ = new ::std::string;
  }
  gangnotice_->assign(value);
}
inline void GM_GangIntroduction::set_gangnotice(const char* value, size_t size) {
  set_has_gangnotice();
  if (gangnotice_ == &::google::protobuf::internal::kEmptyString) {
    gangnotice_ = new ::std::string;
  }
  gangnotice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangIntroduction::mutable_gangnotice() {
  set_has_gangnotice();
  if (gangnotice_ == &::google::protobuf::internal::kEmptyString) {
    gangnotice_ = new ::std::string;
  }
  return gangnotice_;
}
inline ::std::string* GM_GangIntroduction::release_gangnotice() {
  clear_has_gangnotice();
  if (gangnotice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gangnotice_;
    gangnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangIntroduction::set_allocated_gangnotice(::std::string* gangnotice) {
  if (gangnotice_ != &::google::protobuf::internal::kEmptyString) {
    delete gangnotice_;
  }
  if (gangnotice) {
    set_has_gangnotice();
    gangnotice_ = gangnotice;
  } else {
    clear_has_gangnotice();
    gangnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gangName = 5;
inline bool GM_GangIntroduction::has_gangname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangIntroduction::set_has_gangname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangIntroduction::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangIntroduction::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::kEmptyString) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& GM_GangIntroduction::gangname() const {
  return *gangname_;
}
inline void GM_GangIntroduction::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::kEmptyString) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
}
inline void GM_GangIntroduction::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::kEmptyString) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
}
inline void GM_GangIntroduction::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::kEmptyString) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangIntroduction::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::kEmptyString) {
    gangname_ = new ::std::string;
  }
  return gangname_;
}
inline ::std::string* GM_GangIntroduction::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangIntroduction::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxMembers = 6;
inline bool GM_GangIntroduction::has_maxmembers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangIntroduction::set_has_maxmembers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangIntroduction::clear_has_maxmembers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangIntroduction::clear_maxmembers() {
  maxmembers_ = 0;
  clear_has_maxmembers();
}
inline ::google::protobuf::int32 GM_GangIntroduction::maxmembers() const {
  return maxmembers_;
}
inline void GM_GangIntroduction::set_maxmembers(::google::protobuf::int32 value) {
  set_has_maxmembers();
  maxmembers_ = value;
}

// optional int32 gangRank = 7;
inline bool GM_GangIntroduction::has_gangrank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GangIntroduction::set_has_gangrank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GangIntroduction::clear_has_gangrank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GangIntroduction::clear_gangrank() {
  gangrank_ = 0;
  clear_has_gangrank();
}
inline ::google::protobuf::int32 GM_GangIntroduction::gangrank() const {
  return gangrank_;
}
inline void GM_GangIntroduction::set_gangrank(::google::protobuf::int32 value) {
  set_has_gangrank();
  gangrank_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_FBInfo_Request

// required int32 fbid = 1;
inline bool GM_GangFB_FBInfo_Request::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_FBInfo_Request::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_FBInfo_Request::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_FBInfo_Request::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GM_GangFB_FBInfo_Request::fbid() const {
  return fbid_;
}
inline void GM_GangFB_FBInfo_Request::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_FBInfo

// required int32 fbid = 1;
inline bool GM_GangFB_FBInfo::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_FBInfo::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_FBInfo::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_FBInfo::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GM_GangFB_FBInfo::fbid() const {
  return fbid_;
}
inline void GM_GangFB_FBInfo::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// optional int32 challenge = 2;
inline bool GM_GangFB_FBInfo::has_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangFB_FBInfo::set_has_challenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangFB_FBInfo::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangFB_FBInfo::clear_challenge() {
  challenge_ = 0;
  clear_has_challenge();
}
inline ::google::protobuf::int32 GM_GangFB_FBInfo::challenge() const {
  return challenge_;
}
inline void GM_GangFB_FBInfo::set_challenge(::google::protobuf::int32 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional int32 lefttimes = 3;
inline bool GM_GangFB_FBInfo::has_lefttimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangFB_FBInfo::set_has_lefttimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangFB_FBInfo::clear_has_lefttimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangFB_FBInfo::clear_lefttimes() {
  lefttimes_ = 0;
  clear_has_lefttimes();
}
inline ::google::protobuf::int32 GM_GangFB_FBInfo::lefttimes() const {
  return lefttimes_;
}
inline void GM_GangFB_FBInfo::set_lefttimes(::google::protobuf::int32 value) {
  set_has_lefttimes();
  lefttimes_ = value;
}

// optional float percent = 4;
inline bool GM_GangFB_FBInfo::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangFB_FBInfo::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangFB_FBInfo::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangFB_FBInfo::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float GM_GangFB_FBInfo::percent() const {
  return percent_;
}
inline void GM_GangFB_FBInfo::set_percent(float value) {
  set_has_percent();
  percent_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_FBInfo_Return

// required int32 result = 1;
inline bool GM_GangFB_FBInfo_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_FBInfo_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_FBInfo_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_FBInfo_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangFB_FBInfo_Return::result() const {
  return result_;
}
inline void GM_GangFB_FBInfo_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GM_GangFB_FBInfo fbinfo = 2;
inline int GM_GangFB_FBInfo_Return::fbinfo_size() const {
  return fbinfo_.size();
}
inline void GM_GangFB_FBInfo_Return::clear_fbinfo() {
  fbinfo_.Clear();
}
inline const ::GM_GangFB_FBInfo& GM_GangFB_FBInfo_Return::fbinfo(int index) const {
  return fbinfo_.Get(index);
}
inline ::GM_GangFB_FBInfo* GM_GangFB_FBInfo_Return::mutable_fbinfo(int index) {
  return fbinfo_.Mutable(index);
}
inline ::GM_GangFB_FBInfo* GM_GangFB_FBInfo_Return::add_fbinfo() {
  return fbinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFB_FBInfo >&
GM_GangFB_FBInfo_Return::fbinfo() const {
  return fbinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangFB_FBInfo >*
GM_GangFB_FBInfo_Return::mutable_fbinfo() {
  return &fbinfo_;
}

// -------------------------------------------------------------------

// GM_GangFB_RankInfo_Request

// required int32 fbid = 1;
inline bool GM_GangFB_RankInfo_Request::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_RankInfo_Request::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_RankInfo_Request::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_RankInfo_Request::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GM_GangFB_RankInfo_Request::fbid() const {
  return fbid_;
}
inline void GM_GangFB_RankInfo_Request::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_RankInfo

// required int32 fbid = 1;
inline bool GM_GangFB_RankInfo::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_RankInfo::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_RankInfo::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_RankInfo::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GM_GangFB_RankInfo::fbid() const {
  return fbid_;
}
inline void GM_GangFB_RankInfo::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// optional int32 rank = 2;
inline bool GM_GangFB_RankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangFB_RankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangFB_RankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangFB_RankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GM_GangFB_RankInfo::rank() const {
  return rank_;
}
inline void GM_GangFB_RankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string rolename = 3;
inline bool GM_GangFB_RankInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangFB_RankInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangFB_RankInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangFB_RankInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& GM_GangFB_RankInfo::rolename() const {
  return *rolename_;
}
inline void GM_GangFB_RankInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GM_GangFB_RankInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GM_GangFB_RankInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangFB_RankInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* GM_GangFB_RankInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangFB_RankInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 totalmage = 4;
inline bool GM_GangFB_RankInfo::has_totalmage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangFB_RankInfo::set_has_totalmage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangFB_RankInfo::clear_has_totalmage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangFB_RankInfo::clear_totalmage() {
  totalmage_ = 0;
  clear_has_totalmage();
}
inline ::google::protobuf::int32 GM_GangFB_RankInfo::totalmage() const {
  return totalmage_;
}
inline void GM_GangFB_RankInfo::set_totalmage(::google::protobuf::int32 value) {
  set_has_totalmage();
  totalmage_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_RankInfo_Return

// required int32 result = 1;
inline bool GM_GangFB_RankInfo_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_RankInfo_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_RankInfo_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_RankInfo_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangFB_RankInfo_Return::result() const {
  return result_;
}
inline void GM_GangFB_RankInfo_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GM_GangFB_RankInfo rankinfo = 2;
inline int GM_GangFB_RankInfo_Return::rankinfo_size() const {
  return rankinfo_.size();
}
inline void GM_GangFB_RankInfo_Return::clear_rankinfo() {
  rankinfo_.Clear();
}
inline const ::GM_GangFB_RankInfo& GM_GangFB_RankInfo_Return::rankinfo(int index) const {
  return rankinfo_.Get(index);
}
inline ::GM_GangFB_RankInfo* GM_GangFB_RankInfo_Return::mutable_rankinfo(int index) {
  return rankinfo_.Mutable(index);
}
inline ::GM_GangFB_RankInfo* GM_GangFB_RankInfo_Return::add_rankinfo() {
  return rankinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFB_RankInfo >&
GM_GangFB_RankInfo_Return::rankinfo() const {
  return rankinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangFB_RankInfo >*
GM_GangFB_RankInfo_Return::mutable_rankinfo() {
  return &rankinfo_;
}

// -------------------------------------------------------------------

// GM_GangFB_Fight_Request

// required int32 fbid = 1;
inline bool GM_GangFB_Fight_Request::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_Fight_Request::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_Fight_Request::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_Fight_Request::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GM_GangFB_Fight_Request::fbid() const {
  return fbid_;
}
inline void GM_GangFB_Fight_Request::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_Fight_Return

// required int32 result = 1;
inline bool GM_GangFB_Fight_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_Fight_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_Fight_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_Fight_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangFB_Fight_Return::result() const {
  return result_;
}
inline void GM_GangFB_Fight_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_Reward

// required int32 objectid = 1;
inline bool GM_GangFB_Reward::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_Reward::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_Reward::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_Reward::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 GM_GangFB_Reward::objectid() const {
  return objectid_;
}
inline void GM_GangFB_Reward::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// optional int32 number = 2;
inline bool GM_GangFB_Reward::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangFB_Reward::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangFB_Reward::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangFB_Reward::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 GM_GangFB_Reward::number() const {
  return number_;
}
inline void GM_GangFB_Reward::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// GM_GangFB_TakeFight

// required int32 damage = 1;
inline bool GM_GangFB_TakeFight::has_damage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFB_TakeFight::set_has_damage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFB_TakeFight::clear_has_damage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFB_TakeFight::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 GM_GangFB_TakeFight::damage() const {
  return damage_;
}
inline void GM_GangFB_TakeFight::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// repeated .GM_GangFB_Reward rewards = 2;
inline int GM_GangFB_TakeFight::rewards_size() const {
  return rewards_.size();
}
inline void GM_GangFB_TakeFight::clear_rewards() {
  rewards_.Clear();
}
inline const ::GM_GangFB_Reward& GM_GangFB_TakeFight::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::GM_GangFB_Reward* GM_GangFB_TakeFight::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::GM_GangFB_Reward* GM_GangFB_TakeFight::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFB_Reward >&
GM_GangFB_TakeFight::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangFB_Reward >*
GM_GangFB_TakeFight::mutable_rewards() {
  return &rewards_;
}

// -------------------------------------------------------------------

// GM_GangShop

// required int32 m_lv = 1;
inline bool GM_GangShop::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangShop::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangShop::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangShop::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 GM_GangShop::m_lv() const {
  return m_lv_;
}
inline void GM_GangShop::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_uplecost = 2;
inline bool GM_GangShop::has_m_uplecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangShop::set_has_m_uplecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangShop::clear_has_m_uplecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangShop::clear_m_uplecost() {
  m_uplecost_ = 0;
  clear_has_m_uplecost();
}
inline ::google::protobuf::int32 GM_GangShop::m_uplecost() const {
  return m_uplecost_;
}
inline void GM_GangShop::set_m_uplecost(::google::protobuf::int32 value) {
  set_has_m_uplecost();
  m_uplecost_ = value;
}

// repeated .GM_GangShopObj m_shopobj = 3;
inline int GM_GangShop::m_shopobj_size() const {
  return m_shopobj_.size();
}
inline void GM_GangShop::clear_m_shopobj() {
  m_shopobj_.Clear();
}
inline const ::GM_GangShopObj& GM_GangShop::m_shopobj(int index) const {
  return m_shopobj_.Get(index);
}
inline ::GM_GangShopObj* GM_GangShop::mutable_m_shopobj(int index) {
  return m_shopobj_.Mutable(index);
}
inline ::GM_GangShopObj* GM_GangShop::add_m_shopobj() {
  return m_shopobj_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangShopObj >&
GM_GangShop::m_shopobj() const {
  return m_shopobj_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangShopObj >*
GM_GangShop::mutable_m_shopobj() {
  return &m_shopobj_;
}

// -------------------------------------------------------------------

// GM_GangShopObj

// required int32 m_objid = 1;
inline bool GM_GangShopObj::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangShopObj::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangShopObj::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangShopObj::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 GM_GangShopObj::m_objid() const {
  return m_objid_;
}
inline void GM_GangShopObj::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// optional int32 m_showtype = 2;
inline bool GM_GangShopObj::has_m_showtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangShopObj::set_has_m_showtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangShopObj::clear_has_m_showtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangShopObj::clear_m_showtype() {
  m_showtype_ = 0;
  clear_has_m_showtype();
}
inline ::google::protobuf::int32 GM_GangShopObj::m_showtype() const {
  return m_showtype_;
}
inline void GM_GangShopObj::set_m_showtype(::google::protobuf::int32 value) {
  set_has_m_showtype();
  m_showtype_ = value;
}

// optional int32 m_remain = 3;
inline bool GM_GangShopObj::has_m_remain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangShopObj::set_has_m_remain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangShopObj::clear_has_m_remain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangShopObj::clear_m_remain() {
  m_remain_ = 0;
  clear_has_m_remain();
}
inline ::google::protobuf::int32 GM_GangShopObj::m_remain() const {
  return m_remain_;
}
inline void GM_GangShopObj::set_m_remain(::google::protobuf::int32 value) {
  set_has_m_remain();
  m_remain_ = value;
}

// -------------------------------------------------------------------

// GM_GangModuleInfo

// required int32 moduleid = 1;
inline bool GM_GangModuleInfo::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangModuleInfo::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangModuleInfo::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangModuleInfo::clear_moduleid() {
  moduleid_ = 0;
  clear_has_moduleid();
}
inline ::google::protobuf::int32 GM_GangModuleInfo::moduleid() const {
  return moduleid_;
}
inline void GM_GangModuleInfo::set_moduleid(::google::protobuf::int32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// optional int32 isUnlock = 2;
inline bool GM_GangModuleInfo::has_isunlock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangModuleInfo::set_has_isunlock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangModuleInfo::clear_has_isunlock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangModuleInfo::clear_isunlock() {
  isunlock_ = 0;
  clear_has_isunlock();
}
inline ::google::protobuf::int32 GM_GangModuleInfo::isunlock() const {
  return isunlock_;
}
inline void GM_GangModuleInfo::set_isunlock(::google::protobuf::int32 value) {
  set_has_isunlock();
  isunlock_ = value;
}

// optional .GM_GangHall m_HallData = 3;
inline bool GM_GangModuleInfo::has_m_halldata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangModuleInfo::set_has_m_halldata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangModuleInfo::clear_has_m_halldata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangModuleInfo::clear_m_halldata() {
  if (m_halldata_ != NULL) m_halldata_->::GM_GangHall::Clear();
  clear_has_m_halldata();
}
inline const ::GM_GangHall& GM_GangModuleInfo::m_halldata() const {
  return m_halldata_ != NULL ? *m_halldata_ : *default_instance_->m_halldata_;
}
inline ::GM_GangHall* GM_GangModuleInfo::mutable_m_halldata() {
  set_has_m_halldata();
  if (m_halldata_ == NULL) m_halldata_ = new ::GM_GangHall;
  return m_halldata_;
}
inline ::GM_GangHall* GM_GangModuleInfo::release_m_halldata() {
  clear_has_m_halldata();
  ::GM_GangHall* temp = m_halldata_;
  m_halldata_ = NULL;
  return temp;
}
inline void GM_GangModuleInfo::set_allocated_m_halldata(::GM_GangHall* m_halldata) {
  delete m_halldata_;
  m_halldata_ = m_halldata;
  if (m_halldata) {
    set_has_m_halldata();
  } else {
    clear_has_m_halldata();
  }
}

// optional .GM_GangTemp m_TempData = 4;
inline bool GM_GangModuleInfo::has_m_tempdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangModuleInfo::set_has_m_tempdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangModuleInfo::clear_has_m_tempdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangModuleInfo::clear_m_tempdata() {
  if (m_tempdata_ != NULL) m_tempdata_->::GM_GangTemp::Clear();
  clear_has_m_tempdata();
}
inline const ::GM_GangTemp& GM_GangModuleInfo::m_tempdata() const {
  return m_tempdata_ != NULL ? *m_tempdata_ : *default_instance_->m_tempdata_;
}
inline ::GM_GangTemp* GM_GangModuleInfo::mutable_m_tempdata() {
  set_has_m_tempdata();
  if (m_tempdata_ == NULL) m_tempdata_ = new ::GM_GangTemp;
  return m_tempdata_;
}
inline ::GM_GangTemp* GM_GangModuleInfo::release_m_tempdata() {
  clear_has_m_tempdata();
  ::GM_GangTemp* temp = m_tempdata_;
  m_tempdata_ = NULL;
  return temp;
}
inline void GM_GangModuleInfo::set_allocated_m_tempdata(::GM_GangTemp* m_tempdata) {
  delete m_tempdata_;
  m_tempdata_ = m_tempdata;
  if (m_tempdata) {
    set_has_m_tempdata();
  } else {
    clear_has_m_tempdata();
  }
}

// optional .GM_GangShop m_ShopData = 5;
inline bool GM_GangModuleInfo::has_m_shopdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangModuleInfo::set_has_m_shopdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangModuleInfo::clear_has_m_shopdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangModuleInfo::clear_m_shopdata() {
  if (m_shopdata_ != NULL) m_shopdata_->::GM_GangShop::Clear();
  clear_has_m_shopdata();
}
inline const ::GM_GangShop& GM_GangModuleInfo::m_shopdata() const {
  return m_shopdata_ != NULL ? *m_shopdata_ : *default_instance_->m_shopdata_;
}
inline ::GM_GangShop* GM_GangModuleInfo::mutable_m_shopdata() {
  set_has_m_shopdata();
  if (m_shopdata_ == NULL) m_shopdata_ = new ::GM_GangShop;
  return m_shopdata_;
}
inline ::GM_GangShop* GM_GangModuleInfo::release_m_shopdata() {
  clear_has_m_shopdata();
  ::GM_GangShop* temp = m_shopdata_;
  m_shopdata_ = NULL;
  return temp;
}
inline void GM_GangModuleInfo::set_allocated_m_shopdata(::GM_GangShop* m_shopdata) {
  delete m_shopdata_;
  m_shopdata_ = m_shopdata;
  if (m_shopdata) {
    set_has_m_shopdata();
  } else {
    clear_has_m_shopdata();
  }
}

// optional int32 maxlv = 6;
inline bool GM_GangModuleInfo::has_maxlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangModuleInfo::set_has_maxlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangModuleInfo::clear_has_maxlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangModuleInfo::clear_maxlv() {
  maxlv_ = 0;
  clear_has_maxlv();
}
inline ::google::protobuf::int32 GM_GangModuleInfo::maxlv() const {
  return maxlv_;
}
inline void GM_GangModuleInfo::set_maxlv(::google::protobuf::int32 value) {
  set_has_maxlv();
  maxlv_ = value;
}

// -------------------------------------------------------------------

// GM_GangHall

// required int32 m_lv = 1;
inline bool GM_GangHall::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangHall::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangHall::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangHall::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 GM_GangHall::m_lv() const {
  return m_lv_;
}
inline void GM_GangHall::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_uplecost = 2;
inline bool GM_GangHall::has_m_uplecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangHall::set_has_m_uplecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangHall::clear_has_m_uplecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangHall::clear_m_uplecost() {
  m_uplecost_ = 0;
  clear_has_m_uplecost();
}
inline ::google::protobuf::int32 GM_GangHall::m_uplecost() const {
  return m_uplecost_;
}
inline void GM_GangHall::set_m_uplecost(::google::protobuf::int32 value) {
  set_has_m_uplecost();
  m_uplecost_ = value;
}

// optional int32 m_ishall = 4;
inline bool GM_GangHall::has_m_ishall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangHall::set_has_m_ishall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangHall::clear_has_m_ishall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangHall::clear_m_ishall() {
  m_ishall_ = 0;
  clear_has_m_ishall();
}
inline ::google::protobuf::int32 GM_GangHall::m_ishall() const {
  return m_ishall_;
}
inline void GM_GangHall::set_m_ishall(::google::protobuf::int32 value) {
  set_has_m_ishall();
  m_ishall_ = value;
}

// repeated string m_hallLog = 5;
inline int GM_GangHall::m_halllog_size() const {
  return m_halllog_.size();
}
inline void GM_GangHall::clear_m_halllog() {
  m_halllog_.Clear();
}
inline const ::std::string& GM_GangHall::m_halllog(int index) const {
  return m_halllog_.Get(index);
}
inline ::std::string* GM_GangHall::mutable_m_halllog(int index) {
  return m_halllog_.Mutable(index);
}
inline void GM_GangHall::set_m_halllog(int index, const ::std::string& value) {
  m_halllog_.Mutable(index)->assign(value);
}
inline void GM_GangHall::set_m_halllog(int index, const char* value) {
  m_halllog_.Mutable(index)->assign(value);
}
inline void GM_GangHall::set_m_halllog(int index, const char* value, size_t size) {
  m_halllog_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangHall::add_m_halllog() {
  return m_halllog_.Add();
}
inline void GM_GangHall::add_m_halllog(const ::std::string& value) {
  m_halllog_.Add()->assign(value);
}
inline void GM_GangHall::add_m_halllog(const char* value) {
  m_halllog_.Add()->assign(value);
}
inline void GM_GangHall::add_m_halllog(const char* value, size_t size) {
  m_halllog_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GM_GangHall::m_halllog() const {
  return m_halllog_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GM_GangHall::mutable_m_halllog() {
  return &m_halllog_;
}

// -------------------------------------------------------------------

// GM_GangTemp

// required int32 m_lv = 1;
inline bool GM_GangTemp::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangTemp::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangTemp::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangTemp::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 GM_GangTemp::m_lv() const {
  return m_lv_;
}
inline void GM_GangTemp::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_uplecost = 2;
inline bool GM_GangTemp::has_m_uplecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangTemp::set_has_m_uplecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangTemp::clear_has_m_uplecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangTemp::clear_m_uplecost() {
  m_uplecost_ = 0;
  clear_has_m_uplecost();
}
inline ::google::protobuf::int32 GM_GangTemp::m_uplecost() const {
  return m_uplecost_;
}
inline void GM_GangTemp::set_m_uplecost(::google::protobuf::int32 value) {
  set_has_m_uplecost();
  m_uplecost_ = value;
}

// optional int32 m_remain = 3;
inline bool GM_GangTemp::has_m_remain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangTemp::set_has_m_remain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangTemp::clear_has_m_remain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangTemp::clear_m_remain() {
  m_remain_ = 0;
  clear_has_m_remain();
}
inline ::google::protobuf::int32 GM_GangTemp::m_remain() const {
  return m_remain_;
}
inline void GM_GangTemp::set_m_remain(::google::protobuf::int32 value) {
  set_has_m_remain();
  m_remain_ = value;
}

// optional int32 m_cost = 4;
inline bool GM_GangTemp::has_m_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangTemp::set_has_m_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangTemp::clear_has_m_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangTemp::clear_m_cost() {
  m_cost_ = 0;
  clear_has_m_cost();
}
inline ::google::protobuf::int32 GM_GangTemp::m_cost() const {
  return m_cost_;
}
inline void GM_GangTemp::set_m_cost(::google::protobuf::int32 value) {
  set_has_m_cost();
  m_cost_ = value;
}

// optional int32 m_isbless = 5;
inline bool GM_GangTemp::has_m_isbless() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangTemp::set_has_m_isbless() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangTemp::clear_has_m_isbless() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangTemp::clear_m_isbless() {
  m_isbless_ = 0;
  clear_has_m_isbless();
}
inline ::google::protobuf::int32 GM_GangTemp::m_isbless() const {
  return m_isbless_;
}
inline void GM_GangTemp::set_m_isbless(::google::protobuf::int32 value) {
  set_has_m_isbless();
  m_isbless_ = value;
}

// -------------------------------------------------------------------

// GM_BlessResult

// required int32 m_result = 1;
inline bool GM_BlessResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_BlessResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_BlessResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_BlessResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_BlessResult::m_result() const {
  return m_result_;
}
inline void GM_BlessResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// repeated .GM_BlessObj m_objs = 2;
inline int GM_BlessResult::m_objs_size() const {
  return m_objs_.size();
}
inline void GM_BlessResult::clear_m_objs() {
  m_objs_.Clear();
}
inline const ::GM_BlessObj& GM_BlessResult::m_objs(int index) const {
  return m_objs_.Get(index);
}
inline ::GM_BlessObj* GM_BlessResult::mutable_m_objs(int index) {
  return m_objs_.Mutable(index);
}
inline ::GM_BlessObj* GM_BlessResult::add_m_objs() {
  return m_objs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_BlessObj >&
GM_BlessResult::m_objs() const {
  return m_objs_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_BlessObj >*
GM_BlessResult::mutable_m_objs() {
  return &m_objs_;
}

// -------------------------------------------------------------------

// GM_BlessObj

// required int32 m_objid = 1;
inline bool GM_BlessObj::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_BlessObj::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_BlessObj::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_BlessObj::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 GM_BlessObj::m_objid() const {
  return m_objid_;
}
inline void GM_BlessObj::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// required int32 m_objcount = 2;
inline bool GM_BlessObj::has_m_objcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_BlessObj::set_has_m_objcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_BlessObj::clear_has_m_objcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_BlessObj::clear_m_objcount() {
  m_objcount_ = 0;
  clear_has_m_objcount();
}
inline ::google::protobuf::int32 GM_BlessObj::m_objcount() const {
  return m_objcount_;
}
inline void GM_BlessObj::set_m_objcount(::google::protobuf::int32 value) {
  set_has_m_objcount();
  m_objcount_ = value;
}

// -------------------------------------------------------------------

// GM_GangModuleInfoList

// required int32 hasGang = 1;
inline bool GM_GangModuleInfoList::has_hasgang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangModuleInfoList::set_has_hasgang() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangModuleInfoList::clear_has_hasgang() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangModuleInfoList::clear_hasgang() {
  hasgang_ = 0;
  clear_has_hasgang();
}
inline ::google::protobuf::int32 GM_GangModuleInfoList::hasgang() const {
  return hasgang_;
}
inline void GM_GangModuleInfoList::set_hasgang(::google::protobuf::int32 value) {
  set_has_hasgang();
  hasgang_ = value;
}

// repeated .GM_GangModuleInfo gangModuleInfo = 2;
inline int GM_GangModuleInfoList::gangmoduleinfo_size() const {
  return gangmoduleinfo_.size();
}
inline void GM_GangModuleInfoList::clear_gangmoduleinfo() {
  gangmoduleinfo_.Clear();
}
inline const ::GM_GangModuleInfo& GM_GangModuleInfoList::gangmoduleinfo(int index) const {
  return gangmoduleinfo_.Get(index);
}
inline ::GM_GangModuleInfo* GM_GangModuleInfoList::mutable_gangmoduleinfo(int index) {
  return gangmoduleinfo_.Mutable(index);
}
inline ::GM_GangModuleInfo* GM_GangModuleInfoList::add_gangmoduleinfo() {
  return gangmoduleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangModuleInfo >&
GM_GangModuleInfoList::gangmoduleinfo() const {
  return gangmoduleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangModuleInfo >*
GM_GangModuleInfoList::mutable_gangmoduleinfo() {
  return &gangmoduleinfo_;
}

// -------------------------------------------------------------------

// GM_GangNotify

// required int64 m_ganggmid = 1;
inline bool GM_GangNotify::has_m_ganggmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangNotify::set_has_m_ganggmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangNotify::clear_has_m_ganggmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangNotify::clear_m_ganggmid() {
  m_ganggmid_ = GOOGLE_LONGLONG(0);
  clear_has_m_ganggmid();
}
inline ::google::protobuf::int64 GM_GangNotify::m_ganggmid() const {
  return m_ganggmid_;
}
inline void GM_GangNotify::set_m_ganggmid(::google::protobuf::int64 value) {
  set_has_m_ganggmid();
  m_ganggmid_ = value;
}

// optional int32 m_gangexp = 2;
inline bool GM_GangNotify::has_m_gangexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangNotify::set_has_m_gangexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangNotify::clear_has_m_gangexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangNotify::clear_m_gangexp() {
  m_gangexp_ = 0;
  clear_has_m_gangexp();
}
inline ::google::protobuf::int32 GM_GangNotify::m_gangexp() const {
  return m_gangexp_;
}
inline void GM_GangNotify::set_m_gangexp(::google::protobuf::int32 value) {
  set_has_m_gangexp();
  m_gangexp_ = value;
}

// optional int32 m_ganglv = 3;
inline bool GM_GangNotify::has_m_ganglv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangNotify::set_has_m_ganglv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangNotify::clear_has_m_ganglv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangNotify::clear_m_ganglv() {
  m_ganglv_ = 0;
  clear_has_m_ganglv();
}
inline ::google::protobuf::int32 GM_GangNotify::m_ganglv() const {
  return m_ganglv_;
}
inline void GM_GangNotify::set_m_ganglv(::google::protobuf::int32 value) {
  set_has_m_ganglv();
  m_ganglv_ = value;
}

// -------------------------------------------------------------------

// GM_ApplyResult

// required int32 m_result = 1;
inline bool GM_ApplyResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ApplyResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ApplyResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ApplyResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_ApplyResult::m_result() const {
  return m_result_;
}
inline void GM_ApplyResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int64 m_preganggmid = 2;
inline bool GM_ApplyResult::has_m_preganggmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ApplyResult::set_has_m_preganggmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ApplyResult::clear_has_m_preganggmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ApplyResult::clear_m_preganggmid() {
  m_preganggmid_ = GOOGLE_LONGLONG(0);
  clear_has_m_preganggmid();
}
inline ::google::protobuf::int64 GM_ApplyResult::m_preganggmid() const {
  return m_preganggmid_;
}
inline void GM_ApplyResult::set_m_preganggmid(::google::protobuf::int64 value) {
  set_has_m_preganggmid();
  m_preganggmid_ = value;
}

// optional int64 m_nowganggmid = 3;
inline bool GM_ApplyResult::has_m_nowganggmid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ApplyResult::set_has_m_nowganggmid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ApplyResult::clear_has_m_nowganggmid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ApplyResult::clear_m_nowganggmid() {
  m_nowganggmid_ = GOOGLE_LONGLONG(0);
  clear_has_m_nowganggmid();
}
inline ::google::protobuf::int64 GM_ApplyResult::m_nowganggmid() const {
  return m_nowganggmid_;
}
inline void GM_ApplyResult::set_m_nowganggmid(::google::protobuf::int64 value) {
  set_has_m_nowganggmid();
  m_nowganggmid_ = value;
}

// optional int32 m_applycount = 4;
inline bool GM_ApplyResult::has_m_applycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_ApplyResult::set_has_m_applycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_ApplyResult::clear_has_m_applycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_ApplyResult::clear_m_applycount() {
  m_applycount_ = 0;
  clear_has_m_applycount();
}
inline ::google::protobuf::int32 GM_ApplyResult::m_applycount() const {
  return m_applycount_;
}
inline void GM_ApplyResult::set_m_applycount(::google::protobuf::int32 value) {
  set_has_m_applycount();
  m_applycount_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_gang_2etxt__INCLUDED
