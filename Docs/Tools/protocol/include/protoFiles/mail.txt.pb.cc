// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mail.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_PlayerMailPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerMailPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MailItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MailItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MailOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MailOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SystemMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SystemMail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mail_2etxt() {
  protobuf_AddDesc_mail_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mail.txt");
  GOOGLE_CHECK(file != NULL);
  GM_PlayerMailPack_descriptor_ = file->message_type(0);
  static const int GM_PlayerMailPack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerMailPack, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerMailPack, mails_),
  };
  GM_PlayerMailPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerMailPack_descriptor_,
      GM_PlayerMailPack::default_instance_,
      GM_PlayerMailPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerMailPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerMailPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerMailPack));
  GM_Mail_descriptor_ = file->message_type(1);
  static const int GM_Mail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, mailsource_),
  };
  GM_Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Mail_descriptor_,
      GM_Mail::default_instance_,
      GM_Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Mail));
  GM_MailItem_descriptor_ = file->message_type(2);
  static const int GM_MailItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailItem, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailItem, equiplv_),
  };
  GM_MailItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MailItem_descriptor_,
      GM_MailItem::default_instance_,
      GM_MailItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MailItem));
  GM_MailOperate_descriptor_ = file->message_type(3);
  static const int GM_MailOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailOperate, gmid_),
  };
  GM_MailOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MailOperate_descriptor_,
      GM_MailOperate::default_instance_,
      GM_MailOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MailOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MailOperate));
  GM_SystemMail_descriptor_ = file->message_type(4);
  static const int GM_SystemMail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemMail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemMail, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemMail, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemMail, rolenames_),
  };
  GM_SystemMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SystemMail_descriptor_,
      GM_SystemMail::default_instance_,
      GM_SystemMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SystemMail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mail_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerMailPack_descriptor_, &GM_PlayerMailPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Mail_descriptor_, &GM_Mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MailItem_descriptor_, &GM_MailItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MailOperate_descriptor_, &GM_MailOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SystemMail_descriptor_, &GM_SystemMail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mail_2etxt() {
  delete GM_PlayerMailPack::default_instance_;
  delete GM_PlayerMailPack_reflection_;
  delete GM_Mail::default_instance_;
  delete GM_Mail_reflection_;
  delete GM_MailItem::default_instance_;
  delete GM_MailItem_reflection_;
  delete GM_MailOperate::default_instance_;
  delete GM_MailOperate_reflection_;
  delete GM_SystemMail::default_instance_;
  delete GM_SystemMail_reflection_;
}

void protobuf_AddDesc_mail_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010mail.txt\"<\n\021GM_PlayerMailPack\022\016\n\006roleI"
    "d\030\001 \002(\005\022\027\n\005mails\030\002 \003(\0132\010.GM_Mail\"\204\001\n\007GM_"
    "Mail\022\017\n\007subject\030\003 \002(\t\022\014\n\004word\030\004 \002(\t\022\014\n\004t"
    "ime\030\005 \001(\t\022\r\n\005state\030\006 \001(\r\022\033\n\005items\030\010 \003(\0132"
    "\014.GM_MailItem\022\014\n\004gmid\030\n \001(\004\022\022\n\nmailSourc"
    "e\030\016 \001(\005\";\n\013GM_MailItem\022\016\n\006typeId\030\003 \002(\005\022\013"
    "\n\003num\030\004 \002(\005\022\017\n\007equiplv\030\007 \001(\005\"\036\n\016GM_MailO"
    "perate\022\014\n\004gmid\030\002 \002(\003\"Z\n\rGM_SystemMail\022\014\n"
    "\004type\030\001 \002(\005\022\020\n\010userData\030\002 \002(\t\022\026\n\004data\030\003 "
    "\002(\0132\010.GM_Mail\022\021\n\trolenames\030\004 \003(\t", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mail.txt", &protobuf_RegisterTypes);
  GM_PlayerMailPack::default_instance_ = new GM_PlayerMailPack();
  GM_Mail::default_instance_ = new GM_Mail();
  GM_MailItem::default_instance_ = new GM_MailItem();
  GM_MailOperate::default_instance_ = new GM_MailOperate();
  GM_SystemMail::default_instance_ = new GM_SystemMail();
  GM_PlayerMailPack::default_instance_->InitAsDefaultInstance();
  GM_Mail::default_instance_->InitAsDefaultInstance();
  GM_MailItem::default_instance_->InitAsDefaultInstance();
  GM_MailOperate::default_instance_->InitAsDefaultInstance();
  GM_SystemMail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mail_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mail_2etxt {
  StaticDescriptorInitializer_mail_2etxt() {
    protobuf_AddDesc_mail_2etxt();
  }
} static_descriptor_initializer_mail_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerMailPack::kRoleIdFieldNumber;
const int GM_PlayerMailPack::kMailsFieldNumber;
#endif  // !_MSC_VER

GM_PlayerMailPack::GM_PlayerMailPack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerMailPack::InitAsDefaultInstance() {
}

GM_PlayerMailPack::GM_PlayerMailPack(const GM_PlayerMailPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerMailPack::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerMailPack::~GM_PlayerMailPack() {
  SharedDtor();
}

void GM_PlayerMailPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerMailPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerMailPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerMailPack_descriptor_;
}

const GM_PlayerMailPack& GM_PlayerMailPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2etxt();
  return *default_instance_;
}

GM_PlayerMailPack* GM_PlayerMailPack::default_instance_ = NULL;

GM_PlayerMailPack* GM_PlayerMailPack::New() const {
  return new GM_PlayerMailPack;
}

void GM_PlayerMailPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerMailPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .GM_Mail mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerMailPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .GM_Mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerMailPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .GM_Mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerMailPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .GM_Mail mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerMailPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerMailPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerMailPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerMailPack::MergeFrom(const GM_PlayerMailPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerMailPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerMailPack::CopyFrom(const GM_PlayerMailPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerMailPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PlayerMailPack::Swap(GM_PlayerMailPack* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerMailPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerMailPack_descriptor_;
  metadata.reflection = GM_PlayerMailPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Mail::kSubjectFieldNumber;
const int GM_Mail::kWordFieldNumber;
const int GM_Mail::kTimeFieldNumber;
const int GM_Mail::kStateFieldNumber;
const int GM_Mail::kItemsFieldNumber;
const int GM_Mail::kGmidFieldNumber;
const int GM_Mail::kMailSourceFieldNumber;
#endif  // !_MSC_VER

GM_Mail::GM_Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Mail::InitAsDefaultInstance() {
}

GM_Mail::GM_Mail(const GM_Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Mail::SharedCtor() {
  _cached_size_ = 0;
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  gmid_ = GOOGLE_ULONGLONG(0);
  mailsource_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Mail::~GM_Mail() {
  SharedDtor();
}

void GM_Mail::SharedDtor() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void GM_Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Mail_descriptor_;
}

const GM_Mail& GM_Mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2etxt();
  return *default_instance_;
}

GM_Mail* GM_Mail::default_instance_ = NULL;

GM_Mail* GM_Mail::New() const {
  return new GM_Mail;
}

void GM_Mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::kEmptyString) {
        subject_->clear();
      }
    }
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    state_ = 0u;
    gmid_ = GOOGLE_ULONGLONG(0);
    mailsource_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_word;
        break;
      }

      // required string word = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // optional string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional uint32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .GM_MailItem items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectTag(80)) goto parse_gmid;
        break;
      }

      // optional uint64 gmid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mailSource;
        break;
      }

      // optional int32 mailSource = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailsource_)));
          set_has_mailsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subject(), output);
  }

  // required string word = 4;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->word(), output);
  }

  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // repeated .GM_MailItem items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  // optional uint64 gmid = 10;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->gmid(), output);
  }

  // optional int32 mailSource = 14;
  if (has_mailsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mailsource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // required string word = 4;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->word(), target);
  }

  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // repeated .GM_MailItem items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  // optional uint64 gmid = 10;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->gmid(), target);
  }

  // optional int32 mailSource = 14;
  if (has_mailsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mailsource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string subject = 3;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // required string word = 4;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // optional string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 gmid = 10;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gmid());
    }

    // optional int32 mailSource = 14;
    if (has_mailsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailsource());
    }

  }
  // repeated .GM_MailItem items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Mail::MergeFrom(const GM_Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_mailsource()) {
      set_mailsource(from.mailsource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Mail::CopyFrom(const GM_Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Mail::Swap(GM_Mail* other) {
  if (other != this) {
    std::swap(subject_, other->subject_);
    std::swap(word_, other->word_);
    std::swap(time_, other->time_);
    std::swap(state_, other->state_);
    items_.Swap(&other->items_);
    std::swap(gmid_, other->gmid_);
    std::swap(mailsource_, other->mailsource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Mail_descriptor_;
  metadata.reflection = GM_Mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MailItem::kTypeIdFieldNumber;
const int GM_MailItem::kNumFieldNumber;
const int GM_MailItem::kEquiplvFieldNumber;
#endif  // !_MSC_VER

GM_MailItem::GM_MailItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MailItem::InitAsDefaultInstance() {
}

GM_MailItem::GM_MailItem(const GM_MailItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MailItem::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  num_ = 0;
  equiplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MailItem::~GM_MailItem() {
  SharedDtor();
}

void GM_MailItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MailItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MailItem_descriptor_;
}

const GM_MailItem& GM_MailItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2etxt();
  return *default_instance_;
}

GM_MailItem* GM_MailItem::default_instance_ = NULL;

GM_MailItem* GM_MailItem::New() const {
  return new GM_MailItem;
}

void GM_MailItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0;
    num_ = 0;
    equiplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // required int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equiplv;
        break;
      }

      // optional int32 equiplv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiplv_)));
          set_has_equiplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 typeId = 3;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  // required int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 equiplv = 7;
  if (has_equiplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->equiplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MailItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 typeId = 3;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  // required int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 equiplv = 7;
  if (has_equiplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->equiplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MailItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 typeId = 3;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // required int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 equiplv = 7;
    if (has_equiplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MailItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MailItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MailItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MailItem::MergeFrom(const GM_MailItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_equiplv()) {
      set_equiplv(from.equiplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MailItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MailItem::CopyFrom(const GM_MailItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MailItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_MailItem::Swap(GM_MailItem* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(num_, other->num_);
    std::swap(equiplv_, other->equiplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MailItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MailItem_descriptor_;
  metadata.reflection = GM_MailItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MailOperate::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_MailOperate::GM_MailOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MailOperate::InitAsDefaultInstance() {
}

GM_MailOperate::GM_MailOperate(const GM_MailOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MailOperate::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MailOperate::~GM_MailOperate() {
  SharedDtor();
}

void GM_MailOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MailOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MailOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MailOperate_descriptor_;
}

const GM_MailOperate& GM_MailOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2etxt();
  return *default_instance_;
}

GM_MailOperate* GM_MailOperate::default_instance_ = NULL;

GM_MailOperate* GM_MailOperate::New() const {
  return new GM_MailOperate;
}

void GM_MailOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MailOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MailOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MailOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MailOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MailOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MailOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MailOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MailOperate::MergeFrom(const GM_MailOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MailOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MailOperate::CopyFrom(const GM_MailOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MailOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_MailOperate::Swap(GM_MailOperate* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MailOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MailOperate_descriptor_;
  metadata.reflection = GM_MailOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SystemMail::kTypeFieldNumber;
const int GM_SystemMail::kUserDataFieldNumber;
const int GM_SystemMail::kDataFieldNumber;
const int GM_SystemMail::kRolenamesFieldNumber;
#endif  // !_MSC_VER

GM_SystemMail::GM_SystemMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SystemMail::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_Mail*>(&::GM_Mail::default_instance());
}

GM_SystemMail::GM_SystemMail(const GM_SystemMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SystemMail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SystemMail::~GM_SystemMail() {
  SharedDtor();
}

void GM_SystemMail::SharedDtor() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_SystemMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SystemMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SystemMail_descriptor_;
}

const GM_SystemMail& GM_SystemMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2etxt();
  return *default_instance_;
}

GM_SystemMail* GM_SystemMail::default_instance_ = NULL;

GM_SystemMail* GM_SystemMail::New() const {
  return new GM_SystemMail;
}

void GM_SystemMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::kEmptyString) {
        userdata_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::GM_Mail::Clear();
    }
  }
  rolenames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SystemMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userData;
        break;
      }

      // required string userData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required .GM_Mail data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rolenames;
        break;
      }

      // repeated string rolenames = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolenames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rolenames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolenames(this->rolenames_size() - 1).data(),
            this->rolenames(this->rolenames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rolenames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SystemMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string userData = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userdata(), output);
  }

  // required .GM_Mail data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // repeated string rolenames = 4;
  for (int i = 0; i < this->rolenames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->rolenames(i).data(), this->rolenames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rolenames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SystemMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string userData = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userdata(), target);
  }

  // required .GM_Mail data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // repeated string rolenames = 4;
  for (int i = 0; i < this->rolenames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolenames(i).data(), this->rolenames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->rolenames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SystemMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string userData = 2;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

    // required .GM_Mail data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated string rolenames = 4;
  total_size += 1 * this->rolenames_size();
  for (int i = 0; i < this->rolenames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rolenames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SystemMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SystemMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SystemMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SystemMail::MergeFrom(const GM_SystemMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolenames_.MergeFrom(from.rolenames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
    if (from.has_data()) {
      mutable_data()->::GM_Mail::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SystemMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SystemMail::CopyFrom(const GM_SystemMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SystemMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_SystemMail::Swap(GM_SystemMail* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(userdata_, other->userdata_);
    std::swap(data_, other->data_);
    rolenames_.Swap(&other->rolenames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SystemMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SystemMail_descriptor_;
  metadata.reflection = GM_SystemMail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
