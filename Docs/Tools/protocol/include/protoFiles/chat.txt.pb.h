// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.txt

#ifndef PROTOBUF_chat_2etxt__INCLUDED
#define PROTOBUF_chat_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2etxt();
void protobuf_AssignDesc_chat_2etxt();
void protobuf_ShutdownFile_chat_2etxt();

class GM_GetChatInfo;
class GM_SendAudio;
class GM_GetAudio;
class GM_ReadAudio;
class GM_ChatShield;
class DB_ChatShieldList;
class GM_GetRoomID;
class GM_ChargeCfgResult;
class GM_CfgInfo;

// ===================================================================

class GM_GetChatInfo : public ::google::protobuf::Message {
 public:
  GM_GetChatInfo();
  virtual ~GM_GetChatInfo();

  GM_GetChatInfo(const GM_GetChatInfo& from);

  inline GM_GetChatInfo& operator=(const GM_GetChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GetChatInfo& default_instance();

  void Swap(GM_GetChatInfo* other);

  // implements Message ----------------------------------------------

  GM_GetChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GetChatInfo& from);
  void MergeFrom(const GM_GetChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 vip = 4;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 4;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // required string word = 5;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 5;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const char* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // optional string receName = 6;
  inline bool has_recename() const;
  inline void clear_recename();
  static const int kReceNameFieldNumber = 6;
  inline const ::std::string& recename() const;
  inline void set_recename(const ::std::string& value);
  inline void set_recename(const char* value);
  inline void set_recename(const char* value, size_t size);
  inline ::std::string* mutable_recename();
  inline ::std::string* release_recename();
  inline void set_allocated_recename(::std::string* recename);

  // optional uint32 repeatTimes = 7;
  inline bool has_repeattimes() const;
  inline void clear_repeattimes();
  static const int kRepeatTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 repeattimes() const;
  inline void set_repeattimes(::google::protobuf::uint32 value);

  // optional uint32 intervalTime = 8;
  inline bool has_intervaltime() const;
  inline void clear_intervaltime();
  static const int kIntervalTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 intervaltime() const;
  inline void set_intervaltime(::google::protobuf::uint32 value);

  // optional int32 receroleid = 9;
  inline bool has_receroleid() const;
  inline void clear_receroleid();
  static const int kReceroleidFieldNumber = 9;
  inline ::google::protobuf::int32 receroleid() const;
  inline void set_receroleid(::google::protobuf::int32 value);

  // optional int32 recevip = 10;
  inline bool has_recevip() const;
  inline void clear_recevip();
  static const int kRecevipFieldNumber = 10;
  inline ::google::protobuf::int32 recevip() const;
  inline void set_recevip(::google::protobuf::int32 value);

  // optional int32 kind = 11;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 11;
  inline ::google::protobuf::int32 kind() const;
  inline void set_kind(::google::protobuf::int32 value);

  // optional int32 profession = 12;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 12;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GetChatInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_recename();
  inline void clear_has_recename();
  inline void set_has_repeattimes();
  inline void clear_has_repeattimes();
  inline void set_has_intervaltime();
  inline void clear_has_intervaltime();
  inline void set_has_receroleid();
  inline void clear_has_receroleid();
  inline void set_has_recevip();
  inline void clear_has_recevip();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 channel_;
  ::std::string* name_;
  ::std::string* word_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::uint32 repeattimes_;
  ::std::string* recename_;
  ::google::protobuf::uint32 intervaltime_;
  ::google::protobuf::int32 receroleid_;
  ::google::protobuf::int32 recevip_;
  ::google::protobuf::int32 kind_;
  ::google::protobuf::int32 profession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_GetChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_SendAudio : public ::google::protobuf::Message {
 public:
  GM_SendAudio();
  virtual ~GM_SendAudio();

  GM_SendAudio(const GM_SendAudio& from);

  inline GM_SendAudio& operator=(const GM_SendAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_SendAudio& default_instance();

  void Swap(GM_SendAudio* other);

  // implements Message ----------------------------------------------

  GM_SendAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_SendAudio& from);
  void MergeFrom(const GM_SendAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 areaId = 2;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 2;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // optional string audioInfo = 3;
  inline bool has_audioinfo() const;
  inline void clear_audioinfo();
  static const int kAudioInfoFieldNumber = 3;
  inline const ::std::string& audioinfo() const;
  inline void set_audioinfo(const ::std::string& value);
  inline void set_audioinfo(const char* value);
  inline void set_audioinfo(const char* value, size_t size);
  inline ::std::string* mutable_audioinfo();
  inline ::std::string* release_audioinfo();
  inline void set_allocated_audioinfo(::std::string* audioinfo);

  // required int32 channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string receName = 5;
  inline bool has_recename() const;
  inline void clear_recename();
  static const int kReceNameFieldNumber = 5;
  inline const ::std::string& recename() const;
  inline void set_recename(const ::std::string& value);
  inline void set_recename(const char* value);
  inline void set_recename(const char* value, size_t size);
  inline ::std::string* mutable_recename();
  inline ::std::string* release_recename();
  inline void set_allocated_recename(::std::string* recename);

  // optional uint32 vip = 6;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 6;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional string sendname = 7;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 7;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional int32 audioLength = 8;
  inline bool has_audiolength() const;
  inline void clear_audiolength();
  static const int kAudioLengthFieldNumber = 8;
  inline ::google::protobuf::int32 audiolength() const;
  inline void set_audiolength(::google::protobuf::int32 value);

  // optional int32 audioGmid = 9;
  inline bool has_audiogmid() const;
  inline void clear_audiogmid();
  static const int kAudioGmidFieldNumber = 9;
  inline ::google::protobuf::int32 audiogmid() const;
  inline void set_audiogmid(::google::protobuf::int32 value);

  // optional int32 audioSecond = 10;
  inline bool has_audiosecond() const;
  inline void clear_audiosecond();
  static const int kAudioSecondFieldNumber = 10;
  inline ::google::protobuf::int32 audiosecond() const;
  inline void set_audiosecond(::google::protobuf::int32 value);

  // required bytes audioconnect = 11;
  inline bool has_audioconnect() const;
  inline void clear_audioconnect();
  static const int kAudioconnectFieldNumber = 11;
  inline const ::std::string& audioconnect() const;
  inline void set_audioconnect(const ::std::string& value);
  inline void set_audioconnect(const char* value);
  inline void set_audioconnect(const void* value, size_t size);
  inline ::std::string* mutable_audioconnect();
  inline ::std::string* release_audioconnect();
  inline void set_allocated_audioconnect(::std::string* audioconnect);

  // @@protoc_insertion_point(class_scope:GM_SendAudio)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_audioinfo();
  inline void clear_has_audioinfo();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_recename();
  inline void clear_has_recename();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_audiolength();
  inline void clear_has_audiolength();
  inline void set_has_audiogmid();
  inline void clear_has_audiogmid();
  inline void set_has_audiosecond();
  inline void clear_has_audiosecond();
  inline void set_has_audioconnect();
  inline void clear_has_audioconnect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 areaid_;
  ::std::string* audioinfo_;
  ::std::string* recename_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::uint32 vip_;
  ::std::string* sendname_;
  ::google::protobuf::int32 audiolength_;
  ::google::protobuf::int32 audiogmid_;
  ::std::string* audioconnect_;
  ::google::protobuf::int32 audiosecond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_SendAudio* default_instance_;
};
// -------------------------------------------------------------------

class GM_GetAudio : public ::google::protobuf::Message {
 public:
  GM_GetAudio();
  virtual ~GM_GetAudio();

  GM_GetAudio(const GM_GetAudio& from);

  inline GM_GetAudio& operator=(const GM_GetAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GetAudio& default_instance();

  void Swap(GM_GetAudio* other);

  // implements Message ----------------------------------------------

  GM_GetAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GetAudio& from);
  void MergeFrom(const GM_GetAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional uint32 vip = 3;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 3;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional string sendname = 4;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 4;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional int32 audioGmid = 5;
  inline bool has_audiogmid() const;
  inline void clear_audiogmid();
  static const int kAudioGmidFieldNumber = 5;
  inline ::google::protobuf::int32 audiogmid() const;
  inline void set_audiogmid(::google::protobuf::int32 value);

  // optional string audioInfo = 6;
  inline bool has_audioinfo() const;
  inline void clear_audioinfo();
  static const int kAudioInfoFieldNumber = 6;
  inline const ::std::string& audioinfo() const;
  inline void set_audioinfo(const ::std::string& value);
  inline void set_audioinfo(const char* value);
  inline void set_audioinfo(const char* value, size_t size);
  inline ::std::string* mutable_audioinfo();
  inline ::std::string* release_audioinfo();
  inline void set_allocated_audioinfo(::std::string* audioinfo);

  // optional string recvname = 7;
  inline bool has_recvname() const;
  inline void clear_recvname();
  static const int kRecvnameFieldNumber = 7;
  inline const ::std::string& recvname() const;
  inline void set_recvname(const ::std::string& value);
  inline void set_recvname(const char* value);
  inline void set_recvname(const char* value, size_t size);
  inline ::std::string* mutable_recvname();
  inline ::std::string* release_recvname();
  inline void set_allocated_recvname(::std::string* recvname);

  // optional int32 sendid = 8;
  inline bool has_sendid() const;
  inline void clear_sendid();
  static const int kSendidFieldNumber = 8;
  inline ::google::protobuf::int32 sendid() const;
  inline void set_sendid(::google::protobuf::int32 value);

  // optional int32 audioSecond = 9;
  inline bool has_audiosecond() const;
  inline void clear_audiosecond();
  static const int kAudioSecondFieldNumber = 9;
  inline ::google::protobuf::int32 audiosecond() const;
  inline void set_audiosecond(::google::protobuf::int32 value);

  // required int32 recvId = 10;
  inline bool has_recvid() const;
  inline void clear_recvid();
  static const int kRecvIdFieldNumber = 10;
  inline ::google::protobuf::int32 recvid() const;
  inline void set_recvid(::google::protobuf::int32 value);

  // required uint32 recvVip = 11;
  inline bool has_recvvip() const;
  inline void clear_recvvip();
  static const int kRecvVipFieldNumber = 11;
  inline ::google::protobuf::uint32 recvvip() const;
  inline void set_recvvip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GM_GetAudio)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_audiogmid();
  inline void clear_has_audiogmid();
  inline void set_has_audioinfo();
  inline void clear_has_audioinfo();
  inline void set_has_recvname();
  inline void clear_has_recvname();
  inline void set_has_sendid();
  inline void clear_has_sendid();
  inline void set_has_audiosecond();
  inline void clear_has_audiosecond();
  inline void set_has_recvid();
  inline void clear_has_recvid();
  inline void set_has_recvvip();
  inline void clear_has_recvvip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 channel_;
  ::std::string* sendname_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::int32 audiogmid_;
  ::std::string* audioinfo_;
  ::std::string* recvname_;
  ::google::protobuf::int32 sendid_;
  ::google::protobuf::int32 audiosecond_;
  ::google::protobuf::int32 recvid_;
  ::google::protobuf::uint32 recvvip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_GetAudio* default_instance_;
};
// -------------------------------------------------------------------

class GM_ReadAudio : public ::google::protobuf::Message {
 public:
  GM_ReadAudio();
  virtual ~GM_ReadAudio();

  GM_ReadAudio(const GM_ReadAudio& from);

  inline GM_ReadAudio& operator=(const GM_ReadAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ReadAudio& default_instance();

  void Swap(GM_ReadAudio* other);

  // implements Message ----------------------------------------------

  GM_ReadAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ReadAudio& from);
  void MergeFrom(const GM_ReadAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 aredId = 1;
  inline bool has_aredid() const;
  inline void clear_aredid();
  static const int kAredIdFieldNumber = 1;
  inline ::google::protobuf::int32 aredid() const;
  inline void set_aredid(::google::protobuf::int32 value);

  // required int32 audioGmid = 2;
  inline bool has_audiogmid() const;
  inline void clear_audiogmid();
  static const int kAudioGmidFieldNumber = 2;
  inline ::google::protobuf::int32 audiogmid() const;
  inline void set_audiogmid(::google::protobuf::int32 value);

  // optional string IP = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:GM_ReadAudio)
 private:
  inline void set_has_aredid();
  inline void clear_has_aredid();
  inline void set_has_audiogmid();
  inline void clear_has_audiogmid();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 aredid_;
  ::google::protobuf::int32 audiogmid_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_ReadAudio* default_instance_;
};
// -------------------------------------------------------------------

class GM_ChatShield : public ::google::protobuf::Message {
 public:
  GM_ChatShield();
  virtual ~GM_ChatShield();

  GM_ChatShield(const GM_ChatShield& from);

  inline GM_ChatShield& operator=(const GM_ChatShield& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ChatShield& default_instance();

  void Swap(GM_ChatShield* other);

  // implements Message ----------------------------------------------

  GM_ChatShield* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ChatShield& from);
  void MergeFrom(const GM_ChatShield& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_shield = 1;
  inline bool has_m_shield() const;
  inline void clear_m_shield();
  static const int kMShieldFieldNumber = 1;
  inline ::google::protobuf::int32 m_shield() const;
  inline void set_m_shield(::google::protobuf::int32 value);

  // optional string m_shieldname = 2;
  inline bool has_m_shieldname() const;
  inline void clear_m_shieldname();
  static const int kMShieldnameFieldNumber = 2;
  inline const ::std::string& m_shieldname() const;
  inline void set_m_shieldname(const ::std::string& value);
  inline void set_m_shieldname(const char* value);
  inline void set_m_shieldname(const char* value, size_t size);
  inline ::std::string* mutable_m_shieldname();
  inline ::std::string* release_m_shieldname();
  inline void set_allocated_m_shieldname(::std::string* m_shieldname);

  // @@protoc_insertion_point(class_scope:GM_ChatShield)
 private:
  inline void set_has_m_shield();
  inline void clear_has_m_shield();
  inline void set_has_m_shieldname();
  inline void clear_has_m_shieldname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_shieldname_;
  ::google::protobuf::int32 m_shield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_ChatShield* default_instance_;
};
// -------------------------------------------------------------------

class DB_ChatShieldList : public ::google::protobuf::Message {
 public:
  DB_ChatShieldList();
  virtual ~DB_ChatShieldList();

  DB_ChatShieldList(const DB_ChatShieldList& from);

  inline DB_ChatShieldList& operator=(const DB_ChatShieldList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_ChatShieldList& default_instance();

  void Swap(DB_ChatShieldList* other);

  // implements Message ----------------------------------------------

  DB_ChatShieldList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_ChatShieldList& from);
  void MergeFrom(const DB_ChatShieldList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleId = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // repeated .GM_ChatShield m_datas = 2;
  inline int m_datas_size() const;
  inline void clear_m_datas();
  static const int kMDatasFieldNumber = 2;
  inline const ::GM_ChatShield& m_datas(int index) const;
  inline ::GM_ChatShield* mutable_m_datas(int index);
  inline ::GM_ChatShield* add_m_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ChatShield >&
      m_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ChatShield >*
      mutable_m_datas();

  // @@protoc_insertion_point(class_scope:DB_ChatShieldList)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_ChatShield > m_datas_;
  ::google::protobuf::int32 m_roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static DB_ChatShieldList* default_instance_;
};
// -------------------------------------------------------------------

class GM_GetRoomID : public ::google::protobuf::Message {
 public:
  GM_GetRoomID();
  virtual ~GM_GetRoomID();

  GM_GetRoomID(const GM_GetRoomID& from);

  inline GM_GetRoomID& operator=(const GM_GetRoomID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GetRoomID& default_instance();

  void Swap(GM_GetRoomID* other);

  // implements Message ----------------------------------------------

  GM_GetRoomID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GetRoomID& from);
  void MergeFrom(const GM_GetRoomID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_RoomID = 1;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // optional int32 m_CenterRoomID = 2;
  inline bool has_m_centerroomid() const;
  inline void clear_m_centerroomid();
  static const int kMCenterRoomIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_centerroomid() const;
  inline void set_m_centerroomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GetRoomID)
 private:
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();
  inline void set_has_m_centerroomid();
  inline void clear_has_m_centerroomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roomid_;
  ::google::protobuf::int32 m_centerroomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_GetRoomID* default_instance_;
};
// -------------------------------------------------------------------

class GM_ChargeCfgResult : public ::google::protobuf::Message {
 public:
  GM_ChargeCfgResult();
  virtual ~GM_ChargeCfgResult();

  GM_ChargeCfgResult(const GM_ChargeCfgResult& from);

  inline GM_ChargeCfgResult& operator=(const GM_ChargeCfgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ChargeCfgResult& default_instance();

  void Swap(GM_ChargeCfgResult* other);

  // implements Message ----------------------------------------------

  GM_ChargeCfgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ChargeCfgResult& from);
  void MergeFrom(const GM_ChargeCfgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_CfgInfo m_cfgInfo = 1;
  inline int m_cfginfo_size() const;
  inline void clear_m_cfginfo();
  static const int kMCfgInfoFieldNumber = 1;
  inline const ::GM_CfgInfo& m_cfginfo(int index) const;
  inline ::GM_CfgInfo* mutable_m_cfginfo(int index);
  inline ::GM_CfgInfo* add_m_cfginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_CfgInfo >&
      m_cfginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_CfgInfo >*
      mutable_m_cfginfo();

  // @@protoc_insertion_point(class_scope:GM_ChargeCfgResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_CfgInfo > m_cfginfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_ChargeCfgResult* default_instance_;
};
// -------------------------------------------------------------------

class GM_CfgInfo : public ::google::protobuf::Message {
 public:
  GM_CfgInfo();
  virtual ~GM_CfgInfo();

  GM_CfgInfo(const GM_CfgInfo& from);

  inline GM_CfgInfo& operator=(const GM_CfgInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_CfgInfo& default_instance();

  void Swap(GM_CfgInfo* other);

  // implements Message ----------------------------------------------

  GM_CfgInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_CfgInfo& from);
  void MergeFrom(const GM_CfgInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_typeId = 1;
  inline bool has_m_typeid() const;
  inline void clear_m_typeid();
  static const int kMTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_typeid() const;
  inline void set_m_typeid(::google::protobuf::int32 value);

  // optional int32 m_state = 2;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_CfgInfo)
 private:
  inline void set_has_m_typeid();
  inline void clear_has_m_typeid();
  inline void set_has_m_state();
  inline void clear_has_m_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_typeid_;
  ::google::protobuf::int32 m_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2etxt();
  friend void protobuf_AssignDesc_chat_2etxt();
  friend void protobuf_ShutdownFile_chat_2etxt();

  void InitAsDefaultInstance();
  static GM_CfgInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_GetChatInfo

// required int32 roleId = 1;
inline bool GM_GetChatInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GetChatInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GetChatInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GetChatInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GetChatInfo::roleid() const {
  return roleid_;
}
inline void GM_GetChatInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 channel = 2;
inline bool GM_GetChatInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GetChatInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GetChatInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GetChatInfo::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 GM_GetChatInfo::channel() const {
  return channel_;
}
inline void GM_GetChatInfo::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional string name = 3;
inline bool GM_GetChatInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GetChatInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GetChatInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GetChatInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_GetChatInfo::name() const {
  return *name_;
}
inline void GM_GetChatInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GetChatInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GetChatInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GetChatInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_GetChatInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GetChatInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 vip = 4;
inline bool GM_GetChatInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GetChatInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GetChatInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GetChatInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 GM_GetChatInfo::vip() const {
  return vip_;
}
inline void GM_GetChatInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// required string word = 5;
inline bool GM_GetChatInfo::has_word() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GetChatInfo::set_has_word() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GetChatInfo::clear_has_word() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GetChatInfo::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& GM_GetChatInfo::word() const {
  return *word_;
}
inline void GM_GetChatInfo::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void GM_GetChatInfo::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void GM_GetChatInfo::set_word(const char* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GetChatInfo::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* GM_GetChatInfo::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GetChatInfo::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receName = 6;
inline bool GM_GetChatInfo::has_recename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GetChatInfo::set_has_recename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GetChatInfo::clear_has_recename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GetChatInfo::clear_recename() {
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    recename_->clear();
  }
  clear_has_recename();
}
inline const ::std::string& GM_GetChatInfo::recename() const {
  return *recename_;
}
inline void GM_GetChatInfo::set_recename(const ::std::string& value) {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  recename_->assign(value);
}
inline void GM_GetChatInfo::set_recename(const char* value) {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  recename_->assign(value);
}
inline void GM_GetChatInfo::set_recename(const char* value, size_t size) {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  recename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GetChatInfo::mutable_recename() {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  return recename_;
}
inline ::std::string* GM_GetChatInfo::release_recename() {
  clear_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recename_;
    recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GetChatInfo::set_allocated_recename(::std::string* recename) {
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    delete recename_;
  }
  if (recename) {
    set_has_recename();
    recename_ = recename;
  } else {
    clear_has_recename();
    recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 repeatTimes = 7;
inline bool GM_GetChatInfo::has_repeattimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GetChatInfo::set_has_repeattimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GetChatInfo::clear_has_repeattimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GetChatInfo::clear_repeattimes() {
  repeattimes_ = 0u;
  clear_has_repeattimes();
}
inline ::google::protobuf::uint32 GM_GetChatInfo::repeattimes() const {
  return repeattimes_;
}
inline void GM_GetChatInfo::set_repeattimes(::google::protobuf::uint32 value) {
  set_has_repeattimes();
  repeattimes_ = value;
}

// optional uint32 intervalTime = 8;
inline bool GM_GetChatInfo::has_intervaltime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GetChatInfo::set_has_intervaltime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GetChatInfo::clear_has_intervaltime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GetChatInfo::clear_intervaltime() {
  intervaltime_ = 0u;
  clear_has_intervaltime();
}
inline ::google::protobuf::uint32 GM_GetChatInfo::intervaltime() const {
  return intervaltime_;
}
inline void GM_GetChatInfo::set_intervaltime(::google::protobuf::uint32 value) {
  set_has_intervaltime();
  intervaltime_ = value;
}

// optional int32 receroleid = 9;
inline bool GM_GetChatInfo::has_receroleid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GetChatInfo::set_has_receroleid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GetChatInfo::clear_has_receroleid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GetChatInfo::clear_receroleid() {
  receroleid_ = 0;
  clear_has_receroleid();
}
inline ::google::protobuf::int32 GM_GetChatInfo::receroleid() const {
  return receroleid_;
}
inline void GM_GetChatInfo::set_receroleid(::google::protobuf::int32 value) {
  set_has_receroleid();
  receroleid_ = value;
}

// optional int32 recevip = 10;
inline bool GM_GetChatInfo::has_recevip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_GetChatInfo::set_has_recevip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_GetChatInfo::clear_has_recevip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_GetChatInfo::clear_recevip() {
  recevip_ = 0;
  clear_has_recevip();
}
inline ::google::protobuf::int32 GM_GetChatInfo::recevip() const {
  return recevip_;
}
inline void GM_GetChatInfo::set_recevip(::google::protobuf::int32 value) {
  set_has_recevip();
  recevip_ = value;
}

// optional int32 kind = 11;
inline bool GM_GetChatInfo::has_kind() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_GetChatInfo::set_has_kind() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_GetChatInfo::clear_has_kind() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_GetChatInfo::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::google::protobuf::int32 GM_GetChatInfo::kind() const {
  return kind_;
}
inline void GM_GetChatInfo::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
}

// optional int32 profession = 12;
inline bool GM_GetChatInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_GetChatInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_GetChatInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_GetChatInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 GM_GetChatInfo::profession() const {
  return profession_;
}
inline void GM_GetChatInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// -------------------------------------------------------------------

// GM_SendAudio

// required int32 roleId = 1;
inline bool GM_SendAudio::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_SendAudio::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_SendAudio::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_SendAudio::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_SendAudio::roleid() const {
  return roleid_;
}
inline void GM_SendAudio::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 areaId = 2;
inline bool GM_SendAudio::has_areaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_SendAudio::set_has_areaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_SendAudio::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_SendAudio::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 GM_SendAudio::areaid() const {
  return areaid_;
}
inline void GM_SendAudio::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional string audioInfo = 3;
inline bool GM_SendAudio::has_audioinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_SendAudio::set_has_audioinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_SendAudio::clear_has_audioinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_SendAudio::clear_audioinfo() {
  if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
    audioinfo_->clear();
  }
  clear_has_audioinfo();
}
inline const ::std::string& GM_SendAudio::audioinfo() const {
  return *audioinfo_;
}
inline void GM_SendAudio::set_audioinfo(const ::std::string& value) {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  audioinfo_->assign(value);
}
inline void GM_SendAudio::set_audioinfo(const char* value) {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  audioinfo_->assign(value);
}
inline void GM_SendAudio::set_audioinfo(const char* value, size_t size) {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  audioinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_SendAudio::mutable_audioinfo() {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  return audioinfo_;
}
inline ::std::string* GM_SendAudio::release_audioinfo() {
  clear_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audioinfo_;
    audioinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_SendAudio::set_allocated_audioinfo(::std::string* audioinfo) {
  if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete audioinfo_;
  }
  if (audioinfo) {
    set_has_audioinfo();
    audioinfo_ = audioinfo;
  } else {
    clear_has_audioinfo();
    audioinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 channel = 4;
inline bool GM_SendAudio::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_SendAudio::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_SendAudio::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_SendAudio::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 GM_SendAudio::channel() const {
  return channel_;
}
inline void GM_SendAudio::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional string receName = 5;
inline bool GM_SendAudio::has_recename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_SendAudio::set_has_recename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_SendAudio::clear_has_recename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_SendAudio::clear_recename() {
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    recename_->clear();
  }
  clear_has_recename();
}
inline const ::std::string& GM_SendAudio::recename() const {
  return *recename_;
}
inline void GM_SendAudio::set_recename(const ::std::string& value) {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  recename_->assign(value);
}
inline void GM_SendAudio::set_recename(const char* value) {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  recename_->assign(value);
}
inline void GM_SendAudio::set_recename(const char* value, size_t size) {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  recename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_SendAudio::mutable_recename() {
  set_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    recename_ = new ::std::string;
  }
  return recename_;
}
inline ::std::string* GM_SendAudio::release_recename() {
  clear_has_recename();
  if (recename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recename_;
    recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_SendAudio::set_allocated_recename(::std::string* recename) {
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    delete recename_;
  }
  if (recename) {
    set_has_recename();
    recename_ = recename;
  } else {
    clear_has_recename();
    recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 vip = 6;
inline bool GM_SendAudio::has_vip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_SendAudio::set_has_vip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_SendAudio::clear_has_vip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_SendAudio::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 GM_SendAudio::vip() const {
  return vip_;
}
inline void GM_SendAudio::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// optional string sendname = 7;
inline bool GM_SendAudio::has_sendname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_SendAudio::set_has_sendname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_SendAudio::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_SendAudio::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& GM_SendAudio::sendname() const {
  return *sendname_;
}
inline void GM_SendAudio::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void GM_SendAudio::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void GM_SendAudio::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_SendAudio::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* GM_SendAudio::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_SendAudio::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 audioLength = 8;
inline bool GM_SendAudio::has_audiolength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_SendAudio::set_has_audiolength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_SendAudio::clear_has_audiolength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_SendAudio::clear_audiolength() {
  audiolength_ = 0;
  clear_has_audiolength();
}
inline ::google::protobuf::int32 GM_SendAudio::audiolength() const {
  return audiolength_;
}
inline void GM_SendAudio::set_audiolength(::google::protobuf::int32 value) {
  set_has_audiolength();
  audiolength_ = value;
}

// optional int32 audioGmid = 9;
inline bool GM_SendAudio::has_audiogmid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_SendAudio::set_has_audiogmid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_SendAudio::clear_has_audiogmid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_SendAudio::clear_audiogmid() {
  audiogmid_ = 0;
  clear_has_audiogmid();
}
inline ::google::protobuf::int32 GM_SendAudio::audiogmid() const {
  return audiogmid_;
}
inline void GM_SendAudio::set_audiogmid(::google::protobuf::int32 value) {
  set_has_audiogmid();
  audiogmid_ = value;
}

// optional int32 audioSecond = 10;
inline bool GM_SendAudio::has_audiosecond() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_SendAudio::set_has_audiosecond() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_SendAudio::clear_has_audiosecond() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_SendAudio::clear_audiosecond() {
  audiosecond_ = 0;
  clear_has_audiosecond();
}
inline ::google::protobuf::int32 GM_SendAudio::audiosecond() const {
  return audiosecond_;
}
inline void GM_SendAudio::set_audiosecond(::google::protobuf::int32 value) {
  set_has_audiosecond();
  audiosecond_ = value;
}

// required bytes audioconnect = 11;
inline bool GM_SendAudio::has_audioconnect() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_SendAudio::set_has_audioconnect() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_SendAudio::clear_has_audioconnect() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_SendAudio::clear_audioconnect() {
  if (audioconnect_ != &::google::protobuf::internal::kEmptyString) {
    audioconnect_->clear();
  }
  clear_has_audioconnect();
}
inline const ::std::string& GM_SendAudio::audioconnect() const {
  return *audioconnect_;
}
inline void GM_SendAudio::set_audioconnect(const ::std::string& value) {
  set_has_audioconnect();
  if (audioconnect_ == &::google::protobuf::internal::kEmptyString) {
    audioconnect_ = new ::std::string;
  }
  audioconnect_->assign(value);
}
inline void GM_SendAudio::set_audioconnect(const char* value) {
  set_has_audioconnect();
  if (audioconnect_ == &::google::protobuf::internal::kEmptyString) {
    audioconnect_ = new ::std::string;
  }
  audioconnect_->assign(value);
}
inline void GM_SendAudio::set_audioconnect(const void* value, size_t size) {
  set_has_audioconnect();
  if (audioconnect_ == &::google::protobuf::internal::kEmptyString) {
    audioconnect_ = new ::std::string;
  }
  audioconnect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_SendAudio::mutable_audioconnect() {
  set_has_audioconnect();
  if (audioconnect_ == &::google::protobuf::internal::kEmptyString) {
    audioconnect_ = new ::std::string;
  }
  return audioconnect_;
}
inline ::std::string* GM_SendAudio::release_audioconnect() {
  clear_has_audioconnect();
  if (audioconnect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audioconnect_;
    audioconnect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_SendAudio::set_allocated_audioconnect(::std::string* audioconnect) {
  if (audioconnect_ != &::google::protobuf::internal::kEmptyString) {
    delete audioconnect_;
  }
  if (audioconnect) {
    set_has_audioconnect();
    audioconnect_ = audioconnect;
  } else {
    clear_has_audioconnect();
    audioconnect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GetAudio

// required int32 m_result = 1;
inline bool GM_GetAudio::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GetAudio::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GetAudio::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GetAudio::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_GetAudio::m_result() const {
  return m_result_;
}
inline void GM_GetAudio::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 channel = 2;
inline bool GM_GetAudio::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GetAudio::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GetAudio::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GetAudio::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 GM_GetAudio::channel() const {
  return channel_;
}
inline void GM_GetAudio::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint32 vip = 3;
inline bool GM_GetAudio::has_vip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GetAudio::set_has_vip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GetAudio::clear_has_vip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GetAudio::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 GM_GetAudio::vip() const {
  return vip_;
}
inline void GM_GetAudio::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// optional string sendname = 4;
inline bool GM_GetAudio::has_sendname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GetAudio::set_has_sendname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GetAudio::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GetAudio::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& GM_GetAudio::sendname() const {
  return *sendname_;
}
inline void GM_GetAudio::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void GM_GetAudio::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void GM_GetAudio::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GetAudio::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* GM_GetAudio::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GetAudio::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 audioGmid = 5;
inline bool GM_GetAudio::has_audiogmid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GetAudio::set_has_audiogmid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GetAudio::clear_has_audiogmid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GetAudio::clear_audiogmid() {
  audiogmid_ = 0;
  clear_has_audiogmid();
}
inline ::google::protobuf::int32 GM_GetAudio::audiogmid() const {
  return audiogmid_;
}
inline void GM_GetAudio::set_audiogmid(::google::protobuf::int32 value) {
  set_has_audiogmid();
  audiogmid_ = value;
}

// optional string audioInfo = 6;
inline bool GM_GetAudio::has_audioinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GetAudio::set_has_audioinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GetAudio::clear_has_audioinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GetAudio::clear_audioinfo() {
  if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
    audioinfo_->clear();
  }
  clear_has_audioinfo();
}
inline const ::std::string& GM_GetAudio::audioinfo() const {
  return *audioinfo_;
}
inline void GM_GetAudio::set_audioinfo(const ::std::string& value) {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  audioinfo_->assign(value);
}
inline void GM_GetAudio::set_audioinfo(const char* value) {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  audioinfo_->assign(value);
}
inline void GM_GetAudio::set_audioinfo(const char* value, size_t size) {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  audioinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GetAudio::mutable_audioinfo() {
  set_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    audioinfo_ = new ::std::string;
  }
  return audioinfo_;
}
inline ::std::string* GM_GetAudio::release_audioinfo() {
  clear_has_audioinfo();
  if (audioinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audioinfo_;
    audioinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GetAudio::set_allocated_audioinfo(::std::string* audioinfo) {
  if (audioinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete audioinfo_;
  }
  if (audioinfo) {
    set_has_audioinfo();
    audioinfo_ = audioinfo;
  } else {
    clear_has_audioinfo();
    audioinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string recvname = 7;
inline bool GM_GetAudio::has_recvname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GetAudio::set_has_recvname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GetAudio::clear_has_recvname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GetAudio::clear_recvname() {
  if (recvname_ != &::google::protobuf::internal::kEmptyString) {
    recvname_->clear();
  }
  clear_has_recvname();
}
inline const ::std::string& GM_GetAudio::recvname() const {
  return *recvname_;
}
inline void GM_GetAudio::set_recvname(const ::std::string& value) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(value);
}
inline void GM_GetAudio::set_recvname(const char* value) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(value);
}
inline void GM_GetAudio::set_recvname(const char* value, size_t size) {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  recvname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GetAudio::mutable_recvname() {
  set_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    recvname_ = new ::std::string;
  }
  return recvname_;
}
inline ::std::string* GM_GetAudio::release_recvname() {
  clear_has_recvname();
  if (recvname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recvname_;
    recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GetAudio::set_allocated_recvname(::std::string* recvname) {
  if (recvname_ != &::google::protobuf::internal::kEmptyString) {
    delete recvname_;
  }
  if (recvname) {
    set_has_recvname();
    recvname_ = recvname;
  } else {
    clear_has_recvname();
    recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sendid = 8;
inline bool GM_GetAudio::has_sendid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GetAudio::set_has_sendid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GetAudio::clear_has_sendid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GetAudio::clear_sendid() {
  sendid_ = 0;
  clear_has_sendid();
}
inline ::google::protobuf::int32 GM_GetAudio::sendid() const {
  return sendid_;
}
inline void GM_GetAudio::set_sendid(::google::protobuf::int32 value) {
  set_has_sendid();
  sendid_ = value;
}

// optional int32 audioSecond = 9;
inline bool GM_GetAudio::has_audiosecond() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GetAudio::set_has_audiosecond() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GetAudio::clear_has_audiosecond() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GetAudio::clear_audiosecond() {
  audiosecond_ = 0;
  clear_has_audiosecond();
}
inline ::google::protobuf::int32 GM_GetAudio::audiosecond() const {
  return audiosecond_;
}
inline void GM_GetAudio::set_audiosecond(::google::protobuf::int32 value) {
  set_has_audiosecond();
  audiosecond_ = value;
}

// required int32 recvId = 10;
inline bool GM_GetAudio::has_recvid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_GetAudio::set_has_recvid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_GetAudio::clear_has_recvid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_GetAudio::clear_recvid() {
  recvid_ = 0;
  clear_has_recvid();
}
inline ::google::protobuf::int32 GM_GetAudio::recvid() const {
  return recvid_;
}
inline void GM_GetAudio::set_recvid(::google::protobuf::int32 value) {
  set_has_recvid();
  recvid_ = value;
}

// required uint32 recvVip = 11;
inline bool GM_GetAudio::has_recvvip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_GetAudio::set_has_recvvip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_GetAudio::clear_has_recvvip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_GetAudio::clear_recvvip() {
  recvvip_ = 0u;
  clear_has_recvvip();
}
inline ::google::protobuf::uint32 GM_GetAudio::recvvip() const {
  return recvvip_;
}
inline void GM_GetAudio::set_recvvip(::google::protobuf::uint32 value) {
  set_has_recvvip();
  recvvip_ = value;
}

// -------------------------------------------------------------------

// GM_ReadAudio

// required int32 aredId = 1;
inline bool GM_ReadAudio::has_aredid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ReadAudio::set_has_aredid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ReadAudio::clear_has_aredid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ReadAudio::clear_aredid() {
  aredid_ = 0;
  clear_has_aredid();
}
inline ::google::protobuf::int32 GM_ReadAudio::aredid() const {
  return aredid_;
}
inline void GM_ReadAudio::set_aredid(::google::protobuf::int32 value) {
  set_has_aredid();
  aredid_ = value;
}

// required int32 audioGmid = 2;
inline bool GM_ReadAudio::has_audiogmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ReadAudio::set_has_audiogmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ReadAudio::clear_has_audiogmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ReadAudio::clear_audiogmid() {
  audiogmid_ = 0;
  clear_has_audiogmid();
}
inline ::google::protobuf::int32 GM_ReadAudio::audiogmid() const {
  return audiogmid_;
}
inline void GM_ReadAudio::set_audiogmid(::google::protobuf::int32 value) {
  set_has_audiogmid();
  audiogmid_ = value;
}

// optional string IP = 3;
inline bool GM_ReadAudio::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ReadAudio::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ReadAudio::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ReadAudio::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GM_ReadAudio::ip() const {
  return *ip_;
}
inline void GM_ReadAudio::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GM_ReadAudio::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GM_ReadAudio::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ReadAudio::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GM_ReadAudio::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ReadAudio::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_ChatShield

// required int32 m_shield = 1;
inline bool GM_ChatShield::has_m_shield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ChatShield::set_has_m_shield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ChatShield::clear_has_m_shield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ChatShield::clear_m_shield() {
  m_shield_ = 0;
  clear_has_m_shield();
}
inline ::google::protobuf::int32 GM_ChatShield::m_shield() const {
  return m_shield_;
}
inline void GM_ChatShield::set_m_shield(::google::protobuf::int32 value) {
  set_has_m_shield();
  m_shield_ = value;
}

// optional string m_shieldname = 2;
inline bool GM_ChatShield::has_m_shieldname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ChatShield::set_has_m_shieldname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ChatShield::clear_has_m_shieldname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ChatShield::clear_m_shieldname() {
  if (m_shieldname_ != &::google::protobuf::internal::kEmptyString) {
    m_shieldname_->clear();
  }
  clear_has_m_shieldname();
}
inline const ::std::string& GM_ChatShield::m_shieldname() const {
  return *m_shieldname_;
}
inline void GM_ChatShield::set_m_shieldname(const ::std::string& value) {
  set_has_m_shieldname();
  if (m_shieldname_ == &::google::protobuf::internal::kEmptyString) {
    m_shieldname_ = new ::std::string;
  }
  m_shieldname_->assign(value);
}
inline void GM_ChatShield::set_m_shieldname(const char* value) {
  set_has_m_shieldname();
  if (m_shieldname_ == &::google::protobuf::internal::kEmptyString) {
    m_shieldname_ = new ::std::string;
  }
  m_shieldname_->assign(value);
}
inline void GM_ChatShield::set_m_shieldname(const char* value, size_t size) {
  set_has_m_shieldname();
  if (m_shieldname_ == &::google::protobuf::internal::kEmptyString) {
    m_shieldname_ = new ::std::string;
  }
  m_shieldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChatShield::mutable_m_shieldname() {
  set_has_m_shieldname();
  if (m_shieldname_ == &::google::protobuf::internal::kEmptyString) {
    m_shieldname_ = new ::std::string;
  }
  return m_shieldname_;
}
inline ::std::string* GM_ChatShield::release_m_shieldname() {
  clear_has_m_shieldname();
  if (m_shieldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_shieldname_;
    m_shieldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChatShield::set_allocated_m_shieldname(::std::string* m_shieldname) {
  if (m_shieldname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_shieldname_;
  }
  if (m_shieldname) {
    set_has_m_shieldname();
    m_shieldname_ = m_shieldname;
  } else {
    clear_has_m_shieldname();
    m_shieldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DB_ChatShieldList

// required int32 m_roleId = 1;
inline bool DB_ChatShieldList::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_ChatShieldList::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_ChatShieldList::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_ChatShieldList::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 DB_ChatShieldList::m_roleid() const {
  return m_roleid_;
}
inline void DB_ChatShieldList::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// repeated .GM_ChatShield m_datas = 2;
inline int DB_ChatShieldList::m_datas_size() const {
  return m_datas_.size();
}
inline void DB_ChatShieldList::clear_m_datas() {
  m_datas_.Clear();
}
inline const ::GM_ChatShield& DB_ChatShieldList::m_datas(int index) const {
  return m_datas_.Get(index);
}
inline ::GM_ChatShield* DB_ChatShieldList::mutable_m_datas(int index) {
  return m_datas_.Mutable(index);
}
inline ::GM_ChatShield* DB_ChatShieldList::add_m_datas() {
  return m_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ChatShield >&
DB_ChatShieldList::m_datas() const {
  return m_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ChatShield >*
DB_ChatShieldList::mutable_m_datas() {
  return &m_datas_;
}

// -------------------------------------------------------------------

// GM_GetRoomID

// required int32 m_RoomID = 1;
inline bool GM_GetRoomID::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GetRoomID::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GetRoomID::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GetRoomID::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 GM_GetRoomID::m_roomid() const {
  return m_roomid_;
}
inline void GM_GetRoomID::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
}

// optional int32 m_CenterRoomID = 2;
inline bool GM_GetRoomID::has_m_centerroomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GetRoomID::set_has_m_centerroomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GetRoomID::clear_has_m_centerroomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GetRoomID::clear_m_centerroomid() {
  m_centerroomid_ = 0;
  clear_has_m_centerroomid();
}
inline ::google::protobuf::int32 GM_GetRoomID::m_centerroomid() const {
  return m_centerroomid_;
}
inline void GM_GetRoomID::set_m_centerroomid(::google::protobuf::int32 value) {
  set_has_m_centerroomid();
  m_centerroomid_ = value;
}

// -------------------------------------------------------------------

// GM_ChargeCfgResult

// repeated .GM_CfgInfo m_cfgInfo = 1;
inline int GM_ChargeCfgResult::m_cfginfo_size() const {
  return m_cfginfo_.size();
}
inline void GM_ChargeCfgResult::clear_m_cfginfo() {
  m_cfginfo_.Clear();
}
inline const ::GM_CfgInfo& GM_ChargeCfgResult::m_cfginfo(int index) const {
  return m_cfginfo_.Get(index);
}
inline ::GM_CfgInfo* GM_ChargeCfgResult::mutable_m_cfginfo(int index) {
  return m_cfginfo_.Mutable(index);
}
inline ::GM_CfgInfo* GM_ChargeCfgResult::add_m_cfginfo() {
  return m_cfginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_CfgInfo >&
GM_ChargeCfgResult::m_cfginfo() const {
  return m_cfginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_CfgInfo >*
GM_ChargeCfgResult::mutable_m_cfginfo() {
  return &m_cfginfo_;
}

// -------------------------------------------------------------------

// GM_CfgInfo

// required int32 m_typeId = 1;
inline bool GM_CfgInfo::has_m_typeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_CfgInfo::set_has_m_typeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_CfgInfo::clear_has_m_typeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_CfgInfo::clear_m_typeid() {
  m_typeid_ = 0;
  clear_has_m_typeid();
}
inline ::google::protobuf::int32 GM_CfgInfo::m_typeid() const {
  return m_typeid_;
}
inline void GM_CfgInfo::set_m_typeid(::google::protobuf::int32 value) {
  set_has_m_typeid();
  m_typeid_ = value;
}

// optional int32 m_state = 2;
inline bool GM_CfgInfo::has_m_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_CfgInfo::set_has_m_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_CfgInfo::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_CfgInfo::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_CfgInfo::m_state() const {
  return m_state_;
}
inline void GM_CfgInfo::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_chat_2etxt__INCLUDED
