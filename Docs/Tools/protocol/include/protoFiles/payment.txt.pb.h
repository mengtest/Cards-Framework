// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment.txt

#ifndef PROTOBUF_payment_2etxt__INCLUDED
#define PROTOBUF_payment_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_payment_2etxt();
void protobuf_AssignDesc_payment_2etxt();
void protobuf_ShutdownFile_payment_2etxt();

class GM_AppStore_Verify_Order;
class GM_AppStore_Verify_Order_Return;
class GM_Product;
class GM_ProductList_Request;
class GM_ProductList;
class GM_GooglePlay_Verify_Order;
class GM_GooglePlay_Verify_Order_Return;

// ===================================================================

class GM_AppStore_Verify_Order : public ::google::protobuf::Message {
 public:
  GM_AppStore_Verify_Order();
  virtual ~GM_AppStore_Verify_Order();

  GM_AppStore_Verify_Order(const GM_AppStore_Verify_Order& from);

  inline GM_AppStore_Verify_Order& operator=(const GM_AppStore_Verify_Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AppStore_Verify_Order& default_instance();

  void Swap(GM_AppStore_Verify_Order* other);

  // implements Message ----------------------------------------------

  GM_AppStore_Verify_Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AppStore_Verify_Order& from);
  void MergeFrom(const GM_AppStore_Verify_Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string transaction_id = 1;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const char* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  inline void set_allocated_transaction_id(::std::string* transaction_id);

  // required int32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // required string channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // required int32 appid = 4;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // required string buffer = 5;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 5;
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const char* value, size_t size);
  inline ::std::string* mutable_buffer();
  inline ::std::string* release_buffer();
  inline void set_allocated_buffer(::std::string* buffer);

  // optional int32 roleid = 6;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 6;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 serverid = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 accountid = 8;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 8;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_AppStore_Verify_Order)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* transaction_id_;
  ::std::string* channel_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 appid_;
  ::std::string* buffer_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_AppStore_Verify_Order* default_instance_;
};
// -------------------------------------------------------------------

class GM_AppStore_Verify_Order_Return : public ::google::protobuf::Message {
 public:
  GM_AppStore_Verify_Order_Return();
  virtual ~GM_AppStore_Verify_Order_Return();

  GM_AppStore_Verify_Order_Return(const GM_AppStore_Verify_Order_Return& from);

  inline GM_AppStore_Verify_Order_Return& operator=(const GM_AppStore_Verify_Order_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AppStore_Verify_Order_Return& default_instance();

  void Swap(GM_AppStore_Verify_Order_Return* other);

  // implements Message ----------------------------------------------

  GM_AppStore_Verify_Order_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AppStore_Verify_Order_Return& from);
  void MergeFrom(const GM_AppStore_Verify_Order_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string transaction_id = 1;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const char* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  inline void set_allocated_transaction_id(::std::string* transaction_id);

  // required int32 m_result = 2;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 2;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional uint32 quantity = 4;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 4;
  inline ::google::protobuf::uint32 quantity() const;
  inline void set_quantity(::google::protobuf::uint32 value);

  // optional uint32 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional string productid = 6;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 6;
  inline const ::std::string& productid() const;
  inline void set_productid(const ::std::string& value);
  inline void set_productid(const char* value);
  inline void set_productid(const char* value, size_t size);
  inline ::std::string* mutable_productid();
  inline ::std::string* release_productid();
  inline void set_allocated_productid(::std::string* productid);

  // optional string purchase_date = 7;
  inline bool has_purchase_date() const;
  inline void clear_purchase_date();
  static const int kPurchaseDateFieldNumber = 7;
  inline const ::std::string& purchase_date() const;
  inline void set_purchase_date(const ::std::string& value);
  inline void set_purchase_date(const char* value);
  inline void set_purchase_date(const char* value, size_t size);
  inline ::std::string* mutable_purchase_date();
  inline ::std::string* release_purchase_date();
  inline void set_allocated_purchase_date(::std::string* purchase_date);

  // @@protoc_insertion_point(class_scope:GM_AppStore_Verify_Order_Return)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_purchase_date();
  inline void clear_has_purchase_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* transaction_id_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::uint32 quantity_;
  ::google::protobuf::uint32 gold_;
  ::std::string* productid_;
  ::std::string* purchase_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_AppStore_Verify_Order_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Product : public ::google::protobuf::Message {
 public:
  GM_Product();
  virtual ~GM_Product();

  GM_Product(const GM_Product& from);

  inline GM_Product& operator=(const GM_Product& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Product& default_instance();

  void Swap(GM_Product* other);

  // implements Message ----------------------------------------------

  GM_Product* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Product& from);
  void MergeFrom(const GM_Product& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 productid = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 1;
  inline ::google::protobuf::int32 productid() const;
  inline void set_productid(::google::protobuf::int32 value);

  // required string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string moneystr = 4;
  inline bool has_moneystr() const;
  inline void clear_moneystr();
  static const int kMoneystrFieldNumber = 4;
  inline const ::std::string& moneystr() const;
  inline void set_moneystr(const ::std::string& value);
  inline void set_moneystr(const char* value);
  inline void set_moneystr(const char* value, size_t size);
  inline ::std::string* mutable_moneystr();
  inline ::std::string* release_moneystr();
  inline void set_allocated_moneystr(::std::string* moneystr);

  // required string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required bool canclick = 6;
  inline bool has_canclick() const;
  inline void clear_canclick();
  static const int kCanclickFieldNumber = 6;
  inline bool canclick() const;
  inline void set_canclick(bool value);

  // required int32 money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Product)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_moneystr();
  inline void clear_has_moneystr();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_canclick();
  inline void clear_has_canclick();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* icon_;
  ::std::string* name_;
  ::google::protobuf::int32 productid_;
  bool canclick_;
  ::std::string* moneystr_;
  ::std::string* desc_;
  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_Product* default_instance_;
};
// -------------------------------------------------------------------

class GM_ProductList_Request : public ::google::protobuf::Message {
 public:
  GM_ProductList_Request();
  virtual ~GM_ProductList_Request();

  GM_ProductList_Request(const GM_ProductList_Request& from);

  inline GM_ProductList_Request& operator=(const GM_ProductList_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ProductList_Request& default_instance();

  void Swap(GM_ProductList_Request* other);

  // implements Message ----------------------------------------------

  GM_ProductList_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ProductList_Request& from);
  void MergeFrom(const GM_ProductList_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // @@protoc_insertion_point(class_scope:GM_ProductList_Request)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_ProductList_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_ProductList : public ::google::protobuf::Message {
 public:
  GM_ProductList();
  virtual ~GM_ProductList();

  GM_ProductList(const GM_ProductList& from);

  inline GM_ProductList& operator=(const GM_ProductList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ProductList& default_instance();

  void Swap(GM_ProductList* other);

  // implements Message ----------------------------------------------

  GM_ProductList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ProductList& from);
  void MergeFrom(const GM_ProductList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_Product list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::GM_Product& list(int index) const;
  inline ::GM_Product* mutable_list(int index);
  inline ::GM_Product* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Product >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Product >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:GM_ProductList)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Product > list_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_ProductList* default_instance_;
};
// -------------------------------------------------------------------

class GM_GooglePlay_Verify_Order : public ::google::protobuf::Message {
 public:
  GM_GooglePlay_Verify_Order();
  virtual ~GM_GooglePlay_Verify_Order();

  GM_GooglePlay_Verify_Order(const GM_GooglePlay_Verify_Order& from);

  inline GM_GooglePlay_Verify_Order& operator=(const GM_GooglePlay_Verify_Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GooglePlay_Verify_Order& default_instance();

  void Swap(GM_GooglePlay_Verify_Order* other);

  // implements Message ----------------------------------------------

  GM_GooglePlay_Verify_Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GooglePlay_Verify_Order& from);
  void MergeFrom(const GM_GooglePlay_Verify_Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string googleorderid = 1;
  inline bool has_googleorderid() const;
  inline void clear_googleorderid();
  static const int kGoogleorderidFieldNumber = 1;
  inline const ::std::string& googleorderid() const;
  inline void set_googleorderid(const ::std::string& value);
  inline void set_googleorderid(const char* value);
  inline void set_googleorderid(const char* value, size_t size);
  inline ::std::string* mutable_googleorderid();
  inline ::std::string* release_googleorderid();
  inline void set_allocated_googleorderid(::std::string* googleorderid);

  // required int32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // required string channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // required int32 appid = 4;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // required string randstr = 5;
  inline bool has_randstr() const;
  inline void clear_randstr();
  static const int kRandstrFieldNumber = 5;
  inline const ::std::string& randstr() const;
  inline void set_randstr(const ::std::string& value);
  inline void set_randstr(const char* value);
  inline void set_randstr(const char* value, size_t size);
  inline ::std::string* mutable_randstr();
  inline ::std::string* release_randstr();
  inline void set_allocated_randstr(::std::string* randstr);

  // optional int32 roleid = 6;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 6;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 serverid = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 accountid = 8;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 8;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // optional string orderid = 9;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 9;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required string itemid = 10;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 10;
  inline const ::std::string& itemid() const;
  inline void set_itemid(const ::std::string& value);
  inline void set_itemid(const char* value);
  inline void set_itemid(const char* value, size_t size);
  inline ::std::string* mutable_itemid();
  inline ::std::string* release_itemid();
  inline void set_allocated_itemid(::std::string* itemid);

  // required string token = 11;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 11;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:GM_GooglePlay_Verify_Order)
 private:
  inline void set_has_googleorderid();
  inline void clear_has_googleorderid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_randstr();
  inline void clear_has_randstr();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* googleorderid_;
  ::std::string* channel_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 appid_;
  ::std::string* randstr_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 serverid_;
  ::std::string* orderid_;
  ::std::string* itemid_;
  ::std::string* token_;
  ::google::protobuf::int32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_GooglePlay_Verify_Order* default_instance_;
};
// -------------------------------------------------------------------

class GM_GooglePlay_Verify_Order_Return : public ::google::protobuf::Message {
 public:
  GM_GooglePlay_Verify_Order_Return();
  virtual ~GM_GooglePlay_Verify_Order_Return();

  GM_GooglePlay_Verify_Order_Return(const GM_GooglePlay_Verify_Order_Return& from);

  inline GM_GooglePlay_Verify_Order_Return& operator=(const GM_GooglePlay_Verify_Order_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GooglePlay_Verify_Order_Return& default_instance();

  void Swap(GM_GooglePlay_Verify_Order_Return* other);

  // implements Message ----------------------------------------------

  GM_GooglePlay_Verify_Order_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GooglePlay_Verify_Order_Return& from);
  void MergeFrom(const GM_GooglePlay_Verify_Order_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string googleorderid = 1;
  inline bool has_googleorderid() const;
  inline void clear_googleorderid();
  static const int kGoogleorderidFieldNumber = 1;
  inline const ::std::string& googleorderid() const;
  inline void set_googleorderid(const ::std::string& value);
  inline void set_googleorderid(const char* value);
  inline void set_googleorderid(const char* value, size_t size);
  inline ::std::string* mutable_googleorderid();
  inline ::std::string* release_googleorderid();
  inline void set_allocated_googleorderid(::std::string* googleorderid);

  // required int32 m_result = 2;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 2;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional uint32 quantity = 4;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 4;
  inline ::google::protobuf::uint32 quantity() const;
  inline void set_quantity(::google::protobuf::uint32 value);

  // optional uint32 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional string productid = 6;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 6;
  inline const ::std::string& productid() const;
  inline void set_productid(const ::std::string& value);
  inline void set_productid(const char* value);
  inline void set_productid(const char* value, size_t size);
  inline ::std::string* mutable_productid();
  inline ::std::string* release_productid();
  inline void set_allocated_productid(::std::string* productid);

  // optional string purchase_date = 7;
  inline bool has_purchase_date() const;
  inline void clear_purchase_date();
  static const int kPurchaseDateFieldNumber = 7;
  inline const ::std::string& purchase_date() const;
  inline void set_purchase_date(const ::std::string& value);
  inline void set_purchase_date(const char* value);
  inline void set_purchase_date(const char* value, size_t size);
  inline ::std::string* mutable_purchase_date();
  inline ::std::string* release_purchase_date();
  inline void set_allocated_purchase_date(::std::string* purchase_date);

  // @@protoc_insertion_point(class_scope:GM_GooglePlay_Verify_Order_Return)
 private:
  inline void set_has_googleorderid();
  inline void clear_has_googleorderid();
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_purchase_date();
  inline void clear_has_purchase_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* googleorderid_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::uint32 quantity_;
  ::google::protobuf::uint32 gold_;
  ::std::string* productid_;
  ::std::string* purchase_date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_payment_2etxt();
  friend void protobuf_AssignDesc_payment_2etxt();
  friend void protobuf_ShutdownFile_payment_2etxt();

  void InitAsDefaultInstance();
  static GM_GooglePlay_Verify_Order_Return* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_AppStore_Verify_Order

// required string transaction_id = 1;
inline bool GM_AppStore_Verify_Order::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AppStore_Verify_Order::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AppStore_Verify_Order::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& GM_AppStore_Verify_Order::transaction_id() const {
  return *transaction_id_;
}
inline void GM_AppStore_Verify_Order::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void GM_AppStore_Verify_Order::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void GM_AppStore_Verify_Order::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_AppStore_Verify_Order::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* GM_AppStore_Verify_Order::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_AppStore_Verify_Order::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_id) {
    set_has_transaction_id();
    transaction_id_ = transaction_id;
  } else {
    clear_has_transaction_id();
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 platform = 2;
inline bool GM_AppStore_Verify_Order::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_AppStore_Verify_Order::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_AppStore_Verify_Order::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order::platform() const {
  return platform_;
}
inline void GM_AppStore_Verify_Order::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// required string channel = 3;
inline bool GM_AppStore_Verify_Order::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_AppStore_Verify_Order::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_AppStore_Verify_Order::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& GM_AppStore_Verify_Order::channel() const {
  return *channel_;
}
inline void GM_AppStore_Verify_Order::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_AppStore_Verify_Order::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_AppStore_Verify_Order::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_AppStore_Verify_Order::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* GM_AppStore_Verify_Order::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_AppStore_Verify_Order::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 appid = 4;
inline bool GM_AppStore_Verify_Order::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_AppStore_Verify_Order::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_AppStore_Verify_Order::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order::appid() const {
  return appid_;
}
inline void GM_AppStore_Verify_Order::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
}

// required string buffer = 5;
inline bool GM_AppStore_Verify_Order::has_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_AppStore_Verify_Order::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_AppStore_Verify_Order::clear_buffer() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    buffer_->clear();
  }
  clear_has_buffer();
}
inline const ::std::string& GM_AppStore_Verify_Order::buffer() const {
  return *buffer_;
}
inline void GM_AppStore_Verify_Order::set_buffer(const ::std::string& value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void GM_AppStore_Verify_Order::set_buffer(const char* value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void GM_AppStore_Verify_Order::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_AppStore_Verify_Order::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}
inline ::std::string* GM_AppStore_Verify_Order::release_buffer() {
  clear_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffer_;
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_AppStore_Verify_Order::set_allocated_buffer(::std::string* buffer) {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (buffer) {
    set_has_buffer();
    buffer_ = buffer;
  } else {
    clear_has_buffer();
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 roleid = 6;
inline bool GM_AppStore_Verify_Order::has_roleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_roleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_AppStore_Verify_Order::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_AppStore_Verify_Order::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order::roleid() const {
  return roleid_;
}
inline void GM_AppStore_Verify_Order::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 serverid = 7;
inline bool GM_AppStore_Verify_Order::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_AppStore_Verify_Order::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_AppStore_Verify_Order::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order::serverid() const {
  return serverid_;
}
inline void GM_AppStore_Verify_Order::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 accountid = 8;
inline bool GM_AppStore_Verify_Order::has_accountid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_AppStore_Verify_Order::set_has_accountid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_AppStore_Verify_Order::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_AppStore_Verify_Order::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order::accountid() const {
  return accountid_;
}
inline void GM_AppStore_Verify_Order::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// GM_AppStore_Verify_Order_Return

// optional string transaction_id = 1;
inline bool GM_AppStore_Verify_Order_Return::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AppStore_Verify_Order_Return::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& GM_AppStore_Verify_Order_Return::transaction_id() const {
  return *transaction_id_;
}
inline void GM_AppStore_Verify_Order_Return::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void GM_AppStore_Verify_Order_Return::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void GM_AppStore_Verify_Order_Return::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_AppStore_Verify_Order_Return::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* GM_AppStore_Verify_Order_Return::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_AppStore_Verify_Order_Return::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_id) {
    set_has_transaction_id();
    transaction_id_ = transaction_id;
  } else {
    clear_has_transaction_id();
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_result = 2;
inline bool GM_AppStore_Verify_Order_Return::has_m_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_m_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_AppStore_Verify_Order_Return::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order_Return::m_result() const {
  return m_result_;
}
inline void GM_AppStore_Verify_Order_Return::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 roleid = 3;
inline bool GM_AppStore_Verify_Order_Return::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_AppStore_Verify_Order_Return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_AppStore_Verify_Order_Return::roleid() const {
  return roleid_;
}
inline void GM_AppStore_Verify_Order_Return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 quantity = 4;
inline bool GM_AppStore_Verify_Order_Return::has_quantity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_quantity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_AppStore_Verify_Order_Return::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
inline ::google::protobuf::uint32 GM_AppStore_Verify_Order_Return::quantity() const {
  return quantity_;
}
inline void GM_AppStore_Verify_Order_Return::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
}

// optional uint32 gold = 5;
inline bool GM_AppStore_Verify_Order_Return::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_AppStore_Verify_Order_Return::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 GM_AppStore_Verify_Order_Return::gold() const {
  return gold_;
}
inline void GM_AppStore_Verify_Order_Return::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional string productid = 6;
inline bool GM_AppStore_Verify_Order_Return::has_productid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_productid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_productid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_AppStore_Verify_Order_Return::clear_productid() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    productid_->clear();
  }
  clear_has_productid();
}
inline const ::std::string& GM_AppStore_Verify_Order_Return::productid() const {
  return *productid_;
}
inline void GM_AppStore_Verify_Order_Return::set_productid(const ::std::string& value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void GM_AppStore_Verify_Order_Return::set_productid(const char* value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void GM_AppStore_Verify_Order_Return::set_productid(const char* value, size_t size) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_AppStore_Verify_Order_Return::mutable_productid() {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  return productid_;
}
inline ::std::string* GM_AppStore_Verify_Order_Return::release_productid() {
  clear_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productid_;
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_AppStore_Verify_Order_Return::set_allocated_productid(::std::string* productid) {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (productid) {
    set_has_productid();
    productid_ = productid;
  } else {
    clear_has_productid();
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string purchase_date = 7;
inline bool GM_AppStore_Verify_Order_Return::has_purchase_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_AppStore_Verify_Order_Return::set_has_purchase_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_AppStore_Verify_Order_Return::clear_has_purchase_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_AppStore_Verify_Order_Return::clear_purchase_date() {
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    purchase_date_->clear();
  }
  clear_has_purchase_date();
}
inline const ::std::string& GM_AppStore_Verify_Order_Return::purchase_date() const {
  return *purchase_date_;
}
inline void GM_AppStore_Verify_Order_Return::set_purchase_date(const ::std::string& value) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(value);
}
inline void GM_AppStore_Verify_Order_Return::set_purchase_date(const char* value) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(value);
}
inline void GM_AppStore_Verify_Order_Return::set_purchase_date(const char* value, size_t size) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_AppStore_Verify_Order_Return::mutable_purchase_date() {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  return purchase_date_;
}
inline ::std::string* GM_AppStore_Verify_Order_Return::release_purchase_date() {
  clear_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = purchase_date_;
    purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_AppStore_Verify_Order_Return::set_allocated_purchase_date(::std::string* purchase_date) {
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_date_;
  }
  if (purchase_date) {
    set_has_purchase_date();
    purchase_date_ = purchase_date;
  } else {
    clear_has_purchase_date();
    purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Product

// required int32 productid = 1;
inline bool GM_Product::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Product::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Product::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Product::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 GM_Product::productid() const {
  return productid_;
}
inline void GM_Product::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
}

// required string icon = 2;
inline bool GM_Product::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Product::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Product::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Product::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& GM_Product::icon() const {
  return *icon_;
}
inline void GM_Product::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GM_Product::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GM_Product::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Product::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* GM_Product::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Product::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool GM_Product::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Product::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Product::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Product::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_Product::name() const {
  return *name_;
}
inline void GM_Product::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_Product::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_Product::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Product::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_Product::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Product::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string moneystr = 4;
inline bool GM_Product::has_moneystr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Product::set_has_moneystr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Product::clear_has_moneystr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Product::clear_moneystr() {
  if (moneystr_ != &::google::protobuf::internal::kEmptyString) {
    moneystr_->clear();
  }
  clear_has_moneystr();
}
inline const ::std::string& GM_Product::moneystr() const {
  return *moneystr_;
}
inline void GM_Product::set_moneystr(const ::std::string& value) {
  set_has_moneystr();
  if (moneystr_ == &::google::protobuf::internal::kEmptyString) {
    moneystr_ = new ::std::string;
  }
  moneystr_->assign(value);
}
inline void GM_Product::set_moneystr(const char* value) {
  set_has_moneystr();
  if (moneystr_ == &::google::protobuf::internal::kEmptyString) {
    moneystr_ = new ::std::string;
  }
  moneystr_->assign(value);
}
inline void GM_Product::set_moneystr(const char* value, size_t size) {
  set_has_moneystr();
  if (moneystr_ == &::google::protobuf::internal::kEmptyString) {
    moneystr_ = new ::std::string;
  }
  moneystr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Product::mutable_moneystr() {
  set_has_moneystr();
  if (moneystr_ == &::google::protobuf::internal::kEmptyString) {
    moneystr_ = new ::std::string;
  }
  return moneystr_;
}
inline ::std::string* GM_Product::release_moneystr() {
  clear_has_moneystr();
  if (moneystr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = moneystr_;
    moneystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Product::set_allocated_moneystr(::std::string* moneystr) {
  if (moneystr_ != &::google::protobuf::internal::kEmptyString) {
    delete moneystr_;
  }
  if (moneystr) {
    set_has_moneystr();
    moneystr_ = moneystr;
  } else {
    clear_has_moneystr();
    moneystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string desc = 5;
inline bool GM_Product::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Product::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Product::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Product::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& GM_Product::desc() const {
  return *desc_;
}
inline void GM_Product::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void GM_Product::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void GM_Product::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Product::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* GM_Product::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Product::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool canclick = 6;
inline bool GM_Product::has_canclick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Product::set_has_canclick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Product::clear_has_canclick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Product::clear_canclick() {
  canclick_ = false;
  clear_has_canclick();
}
inline bool GM_Product::canclick() const {
  return canclick_;
}
inline void GM_Product::set_canclick(bool value) {
  set_has_canclick();
  canclick_ = value;
}

// required int32 money = 7;
inline bool GM_Product::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Product::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Product::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Product::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 GM_Product::money() const {
  return money_;
}
inline void GM_Product::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// GM_ProductList_Request

// required string channel = 1;
inline bool GM_ProductList_Request::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ProductList_Request::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ProductList_Request::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ProductList_Request::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& GM_ProductList_Request::channel() const {
  return *channel_;
}
inline void GM_ProductList_Request::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_ProductList_Request::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_ProductList_Request::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ProductList_Request::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* GM_ProductList_Request::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ProductList_Request::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_ProductList

// required int32 count = 1;
inline bool GM_ProductList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ProductList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ProductList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ProductList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_ProductList::count() const {
  return count_;
}
inline void GM_ProductList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_Product list = 2;
inline int GM_ProductList::list_size() const {
  return list_.size();
}
inline void GM_ProductList::clear_list() {
  list_.Clear();
}
inline const ::GM_Product& GM_ProductList::list(int index) const {
  return list_.Get(index);
}
inline ::GM_Product* GM_ProductList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::GM_Product* GM_ProductList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Product >&
GM_ProductList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Product >*
GM_ProductList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// GM_GooglePlay_Verify_Order

// required string googleorderid = 1;
inline bool GM_GooglePlay_Verify_Order::has_googleorderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_googleorderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_googleorderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GooglePlay_Verify_Order::clear_googleorderid() {
  if (googleorderid_ != &::google::protobuf::internal::kEmptyString) {
    googleorderid_->clear();
  }
  clear_has_googleorderid();
}
inline const ::std::string& GM_GooglePlay_Verify_Order::googleorderid() const {
  return *googleorderid_;
}
inline void GM_GooglePlay_Verify_Order::set_googleorderid(const ::std::string& value) {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  googleorderid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_googleorderid(const char* value) {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  googleorderid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_googleorderid(const char* value, size_t size) {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  googleorderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order::mutable_googleorderid() {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  return googleorderid_;
}
inline ::std::string* GM_GooglePlay_Verify_Order::release_googleorderid() {
  clear_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = googleorderid_;
    googleorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order::set_allocated_googleorderid(::std::string* googleorderid) {
  if (googleorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete googleorderid_;
  }
  if (googleorderid) {
    set_has_googleorderid();
    googleorderid_ = googleorderid;
  } else {
    clear_has_googleorderid();
    googleorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 platform = 2;
inline bool GM_GooglePlay_Verify_Order::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GooglePlay_Verify_Order::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order::platform() const {
  return platform_;
}
inline void GM_GooglePlay_Verify_Order::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// required string channel = 3;
inline bool GM_GooglePlay_Verify_Order::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GooglePlay_Verify_Order::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& GM_GooglePlay_Verify_Order::channel() const {
  return *channel_;
}
inline void GM_GooglePlay_Verify_Order::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* GM_GooglePlay_Verify_Order::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 appid = 4;
inline bool GM_GooglePlay_Verify_Order::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GooglePlay_Verify_Order::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order::appid() const {
  return appid_;
}
inline void GM_GooglePlay_Verify_Order::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
}

// required string randstr = 5;
inline bool GM_GooglePlay_Verify_Order::has_randstr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_randstr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_randstr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GooglePlay_Verify_Order::clear_randstr() {
  if (randstr_ != &::google::protobuf::internal::kEmptyString) {
    randstr_->clear();
  }
  clear_has_randstr();
}
inline const ::std::string& GM_GooglePlay_Verify_Order::randstr() const {
  return *randstr_;
}
inline void GM_GooglePlay_Verify_Order::set_randstr(const ::std::string& value) {
  set_has_randstr();
  if (randstr_ == &::google::protobuf::internal::kEmptyString) {
    randstr_ = new ::std::string;
  }
  randstr_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_randstr(const char* value) {
  set_has_randstr();
  if (randstr_ == &::google::protobuf::internal::kEmptyString) {
    randstr_ = new ::std::string;
  }
  randstr_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_randstr(const char* value, size_t size) {
  set_has_randstr();
  if (randstr_ == &::google::protobuf::internal::kEmptyString) {
    randstr_ = new ::std::string;
  }
  randstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order::mutable_randstr() {
  set_has_randstr();
  if (randstr_ == &::google::protobuf::internal::kEmptyString) {
    randstr_ = new ::std::string;
  }
  return randstr_;
}
inline ::std::string* GM_GooglePlay_Verify_Order::release_randstr() {
  clear_has_randstr();
  if (randstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = randstr_;
    randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order::set_allocated_randstr(::std::string* randstr) {
  if (randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete randstr_;
  }
  if (randstr) {
    set_has_randstr();
    randstr_ = randstr;
  } else {
    clear_has_randstr();
    randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 roleid = 6;
inline bool GM_GooglePlay_Verify_Order::has_roleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_roleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GooglePlay_Verify_Order::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order::roleid() const {
  return roleid_;
}
inline void GM_GooglePlay_Verify_Order::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 serverid = 7;
inline bool GM_GooglePlay_Verify_Order::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GooglePlay_Verify_Order::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order::serverid() const {
  return serverid_;
}
inline void GM_GooglePlay_Verify_Order::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 accountid = 8;
inline bool GM_GooglePlay_Verify_Order::has_accountid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_accountid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GooglePlay_Verify_Order::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order::accountid() const {
  return accountid_;
}
inline void GM_GooglePlay_Verify_Order::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string orderid = 9;
inline bool GM_GooglePlay_Verify_Order::has_orderid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_orderid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GooglePlay_Verify_Order::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& GM_GooglePlay_Verify_Order::orderid() const {
  return *orderid_;
}
inline void GM_GooglePlay_Verify_Order::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* GM_GooglePlay_Verify_Order::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string itemid = 10;
inline bool GM_GooglePlay_Verify_Order::has_itemid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_itemid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_GooglePlay_Verify_Order::clear_itemid() {
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    itemid_->clear();
  }
  clear_has_itemid();
}
inline const ::std::string& GM_GooglePlay_Verify_Order::itemid() const {
  return *itemid_;
}
inline void GM_GooglePlay_Verify_Order::set_itemid(const ::std::string& value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_itemid(const char* value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  return itemid_;
}
inline ::std::string* GM_GooglePlay_Verify_Order::release_itemid() {
  clear_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemid_;
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order::set_allocated_itemid(::std::string* itemid) {
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (itemid) {
    set_has_itemid();
    itemid_ = itemid;
  } else {
    clear_has_itemid();
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string token = 11;
inline bool GM_GooglePlay_Verify_Order::has_token() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_GooglePlay_Verify_Order::set_has_token() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_GooglePlay_Verify_Order::clear_has_token() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_GooglePlay_Verify_Order::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& GM_GooglePlay_Verify_Order::token() const {
  return *token_;
}
inline void GM_GooglePlay_Verify_Order::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void GM_GooglePlay_Verify_Order::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* GM_GooglePlay_Verify_Order::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GooglePlay_Verify_Order_Return

// optional string googleorderid = 1;
inline bool GM_GooglePlay_Verify_Order_Return::has_googleorderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_googleorderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_googleorderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_googleorderid() {
  if (googleorderid_ != &::google::protobuf::internal::kEmptyString) {
    googleorderid_->clear();
  }
  clear_has_googleorderid();
}
inline const ::std::string& GM_GooglePlay_Verify_Order_Return::googleorderid() const {
  return *googleorderid_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_googleorderid(const ::std::string& value) {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  googleorderid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order_Return::set_googleorderid(const char* value) {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  googleorderid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order_Return::set_googleorderid(const char* value, size_t size) {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  googleorderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order_Return::mutable_googleorderid() {
  set_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    googleorderid_ = new ::std::string;
  }
  return googleorderid_;
}
inline ::std::string* GM_GooglePlay_Verify_Order_Return::release_googleorderid() {
  clear_has_googleorderid();
  if (googleorderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = googleorderid_;
    googleorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order_Return::set_allocated_googleorderid(::std::string* googleorderid) {
  if (googleorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete googleorderid_;
  }
  if (googleorderid) {
    set_has_googleorderid();
    googleorderid_ = googleorderid;
  } else {
    clear_has_googleorderid();
    googleorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_result = 2;
inline bool GM_GooglePlay_Verify_Order_Return::has_m_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_m_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order_Return::m_result() const {
  return m_result_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 roleid = 3;
inline bool GM_GooglePlay_Verify_Order_Return::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GooglePlay_Verify_Order_Return::roleid() const {
  return roleid_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 quantity = 4;
inline bool GM_GooglePlay_Verify_Order_Return::has_quantity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_quantity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
inline ::google::protobuf::uint32 GM_GooglePlay_Verify_Order_Return::quantity() const {
  return quantity_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
}

// optional uint32 gold = 5;
inline bool GM_GooglePlay_Verify_Order_Return::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 GM_GooglePlay_Verify_Order_Return::gold() const {
  return gold_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional string productid = 6;
inline bool GM_GooglePlay_Verify_Order_Return::has_productid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_productid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_productid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_productid() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    productid_->clear();
  }
  clear_has_productid();
}
inline const ::std::string& GM_GooglePlay_Verify_Order_Return::productid() const {
  return *productid_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_productid(const ::std::string& value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order_Return::set_productid(const char* value) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void GM_GooglePlay_Verify_Order_Return::set_productid(const char* value, size_t size) {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order_Return::mutable_productid() {
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  return productid_;
}
inline ::std::string* GM_GooglePlay_Verify_Order_Return::release_productid() {
  clear_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productid_;
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order_Return::set_allocated_productid(::std::string* productid) {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (productid) {
    set_has_productid();
    productid_ = productid;
  } else {
    clear_has_productid();
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string purchase_date = 7;
inline bool GM_GooglePlay_Verify_Order_Return::has_purchase_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GooglePlay_Verify_Order_Return::set_has_purchase_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_has_purchase_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GooglePlay_Verify_Order_Return::clear_purchase_date() {
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    purchase_date_->clear();
  }
  clear_has_purchase_date();
}
inline const ::std::string& GM_GooglePlay_Verify_Order_Return::purchase_date() const {
  return *purchase_date_;
}
inline void GM_GooglePlay_Verify_Order_Return::set_purchase_date(const ::std::string& value) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(value);
}
inline void GM_GooglePlay_Verify_Order_Return::set_purchase_date(const char* value) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(value);
}
inline void GM_GooglePlay_Verify_Order_Return::set_purchase_date(const char* value, size_t size) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GooglePlay_Verify_Order_Return::mutable_purchase_date() {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  return purchase_date_;
}
inline ::std::string* GM_GooglePlay_Verify_Order_Return::release_purchase_date() {
  clear_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = purchase_date_;
    purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GooglePlay_Verify_Order_Return::set_allocated_purchase_date(::std::string* purchase_date) {
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_date_;
  }
  if (purchase_date) {
    set_has_purchase_date();
    purchase_date_ = purchase_date;
  } else {
    clear_has_purchase_date();
    purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_payment_2etxt__INCLUDED
