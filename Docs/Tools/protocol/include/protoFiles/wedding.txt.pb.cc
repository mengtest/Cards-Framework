// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wedding.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wedding.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Notify_JoinWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Notify_JoinWedding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_JoinWedding_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_JoinWedding_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Notify_BeginProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Notify_BeginProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_InviteOpen_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_InviteOpen_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_InviteOpenFriend_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_InviteOpenFriend_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_InviteFriend_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_InviteFriend_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMInviteFriendItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMInviteFriendItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_InviteFriend_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_InviteFriend_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FlowerBless_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FlowerBless_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SimilarOperate_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SimilarOperate_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FireWork_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FireWork_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlessRank_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlessRank_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TimeAndCount_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TimeAndCount_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ProcessData_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ProcessData_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColdTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColdTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BigMeal_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BigMeal_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BigMeal_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BigMeal_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SlotMachineObject_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SlotMachineObject_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlotMachineObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotMachineObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SlotTurn_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SlotTurn_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ObjectSee_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ObjectSee_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceInviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInviteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMKickOutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMKickOutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMReserchDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMReserchDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMReserchDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMReserchDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMProhibitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMProhibitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMManagerProceeReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMManagerProceeReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMWeddingChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMWeddingChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGiftRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wedding_2etxt() {
  protobuf_AddDesc_wedding_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wedding.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Notify_JoinWedding_descriptor_ = file->message_type(0);
  static const int GM_Notify_JoinWedding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_JoinWedding, canjoinwedding_),
  };
  GM_Notify_JoinWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Notify_JoinWedding_descriptor_,
      GM_Notify_JoinWedding::default_instance_,
      GM_Notify_JoinWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_JoinWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_JoinWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Notify_JoinWedding));
  GM_JoinWedding_Return_descriptor_ = file->message_type(1);
  static const int GM_JoinWedding_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_JoinWedding_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_JoinWedding_Return, lasttime_),
  };
  GM_JoinWedding_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_JoinWedding_Return_descriptor_,
      GM_JoinWedding_Return::default_instance_,
      GM_JoinWedding_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_JoinWedding_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_JoinWedding_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_JoinWedding_Return));
  GM_Notify_BeginProcess_descriptor_ = file->message_type(2);
  static const int GM_Notify_BeginProcess_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, canworldinvite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, manid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, womanid_),
  };
  GM_Notify_BeginProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Notify_BeginProcess_descriptor_,
      GM_Notify_BeginProcess::default_instance_,
      GM_Notify_BeginProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_BeginProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Notify_BeginProcess));
  GM_InviteOpen_Request_descriptor_ = file->message_type(3);
  static const int GM_InviteOpen_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpen_Request, kind_),
  };
  GM_InviteOpen_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_InviteOpen_Request_descriptor_,
      GM_InviteOpen_Request::default_instance_,
      GM_InviteOpen_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpen_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpen_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_InviteOpen_Request));
  GM_InviteOpenFriend_Return_descriptor_ = file->message_type(4);
  static const int GM_InviteOpenFriend_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpenFriend_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpenFriend_Return, item_),
  };
  GM_InviteOpenFriend_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_InviteOpenFriend_Return_descriptor_,
      GM_InviteOpenFriend_Return::default_instance_,
      GM_InviteOpenFriend_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpenFriend_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteOpenFriend_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_InviteOpenFriend_Return));
  GM_InviteFriend_Request_descriptor_ = file->message_type(5);
  static const int GM_InviteFriend_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Request, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Request, item_),
  };
  GM_InviteFriend_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_InviteFriend_Request_descriptor_,
      GM_InviteFriend_Request::default_instance_,
      GM_InviteFriend_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_InviteFriend_Request));
  GMInviteFriendItem_descriptor_ = file->message_type(6);
  static const int GMInviteFriendItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, friendprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, hasinvite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, isonline_),
  };
  GMInviteFriendItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMInviteFriendItem_descriptor_,
      GMInviteFriendItem::default_instance_,
      GMInviteFriendItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMInviteFriendItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMInviteFriendItem));
  GM_InviteFriend_Return_descriptor_ = file->message_type(7);
  static const int GM_InviteFriend_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Return, item_),
  };
  GM_InviteFriend_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_InviteFriend_Return_descriptor_,
      GM_InviteFriend_Return::default_instance_,
      GM_InviteFriend_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_InviteFriend_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_InviteFriend_Return));
  GM_FlowerBless_Request_descriptor_ = file->message_type(8);
  static const int GM_FlowerBless_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FlowerBless_Request, kind_),
  };
  GM_FlowerBless_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FlowerBless_Request_descriptor_,
      GM_FlowerBless_Request::default_instance_,
      GM_FlowerBless_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FlowerBless_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FlowerBless_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FlowerBless_Request));
  GM_SimilarOperate_Return_descriptor_ = file->message_type(9);
  static const int GM_SimilarOperate_Return_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, hascount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, getdiamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, objectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, canhideactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, celetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, coldtime_),
  };
  GM_SimilarOperate_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SimilarOperate_Return_descriptor_,
      GM_SimilarOperate_Return::default_instance_,
      GM_SimilarOperate_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SimilarOperate_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SimilarOperate_Return));
  GM_FireWork_Request_descriptor_ = file->message_type(10);
  static const int GM_FireWork_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FireWork_Request, firekind_),
  };
  GM_FireWork_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FireWork_Request_descriptor_,
      GM_FireWork_Request::default_instance_,
      GM_FireWork_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FireWork_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FireWork_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FireWork_Request));
  GM_BlessRank_Return_descriptor_ = file->message_type(11);
  static const int GM_BlessRank_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessRank_Return, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessRank_Return, mybless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessRank_Return, item_),
  };
  GM_BlessRank_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlessRank_Return_descriptor_,
      GM_BlessRank_Return::default_instance_,
      GM_BlessRank_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessRank_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessRank_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlessRank_Return));
  RankItem_descriptor_ = file->message_type(12);
  static const int RankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, getcount_),
  };
  RankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankItem_descriptor_,
      RankItem::default_instance_,
      RankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankItem));
  GM_TimeAndCount_Return_descriptor_ = file->message_type(13);
  static const int GM_TimeAndCount_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeAndCount_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeAndCount_Return, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeAndCount_Return, iscomponline_),
  };
  GM_TimeAndCount_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TimeAndCount_Return_descriptor_,
      GM_TimeAndCount_Return::default_instance_,
      GM_TimeAndCount_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeAndCount_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeAndCount_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TimeAndCount_Return));
  GM_ProcessData_Request_descriptor_ = file->message_type(14);
  static const int GM_ProcessData_Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, man_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, woman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, hasgetred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, isprohibit_),
  };
  GM_ProcessData_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ProcessData_Request_descriptor_,
      GM_ProcessData_Request::default_instance_,
      GM_ProcessData_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ProcessData_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ProcessData_Request));
  ColdTime_descriptor_ = file->message_type(15);
  static const int ColdTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColdTime, celetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColdTime, coldtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColdTime, hascount_),
  };
  ColdTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColdTime_descriptor_,
      ColdTime::default_instance_,
      ColdTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColdTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColdTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColdTime));
  GM_BigMeal_Request_descriptor_ = file->message_type(16);
  static const int GM_BigMeal_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Request, eatvalue_),
  };
  GM_BigMeal_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BigMeal_Request_descriptor_,
      GM_BigMeal_Request::default_instance_,
      GM_BigMeal_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BigMeal_Request));
  GM_BigMeal_Return_descriptor_ = file->message_type(17);
  static const int GM_BigMeal_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Return, coldtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Return, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Return, objectnum_),
  };
  GM_BigMeal_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BigMeal_Return_descriptor_,
      GM_BigMeal_Return::default_instance_,
      GM_BigMeal_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BigMeal_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BigMeal_Return));
  GM_SlotMachineObject_Return_descriptor_ = file->message_type(18);
  static const int GM_SlotMachineObject_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SlotMachineObject_Return, item_),
  };
  GM_SlotMachineObject_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SlotMachineObject_Return_descriptor_,
      GM_SlotMachineObject_Return::default_instance_,
      GM_SlotMachineObject_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SlotMachineObject_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SlotMachineObject_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SlotMachineObject_Return));
  SlotMachineObject_descriptor_ = file->message_type(19);
  static const int SlotMachineObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotMachineObject, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotMachineObject, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotMachineObject, objectnum_),
  };
  SlotMachineObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotMachineObject_descriptor_,
      SlotMachineObject::default_instance_,
      SlotMachineObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotMachineObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotMachineObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotMachineObject));
  GM_SlotTurn_Return_descriptor_ = file->message_type(20);
  static const int GM_SlotTurn_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SlotTurn_Return, place_),
  };
  GM_SlotTurn_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SlotTurn_Return_descriptor_,
      GM_SlotTurn_Return::default_instance_,
      GM_SlotTurn_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SlotTurn_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SlotTurn_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SlotTurn_Return));
  GM_ObjectSee_Return_descriptor_ = file->message_type(21);
  static const int GM_ObjectSee_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ObjectSee_Return, item_),
  };
  GM_ObjectSee_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ObjectSee_Return_descriptor_,
      GM_ObjectSee_Return::default_instance_,
      GM_ObjectSee_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ObjectSee_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ObjectSee_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ObjectSee_Return));
  ObjectData_descriptor_ = file->message_type(22);
  static const int ObjectData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectData, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectData, objectnum_),
  };
  ObjectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectData_descriptor_,
      ObjectData::default_instance_,
      ObjectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectData));
  InstanceInviteFriend_descriptor_ = file->message_type(23);
  static const int InstanceInviteFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInviteFriend, friendid_),
  };
  InstanceInviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInviteFriend_descriptor_,
      InstanceInviteFriend::default_instance_,
      InstanceInviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInviteFriend));
  GMKickOutRequest_descriptor_ = file->message_type(24);
  static const int GMKickOutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickOutRequest, roleid_),
  };
  GMKickOutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMKickOutRequest_descriptor_,
      GMKickOutRequest::default_instance_,
      GMKickOutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickOutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMKickOutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMKickOutRequest));
  GMReserchDataRequest_descriptor_ = file->message_type(25);
  static const int GMReserchDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReserchDataRequest, name_),
  };
  GMReserchDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMReserchDataRequest_descriptor_,
      GMReserchDataRequest::default_instance_,
      GMReserchDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReserchDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReserchDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMReserchDataRequest));
  GMReserchDataReturn_descriptor_ = file->message_type(26);
  static const int GMReserchDataReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReserchDataReturn, item_),
  };
  GMReserchDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMReserchDataReturn_descriptor_,
      GMReserchDataReturn::default_instance_,
      GMReserchDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReserchDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReserchDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMReserchDataReturn));
  RoleData_descriptor_ = file->message_type(27);
  static const int RoleData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, isfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, name_),
  };
  RoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleData_descriptor_,
      RoleData::default_instance_,
      RoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleData));
  GMProhibitRequest_descriptor_ = file->message_type(28);
  static const int GMProhibitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMProhibitRequest, kind_),
  };
  GMProhibitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMProhibitRequest_descriptor_,
      GMProhibitRequest::default_instance_,
      GMProhibitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMProhibitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMProhibitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMProhibitRequest));
  GMManagerProceeReturn_descriptor_ = file->message_type(29);
  static const int GMManagerProceeReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMManagerProceeReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMManagerProceeReturn, roleid_),
  };
  GMManagerProceeReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMManagerProceeReturn_descriptor_,
      GMManagerProceeReturn::default_instance_,
      GMManagerProceeReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMManagerProceeReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMManagerProceeReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMManagerProceeReturn));
  GMWeddingChat_descriptor_ = file->message_type(30);
  static const int GMWeddingChat_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, recename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, repeattimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, receroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, recevip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, profession_),
  };
  GMWeddingChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMWeddingChat_descriptor_,
      GMWeddingChat::default_instance_,
      GMWeddingChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMWeddingChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMWeddingChat));
  GMGiftRequest_descriptor_ = file->message_type(31);
  static const int GMGiftRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGiftRequest, blessvalue_),
  };
  GMGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGiftRequest_descriptor_,
      GMGiftRequest::default_instance_,
      GMGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGiftRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wedding_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Notify_JoinWedding_descriptor_, &GM_Notify_JoinWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_JoinWedding_Return_descriptor_, &GM_JoinWedding_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Notify_BeginProcess_descriptor_, &GM_Notify_BeginProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_InviteOpen_Request_descriptor_, &GM_InviteOpen_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_InviteOpenFriend_Return_descriptor_, &GM_InviteOpenFriend_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_InviteFriend_Request_descriptor_, &GM_InviteFriend_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMInviteFriendItem_descriptor_, &GMInviteFriendItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_InviteFriend_Return_descriptor_, &GM_InviteFriend_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FlowerBless_Request_descriptor_, &GM_FlowerBless_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SimilarOperate_Return_descriptor_, &GM_SimilarOperate_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FireWork_Request_descriptor_, &GM_FireWork_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlessRank_Return_descriptor_, &GM_BlessRank_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankItem_descriptor_, &RankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TimeAndCount_Return_descriptor_, &GM_TimeAndCount_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ProcessData_Request_descriptor_, &GM_ProcessData_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColdTime_descriptor_, &ColdTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BigMeal_Request_descriptor_, &GM_BigMeal_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BigMeal_Return_descriptor_, &GM_BigMeal_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SlotMachineObject_Return_descriptor_, &GM_SlotMachineObject_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotMachineObject_descriptor_, &SlotMachineObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SlotTurn_Return_descriptor_, &GM_SlotTurn_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ObjectSee_Return_descriptor_, &GM_ObjectSee_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectData_descriptor_, &ObjectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInviteFriend_descriptor_, &InstanceInviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMKickOutRequest_descriptor_, &GMKickOutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMReserchDataRequest_descriptor_, &GMReserchDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMReserchDataReturn_descriptor_, &GMReserchDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleData_descriptor_, &RoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMProhibitRequest_descriptor_, &GMProhibitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMManagerProceeReturn_descriptor_, &GMManagerProceeReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMWeddingChat_descriptor_, &GMWeddingChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGiftRequest_descriptor_, &GMGiftRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wedding_2etxt() {
  delete GM_Notify_JoinWedding::default_instance_;
  delete GM_Notify_JoinWedding_reflection_;
  delete GM_JoinWedding_Return::default_instance_;
  delete GM_JoinWedding_Return_reflection_;
  delete GM_Notify_BeginProcess::default_instance_;
  delete GM_Notify_BeginProcess_reflection_;
  delete GM_InviteOpen_Request::default_instance_;
  delete GM_InviteOpen_Request_reflection_;
  delete GM_InviteOpenFriend_Return::default_instance_;
  delete GM_InviteOpenFriend_Return_reflection_;
  delete GM_InviteFriend_Request::default_instance_;
  delete GM_InviteFriend_Request_reflection_;
  delete GMInviteFriendItem::default_instance_;
  delete GMInviteFriendItem_reflection_;
  delete GM_InviteFriend_Return::default_instance_;
  delete GM_InviteFriend_Return_reflection_;
  delete GM_FlowerBless_Request::default_instance_;
  delete GM_FlowerBless_Request_reflection_;
  delete GM_SimilarOperate_Return::default_instance_;
  delete GM_SimilarOperate_Return_reflection_;
  delete GM_FireWork_Request::default_instance_;
  delete GM_FireWork_Request_reflection_;
  delete GM_BlessRank_Return::default_instance_;
  delete GM_BlessRank_Return_reflection_;
  delete RankItem::default_instance_;
  delete RankItem_reflection_;
  delete GM_TimeAndCount_Return::default_instance_;
  delete GM_TimeAndCount_Return_reflection_;
  delete GM_ProcessData_Request::default_instance_;
  delete GM_ProcessData_Request_reflection_;
  delete ColdTime::default_instance_;
  delete ColdTime_reflection_;
  delete GM_BigMeal_Request::default_instance_;
  delete GM_BigMeal_Request_reflection_;
  delete GM_BigMeal_Return::default_instance_;
  delete GM_BigMeal_Return_reflection_;
  delete GM_SlotMachineObject_Return::default_instance_;
  delete GM_SlotMachineObject_Return_reflection_;
  delete SlotMachineObject::default_instance_;
  delete SlotMachineObject_reflection_;
  delete GM_SlotTurn_Return::default_instance_;
  delete GM_SlotTurn_Return_reflection_;
  delete GM_ObjectSee_Return::default_instance_;
  delete GM_ObjectSee_Return_reflection_;
  delete ObjectData::default_instance_;
  delete ObjectData_reflection_;
  delete InstanceInviteFriend::default_instance_;
  delete InstanceInviteFriend_reflection_;
  delete GMKickOutRequest::default_instance_;
  delete GMKickOutRequest_reflection_;
  delete GMReserchDataRequest::default_instance_;
  delete GMReserchDataRequest_reflection_;
  delete GMReserchDataReturn::default_instance_;
  delete GMReserchDataReturn_reflection_;
  delete RoleData::default_instance_;
  delete RoleData_reflection_;
  delete GMProhibitRequest::default_instance_;
  delete GMProhibitRequest_reflection_;
  delete GMManagerProceeReturn::default_instance_;
  delete GMManagerProceeReturn_reflection_;
  delete GMWeddingChat::default_instance_;
  delete GMWeddingChat_reflection_;
  delete GMGiftRequest::default_instance_;
  delete GMGiftRequest_reflection_;
}

void protobuf_AddDesc_wedding_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013wedding.txt\"/\n\025GM_Notify_JoinWedding\022\026"
    "\n\016canJoinWedding\030\001 \002(\005\"9\n\025GM_JoinWedding"
    "_Return\022\016\n\006result\030\001 \002(\005\022\020\n\010lastTime\030\002 \001("
    "\005\"s\n\026GM_Notify_BeginProcess\022\017\n\007process\030\001"
    " \002(\005\022\020\n\010lastTime\030\002 \002(\005\022\026\n\016canWorldInvite"
    "\030\003 \001(\005\022\r\n\005manid\030\004 \001(\005\022\017\n\007womanid\030\005 \001(\005\"%"
    "\n\025GM_InviteOpen_Request\022\014\n\004kind\030\001 \002(\005\"O\n"
    "\032GM_InviteOpenFriend_Return\022\016\n\006result\030\001 "
    "\002(\005\022!\n\004item\030\002 \003(\0132\023.GMInviteFriendItem\"6"
    "\n\027GM_InviteFriend_Request\022\r\n\005count\030\001 \002(\005"
    "\022\014\n\004item\030\002 \003(\005\"y\n\022GMInviteFriendItem\022\020\n\010"
    "friendid\030\001 \002(\005\022\030\n\020friendprofession\030\002 \001(\005"
    "\022\022\n\nfriendname\030\003 \001(\t\022\021\n\thasInvite\030\004 \001(\005\022"
    "\020\n\010isOnline\030\005 \001(\005\"5\n\026GM_InviteFriend_Ret"
    "urn\022\r\n\005count\030\001 \002(\005\022\014\n\004item\030\002 \003(\005\"&\n\026GM_F"
    "lowerBless_Request\022\014\n\004kind\030\001 \002(\005\"\263\001\n\030GM_"
    "SimilarOperate_Return\022\016\n\006result\030\001 \002(\005\022\020\n"
    "\010hasCount\030\002 \001(\005\022\023\n\013getDiamonds\030\003 \001(\005\022\020\n\010"
    "objectid\030\004 \001(\005\022\021\n\tobjectnum\030\005 \001(\005\022\027\n\017can"
    "HideActivity\030\006 \001(\005\022\020\n\010celeType\030\007 \001(\005\022\020\n\010"
    "coldTime\030\010 \001(\005\"\'\n\023GM_FireWork_Request\022\020\n"
    "\010firekind\030\001 \002(\005\"O\n\023GM_BlessRank_Return\022\016"
    "\n\006myRank\030\001 \002(\005\022\017\n\007myBless\030\002 \001(\005\022\027\n\004item\030"
    "\003 \003(\0132\t.RankItem\"8\n\010RankItem\022\014\n\004rank\030\001 \002"
    "(\005\022\014\n\004name\030\002 \002(\t\022\020\n\010getCount\030\003 \002(\005\"O\n\026GM"
    "_TimeAndCount_Return\022\r\n\005count\030\001 \002(\005\022\020\n\010l"
    "astTime\030\002 \001(\005\022\024\n\014isCompOnline\030\003 \001(\005\"\227\001\n\026"
    "GM_ProcessData_Request\022\020\n\010lastTime\030\001 \002(\005"
    "\022\017\n\007process\030\002 \001(\005\022\027\n\004item\030\003 \003(\0132\t.ColdTi"
    "me\022\013\n\003man\030\004 \001(\005\022\r\n\005woman\030\005 \001(\005\022\021\n\thasGet"
    "Red\030\006 \001(\005\022\022\n\nisProhibit\030\007 \001(\005\"@\n\010ColdTim"
    "e\022\020\n\010celeType\030\001 \001(\005\022\020\n\010coldtime\030\002 \001(\005\022\020\n"
    "\010hasCount\030\003 \001(\005\"&\n\022GM_BigMeal_Request\022\020\n"
    "\010eatValue\030\001 \002(\005\"Z\n\021GM_BigMeal_Return\022\016\n\006"
    "result\030\001 \002(\005\022\020\n\010coldTime\030\002 \001(\005\022\020\n\010object"
    "id\030\003 \001(\005\022\021\n\tobjectnum\030\004 \001(\005\"\?\n\033GM_SlotMa"
    "chineObject_Return\022 \n\004item\030\001 \003(\0132\022.SlotM"
    "achineObject\"G\n\021SlotMachineObject\022\r\n\005pla"
    "ce\030\001 \002(\005\022\020\n\010objectid\030\002 \002(\005\022\021\n\tobjectnum\030"
    "\003 \002(\005\"#\n\022GM_SlotTurn_Return\022\r\n\005place\030\001 \002"
    "(\005\"0\n\023GM_ObjectSee_Return\022\031\n\004item\030\001 \003(\0132"
    "\013.ObjectData\"1\n\nObjectData\022\020\n\010objectid\030\001"
    " \002(\005\022\021\n\tobjectnum\030\002 \002(\005\"(\n\024InstanceInvit"
    "eFriend\022\020\n\010friendid\030\001 \003(\005\"\"\n\020GMKickOutRe"
    "quest\022\016\n\006roleid\030\001 \002(\005\"$\n\024GMReserchDataRe"
    "quest\022\014\n\004name\030\001 \002(\t\".\n\023GMReserchDataRetu"
    "rn\022\027\n\004item\030\001 \003(\0132\t.RoleData\":\n\010RoleData\022"
    "\020\n\010isFriend\030\001 \002(\005\022\016\n\006roleid\030\002 \002(\005\022\014\n\004nam"
    "e\030\003 \001(\t\"!\n\021GMProhibitRequest\022\014\n\004kind\030\001 \002"
    "(\005\"7\n\025GMManagerProceeReturn\022\016\n\006result\030\001 "
    "\002(\005\022\016\n\006roleid\030\002 \001(\005\"\314\001\n\rGMWeddingChat\022\016\n"
    "\006roleId\030\001 \002(\005\022\014\n\004name\030\003 \001(\t\022\013\n\003vip\030\004 \001(\005"
    "\022\014\n\004word\030\005 \002(\t\022\020\n\010receName\030\006 \001(\t\022\023\n\013repe"
    "atTimes\030\007 \001(\r\022\024\n\014intervalTime\030\010 \001(\r\022\022\n\nr"
    "eceroleid\030\t \001(\005\022\017\n\007recevip\030\n \001(\005\022\014\n\004kind"
    "\030\013 \001(\005\022\022\n\nprofession\030\014 \001(\005\"#\n\rGMGiftRequ"
    "est\022\022\n\nblessValue\030\001 \002(\005", 2263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wedding.txt", &protobuf_RegisterTypes);
  GM_Notify_JoinWedding::default_instance_ = new GM_Notify_JoinWedding();
  GM_JoinWedding_Return::default_instance_ = new GM_JoinWedding_Return();
  GM_Notify_BeginProcess::default_instance_ = new GM_Notify_BeginProcess();
  GM_InviteOpen_Request::default_instance_ = new GM_InviteOpen_Request();
  GM_InviteOpenFriend_Return::default_instance_ = new GM_InviteOpenFriend_Return();
  GM_InviteFriend_Request::default_instance_ = new GM_InviteFriend_Request();
  GMInviteFriendItem::default_instance_ = new GMInviteFriendItem();
  GM_InviteFriend_Return::default_instance_ = new GM_InviteFriend_Return();
  GM_FlowerBless_Request::default_instance_ = new GM_FlowerBless_Request();
  GM_SimilarOperate_Return::default_instance_ = new GM_SimilarOperate_Return();
  GM_FireWork_Request::default_instance_ = new GM_FireWork_Request();
  GM_BlessRank_Return::default_instance_ = new GM_BlessRank_Return();
  RankItem::default_instance_ = new RankItem();
  GM_TimeAndCount_Return::default_instance_ = new GM_TimeAndCount_Return();
  GM_ProcessData_Request::default_instance_ = new GM_ProcessData_Request();
  ColdTime::default_instance_ = new ColdTime();
  GM_BigMeal_Request::default_instance_ = new GM_BigMeal_Request();
  GM_BigMeal_Return::default_instance_ = new GM_BigMeal_Return();
  GM_SlotMachineObject_Return::default_instance_ = new GM_SlotMachineObject_Return();
  SlotMachineObject::default_instance_ = new SlotMachineObject();
  GM_SlotTurn_Return::default_instance_ = new GM_SlotTurn_Return();
  GM_ObjectSee_Return::default_instance_ = new GM_ObjectSee_Return();
  ObjectData::default_instance_ = new ObjectData();
  InstanceInviteFriend::default_instance_ = new InstanceInviteFriend();
  GMKickOutRequest::default_instance_ = new GMKickOutRequest();
  GMReserchDataRequest::default_instance_ = new GMReserchDataRequest();
  GMReserchDataReturn::default_instance_ = new GMReserchDataReturn();
  RoleData::default_instance_ = new RoleData();
  GMProhibitRequest::default_instance_ = new GMProhibitRequest();
  GMManagerProceeReturn::default_instance_ = new GMManagerProceeReturn();
  GMWeddingChat::default_instance_ = new GMWeddingChat();
  GMGiftRequest::default_instance_ = new GMGiftRequest();
  GM_Notify_JoinWedding::default_instance_->InitAsDefaultInstance();
  GM_JoinWedding_Return::default_instance_->InitAsDefaultInstance();
  GM_Notify_BeginProcess::default_instance_->InitAsDefaultInstance();
  GM_InviteOpen_Request::default_instance_->InitAsDefaultInstance();
  GM_InviteOpenFriend_Return::default_instance_->InitAsDefaultInstance();
  GM_InviteFriend_Request::default_instance_->InitAsDefaultInstance();
  GMInviteFriendItem::default_instance_->InitAsDefaultInstance();
  GM_InviteFriend_Return::default_instance_->InitAsDefaultInstance();
  GM_FlowerBless_Request::default_instance_->InitAsDefaultInstance();
  GM_SimilarOperate_Return::default_instance_->InitAsDefaultInstance();
  GM_FireWork_Request::default_instance_->InitAsDefaultInstance();
  GM_BlessRank_Return::default_instance_->InitAsDefaultInstance();
  RankItem::default_instance_->InitAsDefaultInstance();
  GM_TimeAndCount_Return::default_instance_->InitAsDefaultInstance();
  GM_ProcessData_Request::default_instance_->InitAsDefaultInstance();
  ColdTime::default_instance_->InitAsDefaultInstance();
  GM_BigMeal_Request::default_instance_->InitAsDefaultInstance();
  GM_BigMeal_Return::default_instance_->InitAsDefaultInstance();
  GM_SlotMachineObject_Return::default_instance_->InitAsDefaultInstance();
  SlotMachineObject::default_instance_->InitAsDefaultInstance();
  GM_SlotTurn_Return::default_instance_->InitAsDefaultInstance();
  GM_ObjectSee_Return::default_instance_->InitAsDefaultInstance();
  ObjectData::default_instance_->InitAsDefaultInstance();
  InstanceInviteFriend::default_instance_->InitAsDefaultInstance();
  GMKickOutRequest::default_instance_->InitAsDefaultInstance();
  GMReserchDataRequest::default_instance_->InitAsDefaultInstance();
  GMReserchDataReturn::default_instance_->InitAsDefaultInstance();
  RoleData::default_instance_->InitAsDefaultInstance();
  GMProhibitRequest::default_instance_->InitAsDefaultInstance();
  GMManagerProceeReturn::default_instance_->InitAsDefaultInstance();
  GMWeddingChat::default_instance_->InitAsDefaultInstance();
  GMGiftRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wedding_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wedding_2etxt {
  StaticDescriptorInitializer_wedding_2etxt() {
    protobuf_AddDesc_wedding_2etxt();
  }
} static_descriptor_initializer_wedding_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Notify_JoinWedding::kCanJoinWeddingFieldNumber;
#endif  // !_MSC_VER

GM_Notify_JoinWedding::GM_Notify_JoinWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Notify_JoinWedding::InitAsDefaultInstance() {
}

GM_Notify_JoinWedding::GM_Notify_JoinWedding(const GM_Notify_JoinWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Notify_JoinWedding::SharedCtor() {
  _cached_size_ = 0;
  canjoinwedding_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Notify_JoinWedding::~GM_Notify_JoinWedding() {
  SharedDtor();
}

void GM_Notify_JoinWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Notify_JoinWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Notify_JoinWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Notify_JoinWedding_descriptor_;
}

const GM_Notify_JoinWedding& GM_Notify_JoinWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_Notify_JoinWedding* GM_Notify_JoinWedding::default_instance_ = NULL;

GM_Notify_JoinWedding* GM_Notify_JoinWedding::New() const {
  return new GM_Notify_JoinWedding;
}

void GM_Notify_JoinWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    canjoinwedding_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Notify_JoinWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 canJoinWedding = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canjoinwedding_)));
          set_has_canjoinwedding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Notify_JoinWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 canJoinWedding = 1;
  if (has_canjoinwedding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canjoinwedding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Notify_JoinWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 canJoinWedding = 1;
  if (has_canjoinwedding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canjoinwedding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Notify_JoinWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 canJoinWedding = 1;
    if (has_canjoinwedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canjoinwedding());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Notify_JoinWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Notify_JoinWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Notify_JoinWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Notify_JoinWedding::MergeFrom(const GM_Notify_JoinWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canjoinwedding()) {
      set_canjoinwedding(from.canjoinwedding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Notify_JoinWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Notify_JoinWedding::CopyFrom(const GM_Notify_JoinWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Notify_JoinWedding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Notify_JoinWedding::Swap(GM_Notify_JoinWedding* other) {
  if (other != this) {
    std::swap(canjoinwedding_, other->canjoinwedding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Notify_JoinWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Notify_JoinWedding_descriptor_;
  metadata.reflection = GM_Notify_JoinWedding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_JoinWedding_Return::kResultFieldNumber;
const int GM_JoinWedding_Return::kLastTimeFieldNumber;
#endif  // !_MSC_VER

GM_JoinWedding_Return::GM_JoinWedding_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_JoinWedding_Return::InitAsDefaultInstance() {
}

GM_JoinWedding_Return::GM_JoinWedding_Return(const GM_JoinWedding_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_JoinWedding_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_JoinWedding_Return::~GM_JoinWedding_Return() {
  SharedDtor();
}

void GM_JoinWedding_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_JoinWedding_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_JoinWedding_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_JoinWedding_Return_descriptor_;
}

const GM_JoinWedding_Return& GM_JoinWedding_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_JoinWedding_Return* GM_JoinWedding_Return::default_instance_ = NULL;

GM_JoinWedding_Return* GM_JoinWedding_Return::New() const {
  return new GM_JoinWedding_Return;
}

void GM_JoinWedding_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_JoinWedding_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_JoinWedding_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_JoinWedding_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_JoinWedding_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_JoinWedding_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_JoinWedding_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_JoinWedding_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_JoinWedding_Return::MergeFrom(const GM_JoinWedding_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_JoinWedding_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_JoinWedding_Return::CopyFrom(const GM_JoinWedding_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_JoinWedding_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_JoinWedding_Return::Swap(GM_JoinWedding_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_JoinWedding_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_JoinWedding_Return_descriptor_;
  metadata.reflection = GM_JoinWedding_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Notify_BeginProcess::kProcessFieldNumber;
const int GM_Notify_BeginProcess::kLastTimeFieldNumber;
const int GM_Notify_BeginProcess::kCanWorldInviteFieldNumber;
const int GM_Notify_BeginProcess::kManidFieldNumber;
const int GM_Notify_BeginProcess::kWomanidFieldNumber;
#endif  // !_MSC_VER

GM_Notify_BeginProcess::GM_Notify_BeginProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Notify_BeginProcess::InitAsDefaultInstance() {
}

GM_Notify_BeginProcess::GM_Notify_BeginProcess(const GM_Notify_BeginProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Notify_BeginProcess::SharedCtor() {
  _cached_size_ = 0;
  process_ = 0;
  lasttime_ = 0;
  canworldinvite_ = 0;
  manid_ = 0;
  womanid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Notify_BeginProcess::~GM_Notify_BeginProcess() {
  SharedDtor();
}

void GM_Notify_BeginProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Notify_BeginProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Notify_BeginProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Notify_BeginProcess_descriptor_;
}

const GM_Notify_BeginProcess& GM_Notify_BeginProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_Notify_BeginProcess* GM_Notify_BeginProcess::default_instance_ = NULL;

GM_Notify_BeginProcess* GM_Notify_BeginProcess::New() const {
  return new GM_Notify_BeginProcess;
}

void GM_Notify_BeginProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    process_ = 0;
    lasttime_ = 0;
    canworldinvite_ = 0;
    manid_ = 0;
    womanid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Notify_BeginProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 process = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // required int32 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_canWorldInvite;
        break;
      }

      // optional int32 canWorldInvite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canWorldInvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canworldinvite_)));
          set_has_canworldinvite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_manid;
        break;
      }

      // optional int32 manid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manid_)));
          set_has_manid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_womanid;
        break;
      }

      // optional int32 womanid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_womanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &womanid_)));
          set_has_womanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Notify_BeginProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 process = 1;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->process(), output);
  }

  // required int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // optional int32 canWorldInvite = 3;
  if (has_canworldinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->canworldinvite(), output);
  }

  // optional int32 manid = 4;
  if (has_manid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->manid(), output);
  }

  // optional int32 womanid = 5;
  if (has_womanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->womanid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Notify_BeginProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 process = 1;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->process(), target);
  }

  // required int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // optional int32 canWorldInvite = 3;
  if (has_canworldinvite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->canworldinvite(), target);
  }

  // optional int32 manid = 4;
  if (has_manid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->manid(), target);
  }

  // optional int32 womanid = 5;
  if (has_womanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->womanid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Notify_BeginProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 process = 1;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process());
    }

    // required int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 canWorldInvite = 3;
    if (has_canworldinvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canworldinvite());
    }

    // optional int32 manid = 4;
    if (has_manid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manid());
    }

    // optional int32 womanid = 5;
    if (has_womanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->womanid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Notify_BeginProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Notify_BeginProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Notify_BeginProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Notify_BeginProcess::MergeFrom(const GM_Notify_BeginProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_canworldinvite()) {
      set_canworldinvite(from.canworldinvite());
    }
    if (from.has_manid()) {
      set_manid(from.manid());
    }
    if (from.has_womanid()) {
      set_womanid(from.womanid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Notify_BeginProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Notify_BeginProcess::CopyFrom(const GM_Notify_BeginProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Notify_BeginProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Notify_BeginProcess::Swap(GM_Notify_BeginProcess* other) {
  if (other != this) {
    std::swap(process_, other->process_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(canworldinvite_, other->canworldinvite_);
    std::swap(manid_, other->manid_);
    std::swap(womanid_, other->womanid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Notify_BeginProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Notify_BeginProcess_descriptor_;
  metadata.reflection = GM_Notify_BeginProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_InviteOpen_Request::kKindFieldNumber;
#endif  // !_MSC_VER

GM_InviteOpen_Request::GM_InviteOpen_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_InviteOpen_Request::InitAsDefaultInstance() {
}

GM_InviteOpen_Request::GM_InviteOpen_Request(const GM_InviteOpen_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_InviteOpen_Request::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_InviteOpen_Request::~GM_InviteOpen_Request() {
  SharedDtor();
}

void GM_InviteOpen_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_InviteOpen_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_InviteOpen_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_InviteOpen_Request_descriptor_;
}

const GM_InviteOpen_Request& GM_InviteOpen_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_InviteOpen_Request* GM_InviteOpen_Request::default_instance_ = NULL;

GM_InviteOpen_Request* GM_InviteOpen_Request::New() const {
  return new GM_InviteOpen_Request;
}

void GM_InviteOpen_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_InviteOpen_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_InviteOpen_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_InviteOpen_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_InviteOpen_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_InviteOpen_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_InviteOpen_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_InviteOpen_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_InviteOpen_Request::MergeFrom(const GM_InviteOpen_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_InviteOpen_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_InviteOpen_Request::CopyFrom(const GM_InviteOpen_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_InviteOpen_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_InviteOpen_Request::Swap(GM_InviteOpen_Request* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_InviteOpen_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_InviteOpen_Request_descriptor_;
  metadata.reflection = GM_InviteOpen_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_InviteOpenFriend_Return::kResultFieldNumber;
const int GM_InviteOpenFriend_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_InviteOpenFriend_Return::GM_InviteOpenFriend_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_InviteOpenFriend_Return::InitAsDefaultInstance() {
}

GM_InviteOpenFriend_Return::GM_InviteOpenFriend_Return(const GM_InviteOpenFriend_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_InviteOpenFriend_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_InviteOpenFriend_Return::~GM_InviteOpenFriend_Return() {
  SharedDtor();
}

void GM_InviteOpenFriend_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_InviteOpenFriend_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_InviteOpenFriend_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_InviteOpenFriend_Return_descriptor_;
}

const GM_InviteOpenFriend_Return& GM_InviteOpenFriend_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_InviteOpenFriend_Return* GM_InviteOpenFriend_Return::default_instance_ = NULL;

GM_InviteOpenFriend_Return* GM_InviteOpenFriend_Return::New() const {
  return new GM_InviteOpenFriend_Return;
}

void GM_InviteOpenFriend_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_InviteOpenFriend_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .GMInviteFriendItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_InviteOpenFriend_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GMInviteFriendItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_InviteOpenFriend_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GMInviteFriendItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_InviteOpenFriend_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GMInviteFriendItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_InviteOpenFriend_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_InviteOpenFriend_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_InviteOpenFriend_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_InviteOpenFriend_Return::MergeFrom(const GM_InviteOpenFriend_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_InviteOpenFriend_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_InviteOpenFriend_Return::CopyFrom(const GM_InviteOpenFriend_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_InviteOpenFriend_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_InviteOpenFriend_Return::Swap(GM_InviteOpenFriend_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_InviteOpenFriend_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_InviteOpenFriend_Return_descriptor_;
  metadata.reflection = GM_InviteOpenFriend_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_InviteFriend_Request::kCountFieldNumber;
const int GM_InviteFriend_Request::kItemFieldNumber;
#endif  // !_MSC_VER

GM_InviteFriend_Request::GM_InviteFriend_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_InviteFriend_Request::InitAsDefaultInstance() {
}

GM_InviteFriend_Request::GM_InviteFriend_Request(const GM_InviteFriend_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_InviteFriend_Request::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_InviteFriend_Request::~GM_InviteFriend_Request() {
  SharedDtor();
}

void GM_InviteFriend_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_InviteFriend_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_InviteFriend_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_InviteFriend_Request_descriptor_;
}

const GM_InviteFriend_Request& GM_InviteFriend_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_InviteFriend_Request* GM_InviteFriend_Request::default_instance_ = NULL;

GM_InviteFriend_Request* GM_InviteFriend_Request::New() const {
  return new GM_InviteFriend_Request;
}

void GM_InviteFriend_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_InviteFriend_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // repeated int32 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_InviteFriend_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated int32 item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_InviteFriend_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated int32 item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_InviteFriend_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated int32 item = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_InviteFriend_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_InviteFriend_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_InviteFriend_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_InviteFriend_Request::MergeFrom(const GM_InviteFriend_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_InviteFriend_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_InviteFriend_Request::CopyFrom(const GM_InviteFriend_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_InviteFriend_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_InviteFriend_Request::Swap(GM_InviteFriend_Request* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_InviteFriend_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_InviteFriend_Request_descriptor_;
  metadata.reflection = GM_InviteFriend_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMInviteFriendItem::kFriendidFieldNumber;
const int GMInviteFriendItem::kFriendprofessionFieldNumber;
const int GMInviteFriendItem::kFriendnameFieldNumber;
const int GMInviteFriendItem::kHasInviteFieldNumber;
const int GMInviteFriendItem::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

GMInviteFriendItem::GMInviteFriendItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMInviteFriendItem::InitAsDefaultInstance() {
}

GMInviteFriendItem::GMInviteFriendItem(const GMInviteFriendItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMInviteFriendItem::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  friendprofession_ = 0;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasinvite_ = 0;
  isonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMInviteFriendItem::~GMInviteFriendItem() {
  SharedDtor();
}

void GMInviteFriendItem::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void GMInviteFriendItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMInviteFriendItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMInviteFriendItem_descriptor_;
}

const GMInviteFriendItem& GMInviteFriendItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMInviteFriendItem* GMInviteFriendItem::default_instance_ = NULL;

GMInviteFriendItem* GMInviteFriendItem::New() const {
  return new GMInviteFriendItem;
}

void GMInviteFriendItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
    friendprofession_ = 0;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    hasinvite_ = 0;
    isonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMInviteFriendItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendprofession;
        break;
      }

      // optional int32 friendprofession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendprofession_)));
          set_has_friendprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendname;
        break;
      }

      // optional string friendname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasInvite;
        break;
      }

      // optional int32 hasInvite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasInvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasinvite_)));
          set_has_hasinvite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isOnline;
        break;
      }

      // optional int32 isOnline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMInviteFriendItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }

  // optional int32 friendprofession = 2;
  if (has_friendprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendprofession(), output);
  }

  // optional string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->friendname(), output);
  }

  // optional int32 hasInvite = 4;
  if (has_hasinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hasinvite(), output);
  }

  // optional int32 isOnline = 5;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMInviteFriendItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friendid = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }

  // optional int32 friendprofession = 2;
  if (has_friendprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friendprofession(), target);
  }

  // optional string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendname(), target);
  }

  // optional int32 hasInvite = 4;
  if (has_hasinvite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hasinvite(), target);
  }

  // optional int32 isOnline = 5;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMInviteFriendItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friendid = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }

    // optional int32 friendprofession = 2;
    if (has_friendprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendprofession());
    }

    // optional string friendname = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // optional int32 hasInvite = 4;
    if (has_hasinvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasinvite());
    }

    // optional int32 isOnline = 5;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMInviteFriendItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMInviteFriendItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMInviteFriendItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMInviteFriendItem::MergeFrom(const GMInviteFriendItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_friendprofession()) {
      set_friendprofession(from.friendprofession());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_hasinvite()) {
      set_hasinvite(from.hasinvite());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMInviteFriendItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMInviteFriendItem::CopyFrom(const GMInviteFriendItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMInviteFriendItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMInviteFriendItem::Swap(GMInviteFriendItem* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(friendprofession_, other->friendprofession_);
    std::swap(friendname_, other->friendname_);
    std::swap(hasinvite_, other->hasinvite_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMInviteFriendItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMInviteFriendItem_descriptor_;
  metadata.reflection = GMInviteFriendItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_InviteFriend_Return::kCountFieldNumber;
const int GM_InviteFriend_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_InviteFriend_Return::GM_InviteFriend_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_InviteFriend_Return::InitAsDefaultInstance() {
}

GM_InviteFriend_Return::GM_InviteFriend_Return(const GM_InviteFriend_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_InviteFriend_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_InviteFriend_Return::~GM_InviteFriend_Return() {
  SharedDtor();
}

void GM_InviteFriend_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_InviteFriend_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_InviteFriend_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_InviteFriend_Return_descriptor_;
}

const GM_InviteFriend_Return& GM_InviteFriend_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_InviteFriend_Return* GM_InviteFriend_Return::default_instance_ = NULL;

GM_InviteFriend_Return* GM_InviteFriend_Return::New() const {
  return new GM_InviteFriend_Return;
}

void GM_InviteFriend_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_InviteFriend_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // repeated int32 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_InviteFriend_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated int32 item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_InviteFriend_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated int32 item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_InviteFriend_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated int32 item = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_InviteFriend_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_InviteFriend_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_InviteFriend_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_InviteFriend_Return::MergeFrom(const GM_InviteFriend_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_InviteFriend_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_InviteFriend_Return::CopyFrom(const GM_InviteFriend_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_InviteFriend_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_InviteFriend_Return::Swap(GM_InviteFriend_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_InviteFriend_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_InviteFriend_Return_descriptor_;
  metadata.reflection = GM_InviteFriend_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FlowerBless_Request::kKindFieldNumber;
#endif  // !_MSC_VER

GM_FlowerBless_Request::GM_FlowerBless_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FlowerBless_Request::InitAsDefaultInstance() {
}

GM_FlowerBless_Request::GM_FlowerBless_Request(const GM_FlowerBless_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FlowerBless_Request::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FlowerBless_Request::~GM_FlowerBless_Request() {
  SharedDtor();
}

void GM_FlowerBless_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FlowerBless_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FlowerBless_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FlowerBless_Request_descriptor_;
}

const GM_FlowerBless_Request& GM_FlowerBless_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_FlowerBless_Request* GM_FlowerBless_Request::default_instance_ = NULL;

GM_FlowerBless_Request* GM_FlowerBless_Request::New() const {
  return new GM_FlowerBless_Request;
}

void GM_FlowerBless_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FlowerBless_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FlowerBless_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FlowerBless_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FlowerBless_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FlowerBless_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FlowerBless_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FlowerBless_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FlowerBless_Request::MergeFrom(const GM_FlowerBless_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FlowerBless_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FlowerBless_Request::CopyFrom(const GM_FlowerBless_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FlowerBless_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FlowerBless_Request::Swap(GM_FlowerBless_Request* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FlowerBless_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FlowerBless_Request_descriptor_;
  metadata.reflection = GM_FlowerBless_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SimilarOperate_Return::kResultFieldNumber;
const int GM_SimilarOperate_Return::kHasCountFieldNumber;
const int GM_SimilarOperate_Return::kGetDiamondsFieldNumber;
const int GM_SimilarOperate_Return::kObjectidFieldNumber;
const int GM_SimilarOperate_Return::kObjectnumFieldNumber;
const int GM_SimilarOperate_Return::kCanHideActivityFieldNumber;
const int GM_SimilarOperate_Return::kCeleTypeFieldNumber;
const int GM_SimilarOperate_Return::kColdTimeFieldNumber;
#endif  // !_MSC_VER

GM_SimilarOperate_Return::GM_SimilarOperate_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SimilarOperate_Return::InitAsDefaultInstance() {
}

GM_SimilarOperate_Return::GM_SimilarOperate_Return(const GM_SimilarOperate_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SimilarOperate_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  hascount_ = 0;
  getdiamonds_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  canhideactivity_ = 0;
  celetype_ = 0;
  coldtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SimilarOperate_Return::~GM_SimilarOperate_Return() {
  SharedDtor();
}

void GM_SimilarOperate_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SimilarOperate_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SimilarOperate_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SimilarOperate_Return_descriptor_;
}

const GM_SimilarOperate_Return& GM_SimilarOperate_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_SimilarOperate_Return* GM_SimilarOperate_Return::default_instance_ = NULL;

GM_SimilarOperate_Return* GM_SimilarOperate_Return::New() const {
  return new GM_SimilarOperate_Return;
}

void GM_SimilarOperate_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    hascount_ = 0;
    getdiamonds_ = 0;
    objectid_ = 0;
    objectnum_ = 0;
    canhideactivity_ = 0;
    celetype_ = 0;
    coldtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SimilarOperate_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasCount;
        break;
      }

      // optional int32 hasCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hascount_)));
          set_has_hascount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getDiamonds;
        break;
      }

      // optional int32 getDiamonds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getDiamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getdiamonds_)));
          set_has_getdiamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_objectnum;
        break;
      }

      // optional int32 objectnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_canHideActivity;
        break;
      }

      // optional int32 canHideActivity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canHideActivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canhideactivity_)));
          set_has_canhideactivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_celeType;
        break;
      }

      // optional int32 celeType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_celeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &celetype_)));
          set_has_celetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coldTime;
        break;
      }

      // optional int32 coldTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coldtime_)));
          set_has_coldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SimilarOperate_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 hasCount = 2;
  if (has_hascount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hascount(), output);
  }

  // optional int32 getDiamonds = 3;
  if (has_getdiamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getdiamonds(), output);
  }

  // optional int32 objectid = 4;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objectid(), output);
  }

  // optional int32 objectnum = 5;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objectnum(), output);
  }

  // optional int32 canHideActivity = 6;
  if (has_canhideactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->canhideactivity(), output);
  }

  // optional int32 celeType = 7;
  if (has_celetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->celetype(), output);
  }

  // optional int32 coldTime = 8;
  if (has_coldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coldtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SimilarOperate_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 hasCount = 2;
  if (has_hascount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hascount(), target);
  }

  // optional int32 getDiamonds = 3;
  if (has_getdiamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->getdiamonds(), target);
  }

  // optional int32 objectid = 4;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objectid(), target);
  }

  // optional int32 objectnum = 5;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objectnum(), target);
  }

  // optional int32 canHideActivity = 6;
  if (has_canhideactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->canhideactivity(), target);
  }

  // optional int32 celeType = 7;
  if (has_celetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->celetype(), target);
  }

  // optional int32 coldTime = 8;
  if (has_coldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->coldtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SimilarOperate_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 hasCount = 2;
    if (has_hascount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hascount());
    }

    // optional int32 getDiamonds = 3;
    if (has_getdiamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getdiamonds());
    }

    // optional int32 objectid = 4;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 objectnum = 5;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

    // optional int32 canHideActivity = 6;
    if (has_canhideactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canhideactivity());
    }

    // optional int32 celeType = 7;
    if (has_celetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->celetype());
    }

    // optional int32 coldTime = 8;
    if (has_coldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coldtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SimilarOperate_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SimilarOperate_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SimilarOperate_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SimilarOperate_Return::MergeFrom(const GM_SimilarOperate_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_hascount()) {
      set_hascount(from.hascount());
    }
    if (from.has_getdiamonds()) {
      set_getdiamonds(from.getdiamonds());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
    if (from.has_canhideactivity()) {
      set_canhideactivity(from.canhideactivity());
    }
    if (from.has_celetype()) {
      set_celetype(from.celetype());
    }
    if (from.has_coldtime()) {
      set_coldtime(from.coldtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SimilarOperate_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SimilarOperate_Return::CopyFrom(const GM_SimilarOperate_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SimilarOperate_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SimilarOperate_Return::Swap(GM_SimilarOperate_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(hascount_, other->hascount_);
    std::swap(getdiamonds_, other->getdiamonds_);
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(canhideactivity_, other->canhideactivity_);
    std::swap(celetype_, other->celetype_);
    std::swap(coldtime_, other->coldtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SimilarOperate_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SimilarOperate_Return_descriptor_;
  metadata.reflection = GM_SimilarOperate_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FireWork_Request::kFirekindFieldNumber;
#endif  // !_MSC_VER

GM_FireWork_Request::GM_FireWork_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FireWork_Request::InitAsDefaultInstance() {
}

GM_FireWork_Request::GM_FireWork_Request(const GM_FireWork_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FireWork_Request::SharedCtor() {
  _cached_size_ = 0;
  firekind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FireWork_Request::~GM_FireWork_Request() {
  SharedDtor();
}

void GM_FireWork_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FireWork_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FireWork_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FireWork_Request_descriptor_;
}

const GM_FireWork_Request& GM_FireWork_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_FireWork_Request* GM_FireWork_Request::default_instance_ = NULL;

GM_FireWork_Request* GM_FireWork_Request::New() const {
  return new GM_FireWork_Request;
}

void GM_FireWork_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firekind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FireWork_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firekind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firekind_)));
          set_has_firekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FireWork_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firekind = 1;
  if (has_firekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firekind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FireWork_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firekind = 1;
  if (has_firekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firekind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FireWork_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firekind = 1;
    if (has_firekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firekind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FireWork_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FireWork_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FireWork_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FireWork_Request::MergeFrom(const GM_FireWork_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firekind()) {
      set_firekind(from.firekind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FireWork_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FireWork_Request::CopyFrom(const GM_FireWork_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FireWork_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FireWork_Request::Swap(GM_FireWork_Request* other) {
  if (other != this) {
    std::swap(firekind_, other->firekind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FireWork_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FireWork_Request_descriptor_;
  metadata.reflection = GM_FireWork_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlessRank_Return::kMyRankFieldNumber;
const int GM_BlessRank_Return::kMyBlessFieldNumber;
const int GM_BlessRank_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_BlessRank_Return::GM_BlessRank_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlessRank_Return::InitAsDefaultInstance() {
}

GM_BlessRank_Return::GM_BlessRank_Return(const GM_BlessRank_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlessRank_Return::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  mybless_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlessRank_Return::~GM_BlessRank_Return() {
  SharedDtor();
}

void GM_BlessRank_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlessRank_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlessRank_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlessRank_Return_descriptor_;
}

const GM_BlessRank_Return& GM_BlessRank_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_BlessRank_Return* GM_BlessRank_Return::default_instance_ = NULL;

GM_BlessRank_Return* GM_BlessRank_Return::New() const {
  return new GM_BlessRank_Return;
}

void GM_BlessRank_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    myrank_ = 0;
    mybless_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlessRank_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 myRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myBless;
        break;
      }

      // optional int32 myBless = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myBless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mybless_)));
          set_has_mybless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .RankItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlessRank_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 myRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myrank(), output);
  }

  // optional int32 myBless = 2;
  if (has_mybless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mybless(), output);
  }

  // repeated .RankItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlessRank_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 myRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myrank(), target);
  }

  // optional int32 myBless = 2;
  if (has_mybless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mybless(), target);
  }

  // repeated .RankItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlessRank_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 myRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional int32 myBless = 2;
    if (has_mybless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mybless());
    }

  }
  // repeated .RankItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlessRank_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlessRank_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlessRank_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlessRank_Return::MergeFrom(const GM_BlessRank_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_mybless()) {
      set_mybless(from.mybless());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlessRank_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlessRank_Return::CopyFrom(const GM_BlessRank_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlessRank_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BlessRank_Return::Swap(GM_BlessRank_Return* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    std::swap(mybless_, other->mybless_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlessRank_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlessRank_Return_descriptor_;
  metadata.reflection = GM_BlessRank_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankItem::kRankFieldNumber;
const int RankItem::kNameFieldNumber;
const int RankItem::kGetCountFieldNumber;
#endif  // !_MSC_VER

RankItem::RankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankItem::InitAsDefaultInstance() {
}

RankItem::RankItem(const RankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankItem::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankItem::~RankItem() {
  SharedDtor();
}

void RankItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankItem_descriptor_;
}

const RankItem& RankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

RankItem* RankItem::default_instance_ = NULL;

RankItem* RankItem::New() const {
  return new RankItem;
}

void RankItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    getcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getCount;
        break;
      }

      // required int32 getCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getcount_)));
          set_has_getcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 getCount = 3;
  if (has_getcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 getCount = 3;
  if (has_getcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->getcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 getCount = 3;
    if (has_getcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankItem::MergeFrom(const RankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_getcount()) {
      set_getcount(from.getcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankItem::CopyFrom(const RankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RankItem::Swap(RankItem* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(getcount_, other->getcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankItem_descriptor_;
  metadata.reflection = RankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TimeAndCount_Return::kCountFieldNumber;
const int GM_TimeAndCount_Return::kLastTimeFieldNumber;
const int GM_TimeAndCount_Return::kIsCompOnlineFieldNumber;
#endif  // !_MSC_VER

GM_TimeAndCount_Return::GM_TimeAndCount_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TimeAndCount_Return::InitAsDefaultInstance() {
}

GM_TimeAndCount_Return::GM_TimeAndCount_Return(const GM_TimeAndCount_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TimeAndCount_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  lasttime_ = 0;
  iscomponline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TimeAndCount_Return::~GM_TimeAndCount_Return() {
  SharedDtor();
}

void GM_TimeAndCount_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TimeAndCount_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TimeAndCount_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TimeAndCount_Return_descriptor_;
}

const GM_TimeAndCount_Return& GM_TimeAndCount_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_TimeAndCount_Return* GM_TimeAndCount_Return::default_instance_ = NULL;

GM_TimeAndCount_Return* GM_TimeAndCount_Return::New() const {
  return new GM_TimeAndCount_Return;
}

void GM_TimeAndCount_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    lasttime_ = 0;
    iscomponline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TimeAndCount_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isCompOnline;
        break;
      }

      // optional int32 isCompOnline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscomponline_)));
          set_has_iscomponline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TimeAndCount_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // optional int32 isCompOnline = 3;
  if (has_iscomponline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iscomponline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TimeAndCount_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // optional int32 isCompOnline = 3;
  if (has_iscomponline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iscomponline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TimeAndCount_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 isCompOnline = 3;
    if (has_iscomponline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscomponline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TimeAndCount_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TimeAndCount_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TimeAndCount_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TimeAndCount_Return::MergeFrom(const GM_TimeAndCount_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_iscomponline()) {
      set_iscomponline(from.iscomponline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TimeAndCount_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TimeAndCount_Return::CopyFrom(const GM_TimeAndCount_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TimeAndCount_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TimeAndCount_Return::Swap(GM_TimeAndCount_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(iscomponline_, other->iscomponline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TimeAndCount_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TimeAndCount_Return_descriptor_;
  metadata.reflection = GM_TimeAndCount_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ProcessData_Request::kLastTimeFieldNumber;
const int GM_ProcessData_Request::kProcessFieldNumber;
const int GM_ProcessData_Request::kItemFieldNumber;
const int GM_ProcessData_Request::kManFieldNumber;
const int GM_ProcessData_Request::kWomanFieldNumber;
const int GM_ProcessData_Request::kHasGetRedFieldNumber;
const int GM_ProcessData_Request::kIsProhibitFieldNumber;
#endif  // !_MSC_VER

GM_ProcessData_Request::GM_ProcessData_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ProcessData_Request::InitAsDefaultInstance() {
}

GM_ProcessData_Request::GM_ProcessData_Request(const GM_ProcessData_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ProcessData_Request::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = 0;
  process_ = 0;
  man_ = 0;
  woman_ = 0;
  hasgetred_ = 0;
  isprohibit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ProcessData_Request::~GM_ProcessData_Request() {
  SharedDtor();
}

void GM_ProcessData_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ProcessData_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ProcessData_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ProcessData_Request_descriptor_;
}

const GM_ProcessData_Request& GM_ProcessData_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_ProcessData_Request* GM_ProcessData_Request::default_instance_ = NULL;

GM_ProcessData_Request* GM_ProcessData_Request::New() const {
  return new GM_ProcessData_Request;
}

void GM_ProcessData_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = 0;
    process_ = 0;
    man_ = 0;
    woman_ = 0;
    hasgetred_ = 0;
    isprohibit_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ProcessData_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lastTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process;
        break;
      }

      // optional int32 process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .ColdTime item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_man;
        break;
      }

      // optional int32 man = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_man:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &man_)));
          set_has_man();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_woman;
        break;
      }

      // optional int32 woman = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_woman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woman_)));
          set_has_woman();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasGetRed;
        break;
      }

      // optional int32 hasGetRed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGetRed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasgetred_)));
          set_has_hasgetred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isProhibit;
        break;
      }

      // optional int32 isProhibit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isProhibit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isprohibit_)));
          set_has_isprohibit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ProcessData_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lastTime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lasttime(), output);
  }

  // optional int32 process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->process(), output);
  }

  // repeated .ColdTime item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional int32 man = 4;
  if (has_man()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->man(), output);
  }

  // optional int32 woman = 5;
  if (has_woman()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->woman(), output);
  }

  // optional int32 hasGetRed = 6;
  if (has_hasgetred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hasgetred(), output);
  }

  // optional int32 isProhibit = 7;
  if (has_isprohibit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isprohibit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ProcessData_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lastTime = 1;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lasttime(), target);
  }

  // optional int32 process = 2;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->process(), target);
  }

  // repeated .ColdTime item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional int32 man = 4;
  if (has_man()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->man(), target);
  }

  // optional int32 woman = 5;
  if (has_woman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->woman(), target);
  }

  // optional int32 hasGetRed = 6;
  if (has_hasgetred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hasgetred(), target);
  }

  // optional int32 isProhibit = 7;
  if (has_isprohibit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isprohibit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ProcessData_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lastTime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 process = 2;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process());
    }

    // optional int32 man = 4;
    if (has_man()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->man());
    }

    // optional int32 woman = 5;
    if (has_woman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woman());
    }

    // optional int32 hasGetRed = 6;
    if (has_hasgetred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasgetred());
    }

    // optional int32 isProhibit = 7;
    if (has_isprohibit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isprohibit());
    }

  }
  // repeated .ColdTime item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ProcessData_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ProcessData_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ProcessData_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ProcessData_Request::MergeFrom(const GM_ProcessData_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_man()) {
      set_man(from.man());
    }
    if (from.has_woman()) {
      set_woman(from.woman());
    }
    if (from.has_hasgetred()) {
      set_hasgetred(from.hasgetred());
    }
    if (from.has_isprohibit()) {
      set_isprohibit(from.isprohibit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ProcessData_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ProcessData_Request::CopyFrom(const GM_ProcessData_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ProcessData_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ProcessData_Request::Swap(GM_ProcessData_Request* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(process_, other->process_);
    item_.Swap(&other->item_);
    std::swap(man_, other->man_);
    std::swap(woman_, other->woman_);
    std::swap(hasgetred_, other->hasgetred_);
    std::swap(isprohibit_, other->isprohibit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ProcessData_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ProcessData_Request_descriptor_;
  metadata.reflection = GM_ProcessData_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColdTime::kCeleTypeFieldNumber;
const int ColdTime::kColdtimeFieldNumber;
const int ColdTime::kHasCountFieldNumber;
#endif  // !_MSC_VER

ColdTime::ColdTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColdTime::InitAsDefaultInstance() {
}

ColdTime::ColdTime(const ColdTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColdTime::SharedCtor() {
  _cached_size_ = 0;
  celetype_ = 0;
  coldtime_ = 0;
  hascount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColdTime::~ColdTime() {
  SharedDtor();
}

void ColdTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColdTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColdTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColdTime_descriptor_;
}

const ColdTime& ColdTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

ColdTime* ColdTime::default_instance_ = NULL;

ColdTime* ColdTime::New() const {
  return new ColdTime;
}

void ColdTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    celetype_ = 0;
    coldtime_ = 0;
    hascount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColdTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 celeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &celetype_)));
          set_has_celetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coldtime;
        break;
      }

      // optional int32 coldtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coldtime_)));
          set_has_coldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasCount;
        break;
      }

      // optional int32 hasCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hascount_)));
          set_has_hascount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColdTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 celeType = 1;
  if (has_celetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->celetype(), output);
  }

  // optional int32 coldtime = 2;
  if (has_coldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coldtime(), output);
  }

  // optional int32 hasCount = 3;
  if (has_hascount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hascount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColdTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 celeType = 1;
  if (has_celetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->celetype(), target);
  }

  // optional int32 coldtime = 2;
  if (has_coldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coldtime(), target);
  }

  // optional int32 hasCount = 3;
  if (has_hascount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hascount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColdTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 celeType = 1;
    if (has_celetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->celetype());
    }

    // optional int32 coldtime = 2;
    if (has_coldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coldtime());
    }

    // optional int32 hasCount = 3;
    if (has_hascount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hascount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColdTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColdTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColdTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColdTime::MergeFrom(const ColdTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_celetype()) {
      set_celetype(from.celetype());
    }
    if (from.has_coldtime()) {
      set_coldtime(from.coldtime());
    }
    if (from.has_hascount()) {
      set_hascount(from.hascount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColdTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColdTime::CopyFrom(const ColdTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColdTime::IsInitialized() const {

  return true;
}

void ColdTime::Swap(ColdTime* other) {
  if (other != this) {
    std::swap(celetype_, other->celetype_);
    std::swap(coldtime_, other->coldtime_);
    std::swap(hascount_, other->hascount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColdTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColdTime_descriptor_;
  metadata.reflection = ColdTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BigMeal_Request::kEatValueFieldNumber;
#endif  // !_MSC_VER

GM_BigMeal_Request::GM_BigMeal_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BigMeal_Request::InitAsDefaultInstance() {
}

GM_BigMeal_Request::GM_BigMeal_Request(const GM_BigMeal_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BigMeal_Request::SharedCtor() {
  _cached_size_ = 0;
  eatvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BigMeal_Request::~GM_BigMeal_Request() {
  SharedDtor();
}

void GM_BigMeal_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BigMeal_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BigMeal_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BigMeal_Request_descriptor_;
}

const GM_BigMeal_Request& GM_BigMeal_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_BigMeal_Request* GM_BigMeal_Request::default_instance_ = NULL;

GM_BigMeal_Request* GM_BigMeal_Request::New() const {
  return new GM_BigMeal_Request;
}

void GM_BigMeal_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eatvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BigMeal_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 eatValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eatvalue_)));
          set_has_eatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BigMeal_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 eatValue = 1;
  if (has_eatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eatvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BigMeal_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 eatValue = 1;
  if (has_eatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eatvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BigMeal_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 eatValue = 1;
    if (has_eatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eatvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BigMeal_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BigMeal_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BigMeal_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BigMeal_Request::MergeFrom(const GM_BigMeal_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eatvalue()) {
      set_eatvalue(from.eatvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BigMeal_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BigMeal_Request::CopyFrom(const GM_BigMeal_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BigMeal_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BigMeal_Request::Swap(GM_BigMeal_Request* other) {
  if (other != this) {
    std::swap(eatvalue_, other->eatvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BigMeal_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BigMeal_Request_descriptor_;
  metadata.reflection = GM_BigMeal_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BigMeal_Return::kResultFieldNumber;
const int GM_BigMeal_Return::kColdTimeFieldNumber;
const int GM_BigMeal_Return::kObjectidFieldNumber;
const int GM_BigMeal_Return::kObjectnumFieldNumber;
#endif  // !_MSC_VER

GM_BigMeal_Return::GM_BigMeal_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BigMeal_Return::InitAsDefaultInstance() {
}

GM_BigMeal_Return::GM_BigMeal_Return(const GM_BigMeal_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BigMeal_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  coldtime_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BigMeal_Return::~GM_BigMeal_Return() {
  SharedDtor();
}

void GM_BigMeal_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BigMeal_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BigMeal_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BigMeal_Return_descriptor_;
}

const GM_BigMeal_Return& GM_BigMeal_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_BigMeal_Return* GM_BigMeal_Return::default_instance_ = NULL;

GM_BigMeal_Return* GM_BigMeal_Return::New() const {
  return new GM_BigMeal_Return;
}

void GM_BigMeal_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    coldtime_ = 0;
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BigMeal_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coldTime;
        break;
      }

      // optional int32 coldTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coldtime_)));
          set_has_coldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objectnum;
        break;
      }

      // optional int32 objectnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BigMeal_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 coldTime = 2;
  if (has_coldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coldtime(), output);
  }

  // optional int32 objectid = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectid(), output);
  }

  // optional int32 objectnum = 4;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BigMeal_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 coldTime = 2;
  if (has_coldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coldtime(), target);
  }

  // optional int32 objectid = 3;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectid(), target);
  }

  // optional int32 objectnum = 4;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BigMeal_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 coldTime = 2;
    if (has_coldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coldtime());
    }

    // optional int32 objectid = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 objectnum = 4;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BigMeal_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BigMeal_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BigMeal_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BigMeal_Return::MergeFrom(const GM_BigMeal_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_coldtime()) {
      set_coldtime(from.coldtime());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BigMeal_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BigMeal_Return::CopyFrom(const GM_BigMeal_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BigMeal_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BigMeal_Return::Swap(GM_BigMeal_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(coldtime_, other->coldtime_);
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BigMeal_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BigMeal_Return_descriptor_;
  metadata.reflection = GM_BigMeal_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SlotMachineObject_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_SlotMachineObject_Return::GM_SlotMachineObject_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SlotMachineObject_Return::InitAsDefaultInstance() {
}

GM_SlotMachineObject_Return::GM_SlotMachineObject_Return(const GM_SlotMachineObject_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SlotMachineObject_Return::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SlotMachineObject_Return::~GM_SlotMachineObject_Return() {
  SharedDtor();
}

void GM_SlotMachineObject_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SlotMachineObject_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SlotMachineObject_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SlotMachineObject_Return_descriptor_;
}

const GM_SlotMachineObject_Return& GM_SlotMachineObject_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_SlotMachineObject_Return* GM_SlotMachineObject_Return::default_instance_ = NULL;

GM_SlotMachineObject_Return* GM_SlotMachineObject_Return::New() const {
  return new GM_SlotMachineObject_Return;
}

void GM_SlotMachineObject_Return::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SlotMachineObject_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SlotMachineObject item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SlotMachineObject_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SlotMachineObject item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SlotMachineObject_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SlotMachineObject item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SlotMachineObject_Return::ByteSize() const {
  int total_size = 0;

  // repeated .SlotMachineObject item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SlotMachineObject_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SlotMachineObject_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SlotMachineObject_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SlotMachineObject_Return::MergeFrom(const GM_SlotMachineObject_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SlotMachineObject_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SlotMachineObject_Return::CopyFrom(const GM_SlotMachineObject_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SlotMachineObject_Return::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_SlotMachineObject_Return::Swap(GM_SlotMachineObject_Return* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SlotMachineObject_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SlotMachineObject_Return_descriptor_;
  metadata.reflection = GM_SlotMachineObject_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlotMachineObject::kPlaceFieldNumber;
const int SlotMachineObject::kObjectidFieldNumber;
const int SlotMachineObject::kObjectnumFieldNumber;
#endif  // !_MSC_VER

SlotMachineObject::SlotMachineObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlotMachineObject::InitAsDefaultInstance() {
}

SlotMachineObject::SlotMachineObject(const SlotMachineObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlotMachineObject::SharedCtor() {
  _cached_size_ = 0;
  place_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotMachineObject::~SlotMachineObject() {
  SharedDtor();
}

void SlotMachineObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlotMachineObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlotMachineObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotMachineObject_descriptor_;
}

const SlotMachineObject& SlotMachineObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

SlotMachineObject* SlotMachineObject::default_instance_ = NULL;

SlotMachineObject* SlotMachineObject::New() const {
  return new SlotMachineObject;
}

void SlotMachineObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    place_ = 0;
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotMachineObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 place = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectnum;
        break;
      }

      // required int32 objectnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlotMachineObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->place(), output);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // required int32 objectnum = 3;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlotMachineObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 place = 1;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->place(), target);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // required int32 objectnum = 3;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlotMachineObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 place = 1;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 objectnum = 3;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlotMachineObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotMachineObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotMachineObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotMachineObject::MergeFrom(const SlotMachineObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotMachineObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotMachineObject::CopyFrom(const SlotMachineObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotMachineObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SlotMachineObject::Swap(SlotMachineObject* other) {
  if (other != this) {
    std::swap(place_, other->place_);
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotMachineObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotMachineObject_descriptor_;
  metadata.reflection = SlotMachineObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SlotTurn_Return::kPlaceFieldNumber;
#endif  // !_MSC_VER

GM_SlotTurn_Return::GM_SlotTurn_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SlotTurn_Return::InitAsDefaultInstance() {
}

GM_SlotTurn_Return::GM_SlotTurn_Return(const GM_SlotTurn_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SlotTurn_Return::SharedCtor() {
  _cached_size_ = 0;
  place_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SlotTurn_Return::~GM_SlotTurn_Return() {
  SharedDtor();
}

void GM_SlotTurn_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SlotTurn_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SlotTurn_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SlotTurn_Return_descriptor_;
}

const GM_SlotTurn_Return& GM_SlotTurn_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_SlotTurn_Return* GM_SlotTurn_Return::default_instance_ = NULL;

GM_SlotTurn_Return* GM_SlotTurn_Return::New() const {
  return new GM_SlotTurn_Return;
}

void GM_SlotTurn_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    place_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SlotTurn_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 place = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SlotTurn_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->place(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SlotTurn_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 place = 1;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->place(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SlotTurn_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 place = 1;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SlotTurn_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SlotTurn_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SlotTurn_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SlotTurn_Return::MergeFrom(const GM_SlotTurn_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place()) {
      set_place(from.place());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SlotTurn_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SlotTurn_Return::CopyFrom(const GM_SlotTurn_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SlotTurn_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SlotTurn_Return::Swap(GM_SlotTurn_Return* other) {
  if (other != this) {
    std::swap(place_, other->place_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SlotTurn_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SlotTurn_Return_descriptor_;
  metadata.reflection = GM_SlotTurn_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ObjectSee_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_ObjectSee_Return::GM_ObjectSee_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ObjectSee_Return::InitAsDefaultInstance() {
}

GM_ObjectSee_Return::GM_ObjectSee_Return(const GM_ObjectSee_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ObjectSee_Return::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ObjectSee_Return::~GM_ObjectSee_Return() {
  SharedDtor();
}

void GM_ObjectSee_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ObjectSee_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ObjectSee_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ObjectSee_Return_descriptor_;
}

const GM_ObjectSee_Return& GM_ObjectSee_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GM_ObjectSee_Return* GM_ObjectSee_Return::default_instance_ = NULL;

GM_ObjectSee_Return* GM_ObjectSee_Return::New() const {
  return new GM_ObjectSee_Return;
}

void GM_ObjectSee_Return::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ObjectSee_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ObjectData item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ObjectSee_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ObjectData item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ObjectSee_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ObjectData item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ObjectSee_Return::ByteSize() const {
  int total_size = 0;

  // repeated .ObjectData item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ObjectSee_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ObjectSee_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ObjectSee_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ObjectSee_Return::MergeFrom(const GM_ObjectSee_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ObjectSee_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ObjectSee_Return::CopyFrom(const GM_ObjectSee_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ObjectSee_Return::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ObjectSee_Return::Swap(GM_ObjectSee_Return* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ObjectSee_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ObjectSee_Return_descriptor_;
  metadata.reflection = GM_ObjectSee_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectData::kObjectidFieldNumber;
const int ObjectData::kObjectnumFieldNumber;
#endif  // !_MSC_VER

ObjectData::ObjectData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectData::InitAsDefaultInstance() {
}

ObjectData::ObjectData(const ObjectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectData::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectData::~ObjectData() {
  SharedDtor();
}

void ObjectData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectData_descriptor_;
}

const ObjectData& ObjectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

ObjectData* ObjectData::default_instance_ = NULL;

ObjectData* ObjectData::New() const {
  return new ObjectData;
}

void ObjectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectnum;
        break;
      }

      // required int32 objectnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required int32 objectnum = 2;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required int32 objectnum = 2;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 objectnum = 2;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectData::MergeFrom(const ObjectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectData::CopyFrom(const ObjectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ObjectData::Swap(ObjectData* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectData_descriptor_;
  metadata.reflection = ObjectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceInviteFriend::kFriendidFieldNumber;
#endif  // !_MSC_VER

InstanceInviteFriend::InstanceInviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInviteFriend::InitAsDefaultInstance() {
}

InstanceInviteFriend::InstanceInviteFriend(const InstanceInviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInviteFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInviteFriend::~InstanceInviteFriend() {
  SharedDtor();
}

void InstanceInviteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceInviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInviteFriend_descriptor_;
}

const InstanceInviteFriend& InstanceInviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

InstanceInviteFriend* InstanceInviteFriend::default_instance_ = NULL;

InstanceInviteFriend* InstanceInviteFriend::New() const {
  return new InstanceInviteFriend;
}

void InstanceInviteFriend::Clear() {
  friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_friendid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 friendid = 1;
  for (int i = 0; i < this->friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->friendid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 friendid = 1;
  for (int i = 0; i < this->friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->friendid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInviteFriend::ByteSize() const {
  int total_size = 0;

  // repeated int32 friendid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->friendid(i));
    }
    total_size += 1 * this->friendid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInviteFriend::MergeFrom(const InstanceInviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendid_.MergeFrom(from.friendid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInviteFriend::CopyFrom(const InstanceInviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInviteFriend::IsInitialized() const {

  return true;
}

void InstanceInviteFriend::Swap(InstanceInviteFriend* other) {
  if (other != this) {
    friendid_.Swap(&other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInviteFriend_descriptor_;
  metadata.reflection = InstanceInviteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMKickOutRequest::kRoleidFieldNumber;
#endif  // !_MSC_VER

GMKickOutRequest::GMKickOutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMKickOutRequest::InitAsDefaultInstance() {
}

GMKickOutRequest::GMKickOutRequest(const GMKickOutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMKickOutRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMKickOutRequest::~GMKickOutRequest() {
  SharedDtor();
}

void GMKickOutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMKickOutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMKickOutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMKickOutRequest_descriptor_;
}

const GMKickOutRequest& GMKickOutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMKickOutRequest* GMKickOutRequest::default_instance_ = NULL;

GMKickOutRequest* GMKickOutRequest::New() const {
  return new GMKickOutRequest;
}

void GMKickOutRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMKickOutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMKickOutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMKickOutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMKickOutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMKickOutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMKickOutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMKickOutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMKickOutRequest::MergeFrom(const GMKickOutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMKickOutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMKickOutRequest::CopyFrom(const GMKickOutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMKickOutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMKickOutRequest::Swap(GMKickOutRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMKickOutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMKickOutRequest_descriptor_;
  metadata.reflection = GMKickOutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMReserchDataRequest::kNameFieldNumber;
#endif  // !_MSC_VER

GMReserchDataRequest::GMReserchDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMReserchDataRequest::InitAsDefaultInstance() {
}

GMReserchDataRequest::GMReserchDataRequest(const GMReserchDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMReserchDataRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMReserchDataRequest::~GMReserchDataRequest() {
  SharedDtor();
}

void GMReserchDataRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMReserchDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMReserchDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMReserchDataRequest_descriptor_;
}

const GMReserchDataRequest& GMReserchDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMReserchDataRequest* GMReserchDataRequest::default_instance_ = NULL;

GMReserchDataRequest* GMReserchDataRequest::New() const {
  return new GMReserchDataRequest;
}

void GMReserchDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMReserchDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMReserchDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMReserchDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMReserchDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMReserchDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMReserchDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMReserchDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMReserchDataRequest::MergeFrom(const GMReserchDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMReserchDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMReserchDataRequest::CopyFrom(const GMReserchDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMReserchDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMReserchDataRequest::Swap(GMReserchDataRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMReserchDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMReserchDataRequest_descriptor_;
  metadata.reflection = GMReserchDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMReserchDataReturn::kItemFieldNumber;
#endif  // !_MSC_VER

GMReserchDataReturn::GMReserchDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMReserchDataReturn::InitAsDefaultInstance() {
}

GMReserchDataReturn::GMReserchDataReturn(const GMReserchDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMReserchDataReturn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMReserchDataReturn::~GMReserchDataReturn() {
  SharedDtor();
}

void GMReserchDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMReserchDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMReserchDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMReserchDataReturn_descriptor_;
}

const GMReserchDataReturn& GMReserchDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMReserchDataReturn* GMReserchDataReturn::default_instance_ = NULL;

GMReserchDataReturn* GMReserchDataReturn::New() const {
  return new GMReserchDataReturn;
}

void GMReserchDataReturn::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMReserchDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoleData item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMReserchDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RoleData item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMReserchDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RoleData item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMReserchDataReturn::ByteSize() const {
  int total_size = 0;

  // repeated .RoleData item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMReserchDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMReserchDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMReserchDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMReserchDataReturn::MergeFrom(const GMReserchDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMReserchDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMReserchDataReturn::CopyFrom(const GMReserchDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMReserchDataReturn::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GMReserchDataReturn::Swap(GMReserchDataReturn* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMReserchDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMReserchDataReturn_descriptor_;
  metadata.reflection = GMReserchDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleData::kIsFriendFieldNumber;
const int RoleData::kRoleidFieldNumber;
const int RoleData::kNameFieldNumber;
#endif  // !_MSC_VER

RoleData::RoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleData::InitAsDefaultInstance() {
}

RoleData::RoleData(const RoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleData::SharedCtor() {
  _cached_size_ = 0;
  isfriend_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleData::~RoleData() {
  SharedDtor();
}

void RoleData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleData_descriptor_;
}

const RoleData& RoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

RoleData* RoleData::default_instance_ = NULL;

RoleData* RoleData::New() const {
  return new RoleData;
}

void RoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfriend_ = 0;
    roleid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isFriend = 1;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isfriend(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isFriend = 1;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isfriend(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isFriend = 1;
    if (has_isfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfriend());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleData::MergeFrom(const RoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleData::CopyFrom(const RoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleData::Swap(RoleData* other) {
  if (other != this) {
    std::swap(isfriend_, other->isfriend_);
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleData_descriptor_;
  metadata.reflection = RoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMProhibitRequest::kKindFieldNumber;
#endif  // !_MSC_VER

GMProhibitRequest::GMProhibitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMProhibitRequest::InitAsDefaultInstance() {
}

GMProhibitRequest::GMProhibitRequest(const GMProhibitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMProhibitRequest::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMProhibitRequest::~GMProhibitRequest() {
  SharedDtor();
}

void GMProhibitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMProhibitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMProhibitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMProhibitRequest_descriptor_;
}

const GMProhibitRequest& GMProhibitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMProhibitRequest* GMProhibitRequest::default_instance_ = NULL;

GMProhibitRequest* GMProhibitRequest::New() const {
  return new GMProhibitRequest;
}

void GMProhibitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMProhibitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMProhibitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMProhibitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMProhibitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMProhibitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMProhibitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMProhibitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMProhibitRequest::MergeFrom(const GMProhibitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMProhibitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMProhibitRequest::CopyFrom(const GMProhibitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMProhibitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMProhibitRequest::Swap(GMProhibitRequest* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMProhibitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMProhibitRequest_descriptor_;
  metadata.reflection = GMProhibitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMManagerProceeReturn::kResultFieldNumber;
const int GMManagerProceeReturn::kRoleidFieldNumber;
#endif  // !_MSC_VER

GMManagerProceeReturn::GMManagerProceeReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMManagerProceeReturn::InitAsDefaultInstance() {
}

GMManagerProceeReturn::GMManagerProceeReturn(const GMManagerProceeReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMManagerProceeReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMManagerProceeReturn::~GMManagerProceeReturn() {
  SharedDtor();
}

void GMManagerProceeReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMManagerProceeReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMManagerProceeReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMManagerProceeReturn_descriptor_;
}

const GMManagerProceeReturn& GMManagerProceeReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMManagerProceeReturn* GMManagerProceeReturn::default_instance_ = NULL;

GMManagerProceeReturn* GMManagerProceeReturn::New() const {
  return new GMManagerProceeReturn;
}

void GMManagerProceeReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMManagerProceeReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMManagerProceeReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMManagerProceeReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMManagerProceeReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMManagerProceeReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMManagerProceeReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMManagerProceeReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMManagerProceeReturn::MergeFrom(const GMManagerProceeReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMManagerProceeReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMManagerProceeReturn::CopyFrom(const GMManagerProceeReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMManagerProceeReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMManagerProceeReturn::Swap(GMManagerProceeReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMManagerProceeReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMManagerProceeReturn_descriptor_;
  metadata.reflection = GMManagerProceeReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMWeddingChat::kRoleIdFieldNumber;
const int GMWeddingChat::kNameFieldNumber;
const int GMWeddingChat::kVipFieldNumber;
const int GMWeddingChat::kWordFieldNumber;
const int GMWeddingChat::kReceNameFieldNumber;
const int GMWeddingChat::kRepeatTimesFieldNumber;
const int GMWeddingChat::kIntervalTimeFieldNumber;
const int GMWeddingChat::kReceroleidFieldNumber;
const int GMWeddingChat::kRecevipFieldNumber;
const int GMWeddingChat::kKindFieldNumber;
const int GMWeddingChat::kProfessionFieldNumber;
#endif  // !_MSC_VER

GMWeddingChat::GMWeddingChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMWeddingChat::InitAsDefaultInstance() {
}

GMWeddingChat::GMWeddingChat(const GMWeddingChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMWeddingChat::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repeattimes_ = 0u;
  intervaltime_ = 0u;
  receroleid_ = 0;
  recevip_ = 0;
  kind_ = 0;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMWeddingChat::~GMWeddingChat() {
  SharedDtor();
}

void GMWeddingChat::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (recename_ != &::google::protobuf::internal::kEmptyString) {
    delete recename_;
  }
  if (this != default_instance_) {
  }
}

void GMWeddingChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMWeddingChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMWeddingChat_descriptor_;
}

const GMWeddingChat& GMWeddingChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMWeddingChat* GMWeddingChat::default_instance_ = NULL;

GMWeddingChat* GMWeddingChat::New() const {
  return new GMWeddingChat;
}

void GMWeddingChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    vip_ = 0;
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    if (has_recename()) {
      if (recename_ != &::google::protobuf::internal::kEmptyString) {
        recename_->clear();
      }
    }
    repeattimes_ = 0u;
    intervaltime_ = 0u;
    receroleid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recevip_ = 0;
    kind_ = 0;
    profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMWeddingChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip;
        break;
      }

      // optional int32 vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_word;
        break;
      }

      // required string word = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_receName;
        break;
      }

      // optional string receName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recename().data(), this->recename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_repeatTimes;
        break;
      }

      // optional uint32 repeatTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeattimes_)));
          set_has_repeattimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_intervalTime;
        break;
      }

      // optional uint32 intervalTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_receroleid;
        break;
      }

      // optional int32 receroleid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receroleid_)));
          set_has_receroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_recevip;
        break;
      }

      // optional int32 recevip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recevip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recevip_)));
          set_has_recevip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kind;
        break;
      }

      // optional int32 kind = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_profession;
        break;
      }

      // optional int32 profession = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMWeddingChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip(), output);
  }

  // required string word = 5;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->word(), output);
  }

  // optional string receName = 6;
  if (has_recename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recename().data(), this->recename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recename(), output);
  }

  // optional uint32 repeatTimes = 7;
  if (has_repeattimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->repeattimes(), output);
  }

  // optional uint32 intervalTime = 8;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->intervaltime(), output);
  }

  // optional int32 receroleid = 9;
  if (has_receroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->receroleid(), output);
  }

  // optional int32 recevip = 10;
  if (has_recevip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->recevip(), output);
  }

  // optional int32 kind = 11;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->kind(), output);
  }

  // optional int32 profession = 12;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMWeddingChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip(), target);
  }

  // required string word = 5;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->word(), target);
  }

  // optional string receName = 6;
  if (has_recename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recename().data(), this->recename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->recename(), target);
  }

  // optional uint32 repeatTimes = 7;
  if (has_repeattimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->repeattimes(), target);
  }

  // optional uint32 intervalTime = 8;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->intervaltime(), target);
  }

  // optional int32 receroleid = 9;
  if (has_receroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->receroleid(), target);
  }

  // optional int32 recevip = 10;
  if (has_recevip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->recevip(), target);
  }

  // optional int32 kind = 11;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->kind(), target);
  }

  // optional int32 profession = 12;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMWeddingChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 vip = 4;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // required string word = 5;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // optional string receName = 6;
    if (has_recename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recename());
    }

    // optional uint32 repeatTimes = 7;
    if (has_repeattimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeattimes());
    }

    // optional uint32 intervalTime = 8;
    if (has_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intervaltime());
    }

    // optional int32 receroleid = 9;
    if (has_receroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receroleid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 recevip = 10;
    if (has_recevip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recevip());
    }

    // optional int32 kind = 11;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // optional int32 profession = 12;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMWeddingChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMWeddingChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMWeddingChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMWeddingChat::MergeFrom(const GMWeddingChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_recename()) {
      set_recename(from.recename());
    }
    if (from.has_repeattimes()) {
      set_repeattimes(from.repeattimes());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_receroleid()) {
      set_receroleid(from.receroleid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recevip()) {
      set_recevip(from.recevip());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMWeddingChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMWeddingChat::CopyFrom(const GMWeddingChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMWeddingChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GMWeddingChat::Swap(GMWeddingChat* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(vip_, other->vip_);
    std::swap(word_, other->word_);
    std::swap(recename_, other->recename_);
    std::swap(repeattimes_, other->repeattimes_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(receroleid_, other->receroleid_);
    std::swap(recevip_, other->recevip_);
    std::swap(kind_, other->kind_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMWeddingChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMWeddingChat_descriptor_;
  metadata.reflection = GMWeddingChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGiftRequest::kBlessValueFieldNumber;
#endif  // !_MSC_VER

GMGiftRequest::GMGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGiftRequest::InitAsDefaultInstance() {
}

GMGiftRequest::GMGiftRequest(const GMGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  blessvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGiftRequest::~GMGiftRequest() {
  SharedDtor();
}

void GMGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGiftRequest_descriptor_;
}

const GMGiftRequest& GMGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wedding_2etxt();
  return *default_instance_;
}

GMGiftRequest* GMGiftRequest::default_instance_ = NULL;

GMGiftRequest* GMGiftRequest::New() const {
  return new GMGiftRequest;
}

void GMGiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blessvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blessValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessvalue_)));
          set_has_blessvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blessValue = 1;
  if (has_blessvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blessvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 blessValue = 1;
  if (has_blessvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blessvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGiftRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blessValue = 1;
    if (has_blessvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGiftRequest::MergeFrom(const GMGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blessvalue()) {
      set_blessvalue(from.blessvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGiftRequest::CopyFrom(const GMGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGiftRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMGiftRequest::Swap(GMGiftRequest* other) {
  if (other != this) {
    std::swap(blessvalue_, other->blessvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGiftRequest_descriptor_;
  metadata.reflection = GMGiftRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
