// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_fbUnlock.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_fbUnlock.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_FBUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FBUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FBChests_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FBChests_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Chests_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Chests_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5ffbUnlock_2etxt() {
  protobuf_AddDesc_SP_5ffbUnlock_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_fbUnlock.txt");
  GOOGLE_CHECK(file != NULL);
  DB_FBUnlock_descriptor_ = file->message_type(0);
  static const int DB_FBUnlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBUnlock, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBUnlock, m_data_),
  };
  DB_FBUnlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_FBUnlock_descriptor_,
      DB_FBUnlock::default_instance_,
      DB_FBUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBUnlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBUnlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_FBUnlock));
  GM_FBData_descriptor_ = file->message_type(1);
  static const int GM_FBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBData, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBData, m_starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBData, m_fightcount_),
  };
  GM_FBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FBData_descriptor_,
      GM_FBData::default_instance_,
      GM_FBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FBData));
  DB_FBChests_descriptor_ = file->message_type(2);
  static const int DB_FBChests_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBChests, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBChests, m_chests_),
  };
  DB_FBChests_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_FBChests_descriptor_,
      DB_FBChests::default_instance_,
      DB_FBChests_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBChests, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FBChests, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_FBChests));
  GM_Chests_descriptor_ = file->message_type(3);
  static const int GM_Chests_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Chests, m_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Chests, m_chestsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Chests, m_state_),
  };
  GM_Chests_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Chests_descriptor_,
      GM_Chests::default_instance_,
      GM_Chests_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Chests, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Chests, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Chests));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5ffbUnlock_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_FBUnlock_descriptor_, &DB_FBUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FBData_descriptor_, &GM_FBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_FBChests_descriptor_, &DB_FBChests::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Chests_descriptor_, &GM_Chests::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5ffbUnlock_2etxt() {
  delete DB_FBUnlock::default_instance_;
  delete DB_FBUnlock_reflection_;
  delete GM_FBData::default_instance_;
  delete GM_FBData_reflection_;
  delete DB_FBChests::default_instance_;
  delete DB_FBChests_reflection_;
  delete GM_Chests::default_instance_;
  delete GM_Chests_reflection_;
}

void protobuf_AddDesc_SP_5ffbUnlock_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SP_fbUnlock.txt\";\n\013DB_FBUnlock\022\020\n\010m_ro"
    "leid\030\001 \002(\005\022\032\n\006m_data\030\002 \003(\0132\n.GM_FBData\"C"
    "\n\tGM_FBData\022\016\n\006m_fbid\030\001 \002(\005\022\020\n\010m_starlv\030"
    "\002 \002(\005\022\024\n\014m_fightcount\030\003 \002(\005\"=\n\013DB_FBChes"
    "ts\022\020\n\010m_roleid\030\001 \002(\005\022\034\n\010m_chests\030\002 \003(\0132\n"
    ".GM_Chests\"E\n\tGM_Chests\022\023\n\013m_chapterid\030\001"
    " \001(\005\022\022\n\nm_chestsid\030\002 \001(\005\022\017\n\007m_state\030\003 \001("
    "\005", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_fbUnlock.txt", &protobuf_RegisterTypes);
  DB_FBUnlock::default_instance_ = new DB_FBUnlock();
  GM_FBData::default_instance_ = new GM_FBData();
  DB_FBChests::default_instance_ = new DB_FBChests();
  GM_Chests::default_instance_ = new GM_Chests();
  DB_FBUnlock::default_instance_->InitAsDefaultInstance();
  GM_FBData::default_instance_->InitAsDefaultInstance();
  DB_FBChests::default_instance_->InitAsDefaultInstance();
  GM_Chests::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5ffbUnlock_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5ffbUnlock_2etxt {
  StaticDescriptorInitializer_SP_5ffbUnlock_2etxt() {
    protobuf_AddDesc_SP_5ffbUnlock_2etxt();
  }
} static_descriptor_initializer_SP_5ffbUnlock_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int DB_FBUnlock::kMRoleidFieldNumber;
const int DB_FBUnlock::kMDataFieldNumber;
#endif  // !_MSC_VER

DB_FBUnlock::DB_FBUnlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_FBUnlock::InitAsDefaultInstance() {
}

DB_FBUnlock::DB_FBUnlock(const DB_FBUnlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_FBUnlock::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FBUnlock::~DB_FBUnlock() {
  SharedDtor();
}

void DB_FBUnlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FBUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FBUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FBUnlock_descriptor_;
}

const DB_FBUnlock& DB_FBUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5ffbUnlock_2etxt();
  return *default_instance_;
}

DB_FBUnlock* DB_FBUnlock::default_instance_ = NULL;

DB_FBUnlock* DB_FBUnlock::New() const {
  return new DB_FBUnlock;
}

void DB_FBUnlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_FBUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_FBData m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_FBUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_FBData m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_FBUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_FBData m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_FBUnlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_FBData m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FBUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_FBUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FBUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FBUnlock::MergeFrom(const DB_FBUnlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_FBUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FBUnlock::CopyFrom(const DB_FBUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FBUnlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void DB_FBUnlock::Swap(DB_FBUnlock* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_FBUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FBUnlock_descriptor_;
  metadata.reflection = DB_FBUnlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FBData::kMFbidFieldNumber;
const int GM_FBData::kMStarlvFieldNumber;
const int GM_FBData::kMFightcountFieldNumber;
#endif  // !_MSC_VER

GM_FBData::GM_FBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FBData::InitAsDefaultInstance() {
}

GM_FBData::GM_FBData(const GM_FBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FBData::SharedCtor() {
  _cached_size_ = 0;
  m_fbid_ = 0;
  m_starlv_ = 0;
  m_fightcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FBData::~GM_FBData() {
  SharedDtor();
}

void GM_FBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FBData_descriptor_;
}

const GM_FBData& GM_FBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5ffbUnlock_2etxt();
  return *default_instance_;
}

GM_FBData* GM_FBData::default_instance_ = NULL;

GM_FBData* GM_FBData::New() const {
  return new GM_FBData;
}

void GM_FBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbid_ = 0;
    m_starlv_ = 0;
    m_fightcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_starlv;
        break;
      }

      // required int32 m_starlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starlv_)));
          set_has_m_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_fightcount;
        break;
      }

      // required int32 m_fightcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fightcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightcount_)));
          set_has_m_fightcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fbid = 1;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbid(), output);
  }

  // required int32 m_starlv = 2;
  if (has_m_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_starlv(), output);
  }

  // required int32 m_fightcount = 3;
  if (has_m_fightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fightcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fbid = 1;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbid(), target);
  }

  // required int32 m_starlv = 2;
  if (has_m_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_starlv(), target);
  }

  // required int32 m_fightcount = 3;
  if (has_m_fightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fightcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fbid = 1;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // required int32 m_starlv = 2;
    if (has_m_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starlv());
    }

    // required int32 m_fightcount = 3;
    if (has_m_fightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FBData::MergeFrom(const GM_FBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_starlv()) {
      set_m_starlv(from.m_starlv());
    }
    if (from.has_m_fightcount()) {
      set_m_fightcount(from.m_fightcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FBData::CopyFrom(const GM_FBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_FBData::Swap(GM_FBData* other) {
  if (other != this) {
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_starlv_, other->m_starlv_);
    std::swap(m_fightcount_, other->m_fightcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FBData_descriptor_;
  metadata.reflection = GM_FBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_FBChests::kMRoleidFieldNumber;
const int DB_FBChests::kMChestsFieldNumber;
#endif  // !_MSC_VER

DB_FBChests::DB_FBChests()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_FBChests::InitAsDefaultInstance() {
}

DB_FBChests::DB_FBChests(const DB_FBChests& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_FBChests::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FBChests::~DB_FBChests() {
  SharedDtor();
}

void DB_FBChests::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FBChests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FBChests::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FBChests_descriptor_;
}

const DB_FBChests& DB_FBChests::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5ffbUnlock_2etxt();
  return *default_instance_;
}

DB_FBChests* DB_FBChests::default_instance_ = NULL;

DB_FBChests* DB_FBChests::New() const {
  return new DB_FBChests;
}

void DB_FBChests::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_chests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_FBChests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_chests;
        break;
      }

      // repeated .GM_Chests m_chests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_chests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_chests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_chests;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_FBChests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_Chests m_chests = 2;
  for (int i = 0; i < this->m_chests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_chests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_FBChests::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_Chests m_chests = 2;
  for (int i = 0; i < this->m_chests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_chests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_FBChests::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_Chests m_chests = 2;
  total_size += 1 * this->m_chests_size();
  for (int i = 0; i < this->m_chests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_chests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FBChests::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_FBChests* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FBChests*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FBChests::MergeFrom(const DB_FBChests& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_chests_.MergeFrom(from.m_chests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_FBChests::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FBChests::CopyFrom(const DB_FBChests& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FBChests::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_FBChests::Swap(DB_FBChests* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_chests_.Swap(&other->m_chests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_FBChests::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FBChests_descriptor_;
  metadata.reflection = DB_FBChests_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Chests::kMChapteridFieldNumber;
const int GM_Chests::kMChestsidFieldNumber;
const int GM_Chests::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Chests::GM_Chests()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Chests::InitAsDefaultInstance() {
}

GM_Chests::GM_Chests(const GM_Chests& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Chests::SharedCtor() {
  _cached_size_ = 0;
  m_chapterid_ = 0;
  m_chestsid_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Chests::~GM_Chests() {
  SharedDtor();
}

void GM_Chests::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Chests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Chests::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Chests_descriptor_;
}

const GM_Chests& GM_Chests::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5ffbUnlock_2etxt();
  return *default_instance_;
}

GM_Chests* GM_Chests::default_instance_ = NULL;

GM_Chests* GM_Chests::New() const {
  return new GM_Chests;
}

void GM_Chests::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chapterid_ = 0;
    m_chestsid_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Chests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_chapterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chapterid_)));
          set_has_m_chapterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_chestsid;
        break;
      }

      // optional int32 m_chestsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_chestsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chestsid_)));
          set_has_m_chestsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Chests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_chapterid = 1;
  if (has_m_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_chapterid(), output);
  }

  // optional int32 m_chestsid = 2;
  if (has_m_chestsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_chestsid(), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Chests::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_chapterid = 1;
  if (has_m_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_chapterid(), target);
  }

  // optional int32 m_chestsid = 2;
  if (has_m_chestsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_chestsid(), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Chests::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_chapterid = 1;
    if (has_m_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chapterid());
    }

    // optional int32 m_chestsid = 2;
    if (has_m_chestsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chestsid());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Chests::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Chests* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Chests*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Chests::MergeFrom(const GM_Chests& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chapterid()) {
      set_m_chapterid(from.m_chapterid());
    }
    if (from.has_m_chestsid()) {
      set_m_chestsid(from.m_chestsid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Chests::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Chests::CopyFrom(const GM_Chests& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Chests::IsInitialized() const {

  return true;
}

void GM_Chests::Swap(GM_Chests* other) {
  if (other != this) {
    std::swap(m_chapterid_, other->m_chapterid_);
    std::swap(m_chestsid_, other->m_chestsid_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Chests::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Chests_descriptor_;
  metadata.reflection = GM_Chests_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
