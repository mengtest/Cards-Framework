// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.txt

#ifndef PROTOBUF_team_2etxt__INCLUDED
#define PROTOBUF_team_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_team_2etxt();
void protobuf_AssignDesc_team_2etxt();
void protobuf_ShutdownFile_team_2etxt();

class GMTeamPerson;
class GMCreateTeam;
class GMCreateTeamResult;
class GMInviteFriendListRequest;
class GMInviteFriendList;
class GMInviteRoleInTeam;
class GMInviteRoleInTeamResult;
class GMAnswerRoleInTeam;
class GMChatRoleInTeam;
class GMAnswerRoleInTeamResult;
class GMRoleTeamNotify;
class GMKickoutTeam;
class GMKickoutTeamResult;
class GMLeaveTeam;
class GMLeaveTeamResult;
class GM_NotifyActiveOver;
class GM_NotifyInviteData;

// ===================================================================

class GMTeamPerson : public ::google::protobuf::Message {
 public:
  GMTeamPerson();
  virtual ~GMTeamPerson();

  GMTeamPerson(const GMTeamPerson& from);

  inline GMTeamPerson& operator=(const GMTeamPerson& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTeamPerson& default_instance();

  void Swap(GMTeamPerson* other);

  // implements Message ----------------------------------------------

  GMTeamPerson* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTeamPerson& from);
  void MergeFrom(const GMTeamPerson& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string rolename = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 rolelv = 3;
  inline bool has_rolelv() const;
  inline void clear_rolelv();
  static const int kRolelvFieldNumber = 3;
  inline ::google::protobuf::int32 rolelv() const;
  inline void set_rolelv(::google::protobuf::int32 value);

  // optional int32 fightvalue = 4;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightvalueFieldNumber = 4;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // optional int32 profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 mStatus = 10;
  inline bool has_mstatus() const;
  inline void clear_mstatus();
  static const int kMStatusFieldNumber = 10;
  inline ::google::protobuf::int32 mstatus() const;
  inline void set_mstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTeamPerson)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_rolelv();
  inline void clear_has_rolelv();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_mstatus();
  inline void clear_has_mstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 rolelv_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 mstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMTeamPerson* default_instance_;
};
// -------------------------------------------------------------------

class GMCreateTeam : public ::google::protobuf::Message {
 public:
  GMCreateTeam();
  virtual ~GMCreateTeam();

  GMCreateTeam(const GMCreateTeam& from);

  inline GMCreateTeam& operator=(const GMCreateTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMCreateTeam& default_instance();

  void Swap(GMCreateTeam* other);

  // implements Message ----------------------------------------------

  GMCreateTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMCreateTeam& from);
  void MergeFrom(const GMCreateTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 teamtype = 1;
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamtypeFieldNumber = 1;
  inline ::google::protobuf::int32 teamtype() const;
  inline void set_teamtype(::google::protobuf::int32 value);

  // optional int32 matchtype = 2;
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchtypeFieldNumber = 2;
  inline ::google::protobuf::int32 matchtype() const;
  inline void set_matchtype(::google::protobuf::int32 value);

  // optional int32 fbid = 3;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 3;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMCreateTeam)
 private:
  inline void set_has_teamtype();
  inline void clear_has_teamtype();
  inline void set_has_matchtype();
  inline void clear_has_matchtype();
  inline void set_has_fbid();
  inline void clear_has_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 teamtype_;
  ::google::protobuf::int32 matchtype_;
  ::google::protobuf::int32 fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMCreateTeam* default_instance_;
};
// -------------------------------------------------------------------

class GMCreateTeamResult : public ::google::protobuf::Message {
 public:
  GMCreateTeamResult();
  virtual ~GMCreateTeamResult();

  GMCreateTeamResult(const GMCreateTeamResult& from);

  inline GMCreateTeamResult& operator=(const GMCreateTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMCreateTeamResult& default_instance();

  void Swap(GMCreateTeamResult* other);

  // implements Message ----------------------------------------------

  GMCreateTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMCreateTeamResult& from);
  void MergeFrom(const GMCreateTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 teamid = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 2;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // optional int32 teamtype = 3;
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamtypeFieldNumber = 3;
  inline ::google::protobuf::int32 teamtype() const;
  inline void set_teamtype(::google::protobuf::int32 value);

  // optional int32 matchtype = 4;
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchtypeFieldNumber = 4;
  inline ::google::protobuf::int32 matchtype() const;
  inline void set_matchtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMCreateTeamResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamtype();
  inline void clear_has_teamtype();
  inline void set_has_matchtype();
  inline void clear_has_matchtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 teamtype_;
  ::google::protobuf::int32 matchtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMCreateTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class GMInviteFriendListRequest : public ::google::protobuf::Message {
 public:
  GMInviteFriendListRequest();
  virtual ~GMInviteFriendListRequest();

  GMInviteFriendListRequest(const GMInviteFriendListRequest& from);

  inline GMInviteFriendListRequest& operator=(const GMInviteFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMInviteFriendListRequest& default_instance();

  void Swap(GMInviteFriendListRequest* other);

  // implements Message ----------------------------------------------

  GMInviteFriendListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMInviteFriendListRequest& from);
  void MergeFrom(const GMInviteFriendListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMInviteFriendListRequest)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMInviteFriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GMInviteFriendList : public ::google::protobuf::Message {
 public:
  GMInviteFriendList();
  virtual ~GMInviteFriendList();

  GMInviteFriendList(const GMInviteFriendList& from);

  inline GMInviteFriendList& operator=(const GMInviteFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMInviteFriendList& default_instance();

  void Swap(GMInviteFriendList* other);

  // implements Message ----------------------------------------------

  GMInviteFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMInviteFriendList& from);
  void MergeFrom(const GMInviteFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GMTeamPerson data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GMTeamPerson& data(int index) const;
  inline ::GMTeamPerson* mutable_data(int index);
  inline ::GMTeamPerson* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:GMInviteFriendList)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GMTeamPerson > data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMInviteFriendList* default_instance_;
};
// -------------------------------------------------------------------

class GMInviteRoleInTeam : public ::google::protobuf::Message {
 public:
  GMInviteRoleInTeam();
  virtual ~GMInviteRoleInTeam();

  GMInviteRoleInTeam(const GMInviteRoleInTeam& from);

  inline GMInviteRoleInTeam& operator=(const GMInviteRoleInTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMInviteRoleInTeam& default_instance();

  void Swap(GMInviteRoleInTeam* other);

  // implements Message ----------------------------------------------

  GMInviteRoleInTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMInviteRoleInTeam& from);
  void MergeFrom(const GMInviteRoleInTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 inviteroleid = 1;
  inline bool has_inviteroleid() const;
  inline void clear_inviteroleid();
  static const int kInviteroleidFieldNumber = 1;
  inline ::google::protobuf::int32 inviteroleid() const;
  inline void set_inviteroleid(::google::protobuf::int32 value);

  // optional string inviterolename = 2;
  inline bool has_inviterolename() const;
  inline void clear_inviterolename();
  static const int kInviterolenameFieldNumber = 2;
  inline const ::std::string& inviterolename() const;
  inline void set_inviterolename(const ::std::string& value);
  inline void set_inviterolename(const char* value);
  inline void set_inviterolename(const char* value, size_t size);
  inline ::std::string* mutable_inviterolename();
  inline ::std::string* release_inviterolename();
  inline void set_allocated_inviterolename(::std::string* inviterolename);

  // required int32 beinvitedroleid = 3;
  inline bool has_beinvitedroleid() const;
  inline void clear_beinvitedroleid();
  static const int kBeinvitedroleidFieldNumber = 3;
  inline ::google::protobuf::int32 beinvitedroleid() const;
  inline void set_beinvitedroleid(::google::protobuf::int32 value);

  // optional string beinvitedrolename = 4;
  inline bool has_beinvitedrolename() const;
  inline void clear_beinvitedrolename();
  static const int kBeinvitedrolenameFieldNumber = 4;
  inline const ::std::string& beinvitedrolename() const;
  inline void set_beinvitedrolename(const ::std::string& value);
  inline void set_beinvitedrolename(const char* value);
  inline void set_beinvitedrolename(const char* value, size_t size);
  inline ::std::string* mutable_beinvitedrolename();
  inline ::std::string* release_beinvitedrolename();
  inline void set_allocated_beinvitedrolename(::std::string* beinvitedrolename);

  // required int32 teamid = 5;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 5;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // required int32 teamtype = 6;
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamtypeFieldNumber = 6;
  inline ::google::protobuf::int32 teamtype() const;
  inline void set_teamtype(::google::protobuf::int32 value);

  // required int32 fbid = 7;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 7;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // optional int32 timemark = 10;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 10;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMInviteRoleInTeam)
 private:
  inline void set_has_inviteroleid();
  inline void clear_has_inviteroleid();
  inline void set_has_inviterolename();
  inline void clear_has_inviterolename();
  inline void set_has_beinvitedroleid();
  inline void clear_has_beinvitedroleid();
  inline void set_has_beinvitedrolename();
  inline void clear_has_beinvitedrolename();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamtype();
  inline void clear_has_teamtype();
  inline void set_has_fbid();
  inline void clear_has_fbid();
  inline void set_has_timemark();
  inline void clear_has_timemark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* inviterolename_;
  ::google::protobuf::int32 inviteroleid_;
  ::google::protobuf::int32 beinvitedroleid_;
  ::std::string* beinvitedrolename_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 teamtype_;
  ::google::protobuf::int32 fbid_;
  ::google::protobuf::int32 timemark_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMInviteRoleInTeam* default_instance_;
};
// -------------------------------------------------------------------

class GMInviteRoleInTeamResult : public ::google::protobuf::Message {
 public:
  GMInviteRoleInTeamResult();
  virtual ~GMInviteRoleInTeamResult();

  GMInviteRoleInTeamResult(const GMInviteRoleInTeamResult& from);

  inline GMInviteRoleInTeamResult& operator=(const GMInviteRoleInTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMInviteRoleInTeamResult& default_instance();

  void Swap(GMInviteRoleInTeamResult* other);

  // implements Message ----------------------------------------------

  GMInviteRoleInTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMInviteRoleInTeamResult& from);
  void MergeFrom(const GMInviteRoleInTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // required int32 beinvitedroleid = 2;
  inline bool has_beinvitedroleid() const;
  inline void clear_beinvitedroleid();
  static const int kBeinvitedroleidFieldNumber = 2;
  inline ::google::protobuf::int32 beinvitedroleid() const;
  inline void set_beinvitedroleid(::google::protobuf::int32 value);

  // optional string beinvitedrolename = 3;
  inline bool has_beinvitedrolename() const;
  inline void clear_beinvitedrolename();
  static const int kBeinvitedrolenameFieldNumber = 3;
  inline const ::std::string& beinvitedrolename() const;
  inline void set_beinvitedrolename(const ::std::string& value);
  inline void set_beinvitedrolename(const char* value);
  inline void set_beinvitedrolename(const char* value, size_t size);
  inline ::std::string* mutable_beinvitedrolename();
  inline ::std::string* release_beinvitedrolename();
  inline void set_allocated_beinvitedrolename(::std::string* beinvitedrolename);

  // required int32 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMInviteRoleInTeamResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_beinvitedroleid();
  inline void clear_has_beinvitedroleid();
  inline void set_has_beinvitedrolename();
  inline void clear_has_beinvitedrolename();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 beinvitedroleid_;
  ::std::string* beinvitedrolename_;
  ::google::protobuf::int32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMInviteRoleInTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class GMAnswerRoleInTeam : public ::google::protobuf::Message {
 public:
  GMAnswerRoleInTeam();
  virtual ~GMAnswerRoleInTeam();

  GMAnswerRoleInTeam(const GMAnswerRoleInTeam& from);

  inline GMAnswerRoleInTeam& operator=(const GMAnswerRoleInTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMAnswerRoleInTeam& default_instance();

  void Swap(GMAnswerRoleInTeam* other);

  // implements Message ----------------------------------------------

  GMAnswerRoleInTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMAnswerRoleInTeam& from);
  void MergeFrom(const GMAnswerRoleInTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 answerresult = 1;
  inline bool has_answerresult() const;
  inline void clear_answerresult();
  static const int kAnswerresultFieldNumber = 1;
  inline ::google::protobuf::int32 answerresult() const;
  inline void set_answerresult(::google::protobuf::int32 value);

  // required int32 inviteroleid = 2;
  inline bool has_inviteroleid() const;
  inline void clear_inviteroleid();
  static const int kInviteroleidFieldNumber = 2;
  inline ::google::protobuf::int32 inviteroleid() const;
  inline void set_inviteroleid(::google::protobuf::int32 value);

  // optional string inviterolename = 3;
  inline bool has_inviterolename() const;
  inline void clear_inviterolename();
  static const int kInviterolenameFieldNumber = 3;
  inline const ::std::string& inviterolename() const;
  inline void set_inviterolename(const ::std::string& value);
  inline void set_inviterolename(const char* value);
  inline void set_inviterolename(const char* value, size_t size);
  inline ::std::string* mutable_inviterolename();
  inline ::std::string* release_inviterolename();
  inline void set_allocated_inviterolename(::std::string* inviterolename);

  // required int32 beinvitedroleid = 4;
  inline bool has_beinvitedroleid() const;
  inline void clear_beinvitedroleid();
  static const int kBeinvitedroleidFieldNumber = 4;
  inline ::google::protobuf::int32 beinvitedroleid() const;
  inline void set_beinvitedroleid(::google::protobuf::int32 value);

  // optional string beinvitedrolename = 5;
  inline bool has_beinvitedrolename() const;
  inline void clear_beinvitedrolename();
  static const int kBeinvitedrolenameFieldNumber = 5;
  inline const ::std::string& beinvitedrolename() const;
  inline void set_beinvitedrolename(const ::std::string& value);
  inline void set_beinvitedrolename(const char* value);
  inline void set_beinvitedrolename(const char* value, size_t size);
  inline ::std::string* mutable_beinvitedrolename();
  inline ::std::string* release_beinvitedrolename();
  inline void set_allocated_beinvitedrolename(::std::string* beinvitedrolename);

  // required int32 teamid = 6;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 6;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // required int32 teamtype = 7;
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamtypeFieldNumber = 7;
  inline ::google::protobuf::int32 teamtype() const;
  inline void set_teamtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMAnswerRoleInTeam)
 private:
  inline void set_has_answerresult();
  inline void clear_has_answerresult();
  inline void set_has_inviteroleid();
  inline void clear_has_inviteroleid();
  inline void set_has_inviterolename();
  inline void clear_has_inviterolename();
  inline void set_has_beinvitedroleid();
  inline void clear_has_beinvitedroleid();
  inline void set_has_beinvitedrolename();
  inline void clear_has_beinvitedrolename();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamtype();
  inline void clear_has_teamtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 answerresult_;
  ::google::protobuf::int32 inviteroleid_;
  ::std::string* inviterolename_;
  ::std::string* beinvitedrolename_;
  ::google::protobuf::int32 beinvitedroleid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 teamtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMAnswerRoleInTeam* default_instance_;
};
// -------------------------------------------------------------------

class GMChatRoleInTeam : public ::google::protobuf::Message {
 public:
  GMChatRoleInTeam();
  virtual ~GMChatRoleInTeam();

  GMChatRoleInTeam(const GMChatRoleInTeam& from);

  inline GMChatRoleInTeam& operator=(const GMChatRoleInTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMChatRoleInTeam& default_instance();

  void Swap(GMChatRoleInTeam* other);

  // implements Message ----------------------------------------------

  GMChatRoleInTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMChatRoleInTeam& from);
  void MergeFrom(const GMChatRoleInTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 answerresult = 1;
  inline bool has_answerresult() const;
  inline void clear_answerresult();
  static const int kAnswerresultFieldNumber = 1;
  inline ::google::protobuf::int32 answerresult() const;
  inline void set_answerresult(::google::protobuf::int32 value);

  // required int32 roleid = 6;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 6;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 teamid = 7;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 7;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMChatRoleInTeam)
 private:
  inline void set_has_answerresult();
  inline void clear_has_answerresult();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 answerresult_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMChatRoleInTeam* default_instance_;
};
// -------------------------------------------------------------------

class GMAnswerRoleInTeamResult : public ::google::protobuf::Message {
 public:
  GMAnswerRoleInTeamResult();
  virtual ~GMAnswerRoleInTeamResult();

  GMAnswerRoleInTeamResult(const GMAnswerRoleInTeamResult& from);

  inline GMAnswerRoleInTeamResult& operator=(const GMAnswerRoleInTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMAnswerRoleInTeamResult& default_instance();

  void Swap(GMAnswerRoleInTeamResult* other);

  // implements Message ----------------------------------------------

  GMAnswerRoleInTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMAnswerRoleInTeamResult& from);
  void MergeFrom(const GMAnswerRoleInTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 teamid = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 2;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // optional int32 fbid = 3;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 3;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // optional int32 teamtype = 4;
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamtypeFieldNumber = 4;
  inline ::google::protobuf::int32 teamtype() const;
  inline void set_teamtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMAnswerRoleInTeamResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_fbid();
  inline void clear_has_fbid();
  inline void set_has_teamtype();
  inline void clear_has_teamtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 fbid_;
  ::google::protobuf::int32 teamtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMAnswerRoleInTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class GMRoleTeamNotify : public ::google::protobuf::Message {
 public:
  GMRoleTeamNotify();
  virtual ~GMRoleTeamNotify();

  GMRoleTeamNotify(const GMRoleTeamNotify& from);

  inline GMRoleTeamNotify& operator=(const GMRoleTeamNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMRoleTeamNotify& default_instance();

  void Swap(GMRoleTeamNotify* other);

  // implements Message ----------------------------------------------

  GMRoleTeamNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMRoleTeamNotify& from);
  void MergeFrom(const GMRoleTeamNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 m_teamleader = 2;
  inline bool has_m_teamleader() const;
  inline void clear_m_teamleader();
  static const int kMTeamleaderFieldNumber = 2;
  inline ::google::protobuf::int32 m_teamleader() const;
  inline void set_m_teamleader(::google::protobuf::int32 value);

  // repeated .GMTeamPerson m_person = 3;
  inline int m_person_size() const;
  inline void clear_m_person();
  static const int kMPersonFieldNumber = 3;
  inline const ::GMTeamPerson& m_person(int index) const;
  inline ::GMTeamPerson* mutable_m_person(int index);
  inline ::GMTeamPerson* add_m_person();
  inline const ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >&
      m_person() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >*
      mutable_m_person();

  // @@protoc_insertion_point(class_scope:GMRoleTeamNotify)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_teamleader();
  inline void clear_has_m_teamleader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_teamleader_;
  ::google::protobuf::RepeatedPtrField< ::GMTeamPerson > m_person_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMRoleTeamNotify* default_instance_;
};
// -------------------------------------------------------------------

class GMKickoutTeam : public ::google::protobuf::Message {
 public:
  GMKickoutTeam();
  virtual ~GMKickoutTeam();

  GMKickoutTeam(const GMKickoutTeam& from);

  inline GMKickoutTeam& operator=(const GMKickoutTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMKickoutTeam& default_instance();

  void Swap(GMKickoutTeam* other);

  // implements Message ----------------------------------------------

  GMKickoutTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMKickoutTeam& from);
  void MergeFrom(const GMKickoutTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_outroleid = 1;
  inline bool has_m_outroleid() const;
  inline void clear_m_outroleid();
  static const int kMOutroleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_outroleid() const;
  inline void set_m_outroleid(::google::protobuf::int32 value);

  // required int32 m_teamid = 2;
  inline bool has_m_teamid() const;
  inline void clear_m_teamid();
  static const int kMTeamidFieldNumber = 2;
  inline ::google::protobuf::int32 m_teamid() const;
  inline void set_m_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMKickoutTeam)
 private:
  inline void set_has_m_outroleid();
  inline void clear_has_m_outroleid();
  inline void set_has_m_teamid();
  inline void clear_has_m_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_outroleid_;
  ::google::protobuf::int32 m_teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMKickoutTeam* default_instance_;
};
// -------------------------------------------------------------------

class GMKickoutTeamResult : public ::google::protobuf::Message {
 public:
  GMKickoutTeamResult();
  virtual ~GMKickoutTeamResult();

  GMKickoutTeamResult(const GMKickoutTeamResult& from);

  inline GMKickoutTeamResult& operator=(const GMKickoutTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMKickoutTeamResult& default_instance();

  void Swap(GMKickoutTeamResult* other);

  // implements Message ----------------------------------------------

  GMKickoutTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMKickoutTeamResult& from);
  void MergeFrom(const GMKickoutTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // required int32 m_outroleid = 2;
  inline bool has_m_outroleid() const;
  inline void clear_m_outroleid();
  static const int kMOutroleidFieldNumber = 2;
  inline ::google::protobuf::int32 m_outroleid() const;
  inline void set_m_outroleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMKickoutTeamResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_outroleid();
  inline void clear_has_m_outroleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_outroleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMKickoutTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class GMLeaveTeam : public ::google::protobuf::Message {
 public:
  GMLeaveTeam();
  virtual ~GMLeaveTeam();

  GMLeaveTeam(const GMLeaveTeam& from);

  inline GMLeaveTeam& operator=(const GMLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMLeaveTeam& default_instance();

  void Swap(GMLeaveTeam* other);

  // implements Message ----------------------------------------------

  GMLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMLeaveTeam& from);
  void MergeFrom(const GMLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_teamid = 1;
  inline bool has_m_teamid() const;
  inline void clear_m_teamid();
  static const int kMTeamidFieldNumber = 1;
  inline ::google::protobuf::int32 m_teamid() const;
  inline void set_m_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMLeaveTeam)
 private:
  inline void set_has_m_teamid();
  inline void clear_has_m_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class GMLeaveTeamResult : public ::google::protobuf::Message {
 public:
  GMLeaveTeamResult();
  virtual ~GMLeaveTeamResult();

  GMLeaveTeamResult(const GMLeaveTeamResult& from);

  inline GMLeaveTeamResult& operator=(const GMLeaveTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMLeaveTeamResult& default_instance();

  void Swap(GMLeaveTeamResult* other);

  // implements Message ----------------------------------------------

  GMLeaveTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMLeaveTeamResult& from);
  void MergeFrom(const GMLeaveTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMLeaveTeamResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GMLeaveTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class GM_NotifyActiveOver : public ::google::protobuf::Message {
 public:
  GM_NotifyActiveOver();
  virtual ~GM_NotifyActiveOver();

  GM_NotifyActiveOver(const GM_NotifyActiveOver& from);

  inline GM_NotifyActiveOver& operator=(const GM_NotifyActiveOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_NotifyActiveOver& default_instance();

  void Swap(GM_NotifyActiveOver* other);

  // implements Message ----------------------------------------------

  GM_NotifyActiveOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_NotifyActiveOver& from);
  void MergeFrom(const GM_NotifyActiveOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_nFbTypeId = 4;
  inline bool has_m_nfbtypeid() const;
  inline void clear_m_nfbtypeid();
  static const int kMNFbTypeIdFieldNumber = 4;
  inline ::google::protobuf::int32 m_nfbtypeid() const;
  inline void set_m_nfbtypeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_NotifyActiveOver)
 private:
  inline void set_has_m_nfbtypeid();
  inline void clear_has_m_nfbtypeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_nfbtypeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GM_NotifyActiveOver* default_instance_;
};
// -------------------------------------------------------------------

class GM_NotifyInviteData : public ::google::protobuf::Message {
 public:
  GM_NotifyInviteData();
  virtual ~GM_NotifyInviteData();

  GM_NotifyInviteData(const GM_NotifyInviteData& from);

  inline GM_NotifyInviteData& operator=(const GM_NotifyInviteData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_NotifyInviteData& default_instance();

  void Swap(GM_NotifyInviteData* other);

  // implements Message ----------------------------------------------

  GM_NotifyInviteData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_NotifyInviteData& from);
  void MergeFrom(const GM_NotifyInviteData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GMInviteRoleInTeam mdata = 2;
  inline int mdata_size() const;
  inline void clear_mdata();
  static const int kMdataFieldNumber = 2;
  inline const ::GMInviteRoleInTeam& mdata(int index) const;
  inline ::GMInviteRoleInTeam* mutable_mdata(int index);
  inline ::GMInviteRoleInTeam* add_mdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GMInviteRoleInTeam >&
      mdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMInviteRoleInTeam >*
      mutable_mdata();

  // @@protoc_insertion_point(class_scope:GM_NotifyInviteData)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GMInviteRoleInTeam > mdata_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_team_2etxt();
  friend void protobuf_AssignDesc_team_2etxt();
  friend void protobuf_ShutdownFile_team_2etxt();

  void InitAsDefaultInstance();
  static GM_NotifyInviteData* default_instance_;
};
// ===================================================================


// ===================================================================

// GMTeamPerson

// required int32 roleID = 1;
inline bool GMTeamPerson::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTeamPerson::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTeamPerson::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTeamPerson::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GMTeamPerson::roleid() const {
  return roleid_;
}
inline void GMTeamPerson::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string rolename = 2;
inline bool GMTeamPerson::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTeamPerson::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTeamPerson::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTeamPerson::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& GMTeamPerson::rolename() const {
  return *rolename_;
}
inline void GMTeamPerson::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GMTeamPerson::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GMTeamPerson::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTeamPerson::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* GMTeamPerson::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTeamPerson::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rolelv = 3;
inline bool GMTeamPerson::has_rolelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTeamPerson::set_has_rolelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTeamPerson::clear_has_rolelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTeamPerson::clear_rolelv() {
  rolelv_ = 0;
  clear_has_rolelv();
}
inline ::google::protobuf::int32 GMTeamPerson::rolelv() const {
  return rolelv_;
}
inline void GMTeamPerson::set_rolelv(::google::protobuf::int32 value) {
  set_has_rolelv();
  rolelv_ = value;
}

// optional int32 fightvalue = 4;
inline bool GMTeamPerson::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTeamPerson::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTeamPerson::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTeamPerson::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 GMTeamPerson::fightvalue() const {
  return fightvalue_;
}
inline void GMTeamPerson::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
}

// optional int32 profession = 5;
inline bool GMTeamPerson::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTeamPerson::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTeamPerson::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTeamPerson::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 GMTeamPerson::profession() const {
  return profession_;
}
inline void GMTeamPerson::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 mStatus = 10;
inline bool GMTeamPerson::has_mstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMTeamPerson::set_has_mstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMTeamPerson::clear_has_mstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMTeamPerson::clear_mstatus() {
  mstatus_ = 0;
  clear_has_mstatus();
}
inline ::google::protobuf::int32 GMTeamPerson::mstatus() const {
  return mstatus_;
}
inline void GMTeamPerson::set_mstatus(::google::protobuf::int32 value) {
  set_has_mstatus();
  mstatus_ = value;
}

// -------------------------------------------------------------------

// GMCreateTeam

// required int32 teamtype = 1;
inline bool GMCreateTeam::has_teamtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMCreateTeam::set_has_teamtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMCreateTeam::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMCreateTeam::clear_teamtype() {
  teamtype_ = 0;
  clear_has_teamtype();
}
inline ::google::protobuf::int32 GMCreateTeam::teamtype() const {
  return teamtype_;
}
inline void GMCreateTeam::set_teamtype(::google::protobuf::int32 value) {
  set_has_teamtype();
  teamtype_ = value;
}

// optional int32 matchtype = 2;
inline bool GMCreateTeam::has_matchtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMCreateTeam::set_has_matchtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMCreateTeam::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMCreateTeam::clear_matchtype() {
  matchtype_ = 0;
  clear_has_matchtype();
}
inline ::google::protobuf::int32 GMCreateTeam::matchtype() const {
  return matchtype_;
}
inline void GMCreateTeam::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
}

// optional int32 fbid = 3;
inline bool GMCreateTeam::has_fbid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMCreateTeam::set_has_fbid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMCreateTeam::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMCreateTeam::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GMCreateTeam::fbid() const {
  return fbid_;
}
inline void GMCreateTeam::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// -------------------------------------------------------------------

// GMCreateTeamResult

// required int32 m_result = 1;
inline bool GMCreateTeamResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMCreateTeamResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMCreateTeamResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMCreateTeamResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMCreateTeamResult::m_result() const {
  return m_result_;
}
inline void GMCreateTeamResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 teamid = 2;
inline bool GMCreateTeamResult::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMCreateTeamResult::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMCreateTeamResult::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMCreateTeamResult::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 GMCreateTeamResult::teamid() const {
  return teamid_;
}
inline void GMCreateTeamResult::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 teamtype = 3;
inline bool GMCreateTeamResult::has_teamtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMCreateTeamResult::set_has_teamtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMCreateTeamResult::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMCreateTeamResult::clear_teamtype() {
  teamtype_ = 0;
  clear_has_teamtype();
}
inline ::google::protobuf::int32 GMCreateTeamResult::teamtype() const {
  return teamtype_;
}
inline void GMCreateTeamResult::set_teamtype(::google::protobuf::int32 value) {
  set_has_teamtype();
  teamtype_ = value;
}

// optional int32 matchtype = 4;
inline bool GMCreateTeamResult::has_matchtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMCreateTeamResult::set_has_matchtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMCreateTeamResult::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMCreateTeamResult::clear_matchtype() {
  matchtype_ = 0;
  clear_has_matchtype();
}
inline ::google::protobuf::int32 GMCreateTeamResult::matchtype() const {
  return matchtype_;
}
inline void GMCreateTeamResult::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
}

// -------------------------------------------------------------------

// GMInviteFriendListRequest

// required int32 fbid = 1;
inline bool GMInviteFriendListRequest::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMInviteFriendListRequest::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMInviteFriendListRequest::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMInviteFriendListRequest::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GMInviteFriendListRequest::fbid() const {
  return fbid_;
}
inline void GMInviteFriendListRequest::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// -------------------------------------------------------------------

// GMInviteFriendList

// required int32 count = 1;
inline bool GMInviteFriendList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMInviteFriendList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMInviteFriendList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMInviteFriendList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GMInviteFriendList::count() const {
  return count_;
}
inline void GMInviteFriendList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GMTeamPerson data = 2;
inline int GMInviteFriendList::data_size() const {
  return data_.size();
}
inline void GMInviteFriendList::clear_data() {
  data_.Clear();
}
inline const ::GMTeamPerson& GMInviteFriendList::data(int index) const {
  return data_.Get(index);
}
inline ::GMTeamPerson* GMInviteFriendList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GMTeamPerson* GMInviteFriendList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >&
GMInviteFriendList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >*
GMInviteFriendList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GMInviteRoleInTeam

// required int32 inviteroleid = 1;
inline bool GMInviteRoleInTeam::has_inviteroleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMInviteRoleInTeam::set_has_inviteroleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMInviteRoleInTeam::clear_has_inviteroleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMInviteRoleInTeam::clear_inviteroleid() {
  inviteroleid_ = 0;
  clear_has_inviteroleid();
}
inline ::google::protobuf::int32 GMInviteRoleInTeam::inviteroleid() const {
  return inviteroleid_;
}
inline void GMInviteRoleInTeam::set_inviteroleid(::google::protobuf::int32 value) {
  set_has_inviteroleid();
  inviteroleid_ = value;
}

// optional string inviterolename = 2;
inline bool GMInviteRoleInTeam::has_inviterolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMInviteRoleInTeam::set_has_inviterolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMInviteRoleInTeam::clear_has_inviterolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMInviteRoleInTeam::clear_inviterolename() {
  if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
    inviterolename_->clear();
  }
  clear_has_inviterolename();
}
inline const ::std::string& GMInviteRoleInTeam::inviterolename() const {
  return *inviterolename_;
}
inline void GMInviteRoleInTeam::set_inviterolename(const ::std::string& value) {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  inviterolename_->assign(value);
}
inline void GMInviteRoleInTeam::set_inviterolename(const char* value) {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  inviterolename_->assign(value);
}
inline void GMInviteRoleInTeam::set_inviterolename(const char* value, size_t size) {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  inviterolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMInviteRoleInTeam::mutable_inviterolename() {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  return inviterolename_;
}
inline ::std::string* GMInviteRoleInTeam::release_inviterolename() {
  clear_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inviterolename_;
    inviterolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMInviteRoleInTeam::set_allocated_inviterolename(::std::string* inviterolename) {
  if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
    delete inviterolename_;
  }
  if (inviterolename) {
    set_has_inviterolename();
    inviterolename_ = inviterolename;
  } else {
    clear_has_inviterolename();
    inviterolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 beinvitedroleid = 3;
inline bool GMInviteRoleInTeam::has_beinvitedroleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMInviteRoleInTeam::set_has_beinvitedroleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMInviteRoleInTeam::clear_has_beinvitedroleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMInviteRoleInTeam::clear_beinvitedroleid() {
  beinvitedroleid_ = 0;
  clear_has_beinvitedroleid();
}
inline ::google::protobuf::int32 GMInviteRoleInTeam::beinvitedroleid() const {
  return beinvitedroleid_;
}
inline void GMInviteRoleInTeam::set_beinvitedroleid(::google::protobuf::int32 value) {
  set_has_beinvitedroleid();
  beinvitedroleid_ = value;
}

// optional string beinvitedrolename = 4;
inline bool GMInviteRoleInTeam::has_beinvitedrolename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMInviteRoleInTeam::set_has_beinvitedrolename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMInviteRoleInTeam::clear_has_beinvitedrolename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMInviteRoleInTeam::clear_beinvitedrolename() {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_->clear();
  }
  clear_has_beinvitedrolename();
}
inline const ::std::string& GMInviteRoleInTeam::beinvitedrolename() const {
  return *beinvitedrolename_;
}
inline void GMInviteRoleInTeam::set_beinvitedrolename(const ::std::string& value) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(value);
}
inline void GMInviteRoleInTeam::set_beinvitedrolename(const char* value) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(value);
}
inline void GMInviteRoleInTeam::set_beinvitedrolename(const char* value, size_t size) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMInviteRoleInTeam::mutable_beinvitedrolename() {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  return beinvitedrolename_;
}
inline ::std::string* GMInviteRoleInTeam::release_beinvitedrolename() {
  clear_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beinvitedrolename_;
    beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMInviteRoleInTeam::set_allocated_beinvitedrolename(::std::string* beinvitedrolename) {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete beinvitedrolename_;
  }
  if (beinvitedrolename) {
    set_has_beinvitedrolename();
    beinvitedrolename_ = beinvitedrolename;
  } else {
    clear_has_beinvitedrolename();
    beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 teamid = 5;
inline bool GMInviteRoleInTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMInviteRoleInTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMInviteRoleInTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMInviteRoleInTeam::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 GMInviteRoleInTeam::teamid() const {
  return teamid_;
}
inline void GMInviteRoleInTeam::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// required int32 teamtype = 6;
inline bool GMInviteRoleInTeam::has_teamtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMInviteRoleInTeam::set_has_teamtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMInviteRoleInTeam::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMInviteRoleInTeam::clear_teamtype() {
  teamtype_ = 0;
  clear_has_teamtype();
}
inline ::google::protobuf::int32 GMInviteRoleInTeam::teamtype() const {
  return teamtype_;
}
inline void GMInviteRoleInTeam::set_teamtype(::google::protobuf::int32 value) {
  set_has_teamtype();
  teamtype_ = value;
}

// required int32 fbid = 7;
inline bool GMInviteRoleInTeam::has_fbid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GMInviteRoleInTeam::set_has_fbid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GMInviteRoleInTeam::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GMInviteRoleInTeam::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GMInviteRoleInTeam::fbid() const {
  return fbid_;
}
inline void GMInviteRoleInTeam::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// optional int32 timemark = 10;
inline bool GMInviteRoleInTeam::has_timemark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GMInviteRoleInTeam::set_has_timemark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GMInviteRoleInTeam::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GMInviteRoleInTeam::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 GMInviteRoleInTeam::timemark() const {
  return timemark_;
}
inline void GMInviteRoleInTeam::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// -------------------------------------------------------------------

// GMInviteRoleInTeamResult

// required int32 m_result = 1;
inline bool GMInviteRoleInTeamResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMInviteRoleInTeamResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMInviteRoleInTeamResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMInviteRoleInTeamResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMInviteRoleInTeamResult::m_result() const {
  return m_result_;
}
inline void GMInviteRoleInTeamResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// required int32 beinvitedroleid = 2;
inline bool GMInviteRoleInTeamResult::has_beinvitedroleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMInviteRoleInTeamResult::set_has_beinvitedroleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMInviteRoleInTeamResult::clear_has_beinvitedroleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMInviteRoleInTeamResult::clear_beinvitedroleid() {
  beinvitedroleid_ = 0;
  clear_has_beinvitedroleid();
}
inline ::google::protobuf::int32 GMInviteRoleInTeamResult::beinvitedroleid() const {
  return beinvitedroleid_;
}
inline void GMInviteRoleInTeamResult::set_beinvitedroleid(::google::protobuf::int32 value) {
  set_has_beinvitedroleid();
  beinvitedroleid_ = value;
}

// optional string beinvitedrolename = 3;
inline bool GMInviteRoleInTeamResult::has_beinvitedrolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMInviteRoleInTeamResult::set_has_beinvitedrolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMInviteRoleInTeamResult::clear_has_beinvitedrolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMInviteRoleInTeamResult::clear_beinvitedrolename() {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_->clear();
  }
  clear_has_beinvitedrolename();
}
inline const ::std::string& GMInviteRoleInTeamResult::beinvitedrolename() const {
  return *beinvitedrolename_;
}
inline void GMInviteRoleInTeamResult::set_beinvitedrolename(const ::std::string& value) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(value);
}
inline void GMInviteRoleInTeamResult::set_beinvitedrolename(const char* value) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(value);
}
inline void GMInviteRoleInTeamResult::set_beinvitedrolename(const char* value, size_t size) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMInviteRoleInTeamResult::mutable_beinvitedrolename() {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  return beinvitedrolename_;
}
inline ::std::string* GMInviteRoleInTeamResult::release_beinvitedrolename() {
  clear_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beinvitedrolename_;
    beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMInviteRoleInTeamResult::set_allocated_beinvitedrolename(::std::string* beinvitedrolename) {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete beinvitedrolename_;
  }
  if (beinvitedrolename) {
    set_has_beinvitedrolename();
    beinvitedrolename_ = beinvitedrolename;
  } else {
    clear_has_beinvitedrolename();
    beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 teamid = 4;
inline bool GMInviteRoleInTeamResult::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMInviteRoleInTeamResult::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMInviteRoleInTeamResult::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMInviteRoleInTeamResult::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 GMInviteRoleInTeamResult::teamid() const {
  return teamid_;
}
inline void GMInviteRoleInTeamResult::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// GMAnswerRoleInTeam

// required int32 answerresult = 1;
inline bool GMAnswerRoleInTeam::has_answerresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_answerresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMAnswerRoleInTeam::clear_has_answerresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMAnswerRoleInTeam::clear_answerresult() {
  answerresult_ = 0;
  clear_has_answerresult();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeam::answerresult() const {
  return answerresult_;
}
inline void GMAnswerRoleInTeam::set_answerresult(::google::protobuf::int32 value) {
  set_has_answerresult();
  answerresult_ = value;
}

// required int32 inviteroleid = 2;
inline bool GMAnswerRoleInTeam::has_inviteroleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_inviteroleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMAnswerRoleInTeam::clear_has_inviteroleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMAnswerRoleInTeam::clear_inviteroleid() {
  inviteroleid_ = 0;
  clear_has_inviteroleid();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeam::inviteroleid() const {
  return inviteroleid_;
}
inline void GMAnswerRoleInTeam::set_inviteroleid(::google::protobuf::int32 value) {
  set_has_inviteroleid();
  inviteroleid_ = value;
}

// optional string inviterolename = 3;
inline bool GMAnswerRoleInTeam::has_inviterolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_inviterolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMAnswerRoleInTeam::clear_has_inviterolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMAnswerRoleInTeam::clear_inviterolename() {
  if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
    inviterolename_->clear();
  }
  clear_has_inviterolename();
}
inline const ::std::string& GMAnswerRoleInTeam::inviterolename() const {
  return *inviterolename_;
}
inline void GMAnswerRoleInTeam::set_inviterolename(const ::std::string& value) {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  inviterolename_->assign(value);
}
inline void GMAnswerRoleInTeam::set_inviterolename(const char* value) {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  inviterolename_->assign(value);
}
inline void GMAnswerRoleInTeam::set_inviterolename(const char* value, size_t size) {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  inviterolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMAnswerRoleInTeam::mutable_inviterolename() {
  set_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    inviterolename_ = new ::std::string;
  }
  return inviterolename_;
}
inline ::std::string* GMAnswerRoleInTeam::release_inviterolename() {
  clear_has_inviterolename();
  if (inviterolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inviterolename_;
    inviterolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMAnswerRoleInTeam::set_allocated_inviterolename(::std::string* inviterolename) {
  if (inviterolename_ != &::google::protobuf::internal::kEmptyString) {
    delete inviterolename_;
  }
  if (inviterolename) {
    set_has_inviterolename();
    inviterolename_ = inviterolename;
  } else {
    clear_has_inviterolename();
    inviterolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 beinvitedroleid = 4;
inline bool GMAnswerRoleInTeam::has_beinvitedroleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_beinvitedroleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMAnswerRoleInTeam::clear_has_beinvitedroleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMAnswerRoleInTeam::clear_beinvitedroleid() {
  beinvitedroleid_ = 0;
  clear_has_beinvitedroleid();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeam::beinvitedroleid() const {
  return beinvitedroleid_;
}
inline void GMAnswerRoleInTeam::set_beinvitedroleid(::google::protobuf::int32 value) {
  set_has_beinvitedroleid();
  beinvitedroleid_ = value;
}

// optional string beinvitedrolename = 5;
inline bool GMAnswerRoleInTeam::has_beinvitedrolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_beinvitedrolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMAnswerRoleInTeam::clear_has_beinvitedrolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMAnswerRoleInTeam::clear_beinvitedrolename() {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_->clear();
  }
  clear_has_beinvitedrolename();
}
inline const ::std::string& GMAnswerRoleInTeam::beinvitedrolename() const {
  return *beinvitedrolename_;
}
inline void GMAnswerRoleInTeam::set_beinvitedrolename(const ::std::string& value) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(value);
}
inline void GMAnswerRoleInTeam::set_beinvitedrolename(const char* value) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(value);
}
inline void GMAnswerRoleInTeam::set_beinvitedrolename(const char* value, size_t size) {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  beinvitedrolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMAnswerRoleInTeam::mutable_beinvitedrolename() {
  set_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    beinvitedrolename_ = new ::std::string;
  }
  return beinvitedrolename_;
}
inline ::std::string* GMAnswerRoleInTeam::release_beinvitedrolename() {
  clear_has_beinvitedrolename();
  if (beinvitedrolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beinvitedrolename_;
    beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMAnswerRoleInTeam::set_allocated_beinvitedrolename(::std::string* beinvitedrolename) {
  if (beinvitedrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete beinvitedrolename_;
  }
  if (beinvitedrolename) {
    set_has_beinvitedrolename();
    beinvitedrolename_ = beinvitedrolename;
  } else {
    clear_has_beinvitedrolename();
    beinvitedrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 teamid = 6;
inline bool GMAnswerRoleInTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMAnswerRoleInTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMAnswerRoleInTeam::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeam::teamid() const {
  return teamid_;
}
inline void GMAnswerRoleInTeam::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// required int32 teamtype = 7;
inline bool GMAnswerRoleInTeam::has_teamtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GMAnswerRoleInTeam::set_has_teamtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GMAnswerRoleInTeam::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GMAnswerRoleInTeam::clear_teamtype() {
  teamtype_ = 0;
  clear_has_teamtype();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeam::teamtype() const {
  return teamtype_;
}
inline void GMAnswerRoleInTeam::set_teamtype(::google::protobuf::int32 value) {
  set_has_teamtype();
  teamtype_ = value;
}

// -------------------------------------------------------------------

// GMChatRoleInTeam

// required int32 answerresult = 1;
inline bool GMChatRoleInTeam::has_answerresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMChatRoleInTeam::set_has_answerresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMChatRoleInTeam::clear_has_answerresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMChatRoleInTeam::clear_answerresult() {
  answerresult_ = 0;
  clear_has_answerresult();
}
inline ::google::protobuf::int32 GMChatRoleInTeam::answerresult() const {
  return answerresult_;
}
inline void GMChatRoleInTeam::set_answerresult(::google::protobuf::int32 value) {
  set_has_answerresult();
  answerresult_ = value;
}

// required int32 roleid = 6;
inline bool GMChatRoleInTeam::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMChatRoleInTeam::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMChatRoleInTeam::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMChatRoleInTeam::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GMChatRoleInTeam::roleid() const {
  return roleid_;
}
inline void GMChatRoleInTeam::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 teamid = 7;
inline bool GMChatRoleInTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMChatRoleInTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMChatRoleInTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMChatRoleInTeam::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 GMChatRoleInTeam::teamid() const {
  return teamid_;
}
inline void GMChatRoleInTeam::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// GMAnswerRoleInTeamResult

// required int32 m_result = 1;
inline bool GMAnswerRoleInTeamResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMAnswerRoleInTeamResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMAnswerRoleInTeamResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMAnswerRoleInTeamResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeamResult::m_result() const {
  return m_result_;
}
inline void GMAnswerRoleInTeamResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 teamid = 2;
inline bool GMAnswerRoleInTeamResult::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMAnswerRoleInTeamResult::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMAnswerRoleInTeamResult::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMAnswerRoleInTeamResult::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeamResult::teamid() const {
  return teamid_;
}
inline void GMAnswerRoleInTeamResult::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 fbid = 3;
inline bool GMAnswerRoleInTeamResult::has_fbid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMAnswerRoleInTeamResult::set_has_fbid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMAnswerRoleInTeamResult::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMAnswerRoleInTeamResult::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeamResult::fbid() const {
  return fbid_;
}
inline void GMAnswerRoleInTeamResult::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// optional int32 teamtype = 4;
inline bool GMAnswerRoleInTeamResult::has_teamtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMAnswerRoleInTeamResult::set_has_teamtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMAnswerRoleInTeamResult::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMAnswerRoleInTeamResult::clear_teamtype() {
  teamtype_ = 0;
  clear_has_teamtype();
}
inline ::google::protobuf::int32 GMAnswerRoleInTeamResult::teamtype() const {
  return teamtype_;
}
inline void GMAnswerRoleInTeamResult::set_teamtype(::google::protobuf::int32 value) {
  set_has_teamtype();
  teamtype_ = value;
}

// -------------------------------------------------------------------

// GMRoleTeamNotify

// required int32 m_result = 1;
inline bool GMRoleTeamNotify::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMRoleTeamNotify::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMRoleTeamNotify::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMRoleTeamNotify::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMRoleTeamNotify::m_result() const {
  return m_result_;
}
inline void GMRoleTeamNotify::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 m_teamleader = 2;
inline bool GMRoleTeamNotify::has_m_teamleader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMRoleTeamNotify::set_has_m_teamleader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMRoleTeamNotify::clear_has_m_teamleader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMRoleTeamNotify::clear_m_teamleader() {
  m_teamleader_ = 0;
  clear_has_m_teamleader();
}
inline ::google::protobuf::int32 GMRoleTeamNotify::m_teamleader() const {
  return m_teamleader_;
}
inline void GMRoleTeamNotify::set_m_teamleader(::google::protobuf::int32 value) {
  set_has_m_teamleader();
  m_teamleader_ = value;
}

// repeated .GMTeamPerson m_person = 3;
inline int GMRoleTeamNotify::m_person_size() const {
  return m_person_.size();
}
inline void GMRoleTeamNotify::clear_m_person() {
  m_person_.Clear();
}
inline const ::GMTeamPerson& GMRoleTeamNotify::m_person(int index) const {
  return m_person_.Get(index);
}
inline ::GMTeamPerson* GMRoleTeamNotify::mutable_m_person(int index) {
  return m_person_.Mutable(index);
}
inline ::GMTeamPerson* GMRoleTeamNotify::add_m_person() {
  return m_person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >&
GMRoleTeamNotify::m_person() const {
  return m_person_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMTeamPerson >*
GMRoleTeamNotify::mutable_m_person() {
  return &m_person_;
}

// -------------------------------------------------------------------

// GMKickoutTeam

// required int32 m_outroleid = 1;
inline bool GMKickoutTeam::has_m_outroleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMKickoutTeam::set_has_m_outroleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMKickoutTeam::clear_has_m_outroleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMKickoutTeam::clear_m_outroleid() {
  m_outroleid_ = 0;
  clear_has_m_outroleid();
}
inline ::google::protobuf::int32 GMKickoutTeam::m_outroleid() const {
  return m_outroleid_;
}
inline void GMKickoutTeam::set_m_outroleid(::google::protobuf::int32 value) {
  set_has_m_outroleid();
  m_outroleid_ = value;
}

// required int32 m_teamid = 2;
inline bool GMKickoutTeam::has_m_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMKickoutTeam::set_has_m_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMKickoutTeam::clear_has_m_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMKickoutTeam::clear_m_teamid() {
  m_teamid_ = 0;
  clear_has_m_teamid();
}
inline ::google::protobuf::int32 GMKickoutTeam::m_teamid() const {
  return m_teamid_;
}
inline void GMKickoutTeam::set_m_teamid(::google::protobuf::int32 value) {
  set_has_m_teamid();
  m_teamid_ = value;
}

// -------------------------------------------------------------------

// GMKickoutTeamResult

// required int32 m_result = 1;
inline bool GMKickoutTeamResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMKickoutTeamResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMKickoutTeamResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMKickoutTeamResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMKickoutTeamResult::m_result() const {
  return m_result_;
}
inline void GMKickoutTeamResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// required int32 m_outroleid = 2;
inline bool GMKickoutTeamResult::has_m_outroleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMKickoutTeamResult::set_has_m_outroleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMKickoutTeamResult::clear_has_m_outroleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMKickoutTeamResult::clear_m_outroleid() {
  m_outroleid_ = 0;
  clear_has_m_outroleid();
}
inline ::google::protobuf::int32 GMKickoutTeamResult::m_outroleid() const {
  return m_outroleid_;
}
inline void GMKickoutTeamResult::set_m_outroleid(::google::protobuf::int32 value) {
  set_has_m_outroleid();
  m_outroleid_ = value;
}

// -------------------------------------------------------------------

// GMLeaveTeam

// required int32 m_teamid = 1;
inline bool GMLeaveTeam::has_m_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMLeaveTeam::set_has_m_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMLeaveTeam::clear_has_m_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMLeaveTeam::clear_m_teamid() {
  m_teamid_ = 0;
  clear_has_m_teamid();
}
inline ::google::protobuf::int32 GMLeaveTeam::m_teamid() const {
  return m_teamid_;
}
inline void GMLeaveTeam::set_m_teamid(::google::protobuf::int32 value) {
  set_has_m_teamid();
  m_teamid_ = value;
}

// -------------------------------------------------------------------

// GMLeaveTeamResult

// required int32 m_result = 1;
inline bool GMLeaveTeamResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMLeaveTeamResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMLeaveTeamResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMLeaveTeamResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GMLeaveTeamResult::m_result() const {
  return m_result_;
}
inline void GMLeaveTeamResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// -------------------------------------------------------------------

// GM_NotifyActiveOver

// required int32 m_nFbTypeId = 4;
inline bool GM_NotifyActiveOver::has_m_nfbtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_NotifyActiveOver::set_has_m_nfbtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_NotifyActiveOver::clear_has_m_nfbtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_NotifyActiveOver::clear_m_nfbtypeid() {
  m_nfbtypeid_ = 0;
  clear_has_m_nfbtypeid();
}
inline ::google::protobuf::int32 GM_NotifyActiveOver::m_nfbtypeid() const {
  return m_nfbtypeid_;
}
inline void GM_NotifyActiveOver::set_m_nfbtypeid(::google::protobuf::int32 value) {
  set_has_m_nfbtypeid();
  m_nfbtypeid_ = value;
}

// -------------------------------------------------------------------

// GM_NotifyInviteData

// required int32 count = 1;
inline bool GM_NotifyInviteData::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_NotifyInviteData::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_NotifyInviteData::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_NotifyInviteData::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_NotifyInviteData::count() const {
  return count_;
}
inline void GM_NotifyInviteData::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GMInviteRoleInTeam mdata = 2;
inline int GM_NotifyInviteData::mdata_size() const {
  return mdata_.size();
}
inline void GM_NotifyInviteData::clear_mdata() {
  mdata_.Clear();
}
inline const ::GMInviteRoleInTeam& GM_NotifyInviteData::mdata(int index) const {
  return mdata_.Get(index);
}
inline ::GMInviteRoleInTeam* GM_NotifyInviteData::mutable_mdata(int index) {
  return mdata_.Mutable(index);
}
inline ::GMInviteRoleInTeam* GM_NotifyInviteData::add_mdata() {
  return mdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMInviteRoleInTeam >&
GM_NotifyInviteData::mdata() const {
  return mdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMInviteRoleInTeam >*
GM_NotifyInviteData::mutable_mdata() {
  return &mdata_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_team_2etxt__INCLUDED
