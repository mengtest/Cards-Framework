// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_gshj.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_gshj.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Gshj_ChallengeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_ChallengeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_ChallengeInfo_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_ChallengeInfo_Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fgshj_2etxt() {
  protobuf_AddDesc_SP_5fgshj_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_gshj.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Gshj_ChallengeInfo_descriptor_ = file->message_type(0);
  static const int GM_Gshj_ChallengeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo, joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo, moralelv_),
  };
  GM_Gshj_ChallengeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_ChallengeInfo_descriptor_,
      GM_Gshj_ChallengeInfo::default_instance_,
      GM_Gshj_ChallengeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_ChallengeInfo));
  GM_Gshj_ChallengeInfo_Result_descriptor_ = file->message_type(1);
  static const int GM_Gshj_ChallengeInfo_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo_Result, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo_Result, info_),
  };
  GM_Gshj_ChallengeInfo_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_ChallengeInfo_Result_descriptor_,
      GM_Gshj_ChallengeInfo_Result::default_instance_,
      GM_Gshj_ChallengeInfo_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_ChallengeInfo_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_ChallengeInfo_Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fgshj_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_ChallengeInfo_descriptor_, &GM_Gshj_ChallengeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_ChallengeInfo_Result_descriptor_, &GM_Gshj_ChallengeInfo_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fgshj_2etxt() {
  delete GM_Gshj_ChallengeInfo::default_instance_;
  delete GM_Gshj_ChallengeInfo_reflection_;
  delete GM_Gshj_ChallengeInfo_Result::default_instance_;
  delete GM_Gshj_ChallengeInfo_Result_reflection_;
}

void protobuf_AddDesc_SP_5fgshj_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SP_gshj.txt\"K\n\025GM_Gshj_ChallengeInfo\022\016"
    "\n\006joined\030\001 \002(\005\022\020\n\010lasttime\030\002 \002(\005\022\020\n\010mora"
    "lelv\030\003 \002(\005\"S\n\034GM_Gshj_ChallengeInfo_Resu"
    "lt\022\r\n\005count\030\001 \002(\005\022$\n\004info\030\002 \001(\0132\026.GM_Gsh"
    "j_ChallengeInfo", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_gshj.txt", &protobuf_RegisterTypes);
  GM_Gshj_ChallengeInfo::default_instance_ = new GM_Gshj_ChallengeInfo();
  GM_Gshj_ChallengeInfo_Result::default_instance_ = new GM_Gshj_ChallengeInfo_Result();
  GM_Gshj_ChallengeInfo::default_instance_->InitAsDefaultInstance();
  GM_Gshj_ChallengeInfo_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fgshj_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fgshj_2etxt {
  StaticDescriptorInitializer_SP_5fgshj_2etxt() {
    protobuf_AddDesc_SP_5fgshj_2etxt();
  }
} static_descriptor_initializer_SP_5fgshj_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_ChallengeInfo::kJoinedFieldNumber;
const int GM_Gshj_ChallengeInfo::kLasttimeFieldNumber;
const int GM_Gshj_ChallengeInfo::kMoralelvFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_ChallengeInfo::GM_Gshj_ChallengeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_ChallengeInfo::InitAsDefaultInstance() {
}

GM_Gshj_ChallengeInfo::GM_Gshj_ChallengeInfo(const GM_Gshj_ChallengeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_ChallengeInfo::SharedCtor() {
  _cached_size_ = 0;
  joined_ = 0;
  lasttime_ = 0;
  moralelv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_ChallengeInfo::~GM_Gshj_ChallengeInfo() {
  SharedDtor();
}

void GM_Gshj_ChallengeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gshj_ChallengeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_ChallengeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_ChallengeInfo_descriptor_;
}

const GM_Gshj_ChallengeInfo& GM_Gshj_ChallengeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fgshj_2etxt();
  return *default_instance_;
}

GM_Gshj_ChallengeInfo* GM_Gshj_ChallengeInfo::default_instance_ = NULL;

GM_Gshj_ChallengeInfo* GM_Gshj_ChallengeInfo::New() const {
  return new GM_Gshj_ChallengeInfo;
}

void GM_Gshj_ChallengeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    joined_ = 0;
    lasttime_ = 0;
    moralelv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_ChallengeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 joined = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joined_)));
          set_has_joined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lasttime;
        break;
      }

      // required int32 lasttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moralelv;
        break;
      }

      // required int32 moralelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moralelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moralelv_)));
          set_has_moralelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_ChallengeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 joined = 1;
  if (has_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->joined(), output);
  }

  // required int32 lasttime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // required int32 moralelv = 3;
  if (has_moralelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->moralelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_ChallengeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 joined = 1;
  if (has_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->joined(), target);
  }

  // required int32 lasttime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // required int32 moralelv = 3;
  if (has_moralelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->moralelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_ChallengeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 joined = 1;
    if (has_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joined());
    }

    // required int32 lasttime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // required int32 moralelv = 3;
    if (has_moralelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moralelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_ChallengeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_ChallengeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_ChallengeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_ChallengeInfo::MergeFrom(const GM_Gshj_ChallengeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joined()) {
      set_joined(from.joined());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_moralelv()) {
      set_moralelv(from.moralelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_ChallengeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_ChallengeInfo::CopyFrom(const GM_Gshj_ChallengeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_ChallengeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Gshj_ChallengeInfo::Swap(GM_Gshj_ChallengeInfo* other) {
  if (other != this) {
    std::swap(joined_, other->joined_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(moralelv_, other->moralelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_ChallengeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_ChallengeInfo_descriptor_;
  metadata.reflection = GM_Gshj_ChallengeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_ChallengeInfo_Result::kCountFieldNumber;
const int GM_Gshj_ChallengeInfo_Result::kInfoFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_ChallengeInfo_Result::GM_Gshj_ChallengeInfo_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_ChallengeInfo_Result::InitAsDefaultInstance() {
  info_ = const_cast< ::GM_Gshj_ChallengeInfo*>(&::GM_Gshj_ChallengeInfo::default_instance());
}

GM_Gshj_ChallengeInfo_Result::GM_Gshj_ChallengeInfo_Result(const GM_Gshj_ChallengeInfo_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_ChallengeInfo_Result::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_ChallengeInfo_Result::~GM_Gshj_ChallengeInfo_Result() {
  SharedDtor();
}

void GM_Gshj_ChallengeInfo_Result::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GM_Gshj_ChallengeInfo_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_ChallengeInfo_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_ChallengeInfo_Result_descriptor_;
}

const GM_Gshj_ChallengeInfo_Result& GM_Gshj_ChallengeInfo_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fgshj_2etxt();
  return *default_instance_;
}

GM_Gshj_ChallengeInfo_Result* GM_Gshj_ChallengeInfo_Result::default_instance_ = NULL;

GM_Gshj_ChallengeInfo_Result* GM_Gshj_ChallengeInfo_Result::New() const {
  return new GM_Gshj_ChallengeInfo_Result;
}

void GM_Gshj_ChallengeInfo_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::GM_Gshj_ChallengeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_ChallengeInfo_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .GM_Gshj_ChallengeInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_ChallengeInfo_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional .GM_Gshj_ChallengeInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_ChallengeInfo_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional .GM_Gshj_ChallengeInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_ChallengeInfo_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional .GM_Gshj_ChallengeInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_ChallengeInfo_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_ChallengeInfo_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_ChallengeInfo_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_ChallengeInfo_Result::MergeFrom(const GM_Gshj_ChallengeInfo_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_info()) {
      mutable_info()->::GM_Gshj_ChallengeInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_ChallengeInfo_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_ChallengeInfo_Result::CopyFrom(const GM_Gshj_ChallengeInfo_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_ChallengeInfo_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GM_Gshj_ChallengeInfo_Result::Swap(GM_Gshj_ChallengeInfo_Result* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_ChallengeInfo_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_ChallengeInfo_Result_descriptor_;
  metadata.reflection = GM_Gshj_ChallengeInfo_Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
