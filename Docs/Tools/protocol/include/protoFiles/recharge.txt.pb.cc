// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recharge.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recharge.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Recharge_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recharge_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recharge_Open_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recharge_Open_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recharge_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recharge_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Walfare_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Walfare_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Walfare_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Walfare_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Single_Walfare_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Single_Walfare_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Single_Walfare_buy_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Single_Walfare_buy_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Goods_Detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Goods_Detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Single_Walfare_Retrun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Single_Walfare_Retrun_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Single_Walfare_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Single_Walfare_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Object_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Object_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Object_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Object_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Object_Buy_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Object_Buy_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CreateOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CreateOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CreateOrder_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CreateOrder_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Obj_Single_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Obj_Single_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Shop_Obj_Single_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Shop_Obj_Single_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recharge_Over_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recharge_Over_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Recharge_Over_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Recharge_Over_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Single_Object_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Single_Object_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GET_ZYOrder_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GET_ZYOrder_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GET_ZYOrder_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GET_ZYOrder_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_recharge_2etxt() {
  protobuf_AddDesc_recharge_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "recharge.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Recharge_Data_descriptor_ = file->message_type(0);
  static const int GM_Recharge_Data_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_getdamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_limitreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_limit_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_hot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, m_objectname_),
  };
  GM_Recharge_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recharge_Data_descriptor_,
      GM_Recharge_Data::default_instance_,
      GM_Recharge_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recharge_Data));
  GM_Recharge_Open_descriptor_ = file->message_type(1);
  static const int GM_Recharge_Open_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open, m_channel_),
  };
  GM_Recharge_Open_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recharge_Open_descriptor_,
      GM_Recharge_Open::default_instance_,
      GM_Recharge_Open_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recharge_Open));
  GM_Recharge_Open_Return_descriptor_ = file->message_type(2);
  static const int GM_Recharge_Open_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open_Return, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open_Return, m_card30_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open_Return, m_state_),
  };
  GM_Recharge_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recharge_Open_Return_descriptor_,
      GM_Recharge_Open_Return::default_instance_,
      GM_Recharge_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recharge_Open_Return));
  GM_Shop_Walfare_Return_descriptor_ = file->message_type(3);
  static const int GM_Shop_Walfare_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Return, m_data_),
  };
  GM_Shop_Walfare_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Walfare_Return_descriptor_,
      GM_Shop_Walfare_Return::default_instance_,
      GM_Shop_Walfare_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Walfare_Return));
  GM_Shop_Walfare_Data_descriptor_ = file->message_type(4);
  static const int GM_Shop_Walfare_Data_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_cost_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_cutprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_vip_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_person_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_person_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_server_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_descripte_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_object_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_bag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_object_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_stacklimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_usedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_buygold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_sellgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_describe_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, m_objectrank_),
  };
  GM_Shop_Walfare_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Walfare_Data_descriptor_,
      GM_Shop_Walfare_Data::default_instance_,
      GM_Shop_Walfare_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Walfare_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Walfare_Data));
  GM_Shop_Single_Walfare_Request_descriptor_ = file->message_type(5);
  static const int GM_Shop_Single_Walfare_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Request, m_objectid_),
  };
  GM_Shop_Single_Walfare_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Single_Walfare_Request_descriptor_,
      GM_Shop_Single_Walfare_Request::default_instance_,
      GM_Shop_Single_Walfare_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Single_Walfare_Request));
  GM_Single_Walfare_buy_Return_descriptor_ = file->message_type(6);
  static const int GM_Single_Walfare_buy_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_buy_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_buy_Return, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_buy_Return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_buy_Return, m_detail_),
  };
  GM_Single_Walfare_buy_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Single_Walfare_buy_Return_descriptor_,
      GM_Single_Walfare_buy_Return::default_instance_,
      GM_Single_Walfare_buy_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_buy_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_buy_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Single_Walfare_buy_Return));
  GM_Goods_Detail_descriptor_ = file->message_type(7);
  static const int GM_Goods_Detail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Goods_Detail, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Goods_Detail, m_getnum_),
  };
  GM_Goods_Detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Goods_Detail_descriptor_,
      GM_Goods_Detail::default_instance_,
      GM_Goods_Detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Goods_Detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Goods_Detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Goods_Detail));
  GM_Shop_Single_Walfare_Retrun_descriptor_ = file->message_type(8);
  static const int GM_Shop_Single_Walfare_Retrun_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Retrun, m_giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Retrun, m_data_),
  };
  GM_Shop_Single_Walfare_Retrun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Single_Walfare_Retrun_descriptor_,
      GM_Shop_Single_Walfare_Retrun::default_instance_,
      GM_Shop_Single_Walfare_Retrun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Retrun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Single_Walfare_Retrun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Single_Walfare_Retrun));
  GM_Single_Walfare_Data_descriptor_ = file->message_type(9);
  static const int GM_Single_Walfare_Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_Data, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_Data, m_get_mincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_Data, m_get_maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_Data, m_get_ratio_),
  };
  GM_Single_Walfare_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Single_Walfare_Data_descriptor_,
      GM_Single_Walfare_Data::default_instance_,
      GM_Single_Walfare_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Walfare_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Single_Walfare_Data));
  GM_Shop_Object_Return_descriptor_ = file->message_type(10);
  static const int GM_Shop_Object_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Return, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Return, isnew_),
  };
  GM_Shop_Object_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Object_Return_descriptor_,
      GM_Shop_Object_Return::default_instance_,
      GM_Shop_Object_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Object_Return));
  GM_Shop_Object_Data_descriptor_ = file->message_type(11);
  static const int GM_Shop_Object_Data_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, objectrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, buy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, vip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, descripte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, now_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, cost_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, isdyn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, objectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, object_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, maxvip_count_),
  };
  GM_Shop_Object_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Object_Data_descriptor_,
      GM_Shop_Object_Data::default_instance_,
      GM_Shop_Object_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Object_Data));
  GM_Shop_Object_Buy_Request_descriptor_ = file->message_type(12);
  static const int GM_Shop_Object_Buy_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Buy_Request, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Buy_Request, m_count_),
  };
  GM_Shop_Object_Buy_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Object_Buy_Request_descriptor_,
      GM_Shop_Object_Buy_Request::default_instance_,
      GM_Shop_Object_Buy_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Buy_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Object_Buy_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Object_Buy_Request));
  GM_CreateOrder_descriptor_ = file->message_type(13);
  static const int GM_CreateOrder_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, diamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, productid_),
  };
  GM_CreateOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CreateOrder_descriptor_,
      GM_CreateOrder::default_instance_,
      GM_CreateOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CreateOrder));
  GM_CreateOrder_Return_descriptor_ = file->message_type(14);
  static const int GM_CreateOrder_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder_Return, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder_Return, m_productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder_Return, m_strname_),
  };
  GM_CreateOrder_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CreateOrder_Return_descriptor_,
      GM_CreateOrder_Return::default_instance_,
      GM_CreateOrder_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateOrder_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CreateOrder_Return));
  GM_Shop_Obj_Single_Return_descriptor_ = file->message_type(15);
  static const int GM_Shop_Obj_Single_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Return, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Return, m_objectid_),
  };
  GM_Shop_Obj_Single_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Obj_Single_Return_descriptor_,
      GM_Shop_Obj_Single_Return::default_instance_,
      GM_Shop_Obj_Single_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Obj_Single_Return));
  GM_Shop_Obj_Single_Data_descriptor_ = file->message_type(16);
  static const int GM_Shop_Obj_Single_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Data, get_mintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Data, get_maxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Data, cost_price_),
  };
  GM_Shop_Obj_Single_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Shop_Obj_Single_Data_descriptor_,
      GM_Shop_Obj_Single_Data::default_instance_,
      GM_Shop_Obj_Single_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Shop_Obj_Single_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Shop_Obj_Single_Data));
  GM_Recharge_Over_descriptor_ = file->message_type(17);
  static const int GM_Recharge_Over_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over, m_data_),
  };
  GM_Recharge_Over_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recharge_Over_descriptor_,
      GM_Recharge_Over::default_instance_,
      GM_Recharge_Over_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recharge_Over));
  GM_Recharge_Over_Data_descriptor_ = file->message_type(18);
  static const int GM_Recharge_Over_Data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, get_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, m_descirb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, m_orderid_),
  };
  GM_Recharge_Over_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Recharge_Over_Data_descriptor_,
      GM_Recharge_Over_Data::default_instance_,
      GM_Recharge_Over_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Recharge_Over_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Recharge_Over_Data));
  GM_Single_Object_Return_descriptor_ = file->message_type(19);
  static const int GM_Single_Object_Return_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, m_buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, vip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, now_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, maxvip_count_),
  };
  GM_Single_Object_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Single_Object_Return_descriptor_,
      GM_Single_Object_Return::default_instance_,
      GM_Single_Object_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Object_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Single_Object_Return));
  GM_GET_ZYOrder_Request_descriptor_ = file->message_type(20);
  static const int GM_GET_ZYOrder_Request_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_productdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_ec_pp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, m_servername_),
  };
  GM_GET_ZYOrder_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GET_ZYOrder_Request_descriptor_,
      GM_GET_ZYOrder_Request::default_instance_,
      GM_GET_ZYOrder_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GET_ZYOrder_Request));
  GM_GET_ZYOrder_Return_descriptor_ = file->message_type(21);
  static const int GM_GET_ZYOrder_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Return, m_orderdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Return, userdata_),
  };
  GM_GET_ZYOrder_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GET_ZYOrder_Return_descriptor_,
      GM_GET_ZYOrder_Return::default_instance_,
      GM_GET_ZYOrder_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GET_ZYOrder_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GET_ZYOrder_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_recharge_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recharge_Data_descriptor_, &GM_Recharge_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recharge_Open_descriptor_, &GM_Recharge_Open::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recharge_Open_Return_descriptor_, &GM_Recharge_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Walfare_Return_descriptor_, &GM_Shop_Walfare_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Walfare_Data_descriptor_, &GM_Shop_Walfare_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Single_Walfare_Request_descriptor_, &GM_Shop_Single_Walfare_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Single_Walfare_buy_Return_descriptor_, &GM_Single_Walfare_buy_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Goods_Detail_descriptor_, &GM_Goods_Detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Single_Walfare_Retrun_descriptor_, &GM_Shop_Single_Walfare_Retrun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Single_Walfare_Data_descriptor_, &GM_Single_Walfare_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Object_Return_descriptor_, &GM_Shop_Object_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Object_Data_descriptor_, &GM_Shop_Object_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Object_Buy_Request_descriptor_, &GM_Shop_Object_Buy_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CreateOrder_descriptor_, &GM_CreateOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CreateOrder_Return_descriptor_, &GM_CreateOrder_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Obj_Single_Return_descriptor_, &GM_Shop_Obj_Single_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Shop_Obj_Single_Data_descriptor_, &GM_Shop_Obj_Single_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recharge_Over_descriptor_, &GM_Recharge_Over::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Recharge_Over_Data_descriptor_, &GM_Recharge_Over_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Single_Object_Return_descriptor_, &GM_Single_Object_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GET_ZYOrder_Request_descriptor_, &GM_GET_ZYOrder_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GET_ZYOrder_Return_descriptor_, &GM_GET_ZYOrder_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_recharge_2etxt() {
  delete GM_Recharge_Data::default_instance_;
  delete GM_Recharge_Data_reflection_;
  delete GM_Recharge_Open::default_instance_;
  delete GM_Recharge_Open_reflection_;
  delete GM_Recharge_Open_Return::default_instance_;
  delete GM_Recharge_Open_Return_reflection_;
  delete GM_Shop_Walfare_Return::default_instance_;
  delete GM_Shop_Walfare_Return_reflection_;
  delete GM_Shop_Walfare_Data::default_instance_;
  delete GM_Shop_Walfare_Data_reflection_;
  delete GM_Shop_Single_Walfare_Request::default_instance_;
  delete GM_Shop_Single_Walfare_Request_reflection_;
  delete GM_Single_Walfare_buy_Return::default_instance_;
  delete GM_Single_Walfare_buy_Return_reflection_;
  delete GM_Goods_Detail::default_instance_;
  delete GM_Goods_Detail_reflection_;
  delete GM_Shop_Single_Walfare_Retrun::default_instance_;
  delete GM_Shop_Single_Walfare_Retrun_reflection_;
  delete GM_Single_Walfare_Data::default_instance_;
  delete GM_Single_Walfare_Data_reflection_;
  delete GM_Shop_Object_Return::default_instance_;
  delete GM_Shop_Object_Return_reflection_;
  delete GM_Shop_Object_Data::default_instance_;
  delete GM_Shop_Object_Data_reflection_;
  delete GM_Shop_Object_Buy_Request::default_instance_;
  delete GM_Shop_Object_Buy_Request_reflection_;
  delete GM_CreateOrder::default_instance_;
  delete GM_CreateOrder_reflection_;
  delete GM_CreateOrder_Return::default_instance_;
  delete GM_CreateOrder_Return_reflection_;
  delete GM_Shop_Obj_Single_Return::default_instance_;
  delete GM_Shop_Obj_Single_Return_reflection_;
  delete GM_Shop_Obj_Single_Data::default_instance_;
  delete GM_Shop_Obj_Single_Data_reflection_;
  delete GM_Recharge_Over::default_instance_;
  delete GM_Recharge_Over_reflection_;
  delete GM_Recharge_Over_Data::default_instance_;
  delete GM_Recharge_Over_Data_reflection_;
  delete GM_Single_Object_Return::default_instance_;
  delete GM_Single_Object_Return_reflection_;
  delete GM_GET_ZYOrder_Request::default_instance_;
  delete GM_GET_ZYOrder_Request_reflection_;
  delete GM_GET_ZYOrder_Return::default_instance_;
  delete GM_GET_ZYOrder_Return_reflection_;
}

void protobuf_AddDesc_recharge_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014recharge.txt\"\204\002\n\020GM_Recharge_Data\022\021\n\tm"
    "_goodsid\030\001 \001(\005\022\017\n\007m_price\030\002 \001(\002\022\023\n\013m_get"
    "damond\030\003 \001(\005\022\020\n\010m_reward\030\004 \001(\005\022\025\n\rm_limi"
    "treward\030\005 \001(\005\022\016\n\006m_type\030\006 \001(\005\022\020\n\010m_iconi"
    "d\030\007 \001(\t\022\017\n\007m_limit\030\010 \001(\005\022\024\n\014m_limit_icon"
    "\030\t \001(\t\022\021\n\tm_channel\030\n \001(\t\022\r\n\005m_tag\030\013 \001(\005"
    "\022\r\n\005m_hot\030\014 \001(\005\022\024\n\014m_objectname\030\r \001(\t\"%\n"
    "\020GM_Recharge_Open\022\021\n\tm_channel\030\001 \002(\t\"d\n\027"
    "GM_Recharge_Open_Return\022!\n\006m_data\030\001 \003(\0132"
    "\021.GM_Recharge_Data\022\025\n\rm_card30_time\030\002 \002("
    "\005\022\017\n\007m_state\030\003 \002(\005\"\?\n\026GM_Shop_Walfare_Re"
    "turn\022%\n\006m_data\030\001 \003(\0132\025.GM_Shop_Walfare_D"
    "ata\"\336\003\n\024GM_Shop_Walfare_Data\022\022\n\nm_object"
    "id\030\001 \001(\005\022\024\n\014m_cost_price\030\002 \001(\005\022\022\n\nm_cutp"
    "rice\030\003 \001(\005\022\023\n\013m_vip_limit\030\004 \001(\005\022\026\n\016m_per"
    "son_limit\030\005 \001(\005\022\026\n\016m_person_count\030\006 \001(\005\022"
    "\026\n\016m_server_limit\030\007 \001(\005\022\026\n\016m_server_coun"
    "t\030\010 \001(\005\022\025\n\rm_descripte_1\030\t \001(\t\022\025\n\rm_obje"
    "ct_name\030\n \001(\t\022\025\n\rm_object_icon\030\013 \001(\t\022\017\n\007"
    "m_color\030\014 \001(\005\022\022\n\nm_bag_type\030\r \001(\005\022\025\n\rm_o"
    "bject_type\030\016 \001(\005\022\024\n\014m_profession\030\017 \001(\005\022\024"
    "\n\014m_stacklimit\030\020 \001(\005\022\023\n\013m_usedlevel\030\021 \001("
    "\005\022\021\n\tm_buygold\030\022 \001(\005\022\022\n\nm_sellgold\030\023 \001(\005"
    "\022\024\n\014m_describe_2\030\024 \001(\t\022\024\n\014m_objectrank\030\025"
    " \001(\005\"4\n\036GM_Shop_Single_Walfare_Request\022\022"
    "\n\nm_objectid\030\001 \002(\005\"x\n\034GM_Single_Walfare_"
    "buy_Return\022\017\n\007m_state\030\001 \002(\005\022\022\n\nm_objecti"
    "d\030\002 \001(\005\022\017\n\007m_count\030\003 \001(\005\022\"\n\010m_detail\030\004 \003"
    "(\0132\020.GM_Goods_Detail\"7\n\017GM_Goods_Detail\022"
    "\022\n\nm_objectid\030\001 \002(\005\022\020\n\010m_getnum\030\002 \001(\005\"Z\n"
    "\035GM_Shop_Single_Walfare_Retrun\022\020\n\010m_gift"
    "id\030\001 \002(\005\022\'\n\006m_data\030\002 \003(\0132\027.GM_Single_Wal"
    "fare_Data\"q\n\026GM_Single_Walfare_Data\022\022\n\nm"
    "_objectid\030\001 \002(\005\022\026\n\016m_get_mincount\030\002 \001(\005\022"
    "\026\n\016m_get_maxcount\030\003 \001(\005\022\023\n\013m_get_ratio\030\004"
    " \001(\005\"L\n\025GM_Shop_Object_Return\022$\n\006m_data\030"
    "\001 \003(\0132\024.GM_Shop_Object_Data\022\r\n\005isnew\030\002 \002"
    "(\005\"\367\001\n\023GM_Shop_Object_Data\022\020\n\010objectid\030\001"
    " \001(\005\022\022\n\nobjectrank\030\002 \001(\005\022\020\n\010buy_type\030\003 \001"
    "(\005\022\021\n\tvip_count\030\004 \001(\005\022\021\n\tdescripte\030\005 \001(\t"
    "\022\021\n\tnow_count\030\006 \001(\005\022\022\n\ncost_price\030\007 \001(\005\022"
    "\r\n\005isdyn\030\010 \001(\005\022\022\n\nobjectname\030\t \001(\t\022\023\n\013ob"
    "ject_icon\030\n \001(\t\022\r\n\005color\030\013 \001(\005\022\024\n\014maxvip"
    "_count\030\014 \001(\005\"A\n\032GM_Shop_Object_Buy_Reque"
    "st\022\022\n\nm_objectid\030\001 \001(\005\022\017\n\007m_count\030\002 \001(\005\""
    "\255\001\n\016GM_CreateOrder\022\017\n\007orderid\030\001 \001(\t\022\020\n\010p"
    "latform\030\002 \001(\005\022\017\n\007channel\030\003 \001(\t\022\r\n\005appid\030"
    "\004 \001(\005\022\020\n\010diamonds\030\005 \001(\002\022\016\n\006roleid\030\006 \001(\005\022"
    "\020\n\010serverid\030\007 \001(\005\022\021\n\taccountid\030\010 \001(\005\022\021\n\t"
    "productid\030\t \001(\005\"b\n\025GM_CreateOrder_Return"
    "\022\017\n\007orderid\030\001 \001(\t\022\020\n\010m_result\030\002 \001(\005\022\023\n\013m"
    "_productid\030\003 \001(\005\022\021\n\tm_strname\030\004 \001(\t\"Y\n\031G"
    "M_Shop_Obj_Single_Return\022(\n\006m_data\030\001 \003(\013"
    "2\030.GM_Shop_Obj_Single_Data\022\022\n\nm_objectid"
    "\030\002 \001(\005\"W\n\027GM_Shop_Obj_Single_Data\022\023\n\013get"
    "_mintime\030\001 \001(\005\022\023\n\013get_maxtime\030\002 \001(\005\022\022\n\nc"
    "ost_price\030\003 \001(\005\"I\n\020GM_Recharge_Over\022\r\n\005c"
    "ount\030\001 \002(\005\022&\n\006m_data\030\002 \003(\0132\026.GM_Recharge"
    "_Over_Data\"\204\001\n\025GM_Recharge_Over_Data\022\021\n\t"
    "productid\030\001 \001(\005\022\023\n\013get_diamond\030\002 \001(\005\022\016\n\006"
    "m_type\030\003 \001(\005\022\r\n\005money\030\004 \001(\005\022\021\n\tm_descirb"
    "\030\005 \001(\t\022\021\n\tm_orderid\030\006 \001(\t\"y\n\027GM_Single_O"
    "bject_Return\022\021\n\tm_buytime\030\001 \001(\005\022\017\n\007m_pri"
    "ce\030\002 \001(\005\022\021\n\tvip_count\030\003 \001(\005\022\021\n\tnow_count"
    "\030\004 \001(\005\022\024\n\014maxvip_count\030\005 \001(\005\"\364\001\n\026GM_GET_"
    "ZYOrder_Request\022\020\n\010m_userid\030\001 \001(\t\022\023\n\013m_p"
    "roductid\030\002 \001(\t\022\025\n\rm_productname\030\003 \001(\t\022\025\n"
    "\rm_productdesc\030\004 \001(\t\022\023\n\013m_extension\030\005 \001("
    "\t\022\017\n\007m_ec_pp\030\006 \001(\t\022\020\n\010m_roleid\030\007 \001(\005\022\022\n\n"
    "m_rolename\030\010 \001(\t\022\017\n\007m_money\030\t \001(\002\022\022\n\nm_s"
    "erverid\030\n \001(\005\022\024\n\014m_servername\030\013 \001(\t\"O\n\025G"
    "M_GET_ZYOrder_Return\022\017\n\007m_state\030\001 \002(\005\022\023\n"
    "\013m_orderdata\030\002 \001(\t\022\020\n\010userData\030\003 \001(\t", 2916);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recharge.txt", &protobuf_RegisterTypes);
  GM_Recharge_Data::default_instance_ = new GM_Recharge_Data();
  GM_Recharge_Open::default_instance_ = new GM_Recharge_Open();
  GM_Recharge_Open_Return::default_instance_ = new GM_Recharge_Open_Return();
  GM_Shop_Walfare_Return::default_instance_ = new GM_Shop_Walfare_Return();
  GM_Shop_Walfare_Data::default_instance_ = new GM_Shop_Walfare_Data();
  GM_Shop_Single_Walfare_Request::default_instance_ = new GM_Shop_Single_Walfare_Request();
  GM_Single_Walfare_buy_Return::default_instance_ = new GM_Single_Walfare_buy_Return();
  GM_Goods_Detail::default_instance_ = new GM_Goods_Detail();
  GM_Shop_Single_Walfare_Retrun::default_instance_ = new GM_Shop_Single_Walfare_Retrun();
  GM_Single_Walfare_Data::default_instance_ = new GM_Single_Walfare_Data();
  GM_Shop_Object_Return::default_instance_ = new GM_Shop_Object_Return();
  GM_Shop_Object_Data::default_instance_ = new GM_Shop_Object_Data();
  GM_Shop_Object_Buy_Request::default_instance_ = new GM_Shop_Object_Buy_Request();
  GM_CreateOrder::default_instance_ = new GM_CreateOrder();
  GM_CreateOrder_Return::default_instance_ = new GM_CreateOrder_Return();
  GM_Shop_Obj_Single_Return::default_instance_ = new GM_Shop_Obj_Single_Return();
  GM_Shop_Obj_Single_Data::default_instance_ = new GM_Shop_Obj_Single_Data();
  GM_Recharge_Over::default_instance_ = new GM_Recharge_Over();
  GM_Recharge_Over_Data::default_instance_ = new GM_Recharge_Over_Data();
  GM_Single_Object_Return::default_instance_ = new GM_Single_Object_Return();
  GM_GET_ZYOrder_Request::default_instance_ = new GM_GET_ZYOrder_Request();
  GM_GET_ZYOrder_Return::default_instance_ = new GM_GET_ZYOrder_Return();
  GM_Recharge_Data::default_instance_->InitAsDefaultInstance();
  GM_Recharge_Open::default_instance_->InitAsDefaultInstance();
  GM_Recharge_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Shop_Walfare_Return::default_instance_->InitAsDefaultInstance();
  GM_Shop_Walfare_Data::default_instance_->InitAsDefaultInstance();
  GM_Shop_Single_Walfare_Request::default_instance_->InitAsDefaultInstance();
  GM_Single_Walfare_buy_Return::default_instance_->InitAsDefaultInstance();
  GM_Goods_Detail::default_instance_->InitAsDefaultInstance();
  GM_Shop_Single_Walfare_Retrun::default_instance_->InitAsDefaultInstance();
  GM_Single_Walfare_Data::default_instance_->InitAsDefaultInstance();
  GM_Shop_Object_Return::default_instance_->InitAsDefaultInstance();
  GM_Shop_Object_Data::default_instance_->InitAsDefaultInstance();
  GM_Shop_Object_Buy_Request::default_instance_->InitAsDefaultInstance();
  GM_CreateOrder::default_instance_->InitAsDefaultInstance();
  GM_CreateOrder_Return::default_instance_->InitAsDefaultInstance();
  GM_Shop_Obj_Single_Return::default_instance_->InitAsDefaultInstance();
  GM_Shop_Obj_Single_Data::default_instance_->InitAsDefaultInstance();
  GM_Recharge_Over::default_instance_->InitAsDefaultInstance();
  GM_Recharge_Over_Data::default_instance_->InitAsDefaultInstance();
  GM_Single_Object_Return::default_instance_->InitAsDefaultInstance();
  GM_GET_ZYOrder_Request::default_instance_->InitAsDefaultInstance();
  GM_GET_ZYOrder_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_recharge_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_recharge_2etxt {
  StaticDescriptorInitializer_recharge_2etxt() {
    protobuf_AddDesc_recharge_2etxt();
  }
} static_descriptor_initializer_recharge_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Recharge_Data::kMGoodsidFieldNumber;
const int GM_Recharge_Data::kMPriceFieldNumber;
const int GM_Recharge_Data::kMGetdamondFieldNumber;
const int GM_Recharge_Data::kMRewardFieldNumber;
const int GM_Recharge_Data::kMLimitrewardFieldNumber;
const int GM_Recharge_Data::kMTypeFieldNumber;
const int GM_Recharge_Data::kMIconidFieldNumber;
const int GM_Recharge_Data::kMLimitFieldNumber;
const int GM_Recharge_Data::kMLimitIconFieldNumber;
const int GM_Recharge_Data::kMChannelFieldNumber;
const int GM_Recharge_Data::kMTagFieldNumber;
const int GM_Recharge_Data::kMHotFieldNumber;
const int GM_Recharge_Data::kMObjectnameFieldNumber;
#endif  // !_MSC_VER

GM_Recharge_Data::GM_Recharge_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recharge_Data::InitAsDefaultInstance() {
}

GM_Recharge_Data::GM_Recharge_Data(const GM_Recharge_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recharge_Data::SharedCtor() {
  _cached_size_ = 0;
  m_goodsid_ = 0;
  m_price_ = 0;
  m_getdamond_ = 0;
  m_reward_ = 0;
  m_limitreward_ = 0;
  m_type_ = 0;
  m_iconid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_limit_ = 0;
  m_limit_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_tag_ = 0;
  m_hot_ = 0;
  m_objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recharge_Data::~GM_Recharge_Data() {
  SharedDtor();
}

void GM_Recharge_Data::SharedDtor() {
  if (m_iconid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_iconid_;
  }
  if (m_limit_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_limit_icon_;
  }
  if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete m_channel_;
  }
  if (m_objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_objectname_;
  }
  if (this != default_instance_) {
  }
}

void GM_Recharge_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recharge_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recharge_Data_descriptor_;
}

const GM_Recharge_Data& GM_Recharge_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Recharge_Data* GM_Recharge_Data::default_instance_ = NULL;

GM_Recharge_Data* GM_Recharge_Data::New() const {
  return new GM_Recharge_Data;
}

void GM_Recharge_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_goodsid_ = 0;
    m_price_ = 0;
    m_getdamond_ = 0;
    m_reward_ = 0;
    m_limitreward_ = 0;
    m_type_ = 0;
    if (has_m_iconid()) {
      if (m_iconid_ != &::google::protobuf::internal::kEmptyString) {
        m_iconid_->clear();
      }
    }
    m_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_limit_icon()) {
      if (m_limit_icon_ != &::google::protobuf::internal::kEmptyString) {
        m_limit_icon_->clear();
      }
    }
    if (has_m_channel()) {
      if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
        m_channel_->clear();
      }
    }
    m_tag_ = 0;
    m_hot_ = 0;
    if (has_m_objectname()) {
      if (m_objectname_ != &::google::protobuf::internal::kEmptyString) {
        m_objectname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recharge_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_goodsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goodsid_)));
          set_has_m_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m_price;
        break;
      }

      // optional float m_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_getdamond;
        break;
      }

      // optional int32 m_getdamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_getdamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_getdamond_)));
          set_has_m_getdamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_limitreward;
        break;
      }

      // optional int32 m_limitreward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limitreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_limitreward_)));
          set_has_m_limitreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_iconid;
        break;
      }

      // optional string m_iconid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_iconid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_iconid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_iconid().data(), this->m_iconid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_limit;
        break;
      }

      // optional int32 m_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_limit_)));
          set_has_m_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_limit_icon;
        break;
      }

      // optional string m_limit_icon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_limit_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_limit_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_limit_icon().data(), this->m_limit_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_channel;
        break;
      }

      // optional string m_channel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_channel().data(), this->m_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_tag;
        break;
      }

      // optional int32 m_tag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tag_)));
          set_has_m_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_hot;
        break;
      }

      // optional int32 m_hot = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hot_)));
          set_has_m_hot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_objectname;
        break;
      }

      // optional string m_objectname = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_objectname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_objectname().data(), this->m_objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recharge_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_goodsid = 1;
  if (has_m_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_goodsid(), output);
  }

  // optional float m_price = 2;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->m_price(), output);
  }

  // optional int32 m_getdamond = 3;
  if (has_m_getdamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_getdamond(), output);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reward(), output);
  }

  // optional int32 m_limitreward = 5;
  if (has_m_limitreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_limitreward(), output);
  }

  // optional int32 m_type = 6;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_type(), output);
  }

  // optional string m_iconid = 7;
  if (has_m_iconid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_iconid().data(), this->m_iconid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_iconid(), output);
  }

  // optional int32 m_limit = 8;
  if (has_m_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_limit(), output);
  }

  // optional string m_limit_icon = 9;
  if (has_m_limit_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_limit_icon().data(), this->m_limit_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_limit_icon(), output);
  }

  // optional string m_channel = 10;
  if (has_m_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_channel().data(), this->m_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_channel(), output);
  }

  // optional int32 m_tag = 11;
  if (has_m_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_tag(), output);
  }

  // optional int32 m_hot = 12;
  if (has_m_hot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_hot(), output);
  }

  // optional string m_objectname = 13;
  if (has_m_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_objectname().data(), this->m_objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_objectname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recharge_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_goodsid = 1;
  if (has_m_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_goodsid(), target);
  }

  // optional float m_price = 2;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->m_price(), target);
  }

  // optional int32 m_getdamond = 3;
  if (has_m_getdamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_getdamond(), target);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reward(), target);
  }

  // optional int32 m_limitreward = 5;
  if (has_m_limitreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_limitreward(), target);
  }

  // optional int32 m_type = 6;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_type(), target);
  }

  // optional string m_iconid = 7;
  if (has_m_iconid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_iconid().data(), this->m_iconid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_iconid(), target);
  }

  // optional int32 m_limit = 8;
  if (has_m_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_limit(), target);
  }

  // optional string m_limit_icon = 9;
  if (has_m_limit_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_limit_icon().data(), this->m_limit_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_limit_icon(), target);
  }

  // optional string m_channel = 10;
  if (has_m_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_channel().data(), this->m_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_channel(), target);
  }

  // optional int32 m_tag = 11;
  if (has_m_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_tag(), target);
  }

  // optional int32 m_hot = 12;
  if (has_m_hot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_hot(), target);
  }

  // optional string m_objectname = 13;
  if (has_m_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_objectname().data(), this->m_objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_objectname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recharge_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_goodsid = 1;
    if (has_m_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goodsid());
    }

    // optional float m_price = 2;
    if (has_m_price()) {
      total_size += 1 + 4;
    }

    // optional int32 m_getdamond = 3;
    if (has_m_getdamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_getdamond());
    }

    // optional int32 m_reward = 4;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_limitreward = 5;
    if (has_m_limitreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_limitreward());
    }

    // optional int32 m_type = 6;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_iconid = 7;
    if (has_m_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_iconid());
    }

    // optional int32 m_limit = 8;
    if (has_m_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_limit_icon = 9;
    if (has_m_limit_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_limit_icon());
    }

    // optional string m_channel = 10;
    if (has_m_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_channel());
    }

    // optional int32 m_tag = 11;
    if (has_m_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tag());
    }

    // optional int32 m_hot = 12;
    if (has_m_hot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hot());
    }

    // optional string m_objectname = 13;
    if (has_m_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_objectname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recharge_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recharge_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recharge_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recharge_Data::MergeFrom(const GM_Recharge_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_goodsid()) {
      set_m_goodsid(from.m_goodsid());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_getdamond()) {
      set_m_getdamond(from.m_getdamond());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_limitreward()) {
      set_m_limitreward(from.m_limitreward());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_iconid()) {
      set_m_iconid(from.m_iconid());
    }
    if (from.has_m_limit()) {
      set_m_limit(from.m_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_limit_icon()) {
      set_m_limit_icon(from.m_limit_icon());
    }
    if (from.has_m_channel()) {
      set_m_channel(from.m_channel());
    }
    if (from.has_m_tag()) {
      set_m_tag(from.m_tag());
    }
    if (from.has_m_hot()) {
      set_m_hot(from.m_hot());
    }
    if (from.has_m_objectname()) {
      set_m_objectname(from.m_objectname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recharge_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recharge_Data::CopyFrom(const GM_Recharge_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recharge_Data::IsInitialized() const {

  return true;
}

void GM_Recharge_Data::Swap(GM_Recharge_Data* other) {
  if (other != this) {
    std::swap(m_goodsid_, other->m_goodsid_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_getdamond_, other->m_getdamond_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_limitreward_, other->m_limitreward_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_iconid_, other->m_iconid_);
    std::swap(m_limit_, other->m_limit_);
    std::swap(m_limit_icon_, other->m_limit_icon_);
    std::swap(m_channel_, other->m_channel_);
    std::swap(m_tag_, other->m_tag_);
    std::swap(m_hot_, other->m_hot_);
    std::swap(m_objectname_, other->m_objectname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recharge_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recharge_Data_descriptor_;
  metadata.reflection = GM_Recharge_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recharge_Open::kMChannelFieldNumber;
#endif  // !_MSC_VER

GM_Recharge_Open::GM_Recharge_Open()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recharge_Open::InitAsDefaultInstance() {
}

GM_Recharge_Open::GM_Recharge_Open(const GM_Recharge_Open& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recharge_Open::SharedCtor() {
  _cached_size_ = 0;
  m_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recharge_Open::~GM_Recharge_Open() {
  SharedDtor();
}

void GM_Recharge_Open::SharedDtor() {
  if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete m_channel_;
  }
  if (this != default_instance_) {
  }
}

void GM_Recharge_Open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recharge_Open::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recharge_Open_descriptor_;
}

const GM_Recharge_Open& GM_Recharge_Open::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Recharge_Open* GM_Recharge_Open::default_instance_ = NULL;

GM_Recharge_Open* GM_Recharge_Open::New() const {
  return new GM_Recharge_Open;
}

void GM_Recharge_Open::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_channel()) {
      if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
        m_channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recharge_Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_channel().data(), this->m_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recharge_Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_channel = 1;
  if (has_m_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_channel().data(), this->m_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recharge_Open::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_channel = 1;
  if (has_m_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_channel().data(), this->m_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recharge_Open::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_channel = 1;
    if (has_m_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recharge_Open::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recharge_Open* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recharge_Open*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recharge_Open::MergeFrom(const GM_Recharge_Open& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_channel()) {
      set_m_channel(from.m_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recharge_Open::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recharge_Open::CopyFrom(const GM_Recharge_Open& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recharge_Open::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Recharge_Open::Swap(GM_Recharge_Open* other) {
  if (other != this) {
    std::swap(m_channel_, other->m_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recharge_Open::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recharge_Open_descriptor_;
  metadata.reflection = GM_Recharge_Open_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recharge_Open_Return::kMDataFieldNumber;
const int GM_Recharge_Open_Return::kMCard30TimeFieldNumber;
const int GM_Recharge_Open_Return::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Recharge_Open_Return::GM_Recharge_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recharge_Open_Return::InitAsDefaultInstance() {
}

GM_Recharge_Open_Return::GM_Recharge_Open_Return(const GM_Recharge_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recharge_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  m_card30_time_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recharge_Open_Return::~GM_Recharge_Open_Return() {
  SharedDtor();
}

void GM_Recharge_Open_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Recharge_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recharge_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recharge_Open_Return_descriptor_;
}

const GM_Recharge_Open_Return& GM_Recharge_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Recharge_Open_Return* GM_Recharge_Open_Return::default_instance_ = NULL;

GM_Recharge_Open_Return* GM_Recharge_Open_Return::New() const {
  return new GM_Recharge_Open_Return;
}

void GM_Recharge_Open_Return::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_card30_time_ = 0;
    m_state_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recharge_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_Recharge_Data m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectTag(16)) goto parse_m_card30_time;
        break;
      }

      // required int32 m_card30_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_card30_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_card30_time_)));
          set_has_m_card30_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // required int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recharge_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_Recharge_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  // required int32 m_card30_time = 2;
  if (has_m_card30_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_card30_time(), output);
  }

  // required int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recharge_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_Recharge_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  // required int32 m_card30_time = 2;
  if (has_m_card30_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_card30_time(), target);
  }

  // required int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recharge_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 m_card30_time = 2;
    if (has_m_card30_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_card30_time());
    }

    // required int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  // repeated .GM_Recharge_Data m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recharge_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recharge_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recharge_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recharge_Open_Return::MergeFrom(const GM_Recharge_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_card30_time()) {
      set_m_card30_time(from.m_card30_time());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recharge_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recharge_Open_Return::CopyFrom(const GM_Recharge_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recharge_Open_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void GM_Recharge_Open_Return::Swap(GM_Recharge_Open_Return* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(m_card30_time_, other->m_card30_time_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recharge_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recharge_Open_Return_descriptor_;
  metadata.reflection = GM_Recharge_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Walfare_Return::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Walfare_Return::GM_Shop_Walfare_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Walfare_Return::InitAsDefaultInstance() {
}

GM_Shop_Walfare_Return::GM_Shop_Walfare_Return(const GM_Shop_Walfare_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Walfare_Return::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Walfare_Return::~GM_Shop_Walfare_Return() {
  SharedDtor();
}

void GM_Shop_Walfare_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Walfare_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Walfare_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Walfare_Return_descriptor_;
}

const GM_Shop_Walfare_Return& GM_Shop_Walfare_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Walfare_Return* GM_Shop_Walfare_Return::default_instance_ = NULL;

GM_Shop_Walfare_Return* GM_Shop_Walfare_Return::New() const {
  return new GM_Shop_Walfare_Return;
}

void GM_Shop_Walfare_Return::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Walfare_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_Shop_Walfare_Data m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Walfare_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_Shop_Walfare_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Walfare_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_Shop_Walfare_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Walfare_Return::ByteSize() const {
  int total_size = 0;

  // repeated .GM_Shop_Walfare_Data m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Walfare_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Walfare_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Walfare_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Walfare_Return::MergeFrom(const GM_Shop_Walfare_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Walfare_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Walfare_Return::CopyFrom(const GM_Shop_Walfare_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Walfare_Return::IsInitialized() const {

  return true;
}

void GM_Shop_Walfare_Return::Swap(GM_Shop_Walfare_Return* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Walfare_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Walfare_Return_descriptor_;
  metadata.reflection = GM_Shop_Walfare_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Walfare_Data::kMObjectidFieldNumber;
const int GM_Shop_Walfare_Data::kMCostPriceFieldNumber;
const int GM_Shop_Walfare_Data::kMCutpriceFieldNumber;
const int GM_Shop_Walfare_Data::kMVipLimitFieldNumber;
const int GM_Shop_Walfare_Data::kMPersonLimitFieldNumber;
const int GM_Shop_Walfare_Data::kMPersonCountFieldNumber;
const int GM_Shop_Walfare_Data::kMServerLimitFieldNumber;
const int GM_Shop_Walfare_Data::kMServerCountFieldNumber;
const int GM_Shop_Walfare_Data::kMDescripte1FieldNumber;
const int GM_Shop_Walfare_Data::kMObjectNameFieldNumber;
const int GM_Shop_Walfare_Data::kMObjectIconFieldNumber;
const int GM_Shop_Walfare_Data::kMColorFieldNumber;
const int GM_Shop_Walfare_Data::kMBagTypeFieldNumber;
const int GM_Shop_Walfare_Data::kMObjectTypeFieldNumber;
const int GM_Shop_Walfare_Data::kMProfessionFieldNumber;
const int GM_Shop_Walfare_Data::kMStacklimitFieldNumber;
const int GM_Shop_Walfare_Data::kMUsedlevelFieldNumber;
const int GM_Shop_Walfare_Data::kMBuygoldFieldNumber;
const int GM_Shop_Walfare_Data::kMSellgoldFieldNumber;
const int GM_Shop_Walfare_Data::kMDescribe2FieldNumber;
const int GM_Shop_Walfare_Data::kMObjectrankFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Walfare_Data::GM_Shop_Walfare_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Walfare_Data::InitAsDefaultInstance() {
}

GM_Shop_Walfare_Data::GM_Shop_Walfare_Data(const GM_Shop_Walfare_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Walfare_Data::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_cost_price_ = 0;
  m_cutprice_ = 0;
  m_vip_limit_ = 0;
  m_person_limit_ = 0;
  m_person_count_ = 0;
  m_server_limit_ = 0;
  m_server_count_ = 0;
  m_descripte_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_object_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_color_ = 0;
  m_bag_type_ = 0;
  m_object_type_ = 0;
  m_profession_ = 0;
  m_stacklimit_ = 0;
  m_usedlevel_ = 0;
  m_buygold_ = 0;
  m_sellgold_ = 0;
  m_describe_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_objectrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Walfare_Data::~GM_Shop_Walfare_Data() {
  SharedDtor();
}

void GM_Shop_Walfare_Data::SharedDtor() {
  if (m_descripte_1_ != &::google::protobuf::internal::kEmptyString) {
    delete m_descripte_1_;
  }
  if (m_object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_object_name_;
  }
  if (m_object_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_object_icon_;
  }
  if (m_describe_2_ != &::google::protobuf::internal::kEmptyString) {
    delete m_describe_2_;
  }
  if (this != default_instance_) {
  }
}

void GM_Shop_Walfare_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Walfare_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Walfare_Data_descriptor_;
}

const GM_Shop_Walfare_Data& GM_Shop_Walfare_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Walfare_Data* GM_Shop_Walfare_Data::default_instance_ = NULL;

GM_Shop_Walfare_Data* GM_Shop_Walfare_Data::New() const {
  return new GM_Shop_Walfare_Data;
}

void GM_Shop_Walfare_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_cost_price_ = 0;
    m_cutprice_ = 0;
    m_vip_limit_ = 0;
    m_person_limit_ = 0;
    m_person_count_ = 0;
    m_server_limit_ = 0;
    m_server_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_descripte_1()) {
      if (m_descripte_1_ != &::google::protobuf::internal::kEmptyString) {
        m_descripte_1_->clear();
      }
    }
    if (has_m_object_name()) {
      if (m_object_name_ != &::google::protobuf::internal::kEmptyString) {
        m_object_name_->clear();
      }
    }
    if (has_m_object_icon()) {
      if (m_object_icon_ != &::google::protobuf::internal::kEmptyString) {
        m_object_icon_->clear();
      }
    }
    m_color_ = 0;
    m_bag_type_ = 0;
    m_object_type_ = 0;
    m_profession_ = 0;
    m_stacklimit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_usedlevel_ = 0;
    m_buygold_ = 0;
    m_sellgold_ = 0;
    if (has_m_describe_2()) {
      if (m_describe_2_ != &::google::protobuf::internal::kEmptyString) {
        m_describe_2_->clear();
      }
    }
    m_objectrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Walfare_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cost_price;
        break;
      }

      // optional int32 m_cost_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_price_)));
          set_has_m_cost_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_cutprice;
        break;
      }

      // optional int32 m_cutprice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cutprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cutprice_)));
          set_has_m_cutprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_vip_limit;
        break;
      }

      // optional int32 m_vip_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vip_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_limit_)));
          set_has_m_vip_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_person_limit;
        break;
      }

      // optional int32 m_person_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_person_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_person_limit_)));
          set_has_m_person_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_person_count;
        break;
      }

      // optional int32 m_person_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_person_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_person_count_)));
          set_has_m_person_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_server_limit;
        break;
      }

      // optional int32 m_server_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_server_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_server_limit_)));
          set_has_m_server_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_server_count;
        break;
      }

      // optional int32 m_server_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_server_count_)));
          set_has_m_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_descripte_1;
        break;
      }

      // optional string m_descripte_1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_descripte_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_descripte_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_descripte_1().data(), this->m_descripte_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_object_name;
        break;
      }

      // optional string m_object_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_object_name().data(), this->m_object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_object_icon;
        break;
      }

      // optional string m_object_icon = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_object_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_object_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_object_icon().data(), this->m_object_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_color;
        break;
      }

      // optional int32 m_color = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_color_)));
          set_has_m_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_bag_type;
        break;
      }

      // optional int32 m_bag_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bag_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bag_type_)));
          set_has_m_bag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_object_type;
        break;
      }

      // optional int32 m_object_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_object_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_object_type_)));
          set_has_m_object_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_stacklimit;
        break;
      }

      // optional int32 m_stacklimit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_stacklimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_stacklimit_)));
          set_has_m_stacklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_usedlevel;
        break;
      }

      // optional int32 m_usedlevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_usedlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_usedlevel_)));
          set_has_m_usedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_buygold;
        break;
      }

      // optional int32 m_buygold = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buygold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buygold_)));
          set_has_m_buygold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_sellgold;
        break;
      }

      // optional int32 m_sellgold = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sellgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sellgold_)));
          set_has_m_sellgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_describe_2;
        break;
      }

      // optional string m_describe_2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_describe_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_describe_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_describe_2().data(), this->m_describe_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_objectrank;
        break;
      }

      // optional int32 m_objectrank = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectrank_)));
          set_has_m_objectrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Walfare_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_cost_price = 2;
  if (has_m_cost_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_cost_price(), output);
  }

  // optional int32 m_cutprice = 3;
  if (has_m_cutprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_cutprice(), output);
  }

  // optional int32 m_vip_limit = 4;
  if (has_m_vip_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_vip_limit(), output);
  }

  // optional int32 m_person_limit = 5;
  if (has_m_person_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_person_limit(), output);
  }

  // optional int32 m_person_count = 6;
  if (has_m_person_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_person_count(), output);
  }

  // optional int32 m_server_limit = 7;
  if (has_m_server_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_server_limit(), output);
  }

  // optional int32 m_server_count = 8;
  if (has_m_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_server_count(), output);
  }

  // optional string m_descripte_1 = 9;
  if (has_m_descripte_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_descripte_1().data(), this->m_descripte_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_descripte_1(), output);
  }

  // optional string m_object_name = 10;
  if (has_m_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_object_name().data(), this->m_object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_object_name(), output);
  }

  // optional string m_object_icon = 11;
  if (has_m_object_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_object_icon().data(), this->m_object_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_object_icon(), output);
  }

  // optional int32 m_color = 12;
  if (has_m_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_color(), output);
  }

  // optional int32 m_bag_type = 13;
  if (has_m_bag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_bag_type(), output);
  }

  // optional int32 m_object_type = 14;
  if (has_m_object_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_object_type(), output);
  }

  // optional int32 m_profession = 15;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_profession(), output);
  }

  // optional int32 m_stacklimit = 16;
  if (has_m_stacklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_stacklimit(), output);
  }

  // optional int32 m_usedlevel = 17;
  if (has_m_usedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_usedlevel(), output);
  }

  // optional int32 m_buygold = 18;
  if (has_m_buygold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_buygold(), output);
  }

  // optional int32 m_sellgold = 19;
  if (has_m_sellgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_sellgold(), output);
  }

  // optional string m_describe_2 = 20;
  if (has_m_describe_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe_2().data(), this->m_describe_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->m_describe_2(), output);
  }

  // optional int32 m_objectrank = 21;
  if (has_m_objectrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_objectrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Walfare_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_cost_price = 2;
  if (has_m_cost_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_cost_price(), target);
  }

  // optional int32 m_cutprice = 3;
  if (has_m_cutprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_cutprice(), target);
  }

  // optional int32 m_vip_limit = 4;
  if (has_m_vip_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_vip_limit(), target);
  }

  // optional int32 m_person_limit = 5;
  if (has_m_person_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_person_limit(), target);
  }

  // optional int32 m_person_count = 6;
  if (has_m_person_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_person_count(), target);
  }

  // optional int32 m_server_limit = 7;
  if (has_m_server_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_server_limit(), target);
  }

  // optional int32 m_server_count = 8;
  if (has_m_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_server_count(), target);
  }

  // optional string m_descripte_1 = 9;
  if (has_m_descripte_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_descripte_1().data(), this->m_descripte_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_descripte_1(), target);
  }

  // optional string m_object_name = 10;
  if (has_m_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_object_name().data(), this->m_object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_object_name(), target);
  }

  // optional string m_object_icon = 11;
  if (has_m_object_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_object_icon().data(), this->m_object_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_object_icon(), target);
  }

  // optional int32 m_color = 12;
  if (has_m_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_color(), target);
  }

  // optional int32 m_bag_type = 13;
  if (has_m_bag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_bag_type(), target);
  }

  // optional int32 m_object_type = 14;
  if (has_m_object_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_object_type(), target);
  }

  // optional int32 m_profession = 15;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_profession(), target);
  }

  // optional int32 m_stacklimit = 16;
  if (has_m_stacklimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_stacklimit(), target);
  }

  // optional int32 m_usedlevel = 17;
  if (has_m_usedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_usedlevel(), target);
  }

  // optional int32 m_buygold = 18;
  if (has_m_buygold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_buygold(), target);
  }

  // optional int32 m_sellgold = 19;
  if (has_m_sellgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_sellgold(), target);
  }

  // optional string m_describe_2 = 20;
  if (has_m_describe_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe_2().data(), this->m_describe_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->m_describe_2(), target);
  }

  // optional int32 m_objectrank = 21;
  if (has_m_objectrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_objectrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Walfare_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_cost_price = 2;
    if (has_m_cost_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost_price());
    }

    // optional int32 m_cutprice = 3;
    if (has_m_cutprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cutprice());
    }

    // optional int32 m_vip_limit = 4;
    if (has_m_vip_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip_limit());
    }

    // optional int32 m_person_limit = 5;
    if (has_m_person_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_person_limit());
    }

    // optional int32 m_person_count = 6;
    if (has_m_person_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_person_count());
    }

    // optional int32 m_server_limit = 7;
    if (has_m_server_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_server_limit());
    }

    // optional int32 m_server_count = 8;
    if (has_m_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_server_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_descripte_1 = 9;
    if (has_m_descripte_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_descripte_1());
    }

    // optional string m_object_name = 10;
    if (has_m_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_object_name());
    }

    // optional string m_object_icon = 11;
    if (has_m_object_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_object_icon());
    }

    // optional int32 m_color = 12;
    if (has_m_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_color());
    }

    // optional int32 m_bag_type = 13;
    if (has_m_bag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bag_type());
    }

    // optional int32 m_object_type = 14;
    if (has_m_object_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_object_type());
    }

    // optional int32 m_profession = 15;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional int32 m_stacklimit = 16;
    if (has_m_stacklimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_stacklimit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_usedlevel = 17;
    if (has_m_usedlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_usedlevel());
    }

    // optional int32 m_buygold = 18;
    if (has_m_buygold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buygold());
    }

    // optional int32 m_sellgold = 19;
    if (has_m_sellgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sellgold());
    }

    // optional string m_describe_2 = 20;
    if (has_m_describe_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_describe_2());
    }

    // optional int32 m_objectrank = 21;
    if (has_m_objectrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Walfare_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Walfare_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Walfare_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Walfare_Data::MergeFrom(const GM_Shop_Walfare_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_cost_price()) {
      set_m_cost_price(from.m_cost_price());
    }
    if (from.has_m_cutprice()) {
      set_m_cutprice(from.m_cutprice());
    }
    if (from.has_m_vip_limit()) {
      set_m_vip_limit(from.m_vip_limit());
    }
    if (from.has_m_person_limit()) {
      set_m_person_limit(from.m_person_limit());
    }
    if (from.has_m_person_count()) {
      set_m_person_count(from.m_person_count());
    }
    if (from.has_m_server_limit()) {
      set_m_server_limit(from.m_server_limit());
    }
    if (from.has_m_server_count()) {
      set_m_server_count(from.m_server_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_descripte_1()) {
      set_m_descripte_1(from.m_descripte_1());
    }
    if (from.has_m_object_name()) {
      set_m_object_name(from.m_object_name());
    }
    if (from.has_m_object_icon()) {
      set_m_object_icon(from.m_object_icon());
    }
    if (from.has_m_color()) {
      set_m_color(from.m_color());
    }
    if (from.has_m_bag_type()) {
      set_m_bag_type(from.m_bag_type());
    }
    if (from.has_m_object_type()) {
      set_m_object_type(from.m_object_type());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_stacklimit()) {
      set_m_stacklimit(from.m_stacklimit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_usedlevel()) {
      set_m_usedlevel(from.m_usedlevel());
    }
    if (from.has_m_buygold()) {
      set_m_buygold(from.m_buygold());
    }
    if (from.has_m_sellgold()) {
      set_m_sellgold(from.m_sellgold());
    }
    if (from.has_m_describe_2()) {
      set_m_describe_2(from.m_describe_2());
    }
    if (from.has_m_objectrank()) {
      set_m_objectrank(from.m_objectrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Walfare_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Walfare_Data::CopyFrom(const GM_Shop_Walfare_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Walfare_Data::IsInitialized() const {

  return true;
}

void GM_Shop_Walfare_Data::Swap(GM_Shop_Walfare_Data* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_cost_price_, other->m_cost_price_);
    std::swap(m_cutprice_, other->m_cutprice_);
    std::swap(m_vip_limit_, other->m_vip_limit_);
    std::swap(m_person_limit_, other->m_person_limit_);
    std::swap(m_person_count_, other->m_person_count_);
    std::swap(m_server_limit_, other->m_server_limit_);
    std::swap(m_server_count_, other->m_server_count_);
    std::swap(m_descripte_1_, other->m_descripte_1_);
    std::swap(m_object_name_, other->m_object_name_);
    std::swap(m_object_icon_, other->m_object_icon_);
    std::swap(m_color_, other->m_color_);
    std::swap(m_bag_type_, other->m_bag_type_);
    std::swap(m_object_type_, other->m_object_type_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_stacklimit_, other->m_stacklimit_);
    std::swap(m_usedlevel_, other->m_usedlevel_);
    std::swap(m_buygold_, other->m_buygold_);
    std::swap(m_sellgold_, other->m_sellgold_);
    std::swap(m_describe_2_, other->m_describe_2_);
    std::swap(m_objectrank_, other->m_objectrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Walfare_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Walfare_Data_descriptor_;
  metadata.reflection = GM_Shop_Walfare_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Single_Walfare_Request::kMObjectidFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Single_Walfare_Request::GM_Shop_Single_Walfare_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Single_Walfare_Request::InitAsDefaultInstance() {
}

GM_Shop_Single_Walfare_Request::GM_Shop_Single_Walfare_Request(const GM_Shop_Single_Walfare_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Single_Walfare_Request::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Single_Walfare_Request::~GM_Shop_Single_Walfare_Request() {
  SharedDtor();
}

void GM_Shop_Single_Walfare_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Single_Walfare_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Single_Walfare_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Single_Walfare_Request_descriptor_;
}

const GM_Shop_Single_Walfare_Request& GM_Shop_Single_Walfare_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Single_Walfare_Request* GM_Shop_Single_Walfare_Request::default_instance_ = NULL;

GM_Shop_Single_Walfare_Request* GM_Shop_Single_Walfare_Request::New() const {
  return new GM_Shop_Single_Walfare_Request;
}

void GM_Shop_Single_Walfare_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Single_Walfare_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Single_Walfare_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Single_Walfare_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Single_Walfare_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Single_Walfare_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Single_Walfare_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Single_Walfare_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Single_Walfare_Request::MergeFrom(const GM_Shop_Single_Walfare_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Single_Walfare_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Single_Walfare_Request::CopyFrom(const GM_Shop_Single_Walfare_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Single_Walfare_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Shop_Single_Walfare_Request::Swap(GM_Shop_Single_Walfare_Request* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Single_Walfare_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Single_Walfare_Request_descriptor_;
  metadata.reflection = GM_Shop_Single_Walfare_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Single_Walfare_buy_Return::kMStateFieldNumber;
const int GM_Single_Walfare_buy_Return::kMObjectidFieldNumber;
const int GM_Single_Walfare_buy_Return::kMCountFieldNumber;
const int GM_Single_Walfare_buy_Return::kMDetailFieldNumber;
#endif  // !_MSC_VER

GM_Single_Walfare_buy_Return::GM_Single_Walfare_buy_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Single_Walfare_buy_Return::InitAsDefaultInstance() {
}

GM_Single_Walfare_buy_Return::GM_Single_Walfare_buy_Return(const GM_Single_Walfare_buy_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Single_Walfare_buy_Return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_objectid_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Single_Walfare_buy_Return::~GM_Single_Walfare_buy_Return() {
  SharedDtor();
}

void GM_Single_Walfare_buy_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Single_Walfare_buy_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Single_Walfare_buy_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Single_Walfare_buy_Return_descriptor_;
}

const GM_Single_Walfare_buy_Return& GM_Single_Walfare_buy_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Single_Walfare_buy_Return* GM_Single_Walfare_buy_Return::default_instance_ = NULL;

GM_Single_Walfare_buy_Return* GM_Single_Walfare_buy_Return::New() const {
  return new GM_Single_Walfare_buy_Return;
}

void GM_Single_Walfare_buy_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
    m_objectid_ = 0;
    m_count_ = 0;
  }
  m_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Single_Walfare_buy_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objectid;
        break;
      }

      // optional int32 m_objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_count;
        break;
      }

      // optional int32 m_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_detail;
        break;
      }

      // repeated .GM_Goods_Detail m_detail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Single_Walfare_buy_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // optional int32 m_objectid = 2;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objectid(), output);
  }

  // optional int32 m_count = 3;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_count(), output);
  }

  // repeated .GM_Goods_Detail m_detail = 4;
  for (int i = 0; i < this->m_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Single_Walfare_buy_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // optional int32 m_objectid = 2;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objectid(), target);
  }

  // optional int32 m_count = 3;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_count(), target);
  }

  // repeated .GM_Goods_Detail m_detail = 4;
  for (int i = 0; i < this->m_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Single_Walfare_buy_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_objectid = 2;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_count = 3;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_Goods_Detail m_detail = 4;
  total_size += 1 * this->m_detail_size();
  for (int i = 0; i < this->m_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Single_Walfare_buy_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Single_Walfare_buy_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Single_Walfare_buy_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Single_Walfare_buy_Return::MergeFrom(const GM_Single_Walfare_buy_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_detail_.MergeFrom(from.m_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Single_Walfare_buy_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Single_Walfare_buy_Return::CopyFrom(const GM_Single_Walfare_buy_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Single_Walfare_buy_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_detail_size(); i++) {
    if (!this->m_detail(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Single_Walfare_buy_Return::Swap(GM_Single_Walfare_buy_Return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_count_, other->m_count_);
    m_detail_.Swap(&other->m_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Single_Walfare_buy_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Single_Walfare_buy_Return_descriptor_;
  metadata.reflection = GM_Single_Walfare_buy_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Goods_Detail::kMObjectidFieldNumber;
const int GM_Goods_Detail::kMGetnumFieldNumber;
#endif  // !_MSC_VER

GM_Goods_Detail::GM_Goods_Detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Goods_Detail::InitAsDefaultInstance() {
}

GM_Goods_Detail::GM_Goods_Detail(const GM_Goods_Detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Goods_Detail::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_getnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Goods_Detail::~GM_Goods_Detail() {
  SharedDtor();
}

void GM_Goods_Detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Goods_Detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Goods_Detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Goods_Detail_descriptor_;
}

const GM_Goods_Detail& GM_Goods_Detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Goods_Detail* GM_Goods_Detail::default_instance_ = NULL;

GM_Goods_Detail* GM_Goods_Detail::New() const {
  return new GM_Goods_Detail;
}

void GM_Goods_Detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_getnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Goods_Detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_getnum;
        break;
      }

      // optional int32 m_getnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_getnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_getnum_)));
          set_has_m_getnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Goods_Detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_getnum = 2;
  if (has_m_getnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_getnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Goods_Detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_getnum = 2;
  if (has_m_getnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_getnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Goods_Detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_getnum = 2;
    if (has_m_getnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_getnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Goods_Detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Goods_Detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Goods_Detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Goods_Detail::MergeFrom(const GM_Goods_Detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_getnum()) {
      set_m_getnum(from.m_getnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Goods_Detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Goods_Detail::CopyFrom(const GM_Goods_Detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Goods_Detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Goods_Detail::Swap(GM_Goods_Detail* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_getnum_, other->m_getnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Goods_Detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Goods_Detail_descriptor_;
  metadata.reflection = GM_Goods_Detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Single_Walfare_Retrun::kMGiftidFieldNumber;
const int GM_Shop_Single_Walfare_Retrun::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Single_Walfare_Retrun::GM_Shop_Single_Walfare_Retrun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Single_Walfare_Retrun::InitAsDefaultInstance() {
}

GM_Shop_Single_Walfare_Retrun::GM_Shop_Single_Walfare_Retrun(const GM_Shop_Single_Walfare_Retrun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Single_Walfare_Retrun::SharedCtor() {
  _cached_size_ = 0;
  m_giftid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Single_Walfare_Retrun::~GM_Shop_Single_Walfare_Retrun() {
  SharedDtor();
}

void GM_Shop_Single_Walfare_Retrun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Single_Walfare_Retrun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Single_Walfare_Retrun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Single_Walfare_Retrun_descriptor_;
}

const GM_Shop_Single_Walfare_Retrun& GM_Shop_Single_Walfare_Retrun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Single_Walfare_Retrun* GM_Shop_Single_Walfare_Retrun::default_instance_ = NULL;

GM_Shop_Single_Walfare_Retrun* GM_Shop_Single_Walfare_Retrun::New() const {
  return new GM_Shop_Single_Walfare_Retrun;
}

void GM_Shop_Single_Walfare_Retrun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_giftid_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Single_Walfare_Retrun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_giftid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giftid_)));
          set_has_m_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_Single_Walfare_Data m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Single_Walfare_Retrun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_giftid = 1;
  if (has_m_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_giftid(), output);
  }

  // repeated .GM_Single_Walfare_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Single_Walfare_Retrun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_giftid = 1;
  if (has_m_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_giftid(), target);
  }

  // repeated .GM_Single_Walfare_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Single_Walfare_Retrun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_giftid = 1;
    if (has_m_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giftid());
    }

  }
  // repeated .GM_Single_Walfare_Data m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Single_Walfare_Retrun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Single_Walfare_Retrun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Single_Walfare_Retrun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Single_Walfare_Retrun::MergeFrom(const GM_Shop_Single_Walfare_Retrun& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_giftid()) {
      set_m_giftid(from.m_giftid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Single_Walfare_Retrun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Single_Walfare_Retrun::CopyFrom(const GM_Shop_Single_Walfare_Retrun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Single_Walfare_Retrun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Shop_Single_Walfare_Retrun::Swap(GM_Shop_Single_Walfare_Retrun* other) {
  if (other != this) {
    std::swap(m_giftid_, other->m_giftid_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Single_Walfare_Retrun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Single_Walfare_Retrun_descriptor_;
  metadata.reflection = GM_Shop_Single_Walfare_Retrun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Single_Walfare_Data::kMObjectidFieldNumber;
const int GM_Single_Walfare_Data::kMGetMincountFieldNumber;
const int GM_Single_Walfare_Data::kMGetMaxcountFieldNumber;
const int GM_Single_Walfare_Data::kMGetRatioFieldNumber;
#endif  // !_MSC_VER

GM_Single_Walfare_Data::GM_Single_Walfare_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Single_Walfare_Data::InitAsDefaultInstance() {
}

GM_Single_Walfare_Data::GM_Single_Walfare_Data(const GM_Single_Walfare_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Single_Walfare_Data::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_get_mincount_ = 0;
  m_get_maxcount_ = 0;
  m_get_ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Single_Walfare_Data::~GM_Single_Walfare_Data() {
  SharedDtor();
}

void GM_Single_Walfare_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Single_Walfare_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Single_Walfare_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Single_Walfare_Data_descriptor_;
}

const GM_Single_Walfare_Data& GM_Single_Walfare_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Single_Walfare_Data* GM_Single_Walfare_Data::default_instance_ = NULL;

GM_Single_Walfare_Data* GM_Single_Walfare_Data::New() const {
  return new GM_Single_Walfare_Data;
}

void GM_Single_Walfare_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_get_mincount_ = 0;
    m_get_maxcount_ = 0;
    m_get_ratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Single_Walfare_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_get_mincount;
        break;
      }

      // optional int32 m_get_mincount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_get_mincount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_get_mincount_)));
          set_has_m_get_mincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_get_maxcount;
        break;
      }

      // optional int32 m_get_maxcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_get_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_get_maxcount_)));
          set_has_m_get_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_get_ratio;
        break;
      }

      // optional int32 m_get_ratio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_get_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_get_ratio_)));
          set_has_m_get_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Single_Walfare_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_get_mincount = 2;
  if (has_m_get_mincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_get_mincount(), output);
  }

  // optional int32 m_get_maxcount = 3;
  if (has_m_get_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_get_maxcount(), output);
  }

  // optional int32 m_get_ratio = 4;
  if (has_m_get_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_get_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Single_Walfare_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_get_mincount = 2;
  if (has_m_get_mincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_get_mincount(), target);
  }

  // optional int32 m_get_maxcount = 3;
  if (has_m_get_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_get_maxcount(), target);
  }

  // optional int32 m_get_ratio = 4;
  if (has_m_get_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_get_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Single_Walfare_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_get_mincount = 2;
    if (has_m_get_mincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_get_mincount());
    }

    // optional int32 m_get_maxcount = 3;
    if (has_m_get_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_get_maxcount());
    }

    // optional int32 m_get_ratio = 4;
    if (has_m_get_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_get_ratio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Single_Walfare_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Single_Walfare_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Single_Walfare_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Single_Walfare_Data::MergeFrom(const GM_Single_Walfare_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_get_mincount()) {
      set_m_get_mincount(from.m_get_mincount());
    }
    if (from.has_m_get_maxcount()) {
      set_m_get_maxcount(from.m_get_maxcount());
    }
    if (from.has_m_get_ratio()) {
      set_m_get_ratio(from.m_get_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Single_Walfare_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Single_Walfare_Data::CopyFrom(const GM_Single_Walfare_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Single_Walfare_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Single_Walfare_Data::Swap(GM_Single_Walfare_Data* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_get_mincount_, other->m_get_mincount_);
    std::swap(m_get_maxcount_, other->m_get_maxcount_);
    std::swap(m_get_ratio_, other->m_get_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Single_Walfare_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Single_Walfare_Data_descriptor_;
  metadata.reflection = GM_Single_Walfare_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Object_Return::kMDataFieldNumber;
const int GM_Shop_Object_Return::kIsnewFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Object_Return::GM_Shop_Object_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Object_Return::InitAsDefaultInstance() {
}

GM_Shop_Object_Return::GM_Shop_Object_Return(const GM_Shop_Object_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Object_Return::SharedCtor() {
  _cached_size_ = 0;
  isnew_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Object_Return::~GM_Shop_Object_Return() {
  SharedDtor();
}

void GM_Shop_Object_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Object_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Object_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Object_Return_descriptor_;
}

const GM_Shop_Object_Return& GM_Shop_Object_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Object_Return* GM_Shop_Object_Return::default_instance_ = NULL;

GM_Shop_Object_Return* GM_Shop_Object_Return::New() const {
  return new GM_Shop_Object_Return;
}

void GM_Shop_Object_Return::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isnew_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Object_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_Shop_Object_Data m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectTag(16)) goto parse_isnew;
        break;
      }

      // required int32 isnew = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Object_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_Shop_Object_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  // required int32 isnew = 2;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isnew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Object_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_Shop_Object_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  // required int32 isnew = 2;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isnew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Object_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 isnew = 2;
    if (has_isnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnew());
    }

  }
  // repeated .GM_Shop_Object_Data m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Object_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Object_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Object_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Object_Return::MergeFrom(const GM_Shop_Object_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Object_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Object_Return::CopyFrom(const GM_Shop_Object_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Object_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GM_Shop_Object_Return::Swap(GM_Shop_Object_Return* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(isnew_, other->isnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Object_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Object_Return_descriptor_;
  metadata.reflection = GM_Shop_Object_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Object_Data::kObjectidFieldNumber;
const int GM_Shop_Object_Data::kObjectrankFieldNumber;
const int GM_Shop_Object_Data::kBuyTypeFieldNumber;
const int GM_Shop_Object_Data::kVipCountFieldNumber;
const int GM_Shop_Object_Data::kDescripteFieldNumber;
const int GM_Shop_Object_Data::kNowCountFieldNumber;
const int GM_Shop_Object_Data::kCostPriceFieldNumber;
const int GM_Shop_Object_Data::kIsdynFieldNumber;
const int GM_Shop_Object_Data::kObjectnameFieldNumber;
const int GM_Shop_Object_Data::kObjectIconFieldNumber;
const int GM_Shop_Object_Data::kColorFieldNumber;
const int GM_Shop_Object_Data::kMaxvipCountFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Object_Data::GM_Shop_Object_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Object_Data::InitAsDefaultInstance() {
}

GM_Shop_Object_Data::GM_Shop_Object_Data(const GM_Shop_Object_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Object_Data::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  objectrank_ = 0;
  buy_type_ = 0;
  vip_count_ = 0;
  descripte_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  now_count_ = 0;
  cost_price_ = 0;
  isdyn_ = 0;
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0;
  maxvip_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Object_Data::~GM_Shop_Object_Data() {
  SharedDtor();
}

void GM_Shop_Object_Data::SharedDtor() {
  if (descripte_ != &::google::protobuf::internal::kEmptyString) {
    delete descripte_;
  }
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete objectname_;
  }
  if (object_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete object_icon_;
  }
  if (this != default_instance_) {
  }
}

void GM_Shop_Object_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Object_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Object_Data_descriptor_;
}

const GM_Shop_Object_Data& GM_Shop_Object_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Object_Data* GM_Shop_Object_Data::default_instance_ = NULL;

GM_Shop_Object_Data* GM_Shop_Object_Data::New() const {
  return new GM_Shop_Object_Data;
}

void GM_Shop_Object_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    objectrank_ = 0;
    buy_type_ = 0;
    vip_count_ = 0;
    if (has_descripte()) {
      if (descripte_ != &::google::protobuf::internal::kEmptyString) {
        descripte_->clear();
      }
    }
    now_count_ = 0;
    cost_price_ = 0;
    isdyn_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::kEmptyString) {
        objectname_->clear();
      }
    }
    if (has_object_icon()) {
      if (object_icon_ != &::google::protobuf::internal::kEmptyString) {
        object_icon_->clear();
      }
    }
    color_ = 0;
    maxvip_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Object_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectrank;
        break;
      }

      // optional int32 objectrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectrank_)));
          set_has_objectrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_type;
        break;
      }

      // optional int32 buy_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_type_)));
          set_has_buy_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_count;
        break;
      }

      // optional int32 vip_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_count_)));
          set_has_vip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_descripte;
        break;
      }

      // optional string descripte = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descripte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descripte()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->descripte().data(), this->descripte().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_now_count;
        break;
      }

      // optional int32 now_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_count_)));
          set_has_now_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cost_price;
        break;
      }

      // optional int32 cost_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_price_)));
          set_has_cost_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isdyn;
        break;
      }

      // optional int32 isdyn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdyn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdyn_)));
          set_has_isdyn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_objectname;
        break;
      }

      // optional string objectname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_object_icon;
        break;
      }

      // optional string object_icon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_icon().data(), this->object_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_color;
        break;
      }

      // optional int32 color = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxvip_count;
        break;
      }

      // optional int32 maxvip_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxvip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxvip_count_)));
          set_has_maxvip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Object_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 objectrank = 2;
  if (has_objectrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectrank(), output);
  }

  // optional int32 buy_type = 3;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_type(), output);
  }

  // optional int32 vip_count = 4;
  if (has_vip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_count(), output);
  }

  // optional string descripte = 5;
  if (has_descripte()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->descripte().data(), this->descripte().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->descripte(), output);
  }

  // optional int32 now_count = 6;
  if (has_now_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->now_count(), output);
  }

  // optional int32 cost_price = 7;
  if (has_cost_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cost_price(), output);
  }

  // optional int32 isdyn = 8;
  if (has_isdyn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isdyn(), output);
  }

  // optional string objectname = 9;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->objectname(), output);
  }

  // optional string object_icon = 10;
  if (has_object_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_icon().data(), this->object_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->object_icon(), output);
  }

  // optional int32 color = 11;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->color(), output);
  }

  // optional int32 maxvip_count = 12;
  if (has_maxvip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxvip_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Object_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 objectrank = 2;
  if (has_objectrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectrank(), target);
  }

  // optional int32 buy_type = 3;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_type(), target);
  }

  // optional int32 vip_count = 4;
  if (has_vip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_count(), target);
  }

  // optional string descripte = 5;
  if (has_descripte()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->descripte().data(), this->descripte().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->descripte(), target);
  }

  // optional int32 now_count = 6;
  if (has_now_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->now_count(), target);
  }

  // optional int32 cost_price = 7;
  if (has_cost_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cost_price(), target);
  }

  // optional int32 isdyn = 8;
  if (has_isdyn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isdyn(), target);
  }

  // optional string objectname = 9;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->objectname(), target);
  }

  // optional string object_icon = 10;
  if (has_object_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_icon().data(), this->object_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->object_icon(), target);
  }

  // optional int32 color = 11;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->color(), target);
  }

  // optional int32 maxvip_count = 12;
  if (has_maxvip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxvip_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Object_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 objectrank = 2;
    if (has_objectrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectrank());
    }

    // optional int32 buy_type = 3;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_type());
    }

    // optional int32 vip_count = 4;
    if (has_vip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_count());
    }

    // optional string descripte = 5;
    if (has_descripte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descripte());
    }

    // optional int32 now_count = 6;
    if (has_now_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_count());
    }

    // optional int32 cost_price = 7;
    if (has_cost_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_price());
    }

    // optional int32 isdyn = 8;
    if (has_isdyn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdyn());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string objectname = 9;
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

    // optional string object_icon = 10;
    if (has_object_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_icon());
    }

    // optional int32 color = 11;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 maxvip_count = 12;
    if (has_maxvip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxvip_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Object_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Object_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Object_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Object_Data::MergeFrom(const GM_Shop_Object_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectrank()) {
      set_objectrank(from.objectrank());
    }
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
    if (from.has_vip_count()) {
      set_vip_count(from.vip_count());
    }
    if (from.has_descripte()) {
      set_descripte(from.descripte());
    }
    if (from.has_now_count()) {
      set_now_count(from.now_count());
    }
    if (from.has_cost_price()) {
      set_cost_price(from.cost_price());
    }
    if (from.has_isdyn()) {
      set_isdyn(from.isdyn());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
    if (from.has_object_icon()) {
      set_object_icon(from.object_icon());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_maxvip_count()) {
      set_maxvip_count(from.maxvip_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Object_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Object_Data::CopyFrom(const GM_Shop_Object_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Object_Data::IsInitialized() const {

  return true;
}

void GM_Shop_Object_Data::Swap(GM_Shop_Object_Data* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectrank_, other->objectrank_);
    std::swap(buy_type_, other->buy_type_);
    std::swap(vip_count_, other->vip_count_);
    std::swap(descripte_, other->descripte_);
    std::swap(now_count_, other->now_count_);
    std::swap(cost_price_, other->cost_price_);
    std::swap(isdyn_, other->isdyn_);
    std::swap(objectname_, other->objectname_);
    std::swap(object_icon_, other->object_icon_);
    std::swap(color_, other->color_);
    std::swap(maxvip_count_, other->maxvip_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Object_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Object_Data_descriptor_;
  metadata.reflection = GM_Shop_Object_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Object_Buy_Request::kMObjectidFieldNumber;
const int GM_Shop_Object_Buy_Request::kMCountFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Object_Buy_Request::GM_Shop_Object_Buy_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Object_Buy_Request::InitAsDefaultInstance() {
}

GM_Shop_Object_Buy_Request::GM_Shop_Object_Buy_Request(const GM_Shop_Object_Buy_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Object_Buy_Request::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Object_Buy_Request::~GM_Shop_Object_Buy_Request() {
  SharedDtor();
}

void GM_Shop_Object_Buy_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Object_Buy_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Object_Buy_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Object_Buy_Request_descriptor_;
}

const GM_Shop_Object_Buy_Request& GM_Shop_Object_Buy_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Object_Buy_Request* GM_Shop_Object_Buy_Request::default_instance_ = NULL;

GM_Shop_Object_Buy_Request* GM_Shop_Object_Buy_Request::New() const {
  return new GM_Shop_Object_Buy_Request;
}

void GM_Shop_Object_Buy_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Object_Buy_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_count;
        break;
      }

      // optional int32 m_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Object_Buy_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_count = 2;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Object_Buy_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_count = 2;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Object_Buy_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_count = 2;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Object_Buy_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Object_Buy_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Object_Buy_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Object_Buy_Request::MergeFrom(const GM_Shop_Object_Buy_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Object_Buy_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Object_Buy_Request::CopyFrom(const GM_Shop_Object_Buy_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Object_Buy_Request::IsInitialized() const {

  return true;
}

void GM_Shop_Object_Buy_Request::Swap(GM_Shop_Object_Buy_Request* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_count_, other->m_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Object_Buy_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Object_Buy_Request_descriptor_;
  metadata.reflection = GM_Shop_Object_Buy_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CreateOrder::kOrderidFieldNumber;
const int GM_CreateOrder::kPlatformFieldNumber;
const int GM_CreateOrder::kChannelFieldNumber;
const int GM_CreateOrder::kAppidFieldNumber;
const int GM_CreateOrder::kDiamondsFieldNumber;
const int GM_CreateOrder::kRoleidFieldNumber;
const int GM_CreateOrder::kServeridFieldNumber;
const int GM_CreateOrder::kAccountidFieldNumber;
const int GM_CreateOrder::kProductidFieldNumber;
#endif  // !_MSC_VER

GM_CreateOrder::GM_CreateOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CreateOrder::InitAsDefaultInstance() {
}

GM_CreateOrder::GM_CreateOrder(const GM_CreateOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CreateOrder::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  diamonds_ = 0;
  roleid_ = 0;
  serverid_ = 0;
  accountid_ = 0;
  productid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CreateOrder::~GM_CreateOrder() {
  SharedDtor();
}

void GM_CreateOrder::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void GM_CreateOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CreateOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CreateOrder_descriptor_;
}

const GM_CreateOrder& GM_CreateOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_CreateOrder* GM_CreateOrder::default_instance_ = NULL;

GM_CreateOrder* GM_CreateOrder::New() const {
  return new GM_CreateOrder;
}

void GM_CreateOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    platform_ = 0;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    appid_ = 0;
    diamonds_ = 0;
    roleid_ = 0;
    serverid_ = 0;
    accountid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    productid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CreateOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // optional int32 platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_appid;
        break;
      }

      // optional int32 appid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_diamonds;
        break;
      }

      // optional float diamonds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accountid;
        break;
      }

      // optional int32 accountid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_productid;
        break;
      }

      // optional int32 productid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CreateOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(), output);
  }

  // optional int32 appid = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appid(), output);
  }

  // optional float diamonds = 5;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->diamonds(), output);
  }

  // optional int32 roleid = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleid(), output);
  }

  // optional int32 serverid = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serverid(), output);
  }

  // optional int32 accountid = 8;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->accountid(), output);
  }

  // optional int32 productid = 9;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CreateOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // optional string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // optional int32 appid = 4;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appid(), target);
  }

  // optional float diamonds = 5;
  if (has_diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->diamonds(), target);
  }

  // optional int32 roleid = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roleid(), target);
  }

  // optional int32 serverid = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serverid(), target);
  }

  // optional int32 accountid = 8;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->accountid(), target);
  }

  // optional int32 productid = 9;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CreateOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 appid = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional float diamonds = 5;
    if (has_diamonds()) {
      total_size += 1 + 4;
    }

    // optional int32 roleid = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 serverid = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 accountid = 8;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 productid = 9;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CreateOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CreateOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CreateOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CreateOrder::MergeFrom(const GM_CreateOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CreateOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CreateOrder::CopyFrom(const GM_CreateOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CreateOrder::IsInitialized() const {

  return true;
}

void GM_CreateOrder::Swap(GM_CreateOrder* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(platform_, other->platform_);
    std::swap(channel_, other->channel_);
    std::swap(appid_, other->appid_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(roleid_, other->roleid_);
    std::swap(serverid_, other->serverid_);
    std::swap(accountid_, other->accountid_);
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CreateOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CreateOrder_descriptor_;
  metadata.reflection = GM_CreateOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CreateOrder_Return::kOrderidFieldNumber;
const int GM_CreateOrder_Return::kMResultFieldNumber;
const int GM_CreateOrder_Return::kMProductidFieldNumber;
const int GM_CreateOrder_Return::kMStrnameFieldNumber;
#endif  // !_MSC_VER

GM_CreateOrder_Return::GM_CreateOrder_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CreateOrder_Return::InitAsDefaultInstance() {
}

GM_CreateOrder_Return::GM_CreateOrder_Return(const GM_CreateOrder_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CreateOrder_Return::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_result_ = 0;
  m_productid_ = 0;
  m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CreateOrder_Return::~GM_CreateOrder_Return() {
  SharedDtor();
}

void GM_CreateOrder_Return::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (m_strname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_strname_;
  }
  if (this != default_instance_) {
  }
}

void GM_CreateOrder_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CreateOrder_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CreateOrder_Return_descriptor_;
}

const GM_CreateOrder_Return& GM_CreateOrder_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_CreateOrder_Return* GM_CreateOrder_Return::default_instance_ = NULL;

GM_CreateOrder_Return* GM_CreateOrder_Return::New() const {
  return new GM_CreateOrder_Return;
}

void GM_CreateOrder_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    m_result_ = 0;
    m_productid_ = 0;
    if (has_m_strname()) {
      if (m_strname_ != &::google::protobuf::internal::kEmptyString) {
        m_strname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CreateOrder_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_result;
        break;
      }

      // optional int32 m_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_productid;
        break;
      }

      // optional int32 m_productid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_productid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_productid_)));
          set_has_m_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_strname;
        break;
      }

      // optional string m_strname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_strname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_strname().data(), this->m_strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CreateOrder_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // optional int32 m_result = 2;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_result(), output);
  }

  // optional int32 m_productid = 3;
  if (has_m_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_productid(), output);
  }

  // optional string m_strname = 4;
  if (has_m_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_strname().data(), this->m_strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_strname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CreateOrder_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional int32 m_result = 2;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_result(), target);
  }

  // optional int32 m_productid = 3;
  if (has_m_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_productid(), target);
  }

  // optional string m_strname = 4;
  if (has_m_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_strname().data(), this->m_strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_strname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CreateOrder_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional int32 m_result = 2;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_productid = 3;
    if (has_m_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_productid());
    }

    // optional string m_strname = 4;
    if (has_m_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_strname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CreateOrder_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CreateOrder_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CreateOrder_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CreateOrder_Return::MergeFrom(const GM_CreateOrder_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_productid()) {
      set_m_productid(from.m_productid());
    }
    if (from.has_m_strname()) {
      set_m_strname(from.m_strname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CreateOrder_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CreateOrder_Return::CopyFrom(const GM_CreateOrder_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CreateOrder_Return::IsInitialized() const {

  return true;
}

void GM_CreateOrder_Return::Swap(GM_CreateOrder_Return* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(m_result_, other->m_result_);
    std::swap(m_productid_, other->m_productid_);
    std::swap(m_strname_, other->m_strname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CreateOrder_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CreateOrder_Return_descriptor_;
  metadata.reflection = GM_CreateOrder_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Obj_Single_Return::kMDataFieldNumber;
const int GM_Shop_Obj_Single_Return::kMObjectidFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Obj_Single_Return::GM_Shop_Obj_Single_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Obj_Single_Return::InitAsDefaultInstance() {
}

GM_Shop_Obj_Single_Return::GM_Shop_Obj_Single_Return(const GM_Shop_Obj_Single_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Obj_Single_Return::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Obj_Single_Return::~GM_Shop_Obj_Single_Return() {
  SharedDtor();
}

void GM_Shop_Obj_Single_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Obj_Single_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Obj_Single_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Obj_Single_Return_descriptor_;
}

const GM_Shop_Obj_Single_Return& GM_Shop_Obj_Single_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Obj_Single_Return* GM_Shop_Obj_Single_Return::default_instance_ = NULL;

GM_Shop_Obj_Single_Return* GM_Shop_Obj_Single_Return::New() const {
  return new GM_Shop_Obj_Single_Return;
}

void GM_Shop_Obj_Single_Return::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_objectid_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Obj_Single_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_Shop_Obj_Single_Data m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectTag(16)) goto parse_m_objectid;
        break;
      }

      // optional int32 m_objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Obj_Single_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_Shop_Obj_Single_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  // optional int32 m_objectid = 2;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Obj_Single_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_Shop_Obj_Single_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  // optional int32 m_objectid = 2;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Obj_Single_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 m_objectid = 2;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

  }
  // repeated .GM_Shop_Obj_Single_Data m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Obj_Single_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Obj_Single_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Obj_Single_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Obj_Single_Return::MergeFrom(const GM_Shop_Obj_Single_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Obj_Single_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Obj_Single_Return::CopyFrom(const GM_Shop_Obj_Single_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Obj_Single_Return::IsInitialized() const {

  return true;
}

void GM_Shop_Obj_Single_Return::Swap(GM_Shop_Obj_Single_Return* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Obj_Single_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Obj_Single_Return_descriptor_;
  metadata.reflection = GM_Shop_Obj_Single_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Shop_Obj_Single_Data::kGetMintimeFieldNumber;
const int GM_Shop_Obj_Single_Data::kGetMaxtimeFieldNumber;
const int GM_Shop_Obj_Single_Data::kCostPriceFieldNumber;
#endif  // !_MSC_VER

GM_Shop_Obj_Single_Data::GM_Shop_Obj_Single_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Shop_Obj_Single_Data::InitAsDefaultInstance() {
}

GM_Shop_Obj_Single_Data::GM_Shop_Obj_Single_Data(const GM_Shop_Obj_Single_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Shop_Obj_Single_Data::SharedCtor() {
  _cached_size_ = 0;
  get_mintime_ = 0;
  get_maxtime_ = 0;
  cost_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Shop_Obj_Single_Data::~GM_Shop_Obj_Single_Data() {
  SharedDtor();
}

void GM_Shop_Obj_Single_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Shop_Obj_Single_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Shop_Obj_Single_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Shop_Obj_Single_Data_descriptor_;
}

const GM_Shop_Obj_Single_Data& GM_Shop_Obj_Single_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Shop_Obj_Single_Data* GM_Shop_Obj_Single_Data::default_instance_ = NULL;

GM_Shop_Obj_Single_Data* GM_Shop_Obj_Single_Data::New() const {
  return new GM_Shop_Obj_Single_Data;
}

void GM_Shop_Obj_Single_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_mintime_ = 0;
    get_maxtime_ = 0;
    cost_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Shop_Obj_Single_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 get_mintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_mintime_)));
          set_has_get_mintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_maxtime;
        break;
      }

      // optional int32 get_maxtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_maxtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_maxtime_)));
          set_has_get_maxtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_price;
        break;
      }

      // optional int32 cost_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_price_)));
          set_has_cost_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Shop_Obj_Single_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 get_mintime = 1;
  if (has_get_mintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->get_mintime(), output);
  }

  // optional int32 get_maxtime = 2;
  if (has_get_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->get_maxtime(), output);
  }

  // optional int32 cost_price = 3;
  if (has_cost_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Shop_Obj_Single_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 get_mintime = 1;
  if (has_get_mintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->get_mintime(), target);
  }

  // optional int32 get_maxtime = 2;
  if (has_get_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->get_maxtime(), target);
  }

  // optional int32 cost_price = 3;
  if (has_cost_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Shop_Obj_Single_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 get_mintime = 1;
    if (has_get_mintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_mintime());
    }

    // optional int32 get_maxtime = 2;
    if (has_get_maxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_maxtime());
    }

    // optional int32 cost_price = 3;
    if (has_cost_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Shop_Obj_Single_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Shop_Obj_Single_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Shop_Obj_Single_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Shop_Obj_Single_Data::MergeFrom(const GM_Shop_Obj_Single_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_mintime()) {
      set_get_mintime(from.get_mintime());
    }
    if (from.has_get_maxtime()) {
      set_get_maxtime(from.get_maxtime());
    }
    if (from.has_cost_price()) {
      set_cost_price(from.cost_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Shop_Obj_Single_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Shop_Obj_Single_Data::CopyFrom(const GM_Shop_Obj_Single_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Shop_Obj_Single_Data::IsInitialized() const {

  return true;
}

void GM_Shop_Obj_Single_Data::Swap(GM_Shop_Obj_Single_Data* other) {
  if (other != this) {
    std::swap(get_mintime_, other->get_mintime_);
    std::swap(get_maxtime_, other->get_maxtime_);
    std::swap(cost_price_, other->cost_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Shop_Obj_Single_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Shop_Obj_Single_Data_descriptor_;
  metadata.reflection = GM_Shop_Obj_Single_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recharge_Over::kCountFieldNumber;
const int GM_Recharge_Over::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_Recharge_Over::GM_Recharge_Over()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recharge_Over::InitAsDefaultInstance() {
}

GM_Recharge_Over::GM_Recharge_Over(const GM_Recharge_Over& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recharge_Over::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recharge_Over::~GM_Recharge_Over() {
  SharedDtor();
}

void GM_Recharge_Over::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Recharge_Over::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recharge_Over::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recharge_Over_descriptor_;
}

const GM_Recharge_Over& GM_Recharge_Over::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Recharge_Over* GM_Recharge_Over::default_instance_ = NULL;

GM_Recharge_Over* GM_Recharge_Over::New() const {
  return new GM_Recharge_Over;
}

void GM_Recharge_Over::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recharge_Over::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_Recharge_Over_Data m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recharge_Over::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_Recharge_Over_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recharge_Over::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_Recharge_Over_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recharge_Over::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_Recharge_Over_Data m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recharge_Over::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recharge_Over* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recharge_Over*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recharge_Over::MergeFrom(const GM_Recharge_Over& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recharge_Over::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recharge_Over::CopyFrom(const GM_Recharge_Over& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recharge_Over::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Recharge_Over::Swap(GM_Recharge_Over* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recharge_Over::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recharge_Over_descriptor_;
  metadata.reflection = GM_Recharge_Over_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Recharge_Over_Data::kProductidFieldNumber;
const int GM_Recharge_Over_Data::kGetDiamondFieldNumber;
const int GM_Recharge_Over_Data::kMTypeFieldNumber;
const int GM_Recharge_Over_Data::kMoneyFieldNumber;
const int GM_Recharge_Over_Data::kMDescirbFieldNumber;
const int GM_Recharge_Over_Data::kMOrderidFieldNumber;
#endif  // !_MSC_VER

GM_Recharge_Over_Data::GM_Recharge_Over_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Recharge_Over_Data::InitAsDefaultInstance() {
}

GM_Recharge_Over_Data::GM_Recharge_Over_Data(const GM_Recharge_Over_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Recharge_Over_Data::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0;
  get_diamond_ = 0;
  m_type_ = 0;
  money_ = 0;
  m_descirb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Recharge_Over_Data::~GM_Recharge_Over_Data() {
  SharedDtor();
}

void GM_Recharge_Over_Data::SharedDtor() {
  if (m_descirb_ != &::google::protobuf::internal::kEmptyString) {
    delete m_descirb_;
  }
  if (m_orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_orderid_;
  }
  if (this != default_instance_) {
  }
}

void GM_Recharge_Over_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Recharge_Over_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Recharge_Over_Data_descriptor_;
}

const GM_Recharge_Over_Data& GM_Recharge_Over_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Recharge_Over_Data* GM_Recharge_Over_Data::default_instance_ = NULL;

GM_Recharge_Over_Data* GM_Recharge_Over_Data::New() const {
  return new GM_Recharge_Over_Data;
}

void GM_Recharge_Over_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productid_ = 0;
    get_diamond_ = 0;
    m_type_ = 0;
    money_ = 0;
    if (has_m_descirb()) {
      if (m_descirb_ != &::google::protobuf::internal::kEmptyString) {
        m_descirb_->clear();
      }
    }
    if (has_m_orderid()) {
      if (m_orderid_ != &::google::protobuf::internal::kEmptyString) {
        m_orderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Recharge_Over_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 productid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_diamond;
        break;
      }

      // optional int32 get_diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_diamond_)));
          set_has_get_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_descirb;
        break;
      }

      // optional string m_descirb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_descirb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_descirb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_descirb().data(), this->m_descirb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_orderid;
        break;
      }

      // optional string m_orderid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_orderid().data(), this->m_orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Recharge_Over_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 productid = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->productid(), output);
  }

  // optional int32 get_diamond = 2;
  if (has_get_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->get_diamond(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional string m_descirb = 5;
  if (has_m_descirb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_descirb().data(), this->m_descirb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_descirb(), output);
  }

  // optional string m_orderid = 6;
  if (has_m_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_orderid().data(), this->m_orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Recharge_Over_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 productid = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->productid(), target);
  }

  // optional int32 get_diamond = 2;
  if (has_get_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->get_diamond(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional string m_descirb = 5;
  if (has_m_descirb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_descirb().data(), this->m_descirb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_descirb(), target);
  }

  // optional string m_orderid = 6;
  if (has_m_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_orderid().data(), this->m_orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Recharge_Over_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 productid = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

    // optional int32 get_diamond = 2;
    if (has_get_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_diamond());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string m_descirb = 5;
    if (has_m_descirb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_descirb());
    }

    // optional string m_orderid = 6;
    if (has_m_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Recharge_Over_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Recharge_Over_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Recharge_Over_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Recharge_Over_Data::MergeFrom(const GM_Recharge_Over_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_get_diamond()) {
      set_get_diamond(from.get_diamond());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_m_descirb()) {
      set_m_descirb(from.m_descirb());
    }
    if (from.has_m_orderid()) {
      set_m_orderid(from.m_orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Recharge_Over_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Recharge_Over_Data::CopyFrom(const GM_Recharge_Over_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Recharge_Over_Data::IsInitialized() const {

  return true;
}

void GM_Recharge_Over_Data::Swap(GM_Recharge_Over_Data* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(get_diamond_, other->get_diamond_);
    std::swap(m_type_, other->m_type_);
    std::swap(money_, other->money_);
    std::swap(m_descirb_, other->m_descirb_);
    std::swap(m_orderid_, other->m_orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Recharge_Over_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Recharge_Over_Data_descriptor_;
  metadata.reflection = GM_Recharge_Over_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Single_Object_Return::kMBuytimeFieldNumber;
const int GM_Single_Object_Return::kMPriceFieldNumber;
const int GM_Single_Object_Return::kVipCountFieldNumber;
const int GM_Single_Object_Return::kNowCountFieldNumber;
const int GM_Single_Object_Return::kMaxvipCountFieldNumber;
#endif  // !_MSC_VER

GM_Single_Object_Return::GM_Single_Object_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Single_Object_Return::InitAsDefaultInstance() {
}

GM_Single_Object_Return::GM_Single_Object_Return(const GM_Single_Object_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Single_Object_Return::SharedCtor() {
  _cached_size_ = 0;
  m_buytime_ = 0;
  m_price_ = 0;
  vip_count_ = 0;
  now_count_ = 0;
  maxvip_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Single_Object_Return::~GM_Single_Object_Return() {
  SharedDtor();
}

void GM_Single_Object_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Single_Object_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Single_Object_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Single_Object_Return_descriptor_;
}

const GM_Single_Object_Return& GM_Single_Object_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_Single_Object_Return* GM_Single_Object_Return::default_instance_ = NULL;

GM_Single_Object_Return* GM_Single_Object_Return::New() const {
  return new GM_Single_Object_Return;
}

void GM_Single_Object_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_buytime_ = 0;
    m_price_ = 0;
    vip_count_ = 0;
    now_count_ = 0;
    maxvip_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Single_Object_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_buytime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buytime_)));
          set_has_m_buytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_count;
        break;
      }

      // optional int32 vip_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_count_)));
          set_has_vip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_now_count;
        break;
      }

      // optional int32 now_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_count_)));
          set_has_now_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxvip_count;
        break;
      }

      // optional int32 maxvip_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxvip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxvip_count_)));
          set_has_maxvip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Single_Object_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_buytime = 1;
  if (has_m_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_buytime(), output);
  }

  // optional int32 m_price = 2;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_price(), output);
  }

  // optional int32 vip_count = 3;
  if (has_vip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip_count(), output);
  }

  // optional int32 now_count = 4;
  if (has_now_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->now_count(), output);
  }

  // optional int32 maxvip_count = 5;
  if (has_maxvip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxvip_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Single_Object_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_buytime = 1;
  if (has_m_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_buytime(), target);
  }

  // optional int32 m_price = 2;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_price(), target);
  }

  // optional int32 vip_count = 3;
  if (has_vip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip_count(), target);
  }

  // optional int32 now_count = 4;
  if (has_now_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->now_count(), target);
  }

  // optional int32 maxvip_count = 5;
  if (has_maxvip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxvip_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Single_Object_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_buytime = 1;
    if (has_m_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buytime());
    }

    // optional int32 m_price = 2;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 vip_count = 3;
    if (has_vip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_count());
    }

    // optional int32 now_count = 4;
    if (has_now_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_count());
    }

    // optional int32 maxvip_count = 5;
    if (has_maxvip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxvip_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Single_Object_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Single_Object_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Single_Object_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Single_Object_Return::MergeFrom(const GM_Single_Object_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_buytime()) {
      set_m_buytime(from.m_buytime());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_vip_count()) {
      set_vip_count(from.vip_count());
    }
    if (from.has_now_count()) {
      set_now_count(from.now_count());
    }
    if (from.has_maxvip_count()) {
      set_maxvip_count(from.maxvip_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Single_Object_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Single_Object_Return::CopyFrom(const GM_Single_Object_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Single_Object_Return::IsInitialized() const {

  return true;
}

void GM_Single_Object_Return::Swap(GM_Single_Object_Return* other) {
  if (other != this) {
    std::swap(m_buytime_, other->m_buytime_);
    std::swap(m_price_, other->m_price_);
    std::swap(vip_count_, other->vip_count_);
    std::swap(now_count_, other->now_count_);
    std::swap(maxvip_count_, other->maxvip_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Single_Object_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Single_Object_Return_descriptor_;
  metadata.reflection = GM_Single_Object_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GET_ZYOrder_Request::kMUseridFieldNumber;
const int GM_GET_ZYOrder_Request::kMProductidFieldNumber;
const int GM_GET_ZYOrder_Request::kMProductnameFieldNumber;
const int GM_GET_ZYOrder_Request::kMProductdescFieldNumber;
const int GM_GET_ZYOrder_Request::kMExtensionFieldNumber;
const int GM_GET_ZYOrder_Request::kMEcPpFieldNumber;
const int GM_GET_ZYOrder_Request::kMRoleidFieldNumber;
const int GM_GET_ZYOrder_Request::kMRolenameFieldNumber;
const int GM_GET_ZYOrder_Request::kMMoneyFieldNumber;
const int GM_GET_ZYOrder_Request::kMServeridFieldNumber;
const int GM_GET_ZYOrder_Request::kMServernameFieldNumber;
#endif  // !_MSC_VER

GM_GET_ZYOrder_Request::GM_GET_ZYOrder_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GET_ZYOrder_Request::InitAsDefaultInstance() {
}

GM_GET_ZYOrder_Request::GM_GET_ZYOrder_Request(const GM_GET_ZYOrder_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GET_ZYOrder_Request::SharedCtor() {
  _cached_size_ = 0;
  m_userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_productdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_ec_pp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roleid_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_money_ = 0;
  m_serverid_ = 0;
  m_servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GET_ZYOrder_Request::~GM_GET_ZYOrder_Request() {
  SharedDtor();
}

void GM_GET_ZYOrder_Request::SharedDtor() {
  if (m_userid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_userid_;
  }
  if (m_productid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_productid_;
  }
  if (m_productname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_productname_;
  }
  if (m_productdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_productdesc_;
  }
  if (m_extension_ != &::google::protobuf::internal::kEmptyString) {
    delete m_extension_;
  }
  if (m_ec_pp_ != &::google::protobuf::internal::kEmptyString) {
    delete m_ec_pp_;
  }
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_servername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_servername_;
  }
  if (this != default_instance_) {
  }
}

void GM_GET_ZYOrder_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GET_ZYOrder_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GET_ZYOrder_Request_descriptor_;
}

const GM_GET_ZYOrder_Request& GM_GET_ZYOrder_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_GET_ZYOrder_Request* GM_GET_ZYOrder_Request::default_instance_ = NULL;

GM_GET_ZYOrder_Request* GM_GET_ZYOrder_Request::New() const {
  return new GM_GET_ZYOrder_Request;
}

void GM_GET_ZYOrder_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_userid()) {
      if (m_userid_ != &::google::protobuf::internal::kEmptyString) {
        m_userid_->clear();
      }
    }
    if (has_m_productid()) {
      if (m_productid_ != &::google::protobuf::internal::kEmptyString) {
        m_productid_->clear();
      }
    }
    if (has_m_productname()) {
      if (m_productname_ != &::google::protobuf::internal::kEmptyString) {
        m_productname_->clear();
      }
    }
    if (has_m_productdesc()) {
      if (m_productdesc_ != &::google::protobuf::internal::kEmptyString) {
        m_productdesc_->clear();
      }
    }
    if (has_m_extension()) {
      if (m_extension_ != &::google::protobuf::internal::kEmptyString) {
        m_extension_->clear();
      }
    }
    if (has_m_ec_pp()) {
      if (m_ec_pp_ != &::google::protobuf::internal::kEmptyString) {
        m_ec_pp_->clear();
      }
    }
    m_roleid_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_money_ = 0;
    m_serverid_ = 0;
    if (has_m_servername()) {
      if (m_servername_ != &::google::protobuf::internal::kEmptyString) {
        m_servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GET_ZYOrder_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_userid().data(), this->m_userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_productid;
        break;
      }

      // optional string m_productid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_productid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_productid().data(), this->m_productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_productname;
        break;
      }

      // optional string m_productname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_productname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_productname().data(), this->m_productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_productdesc;
        break;
      }

      // optional string m_productdesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_productdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_productdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_productdesc().data(), this->m_productdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_extension;
        break;
      }

      // optional string m_extension = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_extension().data(), this->m_extension().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_ec_pp;
        break;
      }

      // optional string m_ec_pp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ec_pp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_ec_pp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_ec_pp().data(), this->m_ec_pp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_roleid;
        break;
      }

      // optional int32 m_roleid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_m_money;
        break;
      }

      // optional float m_money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_serverid;
        break;
      }

      // optional int32 m_serverid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverid_)));
          set_has_m_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_servername;
        break;
      }

      // optional string m_servername = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_servername().data(), this->m_servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GET_ZYOrder_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_userid = 1;
  if (has_m_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_userid().data(), this->m_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_userid(), output);
  }

  // optional string m_productid = 2;
  if (has_m_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_productid().data(), this->m_productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_productid(), output);
  }

  // optional string m_productname = 3;
  if (has_m_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_productname().data(), this->m_productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_productname(), output);
  }

  // optional string m_productdesc = 4;
  if (has_m_productdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_productdesc().data(), this->m_productdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_productdesc(), output);
  }

  // optional string m_extension = 5;
  if (has_m_extension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_extension().data(), this->m_extension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_extension(), output);
  }

  // optional string m_ec_pp = 6;
  if (has_m_ec_pp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_ec_pp().data(), this->m_ec_pp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_ec_pp(), output);
  }

  // optional int32 m_roleid = 7;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_roleid(), output);
  }

  // optional string m_rolename = 8;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_rolename(), output);
  }

  // optional float m_money = 9;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->m_money(), output);
  }

  // optional int32 m_serverid = 10;
  if (has_m_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_serverid(), output);
  }

  // optional string m_servername = 11;
  if (has_m_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_servername().data(), this->m_servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GET_ZYOrder_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_userid = 1;
  if (has_m_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_userid().data(), this->m_userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_userid(), target);
  }

  // optional string m_productid = 2;
  if (has_m_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_productid().data(), this->m_productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_productid(), target);
  }

  // optional string m_productname = 3;
  if (has_m_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_productname().data(), this->m_productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_productname(), target);
  }

  // optional string m_productdesc = 4;
  if (has_m_productdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_productdesc().data(), this->m_productdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_productdesc(), target);
  }

  // optional string m_extension = 5;
  if (has_m_extension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_extension().data(), this->m_extension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_extension(), target);
  }

  // optional string m_ec_pp = 6;
  if (has_m_ec_pp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_ec_pp().data(), this->m_ec_pp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_ec_pp(), target);
  }

  // optional int32 m_roleid = 7;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_roleid(), target);
  }

  // optional string m_rolename = 8;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_rolename(), target);
  }

  // optional float m_money = 9;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->m_money(), target);
  }

  // optional int32 m_serverid = 10;
  if (has_m_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_serverid(), target);
  }

  // optional string m_servername = 11;
  if (has_m_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_servername().data(), this->m_servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GET_ZYOrder_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_userid = 1;
    if (has_m_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_userid());
    }

    // optional string m_productid = 2;
    if (has_m_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_productid());
    }

    // optional string m_productname = 3;
    if (has_m_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_productname());
    }

    // optional string m_productdesc = 4;
    if (has_m_productdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_productdesc());
    }

    // optional string m_extension = 5;
    if (has_m_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_extension());
    }

    // optional string m_ec_pp = 6;
    if (has_m_ec_pp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_ec_pp());
    }

    // optional int32 m_roleid = 7;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional string m_rolename = 8;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float m_money = 9;
    if (has_m_money()) {
      total_size += 1 + 4;
    }

    // optional int32 m_serverid = 10;
    if (has_m_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverid());
    }

    // optional string m_servername = 11;
    if (has_m_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GET_ZYOrder_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GET_ZYOrder_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GET_ZYOrder_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GET_ZYOrder_Request::MergeFrom(const GM_GET_ZYOrder_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_userid()) {
      set_m_userid(from.m_userid());
    }
    if (from.has_m_productid()) {
      set_m_productid(from.m_productid());
    }
    if (from.has_m_productname()) {
      set_m_productname(from.m_productname());
    }
    if (from.has_m_productdesc()) {
      set_m_productdesc(from.m_productdesc());
    }
    if (from.has_m_extension()) {
      set_m_extension(from.m_extension());
    }
    if (from.has_m_ec_pp()) {
      set_m_ec_pp(from.m_ec_pp());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_serverid()) {
      set_m_serverid(from.m_serverid());
    }
    if (from.has_m_servername()) {
      set_m_servername(from.m_servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GET_ZYOrder_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GET_ZYOrder_Request::CopyFrom(const GM_GET_ZYOrder_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GET_ZYOrder_Request::IsInitialized() const {

  return true;
}

void GM_GET_ZYOrder_Request::Swap(GM_GET_ZYOrder_Request* other) {
  if (other != this) {
    std::swap(m_userid_, other->m_userid_);
    std::swap(m_productid_, other->m_productid_);
    std::swap(m_productname_, other->m_productname_);
    std::swap(m_productdesc_, other->m_productdesc_);
    std::swap(m_extension_, other->m_extension_);
    std::swap(m_ec_pp_, other->m_ec_pp_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_serverid_, other->m_serverid_);
    std::swap(m_servername_, other->m_servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GET_ZYOrder_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GET_ZYOrder_Request_descriptor_;
  metadata.reflection = GM_GET_ZYOrder_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GET_ZYOrder_Return::kMStateFieldNumber;
const int GM_GET_ZYOrder_Return::kMOrderdataFieldNumber;
const int GM_GET_ZYOrder_Return::kUserDataFieldNumber;
#endif  // !_MSC_VER

GM_GET_ZYOrder_Return::GM_GET_ZYOrder_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GET_ZYOrder_Return::InitAsDefaultInstance() {
}

GM_GET_ZYOrder_Return::GM_GET_ZYOrder_Return(const GM_GET_ZYOrder_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GET_ZYOrder_Return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_orderdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GET_ZYOrder_Return::~GM_GET_ZYOrder_Return() {
  SharedDtor();
}

void GM_GET_ZYOrder_Return::SharedDtor() {
  if (m_orderdata_ != &::google::protobuf::internal::kEmptyString) {
    delete m_orderdata_;
  }
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void GM_GET_ZYOrder_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GET_ZYOrder_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GET_ZYOrder_Return_descriptor_;
}

const GM_GET_ZYOrder_Return& GM_GET_ZYOrder_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2etxt();
  return *default_instance_;
}

GM_GET_ZYOrder_Return* GM_GET_ZYOrder_Return::default_instance_ = NULL;

GM_GET_ZYOrder_Return* GM_GET_ZYOrder_Return::New() const {
  return new GM_GET_ZYOrder_Return;
}

void GM_GET_ZYOrder_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
    if (has_m_orderdata()) {
      if (m_orderdata_ != &::google::protobuf::internal::kEmptyString) {
        m_orderdata_->clear();
      }
    }
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::kEmptyString) {
        userdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GET_ZYOrder_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_orderdata;
        break;
      }

      // optional string m_orderdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_orderdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_orderdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_orderdata().data(), this->m_orderdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userData;
        break;
      }

      // optional string userData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GET_ZYOrder_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // optional string m_orderdata = 2;
  if (has_m_orderdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_orderdata().data(), this->m_orderdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_orderdata(), output);
  }

  // optional string userData = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GET_ZYOrder_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // optional string m_orderdata = 2;
  if (has_m_orderdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_orderdata().data(), this->m_orderdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_orderdata(), target);
  }

  // optional string userData = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GET_ZYOrder_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional string m_orderdata = 2;
    if (has_m_orderdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_orderdata());
    }

    // optional string userData = 3;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GET_ZYOrder_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GET_ZYOrder_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GET_ZYOrder_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GET_ZYOrder_Return::MergeFrom(const GM_GET_ZYOrder_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_orderdata()) {
      set_m_orderdata(from.m_orderdata());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GET_ZYOrder_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GET_ZYOrder_Return::CopyFrom(const GM_GET_ZYOrder_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GET_ZYOrder_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GET_ZYOrder_Return::Swap(GM_GET_ZYOrder_Return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(m_orderdata_, other->m_orderdata_);
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GET_ZYOrder_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GET_ZYOrder_Return_descriptor_;
  metadata.reflection = GM_GET_ZYOrder_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
