// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_RealTime.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_RealTime.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_RealTime_Data_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_RealTime_Data_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_RealTime_Data_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_RealTime_Data_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_RealTime_Store_Data_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_RealTime_Store_Data_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_RealTime_Store_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_RealTime_Store_Info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fRealTime_2etxt() {
  protobuf_AddDesc_SP_5fRealTime_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_RealTime.txt");
  GOOGLE_CHECK(file != NULL);
  SM_RealTime_Data_Request_descriptor_ = file->message_type(0);
  static const int SM_RealTime_Data_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Request, roleid_),
  };
  SM_RealTime_Data_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_RealTime_Data_Request_descriptor_,
      SM_RealTime_Data_Request::default_instance_,
      SM_RealTime_Data_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_RealTime_Data_Request));
  SM_RealTime_Data_Return_descriptor_ = file->message_type(1);
  static const int SM_RealTime_Data_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Return, fighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Return, proof_),
  };
  SM_RealTime_Data_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_RealTime_Data_Return_descriptor_,
      SM_RealTime_Data_Return::default_instance_,
      SM_RealTime_Data_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Data_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_RealTime_Data_Return));
  SM_RealTime_Store_Data_Return_descriptor_ = file->message_type(2);
  static const int SM_RealTime_Store_Data_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Data_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Data_Return, data_),
  };
  SM_RealTime_Store_Data_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_RealTime_Store_Data_Return_descriptor_,
      SM_RealTime_Store_Data_Return::default_instance_,
      SM_RealTime_Store_Data_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Data_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Data_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_RealTime_Store_Data_Return));
  SM_RealTime_Store_Info_descriptor_ = file->message_type(3);
  static const int SM_RealTime_Store_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Info, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Info, count_),
  };
  SM_RealTime_Store_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_RealTime_Store_Info_descriptor_,
      SM_RealTime_Store_Info::default_instance_,
      SM_RealTime_Store_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_RealTime_Store_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_RealTime_Store_Info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fRealTime_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_RealTime_Data_Request_descriptor_, &SM_RealTime_Data_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_RealTime_Data_Return_descriptor_, &SM_RealTime_Data_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_RealTime_Store_Data_Return_descriptor_, &SM_RealTime_Store_Data_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_RealTime_Store_Info_descriptor_, &SM_RealTime_Store_Info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fRealTime_2etxt() {
  delete SM_RealTime_Data_Request::default_instance_;
  delete SM_RealTime_Data_Request_reflection_;
  delete SM_RealTime_Data_Return::default_instance_;
  delete SM_RealTime_Data_Return_reflection_;
  delete SM_RealTime_Store_Data_Return::default_instance_;
  delete SM_RealTime_Store_Data_Return_reflection_;
  delete SM_RealTime_Store_Info::default_instance_;
  delete SM_RealTime_Store_Info_reflection_;
}

void protobuf_AddDesc_SP_5fRealTime_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SP_RealTime.txt\"*\n\030SM_RealTime_Data_Re"
    "quest\022\016\n\006roleid\030\001 \002(\005\"\\\n\027SM_RealTime_Dat"
    "a_Return\022\016\n\006result\030\001 \002(\005\022\016\n\006roleid\030\002 \001(\005"
    "\022\022\n\nfighttimes\030\004 \001(\005\022\r\n\005proof\030\005 \001(\005\"U\n\035S"
    "M_RealTime_Store_Data_Return\022\r\n\005count\030\001 "
    "\002(\005\022%\n\004data\030\002 \003(\0132\027.SM_RealTime_Store_In"
    "fo\"G\n\026SM_RealTime_Store_Info\022\016\n\006roleid\030\001"
    " \002(\005\022\016\n\006itemid\030\002 \001(\005\022\r\n\005count\030\003 \001(\005", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_RealTime.txt", &protobuf_RegisterTypes);
  SM_RealTime_Data_Request::default_instance_ = new SM_RealTime_Data_Request();
  SM_RealTime_Data_Return::default_instance_ = new SM_RealTime_Data_Return();
  SM_RealTime_Store_Data_Return::default_instance_ = new SM_RealTime_Store_Data_Return();
  SM_RealTime_Store_Info::default_instance_ = new SM_RealTime_Store_Info();
  SM_RealTime_Data_Request::default_instance_->InitAsDefaultInstance();
  SM_RealTime_Data_Return::default_instance_->InitAsDefaultInstance();
  SM_RealTime_Store_Data_Return::default_instance_->InitAsDefaultInstance();
  SM_RealTime_Store_Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fRealTime_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fRealTime_2etxt {
  StaticDescriptorInitializer_SP_5fRealTime_2etxt() {
    protobuf_AddDesc_SP_5fRealTime_2etxt();
  }
} static_descriptor_initializer_SP_5fRealTime_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_RealTime_Data_Request::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_RealTime_Data_Request::SM_RealTime_Data_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_RealTime_Data_Request::InitAsDefaultInstance() {
}

SM_RealTime_Data_Request::SM_RealTime_Data_Request(const SM_RealTime_Data_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_RealTime_Data_Request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_RealTime_Data_Request::~SM_RealTime_Data_Request() {
  SharedDtor();
}

void SM_RealTime_Data_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_RealTime_Data_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_RealTime_Data_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_RealTime_Data_Request_descriptor_;
}

const SM_RealTime_Data_Request& SM_RealTime_Data_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fRealTime_2etxt();
  return *default_instance_;
}

SM_RealTime_Data_Request* SM_RealTime_Data_Request::default_instance_ = NULL;

SM_RealTime_Data_Request* SM_RealTime_Data_Request::New() const {
  return new SM_RealTime_Data_Request;
}

void SM_RealTime_Data_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_RealTime_Data_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_RealTime_Data_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_RealTime_Data_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_RealTime_Data_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_RealTime_Data_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_RealTime_Data_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_RealTime_Data_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_RealTime_Data_Request::MergeFrom(const SM_RealTime_Data_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_RealTime_Data_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_RealTime_Data_Request::CopyFrom(const SM_RealTime_Data_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_RealTime_Data_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_RealTime_Data_Request::Swap(SM_RealTime_Data_Request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_RealTime_Data_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_RealTime_Data_Request_descriptor_;
  metadata.reflection = SM_RealTime_Data_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_RealTime_Data_Return::kResultFieldNumber;
const int SM_RealTime_Data_Return::kRoleidFieldNumber;
const int SM_RealTime_Data_Return::kFighttimesFieldNumber;
const int SM_RealTime_Data_Return::kProofFieldNumber;
#endif  // !_MSC_VER

SM_RealTime_Data_Return::SM_RealTime_Data_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_RealTime_Data_Return::InitAsDefaultInstance() {
}

SM_RealTime_Data_Return::SM_RealTime_Data_Return(const SM_RealTime_Data_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_RealTime_Data_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roleid_ = 0;
  fighttimes_ = 0;
  proof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_RealTime_Data_Return::~SM_RealTime_Data_Return() {
  SharedDtor();
}

void SM_RealTime_Data_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_RealTime_Data_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_RealTime_Data_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_RealTime_Data_Return_descriptor_;
}

const SM_RealTime_Data_Return& SM_RealTime_Data_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fRealTime_2etxt();
  return *default_instance_;
}

SM_RealTime_Data_Return* SM_RealTime_Data_Return::default_instance_ = NULL;

SM_RealTime_Data_Return* SM_RealTime_Data_Return::New() const {
  return new SM_RealTime_Data_Return;
}

void SM_RealTime_Data_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roleid_ = 0;
    fighttimes_ = 0;
    proof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_RealTime_Data_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fighttimes;
        break;
      }

      // optional int32 fighttimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttimes_)));
          set_has_fighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proof;
        break;
      }

      // optional int32 proof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_RealTime_Data_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 fighttimes = 4;
  if (has_fighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fighttimes(), output);
  }

  // optional int32 proof = 5;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_RealTime_Data_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 fighttimes = 4;
  if (has_fighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fighttimes(), target);
  }

  // optional int32 proof = 5;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_RealTime_Data_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 fighttimes = 4;
    if (has_fighttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttimes());
    }

    // optional int32 proof = 5;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_RealTime_Data_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_RealTime_Data_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_RealTime_Data_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_RealTime_Data_Return::MergeFrom(const SM_RealTime_Data_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_fighttimes()) {
      set_fighttimes(from.fighttimes());
    }
    if (from.has_proof()) {
      set_proof(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_RealTime_Data_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_RealTime_Data_Return::CopyFrom(const SM_RealTime_Data_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_RealTime_Data_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_RealTime_Data_Return::Swap(SM_RealTime_Data_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(fighttimes_, other->fighttimes_);
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_RealTime_Data_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_RealTime_Data_Return_descriptor_;
  metadata.reflection = SM_RealTime_Data_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_RealTime_Store_Data_Return::kCountFieldNumber;
const int SM_RealTime_Store_Data_Return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_RealTime_Store_Data_Return::SM_RealTime_Store_Data_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_RealTime_Store_Data_Return::InitAsDefaultInstance() {
}

SM_RealTime_Store_Data_Return::SM_RealTime_Store_Data_Return(const SM_RealTime_Store_Data_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_RealTime_Store_Data_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_RealTime_Store_Data_Return::~SM_RealTime_Store_Data_Return() {
  SharedDtor();
}

void SM_RealTime_Store_Data_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_RealTime_Store_Data_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_RealTime_Store_Data_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_RealTime_Store_Data_Return_descriptor_;
}

const SM_RealTime_Store_Data_Return& SM_RealTime_Store_Data_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fRealTime_2etxt();
  return *default_instance_;
}

SM_RealTime_Store_Data_Return* SM_RealTime_Store_Data_Return::default_instance_ = NULL;

SM_RealTime_Store_Data_Return* SM_RealTime_Store_Data_Return::New() const {
  return new SM_RealTime_Store_Data_Return;
}

void SM_RealTime_Store_Data_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_RealTime_Store_Data_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_RealTime_Store_Info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_RealTime_Store_Data_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_RealTime_Store_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_RealTime_Store_Data_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_RealTime_Store_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_RealTime_Store_Data_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_RealTime_Store_Info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_RealTime_Store_Data_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_RealTime_Store_Data_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_RealTime_Store_Data_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_RealTime_Store_Data_Return::MergeFrom(const SM_RealTime_Store_Data_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_RealTime_Store_Data_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_RealTime_Store_Data_Return::CopyFrom(const SM_RealTime_Store_Data_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_RealTime_Store_Data_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_RealTime_Store_Data_Return::Swap(SM_RealTime_Store_Data_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_RealTime_Store_Data_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_RealTime_Store_Data_Return_descriptor_;
  metadata.reflection = SM_RealTime_Store_Data_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_RealTime_Store_Info::kRoleidFieldNumber;
const int SM_RealTime_Store_Info::kItemidFieldNumber;
const int SM_RealTime_Store_Info::kCountFieldNumber;
#endif  // !_MSC_VER

SM_RealTime_Store_Info::SM_RealTime_Store_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_RealTime_Store_Info::InitAsDefaultInstance() {
}

SM_RealTime_Store_Info::SM_RealTime_Store_Info(const SM_RealTime_Store_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_RealTime_Store_Info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  itemid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_RealTime_Store_Info::~SM_RealTime_Store_Info() {
  SharedDtor();
}

void SM_RealTime_Store_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_RealTime_Store_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_RealTime_Store_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_RealTime_Store_Info_descriptor_;
}

const SM_RealTime_Store_Info& SM_RealTime_Store_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fRealTime_2etxt();
  return *default_instance_;
}

SM_RealTime_Store_Info* SM_RealTime_Store_Info::default_instance_ = NULL;

SM_RealTime_Store_Info* SM_RealTime_Store_Info::New() const {
  return new SM_RealTime_Store_Info;
}

void SM_RealTime_Store_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    itemid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_RealTime_Store_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_RealTime_Store_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_RealTime_Store_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_RealTime_Store_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_RealTime_Store_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_RealTime_Store_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_RealTime_Store_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_RealTime_Store_Info::MergeFrom(const SM_RealTime_Store_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_RealTime_Store_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_RealTime_Store_Info::CopyFrom(const SM_RealTime_Store_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_RealTime_Store_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_RealTime_Store_Info::Swap(SM_RealTime_Store_Info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_RealTime_Store_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_RealTime_Store_Info_descriptor_;
  metadata.reflection = SM_RealTime_Store_Info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
