// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: title.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "title.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_TitleInfoPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TitleInfoPack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_title_2etxt() {
  protobuf_AddDesc_title_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "title.txt");
  GOOGLE_CHECK(file != NULL);
  GM_TitleInfoPack_descriptor_ = file->message_type(0);
  static const int GM_TitleInfoPack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TitleInfoPack, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TitleInfoPack, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TitleInfoPack, titleid_),
  };
  GM_TitleInfoPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TitleInfoPack_descriptor_,
      GM_TitleInfoPack::default_instance_,
      GM_TitleInfoPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TitleInfoPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TitleInfoPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TitleInfoPack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_title_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TitleInfoPack_descriptor_, &GM_TitleInfoPack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_title_2etxt() {
  delete GM_TitleInfoPack::default_instance_;
  delete GM_TitleInfoPack_reflection_;
}

void protobuf_AddDesc_title_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttitle.txt\"D\n\020GM_TitleInfoPack\022\016\n\006roleI"
    "d\030\001 \002(\005\022\017\n\007equipId\030\002 \002(\005\022\017\n\007titleId\030\003 \003("
    "\005", 81);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "title.txt", &protobuf_RegisterTypes);
  GM_TitleInfoPack::default_instance_ = new GM_TitleInfoPack();
  GM_TitleInfoPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_title_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_title_2etxt {
  StaticDescriptorInitializer_title_2etxt() {
    protobuf_AddDesc_title_2etxt();
  }
} static_descriptor_initializer_title_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_TitleInfoPack::kRoleIdFieldNumber;
const int GM_TitleInfoPack::kEquipIdFieldNumber;
const int GM_TitleInfoPack::kTitleIdFieldNumber;
#endif  // !_MSC_VER

GM_TitleInfoPack::GM_TitleInfoPack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TitleInfoPack::InitAsDefaultInstance() {
}

GM_TitleInfoPack::GM_TitleInfoPack(const GM_TitleInfoPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TitleInfoPack::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  equipid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TitleInfoPack::~GM_TitleInfoPack() {
  SharedDtor();
}

void GM_TitleInfoPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TitleInfoPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TitleInfoPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TitleInfoPack_descriptor_;
}

const GM_TitleInfoPack& GM_TitleInfoPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2etxt();
  return *default_instance_;
}

GM_TitleInfoPack* GM_TitleInfoPack::default_instance_ = NULL;

GM_TitleInfoPack* GM_TitleInfoPack::New() const {
  return new GM_TitleInfoPack;
}

void GM_TitleInfoPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    equipid_ = 0;
  }
  titleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TitleInfoPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipId;
        break;
      }

      // required int32 equipId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_titleId;
        break;
      }

      // repeated int32 titleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_titleid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_titleid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_titleId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TitleInfoPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 equipId = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipid(), output);
  }

  // repeated int32 titleId = 3;
  for (int i = 0; i < this->titleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->titleid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TitleInfoPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 equipId = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipid(), target);
  }

  // repeated int32 titleId = 3;
  for (int i = 0; i < this->titleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->titleid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TitleInfoPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 equipId = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }

  }
  // repeated int32 titleId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->titleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->titleid(i));
    }
    total_size += 1 * this->titleid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TitleInfoPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TitleInfoPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TitleInfoPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TitleInfoPack::MergeFrom(const GM_TitleInfoPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleid_.MergeFrom(from.titleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TitleInfoPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TitleInfoPack::CopyFrom(const GM_TitleInfoPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TitleInfoPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_TitleInfoPack::Swap(GM_TitleInfoPack* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(equipid_, other->equipid_);
    titleid_.Swap(&other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TitleInfoPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TitleInfoPack_descriptor_;
  metadata.reflection = GM_TitleInfoPack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
