// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_LimitPetMem.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_LimitPetMem.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_LimitPetMemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_LimitPetMemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_LimitPetMemReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_LimitPetMemReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fLimitPetMem_2etxt() {
  protobuf_AddDesc_SP_5fLimitPetMem_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_LimitPetMem.txt");
  GOOGLE_CHECK(file != NULL);
  SM_LimitPetMemRequest_descriptor_ = file->message_type(0);
  static const int SM_LimitPetMemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemRequest, m_roleid_),
  };
  SM_LimitPetMemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_LimitPetMemRequest_descriptor_,
      SM_LimitPetMemRequest::default_instance_,
      SM_LimitPetMemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_LimitPetMemRequest));
  SM_LimitPetMemReturn_descriptor_ = file->message_type(1);
  static const int SM_LimitPetMemReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemReturn, m_curbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemReturn, m_curendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemReturn, m_curtimes_),
  };
  SM_LimitPetMemReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_LimitPetMemReturn_descriptor_,
      SM_LimitPetMemReturn::default_instance_,
      SM_LimitPetMemReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_LimitPetMemReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_LimitPetMemReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fLimitPetMem_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_LimitPetMemRequest_descriptor_, &SM_LimitPetMemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_LimitPetMemReturn_descriptor_, &SM_LimitPetMemReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fLimitPetMem_2etxt() {
  delete SM_LimitPetMemRequest::default_instance_;
  delete SM_LimitPetMemRequest_reflection_;
  delete SM_LimitPetMemReturn::default_instance_;
  delete SM_LimitPetMemReturn_reflection_;
}

void protobuf_AddDesc_SP_5fLimitPetMem_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022SP_LimitPetMem.txt\")\n\025SM_LimitPetMemRe"
    "quest\022\020\n\010m_roleid\030\001 \002(\005\"X\n\024SM_LimitPetMe"
    "mReturn\022\026\n\016m_CurBeginTime\030\001 \002(\005\022\024\n\014m_Cur"
    "EndTime\030\002 \002(\005\022\022\n\nm_CurTimes\030\003 \002(\005", 153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_LimitPetMem.txt", &protobuf_RegisterTypes);
  SM_LimitPetMemRequest::default_instance_ = new SM_LimitPetMemRequest();
  SM_LimitPetMemReturn::default_instance_ = new SM_LimitPetMemReturn();
  SM_LimitPetMemRequest::default_instance_->InitAsDefaultInstance();
  SM_LimitPetMemReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fLimitPetMem_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fLimitPetMem_2etxt {
  StaticDescriptorInitializer_SP_5fLimitPetMem_2etxt() {
    protobuf_AddDesc_SP_5fLimitPetMem_2etxt();
  }
} static_descriptor_initializer_SP_5fLimitPetMem_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_LimitPetMemRequest::kMRoleidFieldNumber;
#endif  // !_MSC_VER

SM_LimitPetMemRequest::SM_LimitPetMemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_LimitPetMemRequest::InitAsDefaultInstance() {
}

SM_LimitPetMemRequest::SM_LimitPetMemRequest(const SM_LimitPetMemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_LimitPetMemRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_LimitPetMemRequest::~SM_LimitPetMemRequest() {
  SharedDtor();
}

void SM_LimitPetMemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_LimitPetMemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_LimitPetMemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_LimitPetMemRequest_descriptor_;
}

const SM_LimitPetMemRequest& SM_LimitPetMemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fLimitPetMem_2etxt();
  return *default_instance_;
}

SM_LimitPetMemRequest* SM_LimitPetMemRequest::default_instance_ = NULL;

SM_LimitPetMemRequest* SM_LimitPetMemRequest::New() const {
  return new SM_LimitPetMemRequest;
}

void SM_LimitPetMemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_LimitPetMemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_LimitPetMemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_LimitPetMemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_LimitPetMemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_LimitPetMemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_LimitPetMemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_LimitPetMemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_LimitPetMemRequest::MergeFrom(const SM_LimitPetMemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_LimitPetMemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_LimitPetMemRequest::CopyFrom(const SM_LimitPetMemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_LimitPetMemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_LimitPetMemRequest::Swap(SM_LimitPetMemRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_LimitPetMemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_LimitPetMemRequest_descriptor_;
  metadata.reflection = SM_LimitPetMemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_LimitPetMemReturn::kMCurBeginTimeFieldNumber;
const int SM_LimitPetMemReturn::kMCurEndTimeFieldNumber;
const int SM_LimitPetMemReturn::kMCurTimesFieldNumber;
#endif  // !_MSC_VER

SM_LimitPetMemReturn::SM_LimitPetMemReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_LimitPetMemReturn::InitAsDefaultInstance() {
}

SM_LimitPetMemReturn::SM_LimitPetMemReturn(const SM_LimitPetMemReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_LimitPetMemReturn::SharedCtor() {
  _cached_size_ = 0;
  m_curbegintime_ = 0;
  m_curendtime_ = 0;
  m_curtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_LimitPetMemReturn::~SM_LimitPetMemReturn() {
  SharedDtor();
}

void SM_LimitPetMemReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_LimitPetMemReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_LimitPetMemReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_LimitPetMemReturn_descriptor_;
}

const SM_LimitPetMemReturn& SM_LimitPetMemReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fLimitPetMem_2etxt();
  return *default_instance_;
}

SM_LimitPetMemReturn* SM_LimitPetMemReturn::default_instance_ = NULL;

SM_LimitPetMemReturn* SM_LimitPetMemReturn::New() const {
  return new SM_LimitPetMemReturn;
}

void SM_LimitPetMemReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_curbegintime_ = 0;
    m_curendtime_ = 0;
    m_curtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_LimitPetMemReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_CurBeginTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_curbegintime_)));
          set_has_m_curbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_CurEndTime;
        break;
      }

      // required int32 m_CurEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CurEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_curendtime_)));
          set_has_m_curendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_CurTimes;
        break;
      }

      // required int32 m_CurTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CurTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_curtimes_)));
          set_has_m_curtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_LimitPetMemReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_CurBeginTime = 1;
  if (has_m_curbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_curbegintime(), output);
  }

  // required int32 m_CurEndTime = 2;
  if (has_m_curendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_curendtime(), output);
  }

  // required int32 m_CurTimes = 3;
  if (has_m_curtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_curtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_LimitPetMemReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_CurBeginTime = 1;
  if (has_m_curbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_curbegintime(), target);
  }

  // required int32 m_CurEndTime = 2;
  if (has_m_curendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_curendtime(), target);
  }

  // required int32 m_CurTimes = 3;
  if (has_m_curtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_curtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_LimitPetMemReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_CurBeginTime = 1;
    if (has_m_curbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_curbegintime());
    }

    // required int32 m_CurEndTime = 2;
    if (has_m_curendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_curendtime());
    }

    // required int32 m_CurTimes = 3;
    if (has_m_curtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_curtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_LimitPetMemReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_LimitPetMemReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_LimitPetMemReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_LimitPetMemReturn::MergeFrom(const SM_LimitPetMemReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_curbegintime()) {
      set_m_curbegintime(from.m_curbegintime());
    }
    if (from.has_m_curendtime()) {
      set_m_curendtime(from.m_curendtime());
    }
    if (from.has_m_curtimes()) {
      set_m_curtimes(from.m_curtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_LimitPetMemReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_LimitPetMemReturn::CopyFrom(const SM_LimitPetMemReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_LimitPetMemReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_LimitPetMemReturn::Swap(SM_LimitPetMemReturn* other) {
  if (other != this) {
    std::swap(m_curbegintime_, other->m_curbegintime_);
    std::swap(m_curendtime_, other->m_curendtime_);
    std::swap(m_curtimes_, other->m_curtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_LimitPetMemReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_LimitPetMemReturn_descriptor_;
  metadata.reflection = SM_LimitPetMemReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
