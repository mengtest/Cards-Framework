// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itemuse.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "itemuse.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_ItemUse_Open_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ItemUse_Open_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ItemUse_Open_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ItemUse_Open_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ItemUse_GetObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ItemUse_GetObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ItemUse_Compound_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ItemUse_Compound_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ItemUse_Compound_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ItemUse_Compound_Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_itemuse_2etxt() {
  protobuf_AddDesc_itemuse_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "itemuse.txt");
  GOOGLE_CHECK(file != NULL);
  GM_ItemUse_Open_Request_descriptor_ = file->message_type(0);
  static const int GM_ItemUse_Open_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Request, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Request, count_),
  };
  GM_ItemUse_Open_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ItemUse_Open_Request_descriptor_,
      GM_ItemUse_Open_Request::default_instance_,
      GM_ItemUse_Open_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ItemUse_Open_Request));
  GM_ItemUse_Open_Result_descriptor_ = file->message_type(1);
  static const int GM_ItemUse_Open_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Result, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Result, usedcount_),
  };
  GM_ItemUse_Open_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ItemUse_Open_Result_descriptor_,
      GM_ItemUse_Open_Result::default_instance_,
      GM_ItemUse_Open_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Open_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ItemUse_Open_Result));
  GM_ItemUse_GetObject_descriptor_ = file->message_type(2);
  static const int GM_ItemUse_GetObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_GetObject, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_GetObject, count_),
  };
  GM_ItemUse_GetObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ItemUse_GetObject_descriptor_,
      GM_ItemUse_GetObject::default_instance_,
      GM_ItemUse_GetObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_GetObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_GetObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ItemUse_GetObject));
  GM_ItemUse_Compound_Request_descriptor_ = file->message_type(3);
  static const int GM_ItemUse_Compound_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Request, chipid_),
  };
  GM_ItemUse_Compound_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ItemUse_Compound_Request_descriptor_,
      GM_ItemUse_Compound_Request::default_instance_,
      GM_ItemUse_Compound_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ItemUse_Compound_Request));
  GM_ItemUse_Compound_Result_descriptor_ = file->message_type(4);
  static const int GM_ItemUse_Compound_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Result, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Result, objectnum_),
  };
  GM_ItemUse_Compound_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ItemUse_Compound_Result_descriptor_,
      GM_ItemUse_Compound_Result::default_instance_,
      GM_ItemUse_Compound_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemUse_Compound_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ItemUse_Compound_Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_itemuse_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ItemUse_Open_Request_descriptor_, &GM_ItemUse_Open_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ItemUse_Open_Result_descriptor_, &GM_ItemUse_Open_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ItemUse_GetObject_descriptor_, &GM_ItemUse_GetObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ItemUse_Compound_Request_descriptor_, &GM_ItemUse_Compound_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ItemUse_Compound_Result_descriptor_, &GM_ItemUse_Compound_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_itemuse_2etxt() {
  delete GM_ItemUse_Open_Request::default_instance_;
  delete GM_ItemUse_Open_Request_reflection_;
  delete GM_ItemUse_Open_Result::default_instance_;
  delete GM_ItemUse_Open_Result_reflection_;
  delete GM_ItemUse_GetObject::default_instance_;
  delete GM_ItemUse_GetObject_reflection_;
  delete GM_ItemUse_Compound_Request::default_instance_;
  delete GM_ItemUse_Compound_Request_reflection_;
  delete GM_ItemUse_Compound_Result::default_instance_;
  delete GM_ItemUse_Compound_Result_reflection_;
}

void protobuf_AddDesc_itemuse_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013itemuse.txt\":\n\027GM_ItemUse_Open_Request"
    "\022\020\n\010objectid\030\001 \002(\005\022\r\n\005count\030\002 \002(\r\"`\n\026GM_"
    "ItemUse_Open_Result\022\016\n\006result\030\001 \002(\005\022#\n\004i"
    "tem\030\002 \003(\0132\025.GM_ItemUse_GetObject\022\021\n\tused"
    "count\030\003 \002(\005\"7\n\024GM_ItemUse_GetObject\022\020\n\010o"
    "bjectid\030\001 \002(\005\022\r\n\005count\030\002 \002(\r\"-\n\033GM_ItemU"
    "se_Compound_Request\022\016\n\006chipid\030\001 \002(\005\"Q\n\032G"
    "M_ItemUse_Compound_Result\022\016\n\006result\030\001 \002("
    "\005\022\020\n\010objectid\030\002 \001(\005\022\021\n\tobjectnum\030\003 \001(\005", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "itemuse.txt", &protobuf_RegisterTypes);
  GM_ItemUse_Open_Request::default_instance_ = new GM_ItemUse_Open_Request();
  GM_ItemUse_Open_Result::default_instance_ = new GM_ItemUse_Open_Result();
  GM_ItemUse_GetObject::default_instance_ = new GM_ItemUse_GetObject();
  GM_ItemUse_Compound_Request::default_instance_ = new GM_ItemUse_Compound_Request();
  GM_ItemUse_Compound_Result::default_instance_ = new GM_ItemUse_Compound_Result();
  GM_ItemUse_Open_Request::default_instance_->InitAsDefaultInstance();
  GM_ItemUse_Open_Result::default_instance_->InitAsDefaultInstance();
  GM_ItemUse_GetObject::default_instance_->InitAsDefaultInstance();
  GM_ItemUse_Compound_Request::default_instance_->InitAsDefaultInstance();
  GM_ItemUse_Compound_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_itemuse_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_itemuse_2etxt {
  StaticDescriptorInitializer_itemuse_2etxt() {
    protobuf_AddDesc_itemuse_2etxt();
  }
} static_descriptor_initializer_itemuse_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_ItemUse_Open_Request::kObjectidFieldNumber;
const int GM_ItemUse_Open_Request::kCountFieldNumber;
#endif  // !_MSC_VER

GM_ItemUse_Open_Request::GM_ItemUse_Open_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ItemUse_Open_Request::InitAsDefaultInstance() {
}

GM_ItemUse_Open_Request::GM_ItemUse_Open_Request(const GM_ItemUse_Open_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ItemUse_Open_Request::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ItemUse_Open_Request::~GM_ItemUse_Open_Request() {
  SharedDtor();
}

void GM_ItemUse_Open_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ItemUse_Open_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ItemUse_Open_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ItemUse_Open_Request_descriptor_;
}

const GM_ItemUse_Open_Request& GM_ItemUse_Open_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemuse_2etxt();
  return *default_instance_;
}

GM_ItemUse_Open_Request* GM_ItemUse_Open_Request::default_instance_ = NULL;

GM_ItemUse_Open_Request* GM_ItemUse_Open_Request::New() const {
  return new GM_ItemUse_Open_Request;
}

void GM_ItemUse_Open_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ItemUse_Open_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ItemUse_Open_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ItemUse_Open_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ItemUse_Open_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ItemUse_Open_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ItemUse_Open_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ItemUse_Open_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ItemUse_Open_Request::MergeFrom(const GM_ItemUse_Open_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ItemUse_Open_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ItemUse_Open_Request::CopyFrom(const GM_ItemUse_Open_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ItemUse_Open_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_ItemUse_Open_Request::Swap(GM_ItemUse_Open_Request* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ItemUse_Open_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ItemUse_Open_Request_descriptor_;
  metadata.reflection = GM_ItemUse_Open_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ItemUse_Open_Result::kResultFieldNumber;
const int GM_ItemUse_Open_Result::kItemFieldNumber;
const int GM_ItemUse_Open_Result::kUsedcountFieldNumber;
#endif  // !_MSC_VER

GM_ItemUse_Open_Result::GM_ItemUse_Open_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ItemUse_Open_Result::InitAsDefaultInstance() {
}

GM_ItemUse_Open_Result::GM_ItemUse_Open_Result(const GM_ItemUse_Open_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ItemUse_Open_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  usedcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ItemUse_Open_Result::~GM_ItemUse_Open_Result() {
  SharedDtor();
}

void GM_ItemUse_Open_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ItemUse_Open_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ItemUse_Open_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ItemUse_Open_Result_descriptor_;
}

const GM_ItemUse_Open_Result& GM_ItemUse_Open_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemuse_2etxt();
  return *default_instance_;
}

GM_ItemUse_Open_Result* GM_ItemUse_Open_Result::default_instance_ = NULL;

GM_ItemUse_Open_Result* GM_ItemUse_Open_Result::New() const {
  return new GM_ItemUse_Open_Result;
}

void GM_ItemUse_Open_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    usedcount_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ItemUse_Open_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .GM_ItemUse_GetObject item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_usedcount;
        break;
      }

      // required int32 usedcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usedcount_)));
          set_has_usedcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ItemUse_Open_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_ItemUse_GetObject item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // required int32 usedcount = 3;
  if (has_usedcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usedcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ItemUse_Open_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_ItemUse_GetObject item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // required int32 usedcount = 3;
  if (has_usedcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usedcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ItemUse_Open_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 usedcount = 3;
    if (has_usedcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usedcount());
    }

  }
  // repeated .GM_ItemUse_GetObject item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ItemUse_Open_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ItemUse_Open_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ItemUse_Open_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ItemUse_Open_Result::MergeFrom(const GM_ItemUse_Open_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_usedcount()) {
      set_usedcount(from.usedcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ItemUse_Open_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ItemUse_Open_Result::CopyFrom(const GM_ItemUse_Open_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ItemUse_Open_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ItemUse_Open_Result::Swap(GM_ItemUse_Open_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    item_.Swap(&other->item_);
    std::swap(usedcount_, other->usedcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ItemUse_Open_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ItemUse_Open_Result_descriptor_;
  metadata.reflection = GM_ItemUse_Open_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ItemUse_GetObject::kObjectidFieldNumber;
const int GM_ItemUse_GetObject::kCountFieldNumber;
#endif  // !_MSC_VER

GM_ItemUse_GetObject::GM_ItemUse_GetObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ItemUse_GetObject::InitAsDefaultInstance() {
}

GM_ItemUse_GetObject::GM_ItemUse_GetObject(const GM_ItemUse_GetObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ItemUse_GetObject::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ItemUse_GetObject::~GM_ItemUse_GetObject() {
  SharedDtor();
}

void GM_ItemUse_GetObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ItemUse_GetObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ItemUse_GetObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ItemUse_GetObject_descriptor_;
}

const GM_ItemUse_GetObject& GM_ItemUse_GetObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemuse_2etxt();
  return *default_instance_;
}

GM_ItemUse_GetObject* GM_ItemUse_GetObject::default_instance_ = NULL;

GM_ItemUse_GetObject* GM_ItemUse_GetObject::New() const {
  return new GM_ItemUse_GetObject;
}

void GM_ItemUse_GetObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ItemUse_GetObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ItemUse_GetObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ItemUse_GetObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ItemUse_GetObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ItemUse_GetObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ItemUse_GetObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ItemUse_GetObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ItemUse_GetObject::MergeFrom(const GM_ItemUse_GetObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ItemUse_GetObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ItemUse_GetObject::CopyFrom(const GM_ItemUse_GetObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ItemUse_GetObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_ItemUse_GetObject::Swap(GM_ItemUse_GetObject* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ItemUse_GetObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ItemUse_GetObject_descriptor_;
  metadata.reflection = GM_ItemUse_GetObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ItemUse_Compound_Request::kChipidFieldNumber;
#endif  // !_MSC_VER

GM_ItemUse_Compound_Request::GM_ItemUse_Compound_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ItemUse_Compound_Request::InitAsDefaultInstance() {
}

GM_ItemUse_Compound_Request::GM_ItemUse_Compound_Request(const GM_ItemUse_Compound_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ItemUse_Compound_Request::SharedCtor() {
  _cached_size_ = 0;
  chipid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ItemUse_Compound_Request::~GM_ItemUse_Compound_Request() {
  SharedDtor();
}

void GM_ItemUse_Compound_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ItemUse_Compound_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ItemUse_Compound_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ItemUse_Compound_Request_descriptor_;
}

const GM_ItemUse_Compound_Request& GM_ItemUse_Compound_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemuse_2etxt();
  return *default_instance_;
}

GM_ItemUse_Compound_Request* GM_ItemUse_Compound_Request::default_instance_ = NULL;

GM_ItemUse_Compound_Request* GM_ItemUse_Compound_Request::New() const {
  return new GM_ItemUse_Compound_Request;
}

void GM_ItemUse_Compound_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chipid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ItemUse_Compound_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chipid_)));
          set_has_chipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ItemUse_Compound_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chipid = 1;
  if (has_chipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chipid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ItemUse_Compound_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chipid = 1;
  if (has_chipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chipid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ItemUse_Compound_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chipid = 1;
    if (has_chipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chipid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ItemUse_Compound_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ItemUse_Compound_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ItemUse_Compound_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ItemUse_Compound_Request::MergeFrom(const GM_ItemUse_Compound_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chipid()) {
      set_chipid(from.chipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ItemUse_Compound_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ItemUse_Compound_Request::CopyFrom(const GM_ItemUse_Compound_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ItemUse_Compound_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ItemUse_Compound_Request::Swap(GM_ItemUse_Compound_Request* other) {
  if (other != this) {
    std::swap(chipid_, other->chipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ItemUse_Compound_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ItemUse_Compound_Request_descriptor_;
  metadata.reflection = GM_ItemUse_Compound_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ItemUse_Compound_Result::kResultFieldNumber;
const int GM_ItemUse_Compound_Result::kObjectidFieldNumber;
const int GM_ItemUse_Compound_Result::kObjectnumFieldNumber;
#endif  // !_MSC_VER

GM_ItemUse_Compound_Result::GM_ItemUse_Compound_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ItemUse_Compound_Result::InitAsDefaultInstance() {
}

GM_ItemUse_Compound_Result::GM_ItemUse_Compound_Result(const GM_ItemUse_Compound_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ItemUse_Compound_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ItemUse_Compound_Result::~GM_ItemUse_Compound_Result() {
  SharedDtor();
}

void GM_ItemUse_Compound_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ItemUse_Compound_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ItemUse_Compound_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ItemUse_Compound_Result_descriptor_;
}

const GM_ItemUse_Compound_Result& GM_ItemUse_Compound_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemuse_2etxt();
  return *default_instance_;
}

GM_ItemUse_Compound_Result* GM_ItemUse_Compound_Result::default_instance_ = NULL;

GM_ItemUse_Compound_Result* GM_ItemUse_Compound_Result::New() const {
  return new GM_ItemUse_Compound_Result;
}

void GM_ItemUse_Compound_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ItemUse_Compound_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectnum;
        break;
      }

      // optional int32 objectnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ItemUse_Compound_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // optional int32 objectnum = 3;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ItemUse_Compound_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // optional int32 objectnum = 3;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ItemUse_Compound_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 objectnum = 3;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ItemUse_Compound_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ItemUse_Compound_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ItemUse_Compound_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ItemUse_Compound_Result::MergeFrom(const GM_ItemUse_Compound_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ItemUse_Compound_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ItemUse_Compound_Result::CopyFrom(const GM_ItemUse_Compound_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ItemUse_Compound_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ItemUse_Compound_Result::Swap(GM_ItemUse_Compound_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ItemUse_Compound_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ItemUse_Compound_Result_descriptor_;
  metadata.reflection = GM_ItemUse_Compound_Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
