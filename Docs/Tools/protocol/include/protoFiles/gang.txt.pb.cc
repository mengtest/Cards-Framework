// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gang.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gang.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_GangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MyGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MyGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllGangApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllGangApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CreateGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CreateGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRoleOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRoleOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllGangRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllGangRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangNoticeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangNoticeChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangQuickJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangQuickJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllGangLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllGangLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangIntroduction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangIntroduction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_FBInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_FBInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_FBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_FBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_FBInfo_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_FBInfo_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_RankInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_RankInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_RankInfo_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_RankInfo_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_Fight_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_Fight_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_Fight_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_Fight_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFB_TakeFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFB_TakeFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangShopObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangShopObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangModuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangModuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangHall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangHall_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangTemp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangTemp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlessResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlessResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BlessObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BlessObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangModuleInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangModuleInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ApplyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ApplyResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gang_2etxt() {
  protobuf_AddDesc_gang_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gang.txt");
  GOOGLE_CHECK(file != NULL);
  GM_GangInfo_descriptor_ = file->message_type(0);
  static const int GM_GangInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, maxmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, pronoce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, isapply_),
  };
  GM_GangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangInfo_descriptor_,
      GM_GangInfo::default_instance_,
      GM_GangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangInfo));
  GM_MyGang_descriptor_ = file->message_type(1);
  static const int GM_MyGang_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, pow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, richies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, roles_),
  };
  GM_MyGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MyGang_descriptor_,
      GM_MyGang::default_instance_,
      GM_MyGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MyGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MyGang));
  GM_AllGangInfo_descriptor_ = file->message_type(2);
  static const int GM_AllGangInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInfo, m_allgangcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInfo, gang_),
  };
  GM_AllGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllGangInfo_descriptor_,
      GM_AllGangInfo::default_instance_,
      GM_AllGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllGangInfo));
  GM_AllGangApply_descriptor_ = file->message_type(3);
  static const int GM_AllGangApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangApply, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangApply, roles_),
  };
  GM_AllGangApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllGangApply_descriptor_,
      GM_AllGangApply::default_instance_,
      GM_AllGangApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllGangApply));
  GM_CreateGang_descriptor_ = file->message_type(4);
  static const int GM_CreateGang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateGang, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateGang, name_),
  };
  GM_CreateGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CreateGang_descriptor_,
      GM_CreateGang::default_instance_,
      GM_CreateGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CreateGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CreateGang));
  GM_GangRoleOperate_descriptor_ = file->message_type(5);
  static const int GM_GangRoleOperate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRoleOperate, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRoleOperate, operid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRoleOperate, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRoleOperate, isagree_),
  };
  GM_GangRoleOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRoleOperate_descriptor_,
      GM_GangRoleOperate::default_instance_,
      GM_GangRoleOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRoleOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRoleOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRoleOperate));
  GM_GangRole_descriptor_ = file->message_type(6);
  static const int GM_GangRole_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, vocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, lastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, hisrichies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, richies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, contype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, isfriend_),
  };
  GM_GangRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRole_descriptor_,
      GM_GangRole::default_instance_,
      GM_GangRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRole));
  GM_AllGangRole_descriptor_ = file->message_type(7);
  static const int GM_AllGangRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangRole, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangRole, roles_),
  };
  GM_AllGangRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllGangRole_descriptor_,
      GM_AllGangRole::default_instance_,
      GM_AllGangRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllGangRole));
  GM_GangNoticeChange_descriptor_ = file->message_type(8);
  static const int GM_GangNoticeChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNoticeChange, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNoticeChange, notice_),
  };
  GM_GangNoticeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangNoticeChange_descriptor_,
      GM_GangNoticeChange::default_instance_,
      GM_GangNoticeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNoticeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNoticeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangNoticeChange));
  GM_GangQuickJoin_descriptor_ = file->message_type(9);
  static const int GM_GangQuickJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangQuickJoin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangQuickJoin, ganggmid_),
  };
  GM_GangQuickJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangQuickJoin_descriptor_,
      GM_GangQuickJoin::default_instance_,
      GM_GangQuickJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangQuickJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangQuickJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangQuickJoin));
  GM_GangLog_descriptor_ = file->message_type(10);
  static const int GM_GangLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, m_rolelv_),
  };
  GM_GangLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangLog_descriptor_,
      GM_GangLog::default_instance_,
      GM_GangLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangLog));
  GM_AllGangLog_descriptor_ = file->message_type(11);
  static const int GM_AllGangLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangLog, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangLog, logs_),
  };
  GM_AllGangLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllGangLog_descriptor_,
      GM_AllGangLog::default_instance_,
      GM_AllGangLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllGangLog));
  GM_GangRankInfo_descriptor_ = file->message_type(12);
  static const int GM_GangRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, m_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, m_gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, m_people_),
  };
  GM_GangRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRankInfo_descriptor_,
      GM_GangRankInfo::default_instance_,
      GM_GangRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRankInfo));
  GM_GangRank_descriptor_ = file->message_type(13);
  static const int GM_GangRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRank, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRank, gangrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRank, m_mygangrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRank, m_mygangname_),
  };
  GM_GangRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRank_descriptor_,
      GM_GangRank::default_instance_,
      GM_GangRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRank));
  GM_GangIntroduction_descriptor_ = file->message_type(14);
  static const int GM_GangIntroduction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, ganglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, gangmembers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, gangleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, gangnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, maxmembers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, gangrank_),
  };
  GM_GangIntroduction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangIntroduction_descriptor_,
      GM_GangIntroduction::default_instance_,
      GM_GangIntroduction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangIntroduction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangIntroduction));
  GM_GangFB_FBInfo_Request_descriptor_ = file->message_type(15);
  static const int GM_GangFB_FBInfo_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Request, fbid_),
  };
  GM_GangFB_FBInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_FBInfo_Request_descriptor_,
      GM_GangFB_FBInfo_Request::default_instance_,
      GM_GangFB_FBInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_FBInfo_Request));
  GM_GangFB_FBInfo_descriptor_ = file->message_type(16);
  static const int GM_GangFB_FBInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo, lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo, percent_),
  };
  GM_GangFB_FBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_FBInfo_descriptor_,
      GM_GangFB_FBInfo::default_instance_,
      GM_GangFB_FBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_FBInfo));
  GM_GangFB_FBInfo_Return_descriptor_ = file->message_type(17);
  static const int GM_GangFB_FBInfo_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Return, fbinfo_),
  };
  GM_GangFB_FBInfo_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_FBInfo_Return_descriptor_,
      GM_GangFB_FBInfo_Return::default_instance_,
      GM_GangFB_FBInfo_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_FBInfo_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_FBInfo_Return));
  GM_GangFB_RankInfo_Request_descriptor_ = file->message_type(18);
  static const int GM_GangFB_RankInfo_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Request, fbid_),
  };
  GM_GangFB_RankInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_RankInfo_Request_descriptor_,
      GM_GangFB_RankInfo_Request::default_instance_,
      GM_GangFB_RankInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_RankInfo_Request));
  GM_GangFB_RankInfo_descriptor_ = file->message_type(19);
  static const int GM_GangFB_RankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo, totalmage_),
  };
  GM_GangFB_RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_RankInfo_descriptor_,
      GM_GangFB_RankInfo::default_instance_,
      GM_GangFB_RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_RankInfo));
  GM_GangFB_RankInfo_Return_descriptor_ = file->message_type(20);
  static const int GM_GangFB_RankInfo_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Return, rankinfo_),
  };
  GM_GangFB_RankInfo_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_RankInfo_Return_descriptor_,
      GM_GangFB_RankInfo_Return::default_instance_,
      GM_GangFB_RankInfo_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_RankInfo_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_RankInfo_Return));
  GM_GangFB_Fight_Request_descriptor_ = file->message_type(21);
  static const int GM_GangFB_Fight_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Fight_Request, fbid_),
  };
  GM_GangFB_Fight_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_Fight_Request_descriptor_,
      GM_GangFB_Fight_Request::default_instance_,
      GM_GangFB_Fight_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Fight_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Fight_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_Fight_Request));
  GM_GangFB_Fight_Return_descriptor_ = file->message_type(22);
  static const int GM_GangFB_Fight_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Fight_Return, result_),
  };
  GM_GangFB_Fight_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_Fight_Return_descriptor_,
      GM_GangFB_Fight_Return::default_instance_,
      GM_GangFB_Fight_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Fight_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Fight_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_Fight_Return));
  GM_GangFB_Reward_descriptor_ = file->message_type(23);
  static const int GM_GangFB_Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Reward, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Reward, number_),
  };
  GM_GangFB_Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_Reward_descriptor_,
      GM_GangFB_Reward::default_instance_,
      GM_GangFB_Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_Reward));
  GM_GangFB_TakeFight_descriptor_ = file->message_type(24);
  static const int GM_GangFB_TakeFight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_TakeFight, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_TakeFight, rewards_),
  };
  GM_GangFB_TakeFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFB_TakeFight_descriptor_,
      GM_GangFB_TakeFight::default_instance_,
      GM_GangFB_TakeFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_TakeFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFB_TakeFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFB_TakeFight));
  GM_GangShop_descriptor_ = file->message_type(25);
  static const int GM_GangShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShop, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShop, m_uplecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShop, m_shopobj_),
  };
  GM_GangShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangShop_descriptor_,
      GM_GangShop::default_instance_,
      GM_GangShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangShop));
  GM_GangShopObj_descriptor_ = file->message_type(26);
  static const int GM_GangShopObj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShopObj, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShopObj, m_showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShopObj, m_remain_),
  };
  GM_GangShopObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangShopObj_descriptor_,
      GM_GangShopObj::default_instance_,
      GM_GangShopObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShopObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangShopObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangShopObj));
  GM_GangModuleInfo_descriptor_ = file->message_type(27);
  static const int GM_GangModuleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, isunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, m_halldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, m_tempdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, m_shopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, maxlv_),
  };
  GM_GangModuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangModuleInfo_descriptor_,
      GM_GangModuleInfo::default_instance_,
      GM_GangModuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangModuleInfo));
  GM_GangHall_descriptor_ = file->message_type(28);
  static const int GM_GangHall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangHall, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangHall, m_uplecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangHall, m_ishall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangHall, m_halllog_),
  };
  GM_GangHall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangHall_descriptor_,
      GM_GangHall::default_instance_,
      GM_GangHall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangHall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangHall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangHall));
  GM_GangTemp_descriptor_ = file->message_type(29);
  static const int GM_GangTemp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, m_uplecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, m_remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, m_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, m_isbless_),
  };
  GM_GangTemp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangTemp_descriptor_,
      GM_GangTemp::default_instance_,
      GM_GangTemp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangTemp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangTemp));
  GM_BlessResult_descriptor_ = file->message_type(30);
  static const int GM_BlessResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessResult, m_objs_),
  };
  GM_BlessResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlessResult_descriptor_,
      GM_BlessResult::default_instance_,
      GM_BlessResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlessResult));
  GM_BlessObj_descriptor_ = file->message_type(31);
  static const int GM_BlessObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessObj, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessObj, m_objcount_),
  };
  GM_BlessObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BlessObj_descriptor_,
      GM_BlessObj::default_instance_,
      GM_BlessObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BlessObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BlessObj));
  GM_GangModuleInfoList_descriptor_ = file->message_type(32);
  static const int GM_GangModuleInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfoList, hasgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfoList, gangmoduleinfo_),
  };
  GM_GangModuleInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangModuleInfoList_descriptor_,
      GM_GangModuleInfoList::default_instance_,
      GM_GangModuleInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangModuleInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangModuleInfoList));
  GM_GangNotify_descriptor_ = file->message_type(33);
  static const int GM_GangNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNotify, m_ganggmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNotify, m_gangexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNotify, m_ganglv_),
  };
  GM_GangNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangNotify_descriptor_,
      GM_GangNotify::default_instance_,
      GM_GangNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangNotify));
  GM_ApplyResult_descriptor_ = file->message_type(34);
  static const int GM_ApplyResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ApplyResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ApplyResult, m_preganggmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ApplyResult, m_nowganggmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ApplyResult, m_applycount_),
  };
  GM_ApplyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ApplyResult_descriptor_,
      GM_ApplyResult::default_instance_,
      GM_ApplyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ApplyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ApplyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ApplyResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gang_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangInfo_descriptor_, &GM_GangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MyGang_descriptor_, &GM_MyGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllGangInfo_descriptor_, &GM_AllGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllGangApply_descriptor_, &GM_AllGangApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CreateGang_descriptor_, &GM_CreateGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRoleOperate_descriptor_, &GM_GangRoleOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRole_descriptor_, &GM_GangRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllGangRole_descriptor_, &GM_AllGangRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangNoticeChange_descriptor_, &GM_GangNoticeChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangQuickJoin_descriptor_, &GM_GangQuickJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangLog_descriptor_, &GM_GangLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllGangLog_descriptor_, &GM_AllGangLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRankInfo_descriptor_, &GM_GangRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRank_descriptor_, &GM_GangRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangIntroduction_descriptor_, &GM_GangIntroduction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_FBInfo_Request_descriptor_, &GM_GangFB_FBInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_FBInfo_descriptor_, &GM_GangFB_FBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_FBInfo_Return_descriptor_, &GM_GangFB_FBInfo_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_RankInfo_Request_descriptor_, &GM_GangFB_RankInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_RankInfo_descriptor_, &GM_GangFB_RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_RankInfo_Return_descriptor_, &GM_GangFB_RankInfo_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_Fight_Request_descriptor_, &GM_GangFB_Fight_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_Fight_Return_descriptor_, &GM_GangFB_Fight_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_Reward_descriptor_, &GM_GangFB_Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFB_TakeFight_descriptor_, &GM_GangFB_TakeFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangShop_descriptor_, &GM_GangShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangShopObj_descriptor_, &GM_GangShopObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangModuleInfo_descriptor_, &GM_GangModuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangHall_descriptor_, &GM_GangHall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangTemp_descriptor_, &GM_GangTemp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlessResult_descriptor_, &GM_BlessResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BlessObj_descriptor_, &GM_BlessObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangModuleInfoList_descriptor_, &GM_GangModuleInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangNotify_descriptor_, &GM_GangNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ApplyResult_descriptor_, &GM_ApplyResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gang_2etxt() {
  delete GM_GangInfo::default_instance_;
  delete GM_GangInfo_reflection_;
  delete GM_MyGang::default_instance_;
  delete GM_MyGang_reflection_;
  delete GM_AllGangInfo::default_instance_;
  delete GM_AllGangInfo_reflection_;
  delete GM_AllGangApply::default_instance_;
  delete GM_AllGangApply_reflection_;
  delete GM_CreateGang::default_instance_;
  delete GM_CreateGang_reflection_;
  delete GM_GangRoleOperate::default_instance_;
  delete GM_GangRoleOperate_reflection_;
  delete GM_GangRole::default_instance_;
  delete GM_GangRole_reflection_;
  delete GM_AllGangRole::default_instance_;
  delete GM_AllGangRole_reflection_;
  delete GM_GangNoticeChange::default_instance_;
  delete GM_GangNoticeChange_reflection_;
  delete GM_GangQuickJoin::default_instance_;
  delete GM_GangQuickJoin_reflection_;
  delete GM_GangLog::default_instance_;
  delete GM_GangLog_reflection_;
  delete GM_AllGangLog::default_instance_;
  delete GM_AllGangLog_reflection_;
  delete GM_GangRankInfo::default_instance_;
  delete GM_GangRankInfo_reflection_;
  delete GM_GangRank::default_instance_;
  delete GM_GangRank_reflection_;
  delete GM_GangIntroduction::default_instance_;
  delete GM_GangIntroduction_reflection_;
  delete GM_GangFB_FBInfo_Request::default_instance_;
  delete GM_GangFB_FBInfo_Request_reflection_;
  delete GM_GangFB_FBInfo::default_instance_;
  delete GM_GangFB_FBInfo_reflection_;
  delete GM_GangFB_FBInfo_Return::default_instance_;
  delete GM_GangFB_FBInfo_Return_reflection_;
  delete GM_GangFB_RankInfo_Request::default_instance_;
  delete GM_GangFB_RankInfo_Request_reflection_;
  delete GM_GangFB_RankInfo::default_instance_;
  delete GM_GangFB_RankInfo_reflection_;
  delete GM_GangFB_RankInfo_Return::default_instance_;
  delete GM_GangFB_RankInfo_Return_reflection_;
  delete GM_GangFB_Fight_Request::default_instance_;
  delete GM_GangFB_Fight_Request_reflection_;
  delete GM_GangFB_Fight_Return::default_instance_;
  delete GM_GangFB_Fight_Return_reflection_;
  delete GM_GangFB_Reward::default_instance_;
  delete GM_GangFB_Reward_reflection_;
  delete GM_GangFB_TakeFight::default_instance_;
  delete GM_GangFB_TakeFight_reflection_;
  delete GM_GangShop::default_instance_;
  delete GM_GangShop_reflection_;
  delete GM_GangShopObj::default_instance_;
  delete GM_GangShopObj_reflection_;
  delete GM_GangModuleInfo::default_instance_;
  delete GM_GangModuleInfo_reflection_;
  delete GM_GangHall::default_instance_;
  delete GM_GangHall_reflection_;
  delete GM_GangTemp::default_instance_;
  delete GM_GangTemp_reflection_;
  delete GM_BlessResult::default_instance_;
  delete GM_BlessResult_reflection_;
  delete GM_BlessObj::default_instance_;
  delete GM_BlessObj_reflection_;
  delete GM_GangModuleInfoList::default_instance_;
  delete GM_GangModuleInfoList_reflection_;
  delete GM_GangNotify::default_instance_;
  delete GM_GangNotify_reflection_;
  delete GM_ApplyResult::default_instance_;
  delete GM_ApplyResult_reflection_;
}

void protobuf_AddDesc_gang_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010gang.txt\"\237\001\n\013GM_GangInfo\022\014\n\004gmid\030\001 \002(\003"
    "\022\014\n\004rank\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\022\n\nleaderNa"
    "me\030\004 \001(\t\022\n\n\002lv\030\005 \001(\005\022\021\n\tmemberNum\030\006 \001(\005\022"
    "\021\n\tmaxMember\030\007 \001(\005\022\017\n\007pronoce\030\010 \001(\t\022\017\n\007i"
    "sApply\030\t \001(\005\"\223\001\n\tGM_MyGang\022\016\n\006roleId\030\001 \002"
    "(\005\022\036\n\010baseInfo\030\002 \001(\0132\014.GM_GangInfo\022\013\n\003po"
    "w\030\003 \001(\005\022\017\n\007richies\030\004 \001(\005\022\016\n\006notice\030\006 \001(\t"
    "\022\013\n\003exp\030\007 \001(\005\022\033\n\005roles\030\013 \003(\0132\014.GM_GangRo"
    "le\"T\n\016GM_AllGangInfo\022\016\n\006roleId\030\001 \002(\005\022\026\n\016"
    "m_allgangcount\030\002 \001(\005\022\032\n\004gang\030\003 \003(\0132\014.GM_"
    "GangInfo\">\n\017GM_AllGangApply\022\016\n\006roleId\030\001 "
    "\002(\005\022\033\n\005roles\030\002 \003(\0132\014.GM_GangRole\"-\n\rGM_C"
    "reateGang\022\016\n\006roleId\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\""
    "R\n\022GM_GangRoleOperate\022\016\n\006roleId\030\001 \002(\005\022\016\n"
    "\006operId\030\002 \001(\005\022\013\n\003job\030\003 \001(\005\022\017\n\007isAgree\030\004 "
    "\001(\005\"\334\001\n\013GM_GangRole\022\016\n\006roleId\030\001 \002(\005\022\014\n\004r"
    "ank\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\n\n\002lv\030\005 \001(\005\022\020\n\010v"
    "ocation\030\006 \001(\005\022\013\n\003job\030\007 \001(\005\022\021\n\tlastLogin\030"
    "\010 \001(\005\022\022\n\nhisRichies\030\t \001(\005\022\r\n\005power\030\n \001(\005"
    "\022\017\n\007richies\030\013 \001(\005\022\014\n\004flag\030\014 \001(\005\022\017\n\007conty"
    "pe\030\r \001(\005\022\020\n\010isfriend\030\016 \001(\005\"=\n\016GM_AllGang"
    "Role\022\016\n\006roleId\030\001 \002(\005\022\033\n\005roles\030\002 \003(\0132\014.GM"
    "_GangRole\"5\n\023GM_GangNoticeChange\022\016\n\006role"
    "Id\030\001 \002(\005\022\016\n\006notice\030\002 \001(\t\"4\n\020GM_GangQuick"
    "Join\022\016\n\006result\030\001 \002(\005\022\020\n\010gangGmid\030\002 \003(\003\"u"
    "\n\nGM_GangLog\022\013\n\003log\030\001 \002(\t\022\014\n\004time\030\002 \001(\t\022"
    "\020\n\010m_roleId\030\003 \001(\005\022\024\n\014m_profession\030\004 \001(\005\022"
    "\022\n\nm_rolename\030\005 \001(\t\022\020\n\010m_rolelv\030\006 \001(\005\"8\n"
    "\rGM_AllGangLog\022\014\n\004gmid\030\001 \002(\003\022\031\n\004logs\030\002 \003"
    "(\0132\013.GM_GangLog\"j\n\017GM_GangRankInfo\022\017\n\007m_"
    "place\030\006 \002(\005\022\022\n\nm_gangName\030\002 \001(\t\022\017\n\007m_lev"
    "el\030\004 \001(\005\022\017\n\007m_value\030\005 \001(\005\022\020\n\010m_people\030\001 "
    "\001(\005\"l\n\013GM_GangRank\022\r\n\005count\030\001 \002(\005\022\"\n\010gan"
    "grank\030\002 \003(\0132\020.GM_GangRankInfo\022\024\n\014m_myGan"
    "gRank\030\003 \001(\005\022\024\n\014m_myGangName\030\004 \001(\t\"\235\001\n\023GM"
    "_GangIntroduction\022\021\n\tgangLevel\030\001 \001(\005\022\023\n\013"
    "gangMembers\030\002 \002(\005\022\022\n\ngangLeader\030\003 \001(\t\022\022\n"
    "\ngangNotice\030\004 \001(\t\022\020\n\010gangName\030\005 \001(\t\022\022\n\nm"
    "axMembers\030\006 \001(\005\022\020\n\010gangRank\030\007 \001(\005\"(\n\030GM_"
    "GangFB_FBInfo_Request\022\014\n\004fbid\030\001 \002(\005\"W\n\020G"
    "M_GangFB_FBInfo\022\014\n\004fbid\030\001 \002(\005\022\021\n\tchallen"
    "ge\030\002 \001(\005\022\021\n\tlefttimes\030\003 \001(\005\022\017\n\007percent\030\004"
    " \001(\002\"L\n\027GM_GangFB_FBInfo_Return\022\016\n\006resul"
    "t\030\001 \002(\005\022!\n\006fbinfo\030\002 \003(\0132\021.GM_GangFB_FBIn"
    "fo\"*\n\032GM_GangFB_RankInfo_Request\022\014\n\004fbid"
    "\030\001 \002(\005\"U\n\022GM_GangFB_RankInfo\022\014\n\004fbid\030\001 \002"
    "(\005\022\014\n\004rank\030\002 \001(\005\022\020\n\010rolename\030\003 \001(\t\022\021\n\tto"
    "talmage\030\004 \001(\005\"R\n\031GM_GangFB_RankInfo_Retu"
    "rn\022\016\n\006result\030\001 \002(\005\022%\n\010rankinfo\030\002 \003(\0132\023.G"
    "M_GangFB_RankInfo\"\'\n\027GM_GangFB_Fight_Req"
    "uest\022\014\n\004fbid\030\001 \002(\005\"(\n\026GM_GangFB_Fight_Re"
    "turn\022\016\n\006result\030\001 \002(\005\"4\n\020GM_GangFB_Reward"
    "\022\020\n\010objectid\030\001 \002(\005\022\016\n\006number\030\002 \001(\005\"I\n\023GM"
    "_GangFB_TakeFight\022\016\n\006damage\030\001 \002(\005\022\"\n\007rew"
    "ards\030\002 \003(\0132\021.GM_GangFB_Reward\"S\n\013GM_Gang"
    "Shop\022\014\n\004m_lv\030\001 \002(\005\022\022\n\nm_uplecost\030\002 \001(\005\022\""
    "\n\tm_shopobj\030\003 \003(\0132\017.GM_GangShopObj\"G\n\016GM"
    "_GangShopObj\022\017\n\007m_objid\030\001 \002(\005\022\022\n\nm_showt"
    "ype\030\002 \001(\005\022\020\n\010m_remain\030\003 \001(\005\"\254\001\n\021GM_GangM"
    "oduleInfo\022\020\n\010moduleid\030\001 \002(\005\022\020\n\010isUnlock\030"
    "\002 \001(\005\022 \n\nm_HallData\030\003 \001(\0132\014.GM_GangHall\022"
    " \n\nm_TempData\030\004 \001(\0132\014.GM_GangTemp\022 \n\nm_S"
    "hopData\030\005 \001(\0132\014.GM_GangShop\022\r\n\005maxlv\030\006 \001"
    "(\005\"T\n\013GM_GangHall\022\014\n\004m_lv\030\001 \002(\005\022\022\n\nm_upl"
    "ecost\030\002 \001(\005\022\020\n\010m_ishall\030\004 \001(\005\022\021\n\tm_hallL"
    "og\030\005 \003(\t\"d\n\013GM_GangTemp\022\014\n\004m_lv\030\001 \002(\005\022\022\n"
    "\nm_uplecost\030\002 \001(\005\022\020\n\010m_remain\030\003 \001(\005\022\016\n\006m"
    "_cost\030\004 \001(\005\022\021\n\tm_isbless\030\005 \001(\005\"@\n\016GM_Ble"
    "ssResult\022\020\n\010m_result\030\001 \002(\005\022\034\n\006m_objs\030\002 \003"
    "(\0132\014.GM_BlessObj\"2\n\013GM_BlessObj\022\017\n\007m_obj"
    "id\030\001 \002(\005\022\022\n\nm_objcount\030\002 \002(\005\"T\n\025GM_GangM"
    "oduleInfoList\022\017\n\007hasGang\030\001 \002(\005\022*\n\016gangMo"
    "duleInfo\030\002 \003(\0132\022.GM_GangModuleInfo\"H\n\rGM"
    "_GangNotify\022\022\n\nm_ganggmid\030\001 \002(\003\022\021\n\tm_gan"
    "gexp\030\002 \001(\005\022\020\n\010m_ganglv\030\003 \001(\005\"f\n\016GM_Apply"
    "Result\022\020\n\010m_result\030\001 \002(\005\022\025\n\rm_preganggmi"
    "d\030\002 \001(\003\022\025\n\rm_nowganggmid\030\003 \001(\003\022\024\n\014m_appl"
    "ycount\030\004 \001(\005", 3092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gang.txt", &protobuf_RegisterTypes);
  GM_GangInfo::default_instance_ = new GM_GangInfo();
  GM_MyGang::default_instance_ = new GM_MyGang();
  GM_AllGangInfo::default_instance_ = new GM_AllGangInfo();
  GM_AllGangApply::default_instance_ = new GM_AllGangApply();
  GM_CreateGang::default_instance_ = new GM_CreateGang();
  GM_GangRoleOperate::default_instance_ = new GM_GangRoleOperate();
  GM_GangRole::default_instance_ = new GM_GangRole();
  GM_AllGangRole::default_instance_ = new GM_AllGangRole();
  GM_GangNoticeChange::default_instance_ = new GM_GangNoticeChange();
  GM_GangQuickJoin::default_instance_ = new GM_GangQuickJoin();
  GM_GangLog::default_instance_ = new GM_GangLog();
  GM_AllGangLog::default_instance_ = new GM_AllGangLog();
  GM_GangRankInfo::default_instance_ = new GM_GangRankInfo();
  GM_GangRank::default_instance_ = new GM_GangRank();
  GM_GangIntroduction::default_instance_ = new GM_GangIntroduction();
  GM_GangFB_FBInfo_Request::default_instance_ = new GM_GangFB_FBInfo_Request();
  GM_GangFB_FBInfo::default_instance_ = new GM_GangFB_FBInfo();
  GM_GangFB_FBInfo_Return::default_instance_ = new GM_GangFB_FBInfo_Return();
  GM_GangFB_RankInfo_Request::default_instance_ = new GM_GangFB_RankInfo_Request();
  GM_GangFB_RankInfo::default_instance_ = new GM_GangFB_RankInfo();
  GM_GangFB_RankInfo_Return::default_instance_ = new GM_GangFB_RankInfo_Return();
  GM_GangFB_Fight_Request::default_instance_ = new GM_GangFB_Fight_Request();
  GM_GangFB_Fight_Return::default_instance_ = new GM_GangFB_Fight_Return();
  GM_GangFB_Reward::default_instance_ = new GM_GangFB_Reward();
  GM_GangFB_TakeFight::default_instance_ = new GM_GangFB_TakeFight();
  GM_GangShop::default_instance_ = new GM_GangShop();
  GM_GangShopObj::default_instance_ = new GM_GangShopObj();
  GM_GangModuleInfo::default_instance_ = new GM_GangModuleInfo();
  GM_GangHall::default_instance_ = new GM_GangHall();
  GM_GangTemp::default_instance_ = new GM_GangTemp();
  GM_BlessResult::default_instance_ = new GM_BlessResult();
  GM_BlessObj::default_instance_ = new GM_BlessObj();
  GM_GangModuleInfoList::default_instance_ = new GM_GangModuleInfoList();
  GM_GangNotify::default_instance_ = new GM_GangNotify();
  GM_ApplyResult::default_instance_ = new GM_ApplyResult();
  GM_GangInfo::default_instance_->InitAsDefaultInstance();
  GM_MyGang::default_instance_->InitAsDefaultInstance();
  GM_AllGangInfo::default_instance_->InitAsDefaultInstance();
  GM_AllGangApply::default_instance_->InitAsDefaultInstance();
  GM_CreateGang::default_instance_->InitAsDefaultInstance();
  GM_GangRoleOperate::default_instance_->InitAsDefaultInstance();
  GM_GangRole::default_instance_->InitAsDefaultInstance();
  GM_AllGangRole::default_instance_->InitAsDefaultInstance();
  GM_GangNoticeChange::default_instance_->InitAsDefaultInstance();
  GM_GangQuickJoin::default_instance_->InitAsDefaultInstance();
  GM_GangLog::default_instance_->InitAsDefaultInstance();
  GM_AllGangLog::default_instance_->InitAsDefaultInstance();
  GM_GangRankInfo::default_instance_->InitAsDefaultInstance();
  GM_GangRank::default_instance_->InitAsDefaultInstance();
  GM_GangIntroduction::default_instance_->InitAsDefaultInstance();
  GM_GangFB_FBInfo_Request::default_instance_->InitAsDefaultInstance();
  GM_GangFB_FBInfo::default_instance_->InitAsDefaultInstance();
  GM_GangFB_FBInfo_Return::default_instance_->InitAsDefaultInstance();
  GM_GangFB_RankInfo_Request::default_instance_->InitAsDefaultInstance();
  GM_GangFB_RankInfo::default_instance_->InitAsDefaultInstance();
  GM_GangFB_RankInfo_Return::default_instance_->InitAsDefaultInstance();
  GM_GangFB_Fight_Request::default_instance_->InitAsDefaultInstance();
  GM_GangFB_Fight_Return::default_instance_->InitAsDefaultInstance();
  GM_GangFB_Reward::default_instance_->InitAsDefaultInstance();
  GM_GangFB_TakeFight::default_instance_->InitAsDefaultInstance();
  GM_GangShop::default_instance_->InitAsDefaultInstance();
  GM_GangShopObj::default_instance_->InitAsDefaultInstance();
  GM_GangModuleInfo::default_instance_->InitAsDefaultInstance();
  GM_GangHall::default_instance_->InitAsDefaultInstance();
  GM_GangTemp::default_instance_->InitAsDefaultInstance();
  GM_BlessResult::default_instance_->InitAsDefaultInstance();
  GM_BlessObj::default_instance_->InitAsDefaultInstance();
  GM_GangModuleInfoList::default_instance_->InitAsDefaultInstance();
  GM_GangNotify::default_instance_->InitAsDefaultInstance();
  GM_ApplyResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gang_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gang_2etxt {
  StaticDescriptorInitializer_gang_2etxt() {
    protobuf_AddDesc_gang_2etxt();
  }
} static_descriptor_initializer_gang_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_GangInfo::kGmidFieldNumber;
const int GM_GangInfo::kRankFieldNumber;
const int GM_GangInfo::kNameFieldNumber;
const int GM_GangInfo::kLeaderNameFieldNumber;
const int GM_GangInfo::kLvFieldNumber;
const int GM_GangInfo::kMemberNumFieldNumber;
const int GM_GangInfo::kMaxMemberFieldNumber;
const int GM_GangInfo::kPronoceFieldNumber;
const int GM_GangInfo::kIsApplyFieldNumber;
#endif  // !_MSC_VER

GM_GangInfo::GM_GangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangInfo::InitAsDefaultInstance() {
}

GM_GangInfo::GM_GangInfo(const GM_GangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangInfo::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  membernum_ = 0;
  maxmember_ = 0;
  pronoce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isapply_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangInfo::~GM_GangInfo() {
  SharedDtor();
}

void GM_GangInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
    delete pronoce_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangInfo_descriptor_;
}

const GM_GangInfo& GM_GangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangInfo* GM_GangInfo::default_instance_ = NULL;

GM_GangInfo* GM_GangInfo::New() const {
  return new GM_GangInfo;
}

void GM_GangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    lv_ = 0;
    membernum_ = 0;
    maxmember_ = 0;
    if (has_pronoce()) {
      if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
        pronoce_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isapply_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leaderName;
        break;
      }

      // optional string leaderName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional int32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_memberNum;
        break;
      }

      // optional int32 memberNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxMember;
        break;
      }

      // optional int32 maxMember = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmember_)));
          set_has_maxmember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pronoce;
        break;
      }

      // optional string pronoce = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pronoce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pronoce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pronoce().data(), this->pronoce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isApply;
        break;
      }

      // optional int32 isApply = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isApply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isapply_)));
          set_has_isapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string leaderName = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->leadername(), output);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // optional int32 memberNum = 6;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->membernum(), output);
  }

  // optional int32 maxMember = 7;
  if (has_maxmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxmember(), output);
  }

  // optional string pronoce = 8;
  if (has_pronoce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pronoce().data(), this->pronoce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pronoce(), output);
  }

  // optional int32 isApply = 9;
  if (has_isapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isapply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string leaderName = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leadername(), target);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // optional int32 memberNum = 6;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->membernum(), target);
  }

  // optional int32 maxMember = 7;
  if (has_maxmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxmember(), target);
  }

  // optional string pronoce = 8;
  if (has_pronoce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pronoce().data(), this->pronoce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pronoce(), target);
  }

  // optional int32 isApply = 9;
  if (has_isapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isapply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string leaderName = 4;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional int32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 memberNum = 6;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membernum());
    }

    // optional int32 maxMember = 7;
    if (has_maxmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmember());
    }

    // optional string pronoce = 8;
    if (has_pronoce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pronoce());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isApply = 9;
    if (has_isapply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isapply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangInfo::MergeFrom(const GM_GangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_maxmember()) {
      set_maxmember(from.maxmember());
    }
    if (from.has_pronoce()) {
      set_pronoce(from.pronoce());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isapply()) {
      set_isapply(from.isapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangInfo::CopyFrom(const GM_GangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangInfo::Swap(GM_GangInfo* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(leadername_, other->leadername_);
    std::swap(lv_, other->lv_);
    std::swap(membernum_, other->membernum_);
    std::swap(maxmember_, other->maxmember_);
    std::swap(pronoce_, other->pronoce_);
    std::swap(isapply_, other->isapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangInfo_descriptor_;
  metadata.reflection = GM_GangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MyGang::kRoleIdFieldNumber;
const int GM_MyGang::kBaseInfoFieldNumber;
const int GM_MyGang::kPowFieldNumber;
const int GM_MyGang::kRichiesFieldNumber;
const int GM_MyGang::kNoticeFieldNumber;
const int GM_MyGang::kExpFieldNumber;
const int GM_MyGang::kRolesFieldNumber;
#endif  // !_MSC_VER

GM_MyGang::GM_MyGang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MyGang::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::GM_GangInfo*>(&::GM_GangInfo::default_instance());
}

GM_MyGang::GM_MyGang(const GM_MyGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MyGang::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  baseinfo_ = NULL;
  pow_ = 0;
  richies_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MyGang::~GM_MyGang() {
  SharedDtor();
}

void GM_MyGang::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void GM_MyGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MyGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MyGang_descriptor_;
}

const GM_MyGang& GM_MyGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_MyGang* GM_MyGang::default_instance_ = NULL;

GM_MyGang* GM_MyGang::New() const {
  return new GM_MyGang;
}

void GM_MyGang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::GM_GangInfo::Clear();
    }
    pow_ = 0;
    richies_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    exp_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MyGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseInfo;
        break;
      }

      // optional .GM_GangInfo baseInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pow;
        break;
      }

      // optional int32 pow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pow_)));
          set_has_pow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_richies;
        break;
      }

      // optional int32 richies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_richies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &richies_)));
          set_has_richies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }

      // optional string notice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_roles;
        break;
      }

      // repeated .GM_GangRole roles = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MyGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional .GM_GangInfo baseInfo = 2;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  // optional int32 pow = 3;
  if (has_pow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pow(), output);
  }

  // optional int32 richies = 4;
  if (has_richies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->richies(), output);
  }

  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->notice(), output);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // repeated .GM_GangRole roles = 11;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MyGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional .GM_GangInfo baseInfo = 2;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  // optional int32 pow = 3;
  if (has_pow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pow(), target);
  }

  // optional int32 richies = 4;
  if (has_richies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->richies(), target);
  }

  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice(), target);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // repeated .GM_GangRole roles = 11;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MyGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .GM_GangInfo baseInfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional int32 pow = 3;
    if (has_pow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pow());
    }

    // optional int32 richies = 4;
    if (has_richies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->richies());
    }

    // optional string notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated .GM_GangRole roles = 11;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MyGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MyGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MyGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MyGang::MergeFrom(const GM_MyGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::GM_GangInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_pow()) {
      set_pow(from.pow());
    }
    if (from.has_richies()) {
      set_richies(from.richies());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MyGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MyGang::CopyFrom(const GM_MyGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MyGang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void GM_MyGang::Swap(GM_MyGang* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(pow_, other->pow_);
    std::swap(richies_, other->richies_);
    std::swap(notice_, other->notice_);
    std::swap(exp_, other->exp_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MyGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MyGang_descriptor_;
  metadata.reflection = GM_MyGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllGangInfo::kRoleIdFieldNumber;
const int GM_AllGangInfo::kMAllgangcountFieldNumber;
const int GM_AllGangInfo::kGangFieldNumber;
#endif  // !_MSC_VER

GM_AllGangInfo::GM_AllGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllGangInfo::InitAsDefaultInstance() {
}

GM_AllGangInfo::GM_AllGangInfo(const GM_AllGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllGangInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  m_allgangcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllGangInfo::~GM_AllGangInfo() {
  SharedDtor();
}

void GM_AllGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllGangInfo_descriptor_;
}

const GM_AllGangInfo& GM_AllGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_AllGangInfo* GM_AllGangInfo::default_instance_ = NULL;

GM_AllGangInfo* GM_AllGangInfo::New() const {
  return new GM_AllGangInfo;
}

void GM_AllGangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    m_allgangcount_ = 0;
  }
  gang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_allgangcount;
        break;
      }

      // optional int32 m_allgangcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_allgangcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_allgangcount_)));
          set_has_m_allgangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gang;
        break;
      }

      // repeated .GM_GangInfo gang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gang;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 m_allgangcount = 2;
  if (has_m_allgangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_allgangcount(), output);
  }

  // repeated .GM_GangInfo gang = 3;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 m_allgangcount = 2;
  if (has_m_allgangcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_allgangcount(), target);
  }

  // repeated .GM_GangInfo gang = 3;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllGangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 m_allgangcount = 2;
    if (has_m_allgangcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_allgangcount());
    }

  }
  // repeated .GM_GangInfo gang = 3;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllGangInfo::MergeFrom(const GM_AllGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_m_allgangcount()) {
      set_m_allgangcount(from.m_allgangcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllGangInfo::CopyFrom(const GM_AllGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllGangInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gang_size(); i++) {
    if (!this->gang(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllGangInfo::Swap(GM_AllGangInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(m_allgangcount_, other->m_allgangcount_);
    gang_.Swap(&other->gang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllGangInfo_descriptor_;
  metadata.reflection = GM_AllGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllGangApply::kRoleIdFieldNumber;
const int GM_AllGangApply::kRolesFieldNumber;
#endif  // !_MSC_VER

GM_AllGangApply::GM_AllGangApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllGangApply::InitAsDefaultInstance() {
}

GM_AllGangApply::GM_AllGangApply(const GM_AllGangApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllGangApply::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllGangApply::~GM_AllGangApply() {
  SharedDtor();
}

void GM_AllGangApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllGangApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllGangApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllGangApply_descriptor_;
}

const GM_AllGangApply& GM_AllGangApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_AllGangApply* GM_AllGangApply::default_instance_ = NULL;

GM_AllGangApply* GM_AllGangApply::New() const {
  return new GM_AllGangApply;
}

void GM_AllGangApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllGangApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .GM_GangRole roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllGangApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .GM_GangRole roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllGangApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .GM_GangRole roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllGangApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .GM_GangRole roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllGangApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllGangApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllGangApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllGangApply::MergeFrom(const GM_AllGangApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllGangApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllGangApply::CopyFrom(const GM_AllGangApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllGangApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllGangApply::Swap(GM_AllGangApply* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllGangApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllGangApply_descriptor_;
  metadata.reflection = GM_AllGangApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CreateGang::kRoleIdFieldNumber;
const int GM_CreateGang::kNameFieldNumber;
#endif  // !_MSC_VER

GM_CreateGang::GM_CreateGang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CreateGang::InitAsDefaultInstance() {
}

GM_CreateGang::GM_CreateGang(const GM_CreateGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CreateGang::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CreateGang::~GM_CreateGang() {
  SharedDtor();
}

void GM_CreateGang::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_CreateGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CreateGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CreateGang_descriptor_;
}

const GM_CreateGang& GM_CreateGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_CreateGang* GM_CreateGang::default_instance_ = NULL;

GM_CreateGang* GM_CreateGang::New() const {
  return new GM_CreateGang;
}

void GM_CreateGang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CreateGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CreateGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CreateGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CreateGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CreateGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CreateGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CreateGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CreateGang::MergeFrom(const GM_CreateGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CreateGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CreateGang::CopyFrom(const GM_CreateGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CreateGang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CreateGang::Swap(GM_CreateGang* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CreateGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CreateGang_descriptor_;
  metadata.reflection = GM_CreateGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRoleOperate::kRoleIdFieldNumber;
const int GM_GangRoleOperate::kOperIdFieldNumber;
const int GM_GangRoleOperate::kJobFieldNumber;
const int GM_GangRoleOperate::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

GM_GangRoleOperate::GM_GangRoleOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRoleOperate::InitAsDefaultInstance() {
}

GM_GangRoleOperate::GM_GangRoleOperate(const GM_GangRoleOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRoleOperate::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  operid_ = 0;
  job_ = 0;
  isagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRoleOperate::~GM_GangRoleOperate() {
  SharedDtor();
}

void GM_GangRoleOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangRoleOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRoleOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRoleOperate_descriptor_;
}

const GM_GangRoleOperate& GM_GangRoleOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangRoleOperate* GM_GangRoleOperate::default_instance_ = NULL;

GM_GangRoleOperate* GM_GangRoleOperate::New() const {
  return new GM_GangRoleOperate;
}

void GM_GangRoleOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    operid_ = 0;
    job_ = 0;
    isagree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRoleOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operId;
        break;
      }

      // optional int32 operId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operid_)));
          set_has_operid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional int32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isAgree;
        break;
      }

      // optional int32 isAgree = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRoleOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 operId = 2;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operid(), output);
  }

  // optional int32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job(), output);
  }

  // optional int32 isAgree = 4;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRoleOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 operId = 2;
  if (has_operid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operid(), target);
  }

  // optional int32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job(), target);
  }

  // optional int32 isAgree = 4;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRoleOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 operId = 2;
    if (has_operid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operid());
    }

    // optional int32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int32 isAgree = 4;
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRoleOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRoleOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRoleOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRoleOperate::MergeFrom(const GM_GangRoleOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_operid()) {
      set_operid(from.operid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRoleOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRoleOperate::CopyFrom(const GM_GangRoleOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRoleOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangRoleOperate::Swap(GM_GangRoleOperate* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(operid_, other->operid_);
    std::swap(job_, other->job_);
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRoleOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRoleOperate_descriptor_;
  metadata.reflection = GM_GangRoleOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRole::kRoleIdFieldNumber;
const int GM_GangRole::kRankFieldNumber;
const int GM_GangRole::kNameFieldNumber;
const int GM_GangRole::kLvFieldNumber;
const int GM_GangRole::kVocationFieldNumber;
const int GM_GangRole::kJobFieldNumber;
const int GM_GangRole::kLastLoginFieldNumber;
const int GM_GangRole::kHisRichiesFieldNumber;
const int GM_GangRole::kPowerFieldNumber;
const int GM_GangRole::kRichiesFieldNumber;
const int GM_GangRole::kFlagFieldNumber;
const int GM_GangRole::kContypeFieldNumber;
const int GM_GangRole::kIsfriendFieldNumber;
#endif  // !_MSC_VER

GM_GangRole::GM_GangRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRole::InitAsDefaultInstance() {
}

GM_GangRole::GM_GangRole(const GM_GangRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRole::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  vocation_ = 0;
  job_ = 0;
  lastlogin_ = 0;
  hisrichies_ = 0;
  power_ = 0;
  richies_ = 0;
  flag_ = 0;
  contype_ = 0;
  isfriend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRole::~GM_GangRole() {
  SharedDtor();
}

void GM_GangRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRole_descriptor_;
}

const GM_GangRole& GM_GangRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangRole* GM_GangRole::default_instance_ = NULL;

GM_GangRole* GM_GangRole::New() const {
  return new GM_GangRole;
}

void GM_GangRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0;
    vocation_ = 0;
    job_ = 0;
    lastlogin_ = 0;
    hisrichies_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0;
    richies_ = 0;
    flag_ = 0;
    contype_ = 0;
    isfriend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional int32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vocation;
        break;
      }

      // optional int32 vocation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vocation_)));
          set_has_vocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job;
        break;
      }

      // optional int32 job = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lastLogin;
        break;
      }

      // optional int32 lastLogin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogin_)));
          set_has_lastlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hisRichies;
        break;
      }

      // optional int32 hisRichies = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hisRichies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hisrichies_)));
          set_has_hisrichies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_power;
        break;
      }

      // optional int32 power = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_richies;
        break;
      }

      // optional int32 richies = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_richies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &richies_)));
          set_has_richies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_flag;
        break;
      }

      // optional int32 flag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_contype;
        break;
      }

      // optional int32 contype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contype_)));
          set_has_contype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isfriend;
        break;
      }

      // optional int32 isfriend = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // optional int32 vocation = 6;
  if (has_vocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vocation(), output);
  }

  // optional int32 job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job(), output);
  }

  // optional int32 lastLogin = 8;
  if (has_lastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastlogin(), output);
  }

  // optional int32 hisRichies = 9;
  if (has_hisrichies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hisrichies(), output);
  }

  // optional int32 power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->power(), output);
  }

  // optional int32 richies = 11;
  if (has_richies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->richies(), output);
  }

  // optional int32 flag = 12;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->flag(), output);
  }

  // optional int32 contype = 13;
  if (has_contype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->contype(), output);
  }

  // optional int32 isfriend = 14;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // optional int32 vocation = 6;
  if (has_vocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vocation(), target);
  }

  // optional int32 job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job(), target);
  }

  // optional int32 lastLogin = 8;
  if (has_lastlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastlogin(), target);
  }

  // optional int32 hisRichies = 9;
  if (has_hisrichies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hisrichies(), target);
  }

  // optional int32 power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->power(), target);
  }

  // optional int32 richies = 11;
  if (has_richies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->richies(), target);
  }

  // optional int32 flag = 12;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->flag(), target);
  }

  // optional int32 contype = 13;
  if (has_contype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->contype(), target);
  }

  // optional int32 isfriend = 14;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->isfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 vocation = 6;
    if (has_vocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vocation());
    }

    // optional int32 job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int32 lastLogin = 8;
    if (has_lastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogin());
    }

    // optional int32 hisRichies = 9;
    if (has_hisrichies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hisrichies());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 power = 10;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 richies = 11;
    if (has_richies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->richies());
    }

    // optional int32 flag = 12;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 contype = 13;
    if (has_contype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contype());
    }

    // optional int32 isfriend = 14;
    if (has_isfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfriend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRole::MergeFrom(const GM_GangRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_vocation()) {
      set_vocation(from.vocation());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_lastlogin()) {
      set_lastlogin(from.lastlogin());
    }
    if (from.has_hisrichies()) {
      set_hisrichies(from.hisrichies());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_richies()) {
      set_richies(from.richies());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_contype()) {
      set_contype(from.contype());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRole::CopyFrom(const GM_GangRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangRole::Swap(GM_GangRole* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(vocation_, other->vocation_);
    std::swap(job_, other->job_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(hisrichies_, other->hisrichies_);
    std::swap(power_, other->power_);
    std::swap(richies_, other->richies_);
    std::swap(flag_, other->flag_);
    std::swap(contype_, other->contype_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRole_descriptor_;
  metadata.reflection = GM_GangRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllGangRole::kRoleIdFieldNumber;
const int GM_AllGangRole::kRolesFieldNumber;
#endif  // !_MSC_VER

GM_AllGangRole::GM_AllGangRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllGangRole::InitAsDefaultInstance() {
}

GM_AllGangRole::GM_AllGangRole(const GM_AllGangRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllGangRole::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllGangRole::~GM_AllGangRole() {
  SharedDtor();
}

void GM_AllGangRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllGangRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllGangRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllGangRole_descriptor_;
}

const GM_AllGangRole& GM_AllGangRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_AllGangRole* GM_AllGangRole::default_instance_ = NULL;

GM_AllGangRole* GM_AllGangRole::New() const {
  return new GM_AllGangRole;
}

void GM_AllGangRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllGangRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .GM_GangRole roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllGangRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .GM_GangRole roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllGangRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .GM_GangRole roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllGangRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .GM_GangRole roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllGangRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllGangRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllGangRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllGangRole::MergeFrom(const GM_AllGangRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllGangRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllGangRole::CopyFrom(const GM_AllGangRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllGangRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllGangRole::Swap(GM_AllGangRole* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllGangRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllGangRole_descriptor_;
  metadata.reflection = GM_AllGangRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangNoticeChange::kRoleIdFieldNumber;
const int GM_GangNoticeChange::kNoticeFieldNumber;
#endif  // !_MSC_VER

GM_GangNoticeChange::GM_GangNoticeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangNoticeChange::InitAsDefaultInstance() {
}

GM_GangNoticeChange::GM_GangNoticeChange(const GM_GangNoticeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangNoticeChange::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangNoticeChange::~GM_GangNoticeChange() {
  SharedDtor();
}

void GM_GangNoticeChange::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangNoticeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangNoticeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangNoticeChange_descriptor_;
}

const GM_GangNoticeChange& GM_GangNoticeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangNoticeChange* GM_GangNoticeChange::default_instance_ = NULL;

GM_GangNoticeChange* GM_GangNoticeChange::New() const {
  return new GM_GangNoticeChange;
}

void GM_GangNoticeChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangNoticeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // optional string notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangNoticeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangNoticeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangNoticeChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangNoticeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangNoticeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangNoticeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangNoticeChange::MergeFrom(const GM_GangNoticeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangNoticeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangNoticeChange::CopyFrom(const GM_GangNoticeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangNoticeChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangNoticeChange::Swap(GM_GangNoticeChange* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangNoticeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangNoticeChange_descriptor_;
  metadata.reflection = GM_GangNoticeChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangQuickJoin::kResultFieldNumber;
const int GM_GangQuickJoin::kGangGmidFieldNumber;
#endif  // !_MSC_VER

GM_GangQuickJoin::GM_GangQuickJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangQuickJoin::InitAsDefaultInstance() {
}

GM_GangQuickJoin::GM_GangQuickJoin(const GM_GangQuickJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangQuickJoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangQuickJoin::~GM_GangQuickJoin() {
  SharedDtor();
}

void GM_GangQuickJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangQuickJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangQuickJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangQuickJoin_descriptor_;
}

const GM_GangQuickJoin& GM_GangQuickJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangQuickJoin* GM_GangQuickJoin::default_instance_ = NULL;

GM_GangQuickJoin* GM_GangQuickJoin::New() const {
  return new GM_GangQuickJoin;
}

void GM_GangQuickJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ganggmid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangQuickJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangGmid;
        break;
      }

      // repeated int64 gangGmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_ganggmid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ganggmid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangGmid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangQuickJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int64 gangGmid = 2;
  for (int i = 0; i < this->ganggmid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->ganggmid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangQuickJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int64 gangGmid = 2;
  for (int i = 0; i < this->ganggmid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->ganggmid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangQuickJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int64 gangGmid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ganggmid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ganggmid(i));
    }
    total_size += 1 * this->ganggmid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangQuickJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangQuickJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangQuickJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangQuickJoin::MergeFrom(const GM_GangQuickJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganggmid_.MergeFrom(from.ganggmid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangQuickJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangQuickJoin::CopyFrom(const GM_GangQuickJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangQuickJoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangQuickJoin::Swap(GM_GangQuickJoin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    ganggmid_.Swap(&other->ganggmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangQuickJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangQuickJoin_descriptor_;
  metadata.reflection = GM_GangQuickJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangLog::kLogFieldNumber;
const int GM_GangLog::kTimeFieldNumber;
const int GM_GangLog::kMRoleIdFieldNumber;
const int GM_GangLog::kMProfessionFieldNumber;
const int GM_GangLog::kMRolenameFieldNumber;
const int GM_GangLog::kMRolelvFieldNumber;
#endif  // !_MSC_VER

GM_GangLog::GM_GangLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangLog::InitAsDefaultInstance() {
}

GM_GangLog::GM_GangLog(const GM_GangLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangLog::SharedCtor() {
  _cached_size_ = 0;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roleid_ = 0;
  m_profession_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rolelv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangLog::~GM_GangLog() {
  SharedDtor();
}

void GM_GangLog::SharedDtor() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangLog_descriptor_;
}

const GM_GangLog& GM_GangLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangLog* GM_GangLog::default_instance_ = NULL;

GM_GangLog* GM_GangLog::New() const {
  return new GM_GangLog;
}

void GM_GangLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    m_roleid_ = 0;
    m_profession_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_rolelv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_roleId;
        break;
      }

      // optional int32 m_roleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_rolelv;
        break;
      }

      // optional int32 m_rolelv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelv_)));
          set_has_m_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string log = 1;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time(), output);
  }

  // optional int32 m_roleId = 3;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_roleid(), output);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  // optional string m_rolename = 5;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_rolename(), output);
  }

  // optional int32 m_rolelv = 6;
  if (has_m_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_rolelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string log = 1;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional int32 m_roleId = 3;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_roleid(), target);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  // optional string m_rolename = 5;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_rolename(), target);
  }

  // optional int32 m_rolelv = 6;
  if (has_m_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_rolelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string log = 1;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional int32 m_roleId = 3;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional string m_rolename = 5;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_rolelv = 6;
    if (has_m_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangLog::MergeFrom(const GM_GangLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log()) {
      set_log(from.log());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_rolelv()) {
      set_m_rolelv(from.m_rolelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangLog::CopyFrom(const GM_GangLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangLog::Swap(GM_GangLog* other) {
  if (other != this) {
    std::swap(log_, other->log_);
    std::swap(time_, other->time_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_rolelv_, other->m_rolelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangLog_descriptor_;
  metadata.reflection = GM_GangLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllGangLog::kGmidFieldNumber;
const int GM_AllGangLog::kLogsFieldNumber;
#endif  // !_MSC_VER

GM_AllGangLog::GM_AllGangLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllGangLog::InitAsDefaultInstance() {
}

GM_AllGangLog::GM_AllGangLog(const GM_AllGangLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllGangLog::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllGangLog::~GM_AllGangLog() {
  SharedDtor();
}

void GM_AllGangLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllGangLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllGangLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllGangLog_descriptor_;
}

const GM_AllGangLog& GM_AllGangLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_AllGangLog* GM_AllGangLog::default_instance_ = NULL;

GM_AllGangLog* GM_AllGangLog::New() const {
  return new GM_AllGangLog;
}

void GM_AllGangLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllGangLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        break;
      }

      // repeated .GM_GangLog logs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllGangLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // repeated .GM_GangLog logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllGangLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // repeated .GM_GangLog logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllGangLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  // repeated .GM_GangLog logs = 2;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllGangLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllGangLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllGangLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllGangLog::MergeFrom(const GM_AllGangLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllGangLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllGangLog::CopyFrom(const GM_AllGangLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllGangLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllGangLog::Swap(GM_AllGangLog* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllGangLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllGangLog_descriptor_;
  metadata.reflection = GM_AllGangLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRankInfo::kMPlaceFieldNumber;
const int GM_GangRankInfo::kMGangNameFieldNumber;
const int GM_GangRankInfo::kMLevelFieldNumber;
const int GM_GangRankInfo::kMValueFieldNumber;
const int GM_GangRankInfo::kMPeopleFieldNumber;
#endif  // !_MSC_VER

GM_GangRankInfo::GM_GangRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRankInfo::InitAsDefaultInstance() {
}

GM_GangRankInfo::GM_GangRankInfo(const GM_GangRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRankInfo::SharedCtor() {
  _cached_size_ = 0;
  m_place_ = 0;
  m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_level_ = 0;
  m_value_ = 0;
  m_people_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRankInfo::~GM_GangRankInfo() {
  SharedDtor();
}

void GM_GangRankInfo::SharedDtor() {
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRankInfo_descriptor_;
}

const GM_GangRankInfo& GM_GangRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangRankInfo* GM_GangRankInfo::default_instance_ = NULL;

GM_GangRankInfo* GM_GangRankInfo::New() const {
  return new GM_GangRankInfo;
}

void GM_GangRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_place_ = 0;
    if (has_m_gangname()) {
      if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
        m_gangname_->clear();
      }
    }
    m_level_ = 0;
    m_value_ = 0;
    m_people_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_people = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_people_)));
          set_has_m_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_gangName;
        break;
      }

      // optional string m_gangName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gangname().data(), this->m_gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_place;
        break;
      }

      // required int32 m_place = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_place_)));
          set_has_m_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_people = 1;
  if (has_m_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_people(), output);
  }

  // optional string m_gangName = 2;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_gangname(), output);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_level(), output);
  }

  // optional int32 m_value = 5;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_value(), output);
  }

  // required int32 m_place = 6;
  if (has_m_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_place(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_people = 1;
  if (has_m_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_people(), target);
  }

  // optional string m_gangName = 2;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_gangname(), target);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_level(), target);
  }

  // optional int32 m_value = 5;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_value(), target);
  }

  // required int32 m_place = 6;
  if (has_m_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_place(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_place = 6;
    if (has_m_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_place());
    }

    // optional string m_gangName = 2;
    if (has_m_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gangname());
    }

    // optional int32 m_level = 4;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_value = 5;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_people = 1;
    if (has_m_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_people());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRankInfo::MergeFrom(const GM_GangRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_place()) {
      set_m_place(from.m_place());
    }
    if (from.has_m_gangname()) {
      set_m_gangname(from.m_gangname());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_people()) {
      set_m_people(from.m_people());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRankInfo::CopyFrom(const GM_GangRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangRankInfo::Swap(GM_GangRankInfo* other) {
  if (other != this) {
    std::swap(m_place_, other->m_place_);
    std::swap(m_gangname_, other->m_gangname_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_people_, other->m_people_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRankInfo_descriptor_;
  metadata.reflection = GM_GangRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRank::kCountFieldNumber;
const int GM_GangRank::kGangrankFieldNumber;
const int GM_GangRank::kMMyGangRankFieldNumber;
const int GM_GangRank::kMMyGangNameFieldNumber;
#endif  // !_MSC_VER

GM_GangRank::GM_GangRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRank::InitAsDefaultInstance() {
}

GM_GangRank::GM_GangRank(const GM_GangRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRank::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  m_mygangrank_ = 0;
  m_mygangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRank::~GM_GangRank() {
  SharedDtor();
}

void GM_GangRank::SharedDtor() {
  if (m_mygangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mygangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRank_descriptor_;
}

const GM_GangRank& GM_GangRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangRank* GM_GangRank::default_instance_ = NULL;

GM_GangRank* GM_GangRank::New() const {
  return new GM_GangRank;
}

void GM_GangRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    m_mygangrank_ = 0;
    if (has_m_mygangname()) {
      if (m_mygangname_ != &::google::protobuf::internal::kEmptyString) {
        m_mygangname_->clear();
      }
    }
  }
  gangrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangrank;
        break;
      }

      // repeated .GM_GangRankInfo gangrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangrank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangrank;
        if (input->ExpectTag(24)) goto parse_m_myGangRank;
        break;
      }

      // optional int32 m_myGangRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_myGangRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mygangrank_)));
          set_has_m_mygangrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_myGangName;
        break;
      }

      // optional string m_myGangName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_myGangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mygangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mygangname().data(), this->m_mygangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_GangRankInfo gangrank = 2;
  for (int i = 0; i < this->gangrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gangrank(i), output);
  }

  // optional int32 m_myGangRank = 3;
  if (has_m_mygangrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_mygangrank(), output);
  }

  // optional string m_myGangName = 4;
  if (has_m_mygangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mygangname().data(), this->m_mygangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_mygangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_GangRankInfo gangrank = 2;
  for (int i = 0; i < this->gangrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gangrank(i), target);
  }

  // optional int32 m_myGangRank = 3;
  if (has_m_mygangrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_mygangrank(), target);
  }

  // optional string m_myGangName = 4;
  if (has_m_mygangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mygangname().data(), this->m_mygangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_mygangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 m_myGangRank = 3;
    if (has_m_mygangrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mygangrank());
    }

    // optional string m_myGangName = 4;
    if (has_m_mygangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mygangname());
    }

  }
  // repeated .GM_GangRankInfo gangrank = 2;
  total_size += 1 * this->gangrank_size();
  for (int i = 0; i < this->gangrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRank::MergeFrom(const GM_GangRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangrank_.MergeFrom(from.gangrank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_m_mygangrank()) {
      set_m_mygangrank(from.m_mygangrank());
    }
    if (from.has_m_mygangname()) {
      set_m_mygangname(from.m_mygangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRank::CopyFrom(const GM_GangRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gangrank_size(); i++) {
    if (!this->gangrank(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangRank::Swap(GM_GangRank* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    gangrank_.Swap(&other->gangrank_);
    std::swap(m_mygangrank_, other->m_mygangrank_);
    std::swap(m_mygangname_, other->m_mygangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRank_descriptor_;
  metadata.reflection = GM_GangRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangIntroduction::kGangLevelFieldNumber;
const int GM_GangIntroduction::kGangMembersFieldNumber;
const int GM_GangIntroduction::kGangLeaderFieldNumber;
const int GM_GangIntroduction::kGangNoticeFieldNumber;
const int GM_GangIntroduction::kGangNameFieldNumber;
const int GM_GangIntroduction::kMaxMembersFieldNumber;
const int GM_GangIntroduction::kGangRankFieldNumber;
#endif  // !_MSC_VER

GM_GangIntroduction::GM_GangIntroduction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangIntroduction::InitAsDefaultInstance() {
}

GM_GangIntroduction::GM_GangIntroduction(const GM_GangIntroduction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangIntroduction::SharedCtor() {
  _cached_size_ = 0;
  ganglevel_ = 0;
  gangmembers_ = 0;
  gangleader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gangnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxmembers_ = 0;
  gangrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangIntroduction::~GM_GangIntroduction() {
  SharedDtor();
}

void GM_GangIntroduction::SharedDtor() {
  if (gangleader_ != &::google::protobuf::internal::kEmptyString) {
    delete gangleader_;
  }
  if (gangnotice_ != &::google::protobuf::internal::kEmptyString) {
    delete gangnotice_;
  }
  if (gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangIntroduction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangIntroduction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangIntroduction_descriptor_;
}

const GM_GangIntroduction& GM_GangIntroduction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangIntroduction* GM_GangIntroduction::default_instance_ = NULL;

GM_GangIntroduction* GM_GangIntroduction::New() const {
  return new GM_GangIntroduction;
}

void GM_GangIntroduction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ganglevel_ = 0;
    gangmembers_ = 0;
    if (has_gangleader()) {
      if (gangleader_ != &::google::protobuf::internal::kEmptyString) {
        gangleader_->clear();
      }
    }
    if (has_gangnotice()) {
      if (gangnotice_ != &::google::protobuf::internal::kEmptyString) {
        gangnotice_->clear();
      }
    }
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::kEmptyString) {
        gangname_->clear();
      }
    }
    maxmembers_ = 0;
    gangrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangIntroduction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gangLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ganglevel_)));
          set_has_ganglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangMembers;
        break;
      }

      // required int32 gangMembers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangMembers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangmembers_)));
          set_has_gangmembers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gangLeader;
        break;
      }

      // optional string gangLeader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangLeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangleader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gangleader().data(), this->gangleader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gangNotice;
        break;
      }

      // optional string gangNotice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangnotice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gangnotice().data(), this->gangnotice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gangName;
        break;
      }

      // optional string gangName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxMembers;
        break;
      }

      // optional int32 maxMembers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMembers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmembers_)));
          set_has_maxmembers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gangRank;
        break;
      }

      // optional int32 gangRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangrank_)));
          set_has_gangrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangIntroduction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gangLevel = 1;
  if (has_ganglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ganglevel(), output);
  }

  // required int32 gangMembers = 2;
  if (has_gangmembers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangmembers(), output);
  }

  // optional string gangLeader = 3;
  if (has_gangleader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangleader().data(), this->gangleader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gangleader(), output);
  }

  // optional string gangNotice = 4;
  if (has_gangnotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangnotice().data(), this->gangnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gangnotice(), output);
  }

  // optional string gangName = 5;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gangname(), output);
  }

  // optional int32 maxMembers = 6;
  if (has_maxmembers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxmembers(), output);
  }

  // optional int32 gangRank = 7;
  if (has_gangrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gangrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangIntroduction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gangLevel = 1;
  if (has_ganglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ganglevel(), target);
  }

  // required int32 gangMembers = 2;
  if (has_gangmembers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangmembers(), target);
  }

  // optional string gangLeader = 3;
  if (has_gangleader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangleader().data(), this->gangleader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangleader(), target);
  }

  // optional string gangNotice = 4;
  if (has_gangnotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangnotice().data(), this->gangnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gangnotice(), target);
  }

  // optional string gangName = 5;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gangname(), target);
  }

  // optional int32 maxMembers = 6;
  if (has_maxmembers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxmembers(), target);
  }

  // optional int32 gangRank = 7;
  if (has_gangrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gangrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangIntroduction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gangLevel = 1;
    if (has_ganglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ganglevel());
    }

    // required int32 gangMembers = 2;
    if (has_gangmembers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangmembers());
    }

    // optional string gangLeader = 3;
    if (has_gangleader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangleader());
    }

    // optional string gangNotice = 4;
    if (has_gangnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangnotice());
    }

    // optional string gangName = 5;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional int32 maxMembers = 6;
    if (has_maxmembers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmembers());
    }

    // optional int32 gangRank = 7;
    if (has_gangrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangIntroduction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangIntroduction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangIntroduction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangIntroduction::MergeFrom(const GM_GangIntroduction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ganglevel()) {
      set_ganglevel(from.ganglevel());
    }
    if (from.has_gangmembers()) {
      set_gangmembers(from.gangmembers());
    }
    if (from.has_gangleader()) {
      set_gangleader(from.gangleader());
    }
    if (from.has_gangnotice()) {
      set_gangnotice(from.gangnotice());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_maxmembers()) {
      set_maxmembers(from.maxmembers());
    }
    if (from.has_gangrank()) {
      set_gangrank(from.gangrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangIntroduction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangIntroduction::CopyFrom(const GM_GangIntroduction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangIntroduction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GM_GangIntroduction::Swap(GM_GangIntroduction* other) {
  if (other != this) {
    std::swap(ganglevel_, other->ganglevel_);
    std::swap(gangmembers_, other->gangmembers_);
    std::swap(gangleader_, other->gangleader_);
    std::swap(gangnotice_, other->gangnotice_);
    std::swap(gangname_, other->gangname_);
    std::swap(maxmembers_, other->maxmembers_);
    std::swap(gangrank_, other->gangrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangIntroduction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangIntroduction_descriptor_;
  metadata.reflection = GM_GangIntroduction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_FBInfo_Request::kFbidFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_FBInfo_Request::GM_GangFB_FBInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_FBInfo_Request::InitAsDefaultInstance() {
}

GM_GangFB_FBInfo_Request::GM_GangFB_FBInfo_Request(const GM_GangFB_FBInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_FBInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_FBInfo_Request::~GM_GangFB_FBInfo_Request() {
  SharedDtor();
}

void GM_GangFB_FBInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_FBInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_FBInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_FBInfo_Request_descriptor_;
}

const GM_GangFB_FBInfo_Request& GM_GangFB_FBInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_FBInfo_Request* GM_GangFB_FBInfo_Request::default_instance_ = NULL;

GM_GangFB_FBInfo_Request* GM_GangFB_FBInfo_Request::New() const {
  return new GM_GangFB_FBInfo_Request;
}

void GM_GangFB_FBInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_FBInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_FBInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_FBInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_FBInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_FBInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_FBInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_FBInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_FBInfo_Request::MergeFrom(const GM_GangFB_FBInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_FBInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_FBInfo_Request::CopyFrom(const GM_GangFB_FBInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_FBInfo_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_FBInfo_Request::Swap(GM_GangFB_FBInfo_Request* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_FBInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_FBInfo_Request_descriptor_;
  metadata.reflection = GM_GangFB_FBInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_FBInfo::kFbidFieldNumber;
const int GM_GangFB_FBInfo::kChallengeFieldNumber;
const int GM_GangFB_FBInfo::kLefttimesFieldNumber;
const int GM_GangFB_FBInfo::kPercentFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_FBInfo::GM_GangFB_FBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_FBInfo::InitAsDefaultInstance() {
}

GM_GangFB_FBInfo::GM_GangFB_FBInfo(const GM_GangFB_FBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_FBInfo::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  challenge_ = 0;
  lefttimes_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_FBInfo::~GM_GangFB_FBInfo() {
  SharedDtor();
}

void GM_GangFB_FBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_FBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_FBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_FBInfo_descriptor_;
}

const GM_GangFB_FBInfo& GM_GangFB_FBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_FBInfo* GM_GangFB_FBInfo::default_instance_ = NULL;

GM_GangFB_FBInfo* GM_GangFB_FBInfo::New() const {
  return new GM_GangFB_FBInfo;
}

void GM_GangFB_FBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
    challenge_ = 0;
    lefttimes_ = 0;
    percent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_FBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challenge;
        break;
      }

      // optional int32 challenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lefttimes;
        break;
      }

      // optional int32 lefttimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttimes_)));
          set_has_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_percent;
        break;
      }

      // optional float percent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_FBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  // optional int32 challenge = 2;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->challenge(), output);
  }

  // optional int32 lefttimes = 3;
  if (has_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefttimes(), output);
  }

  // optional float percent = 4;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_FBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  // optional int32 challenge = 2;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->challenge(), target);
  }

  // optional int32 lefttimes = 3;
  if (has_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefttimes(), target);
  }

  // optional float percent = 4;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_FBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

    // optional int32 challenge = 2;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge());
    }

    // optional int32 lefttimes = 3;
    if (has_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttimes());
    }

    // optional float percent = 4;
    if (has_percent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_FBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_FBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_FBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_FBInfo::MergeFrom(const GM_GangFB_FBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_lefttimes()) {
      set_lefttimes(from.lefttimes());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_FBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_FBInfo::CopyFrom(const GM_GangFB_FBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_FBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_FBInfo::Swap(GM_GangFB_FBInfo* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(challenge_, other->challenge_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_FBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_FBInfo_descriptor_;
  metadata.reflection = GM_GangFB_FBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_FBInfo_Return::kResultFieldNumber;
const int GM_GangFB_FBInfo_Return::kFbinfoFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_FBInfo_Return::GM_GangFB_FBInfo_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_FBInfo_Return::InitAsDefaultInstance() {
}

GM_GangFB_FBInfo_Return::GM_GangFB_FBInfo_Return(const GM_GangFB_FBInfo_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_FBInfo_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_FBInfo_Return::~GM_GangFB_FBInfo_Return() {
  SharedDtor();
}

void GM_GangFB_FBInfo_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_FBInfo_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_FBInfo_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_FBInfo_Return_descriptor_;
}

const GM_GangFB_FBInfo_Return& GM_GangFB_FBInfo_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_FBInfo_Return* GM_GangFB_FBInfo_Return::default_instance_ = NULL;

GM_GangFB_FBInfo_Return* GM_GangFB_FBInfo_Return::New() const {
  return new GM_GangFB_FBInfo_Return;
}

void GM_GangFB_FBInfo_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  fbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_FBInfo_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fbinfo;
        break;
      }

      // repeated .GM_GangFB_FBInfo fbinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fbinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fbinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_FBInfo_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_GangFB_FBInfo fbinfo = 2;
  for (int i = 0; i < this->fbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fbinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_FBInfo_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_GangFB_FBInfo fbinfo = 2;
  for (int i = 0; i < this->fbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fbinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_FBInfo_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_GangFB_FBInfo fbinfo = 2;
  total_size += 1 * this->fbinfo_size();
  for (int i = 0; i < this->fbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fbinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_FBInfo_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_FBInfo_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_FBInfo_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_FBInfo_Return::MergeFrom(const GM_GangFB_FBInfo_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  fbinfo_.MergeFrom(from.fbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_FBInfo_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_FBInfo_Return::CopyFrom(const GM_GangFB_FBInfo_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_FBInfo_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fbinfo_size(); i++) {
    if (!this->fbinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangFB_FBInfo_Return::Swap(GM_GangFB_FBInfo_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    fbinfo_.Swap(&other->fbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_FBInfo_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_FBInfo_Return_descriptor_;
  metadata.reflection = GM_GangFB_FBInfo_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_RankInfo_Request::kFbidFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_RankInfo_Request::GM_GangFB_RankInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_RankInfo_Request::InitAsDefaultInstance() {
}

GM_GangFB_RankInfo_Request::GM_GangFB_RankInfo_Request(const GM_GangFB_RankInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_RankInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_RankInfo_Request::~GM_GangFB_RankInfo_Request() {
  SharedDtor();
}

void GM_GangFB_RankInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_RankInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_RankInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_RankInfo_Request_descriptor_;
}

const GM_GangFB_RankInfo_Request& GM_GangFB_RankInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_RankInfo_Request* GM_GangFB_RankInfo_Request::default_instance_ = NULL;

GM_GangFB_RankInfo_Request* GM_GangFB_RankInfo_Request::New() const {
  return new GM_GangFB_RankInfo_Request;
}

void GM_GangFB_RankInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_RankInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_RankInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_RankInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_RankInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_RankInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_RankInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_RankInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_RankInfo_Request::MergeFrom(const GM_GangFB_RankInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_RankInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_RankInfo_Request::CopyFrom(const GM_GangFB_RankInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_RankInfo_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_RankInfo_Request::Swap(GM_GangFB_RankInfo_Request* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_RankInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_RankInfo_Request_descriptor_;
  metadata.reflection = GM_GangFB_RankInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_RankInfo::kFbidFieldNumber;
const int GM_GangFB_RankInfo::kRankFieldNumber;
const int GM_GangFB_RankInfo::kRolenameFieldNumber;
const int GM_GangFB_RankInfo::kTotalmageFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_RankInfo::GM_GangFB_RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_RankInfo::InitAsDefaultInstance() {
}

GM_GangFB_RankInfo::GM_GangFB_RankInfo(const GM_GangFB_RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_RankInfo::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  rank_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalmage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_RankInfo::~GM_GangFB_RankInfo() {
  SharedDtor();
}

void GM_GangFB_RankInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangFB_RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_RankInfo_descriptor_;
}

const GM_GangFB_RankInfo& GM_GangFB_RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_RankInfo* GM_GangFB_RankInfo::default_instance_ = NULL;

GM_GangFB_RankInfo* GM_GangFB_RankInfo::New() const {
  return new GM_GangFB_RankInfo;
}

void GM_GangFB_RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
    rank_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    totalmage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rolename;
        break;
      }

      // optional string rolename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalmage;
        break;
      }

      // optional int32 totalmage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalmage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmage_)));
          set_has_totalmage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }

  // optional int32 totalmage = 4;
  if (has_totalmage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalmage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }

  // optional int32 totalmage = 4;
  if (has_totalmage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalmage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string rolename = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 totalmage = 4;
    if (has_totalmage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_RankInfo::MergeFrom(const GM_GangFB_RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_totalmage()) {
      set_totalmage(from.totalmage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_RankInfo::CopyFrom(const GM_GangFB_RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_RankInfo::Swap(GM_GangFB_RankInfo* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(rank_, other->rank_);
    std::swap(rolename_, other->rolename_);
    std::swap(totalmage_, other->totalmage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_RankInfo_descriptor_;
  metadata.reflection = GM_GangFB_RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_RankInfo_Return::kResultFieldNumber;
const int GM_GangFB_RankInfo_Return::kRankinfoFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_RankInfo_Return::GM_GangFB_RankInfo_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_RankInfo_Return::InitAsDefaultInstance() {
}

GM_GangFB_RankInfo_Return::GM_GangFB_RankInfo_Return(const GM_GangFB_RankInfo_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_RankInfo_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_RankInfo_Return::~GM_GangFB_RankInfo_Return() {
  SharedDtor();
}

void GM_GangFB_RankInfo_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_RankInfo_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_RankInfo_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_RankInfo_Return_descriptor_;
}

const GM_GangFB_RankInfo_Return& GM_GangFB_RankInfo_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_RankInfo_Return* GM_GangFB_RankInfo_Return::default_instance_ = NULL;

GM_GangFB_RankInfo_Return* GM_GangFB_RankInfo_Return::New() const {
  return new GM_GangFB_RankInfo_Return;
}

void GM_GangFB_RankInfo_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_RankInfo_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankinfo;
        break;
      }

      // repeated .GM_GangFB_RankInfo rankinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_RankInfo_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_GangFB_RankInfo rankinfo = 2;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_RankInfo_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_GangFB_RankInfo rankinfo = 2;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_RankInfo_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_GangFB_RankInfo rankinfo = 2;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_RankInfo_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_RankInfo_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_RankInfo_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_RankInfo_Return::MergeFrom(const GM_GangFB_RankInfo_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_RankInfo_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_RankInfo_Return::CopyFrom(const GM_GangFB_RankInfo_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_RankInfo_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rankinfo_size(); i++) {
    if (!this->rankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangFB_RankInfo_Return::Swap(GM_GangFB_RankInfo_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_RankInfo_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_RankInfo_Return_descriptor_;
  metadata.reflection = GM_GangFB_RankInfo_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_Fight_Request::kFbidFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_Fight_Request::GM_GangFB_Fight_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_Fight_Request::InitAsDefaultInstance() {
}

GM_GangFB_Fight_Request::GM_GangFB_Fight_Request(const GM_GangFB_Fight_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_Fight_Request::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_Fight_Request::~GM_GangFB_Fight_Request() {
  SharedDtor();
}

void GM_GangFB_Fight_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_Fight_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_Fight_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_Fight_Request_descriptor_;
}

const GM_GangFB_Fight_Request& GM_GangFB_Fight_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_Fight_Request* GM_GangFB_Fight_Request::default_instance_ = NULL;

GM_GangFB_Fight_Request* GM_GangFB_Fight_Request::New() const {
  return new GM_GangFB_Fight_Request;
}

void GM_GangFB_Fight_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_Fight_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_Fight_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_Fight_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_Fight_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_Fight_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_Fight_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_Fight_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_Fight_Request::MergeFrom(const GM_GangFB_Fight_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_Fight_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_Fight_Request::CopyFrom(const GM_GangFB_Fight_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_Fight_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_Fight_Request::Swap(GM_GangFB_Fight_Request* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_Fight_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_Fight_Request_descriptor_;
  metadata.reflection = GM_GangFB_Fight_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_Fight_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_Fight_Return::GM_GangFB_Fight_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_Fight_Return::InitAsDefaultInstance() {
}

GM_GangFB_Fight_Return::GM_GangFB_Fight_Return(const GM_GangFB_Fight_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_Fight_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_Fight_Return::~GM_GangFB_Fight_Return() {
  SharedDtor();
}

void GM_GangFB_Fight_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_Fight_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_Fight_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_Fight_Return_descriptor_;
}

const GM_GangFB_Fight_Return& GM_GangFB_Fight_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_Fight_Return* GM_GangFB_Fight_Return::default_instance_ = NULL;

GM_GangFB_Fight_Return* GM_GangFB_Fight_Return::New() const {
  return new GM_GangFB_Fight_Return;
}

void GM_GangFB_Fight_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_Fight_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_Fight_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_Fight_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_Fight_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_Fight_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_Fight_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_Fight_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_Fight_Return::MergeFrom(const GM_GangFB_Fight_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_Fight_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_Fight_Return::CopyFrom(const GM_GangFB_Fight_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_Fight_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_Fight_Return::Swap(GM_GangFB_Fight_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_Fight_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_Fight_Return_descriptor_;
  metadata.reflection = GM_GangFB_Fight_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_Reward::kObjectidFieldNumber;
const int GM_GangFB_Reward::kNumberFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_Reward::GM_GangFB_Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_Reward::InitAsDefaultInstance() {
}

GM_GangFB_Reward::GM_GangFB_Reward(const GM_GangFB_Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_Reward::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_Reward::~GM_GangFB_Reward() {
  SharedDtor();
}

void GM_GangFB_Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_Reward_descriptor_;
}

const GM_GangFB_Reward& GM_GangFB_Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_Reward* GM_GangFB_Reward::default_instance_ = NULL;

GM_GangFB_Reward* GM_GangFB_Reward::New() const {
  return new GM_GangFB_Reward;
}

void GM_GangFB_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_Reward::MergeFrom(const GM_GangFB_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_Reward::CopyFrom(const GM_GangFB_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangFB_Reward::Swap(GM_GangFB_Reward* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_Reward_descriptor_;
  metadata.reflection = GM_GangFB_Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFB_TakeFight::kDamageFieldNumber;
const int GM_GangFB_TakeFight::kRewardsFieldNumber;
#endif  // !_MSC_VER

GM_GangFB_TakeFight::GM_GangFB_TakeFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFB_TakeFight::InitAsDefaultInstance() {
}

GM_GangFB_TakeFight::GM_GangFB_TakeFight(const GM_GangFB_TakeFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFB_TakeFight::SharedCtor() {
  _cached_size_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFB_TakeFight::~GM_GangFB_TakeFight() {
  SharedDtor();
}

void GM_GangFB_TakeFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFB_TakeFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFB_TakeFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFB_TakeFight_descriptor_;
}

const GM_GangFB_TakeFight& GM_GangFB_TakeFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangFB_TakeFight* GM_GangFB_TakeFight::default_instance_ = NULL;

GM_GangFB_TakeFight* GM_GangFB_TakeFight::New() const {
  return new GM_GangFB_TakeFight;
}

void GM_GangFB_TakeFight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    damage_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFB_TakeFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 damage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .GM_GangFB_Reward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFB_TakeFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 damage = 1;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damage(), output);
  }

  // repeated .GM_GangFB_Reward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFB_TakeFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 damage = 1;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damage(), target);
  }

  // repeated .GM_GangFB_Reward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFB_TakeFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  // repeated .GM_GangFB_Reward rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFB_TakeFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFB_TakeFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFB_TakeFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFB_TakeFight::MergeFrom(const GM_GangFB_TakeFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFB_TakeFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFB_TakeFight::CopyFrom(const GM_GangFB_TakeFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFB_TakeFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangFB_TakeFight::Swap(GM_GangFB_TakeFight* other) {
  if (other != this) {
    std::swap(damage_, other->damage_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFB_TakeFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFB_TakeFight_descriptor_;
  metadata.reflection = GM_GangFB_TakeFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangShop::kMLvFieldNumber;
const int GM_GangShop::kMUplecostFieldNumber;
const int GM_GangShop::kMShopobjFieldNumber;
#endif  // !_MSC_VER

GM_GangShop::GM_GangShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangShop::InitAsDefaultInstance() {
}

GM_GangShop::GM_GangShop(const GM_GangShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangShop::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_uplecost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangShop::~GM_GangShop() {
  SharedDtor();
}

void GM_GangShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangShop_descriptor_;
}

const GM_GangShop& GM_GangShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangShop* GM_GangShop::default_instance_ = NULL;

GM_GangShop* GM_GangShop::New() const {
  return new GM_GangShop;
}

void GM_GangShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_uplecost_ = 0;
  }
  m_shopobj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_uplecost;
        break;
      }

      // optional int32 m_uplecost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplecost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplecost_)));
          set_has_m_uplecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_shopobj;
        break;
      }

      // repeated .GM_GangShopObj m_shopobj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_shopobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_shopobj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_shopobj;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_uplecost = 2;
  if (has_m_uplecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_uplecost(), output);
  }

  // repeated .GM_GangShopObj m_shopobj = 3;
  for (int i = 0; i < this->m_shopobj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_shopobj(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_uplecost = 2;
  if (has_m_uplecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_uplecost(), target);
  }

  // repeated .GM_GangShopObj m_shopobj = 3;
  for (int i = 0; i < this->m_shopobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_shopobj(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_uplecost = 2;
    if (has_m_uplecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplecost());
    }

  }
  // repeated .GM_GangShopObj m_shopobj = 3;
  total_size += 1 * this->m_shopobj_size();
  for (int i = 0; i < this->m_shopobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_shopobj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangShop::MergeFrom(const GM_GangShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_shopobj_.MergeFrom(from.m_shopobj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_uplecost()) {
      set_m_uplecost(from.m_uplecost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangShop::CopyFrom(const GM_GangShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_shopobj_size(); i++) {
    if (!this->m_shopobj(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangShop::Swap(GM_GangShop* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_uplecost_, other->m_uplecost_);
    m_shopobj_.Swap(&other->m_shopobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangShop_descriptor_;
  metadata.reflection = GM_GangShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangShopObj::kMObjidFieldNumber;
const int GM_GangShopObj::kMShowtypeFieldNumber;
const int GM_GangShopObj::kMRemainFieldNumber;
#endif  // !_MSC_VER

GM_GangShopObj::GM_GangShopObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangShopObj::InitAsDefaultInstance() {
}

GM_GangShopObj::GM_GangShopObj(const GM_GangShopObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangShopObj::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_showtype_ = 0;
  m_remain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangShopObj::~GM_GangShopObj() {
  SharedDtor();
}

void GM_GangShopObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangShopObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangShopObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangShopObj_descriptor_;
}

const GM_GangShopObj& GM_GangShopObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangShopObj* GM_GangShopObj::default_instance_ = NULL;

GM_GangShopObj* GM_GangShopObj::New() const {
  return new GM_GangShopObj;
}

void GM_GangShopObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_showtype_ = 0;
    m_remain_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangShopObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_showtype;
        break;
      }

      // optional int32 m_showtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showtype_)));
          set_has_m_showtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_remain;
        break;
      }

      // optional int32 m_remain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_remain_)));
          set_has_m_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangShopObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_showtype = 2;
  if (has_m_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_showtype(), output);
  }

  // optional int32 m_remain = 3;
  if (has_m_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_remain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangShopObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_showtype = 2;
  if (has_m_showtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_showtype(), target);
  }

  // optional int32 m_remain = 3;
  if (has_m_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_remain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangShopObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_showtype = 2;
    if (has_m_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showtype());
    }

    // optional int32 m_remain = 3;
    if (has_m_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_remain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangShopObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangShopObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangShopObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangShopObj::MergeFrom(const GM_GangShopObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_showtype()) {
      set_m_showtype(from.m_showtype());
    }
    if (from.has_m_remain()) {
      set_m_remain(from.m_remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangShopObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangShopObj::CopyFrom(const GM_GangShopObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangShopObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangShopObj::Swap(GM_GangShopObj* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_showtype_, other->m_showtype_);
    std::swap(m_remain_, other->m_remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangShopObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangShopObj_descriptor_;
  metadata.reflection = GM_GangShopObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangModuleInfo::kModuleidFieldNumber;
const int GM_GangModuleInfo::kIsUnlockFieldNumber;
const int GM_GangModuleInfo::kMHallDataFieldNumber;
const int GM_GangModuleInfo::kMTempDataFieldNumber;
const int GM_GangModuleInfo::kMShopDataFieldNumber;
const int GM_GangModuleInfo::kMaxlvFieldNumber;
#endif  // !_MSC_VER

GM_GangModuleInfo::GM_GangModuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangModuleInfo::InitAsDefaultInstance() {
  m_halldata_ = const_cast< ::GM_GangHall*>(&::GM_GangHall::default_instance());
  m_tempdata_ = const_cast< ::GM_GangTemp*>(&::GM_GangTemp::default_instance());
  m_shopdata_ = const_cast< ::GM_GangShop*>(&::GM_GangShop::default_instance());
}

GM_GangModuleInfo::GM_GangModuleInfo(const GM_GangModuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangModuleInfo::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 0;
  isunlock_ = 0;
  m_halldata_ = NULL;
  m_tempdata_ = NULL;
  m_shopdata_ = NULL;
  maxlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangModuleInfo::~GM_GangModuleInfo() {
  SharedDtor();
}

void GM_GangModuleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete m_halldata_;
    delete m_tempdata_;
    delete m_shopdata_;
  }
}

void GM_GangModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangModuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangModuleInfo_descriptor_;
}

const GM_GangModuleInfo& GM_GangModuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangModuleInfo* GM_GangModuleInfo::default_instance_ = NULL;

GM_GangModuleInfo* GM_GangModuleInfo::New() const {
  return new GM_GangModuleInfo;
}

void GM_GangModuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moduleid_ = 0;
    isunlock_ = 0;
    if (has_m_halldata()) {
      if (m_halldata_ != NULL) m_halldata_->::GM_GangHall::Clear();
    }
    if (has_m_tempdata()) {
      if (m_tempdata_ != NULL) m_tempdata_->::GM_GangTemp::Clear();
    }
    if (has_m_shopdata()) {
      if (m_shopdata_ != NULL) m_shopdata_->::GM_GangShop::Clear();
    }
    maxlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 moduleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isUnlock;
        break;
      }

      // optional int32 isUnlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isunlock_)));
          set_has_isunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_HallData;
        break;
      }

      // optional .GM_GangHall m_HallData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HallData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_halldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_TempData;
        break;
      }

      // optional .GM_GangTemp m_TempData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_TempData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_tempdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_ShopData;
        break;
      }

      // optional .GM_GangShop m_ShopData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ShopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_shopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxlv;
        break;
      }

      // optional int32 maxlv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 moduleid = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->moduleid(), output);
  }

  // optional int32 isUnlock = 2;
  if (has_isunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isunlock(), output);
  }

  // optional .GM_GangHall m_HallData = 3;
  if (has_m_halldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_halldata(), output);
  }

  // optional .GM_GangTemp m_TempData = 4;
  if (has_m_tempdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_tempdata(), output);
  }

  // optional .GM_GangShop m_ShopData = 5;
  if (has_m_shopdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_shopdata(), output);
  }

  // optional int32 maxlv = 6;
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangModuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 moduleid = 1;
  if (has_moduleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->moduleid(), target);
  }

  // optional int32 isUnlock = 2;
  if (has_isunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isunlock(), target);
  }

  // optional .GM_GangHall m_HallData = 3;
  if (has_m_halldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_halldata(), target);
  }

  // optional .GM_GangTemp m_TempData = 4;
  if (has_m_tempdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_tempdata(), target);
  }

  // optional .GM_GangShop m_ShopData = 5;
  if (has_m_shopdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_shopdata(), target);
  }

  // optional int32 maxlv = 6;
  if (has_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangModuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 moduleid = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moduleid());
    }

    // optional int32 isUnlock = 2;
    if (has_isunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isunlock());
    }

    // optional .GM_GangHall m_HallData = 3;
    if (has_m_halldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_halldata());
    }

    // optional .GM_GangTemp m_TempData = 4;
    if (has_m_tempdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_tempdata());
    }

    // optional .GM_GangShop m_ShopData = 5;
    if (has_m_shopdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_shopdata());
    }

    // optional int32 maxlv = 6;
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangModuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangModuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangModuleInfo::MergeFrom(const GM_GangModuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_isunlock()) {
      set_isunlock(from.isunlock());
    }
    if (from.has_m_halldata()) {
      mutable_m_halldata()->::GM_GangHall::MergeFrom(from.m_halldata());
    }
    if (from.has_m_tempdata()) {
      mutable_m_tempdata()->::GM_GangTemp::MergeFrom(from.m_tempdata());
    }
    if (from.has_m_shopdata()) {
      mutable_m_shopdata()->::GM_GangShop::MergeFrom(from.m_shopdata());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangModuleInfo::CopyFrom(const GM_GangModuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangModuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_halldata()) {
    if (!this->m_halldata().IsInitialized()) return false;
  }
  if (has_m_tempdata()) {
    if (!this->m_tempdata().IsInitialized()) return false;
  }
  if (has_m_shopdata()) {
    if (!this->m_shopdata().IsInitialized()) return false;
  }
  return true;
}

void GM_GangModuleInfo::Swap(GM_GangModuleInfo* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(isunlock_, other->isunlock_);
    std::swap(m_halldata_, other->m_halldata_);
    std::swap(m_tempdata_, other->m_tempdata_);
    std::swap(m_shopdata_, other->m_shopdata_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangModuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangModuleInfo_descriptor_;
  metadata.reflection = GM_GangModuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangHall::kMLvFieldNumber;
const int GM_GangHall::kMUplecostFieldNumber;
const int GM_GangHall::kMIshallFieldNumber;
const int GM_GangHall::kMHallLogFieldNumber;
#endif  // !_MSC_VER

GM_GangHall::GM_GangHall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangHall::InitAsDefaultInstance() {
}

GM_GangHall::GM_GangHall(const GM_GangHall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangHall::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_uplecost_ = 0;
  m_ishall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangHall::~GM_GangHall() {
  SharedDtor();
}

void GM_GangHall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangHall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangHall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangHall_descriptor_;
}

const GM_GangHall& GM_GangHall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangHall* GM_GangHall::default_instance_ = NULL;

GM_GangHall* GM_GangHall::New() const {
  return new GM_GangHall;
}

void GM_GangHall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_uplecost_ = 0;
    m_ishall_ = 0;
  }
  m_halllog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangHall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_uplecost;
        break;
      }

      // optional int32 m_uplecost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplecost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplecost_)));
          set_has_m_uplecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_ishall;
        break;
      }

      // optional int32 m_ishall = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ishall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ishall_)));
          set_has_m_ishall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_hallLog;
        break;
      }

      // repeated string m_hallLog = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_hallLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_halllog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_halllog(this->m_halllog_size() - 1).data(),
            this->m_halllog(this->m_halllog_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_hallLog;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangHall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_uplecost = 2;
  if (has_m_uplecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_uplecost(), output);
  }

  // optional int32 m_ishall = 4;
  if (has_m_ishall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ishall(), output);
  }

  // repeated string m_hallLog = 5;
  for (int i = 0; i < this->m_halllog_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_halllog(i).data(), this->m_halllog(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_halllog(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangHall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_uplecost = 2;
  if (has_m_uplecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_uplecost(), target);
  }

  // optional int32 m_ishall = 4;
  if (has_m_ishall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ishall(), target);
  }

  // repeated string m_hallLog = 5;
  for (int i = 0; i < this->m_halllog_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_halllog(i).data(), this->m_halllog(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->m_halllog(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangHall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_uplecost = 2;
    if (has_m_uplecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplecost());
    }

    // optional int32 m_ishall = 4;
    if (has_m_ishall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ishall());
    }

  }
  // repeated string m_hallLog = 5;
  total_size += 1 * this->m_halllog_size();
  for (int i = 0; i < this->m_halllog_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_halllog(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangHall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangHall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangHall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangHall::MergeFrom(const GM_GangHall& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_halllog_.MergeFrom(from.m_halllog_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_uplecost()) {
      set_m_uplecost(from.m_uplecost());
    }
    if (from.has_m_ishall()) {
      set_m_ishall(from.m_ishall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangHall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangHall::CopyFrom(const GM_GangHall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangHall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangHall::Swap(GM_GangHall* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_uplecost_, other->m_uplecost_);
    std::swap(m_ishall_, other->m_ishall_);
    m_halllog_.Swap(&other->m_halllog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangHall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangHall_descriptor_;
  metadata.reflection = GM_GangHall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangTemp::kMLvFieldNumber;
const int GM_GangTemp::kMUplecostFieldNumber;
const int GM_GangTemp::kMRemainFieldNumber;
const int GM_GangTemp::kMCostFieldNumber;
const int GM_GangTemp::kMIsblessFieldNumber;
#endif  // !_MSC_VER

GM_GangTemp::GM_GangTemp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangTemp::InitAsDefaultInstance() {
}

GM_GangTemp::GM_GangTemp(const GM_GangTemp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangTemp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_uplecost_ = 0;
  m_remain_ = 0;
  m_cost_ = 0;
  m_isbless_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangTemp::~GM_GangTemp() {
  SharedDtor();
}

void GM_GangTemp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangTemp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangTemp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangTemp_descriptor_;
}

const GM_GangTemp& GM_GangTemp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangTemp* GM_GangTemp::default_instance_ = NULL;

GM_GangTemp* GM_GangTemp::New() const {
  return new GM_GangTemp;
}

void GM_GangTemp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_uplecost_ = 0;
    m_remain_ = 0;
    m_cost_ = 0;
    m_isbless_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangTemp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_uplecost;
        break;
      }

      // optional int32 m_uplecost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplecost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplecost_)));
          set_has_m_uplecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_remain;
        break;
      }

      // optional int32 m_remain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_remain_)));
          set_has_m_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cost;
        break;
      }

      // optional int32 m_cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_isbless;
        break;
      }

      // optional int32 m_isbless = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isbless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isbless_)));
          set_has_m_isbless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangTemp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_uplecost = 2;
  if (has_m_uplecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_uplecost(), output);
  }

  // optional int32 m_remain = 3;
  if (has_m_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_remain(), output);
  }

  // optional int32 m_cost = 4;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cost(), output);
  }

  // optional int32 m_isbless = 5;
  if (has_m_isbless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_isbless(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangTemp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_uplecost = 2;
  if (has_m_uplecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_uplecost(), target);
  }

  // optional int32 m_remain = 3;
  if (has_m_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_remain(), target);
  }

  // optional int32 m_cost = 4;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cost(), target);
  }

  // optional int32 m_isbless = 5;
  if (has_m_isbless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_isbless(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangTemp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_uplecost = 2;
    if (has_m_uplecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplecost());
    }

    // optional int32 m_remain = 3;
    if (has_m_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_remain());
    }

    // optional int32 m_cost = 4;
    if (has_m_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

    // optional int32 m_isbless = 5;
    if (has_m_isbless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isbless());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangTemp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangTemp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangTemp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangTemp::MergeFrom(const GM_GangTemp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_uplecost()) {
      set_m_uplecost(from.m_uplecost());
    }
    if (from.has_m_remain()) {
      set_m_remain(from.m_remain());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
    if (from.has_m_isbless()) {
      set_m_isbless(from.m_isbless());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangTemp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangTemp::CopyFrom(const GM_GangTemp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangTemp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangTemp::Swap(GM_GangTemp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_uplecost_, other->m_uplecost_);
    std::swap(m_remain_, other->m_remain_);
    std::swap(m_cost_, other->m_cost_);
    std::swap(m_isbless_, other->m_isbless_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangTemp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangTemp_descriptor_;
  metadata.reflection = GM_GangTemp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlessResult::kMResultFieldNumber;
const int GM_BlessResult::kMObjsFieldNumber;
#endif  // !_MSC_VER

GM_BlessResult::GM_BlessResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlessResult::InitAsDefaultInstance() {
}

GM_BlessResult::GM_BlessResult(const GM_BlessResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlessResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlessResult::~GM_BlessResult() {
  SharedDtor();
}

void GM_BlessResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlessResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlessResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlessResult_descriptor_;
}

const GM_BlessResult& GM_BlessResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_BlessResult* GM_BlessResult::default_instance_ = NULL;

GM_BlessResult* GM_BlessResult::New() const {
  return new GM_BlessResult;
}

void GM_BlessResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  m_objs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlessResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_objs;
        break;
      }

      // repeated .GM_BlessObj m_objs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_objs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlessResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated .GM_BlessObj m_objs = 2;
  for (int i = 0; i < this->m_objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_objs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlessResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated .GM_BlessObj m_objs = 2;
  for (int i = 0; i < this->m_objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_objs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlessResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated .GM_BlessObj m_objs = 2;
  total_size += 1 * this->m_objs_size();
  for (int i = 0; i < this->m_objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_objs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlessResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlessResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlessResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlessResult::MergeFrom(const GM_BlessResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_objs_.MergeFrom(from.m_objs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlessResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlessResult::CopyFrom(const GM_BlessResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlessResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_objs_size(); i++) {
    if (!this->m_objs(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BlessResult::Swap(GM_BlessResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    m_objs_.Swap(&other->m_objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlessResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlessResult_descriptor_;
  metadata.reflection = GM_BlessResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BlessObj::kMObjidFieldNumber;
const int GM_BlessObj::kMObjcountFieldNumber;
#endif  // !_MSC_VER

GM_BlessObj::GM_BlessObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BlessObj::InitAsDefaultInstance() {
}

GM_BlessObj::GM_BlessObj(const GM_BlessObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BlessObj::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_objcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BlessObj::~GM_BlessObj() {
  SharedDtor();
}

void GM_BlessObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BlessObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BlessObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BlessObj_descriptor_;
}

const GM_BlessObj& GM_BlessObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_BlessObj* GM_BlessObj::default_instance_ = NULL;

GM_BlessObj* GM_BlessObj::New() const {
  return new GM_BlessObj;
}

void GM_BlessObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_objcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BlessObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objcount;
        break;
      }

      // required int32 m_objcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objcount_)));
          set_has_m_objcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BlessObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_objcount = 2;
  if (has_m_objcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BlessObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_objcount = 2;
  if (has_m_objcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BlessObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_objcount = 2;
    if (has_m_objcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BlessObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BlessObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BlessObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BlessObj::MergeFrom(const GM_BlessObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_objcount()) {
      set_m_objcount(from.m_objcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BlessObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BlessObj::CopyFrom(const GM_BlessObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BlessObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_BlessObj::Swap(GM_BlessObj* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_objcount_, other->m_objcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BlessObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BlessObj_descriptor_;
  metadata.reflection = GM_BlessObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangModuleInfoList::kHasGangFieldNumber;
const int GM_GangModuleInfoList::kGangModuleInfoFieldNumber;
#endif  // !_MSC_VER

GM_GangModuleInfoList::GM_GangModuleInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangModuleInfoList::InitAsDefaultInstance() {
}

GM_GangModuleInfoList::GM_GangModuleInfoList(const GM_GangModuleInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangModuleInfoList::SharedCtor() {
  _cached_size_ = 0;
  hasgang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangModuleInfoList::~GM_GangModuleInfoList() {
  SharedDtor();
}

void GM_GangModuleInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangModuleInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangModuleInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangModuleInfoList_descriptor_;
}

const GM_GangModuleInfoList& GM_GangModuleInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangModuleInfoList* GM_GangModuleInfoList::default_instance_ = NULL;

GM_GangModuleInfoList* GM_GangModuleInfoList::New() const {
  return new GM_GangModuleInfoList;
}

void GM_GangModuleInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasgang_ = 0;
  }
  gangmoduleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangModuleInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hasGang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasgang_)));
          set_has_hasgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangModuleInfo;
        break;
      }

      // repeated .GM_GangModuleInfo gangModuleInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangModuleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangmoduleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangModuleInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangModuleInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hasGang = 1;
  if (has_hasgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hasgang(), output);
  }

  // repeated .GM_GangModuleInfo gangModuleInfo = 2;
  for (int i = 0; i < this->gangmoduleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gangmoduleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangModuleInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hasGang = 1;
  if (has_hasgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hasgang(), target);
  }

  // repeated .GM_GangModuleInfo gangModuleInfo = 2;
  for (int i = 0; i < this->gangmoduleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gangmoduleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangModuleInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hasGang = 1;
    if (has_hasgang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasgang());
    }

  }
  // repeated .GM_GangModuleInfo gangModuleInfo = 2;
  total_size += 1 * this->gangmoduleinfo_size();
  for (int i = 0; i < this->gangmoduleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangmoduleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangModuleInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangModuleInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangModuleInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangModuleInfoList::MergeFrom(const GM_GangModuleInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangmoduleinfo_.MergeFrom(from.gangmoduleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasgang()) {
      set_hasgang(from.hasgang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangModuleInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangModuleInfoList::CopyFrom(const GM_GangModuleInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangModuleInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gangmoduleinfo_size(); i++) {
    if (!this->gangmoduleinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangModuleInfoList::Swap(GM_GangModuleInfoList* other) {
  if (other != this) {
    std::swap(hasgang_, other->hasgang_);
    gangmoduleinfo_.Swap(&other->gangmoduleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangModuleInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangModuleInfoList_descriptor_;
  metadata.reflection = GM_GangModuleInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangNotify::kMGanggmidFieldNumber;
const int GM_GangNotify::kMGangexpFieldNumber;
const int GM_GangNotify::kMGanglvFieldNumber;
#endif  // !_MSC_VER

GM_GangNotify::GM_GangNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangNotify::InitAsDefaultInstance() {
}

GM_GangNotify::GM_GangNotify(const GM_GangNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangNotify::SharedCtor() {
  _cached_size_ = 0;
  m_ganggmid_ = GOOGLE_LONGLONG(0);
  m_gangexp_ = 0;
  m_ganglv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangNotify::~GM_GangNotify() {
  SharedDtor();
}

void GM_GangNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangNotify_descriptor_;
}

const GM_GangNotify& GM_GangNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_GangNotify* GM_GangNotify::default_instance_ = NULL;

GM_GangNotify* GM_GangNotify::New() const {
  return new GM_GangNotify;
}

void GM_GangNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ganggmid_ = GOOGLE_LONGLONG(0);
    m_gangexp_ = 0;
    m_ganglv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_ganggmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_ganggmid_)));
          set_has_m_ganggmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gangexp;
        break;
      }

      // optional int32 m_gangexp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gangexp_)));
          set_has_m_gangexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_ganglv;
        break;
      }

      // optional int32 m_ganglv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ganglv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ganglv_)));
          set_has_m_ganglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_ganggmid = 1;
  if (has_m_ganggmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_ganggmid(), output);
  }

  // optional int32 m_gangexp = 2;
  if (has_m_gangexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_gangexp(), output);
  }

  // optional int32 m_ganglv = 3;
  if (has_m_ganglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ganglv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_ganggmid = 1;
  if (has_m_ganggmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_ganggmid(), target);
  }

  // optional int32 m_gangexp = 2;
  if (has_m_gangexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_gangexp(), target);
  }

  // optional int32 m_ganglv = 3;
  if (has_m_ganglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ganglv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_ganggmid = 1;
    if (has_m_ganggmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_ganggmid());
    }

    // optional int32 m_gangexp = 2;
    if (has_m_gangexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gangexp());
    }

    // optional int32 m_ganglv = 3;
    if (has_m_ganglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ganglv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangNotify::MergeFrom(const GM_GangNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ganggmid()) {
      set_m_ganggmid(from.m_ganggmid());
    }
    if (from.has_m_gangexp()) {
      set_m_gangexp(from.m_gangexp());
    }
    if (from.has_m_ganglv()) {
      set_m_ganglv(from.m_ganglv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangNotify::CopyFrom(const GM_GangNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangNotify::Swap(GM_GangNotify* other) {
  if (other != this) {
    std::swap(m_ganggmid_, other->m_ganggmid_);
    std::swap(m_gangexp_, other->m_gangexp_);
    std::swap(m_ganglv_, other->m_ganglv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangNotify_descriptor_;
  metadata.reflection = GM_GangNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ApplyResult::kMResultFieldNumber;
const int GM_ApplyResult::kMPreganggmidFieldNumber;
const int GM_ApplyResult::kMNowganggmidFieldNumber;
const int GM_ApplyResult::kMApplycountFieldNumber;
#endif  // !_MSC_VER

GM_ApplyResult::GM_ApplyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ApplyResult::InitAsDefaultInstance() {
}

GM_ApplyResult::GM_ApplyResult(const GM_ApplyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ApplyResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_preganggmid_ = GOOGLE_LONGLONG(0);
  m_nowganggmid_ = GOOGLE_LONGLONG(0);
  m_applycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ApplyResult::~GM_ApplyResult() {
  SharedDtor();
}

void GM_ApplyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ApplyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ApplyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ApplyResult_descriptor_;
}

const GM_ApplyResult& GM_ApplyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gang_2etxt();
  return *default_instance_;
}

GM_ApplyResult* GM_ApplyResult::default_instance_ = NULL;

GM_ApplyResult* GM_ApplyResult::New() const {
  return new GM_ApplyResult;
}

void GM_ApplyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_preganggmid_ = GOOGLE_LONGLONG(0);
    m_nowganggmid_ = GOOGLE_LONGLONG(0);
    m_applycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ApplyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_preganggmid;
        break;
      }

      // optional int64 m_preganggmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_preganggmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_preganggmid_)));
          set_has_m_preganggmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nowganggmid;
        break;
      }

      // optional int64 m_nowganggmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nowganggmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_nowganggmid_)));
          set_has_m_nowganggmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_applycount;
        break;
      }

      // optional int32 m_applycount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_applycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_applycount_)));
          set_has_m_applycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ApplyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int64 m_preganggmid = 2;
  if (has_m_preganggmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_preganggmid(), output);
  }

  // optional int64 m_nowganggmid = 3;
  if (has_m_nowganggmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_nowganggmid(), output);
  }

  // optional int32 m_applycount = 4;
  if (has_m_applycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_applycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ApplyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int64 m_preganggmid = 2;
  if (has_m_preganggmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_preganggmid(), target);
  }

  // optional int64 m_nowganggmid = 3;
  if (has_m_nowganggmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_nowganggmid(), target);
  }

  // optional int32 m_applycount = 4;
  if (has_m_applycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_applycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ApplyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int64 m_preganggmid = 2;
    if (has_m_preganggmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_preganggmid());
    }

    // optional int64 m_nowganggmid = 3;
    if (has_m_nowganggmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_nowganggmid());
    }

    // optional int32 m_applycount = 4;
    if (has_m_applycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_applycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ApplyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ApplyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ApplyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ApplyResult::MergeFrom(const GM_ApplyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_preganggmid()) {
      set_m_preganggmid(from.m_preganggmid());
    }
    if (from.has_m_nowganggmid()) {
      set_m_nowganggmid(from.m_nowganggmid());
    }
    if (from.has_m_applycount()) {
      set_m_applycount(from.m_applycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ApplyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ApplyResult::CopyFrom(const GM_ApplyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ApplyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ApplyResult::Swap(GM_ApplyResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_preganggmid_, other->m_preganggmid_);
    std::swap(m_nowganggmid_, other->m_nowganggmid_);
    std::swap(m_applycount_, other->m_applycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ApplyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ApplyResult_descriptor_;
  metadata.reflection = GM_ApplyResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
