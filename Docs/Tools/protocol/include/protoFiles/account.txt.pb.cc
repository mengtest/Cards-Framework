// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_AccountLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AccountReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AccountCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AccountCreateReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountCreateReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AccountExistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountExistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_VerifyVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_VerifyVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_VerifyVersionReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_VerifyVersionReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TestAccountReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TestAccountReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BindTestAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BindTestAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BindTestAccountReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BindTestAccountReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SP_BindTestAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SP_BindTestAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TestAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TestAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RecordAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RecordAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AccountOPEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AccountOPEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_2etxt() {
  protobuf_AddDesc_account_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account.txt");
  GOOGLE_CHECK(file != NULL);
  GM_AccountLog_descriptor_ = file->message_type(0);
  static const int GM_AccountLog_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, ditchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, deviceuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, networktype_),
  };
  GM_AccountLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountLog_descriptor_,
      GM_AccountLog::default_instance_,
      GM_AccountLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountLog));
  GM_AccountRequest_descriptor_ = file->message_type(1);
  static const int GM_AccountRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountRequest, m_accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountRequest, m_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountRequest, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountRequest, accountloginfo_),
  };
  GM_AccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountRequest_descriptor_,
      GM_AccountRequest::default_instance_,
      GM_AccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountRequest));
  GM_AccountReturn_descriptor_ = file->message_type(2);
  static const int GM_AccountReturn_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_randstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_lastloginserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_lastloginserverid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_lastloginserverstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_lastloginservername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, m_lastloginservername2_),
  };
  GM_AccountReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountReturn_descriptor_,
      GM_AccountReturn::default_instance_,
      GM_AccountReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountReturn));
  GM_AccountCreate_descriptor_ = file->message_type(3);
  static const int GM_AccountCreate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreate, m_accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreate, m_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreate, accountloginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreate, m_activatekey_),
  };
  GM_AccountCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountCreate_descriptor_,
      GM_AccountCreate::default_instance_,
      GM_AccountCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountCreate));
  GM_AccountCreateReturn_descriptor_ = file->message_type(4);
  static const int GM_AccountCreateReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreateReturn, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreateReturn, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreateReturn, m_accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreateReturn, m_password_),
  };
  GM_AccountCreateReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountCreateReturn_descriptor_,
      GM_AccountCreateReturn::default_instance_,
      GM_AccountCreateReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreateReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountCreateReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountCreateReturn));
  GM_AccountExistRequest_descriptor_ = file->message_type(5);
  static const int GM_AccountExistRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountExistRequest, m_accountname_),
  };
  GM_AccountExistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountExistRequest_descriptor_,
      GM_AccountExistRequest::default_instance_,
      GM_AccountExistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountExistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountExistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountExistRequest));
  GM_VerifyVersion_descriptor_ = file->message_type(6);
  static const int GM_VerifyVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersion, version_),
  };
  GM_VerifyVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_VerifyVersion_descriptor_,
      GM_VerifyVersion::default_instance_,
      GM_VerifyVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_VerifyVersion));
  GM_VerifyVersionReturn_descriptor_ = file->message_type(7);
  static const int GM_VerifyVersionReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersionReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersionReturn, serverversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersionReturn, serverflag_),
  };
  GM_VerifyVersionReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_VerifyVersionReturn_descriptor_,
      GM_VerifyVersionReturn::default_instance_,
      GM_VerifyVersionReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersionReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_VerifyVersionReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_VerifyVersionReturn));
  GM_TestAccountReturn_descriptor_ = file->message_type(8);
  static const int GM_TestAccountReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountReturn, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountReturn, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountReturn, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountReturn, createtime_),
  };
  GM_TestAccountReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TestAccountReturn_descriptor_,
      GM_TestAccountReturn::default_instance_,
      GM_TestAccountReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TestAccountReturn));
  GM_BindTestAccountRequest_descriptor_ = file->message_type(9);
  static const int GM_BindTestAccountRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, testaccountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, testpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, newaccountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, newpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, platform_),
  };
  GM_BindTestAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BindTestAccountRequest_descriptor_,
      GM_BindTestAccountRequest::default_instance_,
      GM_BindTestAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BindTestAccountRequest));
  GM_BindTestAccountReturn_descriptor_ = file->message_type(10);
  static const int GM_BindTestAccountReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountReturn, result_),
  };
  GM_BindTestAccountReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BindTestAccountReturn_descriptor_,
      GM_BindTestAccountReturn::default_instance_,
      GM_BindTestAccountReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BindTestAccountReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BindTestAccountReturn));
  SP_BindTestAccountRequest_descriptor_ = file->message_type(11);
  static const int SP_BindTestAccountRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_BindTestAccountRequest, bindtestaccountrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_BindTestAccountRequest, clientip_),
  };
  SP_BindTestAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SP_BindTestAccountRequest_descriptor_,
      SP_BindTestAccountRequest::default_instance_,
      SP_BindTestAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_BindTestAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_BindTestAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SP_BindTestAccountRequest));
  GM_TestAccountRequest_descriptor_ = file->message_type(12);
  static const int GM_TestAccountRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountRequest, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountRequest, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountRequest, deviceid_),
  };
  GM_TestAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TestAccountRequest_descriptor_,
      GM_TestAccountRequest::default_instance_,
      GM_TestAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TestAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TestAccountRequest));
  GM_RecordAccountInfo_descriptor_ = file->message_type(13);
  static const int GM_RecordAccountInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, userpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, userkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, channel_),
  };
  GM_RecordAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RecordAccountInfo_descriptor_,
      GM_RecordAccountInfo::default_instance_,
      GM_RecordAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RecordAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RecordAccountInfo));
  GM_AccountOPEvent_descriptor_ = file->message_type(14);
  static const int GM_AccountOPEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountOPEvent, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountOPEvent, device_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountOPEvent, accountloginfo_),
  };
  GM_AccountOPEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AccountOPEvent_descriptor_,
      GM_AccountOPEvent::default_instance_,
      GM_AccountOPEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountOPEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AccountOPEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AccountOPEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountLog_descriptor_, &GM_AccountLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountRequest_descriptor_, &GM_AccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountReturn_descriptor_, &GM_AccountReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountCreate_descriptor_, &GM_AccountCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountCreateReturn_descriptor_, &GM_AccountCreateReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountExistRequest_descriptor_, &GM_AccountExistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_VerifyVersion_descriptor_, &GM_VerifyVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_VerifyVersionReturn_descriptor_, &GM_VerifyVersionReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TestAccountReturn_descriptor_, &GM_TestAccountReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BindTestAccountRequest_descriptor_, &GM_BindTestAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BindTestAccountReturn_descriptor_, &GM_BindTestAccountReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SP_BindTestAccountRequest_descriptor_, &SP_BindTestAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TestAccountRequest_descriptor_, &GM_TestAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RecordAccountInfo_descriptor_, &GM_RecordAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AccountOPEvent_descriptor_, &GM_AccountOPEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_2etxt() {
  delete GM_AccountLog::default_instance_;
  delete GM_AccountLog_reflection_;
  delete GM_AccountRequest::default_instance_;
  delete GM_AccountRequest_reflection_;
  delete GM_AccountReturn::default_instance_;
  delete GM_AccountReturn_reflection_;
  delete GM_AccountCreate::default_instance_;
  delete GM_AccountCreate_reflection_;
  delete GM_AccountCreateReturn::default_instance_;
  delete GM_AccountCreateReturn_reflection_;
  delete GM_AccountExistRequest::default_instance_;
  delete GM_AccountExistRequest_reflection_;
  delete GM_VerifyVersion::default_instance_;
  delete GM_VerifyVersion_reflection_;
  delete GM_VerifyVersionReturn::default_instance_;
  delete GM_VerifyVersionReturn_reflection_;
  delete GM_TestAccountReturn::default_instance_;
  delete GM_TestAccountReturn_reflection_;
  delete GM_BindTestAccountRequest::default_instance_;
  delete GM_BindTestAccountRequest_reflection_;
  delete GM_BindTestAccountReturn::default_instance_;
  delete GM_BindTestAccountReturn_reflection_;
  delete SP_BindTestAccountRequest::default_instance_;
  delete SP_BindTestAccountRequest_reflection_;
  delete GM_TestAccountRequest::default_instance_;
  delete GM_TestAccountRequest_reflection_;
  delete GM_RecordAccountInfo::default_instance_;
  delete GM_RecordAccountInfo_reflection_;
  delete GM_AccountOPEvent::default_instance_;
  delete GM_AccountOPEvent_reflection_;
}

void protobuf_AddDesc_account_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013account.txt\"\267\001\n\rGM_AccountLog\022\022\n\nplatf"
    "ormID\030\001 \002(\005\022\017\n\007ditchID\030\002 \002(\t\022\017\n\007version\030"
    "\003 \002(\t\022\021\n\taccountID\030\004 \002(\005\022\022\n\nmacAddress\030\005"
    " \002(\t\022\022\n\ndeviceUUID\030\006 \002(\t\022\014\n\004idfa\030\007 \001(\t\022\022"
    "\n\ndeviceType\030\010 \001(\t\022\023\n\013networkType\030\t \001(\t\""
    "x\n\021GM_AccountRequest\022\025\n\rm_AccountName\030\001 "
    "\002(\t\022\022\n\nm_Password\030\002 \002(\t\022\020\n\010platform\030\003 \001("
    "\005\022&\n\016accountLogInfo\030\004 \002(\0132\016.GM_AccountLo"
    "g\"\346\001\n\020GM_AccountReturn\022\020\n\010m_Result\030\001 \002(\005"
    "\022\023\n\013m_AccountID\030\002 \002(\005\022\021\n\tm_RandStr\030\003 \002(\t"
    "\022\033\n\023m_lastloginServerID\030\004 \001(\005\022\034\n\024m_lastl"
    "oginServerID2\030\005 \001(\005\022\036\n\026m_lastloginServer"
    "State\030\006 \001(\005\022\035\n\025m_lastloginServerName\030\007 \001"
    "(\t\022\036\n\026m_lastloginServerName2\030\010 \001(\t\"|\n\020GM"
    "_AccountCreate\022\025\n\rm_AccountName\030\001 \002(\t\022\022\n"
    "\nm_Password\030\002 \002(\t\022&\n\016accountLogInfo\030\003 \002("
    "\0132\016.GM_AccountLog\022\025\n\rm_activatekey\030\004 \001(\t"
    "\"j\n\026GM_AccountCreateReturn\022\020\n\010m_Result\030\001"
    " \002(\005\022\023\n\013m_AccountID\030\002 \002(\005\022\025\n\rm_AccountNa"
    "me\030\003 \002(\t\022\022\n\nm_Password\030\004 \002(\t\"/\n\026GM_Accou"
    "ntExistRequest\022\025\n\rm_AccountName\030\001 \002(\t\"#\n"
    "\020GM_VerifyVersion\022\017\n\007version\030\001 \002(\t\"S\n\026GM"
    "_VerifyVersionReturn\022\016\n\006result\030\001 \002(\005\022\025\n\r"
    "serverversion\030\002 \002(\t\022\022\n\nserverFlag\030\003 \001(\005\""
    "f\n\024GM_TestAccountReturn\022\023\n\013accountName\030\001"
    " \002(\t\022\020\n\010password\030\002 \002(\t\022\023\n\013accountType\030\003 "
    "\001(\005\022\022\n\ncreateTime\030\004 \001(\005\"\211\001\n\031GM_BindTestA"
    "ccountRequest\022\027\n\017testAccountName\030\001 \002(\t\022\024"
    "\n\014testPassword\030\002 \002(\t\022\026\n\016newAccountName\030\003"
    " \002(\t\022\023\n\013newPassword\030\004 \002(\t\022\020\n\010platform\030\005 "
    "\002(\t\"*\n\030GM_BindTestAccountReturn\022\016\n\006resul"
    "t\030\001 \002(\005\"i\n\031SP_BindTestAccountRequest\022:\n\026"
    "bindTestAccountRequest\030\001 \002(\0132\032.GM_BindTe"
    "stAccountRequest\022\020\n\010clientIP\030\002 \002(\t\"T\n\025GM"
    "_TestAccountRequest\022\016\n\006result\030\001 \002(\005\022\014\n\004i"
    "dfa\030\002 \001(\t\022\013\n\003mac\030\003 \001(\t\022\020\n\010deviceid\030\004 \001(\t"
    "\"r\n\024GM_RecordAccountInfo\022\020\n\010username\030\001 \002"
    "(\t\022\024\n\014userpassword\030\002 \002(\t\022\017\n\007userkey\030\003 \002("
    "\t\022\020\n\010platform\030\004 \002(\005\022\017\n\007channel\030\005 \002(\t\"a\n\021"
    "GM_AccountOPEvent\022\017\n\007op_type\030\001 \002(\005\022\023\n\013de"
    "vice_guid\030\002 \001(\t\022&\n\016accountLogInfo\030\003 \001(\0132"
    "\016.GM_AccountLog", 1655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account.txt", &protobuf_RegisterTypes);
  GM_AccountLog::default_instance_ = new GM_AccountLog();
  GM_AccountRequest::default_instance_ = new GM_AccountRequest();
  GM_AccountReturn::default_instance_ = new GM_AccountReturn();
  GM_AccountCreate::default_instance_ = new GM_AccountCreate();
  GM_AccountCreateReturn::default_instance_ = new GM_AccountCreateReturn();
  GM_AccountExistRequest::default_instance_ = new GM_AccountExistRequest();
  GM_VerifyVersion::default_instance_ = new GM_VerifyVersion();
  GM_VerifyVersionReturn::default_instance_ = new GM_VerifyVersionReturn();
  GM_TestAccountReturn::default_instance_ = new GM_TestAccountReturn();
  GM_BindTestAccountRequest::default_instance_ = new GM_BindTestAccountRequest();
  GM_BindTestAccountReturn::default_instance_ = new GM_BindTestAccountReturn();
  SP_BindTestAccountRequest::default_instance_ = new SP_BindTestAccountRequest();
  GM_TestAccountRequest::default_instance_ = new GM_TestAccountRequest();
  GM_RecordAccountInfo::default_instance_ = new GM_RecordAccountInfo();
  GM_AccountOPEvent::default_instance_ = new GM_AccountOPEvent();
  GM_AccountLog::default_instance_->InitAsDefaultInstance();
  GM_AccountRequest::default_instance_->InitAsDefaultInstance();
  GM_AccountReturn::default_instance_->InitAsDefaultInstance();
  GM_AccountCreate::default_instance_->InitAsDefaultInstance();
  GM_AccountCreateReturn::default_instance_->InitAsDefaultInstance();
  GM_AccountExistRequest::default_instance_->InitAsDefaultInstance();
  GM_VerifyVersion::default_instance_->InitAsDefaultInstance();
  GM_VerifyVersionReturn::default_instance_->InitAsDefaultInstance();
  GM_TestAccountReturn::default_instance_->InitAsDefaultInstance();
  GM_BindTestAccountRequest::default_instance_->InitAsDefaultInstance();
  GM_BindTestAccountReturn::default_instance_->InitAsDefaultInstance();
  SP_BindTestAccountRequest::default_instance_->InitAsDefaultInstance();
  GM_TestAccountRequest::default_instance_->InitAsDefaultInstance();
  GM_RecordAccountInfo::default_instance_->InitAsDefaultInstance();
  GM_AccountOPEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_2etxt {
  StaticDescriptorInitializer_account_2etxt() {
    protobuf_AddDesc_account_2etxt();
  }
} static_descriptor_initializer_account_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_AccountLog::kPlatformIDFieldNumber;
const int GM_AccountLog::kDitchIDFieldNumber;
const int GM_AccountLog::kVersionFieldNumber;
const int GM_AccountLog::kAccountIDFieldNumber;
const int GM_AccountLog::kMacAddressFieldNumber;
const int GM_AccountLog::kDeviceUUIDFieldNumber;
const int GM_AccountLog::kIdfaFieldNumber;
const int GM_AccountLog::kDeviceTypeFieldNumber;
const int GM_AccountLog::kNetworkTypeFieldNumber;
#endif  // !_MSC_VER

GM_AccountLog::GM_AccountLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountLog::InitAsDefaultInstance() {
}

GM_AccountLog::GM_AccountLog(const GM_AccountLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountLog::SharedCtor() {
  _cached_size_ = 0;
  platformid_ = 0;
  ditchid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  networktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountLog::~GM_AccountLog() {
  SharedDtor();
}

void GM_AccountLog::SharedDtor() {
  if (ditchid_ != &::google::protobuf::internal::kEmptyString) {
    delete ditchid_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (deviceuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceuuid_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (networktype_ != &::google::protobuf::internal::kEmptyString) {
    delete networktype_;
  }
  if (this != default_instance_) {
  }
}

void GM_AccountLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountLog_descriptor_;
}

const GM_AccountLog& GM_AccountLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountLog* GM_AccountLog::default_instance_ = NULL;

GM_AccountLog* GM_AccountLog::New() const {
  return new GM_AccountLog;
}

void GM_AccountLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platformid_ = 0;
    if (has_ditchid()) {
      if (ditchid_ != &::google::protobuf::internal::kEmptyString) {
        ditchid_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    accountid_ = 0;
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    if (has_deviceuuid()) {
      if (deviceuuid_ != &::google::protobuf::internal::kEmptyString) {
        deviceuuid_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_networktype()) {
      if (networktype_ != &::google::protobuf::internal::kEmptyString) {
        networktype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 platformID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
          set_has_platformid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ditchID;
        break;
      }

      // required string ditchID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ditchID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ditchid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ditchid().data(), this->ditchid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accountID;
        break;
      }

      // required int32 accountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_macAddress;
        break;
      }

      // required string macAddress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_macAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deviceUUID;
        break;
      }

      // required string deviceUUID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceuuid().data(), this->deviceuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_idfa;
        break;
      }

      // optional string idfa = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deviceType;
        break;
      }

      // optional string deviceType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_networkType;
        break;
      }

      // optional string networkType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_networkType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->networktype().data(), this->networktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 platformID = 1;
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platformid(), output);
  }

  // required string ditchID = 2;
  if (has_ditchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ditchid().data(), this->ditchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ditchid(), output);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // required int32 accountID = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->accountid(), output);
  }

  // required string macAddress = 5;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->macaddress(), output);
  }

  // required string deviceUUID = 6;
  if (has_deviceuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuuid().data(), this->deviceuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deviceuuid(), output);
  }

  // optional string idfa = 7;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->idfa(), output);
  }

  // optional string deviceType = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->devicetype(), output);
  }

  // optional string networkType = 9;
  if (has_networktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->networktype().data(), this->networktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->networktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 platformID = 1;
  if (has_platformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platformid(), target);
  }

  // required string ditchID = 2;
  if (has_ditchid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ditchid().data(), this->ditchid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ditchid(), target);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // required int32 accountID = 4;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->accountid(), target);
  }

  // required string macAddress = 5;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->macaddress(), target);
  }

  // required string deviceUUID = 6;
  if (has_deviceuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuuid().data(), this->deviceuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deviceuuid(), target);
  }

  // optional string idfa = 7;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->idfa(), target);
  }

  // optional string deviceType = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicetype(), target);
  }

  // optional string networkType = 9;
  if (has_networktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->networktype().data(), this->networktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->networktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 platformID = 1;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

    // required string ditchID = 2;
    if (has_ditchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ditchid());
    }

    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required int32 accountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // required string macAddress = 5;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }

    // required string deviceUUID = 6;
    if (has_deviceuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceuuid());
    }

    // optional string idfa = 7;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string deviceType = 8;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string networkType = 9;
    if (has_networktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->networktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountLog::MergeFrom(const GM_AccountLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
    if (from.has_ditchid()) {
      set_ditchid(from.ditchid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_deviceuuid()) {
      set_deviceuuid(from.deviceuuid());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_networktype()) {
      set_networktype(from.networktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountLog::CopyFrom(const GM_AccountLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GM_AccountLog::Swap(GM_AccountLog* other) {
  if (other != this) {
    std::swap(platformid_, other->platformid_);
    std::swap(ditchid_, other->ditchid_);
    std::swap(version_, other->version_);
    std::swap(accountid_, other->accountid_);
    std::swap(macaddress_, other->macaddress_);
    std::swap(deviceuuid_, other->deviceuuid_);
    std::swap(idfa_, other->idfa_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(networktype_, other->networktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountLog_descriptor_;
  metadata.reflection = GM_AccountLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AccountRequest::kMAccountNameFieldNumber;
const int GM_AccountRequest::kMPasswordFieldNumber;
const int GM_AccountRequest::kPlatformFieldNumber;
const int GM_AccountRequest::kAccountLogInfoFieldNumber;
#endif  // !_MSC_VER

GM_AccountRequest::GM_AccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountRequest::InitAsDefaultInstance() {
  accountloginfo_ = const_cast< ::GM_AccountLog*>(&::GM_AccountLog::default_instance());
}

GM_AccountRequest::GM_AccountRequest(const GM_AccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountRequest::SharedCtor() {
  _cached_size_ = 0;
  m_accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  accountloginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountRequest::~GM_AccountRequest() {
  SharedDtor();
}

void GM_AccountRequest::SharedDtor() {
  if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountname_;
  }
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (this != default_instance_) {
    delete accountloginfo_;
  }
}

void GM_AccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountRequest_descriptor_;
}

const GM_AccountRequest& GM_AccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountRequest* GM_AccountRequest::default_instance_ = NULL;

GM_AccountRequest* GM_AccountRequest::New() const {
  return new GM_AccountRequest;
}

void GM_AccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_accountname()) {
      if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
        m_accountname_->clear();
      }
    }
    if (has_m_password()) {
      if (m_password_ != &::google::protobuf::internal::kEmptyString) {
        m_password_->clear();
      }
    }
    platform_ = 0;
    if (has_accountloginfo()) {
      if (accountloginfo_ != NULL) accountloginfo_->::GM_AccountLog::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountname().data(), this->m_accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Password;
        break;
      }

      // required string m_Password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_password().data(), this->m_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional int32 platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_accountLogInfo;
        break;
      }

      // required .GM_AccountLog accountLogInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountLogInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountloginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_AccountName = 1;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_accountname(), output);
  }

  // required string m_Password = 2;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_password(), output);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }

  // required .GM_AccountLog accountLogInfo = 4;
  if (has_accountloginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->accountloginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_AccountName = 1;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_accountname(), target);
  }

  // required string m_Password = 2;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_password(), target);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }

  // required .GM_AccountLog accountLogInfo = 4;
  if (has_accountloginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->accountloginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_AccountName = 1;
    if (has_m_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountname());
    }

    // required string m_Password = 2;
    if (has_m_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_password());
    }

    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // required .GM_AccountLog accountLogInfo = 4;
    if (has_accountloginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountloginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountRequest::MergeFrom(const GM_AccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountname()) {
      set_m_accountname(from.m_accountname());
    }
    if (from.has_m_password()) {
      set_m_password(from.m_password());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_accountloginfo()) {
      mutable_accountloginfo()->::GM_AccountLog::MergeFrom(from.accountloginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountRequest::CopyFrom(const GM_AccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_accountloginfo()) {
    if (!this->accountloginfo().IsInitialized()) return false;
  }
  return true;
}

void GM_AccountRequest::Swap(GM_AccountRequest* other) {
  if (other != this) {
    std::swap(m_accountname_, other->m_accountname_);
    std::swap(m_password_, other->m_password_);
    std::swap(platform_, other->platform_);
    std::swap(accountloginfo_, other->accountloginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountRequest_descriptor_;
  metadata.reflection = GM_AccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AccountReturn::kMResultFieldNumber;
const int GM_AccountReturn::kMAccountIDFieldNumber;
const int GM_AccountReturn::kMRandStrFieldNumber;
const int GM_AccountReturn::kMLastloginServerIDFieldNumber;
const int GM_AccountReturn::kMLastloginServerID2FieldNumber;
const int GM_AccountReturn::kMLastloginServerStateFieldNumber;
const int GM_AccountReturn::kMLastloginServerNameFieldNumber;
const int GM_AccountReturn::kMLastloginServerName2FieldNumber;
#endif  // !_MSC_VER

GM_AccountReturn::GM_AccountReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountReturn::InitAsDefaultInstance() {
}

GM_AccountReturn::GM_AccountReturn(const GM_AccountReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountReturn::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_accountid_ = 0;
  m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lastloginserverid_ = 0;
  m_lastloginserverid2_ = 0;
  m_lastloginserverstate_ = 0;
  m_lastloginservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lastloginservername2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountReturn::~GM_AccountReturn() {
  SharedDtor();
}

void GM_AccountReturn::SharedDtor() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (m_lastloginservername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_lastloginservername_;
  }
  if (m_lastloginservername2_ != &::google::protobuf::internal::kEmptyString) {
    delete m_lastloginservername2_;
  }
  if (this != default_instance_) {
  }
}

void GM_AccountReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountReturn_descriptor_;
}

const GM_AccountReturn& GM_AccountReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountReturn* GM_AccountReturn::default_instance_ = NULL;

GM_AccountReturn* GM_AccountReturn::New() const {
  return new GM_AccountReturn;
}

void GM_AccountReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_accountid_ = 0;
    if (has_m_randstr()) {
      if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
        m_randstr_->clear();
      }
    }
    m_lastloginserverid_ = 0;
    m_lastloginserverid2_ = 0;
    m_lastloginserverstate_ = 0;
    if (has_m_lastloginservername()) {
      if (m_lastloginservername_ != &::google::protobuf::internal::kEmptyString) {
        m_lastloginservername_->clear();
      }
    }
    if (has_m_lastloginservername2()) {
      if (m_lastloginservername2_ != &::google::protobuf::internal::kEmptyString) {
        m_lastloginservername2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_AccountID;
        break;
      }

      // required int32 m_AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_RandStr;
        break;
      }

      // required string m_RandStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RandStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_randstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_randstr().data(), this->m_randstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lastloginServerID;
        break;
      }

      // optional int32 m_lastloginServerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lastloginServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastloginserverid_)));
          set_has_m_lastloginserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_lastloginServerID2;
        break;
      }

      // optional int32 m_lastloginServerID2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lastloginServerID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastloginserverid2_)));
          set_has_m_lastloginserverid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lastloginServerState;
        break;
      }

      // optional int32 m_lastloginServerState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lastloginServerState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastloginserverstate_)));
          set_has_m_lastloginserverstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_lastloginServerName;
        break;
      }

      // optional string m_lastloginServerName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_lastloginServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_lastloginservername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_lastloginservername().data(), this->m_lastloginservername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_lastloginServerName2;
        break;
      }

      // optional string m_lastloginServerName2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_lastloginServerName2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_lastloginservername2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_lastloginservername2().data(), this->m_lastloginservername2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_AccountID = 2;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_accountid(), output);
  }

  // required string m_RandStr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_randstr(), output);
  }

  // optional int32 m_lastloginServerID = 4;
  if (has_m_lastloginserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lastloginserverid(), output);
  }

  // optional int32 m_lastloginServerID2 = 5;
  if (has_m_lastloginserverid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_lastloginserverid2(), output);
  }

  // optional int32 m_lastloginServerState = 6;
  if (has_m_lastloginserverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lastloginserverstate(), output);
  }

  // optional string m_lastloginServerName = 7;
  if (has_m_lastloginservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lastloginservername().data(), this->m_lastloginservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_lastloginservername(), output);
  }

  // optional string m_lastloginServerName2 = 8;
  if (has_m_lastloginservername2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lastloginservername2().data(), this->m_lastloginservername2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_lastloginservername2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_AccountID = 2;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_accountid(), target);
  }

  // required string m_RandStr = 3;
  if (has_m_randstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_randstr().data(), this->m_randstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_randstr(), target);
  }

  // optional int32 m_lastloginServerID = 4;
  if (has_m_lastloginserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lastloginserverid(), target);
  }

  // optional int32 m_lastloginServerID2 = 5;
  if (has_m_lastloginserverid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_lastloginserverid2(), target);
  }

  // optional int32 m_lastloginServerState = 6;
  if (has_m_lastloginserverstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lastloginserverstate(), target);
  }

  // optional string m_lastloginServerName = 7;
  if (has_m_lastloginservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lastloginservername().data(), this->m_lastloginservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_lastloginservername(), target);
  }

  // optional string m_lastloginServerName2 = 8;
  if (has_m_lastloginservername2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_lastloginservername2().data(), this->m_lastloginservername2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_lastloginservername2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_AccountID = 2;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required string m_RandStr = 3;
    if (has_m_randstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_randstr());
    }

    // optional int32 m_lastloginServerID = 4;
    if (has_m_lastloginserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastloginserverid());
    }

    // optional int32 m_lastloginServerID2 = 5;
    if (has_m_lastloginserverid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastloginserverid2());
    }

    // optional int32 m_lastloginServerState = 6;
    if (has_m_lastloginserverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastloginserverstate());
    }

    // optional string m_lastloginServerName = 7;
    if (has_m_lastloginservername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_lastloginservername());
    }

    // optional string m_lastloginServerName2 = 8;
    if (has_m_lastloginservername2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_lastloginservername2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountReturn::MergeFrom(const GM_AccountReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_randstr()) {
      set_m_randstr(from.m_randstr());
    }
    if (from.has_m_lastloginserverid()) {
      set_m_lastloginserverid(from.m_lastloginserverid());
    }
    if (from.has_m_lastloginserverid2()) {
      set_m_lastloginserverid2(from.m_lastloginserverid2());
    }
    if (from.has_m_lastloginserverstate()) {
      set_m_lastloginserverstate(from.m_lastloginserverstate());
    }
    if (from.has_m_lastloginservername()) {
      set_m_lastloginservername(from.m_lastloginservername());
    }
    if (from.has_m_lastloginservername2()) {
      set_m_lastloginservername2(from.m_lastloginservername2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountReturn::CopyFrom(const GM_AccountReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_AccountReturn::Swap(GM_AccountReturn* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_randstr_, other->m_randstr_);
    std::swap(m_lastloginserverid_, other->m_lastloginserverid_);
    std::swap(m_lastloginserverid2_, other->m_lastloginserverid2_);
    std::swap(m_lastloginserverstate_, other->m_lastloginserverstate_);
    std::swap(m_lastloginservername_, other->m_lastloginservername_);
    std::swap(m_lastloginservername2_, other->m_lastloginservername2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountReturn_descriptor_;
  metadata.reflection = GM_AccountReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AccountCreate::kMAccountNameFieldNumber;
const int GM_AccountCreate::kMPasswordFieldNumber;
const int GM_AccountCreate::kAccountLogInfoFieldNumber;
const int GM_AccountCreate::kMActivatekeyFieldNumber;
#endif  // !_MSC_VER

GM_AccountCreate::GM_AccountCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountCreate::InitAsDefaultInstance() {
  accountloginfo_ = const_cast< ::GM_AccountLog*>(&::GM_AccountLog::default_instance());
}

GM_AccountCreate::GM_AccountCreate(const GM_AccountCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountCreate::SharedCtor() {
  _cached_size_ = 0;
  m_accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountloginfo_ = NULL;
  m_activatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountCreate::~GM_AccountCreate() {
  SharedDtor();
}

void GM_AccountCreate::SharedDtor() {
  if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountname_;
  }
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (m_activatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activatekey_;
  }
  if (this != default_instance_) {
    delete accountloginfo_;
  }
}

void GM_AccountCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountCreate_descriptor_;
}

const GM_AccountCreate& GM_AccountCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountCreate* GM_AccountCreate::default_instance_ = NULL;

GM_AccountCreate* GM_AccountCreate::New() const {
  return new GM_AccountCreate;
}

void GM_AccountCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_accountname()) {
      if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
        m_accountname_->clear();
      }
    }
    if (has_m_password()) {
      if (m_password_ != &::google::protobuf::internal::kEmptyString) {
        m_password_->clear();
      }
    }
    if (has_accountloginfo()) {
      if (accountloginfo_ != NULL) accountloginfo_->::GM_AccountLog::Clear();
    }
    if (has_m_activatekey()) {
      if (m_activatekey_ != &::google::protobuf::internal::kEmptyString) {
        m_activatekey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountname().data(), this->m_accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Password;
        break;
      }

      // required string m_Password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_password().data(), this->m_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountLogInfo;
        break;
      }

      // required .GM_AccountLog accountLogInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountLogInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountloginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_activatekey;
        break;
      }

      // optional string m_activatekey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activatekey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_activatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_activatekey().data(), this->m_activatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_AccountName = 1;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_accountname(), output);
  }

  // required string m_Password = 2;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_password(), output);
  }

  // required .GM_AccountLog accountLogInfo = 3;
  if (has_accountloginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accountloginfo(), output);
  }

  // optional string m_activatekey = 4;
  if (has_m_activatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activatekey().data(), this->m_activatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_activatekey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_AccountName = 1;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_accountname(), target);
  }

  // required string m_Password = 2;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_password(), target);
  }

  // required .GM_AccountLog accountLogInfo = 3;
  if (has_accountloginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accountloginfo(), target);
  }

  // optional string m_activatekey = 4;
  if (has_m_activatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activatekey().data(), this->m_activatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_activatekey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_AccountName = 1;
    if (has_m_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountname());
    }

    // required string m_Password = 2;
    if (has_m_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_password());
    }

    // required .GM_AccountLog accountLogInfo = 3;
    if (has_accountloginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountloginfo());
    }

    // optional string m_activatekey = 4;
    if (has_m_activatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_activatekey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountCreate::MergeFrom(const GM_AccountCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountname()) {
      set_m_accountname(from.m_accountname());
    }
    if (from.has_m_password()) {
      set_m_password(from.m_password());
    }
    if (from.has_accountloginfo()) {
      mutable_accountloginfo()->::GM_AccountLog::MergeFrom(from.accountloginfo());
    }
    if (from.has_m_activatekey()) {
      set_m_activatekey(from.m_activatekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountCreate::CopyFrom(const GM_AccountCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_accountloginfo()) {
    if (!this->accountloginfo().IsInitialized()) return false;
  }
  return true;
}

void GM_AccountCreate::Swap(GM_AccountCreate* other) {
  if (other != this) {
    std::swap(m_accountname_, other->m_accountname_);
    std::swap(m_password_, other->m_password_);
    std::swap(accountloginfo_, other->accountloginfo_);
    std::swap(m_activatekey_, other->m_activatekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountCreate_descriptor_;
  metadata.reflection = GM_AccountCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AccountCreateReturn::kMResultFieldNumber;
const int GM_AccountCreateReturn::kMAccountIDFieldNumber;
const int GM_AccountCreateReturn::kMAccountNameFieldNumber;
const int GM_AccountCreateReturn::kMPasswordFieldNumber;
#endif  // !_MSC_VER

GM_AccountCreateReturn::GM_AccountCreateReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountCreateReturn::InitAsDefaultInstance() {
}

GM_AccountCreateReturn::GM_AccountCreateReturn(const GM_AccountCreateReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountCreateReturn::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_accountid_ = 0;
  m_accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountCreateReturn::~GM_AccountCreateReturn() {
  SharedDtor();
}

void GM_AccountCreateReturn::SharedDtor() {
  if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountname_;
  }
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (this != default_instance_) {
  }
}

void GM_AccountCreateReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountCreateReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountCreateReturn_descriptor_;
}

const GM_AccountCreateReturn& GM_AccountCreateReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountCreateReturn* GM_AccountCreateReturn::default_instance_ = NULL;

GM_AccountCreateReturn* GM_AccountCreateReturn::New() const {
  return new GM_AccountCreateReturn;
}

void GM_AccountCreateReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_accountid_ = 0;
    if (has_m_accountname()) {
      if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
        m_accountname_->clear();
      }
    }
    if (has_m_password()) {
      if (m_password_ != &::google::protobuf::internal::kEmptyString) {
        m_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountCreateReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_AccountID;
        break;
      }

      // required int32 m_AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_AccountName;
        break;
      }

      // required string m_AccountName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_AccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountname().data(), this->m_accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Password;
        break;
      }

      // required string m_Password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_password().data(), this->m_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountCreateReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_AccountID = 2;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_accountid(), output);
  }

  // required string m_AccountName = 3;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_accountname(), output);
  }

  // required string m_Password = 4;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountCreateReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_AccountID = 2;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_accountid(), target);
  }

  // required string m_AccountName = 3;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_accountname(), target);
  }

  // required string m_Password = 4;
  if (has_m_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_password().data(), this->m_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountCreateReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_AccountID = 2;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required string m_AccountName = 3;
    if (has_m_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountname());
    }

    // required string m_Password = 4;
    if (has_m_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountCreateReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountCreateReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountCreateReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountCreateReturn::MergeFrom(const GM_AccountCreateReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_accountname()) {
      set_m_accountname(from.m_accountname());
    }
    if (from.has_m_password()) {
      set_m_password(from.m_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountCreateReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountCreateReturn::CopyFrom(const GM_AccountCreateReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountCreateReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_AccountCreateReturn::Swap(GM_AccountCreateReturn* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_accountname_, other->m_accountname_);
    std::swap(m_password_, other->m_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountCreateReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountCreateReturn_descriptor_;
  metadata.reflection = GM_AccountCreateReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AccountExistRequest::kMAccountNameFieldNumber;
#endif  // !_MSC_VER

GM_AccountExistRequest::GM_AccountExistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountExistRequest::InitAsDefaultInstance() {
}

GM_AccountExistRequest::GM_AccountExistRequest(const GM_AccountExistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountExistRequest::SharedCtor() {
  _cached_size_ = 0;
  m_accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountExistRequest::~GM_AccountExistRequest() {
  SharedDtor();
}

void GM_AccountExistRequest::SharedDtor() {
  if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountname_;
  }
  if (this != default_instance_) {
  }
}

void GM_AccountExistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountExistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountExistRequest_descriptor_;
}

const GM_AccountExistRequest& GM_AccountExistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountExistRequest* GM_AccountExistRequest::default_instance_ = NULL;

GM_AccountExistRequest* GM_AccountExistRequest::New() const {
  return new GM_AccountExistRequest;
}

void GM_AccountExistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_accountname()) {
      if (m_accountname_ != &::google::protobuf::internal::kEmptyString) {
        m_accountname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountExistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountname().data(), this->m_accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountExistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_AccountName = 1;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_accountname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountExistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_AccountName = 1;
  if (has_m_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountname().data(), this->m_accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_accountname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountExistRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_AccountName = 1;
    if (has_m_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountExistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountExistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountExistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountExistRequest::MergeFrom(const GM_AccountExistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountname()) {
      set_m_accountname(from.m_accountname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountExistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountExistRequest::CopyFrom(const GM_AccountExistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountExistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AccountExistRequest::Swap(GM_AccountExistRequest* other) {
  if (other != this) {
    std::swap(m_accountname_, other->m_accountname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountExistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountExistRequest_descriptor_;
  metadata.reflection = GM_AccountExistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_VerifyVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

GM_VerifyVersion::GM_VerifyVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_VerifyVersion::InitAsDefaultInstance() {
}

GM_VerifyVersion::GM_VerifyVersion(const GM_VerifyVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_VerifyVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_VerifyVersion::~GM_VerifyVersion() {
  SharedDtor();
}

void GM_VerifyVersion::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GM_VerifyVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_VerifyVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_VerifyVersion_descriptor_;
}

const GM_VerifyVersion& GM_VerifyVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_VerifyVersion* GM_VerifyVersion::default_instance_ = NULL;

GM_VerifyVersion* GM_VerifyVersion::New() const {
  return new GM_VerifyVersion;
}

void GM_VerifyVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_VerifyVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_VerifyVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_VerifyVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_VerifyVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_VerifyVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_VerifyVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_VerifyVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_VerifyVersion::MergeFrom(const GM_VerifyVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_VerifyVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_VerifyVersion::CopyFrom(const GM_VerifyVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_VerifyVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_VerifyVersion::Swap(GM_VerifyVersion* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_VerifyVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_VerifyVersion_descriptor_;
  metadata.reflection = GM_VerifyVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_VerifyVersionReturn::kResultFieldNumber;
const int GM_VerifyVersionReturn::kServerversionFieldNumber;
const int GM_VerifyVersionReturn::kServerFlagFieldNumber;
#endif  // !_MSC_VER

GM_VerifyVersionReturn::GM_VerifyVersionReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_VerifyVersionReturn::InitAsDefaultInstance() {
}

GM_VerifyVersionReturn::GM_VerifyVersionReturn(const GM_VerifyVersionReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_VerifyVersionReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  serverversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_VerifyVersionReturn::~GM_VerifyVersionReturn() {
  SharedDtor();
}

void GM_VerifyVersionReturn::SharedDtor() {
  if (serverversion_ != &::google::protobuf::internal::kEmptyString) {
    delete serverversion_;
  }
  if (this != default_instance_) {
  }
}

void GM_VerifyVersionReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_VerifyVersionReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_VerifyVersionReturn_descriptor_;
}

const GM_VerifyVersionReturn& GM_VerifyVersionReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_VerifyVersionReturn* GM_VerifyVersionReturn::default_instance_ = NULL;

GM_VerifyVersionReturn* GM_VerifyVersionReturn::New() const {
  return new GM_VerifyVersionReturn;
}

void GM_VerifyVersionReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_serverversion()) {
      if (serverversion_ != &::google::protobuf::internal::kEmptyString) {
        serverversion_->clear();
      }
    }
    serverflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_VerifyVersionReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverversion;
        break;
      }

      // required string serverversion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverversion().data(), this->serverversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverFlag;
        break;
      }

      // optional int32 serverFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverflag_)));
          set_has_serverflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_VerifyVersionReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string serverversion = 2;
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverversion().data(), this->serverversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverversion(), output);
  }

  // optional int32 serverFlag = 3;
  if (has_serverflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_VerifyVersionReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required string serverversion = 2;
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverversion().data(), this->serverversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverversion(), target);
  }

  // optional int32 serverFlag = 3;
  if (has_serverflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_VerifyVersionReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string serverversion = 2;
    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverversion());
    }

    // optional int32 serverFlag = 3;
    if (has_serverflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_VerifyVersionReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_VerifyVersionReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_VerifyVersionReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_VerifyVersionReturn::MergeFrom(const GM_VerifyVersionReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_serverversion()) {
      set_serverversion(from.serverversion());
    }
    if (from.has_serverflag()) {
      set_serverflag(from.serverflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_VerifyVersionReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_VerifyVersionReturn::CopyFrom(const GM_VerifyVersionReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_VerifyVersionReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_VerifyVersionReturn::Swap(GM_VerifyVersionReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(serverversion_, other->serverversion_);
    std::swap(serverflag_, other->serverflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_VerifyVersionReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_VerifyVersionReturn_descriptor_;
  metadata.reflection = GM_VerifyVersionReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TestAccountReturn::kAccountNameFieldNumber;
const int GM_TestAccountReturn::kPasswordFieldNumber;
const int GM_TestAccountReturn::kAccountTypeFieldNumber;
const int GM_TestAccountReturn::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

GM_TestAccountReturn::GM_TestAccountReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TestAccountReturn::InitAsDefaultInstance() {
}

GM_TestAccountReturn::GM_TestAccountReturn(const GM_TestAccountReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TestAccountReturn::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accounttype_ = 0;
  createtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TestAccountReturn::~GM_TestAccountReturn() {
  SharedDtor();
}

void GM_TestAccountReturn::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GM_TestAccountReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TestAccountReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TestAccountReturn_descriptor_;
}

const GM_TestAccountReturn& GM_TestAccountReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_TestAccountReturn* GM_TestAccountReturn::default_instance_ = NULL;

GM_TestAccountReturn* GM_TestAccountReturn::New() const {
  return new GM_TestAccountReturn;
}

void GM_TestAccountReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    accounttype_ = 0;
    createtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TestAccountReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string accountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountType;
        break;
      }

      // optional int32 accountType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }

      // optional int32 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TestAccountReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string accountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional int32 accountType = 3;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accounttype(), output);
  }

  // optional int32 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TestAccountReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string accountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional int32 accountType = 3;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accounttype(), target);
  }

  // optional int32 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TestAccountReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string accountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 accountType = 3;
    if (has_accounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }

    // optional int32 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TestAccountReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TestAccountReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TestAccountReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TestAccountReturn::MergeFrom(const GM_TestAccountReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TestAccountReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TestAccountReturn::CopyFrom(const GM_TestAccountReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TestAccountReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_TestAccountReturn::Swap(GM_TestAccountReturn* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(accounttype_, other->accounttype_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TestAccountReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TestAccountReturn_descriptor_;
  metadata.reflection = GM_TestAccountReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BindTestAccountRequest::kTestAccountNameFieldNumber;
const int GM_BindTestAccountRequest::kTestPasswordFieldNumber;
const int GM_BindTestAccountRequest::kNewAccountNameFieldNumber;
const int GM_BindTestAccountRequest::kNewPasswordFieldNumber;
const int GM_BindTestAccountRequest::kPlatformFieldNumber;
#endif  // !_MSC_VER

GM_BindTestAccountRequest::GM_BindTestAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BindTestAccountRequest::InitAsDefaultInstance() {
}

GM_BindTestAccountRequest::GM_BindTestAccountRequest(const GM_BindTestAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BindTestAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  testaccountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  testpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newaccountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BindTestAccountRequest::~GM_BindTestAccountRequest() {
  SharedDtor();
}

void GM_BindTestAccountRequest::SharedDtor() {
  if (testaccountname_ != &::google::protobuf::internal::kEmptyString) {
    delete testaccountname_;
  }
  if (testpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete testpassword_;
  }
  if (newaccountname_ != &::google::protobuf::internal::kEmptyString) {
    delete newaccountname_;
  }
  if (newpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete newpassword_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void GM_BindTestAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BindTestAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BindTestAccountRequest_descriptor_;
}

const GM_BindTestAccountRequest& GM_BindTestAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_BindTestAccountRequest* GM_BindTestAccountRequest::default_instance_ = NULL;

GM_BindTestAccountRequest* GM_BindTestAccountRequest::New() const {
  return new GM_BindTestAccountRequest;
}

void GM_BindTestAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_testaccountname()) {
      if (testaccountname_ != &::google::protobuf::internal::kEmptyString) {
        testaccountname_->clear();
      }
    }
    if (has_testpassword()) {
      if (testpassword_ != &::google::protobuf::internal::kEmptyString) {
        testpassword_->clear();
      }
    }
    if (has_newaccountname()) {
      if (newaccountname_ != &::google::protobuf::internal::kEmptyString) {
        newaccountname_->clear();
      }
    }
    if (has_newpassword()) {
      if (newpassword_ != &::google::protobuf::internal::kEmptyString) {
        newpassword_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BindTestAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string testAccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_testaccountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->testaccountname().data(), this->testaccountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_testPassword;
        break;
      }

      // required string testPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_testPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_testpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->testpassword().data(), this->testpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newAccountName;
        break;
      }

      // required string newAccountName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newAccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newaccountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newaccountname().data(), this->newaccountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newPassword;
        break;
      }

      // required string newPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newpassword().data(), this->newpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }

      // required string platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BindTestAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string testAccountName = 1;
  if (has_testaccountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->testaccountname().data(), this->testaccountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->testaccountname(), output);
  }

  // required string testPassword = 2;
  if (has_testpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->testpassword().data(), this->testpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->testpassword(), output);
  }

  // required string newAccountName = 3;
  if (has_newaccountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newaccountname().data(), this->newaccountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newaccountname(), output);
  }

  // required string newPassword = 4;
  if (has_newpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpassword().data(), this->newpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newpassword(), output);
  }

  // required string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BindTestAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string testAccountName = 1;
  if (has_testaccountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->testaccountname().data(), this->testaccountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->testaccountname(), target);
  }

  // required string testPassword = 2;
  if (has_testpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->testpassword().data(), this->testpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->testpassword(), target);
  }

  // required string newAccountName = 3;
  if (has_newaccountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newaccountname().data(), this->newaccountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newaccountname(), target);
  }

  // required string newPassword = 4;
  if (has_newpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpassword().data(), this->newpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newpassword(), target);
  }

  // required string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BindTestAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string testAccountName = 1;
    if (has_testaccountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->testaccountname());
    }

    // required string testPassword = 2;
    if (has_testpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->testpassword());
    }

    // required string newAccountName = 3;
    if (has_newaccountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newaccountname());
    }

    // required string newPassword = 4;
    if (has_newpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpassword());
    }

    // required string platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BindTestAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BindTestAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BindTestAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BindTestAccountRequest::MergeFrom(const GM_BindTestAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_testaccountname()) {
      set_testaccountname(from.testaccountname());
    }
    if (from.has_testpassword()) {
      set_testpassword(from.testpassword());
    }
    if (from.has_newaccountname()) {
      set_newaccountname(from.newaccountname());
    }
    if (from.has_newpassword()) {
      set_newpassword(from.newpassword());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BindTestAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BindTestAccountRequest::CopyFrom(const GM_BindTestAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BindTestAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GM_BindTestAccountRequest::Swap(GM_BindTestAccountRequest* other) {
  if (other != this) {
    std::swap(testaccountname_, other->testaccountname_);
    std::swap(testpassword_, other->testpassword_);
    std::swap(newaccountname_, other->newaccountname_);
    std::swap(newpassword_, other->newpassword_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BindTestAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BindTestAccountRequest_descriptor_;
  metadata.reflection = GM_BindTestAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BindTestAccountReturn::kResultFieldNumber;
#endif  // !_MSC_VER

GM_BindTestAccountReturn::GM_BindTestAccountReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BindTestAccountReturn::InitAsDefaultInstance() {
}

GM_BindTestAccountReturn::GM_BindTestAccountReturn(const GM_BindTestAccountReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BindTestAccountReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BindTestAccountReturn::~GM_BindTestAccountReturn() {
  SharedDtor();
}

void GM_BindTestAccountReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BindTestAccountReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BindTestAccountReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BindTestAccountReturn_descriptor_;
}

const GM_BindTestAccountReturn& GM_BindTestAccountReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_BindTestAccountReturn* GM_BindTestAccountReturn::default_instance_ = NULL;

GM_BindTestAccountReturn* GM_BindTestAccountReturn::New() const {
  return new GM_BindTestAccountReturn;
}

void GM_BindTestAccountReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BindTestAccountReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BindTestAccountReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BindTestAccountReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BindTestAccountReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BindTestAccountReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BindTestAccountReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BindTestAccountReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BindTestAccountReturn::MergeFrom(const GM_BindTestAccountReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BindTestAccountReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BindTestAccountReturn::CopyFrom(const GM_BindTestAccountReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BindTestAccountReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BindTestAccountReturn::Swap(GM_BindTestAccountReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BindTestAccountReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BindTestAccountReturn_descriptor_;
  metadata.reflection = GM_BindTestAccountReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SP_BindTestAccountRequest::kBindTestAccountRequestFieldNumber;
const int SP_BindTestAccountRequest::kClientIPFieldNumber;
#endif  // !_MSC_VER

SP_BindTestAccountRequest::SP_BindTestAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SP_BindTestAccountRequest::InitAsDefaultInstance() {
  bindtestaccountrequest_ = const_cast< ::GM_BindTestAccountRequest*>(&::GM_BindTestAccountRequest::default_instance());
}

SP_BindTestAccountRequest::SP_BindTestAccountRequest(const SP_BindTestAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SP_BindTestAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  bindtestaccountrequest_ = NULL;
  clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SP_BindTestAccountRequest::~SP_BindTestAccountRequest() {
  SharedDtor();
}

void SP_BindTestAccountRequest::SharedDtor() {
  if (clientip_ != &::google::protobuf::internal::kEmptyString) {
    delete clientip_;
  }
  if (this != default_instance_) {
    delete bindtestaccountrequest_;
  }
}

void SP_BindTestAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SP_BindTestAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SP_BindTestAccountRequest_descriptor_;
}

const SP_BindTestAccountRequest& SP_BindTestAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

SP_BindTestAccountRequest* SP_BindTestAccountRequest::default_instance_ = NULL;

SP_BindTestAccountRequest* SP_BindTestAccountRequest::New() const {
  return new SP_BindTestAccountRequest;
}

void SP_BindTestAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bindtestaccountrequest()) {
      if (bindtestaccountrequest_ != NULL) bindtestaccountrequest_->::GM_BindTestAccountRequest::Clear();
    }
    if (has_clientip()) {
      if (clientip_ != &::google::protobuf::internal::kEmptyString) {
        clientip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SP_BindTestAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GM_BindTestAccountRequest bindTestAccountRequest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindtestaccountrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientIP;
        break;
      }

      // required string clientIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientip().data(), this->clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SP_BindTestAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GM_BindTestAccountRequest bindTestAccountRequest = 1;
  if (has_bindtestaccountrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bindtestaccountrequest(), output);
  }

  // required string clientIP = 2;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SP_BindTestAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GM_BindTestAccountRequest bindTestAccountRequest = 1;
  if (has_bindtestaccountrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bindtestaccountrequest(), target);
  }

  // required string clientIP = 2;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SP_BindTestAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GM_BindTestAccountRequest bindTestAccountRequest = 1;
    if (has_bindtestaccountrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindtestaccountrequest());
    }

    // required string clientIP = 2;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SP_BindTestAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SP_BindTestAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SP_BindTestAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SP_BindTestAccountRequest::MergeFrom(const SP_BindTestAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bindtestaccountrequest()) {
      mutable_bindtestaccountrequest()->::GM_BindTestAccountRequest::MergeFrom(from.bindtestaccountrequest());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SP_BindTestAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SP_BindTestAccountRequest::CopyFrom(const SP_BindTestAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SP_BindTestAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_bindtestaccountrequest()) {
    if (!this->bindtestaccountrequest().IsInitialized()) return false;
  }
  return true;
}

void SP_BindTestAccountRequest::Swap(SP_BindTestAccountRequest* other) {
  if (other != this) {
    std::swap(bindtestaccountrequest_, other->bindtestaccountrequest_);
    std::swap(clientip_, other->clientip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SP_BindTestAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SP_BindTestAccountRequest_descriptor_;
  metadata.reflection = SP_BindTestAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TestAccountRequest::kResultFieldNumber;
const int GM_TestAccountRequest::kIdfaFieldNumber;
const int GM_TestAccountRequest::kMacFieldNumber;
const int GM_TestAccountRequest::kDeviceidFieldNumber;
#endif  // !_MSC_VER

GM_TestAccountRequest::GM_TestAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TestAccountRequest::InitAsDefaultInstance() {
}

GM_TestAccountRequest::GM_TestAccountRequest(const GM_TestAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TestAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TestAccountRequest::~GM_TestAccountRequest() {
  SharedDtor();
}

void GM_TestAccountRequest::SharedDtor() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void GM_TestAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TestAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TestAccountRequest_descriptor_;
}

const GM_TestAccountRequest& GM_TestAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_TestAccountRequest* GM_TestAccountRequest::default_instance_ = NULL;

GM_TestAccountRequest* GM_TestAccountRequest::New() const {
  return new GM_TestAccountRequest;
}

void GM_TestAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TestAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idfa;
        break;
      }

      // optional string idfa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mac;
        break;
      }

      // optional string mac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceid;
        break;
      }

      // optional string deviceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TestAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idfa(), output);
  }

  // optional string mac = 3;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mac(), output);
  }

  // optional string deviceid = 4;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TestAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idfa(), target);
  }

  // optional string mac = 3;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mac(), target);
  }

  // optional string deviceid = 4;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TestAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string idfa = 2;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string mac = 3;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string deviceid = 4;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TestAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TestAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TestAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TestAccountRequest::MergeFrom(const GM_TestAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TestAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TestAccountRequest::CopyFrom(const GM_TestAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TestAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TestAccountRequest::Swap(GM_TestAccountRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(idfa_, other->idfa_);
    std::swap(mac_, other->mac_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TestAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TestAccountRequest_descriptor_;
  metadata.reflection = GM_TestAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RecordAccountInfo::kUsernameFieldNumber;
const int GM_RecordAccountInfo::kUserpasswordFieldNumber;
const int GM_RecordAccountInfo::kUserkeyFieldNumber;
const int GM_RecordAccountInfo::kPlatformFieldNumber;
const int GM_RecordAccountInfo::kChannelFieldNumber;
#endif  // !_MSC_VER

GM_RecordAccountInfo::GM_RecordAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RecordAccountInfo::InitAsDefaultInstance() {
}

GM_RecordAccountInfo::GM_RecordAccountInfo(const GM_RecordAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RecordAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RecordAccountInfo::~GM_RecordAccountInfo() {
  SharedDtor();
}

void GM_RecordAccountInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete userpassword_;
  }
  if (userkey_ != &::google::protobuf::internal::kEmptyString) {
    delete userkey_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void GM_RecordAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RecordAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RecordAccountInfo_descriptor_;
}

const GM_RecordAccountInfo& GM_RecordAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_RecordAccountInfo* GM_RecordAccountInfo::default_instance_ = NULL;

GM_RecordAccountInfo* GM_RecordAccountInfo::New() const {
  return new GM_RecordAccountInfo;
}

void GM_RecordAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpassword()) {
      if (userpassword_ != &::google::protobuf::internal::kEmptyString) {
        userpassword_->clear();
      }
    }
    if (has_userkey()) {
      if (userkey_ != &::google::protobuf::internal::kEmptyString) {
        userkey_->clear();
      }
    }
    platform_ = 0;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RecordAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userpassword;
        break;
      }

      // required string userpassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userpassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpassword().data(), this->userpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userkey;
        break;
      }

      // required string userkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userkey().data(), this->userkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform;
        break;
      }

      // required int32 platform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // required string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RecordAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string userpassword = 2;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpassword().data(), this->userpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userpassword(), output);
  }

  // required string userkey = 3;
  if (has_userkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userkey().data(), this->userkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userkey(), output);
  }

  // required int32 platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platform(), output);
  }

  // required string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RecordAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string userpassword = 2;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpassword().data(), this->userpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpassword(), target);
  }

  // required string userkey = 3;
  if (has_userkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userkey().data(), this->userkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userkey(), target);
  }

  // required int32 platform = 4;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platform(), target);
  }

  // required string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RecordAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string userpassword = 2;
    if (has_userpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpassword());
    }

    // required string userkey = 3;
    if (has_userkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userkey());
    }

    // required int32 platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // required string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RecordAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RecordAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RecordAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RecordAccountInfo::MergeFrom(const GM_RecordAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpassword()) {
      set_userpassword(from.userpassword());
    }
    if (from.has_userkey()) {
      set_userkey(from.userkey());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RecordAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RecordAccountInfo::CopyFrom(const GM_RecordAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RecordAccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GM_RecordAccountInfo::Swap(GM_RecordAccountInfo* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(userpassword_, other->userpassword_);
    std::swap(userkey_, other->userkey_);
    std::swap(platform_, other->platform_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RecordAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RecordAccountInfo_descriptor_;
  metadata.reflection = GM_RecordAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AccountOPEvent::kOpTypeFieldNumber;
const int GM_AccountOPEvent::kDeviceGuidFieldNumber;
const int GM_AccountOPEvent::kAccountLogInfoFieldNumber;
#endif  // !_MSC_VER

GM_AccountOPEvent::GM_AccountOPEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AccountOPEvent::InitAsDefaultInstance() {
  accountloginfo_ = const_cast< ::GM_AccountLog*>(&::GM_AccountLog::default_instance());
}

GM_AccountOPEvent::GM_AccountOPEvent(const GM_AccountOPEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AccountOPEvent::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  device_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountloginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AccountOPEvent::~GM_AccountOPEvent() {
  SharedDtor();
}

void GM_AccountOPEvent::SharedDtor() {
  if (device_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete device_guid_;
  }
  if (this != default_instance_) {
    delete accountloginfo_;
  }
}

void GM_AccountOPEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AccountOPEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AccountOPEvent_descriptor_;
}

const GM_AccountOPEvent& GM_AccountOPEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2etxt();
  return *default_instance_;
}

GM_AccountOPEvent* GM_AccountOPEvent::default_instance_ = NULL;

GM_AccountOPEvent* GM_AccountOPEvent::New() const {
  return new GM_AccountOPEvent;
}

void GM_AccountOPEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    if (has_device_guid()) {
      if (device_guid_ != &::google::protobuf::internal::kEmptyString) {
        device_guid_->clear();
      }
    }
    if (has_accountloginfo()) {
      if (accountloginfo_ != NULL) accountloginfo_->::GM_AccountLog::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AccountOPEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_guid;
        break;
      }

      // optional string device_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_guid().data(), this->device_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accountLogInfo;
        break;
      }

      // optional .GM_AccountLog accountLogInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountLogInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountloginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AccountOPEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_type(), output);
  }

  // optional string device_guid = 2;
  if (has_device_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_guid().data(), this->device_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_guid(), output);
  }

  // optional .GM_AccountLog accountLogInfo = 3;
  if (has_accountloginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accountloginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AccountOPEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_type(), target);
  }

  // optional string device_guid = 2;
  if (has_device_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_guid().data(), this->device_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_guid(), target);
  }

  // optional .GM_AccountLog accountLogInfo = 3;
  if (has_accountloginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accountloginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AccountOPEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }

    // optional string device_guid = 2;
    if (has_device_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_guid());
    }

    // optional .GM_AccountLog accountLogInfo = 3;
    if (has_accountloginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountloginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AccountOPEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AccountOPEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AccountOPEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AccountOPEvent::MergeFrom(const GM_AccountOPEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_device_guid()) {
      set_device_guid(from.device_guid());
    }
    if (from.has_accountloginfo()) {
      mutable_accountloginfo()->::GM_AccountLog::MergeFrom(from.accountloginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AccountOPEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AccountOPEvent::CopyFrom(const GM_AccountOPEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AccountOPEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_accountloginfo()) {
    if (!this->accountloginfo().IsInitialized()) return false;
  }
  return true;
}

void GM_AccountOPEvent::Swap(GM_AccountOPEvent* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(device_guid_, other->device_guid_);
    std::swap(accountloginfo_, other->accountloginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AccountOPEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AccountOPEvent_descriptor_;
  metadata.reflection = GM_AccountOPEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
