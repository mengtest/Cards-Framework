// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vip.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Vip_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Vip_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetVipExp_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetVipExp_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetReward_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetReward_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetReward_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetReward_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetReward_Detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetReward_Detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetVipReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetVipReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GetVipReward_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GetVipReward_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vip_2etxt() {
  protobuf_AddDesc_vip_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vip.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Vip_Return_descriptor_ = file->message_type(0);
  static const int GM_Vip_Return_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_nowexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_nextexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, m_reward_),
  };
  GM_Vip_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Vip_Return_descriptor_,
      GM_Vip_Return::default_instance_,
      GM_Vip_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Vip_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Vip_Return));
  GM_GetVipExp_Return_descriptor_ = file->message_type(1);
  static const int GM_GetVipExp_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipExp_Return, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipExp_Return, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipExp_Return, m_state_),
  };
  GM_GetVipExp_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetVipExp_Return_descriptor_,
      GM_GetVipExp_Return::default_instance_,
      GM_GetVipExp_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipExp_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipExp_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetVipExp_Return));
  GM_GetReward_Return_descriptor_ = file->message_type(2);
  static const int GM_GetReward_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Return, m_data_),
  };
  GM_GetReward_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetReward_Return_descriptor_,
      GM_GetReward_Return::default_instance_,
      GM_GetReward_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetReward_Return));
  GM_GetReward_Data_descriptor_ = file->message_type(3);
  static const int GM_GetReward_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Data, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Data, m_detail_),
  };
  GM_GetReward_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetReward_Data_descriptor_,
      GM_GetReward_Data::default_instance_,
      GM_GetReward_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetReward_Data));
  GM_GetReward_Detail_descriptor_ = file->message_type(4);
  static const int GM_GetReward_Detail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Detail, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Detail, m_num_),
  };
  GM_GetReward_Detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetReward_Detail_descriptor_,
      GM_GetReward_Detail::default_instance_,
      GM_GetReward_Detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetReward_Detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetReward_Detail));
  GM_GetVipReward_descriptor_ = file->message_type(5);
  static const int GM_GetVipReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward, m_vip_),
  };
  GM_GetVipReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetVipReward_descriptor_,
      GM_GetVipReward::default_instance_,
      GM_GetVipReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetVipReward));
  GM_GetVipReward_return_descriptor_ = file->message_type(6);
  static const int GM_GetVipReward_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward_return, m_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward_return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward_return, m_detail_),
  };
  GM_GetVipReward_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GetVipReward_return_descriptor_,
      GM_GetVipReward_return::default_instance_,
      GM_GetVipReward_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GetVipReward_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GetVipReward_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vip_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Vip_Return_descriptor_, &GM_Vip_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetVipExp_Return_descriptor_, &GM_GetVipExp_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetReward_Return_descriptor_, &GM_GetReward_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetReward_Data_descriptor_, &GM_GetReward_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetReward_Detail_descriptor_, &GM_GetReward_Detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetVipReward_descriptor_, &GM_GetVipReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GetVipReward_return_descriptor_, &GM_GetVipReward_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vip_2etxt() {
  delete GM_Vip_Return::default_instance_;
  delete GM_Vip_Return_reflection_;
  delete GM_GetVipExp_Return::default_instance_;
  delete GM_GetVipExp_Return_reflection_;
  delete GM_GetReward_Return::default_instance_;
  delete GM_GetReward_Return_reflection_;
  delete GM_GetReward_Data::default_instance_;
  delete GM_GetReward_Data_reflection_;
  delete GM_GetReward_Detail::default_instance_;
  delete GM_GetReward_Detail_reflection_;
  delete GM_GetVipReward::default_instance_;
  delete GM_GetVipReward_reflection_;
  delete GM_GetVipReward_return::default_instance_;
  delete GM_GetVipReward_return_reflection_;
}

void protobuf_AddDesc_vip_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007vip.txt\"\236\001\n\rGM_Vip_Return\022\020\n\010m_roleid\030"
    "\001 \001(\005\022\022\n\nm_viplevel\030\002 \001(\005\022\020\n\010m_vipexp\030\003 "
    "\001(\005\022\r\n\005m_day\030\004 \001(\005\022\020\n\010m_nowexp\030\005 \001(\005\022\021\n\t"
    "m_nextexp\030\006 \001(\005\022\017\n\007m_state\030\007 \001(\005\022\020\n\010m_re"
    "ward\030\010 \001(\t\"G\n\023GM_GetVipExp_Return\022\020\n\010m_r"
    "oleid\030\001 \001(\005\022\r\n\005m_exp\030\002 \001(\005\022\017\n\007m_state\030\003 "
    "\001(\005\"9\n\023GM_GetReward_Return\022\"\n\006m_data\030\001 \003"
    "(\0132\022.GM_GetReward_Data\"O\n\021GM_GetReward_D"
    "ata\022\022\n\nm_viplevel\030\001 \002(\005\022&\n\010m_detail\030\002 \003("
    "\0132\024.GM_GetReward_Detail\"5\n\023GM_GetReward_"
    "Detail\022\017\n\007m_objid\030\001 \002(\005\022\r\n\005m_num\030\002 \001(\005\" "
    "\n\017GM_GetVipReward\022\r\n\005m_vip\030\001 \002(\005\"a\n\026GM_G"
    "etVipReward_return\022\r\n\005m_vip\030\001 \001(\005\022\020\n\010m_r"
    "esult\030\002 \001(\005\022&\n\010m_detail\030\003 \003(\0132\024.GM_GetRe"
    "ward_Detail", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vip.txt", &protobuf_RegisterTypes);
  GM_Vip_Return::default_instance_ = new GM_Vip_Return();
  GM_GetVipExp_Return::default_instance_ = new GM_GetVipExp_Return();
  GM_GetReward_Return::default_instance_ = new GM_GetReward_Return();
  GM_GetReward_Data::default_instance_ = new GM_GetReward_Data();
  GM_GetReward_Detail::default_instance_ = new GM_GetReward_Detail();
  GM_GetVipReward::default_instance_ = new GM_GetVipReward();
  GM_GetVipReward_return::default_instance_ = new GM_GetVipReward_return();
  GM_Vip_Return::default_instance_->InitAsDefaultInstance();
  GM_GetVipExp_Return::default_instance_->InitAsDefaultInstance();
  GM_GetReward_Return::default_instance_->InitAsDefaultInstance();
  GM_GetReward_Data::default_instance_->InitAsDefaultInstance();
  GM_GetReward_Detail::default_instance_->InitAsDefaultInstance();
  GM_GetVipReward::default_instance_->InitAsDefaultInstance();
  GM_GetVipReward_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vip_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vip_2etxt {
  StaticDescriptorInitializer_vip_2etxt() {
    protobuf_AddDesc_vip_2etxt();
  }
} static_descriptor_initializer_vip_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Vip_Return::kMRoleidFieldNumber;
const int GM_Vip_Return::kMViplevelFieldNumber;
const int GM_Vip_Return::kMVipexpFieldNumber;
const int GM_Vip_Return::kMDayFieldNumber;
const int GM_Vip_Return::kMNowexpFieldNumber;
const int GM_Vip_Return::kMNextexpFieldNumber;
const int GM_Vip_Return::kMStateFieldNumber;
const int GM_Vip_Return::kMRewardFieldNumber;
#endif  // !_MSC_VER

GM_Vip_Return::GM_Vip_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Vip_Return::InitAsDefaultInstance() {
}

GM_Vip_Return::GM_Vip_Return(const GM_Vip_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Vip_Return::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_viplevel_ = 0;
  m_vipexp_ = 0;
  m_day_ = 0;
  m_nowexp_ = 0;
  m_nextexp_ = 0;
  m_state_ = 0;
  m_reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Vip_Return::~GM_Vip_Return() {
  SharedDtor();
}

void GM_Vip_Return::SharedDtor() {
  if (m_reward_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reward_;
  }
  if (this != default_instance_) {
  }
}

void GM_Vip_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Vip_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Vip_Return_descriptor_;
}

const GM_Vip_Return& GM_Vip_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_Vip_Return* GM_Vip_Return::default_instance_ = NULL;

GM_Vip_Return* GM_Vip_Return::New() const {
  return new GM_Vip_Return;
}

void GM_Vip_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_viplevel_ = 0;
    m_vipexp_ = 0;
    m_day_ = 0;
    m_nowexp_ = 0;
    m_nextexp_ = 0;
    m_state_ = 0;
    if (has_m_reward()) {
      if (m_reward_ != &::google::protobuf::internal::kEmptyString) {
        m_reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Vip_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_vipexp;
        break;
      }

      // optional int32 m_vipexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vipexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vipexp_)));
          set_has_m_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_day;
        break;
      }

      // optional int32 m_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_day_)));
          set_has_m_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_nowexp;
        break;
      }

      // optional int32 m_nowexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nowexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nowexp_)));
          set_has_m_nowexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_nextexp;
        break;
      }

      // optional int32 m_nextexp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nextexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nextexp_)));
          set_has_m_nextexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_reward;
        break;
      }

      // optional string m_reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_reward().data(), this->m_reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Vip_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_viplevel = 2;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_viplevel(), output);
  }

  // optional int32 m_vipexp = 3;
  if (has_m_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_vipexp(), output);
  }

  // optional int32 m_day = 4;
  if (has_m_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_day(), output);
  }

  // optional int32 m_nowexp = 5;
  if (has_m_nowexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_nowexp(), output);
  }

  // optional int32 m_nextexp = 6;
  if (has_m_nextexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_nextexp(), output);
  }

  // optional int32 m_state = 7;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_state(), output);
  }

  // optional string m_reward = 8;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reward().data(), this->m_reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Vip_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_viplevel = 2;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_viplevel(), target);
  }

  // optional int32 m_vipexp = 3;
  if (has_m_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_vipexp(), target);
  }

  // optional int32 m_day = 4;
  if (has_m_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_day(), target);
  }

  // optional int32 m_nowexp = 5;
  if (has_m_nowexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_nowexp(), target);
  }

  // optional int32 m_nextexp = 6;
  if (has_m_nextexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_nextexp(), target);
  }

  // optional int32 m_state = 7;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_state(), target);
  }

  // optional string m_reward = 8;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reward().data(), this->m_reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Vip_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_viplevel = 2;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional int32 m_vipexp = 3;
    if (has_m_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vipexp());
    }

    // optional int32 m_day = 4;
    if (has_m_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_day());
    }

    // optional int32 m_nowexp = 5;
    if (has_m_nowexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nowexp());
    }

    // optional int32 m_nextexp = 6;
    if (has_m_nextexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nextexp());
    }

    // optional int32 m_state = 7;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional string m_reward = 8;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Vip_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Vip_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Vip_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Vip_Return::MergeFrom(const GM_Vip_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_vipexp()) {
      set_m_vipexp(from.m_vipexp());
    }
    if (from.has_m_day()) {
      set_m_day(from.m_day());
    }
    if (from.has_m_nowexp()) {
      set_m_nowexp(from.m_nowexp());
    }
    if (from.has_m_nextexp()) {
      set_m_nextexp(from.m_nextexp());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Vip_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Vip_Return::CopyFrom(const GM_Vip_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Vip_Return::IsInitialized() const {

  return true;
}

void GM_Vip_Return::Swap(GM_Vip_Return* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_vipexp_, other->m_vipexp_);
    std::swap(m_day_, other->m_day_);
    std::swap(m_nowexp_, other->m_nowexp_);
    std::swap(m_nextexp_, other->m_nextexp_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Vip_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Vip_Return_descriptor_;
  metadata.reflection = GM_Vip_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetVipExp_Return::kMRoleidFieldNumber;
const int GM_GetVipExp_Return::kMExpFieldNumber;
const int GM_GetVipExp_Return::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_GetVipExp_Return::GM_GetVipExp_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetVipExp_Return::InitAsDefaultInstance() {
}

GM_GetVipExp_Return::GM_GetVipExp_Return(const GM_GetVipExp_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetVipExp_Return::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_exp_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetVipExp_Return::~GM_GetVipExp_Return() {
  SharedDtor();
}

void GM_GetVipExp_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetVipExp_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetVipExp_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetVipExp_Return_descriptor_;
}

const GM_GetVipExp_Return& GM_GetVipExp_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_GetVipExp_Return* GM_GetVipExp_Return::default_instance_ = NULL;

GM_GetVipExp_Return* GM_GetVipExp_Return::New() const {
  return new GM_GetVipExp_Return;
}

void GM_GetVipExp_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_exp_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetVipExp_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetVipExp_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetVipExp_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetVipExp_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetVipExp_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetVipExp_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetVipExp_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetVipExp_Return::MergeFrom(const GM_GetVipExp_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetVipExp_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetVipExp_Return::CopyFrom(const GM_GetVipExp_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetVipExp_Return::IsInitialized() const {

  return true;
}

void GM_GetVipExp_Return::Swap(GM_GetVipExp_Return* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetVipExp_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetVipExp_Return_descriptor_;
  metadata.reflection = GM_GetVipExp_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetReward_Return::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_GetReward_Return::GM_GetReward_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetReward_Return::InitAsDefaultInstance() {
}

GM_GetReward_Return::GM_GetReward_Return(const GM_GetReward_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetReward_Return::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetReward_Return::~GM_GetReward_Return() {
  SharedDtor();
}

void GM_GetReward_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetReward_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetReward_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetReward_Return_descriptor_;
}

const GM_GetReward_Return& GM_GetReward_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_GetReward_Return* GM_GetReward_Return::default_instance_ = NULL;

GM_GetReward_Return* GM_GetReward_Return::New() const {
  return new GM_GetReward_Return;
}

void GM_GetReward_Return::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetReward_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_GetReward_Data m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetReward_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_GetReward_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetReward_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_GetReward_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetReward_Return::ByteSize() const {
  int total_size = 0;

  // repeated .GM_GetReward_Data m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetReward_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetReward_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetReward_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetReward_Return::MergeFrom(const GM_GetReward_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetReward_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetReward_Return::CopyFrom(const GM_GetReward_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetReward_Return::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GetReward_Return::Swap(GM_GetReward_Return* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetReward_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetReward_Return_descriptor_;
  metadata.reflection = GM_GetReward_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetReward_Data::kMViplevelFieldNumber;
const int GM_GetReward_Data::kMDetailFieldNumber;
#endif  // !_MSC_VER

GM_GetReward_Data::GM_GetReward_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetReward_Data::InitAsDefaultInstance() {
}

GM_GetReward_Data::GM_GetReward_Data(const GM_GetReward_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetReward_Data::SharedCtor() {
  _cached_size_ = 0;
  m_viplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetReward_Data::~GM_GetReward_Data() {
  SharedDtor();
}

void GM_GetReward_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetReward_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetReward_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetReward_Data_descriptor_;
}

const GM_GetReward_Data& GM_GetReward_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_GetReward_Data* GM_GetReward_Data::default_instance_ = NULL;

GM_GetReward_Data* GM_GetReward_Data::New() const {
  return new GM_GetReward_Data;
}

void GM_GetReward_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_viplevel_ = 0;
  }
  m_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetReward_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_viplevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_detail;
        break;
      }

      // repeated .GM_GetReward_Detail m_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetReward_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_viplevel = 1;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_viplevel(), output);
  }

  // repeated .GM_GetReward_Detail m_detail = 2;
  for (int i = 0; i < this->m_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetReward_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_viplevel = 1;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_viplevel(), target);
  }

  // repeated .GM_GetReward_Detail m_detail = 2;
  for (int i = 0; i < this->m_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetReward_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_viplevel = 1;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

  }
  // repeated .GM_GetReward_Detail m_detail = 2;
  total_size += 1 * this->m_detail_size();
  for (int i = 0; i < this->m_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetReward_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetReward_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetReward_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetReward_Data::MergeFrom(const GM_GetReward_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_detail_.MergeFrom(from.m_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetReward_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetReward_Data::CopyFrom(const GM_GetReward_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetReward_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_detail_size(); i++) {
    if (!this->m_detail(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GetReward_Data::Swap(GM_GetReward_Data* other) {
  if (other != this) {
    std::swap(m_viplevel_, other->m_viplevel_);
    m_detail_.Swap(&other->m_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetReward_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetReward_Data_descriptor_;
  metadata.reflection = GM_GetReward_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetReward_Detail::kMObjidFieldNumber;
const int GM_GetReward_Detail::kMNumFieldNumber;
#endif  // !_MSC_VER

GM_GetReward_Detail::GM_GetReward_Detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetReward_Detail::InitAsDefaultInstance() {
}

GM_GetReward_Detail::GM_GetReward_Detail(const GM_GetReward_Detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetReward_Detail::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetReward_Detail::~GM_GetReward_Detail() {
  SharedDtor();
}

void GM_GetReward_Detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetReward_Detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetReward_Detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetReward_Detail_descriptor_;
}

const GM_GetReward_Detail& GM_GetReward_Detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_GetReward_Detail* GM_GetReward_Detail::default_instance_ = NULL;

GM_GetReward_Detail* GM_GetReward_Detail::New() const {
  return new GM_GetReward_Detail;
}

void GM_GetReward_Detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetReward_Detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetReward_Detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // optional int32 m_num = 2;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetReward_Detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // optional int32 m_num = 2;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetReward_Detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // optional int32 m_num = 2;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetReward_Detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetReward_Detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetReward_Detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetReward_Detail::MergeFrom(const GM_GetReward_Detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetReward_Detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetReward_Detail::CopyFrom(const GM_GetReward_Detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetReward_Detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GetReward_Detail::Swap(GM_GetReward_Detail* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetReward_Detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetReward_Detail_descriptor_;
  metadata.reflection = GM_GetReward_Detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetVipReward::kMVipFieldNumber;
#endif  // !_MSC_VER

GM_GetVipReward::GM_GetVipReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetVipReward::InitAsDefaultInstance() {
}

GM_GetVipReward::GM_GetVipReward(const GM_GetVipReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetVipReward::SharedCtor() {
  _cached_size_ = 0;
  m_vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetVipReward::~GM_GetVipReward() {
  SharedDtor();
}

void GM_GetVipReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetVipReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetVipReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetVipReward_descriptor_;
}

const GM_GetVipReward& GM_GetVipReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_GetVipReward* GM_GetVipReward::default_instance_ = NULL;

GM_GetVipReward* GM_GetVipReward::New() const {
  return new GM_GetVipReward;
}

void GM_GetVipReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetVipReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_vip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetVipReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_vip = 1;
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetVipReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_vip = 1;
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetVipReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_vip = 1;
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetVipReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetVipReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetVipReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetVipReward::MergeFrom(const GM_GetVipReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetVipReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetVipReward::CopyFrom(const GM_GetVipReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetVipReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GetVipReward::Swap(GM_GetVipReward* other) {
  if (other != this) {
    std::swap(m_vip_, other->m_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetVipReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetVipReward_descriptor_;
  metadata.reflection = GM_GetVipReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GetVipReward_return::kMVipFieldNumber;
const int GM_GetVipReward_return::kMResultFieldNumber;
const int GM_GetVipReward_return::kMDetailFieldNumber;
#endif  // !_MSC_VER

GM_GetVipReward_return::GM_GetVipReward_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GetVipReward_return::InitAsDefaultInstance() {
}

GM_GetVipReward_return::GM_GetVipReward_return(const GM_GetVipReward_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GetVipReward_return::SharedCtor() {
  _cached_size_ = 0;
  m_vip_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GetVipReward_return::~GM_GetVipReward_return() {
  SharedDtor();
}

void GM_GetVipReward_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GetVipReward_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GetVipReward_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GetVipReward_return_descriptor_;
}

const GM_GetVipReward_return& GM_GetVipReward_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2etxt();
  return *default_instance_;
}

GM_GetVipReward_return* GM_GetVipReward_return::default_instance_ = NULL;

GM_GetVipReward_return* GM_GetVipReward_return::New() const {
  return new GM_GetVipReward_return;
}

void GM_GetVipReward_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_vip_ = 0;
    m_result_ = 0;
  }
  m_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GetVipReward_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_vip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_result;
        break;
      }

      // optional int32 m_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_detail;
        break;
      }

      // repeated .GM_GetReward_Detail m_detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GetVipReward_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_vip = 1;
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_vip(), output);
  }

  // optional int32 m_result = 2;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_result(), output);
  }

  // repeated .GM_GetReward_Detail m_detail = 3;
  for (int i = 0; i < this->m_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GetVipReward_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_vip = 1;
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_vip(), target);
  }

  // optional int32 m_result = 2;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_result(), target);
  }

  // repeated .GM_GetReward_Detail m_detail = 3;
  for (int i = 0; i < this->m_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GetVipReward_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_vip = 1;
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip());
    }

    // optional int32 m_result = 2;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated .GM_GetReward_Detail m_detail = 3;
  total_size += 1 * this->m_detail_size();
  for (int i = 0; i < this->m_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GetVipReward_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GetVipReward_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GetVipReward_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GetVipReward_return::MergeFrom(const GM_GetVipReward_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_detail_.MergeFrom(from.m_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GetVipReward_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GetVipReward_return::CopyFrom(const GM_GetVipReward_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GetVipReward_return::IsInitialized() const {

  for (int i = 0; i < m_detail_size(); i++) {
    if (!this->m_detail(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GetVipReward_return::Swap(GM_GetVipReward_return* other) {
  if (other != this) {
    std::swap(m_vip_, other->m_vip_);
    std::swap(m_result_, other->m_result_);
    m_detail_.Swap(&other->m_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GetVipReward_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GetVipReward_return_descriptor_;
  metadata.reflection = GM_GetVipReward_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
