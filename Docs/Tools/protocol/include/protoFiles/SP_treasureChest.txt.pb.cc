// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_treasureChest.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_treasureChest.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_TreasureChestDatabaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_TreasureChestDatabaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_TreasureChestDatabaseInfoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_TreasureChestDatabaseInfoReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5ftreasureChest_2etxt() {
  protobuf_AddDesc_SP_5ftreasureChest_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_treasureChest.txt");
  GOOGLE_CHECK(file != NULL);
  SM_TreasureChestDatabaseInfo_descriptor_ = file->message_type(0);
  static const int SM_TreasureChestDatabaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, m_nchesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, m_nfreetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, m_nstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, m_nopencount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, bronze_),
  };
  SM_TreasureChestDatabaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_TreasureChestDatabaseInfo_descriptor_,
      SM_TreasureChestDatabaseInfo::default_instance_,
      SM_TreasureChestDatabaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_TreasureChestDatabaseInfo));
  SM_TreasureChestDatabaseInfoReturn_descriptor_ = file->message_type(1);
  static const int SM_TreasureChestDatabaseInfoReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfoReturn, m_nroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfoReturn, m_ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfoReturn, m_sttreasurechestinfo_),
  };
  SM_TreasureChestDatabaseInfoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_TreasureChestDatabaseInfoReturn_descriptor_,
      SM_TreasureChestDatabaseInfoReturn::default_instance_,
      SM_TreasureChestDatabaseInfoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TreasureChestDatabaseInfoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_TreasureChestDatabaseInfoReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5ftreasureChest_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_TreasureChestDatabaseInfo_descriptor_, &SM_TreasureChestDatabaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_TreasureChestDatabaseInfoReturn_descriptor_, &SM_TreasureChestDatabaseInfoReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5ftreasureChest_2etxt() {
  delete SM_TreasureChestDatabaseInfo::default_instance_;
  delete SM_TreasureChestDatabaseInfo_reflection_;
  delete SM_TreasureChestDatabaseInfoReturn::default_instance_;
  delete SM_TreasureChestDatabaseInfoReturn_reflection_;
}

void protobuf_AddDesc_SP_5ftreasureChest_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SP_treasureChest.txt\"\206\001\n\034SM_TreasureCh"
    "estDatabaseInfo\022\024\n\014m_nChestType\030\001 \002(\005\022\024\n"
    "\014m_nFreeTimes\030\002 \001(\005\022\024\n\014m_nStartTime\030\003 \001("
    "\005\022\024\n\014m_nOpenCount\030\004 \001(\003\022\016\n\006bronze\030\005 \001(\005\""
    "\207\001\n\"SM_TreasureChestDatabaseInfoReturn\022\021"
    "\n\tm_nRoleId\030\001 \002(\005\022\020\n\010m_nCount\030\002 \001(\005\022<\n\025m"
    "_stTreasureChestInfo\030\003 \003(\0132\035.SM_Treasure"
    "ChestDatabaseInfo", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_treasureChest.txt", &protobuf_RegisterTypes);
  SM_TreasureChestDatabaseInfo::default_instance_ = new SM_TreasureChestDatabaseInfo();
  SM_TreasureChestDatabaseInfoReturn::default_instance_ = new SM_TreasureChestDatabaseInfoReturn();
  SM_TreasureChestDatabaseInfo::default_instance_->InitAsDefaultInstance();
  SM_TreasureChestDatabaseInfoReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5ftreasureChest_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5ftreasureChest_2etxt {
  StaticDescriptorInitializer_SP_5ftreasureChest_2etxt() {
    protobuf_AddDesc_SP_5ftreasureChest_2etxt();
  }
} static_descriptor_initializer_SP_5ftreasureChest_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_TreasureChestDatabaseInfo::kMNChestTypeFieldNumber;
const int SM_TreasureChestDatabaseInfo::kMNFreeTimesFieldNumber;
const int SM_TreasureChestDatabaseInfo::kMNStartTimeFieldNumber;
const int SM_TreasureChestDatabaseInfo::kMNOpenCountFieldNumber;
const int SM_TreasureChestDatabaseInfo::kBronzeFieldNumber;
#endif  // !_MSC_VER

SM_TreasureChestDatabaseInfo::SM_TreasureChestDatabaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_TreasureChestDatabaseInfo::InitAsDefaultInstance() {
}

SM_TreasureChestDatabaseInfo::SM_TreasureChestDatabaseInfo(const SM_TreasureChestDatabaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_TreasureChestDatabaseInfo::SharedCtor() {
  _cached_size_ = 0;
  m_nchesttype_ = 0;
  m_nfreetimes_ = 0;
  m_nstarttime_ = 0;
  m_nopencount_ = GOOGLE_LONGLONG(0);
  bronze_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_TreasureChestDatabaseInfo::~SM_TreasureChestDatabaseInfo() {
  SharedDtor();
}

void SM_TreasureChestDatabaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_TreasureChestDatabaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_TreasureChestDatabaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_TreasureChestDatabaseInfo_descriptor_;
}

const SM_TreasureChestDatabaseInfo& SM_TreasureChestDatabaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5ftreasureChest_2etxt();
  return *default_instance_;
}

SM_TreasureChestDatabaseInfo* SM_TreasureChestDatabaseInfo::default_instance_ = NULL;

SM_TreasureChestDatabaseInfo* SM_TreasureChestDatabaseInfo::New() const {
  return new SM_TreasureChestDatabaseInfo;
}

void SM_TreasureChestDatabaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nchesttype_ = 0;
    m_nfreetimes_ = 0;
    m_nstarttime_ = 0;
    m_nopencount_ = GOOGLE_LONGLONG(0);
    bronze_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_TreasureChestDatabaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nChestType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nchesttype_)));
          set_has_m_nchesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nFreeTimes;
        break;
      }

      // optional int32 m_nFreeTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nFreeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nfreetimes_)));
          set_has_m_nfreetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nStartTime;
        break;
      }

      // optional int32 m_nStartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nstarttime_)));
          set_has_m_nstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_nOpenCount;
        break;
      }

      // optional int64 m_nOpenCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nOpenCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_nopencount_)));
          set_has_m_nopencount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bronze;
        break;
      }

      // optional int32 bronze = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bronze:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bronze_)));
          set_has_bronze();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_TreasureChestDatabaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nChestType = 1;
  if (has_m_nchesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nchesttype(), output);
  }

  // optional int32 m_nFreeTimes = 2;
  if (has_m_nfreetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nfreetimes(), output);
  }

  // optional int32 m_nStartTime = 3;
  if (has_m_nstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nstarttime(), output);
  }

  // optional int64 m_nOpenCount = 4;
  if (has_m_nopencount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_nopencount(), output);
  }

  // optional int32 bronze = 5;
  if (has_bronze()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bronze(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_TreasureChestDatabaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nChestType = 1;
  if (has_m_nchesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nchesttype(), target);
  }

  // optional int32 m_nFreeTimes = 2;
  if (has_m_nfreetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nfreetimes(), target);
  }

  // optional int32 m_nStartTime = 3;
  if (has_m_nstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_nstarttime(), target);
  }

  // optional int64 m_nOpenCount = 4;
  if (has_m_nopencount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_nopencount(), target);
  }

  // optional int32 bronze = 5;
  if (has_bronze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bronze(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_TreasureChestDatabaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nChestType = 1;
    if (has_m_nchesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nchesttype());
    }

    // optional int32 m_nFreeTimes = 2;
    if (has_m_nfreetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nfreetimes());
    }

    // optional int32 m_nStartTime = 3;
    if (has_m_nstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nstarttime());
    }

    // optional int64 m_nOpenCount = 4;
    if (has_m_nopencount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_nopencount());
    }

    // optional int32 bronze = 5;
    if (has_bronze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bronze());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_TreasureChestDatabaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_TreasureChestDatabaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_TreasureChestDatabaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_TreasureChestDatabaseInfo::MergeFrom(const SM_TreasureChestDatabaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nchesttype()) {
      set_m_nchesttype(from.m_nchesttype());
    }
    if (from.has_m_nfreetimes()) {
      set_m_nfreetimes(from.m_nfreetimes());
    }
    if (from.has_m_nstarttime()) {
      set_m_nstarttime(from.m_nstarttime());
    }
    if (from.has_m_nopencount()) {
      set_m_nopencount(from.m_nopencount());
    }
    if (from.has_bronze()) {
      set_bronze(from.bronze());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_TreasureChestDatabaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_TreasureChestDatabaseInfo::CopyFrom(const SM_TreasureChestDatabaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_TreasureChestDatabaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_TreasureChestDatabaseInfo::Swap(SM_TreasureChestDatabaseInfo* other) {
  if (other != this) {
    std::swap(m_nchesttype_, other->m_nchesttype_);
    std::swap(m_nfreetimes_, other->m_nfreetimes_);
    std::swap(m_nstarttime_, other->m_nstarttime_);
    std::swap(m_nopencount_, other->m_nopencount_);
    std::swap(bronze_, other->bronze_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_TreasureChestDatabaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_TreasureChestDatabaseInfo_descriptor_;
  metadata.reflection = SM_TreasureChestDatabaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_TreasureChestDatabaseInfoReturn::kMNRoleIdFieldNumber;
const int SM_TreasureChestDatabaseInfoReturn::kMNCountFieldNumber;
const int SM_TreasureChestDatabaseInfoReturn::kMStTreasureChestInfoFieldNumber;
#endif  // !_MSC_VER

SM_TreasureChestDatabaseInfoReturn::SM_TreasureChestDatabaseInfoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_TreasureChestDatabaseInfoReturn::InitAsDefaultInstance() {
}

SM_TreasureChestDatabaseInfoReturn::SM_TreasureChestDatabaseInfoReturn(const SM_TreasureChestDatabaseInfoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_TreasureChestDatabaseInfoReturn::SharedCtor() {
  _cached_size_ = 0;
  m_nroleid_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_TreasureChestDatabaseInfoReturn::~SM_TreasureChestDatabaseInfoReturn() {
  SharedDtor();
}

void SM_TreasureChestDatabaseInfoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_TreasureChestDatabaseInfoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_TreasureChestDatabaseInfoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_TreasureChestDatabaseInfoReturn_descriptor_;
}

const SM_TreasureChestDatabaseInfoReturn& SM_TreasureChestDatabaseInfoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5ftreasureChest_2etxt();
  return *default_instance_;
}

SM_TreasureChestDatabaseInfoReturn* SM_TreasureChestDatabaseInfoReturn::default_instance_ = NULL;

SM_TreasureChestDatabaseInfoReturn* SM_TreasureChestDatabaseInfoReturn::New() const {
  return new SM_TreasureChestDatabaseInfoReturn;
}

void SM_TreasureChestDatabaseInfoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nroleid_ = 0;
    m_ncount_ = 0;
  }
  m_sttreasurechestinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_TreasureChestDatabaseInfoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRoleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroleid_)));
          set_has_m_nroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nCount;
        break;
      }

      // optional int32 m_nCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_stTreasureChestInfo;
        break;
      }

      // repeated .SM_TreasureChestDatabaseInfo m_stTreasureChestInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_stTreasureChestInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_sttreasurechestinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_stTreasureChestInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_TreasureChestDatabaseInfoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRoleId = 1;
  if (has_m_nroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nroleid(), output);
  }

  // optional int32 m_nCount = 2;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncount(), output);
  }

  // repeated .SM_TreasureChestDatabaseInfo m_stTreasureChestInfo = 3;
  for (int i = 0; i < this->m_sttreasurechestinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_sttreasurechestinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_TreasureChestDatabaseInfoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRoleId = 1;
  if (has_m_nroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nroleid(), target);
  }

  // optional int32 m_nCount = 2;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ncount(), target);
  }

  // repeated .SM_TreasureChestDatabaseInfo m_stTreasureChestInfo = 3;
  for (int i = 0; i < this->m_sttreasurechestinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_sttreasurechestinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_TreasureChestDatabaseInfoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRoleId = 1;
    if (has_m_nroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroleid());
    }

    // optional int32 m_nCount = 2;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }

  }
  // repeated .SM_TreasureChestDatabaseInfo m_stTreasureChestInfo = 3;
  total_size += 1 * this->m_sttreasurechestinfo_size();
  for (int i = 0; i < this->m_sttreasurechestinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_sttreasurechestinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_TreasureChestDatabaseInfoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_TreasureChestDatabaseInfoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_TreasureChestDatabaseInfoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_TreasureChestDatabaseInfoReturn::MergeFrom(const SM_TreasureChestDatabaseInfoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_sttreasurechestinfo_.MergeFrom(from.m_sttreasurechestinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nroleid()) {
      set_m_nroleid(from.m_nroleid());
    }
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_TreasureChestDatabaseInfoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_TreasureChestDatabaseInfoReturn::CopyFrom(const SM_TreasureChestDatabaseInfoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_TreasureChestDatabaseInfoReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_sttreasurechestinfo_size(); i++) {
    if (!this->m_sttreasurechestinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SM_TreasureChestDatabaseInfoReturn::Swap(SM_TreasureChestDatabaseInfoReturn* other) {
  if (other != this) {
    std::swap(m_nroleid_, other->m_nroleid_);
    std::swap(m_ncount_, other->m_ncount_);
    m_sttreasurechestinfo_.Swap(&other->m_sttreasurechestinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_TreasureChestDatabaseInfoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_TreasureChestDatabaseInfoReturn_descriptor_;
  metadata.reflection = SM_TreasureChestDatabaseInfoReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
