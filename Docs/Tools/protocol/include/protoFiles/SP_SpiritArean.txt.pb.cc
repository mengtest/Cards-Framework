// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_SpiritArean.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_SpiritArean.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_AreanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AreanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AreanReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AreanReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AreanData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AreanData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AreanShopReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AreanShopReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AreanShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AreanShop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fSpiritArean_2etxt() {
  protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_SpiritArean.txt");
  GOOGLE_CHECK(file != NULL);
  DB_AreanRequest_descriptor_ = file->message_type(0);
  static const int DB_AreanRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanRequest, m_roleid_),
  };
  DB_AreanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AreanRequest_descriptor_,
      DB_AreanRequest::default_instance_,
      DB_AreanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AreanRequest));
  DB_AreanReturn_descriptor_ = file->message_type(1);
  static const int DB_AreanReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanReturn, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanReturn, m_areandatas_),
  };
  DB_AreanReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AreanReturn_descriptor_,
      DB_AreanReturn::default_instance_,
      DB_AreanReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AreanReturn));
  DB_AreanData_descriptor_ = file->message_type(2);
  static const int DB_AreanData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, m_rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, m_playertype_),
  };
  DB_AreanData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AreanData_descriptor_,
      DB_AreanData::default_instance_,
      DB_AreanData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AreanData));
  DB_AreanShopReturn_descriptor_ = file->message_type(3);
  static const int DB_AreanShopReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShopReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShopReturn, m_areanshops_),
  };
  DB_AreanShopReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AreanShopReturn_descriptor_,
      DB_AreanShopReturn::default_instance_,
      DB_AreanShopReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShopReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShopReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AreanShopReturn));
  DB_AreanShop_descriptor_ = file->message_type(4);
  static const int DB_AreanShop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShop, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShop, m_buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShop, m_buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShop, m_moduletype_),
  };
  DB_AreanShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AreanShop_descriptor_,
      DB_AreanShop::default_instance_,
      DB_AreanShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AreanShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AreanShop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fSpiritArean_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AreanRequest_descriptor_, &DB_AreanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AreanReturn_descriptor_, &DB_AreanReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AreanData_descriptor_, &DB_AreanData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AreanShopReturn_descriptor_, &DB_AreanShopReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AreanShop_descriptor_, &DB_AreanShop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fSpiritArean_2etxt() {
  delete DB_AreanRequest::default_instance_;
  delete DB_AreanRequest_reflection_;
  delete DB_AreanReturn::default_instance_;
  delete DB_AreanReturn_reflection_;
  delete DB_AreanData::default_instance_;
  delete DB_AreanData_reflection_;
  delete DB_AreanShopReturn::default_instance_;
  delete DB_AreanShopReturn_reflection_;
  delete DB_AreanShop::default_instance_;
  delete DB_AreanShop_reflection_;
}

void protobuf_AddDesc_SP_5fSpiritArean_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022SP_SpiritArean.txt\"#\n\017DB_AreanRequest\022"
    "\020\n\010m_roleid\030\001 \002(\005\"F\n\016DB_AreanReturn\022\017\n\007m"
    "_count\030\001 \002(\005\022#\n\014m_areanDatas\030\002 \003(\0132\r.DB_"
    "AreanData\"\202\001\n\014DB_AreanData\022\020\n\010m_roleid\030\001"
    " \002(\005\022\016\n\006m_rank\030\002 \001(\005\022\020\n\010m_rolelv\030\003 \001(\005\022\024"
    "\n\014m_profession\030\004 \001(\005\022\022\n\nm_rolename\030\005 \001(\t"
    "\022\024\n\014m_playertype\030\006 \001(\005\"K\n\022DB_AreanShopRe"
    "turn\022\020\n\010m_roleid\030\001 \002(\005\022#\n\014m_areanShops\030\002"
    " \003(\0132\r.DB_AreanShop\"_\n\014DB_AreanShop\022\022\n\nm"
    "_objectid\030\001 \001(\005\022\021\n\tm_buytype\030\002 \001(\005\022\022\n\nm_"
    "buycount\030\003 \001(\005\022\024\n\014m_moduletype\030\004 \001(\005", 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_SpiritArean.txt", &protobuf_RegisterTypes);
  DB_AreanRequest::default_instance_ = new DB_AreanRequest();
  DB_AreanReturn::default_instance_ = new DB_AreanReturn();
  DB_AreanData::default_instance_ = new DB_AreanData();
  DB_AreanShopReturn::default_instance_ = new DB_AreanShopReturn();
  DB_AreanShop::default_instance_ = new DB_AreanShop();
  DB_AreanRequest::default_instance_->InitAsDefaultInstance();
  DB_AreanReturn::default_instance_->InitAsDefaultInstance();
  DB_AreanData::default_instance_->InitAsDefaultInstance();
  DB_AreanShopReturn::default_instance_->InitAsDefaultInstance();
  DB_AreanShop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fSpiritArean_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fSpiritArean_2etxt {
  StaticDescriptorInitializer_SP_5fSpiritArean_2etxt() {
    protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  }
} static_descriptor_initializer_SP_5fSpiritArean_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int DB_AreanRequest::kMRoleidFieldNumber;
#endif  // !_MSC_VER

DB_AreanRequest::DB_AreanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_AreanRequest::InitAsDefaultInstance() {
}

DB_AreanRequest::DB_AreanRequest(const DB_AreanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_AreanRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AreanRequest::~DB_AreanRequest() {
  SharedDtor();
}

void DB_AreanRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_AreanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_AreanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AreanRequest_descriptor_;
}

const DB_AreanRequest& DB_AreanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  return *default_instance_;
}

DB_AreanRequest* DB_AreanRequest::default_instance_ = NULL;

DB_AreanRequest* DB_AreanRequest::New() const {
  return new DB_AreanRequest;
}

void DB_AreanRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AreanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AreanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AreanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AreanRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_AreanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AreanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AreanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AreanRequest::MergeFrom(const DB_AreanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AreanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AreanRequest::CopyFrom(const DB_AreanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AreanRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_AreanRequest::Swap(DB_AreanRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AreanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AreanRequest_descriptor_;
  metadata.reflection = DB_AreanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AreanReturn::kMCountFieldNumber;
const int DB_AreanReturn::kMAreanDatasFieldNumber;
#endif  // !_MSC_VER

DB_AreanReturn::DB_AreanReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_AreanReturn::InitAsDefaultInstance() {
}

DB_AreanReturn::DB_AreanReturn(const DB_AreanReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_AreanReturn::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AreanReturn::~DB_AreanReturn() {
  SharedDtor();
}

void DB_AreanReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_AreanReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_AreanReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AreanReturn_descriptor_;
}

const DB_AreanReturn& DB_AreanReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  return *default_instance_;
}

DB_AreanReturn* DB_AreanReturn::default_instance_ = NULL;

DB_AreanReturn* DB_AreanReturn::New() const {
  return new DB_AreanReturn;
}

void DB_AreanReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_areandatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AreanReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_areanDatas;
        break;
      }

      // repeated .DB_AreanData m_areanDatas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_areanDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_areandatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_areanDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AreanReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .DB_AreanData m_areanDatas = 2;
  for (int i = 0; i < this->m_areandatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_areandatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AreanReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .DB_AreanData m_areanDatas = 2;
  for (int i = 0; i < this->m_areandatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_areandatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AreanReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .DB_AreanData m_areanDatas = 2;
  total_size += 1 * this->m_areandatas_size();
  for (int i = 0; i < this->m_areandatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_areandatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_AreanReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AreanReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AreanReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AreanReturn::MergeFrom(const DB_AreanReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_areandatas_.MergeFrom(from.m_areandatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AreanReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AreanReturn::CopyFrom(const DB_AreanReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AreanReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_areandatas_size(); i++) {
    if (!this->m_areandatas(i).IsInitialized()) return false;
  }
  return true;
}

void DB_AreanReturn::Swap(DB_AreanReturn* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_areandatas_.Swap(&other->m_areandatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AreanReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AreanReturn_descriptor_;
  metadata.reflection = DB_AreanReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AreanData::kMRoleidFieldNumber;
const int DB_AreanData::kMRankFieldNumber;
const int DB_AreanData::kMRolelvFieldNumber;
const int DB_AreanData::kMProfessionFieldNumber;
const int DB_AreanData::kMRolenameFieldNumber;
const int DB_AreanData::kMPlayertypeFieldNumber;
#endif  // !_MSC_VER

DB_AreanData::DB_AreanData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_AreanData::InitAsDefaultInstance() {
}

DB_AreanData::DB_AreanData(const DB_AreanData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_AreanData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_rank_ = 0;
  m_rolelv_ = 0;
  m_profession_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_playertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AreanData::~DB_AreanData() {
  SharedDtor();
}

void DB_AreanData::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void DB_AreanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_AreanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AreanData_descriptor_;
}

const DB_AreanData& DB_AreanData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  return *default_instance_;
}

DB_AreanData* DB_AreanData::default_instance_ = NULL;

DB_AreanData* DB_AreanData::New() const {
  return new DB_AreanData;
}

void DB_AreanData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_rank_ = 0;
    m_rolelv_ = 0;
    m_profession_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_playertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AreanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rolelv;
        break;
      }

      // optional int32 m_rolelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelv_)));
          set_has_m_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_playertype;
        break;
      }

      // optional int32 m_playertype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playertype_)));
          set_has_m_playertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AreanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_rank = 2;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rank(), output);
  }

  // optional int32 m_rolelv = 3;
  if (has_m_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rolelv(), output);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  // optional string m_rolename = 5;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_rolename(), output);
  }

  // optional int32 m_playertype = 6;
  if (has_m_playertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_playertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AreanData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_rank = 2;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rank(), target);
  }

  // optional int32 m_rolelv = 3;
  if (has_m_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rolelv(), target);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  // optional string m_rolename = 5;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_rolename(), target);
  }

  // optional int32 m_playertype = 6;
  if (has_m_playertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_playertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AreanData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_rank = 2;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // optional int32 m_rolelv = 3;
    if (has_m_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelv());
    }

    // optional int32 m_profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional string m_rolename = 5;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_playertype = 6;
    if (has_m_playertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_AreanData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AreanData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AreanData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AreanData::MergeFrom(const DB_AreanData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_rolelv()) {
      set_m_rolelv(from.m_rolelv());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_playertype()) {
      set_m_playertype(from.m_playertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AreanData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AreanData::CopyFrom(const DB_AreanData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AreanData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_AreanData::Swap(DB_AreanData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_rolelv_, other->m_rolelv_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_playertype_, other->m_playertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AreanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AreanData_descriptor_;
  metadata.reflection = DB_AreanData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AreanShopReturn::kMRoleidFieldNumber;
const int DB_AreanShopReturn::kMAreanShopsFieldNumber;
#endif  // !_MSC_VER

DB_AreanShopReturn::DB_AreanShopReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_AreanShopReturn::InitAsDefaultInstance() {
}

DB_AreanShopReturn::DB_AreanShopReturn(const DB_AreanShopReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_AreanShopReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AreanShopReturn::~DB_AreanShopReturn() {
  SharedDtor();
}

void DB_AreanShopReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_AreanShopReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_AreanShopReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AreanShopReturn_descriptor_;
}

const DB_AreanShopReturn& DB_AreanShopReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  return *default_instance_;
}

DB_AreanShopReturn* DB_AreanShopReturn::default_instance_ = NULL;

DB_AreanShopReturn* DB_AreanShopReturn::New() const {
  return new DB_AreanShopReturn;
}

void DB_AreanShopReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_areanshops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AreanShopReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_areanShops;
        break;
      }

      // repeated .DB_AreanShop m_areanShops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_areanShops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_areanshops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_areanShops;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AreanShopReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .DB_AreanShop m_areanShops = 2;
  for (int i = 0; i < this->m_areanshops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_areanshops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AreanShopReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .DB_AreanShop m_areanShops = 2;
  for (int i = 0; i < this->m_areanshops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_areanshops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AreanShopReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .DB_AreanShop m_areanShops = 2;
  total_size += 1 * this->m_areanshops_size();
  for (int i = 0; i < this->m_areanshops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_areanshops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_AreanShopReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AreanShopReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AreanShopReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AreanShopReturn::MergeFrom(const DB_AreanShopReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_areanshops_.MergeFrom(from.m_areanshops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AreanShopReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AreanShopReturn::CopyFrom(const DB_AreanShopReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AreanShopReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_AreanShopReturn::Swap(DB_AreanShopReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_areanshops_.Swap(&other->m_areanshops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AreanShopReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AreanShopReturn_descriptor_;
  metadata.reflection = DB_AreanShopReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AreanShop::kMObjectidFieldNumber;
const int DB_AreanShop::kMBuytypeFieldNumber;
const int DB_AreanShop::kMBuycountFieldNumber;
const int DB_AreanShop::kMModuletypeFieldNumber;
#endif  // !_MSC_VER

DB_AreanShop::DB_AreanShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_AreanShop::InitAsDefaultInstance() {
}

DB_AreanShop::DB_AreanShop(const DB_AreanShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_AreanShop::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_buytype_ = 0;
  m_buycount_ = 0;
  m_moduletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AreanShop::~DB_AreanShop() {
  SharedDtor();
}

void DB_AreanShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_AreanShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_AreanShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AreanShop_descriptor_;
}

const DB_AreanShop& DB_AreanShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSpiritArean_2etxt();
  return *default_instance_;
}

DB_AreanShop* DB_AreanShop::default_instance_ = NULL;

DB_AreanShop* DB_AreanShop::New() const {
  return new DB_AreanShop;
}

void DB_AreanShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_buytype_ = 0;
    m_buycount_ = 0;
    m_moduletype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AreanShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_buytype;
        break;
      }

      // optional int32 m_buytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buytype_)));
          set_has_m_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_buycount;
        break;
      }

      // optional int32 m_buycount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buycount_)));
          set_has_m_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_moduletype;
        break;
      }

      // optional int32 m_moduletype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_moduletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_moduletype_)));
          set_has_m_moduletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AreanShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_buytype = 2;
  if (has_m_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_buytype(), output);
  }

  // optional int32 m_buycount = 3;
  if (has_m_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_buycount(), output);
  }

  // optional int32 m_moduletype = 4;
  if (has_m_moduletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_moduletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AreanShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_buytype = 2;
  if (has_m_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_buytype(), target);
  }

  // optional int32 m_buycount = 3;
  if (has_m_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_buycount(), target);
  }

  // optional int32 m_moduletype = 4;
  if (has_m_moduletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_moduletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AreanShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_buytype = 2;
    if (has_m_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buytype());
    }

    // optional int32 m_buycount = 3;
    if (has_m_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buycount());
    }

    // optional int32 m_moduletype = 4;
    if (has_m_moduletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_moduletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_AreanShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AreanShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AreanShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AreanShop::MergeFrom(const DB_AreanShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_buytype()) {
      set_m_buytype(from.m_buytype());
    }
    if (from.has_m_buycount()) {
      set_m_buycount(from.m_buycount());
    }
    if (from.has_m_moduletype()) {
      set_m_moduletype(from.m_moduletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AreanShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AreanShop::CopyFrom(const DB_AreanShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AreanShop::IsInitialized() const {

  return true;
}

void DB_AreanShop::Swap(DB_AreanShop* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_buytype_, other->m_buytype_);
    std::swap(m_buycount_, other->m_buycount_);
    std::swap(m_moduletype_, other->m_moduletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AreanShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AreanShop_descriptor_;
  metadata.reflection = DB_AreanShop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
