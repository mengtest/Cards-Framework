// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerinfo.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playerinfo.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_EquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwakens_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwakens_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RuneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RuneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RuneOfEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RuneOfEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetSkillLevelType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetSkillLevelType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetSkillRealize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetSkillRealize_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Player_Data_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Player_Data_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Player_Data_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Player_Data_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Player_Equip_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Player_Equip_Request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playerinfo_2etxt() {
  protobuf_AddDesc_playerinfo_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playerinfo.txt");
  GOOGLE_CHECK(file != NULL);
  GM_EquipData_descriptor_ = file->message_type(0);
  static const int GM_EquipData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_forginglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_breaklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_refinelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_winglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_linkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_allawake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, m_playerprofession_),
  };
  GM_EquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipData_descriptor_,
      GM_EquipData::default_instance_,
      GM_EquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipData));
  GM_EquipAwakens_descriptor_ = file->message_type(1);
  static const int GM_EquipAwakens_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwakens, m_propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwakens, m_propertylv_),
  };
  GM_EquipAwakens_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwakens_descriptor_,
      GM_EquipAwakens::default_instance_,
      GM_EquipAwakens_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwakens, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwakens, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwakens));
  GM_RuneData_descriptor_ = file->message_type(2);
  static const int GM_RuneData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneData, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneData, m_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneData, m_allruneofequip_),
  };
  GM_RuneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RuneData_descriptor_,
      GM_RuneData::default_instance_,
      GM_RuneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RuneData));
  GM_RuneOfEquip_descriptor_ = file->message_type(3);
  static const int GM_RuneOfEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneOfEquip, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneOfEquip, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneOfEquip, m_level_),
  };
  GM_RuneOfEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RuneOfEquip_descriptor_,
      GM_RuneOfEquip::default_instance_,
      GM_RuneOfEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneOfEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RuneOfEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RuneOfEquip));
  GM_PetData_descriptor_ = file->message_type(4);
  static const int GM_PetData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_riselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_allpetskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_allpetskillrealize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, m_onbattle_),
  };
  GM_PetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetData_descriptor_,
      GM_PetData::default_instance_,
      GM_PetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetData));
  GM_PetSkillLevelType_descriptor_ = file->message_type(5);
  static const int GM_PetSkillLevelType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillLevelType, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillLevelType, m_skill_level_),
  };
  GM_PetSkillLevelType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetSkillLevelType_descriptor_,
      GM_PetSkillLevelType::default_instance_,
      GM_PetSkillLevelType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillLevelType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillLevelType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetSkillLevelType));
  GM_PetSkillRealize_descriptor_ = file->message_type(6);
  static const int GM_PetSkillRealize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillRealize, m_propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillRealize, m_propertylvl_),
  };
  GM_PetSkillRealize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetSkillRealize_descriptor_,
      GM_PetSkillRealize::default_instance_,
      GM_PetSkillRealize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillRealize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillRealize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetSkillRealize));
  GM_Player_Data_Return_descriptor_ = file->message_type(7);
  static const int GM_Player_Data_Return_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_gangprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_equipcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_runecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_petcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_addcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_allequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_allpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_allrune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, m_alladdequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, isfriend_),
  };
  GM_Player_Data_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Player_Data_Return_descriptor_,
      GM_Player_Data_Return::default_instance_,
      GM_Player_Data_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Player_Data_Return));
  GM_Player_Data_Request_descriptor_ = file->message_type(8);
  static const int GM_Player_Data_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Request, m_playerid_),
  };
  GM_Player_Data_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Player_Data_Request_descriptor_,
      GM_Player_Data_Request::default_instance_,
      GM_Player_Data_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Data_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Player_Data_Request));
  GM_Player_Equip_Request_descriptor_ = file->message_type(9);
  static const int GM_Player_Equip_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Equip_Request, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Equip_Request, m_gmid_),
  };
  GM_Player_Equip_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Player_Equip_Request_descriptor_,
      GM_Player_Equip_Request::default_instance_,
      GM_Player_Equip_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Equip_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Equip_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Player_Equip_Request));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playerinfo_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipData_descriptor_, &GM_EquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwakens_descriptor_, &GM_EquipAwakens::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RuneData_descriptor_, &GM_RuneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RuneOfEquip_descriptor_, &GM_RuneOfEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetData_descriptor_, &GM_PetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetSkillLevelType_descriptor_, &GM_PetSkillLevelType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetSkillRealize_descriptor_, &GM_PetSkillRealize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Player_Data_Return_descriptor_, &GM_Player_Data_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Player_Data_Request_descriptor_, &GM_Player_Data_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Player_Equip_Request_descriptor_, &GM_Player_Equip_Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playerinfo_2etxt() {
  delete GM_EquipData::default_instance_;
  delete GM_EquipData_reflection_;
  delete GM_EquipAwakens::default_instance_;
  delete GM_EquipAwakens_reflection_;
  delete GM_RuneData::default_instance_;
  delete GM_RuneData_reflection_;
  delete GM_RuneOfEquip::default_instance_;
  delete GM_RuneOfEquip_reflection_;
  delete GM_PetData::default_instance_;
  delete GM_PetData_reflection_;
  delete GM_PetSkillLevelType::default_instance_;
  delete GM_PetSkillLevelType_reflection_;
  delete GM_PetSkillRealize::default_instance_;
  delete GM_PetSkillRealize_reflection_;
  delete GM_Player_Data_Return::default_instance_;
  delete GM_Player_Data_Return_reflection_;
  delete GM_Player_Data_Request::default_instance_;
  delete GM_Player_Data_Request_reflection_;
  delete GM_Player_Equip_Request::default_instance_;
  delete GM_Player_Equip_Request_reflection_;
}

void protobuf_AddDesc_playerinfo_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016playerinfo.txt\"\336\001\n\014GM_EquipData\022\016\n\006m_G"
    "mid\030\001 \002(\003\022\020\n\010m_typeid\030\002 \001(\005\022\026\n\016m_forging"
    "level\030\004 \001(\005\022\024\n\014m_breaklevel\030\005 \001(\005\022\025\n\rm_r"
    "efinelevel\030\006 \001(\005\022\023\n\013m_winglevel\030\007 \001(\005\022\020\n"
    "\010m_linkid\030\n \003(\005\022$\n\nm_allawake\030\013 \003(\0132\020.GM"
    "_EquipAwakens\022\032\n\022m_playerprofession\030\014 \001("
    "\005\"=\n\017GM_EquipAwakens\022\024\n\014m_propertyid\030\001 \002"
    "(\005\022\024\n\014m_propertyLv\030\002 \001(\005\"X\n\013GM_RuneData\022"
    "\016\n\006m_Gmid\030\001 \002(\003\022\016\n\006m_grid\030\004 \001(\005\022)\n\020m_all"
    "runeofequip\030\003 \003(\0132\017.GM_RuneOfEquip\"C\n\016GM"
    "_RuneOfEquip\022\016\n\006m_Gmid\030\001 \002(\003\022\020\n\010m_typeid"
    "\030\002 \001(\005\022\017\n\007m_level\030\003 \001(\005\"\211\002\n\nGM_PetData\022\016"
    "\n\006m_GMid\030\001 \002(\003\022\016\n\006m_type\030\002 \001(\005\022\017\n\007m_leve"
    "l\030\003 \001(\005\022\023\n\013m_riselevel\030\004 \001(\005\022\017\n\007m_grade\030"
    "\005 \001(\005\022\014\n\004m_hp\030\006 \001(\005\022\020\n\010m_attack\030\007 \001(\005\022\017\n"
    "\007m_fight\030\010 \001(\005\022,\n\rm_allpetskill\030\t \003(\0132\025."
    "GM_PetSkillLevelType\0221\n\024m_allpetskillrea"
    "lize\030\n \003(\0132\023.GM_PetSkillRealize\022\022\n\nm_onb"
    "attle\030\013 \001(\005\"@\n\024GM_PetSkillLevelType\022\021\n\tm"
    "_skillid\030\001 \002(\005\022\025\n\rm_skill_level\030\002 \001(\005\"A\n"
    "\022GM_PetSkillRealize\022\024\n\014m_propertyid\030\001 \002("
    "\005\022\025\n\rm_propertylvl\030\002 \001(\005\"\246\003\n\025GM_Player_D"
    "ata_Return\022\017\n\007m_state\030\001 \002(\005\022\022\n\nm_playeri"
    "d\030\002 \001(\005\022\024\n\014m_playername\030\003 \001(\t\022\017\n\007m_level"
    "\030\004 \001(\005\022\017\n\007m_power\030\005 \001(\005\022\022\n\nm_gangname\030\006 "
    "\001(\t\022\030\n\020m_gangprofession\030\007 \001(\005\022\024\n\014m_profe"
    "ssion\030\010 \001(\005\022\024\n\014m_equipCount\030\t \001(\005\022\023\n\013m_r"
    "unecount\030\n \001(\005\022\022\n\nm_petcount\030\013 \001(\005\022\022\n\nm_"
    "addcount\030\014 \001(\005\022!\n\nm_allequip\030\r \003(\0132\r.GM_"
    "EquipData\022\035\n\010m_allpet\030\016 \003(\0132\013.GM_PetData"
    "\022\037\n\tm_allrune\030\017 \003(\0132\014.GM_RuneData\022$\n\rm_a"
    "lladdequip\030\020 \003(\0132\r.GM_EquipData\022\020\n\010isfri"
    "end\030\021 \001(\005\",\n\026GM_Player_Data_Request\022\022\n\nm"
    "_playerid\030\001 \002(\005\"=\n\027GM_Player_Equip_Reque"
    "st\022\022\n\nm_playerid\030\001 \002(\005\022\016\n\006m_gmid\030\002 \001(\003", 1398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playerinfo.txt", &protobuf_RegisterTypes);
  GM_EquipData::default_instance_ = new GM_EquipData();
  GM_EquipAwakens::default_instance_ = new GM_EquipAwakens();
  GM_RuneData::default_instance_ = new GM_RuneData();
  GM_RuneOfEquip::default_instance_ = new GM_RuneOfEquip();
  GM_PetData::default_instance_ = new GM_PetData();
  GM_PetSkillLevelType::default_instance_ = new GM_PetSkillLevelType();
  GM_PetSkillRealize::default_instance_ = new GM_PetSkillRealize();
  GM_Player_Data_Return::default_instance_ = new GM_Player_Data_Return();
  GM_Player_Data_Request::default_instance_ = new GM_Player_Data_Request();
  GM_Player_Equip_Request::default_instance_ = new GM_Player_Equip_Request();
  GM_EquipData::default_instance_->InitAsDefaultInstance();
  GM_EquipAwakens::default_instance_->InitAsDefaultInstance();
  GM_RuneData::default_instance_->InitAsDefaultInstance();
  GM_RuneOfEquip::default_instance_->InitAsDefaultInstance();
  GM_PetData::default_instance_->InitAsDefaultInstance();
  GM_PetSkillLevelType::default_instance_->InitAsDefaultInstance();
  GM_PetSkillRealize::default_instance_->InitAsDefaultInstance();
  GM_Player_Data_Return::default_instance_->InitAsDefaultInstance();
  GM_Player_Data_Request::default_instance_->InitAsDefaultInstance();
  GM_Player_Equip_Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playerinfo_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playerinfo_2etxt {
  StaticDescriptorInitializer_playerinfo_2etxt() {
    protobuf_AddDesc_playerinfo_2etxt();
  }
} static_descriptor_initializer_playerinfo_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_EquipData::kMGmidFieldNumber;
const int GM_EquipData::kMTypeidFieldNumber;
const int GM_EquipData::kMForginglevelFieldNumber;
const int GM_EquipData::kMBreaklevelFieldNumber;
const int GM_EquipData::kMRefinelevelFieldNumber;
const int GM_EquipData::kMWinglevelFieldNumber;
const int GM_EquipData::kMLinkidFieldNumber;
const int GM_EquipData::kMAllawakeFieldNumber;
const int GM_EquipData::kMPlayerprofessionFieldNumber;
#endif  // !_MSC_VER

GM_EquipData::GM_EquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipData::InitAsDefaultInstance() {
}

GM_EquipData::GM_EquipData(const GM_EquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipData::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_typeid_ = 0;
  m_forginglevel_ = 0;
  m_breaklevel_ = 0;
  m_refinelevel_ = 0;
  m_winglevel_ = 0;
  m_playerprofession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipData::~GM_EquipData() {
  SharedDtor();
}

void GM_EquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipData_descriptor_;
}

const GM_EquipData& GM_EquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_EquipData* GM_EquipData::default_instance_ = NULL;

GM_EquipData* GM_EquipData::New() const {
  return new GM_EquipData;
}

void GM_EquipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_typeid_ = 0;
    m_forginglevel_ = 0;
    m_breaklevel_ = 0;
    m_refinelevel_ = 0;
    m_winglevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_playerprofession_ = 0;
  }
  m_linkid_.Clear();
  m_allawake_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_Gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_typeid;
        break;
      }

      // optional int32 m_typeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_forginglevel;
        break;
      }

      // optional int32 m_forginglevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_forginglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_forginglevel_)));
          set_has_m_forginglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_breaklevel;
        break;
      }

      // optional int32 m_breaklevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breaklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breaklevel_)));
          set_has_m_breaklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_refinelevel;
        break;
      }

      // optional int32 m_refinelevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refinelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refinelevel_)));
          set_has_m_refinelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_winglevel;
        break;
      }

      // optional int32 m_winglevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_winglevel_)));
          set_has_m_winglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_linkid;
        break;
      }

      // repeated int32 m_linkid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_m_linkid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_linkid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_linkid;
        if (input->ExpectTag(90)) goto parse_m_allawake;
        break;
      }

      // repeated .GM_EquipAwakens m_allawake = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allawake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allawake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_allawake;
        if (input->ExpectTag(96)) goto parse_m_playerprofession;
        break;
      }

      // optional int32 m_playerprofession = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerprofession_)));
          set_has_m_playerprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_Gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // optional int32 m_typeid = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_typeid(), output);
  }

  // optional int32 m_forginglevel = 4;
  if (has_m_forginglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_forginglevel(), output);
  }

  // optional int32 m_breaklevel = 5;
  if (has_m_breaklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_breaklevel(), output);
  }

  // optional int32 m_refinelevel = 6;
  if (has_m_refinelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_refinelevel(), output);
  }

  // optional int32 m_winglevel = 7;
  if (has_m_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_winglevel(), output);
  }

  // repeated int32 m_linkid = 10;
  for (int i = 0; i < this->m_linkid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->m_linkid(i), output);
  }

  // repeated .GM_EquipAwakens m_allawake = 11;
  for (int i = 0; i < this->m_allawake_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_allawake(i), output);
  }

  // optional int32 m_playerprofession = 12;
  if (has_m_playerprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_playerprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_Gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // optional int32 m_typeid = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_typeid(), target);
  }

  // optional int32 m_forginglevel = 4;
  if (has_m_forginglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_forginglevel(), target);
  }

  // optional int32 m_breaklevel = 5;
  if (has_m_breaklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_breaklevel(), target);
  }

  // optional int32 m_refinelevel = 6;
  if (has_m_refinelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_refinelevel(), target);
  }

  // optional int32 m_winglevel = 7;
  if (has_m_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_winglevel(), target);
  }

  // repeated int32 m_linkid = 10;
  for (int i = 0; i < this->m_linkid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->m_linkid(i), target);
  }

  // repeated .GM_EquipAwakens m_allawake = 11;
  for (int i = 0; i < this->m_allawake_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_allawake(i), target);
  }

  // optional int32 m_playerprofession = 12;
  if (has_m_playerprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_playerprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_Gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_typeid = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_forginglevel = 4;
    if (has_m_forginglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_forginglevel());
    }

    // optional int32 m_breaklevel = 5;
    if (has_m_breaklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breaklevel());
    }

    // optional int32 m_refinelevel = 6;
    if (has_m_refinelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refinelevel());
    }

    // optional int32 m_winglevel = 7;
    if (has_m_winglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_winglevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_playerprofession = 12;
    if (has_m_playerprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerprofession());
    }

  }
  // repeated int32 m_linkid = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_linkid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_linkid(i));
    }
    total_size += 1 * this->m_linkid_size() + data_size;
  }

  // repeated .GM_EquipAwakens m_allawake = 11;
  total_size += 1 * this->m_allawake_size();
  for (int i = 0; i < this->m_allawake_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allawake(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipData::MergeFrom(const GM_EquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_linkid_.MergeFrom(from.m_linkid_);
  m_allawake_.MergeFrom(from.m_allawake_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_forginglevel()) {
      set_m_forginglevel(from.m_forginglevel());
    }
    if (from.has_m_breaklevel()) {
      set_m_breaklevel(from.m_breaklevel());
    }
    if (from.has_m_refinelevel()) {
      set_m_refinelevel(from.m_refinelevel());
    }
    if (from.has_m_winglevel()) {
      set_m_winglevel(from.m_winglevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_playerprofession()) {
      set_m_playerprofession(from.m_playerprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipData::CopyFrom(const GM_EquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_allawake_size(); i++) {
    if (!this->m_allawake(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipData::Swap(GM_EquipData* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_forginglevel_, other->m_forginglevel_);
    std::swap(m_breaklevel_, other->m_breaklevel_);
    std::swap(m_refinelevel_, other->m_refinelevel_);
    std::swap(m_winglevel_, other->m_winglevel_);
    m_linkid_.Swap(&other->m_linkid_);
    m_allawake_.Swap(&other->m_allawake_);
    std::swap(m_playerprofession_, other->m_playerprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipData_descriptor_;
  metadata.reflection = GM_EquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwakens::kMPropertyidFieldNumber;
const int GM_EquipAwakens::kMPropertyLvFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwakens::GM_EquipAwakens()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwakens::InitAsDefaultInstance() {
}

GM_EquipAwakens::GM_EquipAwakens(const GM_EquipAwakens& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwakens::SharedCtor() {
  _cached_size_ = 0;
  m_propertyid_ = 0;
  m_propertylv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwakens::~GM_EquipAwakens() {
  SharedDtor();
}

void GM_EquipAwakens::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwakens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwakens::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwakens_descriptor_;
}

const GM_EquipAwakens& GM_EquipAwakens::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_EquipAwakens* GM_EquipAwakens::default_instance_ = NULL;

GM_EquipAwakens* GM_EquipAwakens::New() const {
  return new GM_EquipAwakens;
}

void GM_EquipAwakens::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_propertyid_ = 0;
    m_propertylv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwakens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_propertyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertyid_)));
          set_has_m_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_propertyLv;
        break;
      }

      // optional int32 m_propertyLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_propertyLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertylv_)));
          set_has_m_propertylv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwakens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_propertyid = 1;
  if (has_m_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_propertyid(), output);
  }

  // optional int32 m_propertyLv = 2;
  if (has_m_propertylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_propertylv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwakens::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_propertyid = 1;
  if (has_m_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_propertyid(), target);
  }

  // optional int32 m_propertyLv = 2;
  if (has_m_propertylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_propertylv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwakens::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_propertyid = 1;
    if (has_m_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertyid());
    }

    // optional int32 m_propertyLv = 2;
    if (has_m_propertylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertylv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwakens::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwakens* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwakens*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwakens::MergeFrom(const GM_EquipAwakens& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_propertyid()) {
      set_m_propertyid(from.m_propertyid());
    }
    if (from.has_m_propertylv()) {
      set_m_propertylv(from.m_propertylv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwakens::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwakens::CopyFrom(const GM_EquipAwakens& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwakens::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwakens::Swap(GM_EquipAwakens* other) {
  if (other != this) {
    std::swap(m_propertyid_, other->m_propertyid_);
    std::swap(m_propertylv_, other->m_propertylv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwakens::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwakens_descriptor_;
  metadata.reflection = GM_EquipAwakens_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RuneData::kMGmidFieldNumber;
const int GM_RuneData::kMGridFieldNumber;
const int GM_RuneData::kMAllruneofequipFieldNumber;
#endif  // !_MSC_VER

GM_RuneData::GM_RuneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RuneData::InitAsDefaultInstance() {
}

GM_RuneData::GM_RuneData(const GM_RuneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RuneData::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_grid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RuneData::~GM_RuneData() {
  SharedDtor();
}

void GM_RuneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RuneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RuneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RuneData_descriptor_;
}

const GM_RuneData& GM_RuneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_RuneData* GM_RuneData::default_instance_ = NULL;

GM_RuneData* GM_RuneData::New() const {
  return new GM_RuneData;
}

void GM_RuneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_grid_ = 0;
  }
  m_allruneofequip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RuneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_Gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_allruneofequip;
        break;
      }

      // repeated .GM_RuneOfEquip m_allruneofequip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allruneofequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allruneofequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_allruneofequip;
        if (input->ExpectTag(32)) goto parse_m_grid;
        break;
      }

      // optional int32 m_grid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grid_)));
          set_has_m_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RuneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_Gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // repeated .GM_RuneOfEquip m_allruneofequip = 3;
  for (int i = 0; i < this->m_allruneofequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_allruneofequip(i), output);
  }

  // optional int32 m_grid = 4;
  if (has_m_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RuneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_Gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // repeated .GM_RuneOfEquip m_allruneofequip = 3;
  for (int i = 0; i < this->m_allruneofequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_allruneofequip(i), target);
  }

  // optional int32 m_grid = 4;
  if (has_m_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RuneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_Gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_grid = 4;
    if (has_m_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grid());
    }

  }
  // repeated .GM_RuneOfEquip m_allruneofequip = 3;
  total_size += 1 * this->m_allruneofequip_size();
  for (int i = 0; i < this->m_allruneofequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allruneofequip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RuneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RuneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RuneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RuneData::MergeFrom(const GM_RuneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_allruneofequip_.MergeFrom(from.m_allruneofequip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_grid()) {
      set_m_grid(from.m_grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RuneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RuneData::CopyFrom(const GM_RuneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RuneData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_allruneofequip_size(); i++) {
    if (!this->m_allruneofequip(i).IsInitialized()) return false;
  }
  return true;
}

void GM_RuneData::Swap(GM_RuneData* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_grid_, other->m_grid_);
    m_allruneofequip_.Swap(&other->m_allruneofequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RuneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RuneData_descriptor_;
  metadata.reflection = GM_RuneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RuneOfEquip::kMGmidFieldNumber;
const int GM_RuneOfEquip::kMTypeidFieldNumber;
const int GM_RuneOfEquip::kMLevelFieldNumber;
#endif  // !_MSC_VER

GM_RuneOfEquip::GM_RuneOfEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RuneOfEquip::InitAsDefaultInstance() {
}

GM_RuneOfEquip::GM_RuneOfEquip(const GM_RuneOfEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RuneOfEquip::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_typeid_ = 0;
  m_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RuneOfEquip::~GM_RuneOfEquip() {
  SharedDtor();
}

void GM_RuneOfEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RuneOfEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RuneOfEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RuneOfEquip_descriptor_;
}

const GM_RuneOfEquip& GM_RuneOfEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_RuneOfEquip* GM_RuneOfEquip::default_instance_ = NULL;

GM_RuneOfEquip* GM_RuneOfEquip::New() const {
  return new GM_RuneOfEquip;
}

void GM_RuneOfEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_typeid_ = 0;
    m_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RuneOfEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_Gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_typeid;
        break;
      }

      // optional int32 m_typeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RuneOfEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_Gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // optional int32 m_typeid = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_typeid(), output);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RuneOfEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_Gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // optional int32 m_typeid = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_typeid(), target);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RuneOfEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_Gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_typeid = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RuneOfEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RuneOfEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RuneOfEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RuneOfEquip::MergeFrom(const GM_RuneOfEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RuneOfEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RuneOfEquip::CopyFrom(const GM_RuneOfEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RuneOfEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RuneOfEquip::Swap(GM_RuneOfEquip* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_level_, other->m_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RuneOfEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RuneOfEquip_descriptor_;
  metadata.reflection = GM_RuneOfEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetData::kMGMidFieldNumber;
const int GM_PetData::kMTypeFieldNumber;
const int GM_PetData::kMLevelFieldNumber;
const int GM_PetData::kMRiselevelFieldNumber;
const int GM_PetData::kMGradeFieldNumber;
const int GM_PetData::kMHpFieldNumber;
const int GM_PetData::kMAttackFieldNumber;
const int GM_PetData::kMFightFieldNumber;
const int GM_PetData::kMAllpetskillFieldNumber;
const int GM_PetData::kMAllpetskillrealizeFieldNumber;
const int GM_PetData::kMOnbattleFieldNumber;
#endif  // !_MSC_VER

GM_PetData::GM_PetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetData::InitAsDefaultInstance() {
}

GM_PetData::GM_PetData(const GM_PetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetData::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_level_ = 0;
  m_riselevel_ = 0;
  m_grade_ = 0;
  m_hp_ = 0;
  m_attack_ = 0;
  m_fight_ = 0;
  m_onbattle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetData::~GM_PetData() {
  SharedDtor();
}

void GM_PetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetData_descriptor_;
}

const GM_PetData& GM_PetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_PetData* GM_PetData::default_instance_ = NULL;

GM_PetData* GM_PetData::New() const {
  return new GM_PetData;
}

void GM_PetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    m_level_ = 0;
    m_riselevel_ = 0;
    m_grade_ = 0;
    m_hp_ = 0;
    m_attack_ = 0;
    m_fight_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    m_onbattle_ = 0;
  }
  m_allpetskill_.Clear();
  m_allpetskillrealize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_GMid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_riselevel;
        break;
      }

      // optional int32 m_riselevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_riselevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_riselevel_)));
          set_has_m_riselevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_grade;
        break;
      }

      // optional int32 m_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grade_)));
          set_has_m_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_hp;
        break;
      }

      // optional int32 m_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hp_)));
          set_has_m_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_attack;
        break;
      }

      // optional int32 m_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attack_)));
          set_has_m_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_fight;
        break;
      }

      // optional int32 m_fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fight_)));
          set_has_m_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_allpetskill;
        break;
      }

      // repeated .GM_PetSkillLevelType m_allpetskill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allpetskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allpetskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_allpetskill;
        if (input->ExpectTag(82)) goto parse_m_allpetskillrealize;
        break;
      }

      // repeated .GM_PetSkillRealize m_allpetskillrealize = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allpetskillrealize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allpetskillrealize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_allpetskillrealize;
        if (input->ExpectTag(88)) goto parse_m_onbattle;
        break;
      }

      // optional int32 m_onbattle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_onbattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_onbattle_)));
          set_has_m_onbattle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_GMid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  // optional int32 m_riselevel = 4;
  if (has_m_riselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_riselevel(), output);
  }

  // optional int32 m_grade = 5;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_grade(), output);
  }

  // optional int32 m_hp = 6;
  if (has_m_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_hp(), output);
  }

  // optional int32 m_attack = 7;
  if (has_m_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_attack(), output);
  }

  // optional int32 m_fight = 8;
  if (has_m_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_fight(), output);
  }

  // repeated .GM_PetSkillLevelType m_allpetskill = 9;
  for (int i = 0; i < this->m_allpetskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_allpetskill(i), output);
  }

  // repeated .GM_PetSkillRealize m_allpetskillrealize = 10;
  for (int i = 0; i < this->m_allpetskillrealize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_allpetskillrealize(i), output);
  }

  // optional int32 m_onbattle = 11;
  if (has_m_onbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_onbattle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_GMid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  // optional int32 m_riselevel = 4;
  if (has_m_riselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_riselevel(), target);
  }

  // optional int32 m_grade = 5;
  if (has_m_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_grade(), target);
  }

  // optional int32 m_hp = 6;
  if (has_m_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_hp(), target);
  }

  // optional int32 m_attack = 7;
  if (has_m_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_attack(), target);
  }

  // optional int32 m_fight = 8;
  if (has_m_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_fight(), target);
  }

  // repeated .GM_PetSkillLevelType m_allpetskill = 9;
  for (int i = 0; i < this->m_allpetskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_allpetskill(i), target);
  }

  // repeated .GM_PetSkillRealize m_allpetskillrealize = 10;
  for (int i = 0; i < this->m_allpetskillrealize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_allpetskillrealize(i), target);
  }

  // optional int32 m_onbattle = 11;
  if (has_m_onbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_onbattle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_GMid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_riselevel = 4;
    if (has_m_riselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_riselevel());
    }

    // optional int32 m_grade = 5;
    if (has_m_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grade());
    }

    // optional int32 m_hp = 6;
    if (has_m_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hp());
    }

    // optional int32 m_attack = 7;
    if (has_m_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attack());
    }

    // optional int32 m_fight = 8;
    if (has_m_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fight());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 m_onbattle = 11;
    if (has_m_onbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_onbattle());
    }

  }
  // repeated .GM_PetSkillLevelType m_allpetskill = 9;
  total_size += 1 * this->m_allpetskill_size();
  for (int i = 0; i < this->m_allpetskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allpetskill(i));
  }

  // repeated .GM_PetSkillRealize m_allpetskillrealize = 10;
  total_size += 1 * this->m_allpetskillrealize_size();
  for (int i = 0; i < this->m_allpetskillrealize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allpetskillrealize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetData::MergeFrom(const GM_PetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_allpetskill_.MergeFrom(from.m_allpetskill_);
  m_allpetskillrealize_.MergeFrom(from.m_allpetskillrealize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_riselevel()) {
      set_m_riselevel(from.m_riselevel());
    }
    if (from.has_m_grade()) {
      set_m_grade(from.m_grade());
    }
    if (from.has_m_hp()) {
      set_m_hp(from.m_hp());
    }
    if (from.has_m_attack()) {
      set_m_attack(from.m_attack());
    }
    if (from.has_m_fight()) {
      set_m_fight(from.m_fight());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_m_onbattle()) {
      set_m_onbattle(from.m_onbattle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetData::CopyFrom(const GM_PetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_allpetskill_size(); i++) {
    if (!this->m_allpetskill(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_allpetskillrealize_size(); i++) {
    if (!this->m_allpetskillrealize(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PetData::Swap(GM_PetData* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_riselevel_, other->m_riselevel_);
    std::swap(m_grade_, other->m_grade_);
    std::swap(m_hp_, other->m_hp_);
    std::swap(m_attack_, other->m_attack_);
    std::swap(m_fight_, other->m_fight_);
    m_allpetskill_.Swap(&other->m_allpetskill_);
    m_allpetskillrealize_.Swap(&other->m_allpetskillrealize_);
    std::swap(m_onbattle_, other->m_onbattle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetData_descriptor_;
  metadata.reflection = GM_PetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetSkillLevelType::kMSkillidFieldNumber;
const int GM_PetSkillLevelType::kMSkillLevelFieldNumber;
#endif  // !_MSC_VER

GM_PetSkillLevelType::GM_PetSkillLevelType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetSkillLevelType::InitAsDefaultInstance() {
}

GM_PetSkillLevelType::GM_PetSkillLevelType(const GM_PetSkillLevelType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetSkillLevelType::SharedCtor() {
  _cached_size_ = 0;
  m_skillid_ = 0;
  m_skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetSkillLevelType::~GM_PetSkillLevelType() {
  SharedDtor();
}

void GM_PetSkillLevelType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetSkillLevelType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetSkillLevelType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetSkillLevelType_descriptor_;
}

const GM_PetSkillLevelType& GM_PetSkillLevelType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_PetSkillLevelType* GM_PetSkillLevelType::default_instance_ = NULL;

GM_PetSkillLevelType* GM_PetSkillLevelType::New() const {
  return new GM_PetSkillLevelType;
}

void GM_PetSkillLevelType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_skillid_ = 0;
    m_skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetSkillLevelType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skill_level;
        break;
      }

      // optional int32 m_skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skill_level_)));
          set_has_m_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetSkillLevelType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_skillid = 1;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_skillid(), output);
  }

  // optional int32 m_skill_level = 2;
  if (has_m_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetSkillLevelType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_skillid = 1;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_skillid(), target);
  }

  // optional int32 m_skill_level = 2;
  if (has_m_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetSkillLevelType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_skillid = 1;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_skill_level = 2;
    if (has_m_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetSkillLevelType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetSkillLevelType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetSkillLevelType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetSkillLevelType::MergeFrom(const GM_PetSkillLevelType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_skill_level()) {
      set_m_skill_level(from.m_skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetSkillLevelType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetSkillLevelType::CopyFrom(const GM_PetSkillLevelType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetSkillLevelType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetSkillLevelType::Swap(GM_PetSkillLevelType* other) {
  if (other != this) {
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_skill_level_, other->m_skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetSkillLevelType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetSkillLevelType_descriptor_;
  metadata.reflection = GM_PetSkillLevelType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetSkillRealize::kMPropertyidFieldNumber;
const int GM_PetSkillRealize::kMPropertylvlFieldNumber;
#endif  // !_MSC_VER

GM_PetSkillRealize::GM_PetSkillRealize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetSkillRealize::InitAsDefaultInstance() {
}

GM_PetSkillRealize::GM_PetSkillRealize(const GM_PetSkillRealize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetSkillRealize::SharedCtor() {
  _cached_size_ = 0;
  m_propertyid_ = 0;
  m_propertylvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetSkillRealize::~GM_PetSkillRealize() {
  SharedDtor();
}

void GM_PetSkillRealize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetSkillRealize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetSkillRealize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetSkillRealize_descriptor_;
}

const GM_PetSkillRealize& GM_PetSkillRealize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_PetSkillRealize* GM_PetSkillRealize::default_instance_ = NULL;

GM_PetSkillRealize* GM_PetSkillRealize::New() const {
  return new GM_PetSkillRealize;
}

void GM_PetSkillRealize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_propertyid_ = 0;
    m_propertylvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetSkillRealize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_propertyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertyid_)));
          set_has_m_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_propertylvl;
        break;
      }

      // optional int32 m_propertylvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_propertylvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertylvl_)));
          set_has_m_propertylvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetSkillRealize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_propertyid = 1;
  if (has_m_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_propertyid(), output);
  }

  // optional int32 m_propertylvl = 2;
  if (has_m_propertylvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_propertylvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetSkillRealize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_propertyid = 1;
  if (has_m_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_propertyid(), target);
  }

  // optional int32 m_propertylvl = 2;
  if (has_m_propertylvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_propertylvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetSkillRealize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_propertyid = 1;
    if (has_m_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertyid());
    }

    // optional int32 m_propertylvl = 2;
    if (has_m_propertylvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertylvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetSkillRealize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetSkillRealize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetSkillRealize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetSkillRealize::MergeFrom(const GM_PetSkillRealize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_propertyid()) {
      set_m_propertyid(from.m_propertyid());
    }
    if (from.has_m_propertylvl()) {
      set_m_propertylvl(from.m_propertylvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetSkillRealize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetSkillRealize::CopyFrom(const GM_PetSkillRealize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetSkillRealize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetSkillRealize::Swap(GM_PetSkillRealize* other) {
  if (other != this) {
    std::swap(m_propertyid_, other->m_propertyid_);
    std::swap(m_propertylvl_, other->m_propertylvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetSkillRealize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetSkillRealize_descriptor_;
  metadata.reflection = GM_PetSkillRealize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Player_Data_Return::kMStateFieldNumber;
const int GM_Player_Data_Return::kMPlayeridFieldNumber;
const int GM_Player_Data_Return::kMPlayernameFieldNumber;
const int GM_Player_Data_Return::kMLevelFieldNumber;
const int GM_Player_Data_Return::kMPowerFieldNumber;
const int GM_Player_Data_Return::kMGangnameFieldNumber;
const int GM_Player_Data_Return::kMGangprofessionFieldNumber;
const int GM_Player_Data_Return::kMProfessionFieldNumber;
const int GM_Player_Data_Return::kMEquipCountFieldNumber;
const int GM_Player_Data_Return::kMRunecountFieldNumber;
const int GM_Player_Data_Return::kMPetcountFieldNumber;
const int GM_Player_Data_Return::kMAddcountFieldNumber;
const int GM_Player_Data_Return::kMAllequipFieldNumber;
const int GM_Player_Data_Return::kMAllpetFieldNumber;
const int GM_Player_Data_Return::kMAllruneFieldNumber;
const int GM_Player_Data_Return::kMAlladdequipFieldNumber;
const int GM_Player_Data_Return::kIsfriendFieldNumber;
#endif  // !_MSC_VER

GM_Player_Data_Return::GM_Player_Data_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Player_Data_Return::InitAsDefaultInstance() {
}

GM_Player_Data_Return::GM_Player_Data_Return(const GM_Player_Data_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Player_Data_Return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_playerid_ = 0;
  m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_level_ = 0;
  m_power_ = 0;
  m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gangprofession_ = 0;
  m_profession_ = 0;
  m_equipcount_ = 0;
  m_runecount_ = 0;
  m_petcount_ = 0;
  m_addcount_ = 0;
  isfriend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Player_Data_Return::~GM_Player_Data_Return() {
  SharedDtor();
}

void GM_Player_Data_Return::SharedDtor() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_Player_Data_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Player_Data_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Player_Data_Return_descriptor_;
}

const GM_Player_Data_Return& GM_Player_Data_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_Player_Data_Return* GM_Player_Data_Return::default_instance_ = NULL;

GM_Player_Data_Return* GM_Player_Data_Return::New() const {
  return new GM_Player_Data_Return;
}

void GM_Player_Data_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
    m_playerid_ = 0;
    if (has_m_playername()) {
      if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
        m_playername_->clear();
      }
    }
    m_level_ = 0;
    m_power_ = 0;
    if (has_m_gangname()) {
      if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
        m_gangname_->clear();
      }
    }
    m_gangprofession_ = 0;
    m_profession_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_equipcount_ = 0;
    m_runecount_ = 0;
    m_petcount_ = 0;
    m_addcount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isfriend_ = 0;
  }
  m_allequip_.Clear();
  m_allpet_.Clear();
  m_allrune_.Clear();
  m_alladdequip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Player_Data_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // optional int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_playername;
        break;
      }

      // optional string m_playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playername().data(), this->m_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_power;
        break;
      }

      // optional int32 m_power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_power_)));
          set_has_m_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_gangname;
        break;
      }

      // optional string m_gangname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gangname().data(), this->m_gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_gangprofession;
        break;
      }

      // optional int32 m_gangprofession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gangprofession_)));
          set_has_m_gangprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_equipCount;
        break;
      }

      // optional int32 m_equipCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipcount_)));
          set_has_m_equipcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_runecount;
        break;
      }

      // optional int32 m_runecount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_runecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_runecount_)));
          set_has_m_runecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_petcount;
        break;
      }

      // optional int32 m_petcount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_petcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petcount_)));
          set_has_m_petcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_addcount;
        break;
      }

      // optional int32 m_addcount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addcount_)));
          set_has_m_addcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_allequip;
        break;
      }

      // repeated .GM_EquipData m_allequip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_allequip;
        if (input->ExpectTag(114)) goto parse_m_allpet;
        break;
      }

      // repeated .GM_PetData m_allpet = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allpet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allpet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_allpet;
        if (input->ExpectTag(122)) goto parse_m_allrune;
        break;
      }

      // repeated .GM_RuneData m_allrune = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_allrune:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_allrune()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_allrune;
        if (input->ExpectTag(130)) goto parse_m_alladdequip;
        break;
      }

      // repeated .GM_EquipData m_alladdequip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_alladdequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_alladdequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_alladdequip;
        if (input->ExpectTag(136)) goto parse_isfriend;
        break;
      }

      // optional int32 isfriend = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Player_Data_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // optional int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // optional string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_playername(), output);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_level(), output);
  }

  // optional int32 m_power = 5;
  if (has_m_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_power(), output);
  }

  // optional string m_gangname = 6;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_gangname(), output);
  }

  // optional int32 m_gangprofession = 7;
  if (has_m_gangprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_gangprofession(), output);
  }

  // optional int32 m_profession = 8;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_profession(), output);
  }

  // optional int32 m_equipCount = 9;
  if (has_m_equipcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_equipcount(), output);
  }

  // optional int32 m_runecount = 10;
  if (has_m_runecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_runecount(), output);
  }

  // optional int32 m_petcount = 11;
  if (has_m_petcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_petcount(), output);
  }

  // optional int32 m_addcount = 12;
  if (has_m_addcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_addcount(), output);
  }

  // repeated .GM_EquipData m_allequip = 13;
  for (int i = 0; i < this->m_allequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_allequip(i), output);
  }

  // repeated .GM_PetData m_allpet = 14;
  for (int i = 0; i < this->m_allpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_allpet(i), output);
  }

  // repeated .GM_RuneData m_allrune = 15;
  for (int i = 0; i < this->m_allrune_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_allrune(i), output);
  }

  // repeated .GM_EquipData m_alladdequip = 16;
  for (int i = 0; i < this->m_alladdequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_alladdequip(i), output);
  }

  // optional int32 isfriend = 17;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Player_Data_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // optional int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // optional string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_playername(), target);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_level(), target);
  }

  // optional int32 m_power = 5;
  if (has_m_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_power(), target);
  }

  // optional string m_gangname = 6;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_gangname(), target);
  }

  // optional int32 m_gangprofession = 7;
  if (has_m_gangprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_gangprofession(), target);
  }

  // optional int32 m_profession = 8;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_profession(), target);
  }

  // optional int32 m_equipCount = 9;
  if (has_m_equipcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_equipcount(), target);
  }

  // optional int32 m_runecount = 10;
  if (has_m_runecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_runecount(), target);
  }

  // optional int32 m_petcount = 11;
  if (has_m_petcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_petcount(), target);
  }

  // optional int32 m_addcount = 12;
  if (has_m_addcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_addcount(), target);
  }

  // repeated .GM_EquipData m_allequip = 13;
  for (int i = 0; i < this->m_allequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_allequip(i), target);
  }

  // repeated .GM_PetData m_allpet = 14;
  for (int i = 0; i < this->m_allpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_allpet(i), target);
  }

  // repeated .GM_RuneData m_allrune = 15;
  for (int i = 0; i < this->m_allrune_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_allrune(i), target);
  }

  // repeated .GM_EquipData m_alladdequip = 16;
  for (int i = 0; i < this->m_alladdequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_alladdequip(i), target);
  }

  // optional int32 isfriend = 17;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Player_Data_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // optional string m_playername = 3;
    if (has_m_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playername());
    }

    // optional int32 m_level = 4;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_power = 5;
    if (has_m_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_power());
    }

    // optional string m_gangname = 6;
    if (has_m_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gangname());
    }

    // optional int32 m_gangprofession = 7;
    if (has_m_gangprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gangprofession());
    }

    // optional int32 m_profession = 8;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_equipCount = 9;
    if (has_m_equipcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipcount());
    }

    // optional int32 m_runecount = 10;
    if (has_m_runecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_runecount());
    }

    // optional int32 m_petcount = 11;
    if (has_m_petcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petcount());
    }

    // optional int32 m_addcount = 12;
    if (has_m_addcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addcount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 isfriend = 17;
    if (has_isfriend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfriend());
    }

  }
  // repeated .GM_EquipData m_allequip = 13;
  total_size += 1 * this->m_allequip_size();
  for (int i = 0; i < this->m_allequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allequip(i));
  }

  // repeated .GM_PetData m_allpet = 14;
  total_size += 1 * this->m_allpet_size();
  for (int i = 0; i < this->m_allpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allpet(i));
  }

  // repeated .GM_RuneData m_allrune = 15;
  total_size += 1 * this->m_allrune_size();
  for (int i = 0; i < this->m_allrune_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_allrune(i));
  }

  // repeated .GM_EquipData m_alladdequip = 16;
  total_size += 2 * this->m_alladdequip_size();
  for (int i = 0; i < this->m_alladdequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_alladdequip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Player_Data_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Player_Data_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Player_Data_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Player_Data_Return::MergeFrom(const GM_Player_Data_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_allequip_.MergeFrom(from.m_allequip_);
  m_allpet_.MergeFrom(from.m_allpet_);
  m_allrune_.MergeFrom(from.m_allrune_);
  m_alladdequip_.MergeFrom(from.m_alladdequip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_playername()) {
      set_m_playername(from.m_playername());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_power()) {
      set_m_power(from.m_power());
    }
    if (from.has_m_gangname()) {
      set_m_gangname(from.m_gangname());
    }
    if (from.has_m_gangprofession()) {
      set_m_gangprofession(from.m_gangprofession());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_equipcount()) {
      set_m_equipcount(from.m_equipcount());
    }
    if (from.has_m_runecount()) {
      set_m_runecount(from.m_runecount());
    }
    if (from.has_m_petcount()) {
      set_m_petcount(from.m_petcount());
    }
    if (from.has_m_addcount()) {
      set_m_addcount(from.m_addcount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Player_Data_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Player_Data_Return::CopyFrom(const GM_Player_Data_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Player_Data_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_allequip_size(); i++) {
    if (!this->m_allequip(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_allpet_size(); i++) {
    if (!this->m_allpet(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_allrune_size(); i++) {
    if (!this->m_allrune(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_alladdequip_size(); i++) {
    if (!this->m_alladdequip(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Player_Data_Return::Swap(GM_Player_Data_Return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_playername_, other->m_playername_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_power_, other->m_power_);
    std::swap(m_gangname_, other->m_gangname_);
    std::swap(m_gangprofession_, other->m_gangprofession_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_equipcount_, other->m_equipcount_);
    std::swap(m_runecount_, other->m_runecount_);
    std::swap(m_petcount_, other->m_petcount_);
    std::swap(m_addcount_, other->m_addcount_);
    m_allequip_.Swap(&other->m_allequip_);
    m_allpet_.Swap(&other->m_allpet_);
    m_allrune_.Swap(&other->m_allrune_);
    m_alladdequip_.Swap(&other->m_alladdequip_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Player_Data_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Player_Data_Return_descriptor_;
  metadata.reflection = GM_Player_Data_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Player_Data_Request::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

GM_Player_Data_Request::GM_Player_Data_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Player_Data_Request::InitAsDefaultInstance() {
}

GM_Player_Data_Request::GM_Player_Data_Request(const GM_Player_Data_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Player_Data_Request::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Player_Data_Request::~GM_Player_Data_Request() {
  SharedDtor();
}

void GM_Player_Data_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Player_Data_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Player_Data_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Player_Data_Request_descriptor_;
}

const GM_Player_Data_Request& GM_Player_Data_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_Player_Data_Request* GM_Player_Data_Request::default_instance_ = NULL;

GM_Player_Data_Request* GM_Player_Data_Request::New() const {
  return new GM_Player_Data_Request;
}

void GM_Player_Data_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Player_Data_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Player_Data_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Player_Data_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Player_Data_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Player_Data_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Player_Data_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Player_Data_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Player_Data_Request::MergeFrom(const GM_Player_Data_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Player_Data_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Player_Data_Request::CopyFrom(const GM_Player_Data_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Player_Data_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Player_Data_Request::Swap(GM_Player_Data_Request* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Player_Data_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Player_Data_Request_descriptor_;
  metadata.reflection = GM_Player_Data_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Player_Equip_Request::kMPlayeridFieldNumber;
const int GM_Player_Equip_Request::kMGmidFieldNumber;
#endif  // !_MSC_VER

GM_Player_Equip_Request::GM_Player_Equip_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Player_Equip_Request::InitAsDefaultInstance() {
}

GM_Player_Equip_Request::GM_Player_Equip_Request(const GM_Player_Equip_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Player_Equip_Request::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Player_Equip_Request::~GM_Player_Equip_Request() {
  SharedDtor();
}

void GM_Player_Equip_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Player_Equip_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Player_Equip_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Player_Equip_Request_descriptor_;
}

const GM_Player_Equip_Request& GM_Player_Equip_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerinfo_2etxt();
  return *default_instance_;
}

GM_Player_Equip_Request* GM_Player_Equip_Request::default_instance_ = NULL;

GM_Player_Equip_Request* GM_Player_Equip_Request::New() const {
  return new GM_Player_Equip_Request;
}

void GM_Player_Equip_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Player_Equip_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gmid;
        break;
      }

      // optional int64 m_gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Player_Equip_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  // optional int64 m_gmid = 2;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Player_Equip_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  // optional int64 m_gmid = 2;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Player_Equip_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // optional int64 m_gmid = 2;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Player_Equip_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Player_Equip_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Player_Equip_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Player_Equip_Request::MergeFrom(const GM_Player_Equip_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Player_Equip_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Player_Equip_Request::CopyFrom(const GM_Player_Equip_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Player_Equip_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Player_Equip_Request::Swap(GM_Player_Equip_Request* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Player_Equip_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Player_Equip_Request_descriptor_;
  metadata.reflection = GM_Player_Equip_Request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
