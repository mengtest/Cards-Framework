// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "equip.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMMountEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMountEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMEquipResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUnmountEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUnmountEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMEquipLinkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMEquipLinkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMEquipLinkList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMEquipLinkList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_equip_2etxt() {
  protobuf_AddDesc_equip_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "equip.txt");
  GOOGLE_CHECK(file != NULL);
  GMMountEquip_descriptor_ = file->message_type(0);
  static const int GMMountEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMountEquip, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMountEquip, m_packagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMountEquip, m_position_),
  };
  GMMountEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMountEquip_descriptor_,
      GMMountEquip::default_instance_,
      GMMountEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMountEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMountEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMountEquip));
  GMEquipResult_descriptor_ = file->message_type(1);
  static const int GMEquipResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipResult, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipResult, m_packagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipResult, m_position_),
  };
  GMEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMEquipResult_descriptor_,
      GMEquipResult::default_instance_,
      GMEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMEquipResult));
  GMUnmountEquip_descriptor_ = file->message_type(2);
  static const int GMUnmountEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUnmountEquip, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUnmountEquip, m_packagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUnmountEquip, m_position_),
  };
  GMUnmountEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUnmountEquip_descriptor_,
      GMUnmountEquip::default_instance_,
      GMUnmountEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUnmountEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUnmountEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUnmountEquip));
  GMEquipLinkInfo_descriptor_ = file->message_type(3);
  static const int GMEquipLinkInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkInfo, m_equipgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkInfo, m_equiptypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkInfo, m_linkid_),
  };
  GMEquipLinkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMEquipLinkInfo_descriptor_,
      GMEquipLinkInfo::default_instance_,
      GMEquipLinkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMEquipLinkInfo));
  GMEquipLinkList_descriptor_ = file->message_type(4);
  static const int GMEquipLinkList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkList, m_useness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkList, m_equiplink_),
  };
  GMEquipLinkList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMEquipLinkList_descriptor_,
      GMEquipLinkList::default_instance_,
      GMEquipLinkList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMEquipLinkList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMEquipLinkList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_equip_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMountEquip_descriptor_, &GMMountEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMEquipResult_descriptor_, &GMEquipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUnmountEquip_descriptor_, &GMUnmountEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMEquipLinkInfo_descriptor_, &GMEquipLinkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMEquipLinkList_descriptor_, &GMEquipLinkList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_equip_2etxt() {
  delete GMMountEquip::default_instance_;
  delete GMMountEquip_reflection_;
  delete GMEquipResult::default_instance_;
  delete GMEquipResult_reflection_;
  delete GMUnmountEquip::default_instance_;
  delete GMUnmountEquip_reflection_;
  delete GMEquipLinkInfo::default_instance_;
  delete GMEquipLinkInfo_reflection_;
  delete GMEquipLinkList::default_instance_;
  delete GMEquipLinkList_reflection_;
}

void protobuf_AddDesc_equip_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tequip.txt\"M\n\014GMMountEquip\022\016\n\006m_gmid\030\001 "
    "\002(\003\022\025\n\rm_packagetype\030\002 \002(\005\022\026\n\nm_position"
    "\030\003 \001(\005:\002-1\"\\\n\rGMEquipResult\022\020\n\010m_result\030"
    "\001 \002(\005\022\016\n\006m_gmid\030\002 \002(\003\022\025\n\rm_packagetype\030\003"
    " \002(\005\022\022\n\nm_position\030\004 \001(\005\"O\n\016GMUnmountEqu"
    "ip\022\016\n\006m_gmid\030\001 \002(\003\022\025\n\rm_packagetype\030\002 \002("
    "\005\022\026\n\nm_position\030\003 \001(\005:\002-1\"O\n\017GMEquipLink"
    "Info\022\023\n\013m_equipgmid\030\001 \002(\003\022\025\n\rm_equiptype"
    "id\030\002 \002(\005\022\020\n\010m_linkid\030\003 \002(\005\"K\n\017GMEquipLin"
    "kList\022\021\n\tm_useness\030\001 \002(\005\022%\n\013m_equiplink\030"
    "\002 \003(\0132\020.GMEquipLinkInfo", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equip.txt", &protobuf_RegisterTypes);
  GMMountEquip::default_instance_ = new GMMountEquip();
  GMEquipResult::default_instance_ = new GMEquipResult();
  GMUnmountEquip::default_instance_ = new GMUnmountEquip();
  GMEquipLinkInfo::default_instance_ = new GMEquipLinkInfo();
  GMEquipLinkList::default_instance_ = new GMEquipLinkList();
  GMMountEquip::default_instance_->InitAsDefaultInstance();
  GMEquipResult::default_instance_->InitAsDefaultInstance();
  GMUnmountEquip::default_instance_->InitAsDefaultInstance();
  GMEquipLinkInfo::default_instance_->InitAsDefaultInstance();
  GMEquipLinkList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_equip_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_equip_2etxt {
  StaticDescriptorInitializer_equip_2etxt() {
    protobuf_AddDesc_equip_2etxt();
  }
} static_descriptor_initializer_equip_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMMountEquip::kMGmidFieldNumber;
const int GMMountEquip::kMPackagetypeFieldNumber;
const int GMMountEquip::kMPositionFieldNumber;
#endif  // !_MSC_VER

GMMountEquip::GMMountEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMountEquip::InitAsDefaultInstance() {
}

GMMountEquip::GMMountEquip(const GMMountEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMountEquip::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_packagetype_ = 0;
  m_position_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMountEquip::~GMMountEquip() {
  SharedDtor();
}

void GMMountEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMMountEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMountEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMountEquip_descriptor_;
}

const GMMountEquip& GMMountEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2etxt();
  return *default_instance_;
}

GMMountEquip* GMMountEquip::default_instance_ = NULL;

GMMountEquip* GMMountEquip::New() const {
  return new GMMountEquip;
}

void GMMountEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_packagetype_ = 0;
    m_position_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMountEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_packagetype;
        break;
      }

      // required int32 m_packagetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packagetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packagetype_)));
          set_has_m_packagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMountEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // required int32 m_packagetype = 2;
  if (has_m_packagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_packagetype(), output);
  }

  // optional int32 m_position = 3 [default = -1];
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMountEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // required int32 m_packagetype = 2;
  if (has_m_packagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_packagetype(), target);
  }

  // optional int32 m_position = 3 [default = -1];
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMountEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_packagetype = 2;
    if (has_m_packagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packagetype());
    }

    // optional int32 m_position = 3 [default = -1];
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMountEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMountEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMountEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMountEquip::MergeFrom(const GMMountEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_packagetype()) {
      set_m_packagetype(from.m_packagetype());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMountEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMountEquip::CopyFrom(const GMMountEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMountEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMMountEquip::Swap(GMMountEquip* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_packagetype_, other->m_packagetype_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMountEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMountEquip_descriptor_;
  metadata.reflection = GMMountEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMEquipResult::kMResultFieldNumber;
const int GMEquipResult::kMGmidFieldNumber;
const int GMEquipResult::kMPackagetypeFieldNumber;
const int GMEquipResult::kMPositionFieldNumber;
#endif  // !_MSC_VER

GMEquipResult::GMEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMEquipResult::InitAsDefaultInstance() {
}

GMEquipResult::GMEquipResult(const GMEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMEquipResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_packagetype_ = 0;
  m_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMEquipResult::~GMEquipResult() {
  SharedDtor();
}

void GMEquipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMEquipResult_descriptor_;
}

const GMEquipResult& GMEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2etxt();
  return *default_instance_;
}

GMEquipResult* GMEquipResult::default_instance_ = NULL;

GMEquipResult* GMEquipResult::New() const {
  return new GMEquipResult;
}

void GMEquipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_packagetype_ = 0;
    m_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gmid;
        break;
      }

      // required int64 m_gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_packagetype;
        break;
      }

      // required int32 m_packagetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packagetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packagetype_)));
          set_has_m_packagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int64 m_gmid = 2;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gmid(), output);
  }

  // required int32 m_packagetype = 3;
  if (has_m_packagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_packagetype(), output);
  }

  // optional int32 m_position = 4;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int64 m_gmid = 2;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gmid(), target);
  }

  // required int32 m_packagetype = 3;
  if (has_m_packagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_packagetype(), target);
  }

  // optional int32 m_position = 4;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int64 m_gmid = 2;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_packagetype = 3;
    if (has_m_packagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packagetype());
    }

    // optional int32 m_position = 4;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMEquipResult::MergeFrom(const GMEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_packagetype()) {
      set_m_packagetype(from.m_packagetype());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMEquipResult::CopyFrom(const GMEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMEquipResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMEquipResult::Swap(GMEquipResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_packagetype_, other->m_packagetype_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMEquipResult_descriptor_;
  metadata.reflection = GMEquipResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUnmountEquip::kMGmidFieldNumber;
const int GMUnmountEquip::kMPackagetypeFieldNumber;
const int GMUnmountEquip::kMPositionFieldNumber;
#endif  // !_MSC_VER

GMUnmountEquip::GMUnmountEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUnmountEquip::InitAsDefaultInstance() {
}

GMUnmountEquip::GMUnmountEquip(const GMUnmountEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUnmountEquip::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_packagetype_ = 0;
  m_position_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUnmountEquip::~GMUnmountEquip() {
  SharedDtor();
}

void GMUnmountEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUnmountEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUnmountEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUnmountEquip_descriptor_;
}

const GMUnmountEquip& GMUnmountEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2etxt();
  return *default_instance_;
}

GMUnmountEquip* GMUnmountEquip::default_instance_ = NULL;

GMUnmountEquip* GMUnmountEquip::New() const {
  return new GMUnmountEquip;
}

void GMUnmountEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_packagetype_ = 0;
    m_position_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUnmountEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_packagetype;
        break;
      }

      // required int32 m_packagetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packagetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packagetype_)));
          set_has_m_packagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUnmountEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // required int32 m_packagetype = 2;
  if (has_m_packagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_packagetype(), output);
  }

  // optional int32 m_position = 3 [default = -1];
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUnmountEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // required int32 m_packagetype = 2;
  if (has_m_packagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_packagetype(), target);
  }

  // optional int32 m_position = 3 [default = -1];
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUnmountEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_packagetype = 2;
    if (has_m_packagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packagetype());
    }

    // optional int32 m_position = 3 [default = -1];
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUnmountEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUnmountEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUnmountEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUnmountEquip::MergeFrom(const GMUnmountEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_packagetype()) {
      set_m_packagetype(from.m_packagetype());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUnmountEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUnmountEquip::CopyFrom(const GMUnmountEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUnmountEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMUnmountEquip::Swap(GMUnmountEquip* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_packagetype_, other->m_packagetype_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUnmountEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUnmountEquip_descriptor_;
  metadata.reflection = GMUnmountEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMEquipLinkInfo::kMEquipgmidFieldNumber;
const int GMEquipLinkInfo::kMEquiptypeidFieldNumber;
const int GMEquipLinkInfo::kMLinkidFieldNumber;
#endif  // !_MSC_VER

GMEquipLinkInfo::GMEquipLinkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMEquipLinkInfo::InitAsDefaultInstance() {
}

GMEquipLinkInfo::GMEquipLinkInfo(const GMEquipLinkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMEquipLinkInfo::SharedCtor() {
  _cached_size_ = 0;
  m_equipgmid_ = GOOGLE_LONGLONG(0);
  m_equiptypeid_ = 0;
  m_linkid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMEquipLinkInfo::~GMEquipLinkInfo() {
  SharedDtor();
}

void GMEquipLinkInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMEquipLinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMEquipLinkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMEquipLinkInfo_descriptor_;
}

const GMEquipLinkInfo& GMEquipLinkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2etxt();
  return *default_instance_;
}

GMEquipLinkInfo* GMEquipLinkInfo::default_instance_ = NULL;

GMEquipLinkInfo* GMEquipLinkInfo::New() const {
  return new GMEquipLinkInfo;
}

void GMEquipLinkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_equipgmid_ = GOOGLE_LONGLONG(0);
    m_equiptypeid_ = 0;
    m_linkid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMEquipLinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_equipgmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_equipgmid_)));
          set_has_m_equipgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_equiptypeid;
        break;
      }

      // required int32 m_equiptypeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equiptypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equiptypeid_)));
          set_has_m_equiptypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_linkid;
        break;
      }

      // required int32 m_linkid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_linkid_)));
          set_has_m_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMEquipLinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_equipgmid = 1;
  if (has_m_equipgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_equipgmid(), output);
  }

  // required int32 m_equiptypeid = 2;
  if (has_m_equiptypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_equiptypeid(), output);
  }

  // required int32 m_linkid = 3;
  if (has_m_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_linkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMEquipLinkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_equipgmid = 1;
  if (has_m_equipgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_equipgmid(), target);
  }

  // required int32 m_equiptypeid = 2;
  if (has_m_equiptypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_equiptypeid(), target);
  }

  // required int32 m_linkid = 3;
  if (has_m_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_linkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMEquipLinkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_equipgmid = 1;
    if (has_m_equipgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_equipgmid());
    }

    // required int32 m_equiptypeid = 2;
    if (has_m_equiptypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equiptypeid());
    }

    // required int32 m_linkid = 3;
    if (has_m_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_linkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMEquipLinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMEquipLinkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMEquipLinkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMEquipLinkInfo::MergeFrom(const GMEquipLinkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_equipgmid()) {
      set_m_equipgmid(from.m_equipgmid());
    }
    if (from.has_m_equiptypeid()) {
      set_m_equiptypeid(from.m_equiptypeid());
    }
    if (from.has_m_linkid()) {
      set_m_linkid(from.m_linkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMEquipLinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMEquipLinkInfo::CopyFrom(const GMEquipLinkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMEquipLinkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMEquipLinkInfo::Swap(GMEquipLinkInfo* other) {
  if (other != this) {
    std::swap(m_equipgmid_, other->m_equipgmid_);
    std::swap(m_equiptypeid_, other->m_equiptypeid_);
    std::swap(m_linkid_, other->m_linkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMEquipLinkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMEquipLinkInfo_descriptor_;
  metadata.reflection = GMEquipLinkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMEquipLinkList::kMUsenessFieldNumber;
const int GMEquipLinkList::kMEquiplinkFieldNumber;
#endif  // !_MSC_VER

GMEquipLinkList::GMEquipLinkList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMEquipLinkList::InitAsDefaultInstance() {
}

GMEquipLinkList::GMEquipLinkList(const GMEquipLinkList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMEquipLinkList::SharedCtor() {
  _cached_size_ = 0;
  m_useness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMEquipLinkList::~GMEquipLinkList() {
  SharedDtor();
}

void GMEquipLinkList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMEquipLinkList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMEquipLinkList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMEquipLinkList_descriptor_;
}

const GMEquipLinkList& GMEquipLinkList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2etxt();
  return *default_instance_;
}

GMEquipLinkList* GMEquipLinkList::default_instance_ = NULL;

GMEquipLinkList* GMEquipLinkList::New() const {
  return new GMEquipLinkList;
}

void GMEquipLinkList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_useness_ = 0;
  }
  m_equiplink_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMEquipLinkList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_useness = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_useness_)));
          set_has_m_useness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_equiplink;
        break;
      }

      // repeated .GMEquipLinkInfo m_equiplink = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_equiplink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_equiplink()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_equiplink;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMEquipLinkList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_useness = 1;
  if (has_m_useness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_useness(), output);
  }

  // repeated .GMEquipLinkInfo m_equiplink = 2;
  for (int i = 0; i < this->m_equiplink_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_equiplink(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMEquipLinkList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_useness = 1;
  if (has_m_useness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_useness(), target);
  }

  // repeated .GMEquipLinkInfo m_equiplink = 2;
  for (int i = 0; i < this->m_equiplink_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_equiplink(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMEquipLinkList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_useness = 1;
    if (has_m_useness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_useness());
    }

  }
  // repeated .GMEquipLinkInfo m_equiplink = 2;
  total_size += 1 * this->m_equiplink_size();
  for (int i = 0; i < this->m_equiplink_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_equiplink(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMEquipLinkList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMEquipLinkList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMEquipLinkList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMEquipLinkList::MergeFrom(const GMEquipLinkList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_equiplink_.MergeFrom(from.m_equiplink_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_useness()) {
      set_m_useness(from.m_useness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMEquipLinkList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMEquipLinkList::CopyFrom(const GMEquipLinkList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMEquipLinkList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_equiplink_size(); i++) {
    if (!this->m_equiplink(i).IsInitialized()) return false;
  }
  return true;
}

void GMEquipLinkList::Swap(GMEquipLinkList* other) {
  if (other != this) {
    std::swap(m_useness_, other->m_useness_);
    m_equiplink_.Swap(&other->m_equiplink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMEquipLinkList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMEquipLinkList_descriptor_;
  metadata.reflection = GMEquipLinkList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
