// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mess.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mess.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Room_record_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_record_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Room_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Room_playerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_playerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Room_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Room_record_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_record_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Room_dayscore_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Room_dayscore_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_PlayBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PlayBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mess_2etxt() {
  protobuf_AddDesc_mess_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mess.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Room_record_request_descriptor_ = file->message_type(0);
  static const int GM_Room_record_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_request, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_request, battletype_),
  };
  GM_Room_record_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_record_request_descriptor_,
      GM_Room_record_request::default_instance_,
      GM_Room_record_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_record_request));
  GM_Room_role_descriptor_ = file->message_type(1);
  static const int GM_Room_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_role, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_role, wingolde_),
  };
  GM_Room_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_role_descriptor_,
      GM_Room_role::default_instance_,
      GM_Room_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_role));
  GM_Room_playerCount_descriptor_ = file->message_type(2);
  static const int GM_Room_playerCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_playerCount, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_playerCount, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_playerCount, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_playerCount, increid_),
  };
  GM_Room_playerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_playerCount_descriptor_,
      GM_Room_playerCount::default_instance_,
      GM_Room_playerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_playerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_playerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_playerCount));
  GM_Room_room_descriptor_ = file->message_type(3);
  static const int GM_Room_room_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, playercount_),
  };
  GM_Room_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_room_descriptor_,
      GM_Room_room::default_instance_,
      GM_Room_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_room));
  GM_Room_record_return_descriptor_ = file->message_type(4);
  static const int GM_Room_record_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_return, data_),
  };
  GM_Room_record_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_record_return_descriptor_,
      GM_Room_record_return::default_instance_,
      GM_Room_record_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_record_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_record_return));
  GM_Room_dayscore_return_descriptor_ = file->message_type(5);
  static const int GM_Room_dayscore_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_dayscore_return, score_),
  };
  GM_Room_dayscore_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Room_dayscore_return_descriptor_,
      GM_Room_dayscore_return::default_instance_,
      GM_Room_dayscore_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_dayscore_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Room_dayscore_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Room_dayscore_return));
  GM_PlayBack_descriptor_ = file->message_type(6);
  static const int GM_PlayBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayBack, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayBack, m_messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayBack, m_bytedata_),
  };
  GM_PlayBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayBack_descriptor_,
      GM_PlayBack::default_instance_,
      GM_PlayBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayBack));
  SM_PlayBack_descriptor_ = file->message_type(7);
  static const int SM_PlayBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PlayBack, m_increid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PlayBack, m_playbackdata_),
  };
  SM_PlayBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PlayBack_descriptor_,
      SM_PlayBack::default_instance_,
      SM_PlayBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PlayBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PlayBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PlayBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mess_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_record_request_descriptor_, &GM_Room_record_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_role_descriptor_, &GM_Room_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_playerCount_descriptor_, &GM_Room_playerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_room_descriptor_, &GM_Room_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_record_return_descriptor_, &GM_Room_record_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Room_dayscore_return_descriptor_, &GM_Room_dayscore_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayBack_descriptor_, &GM_PlayBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PlayBack_descriptor_, &SM_PlayBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mess_2etxt() {
  delete GM_Room_record_request::default_instance_;
  delete GM_Room_record_request_reflection_;
  delete GM_Room_role::default_instance_;
  delete GM_Room_role_reflection_;
  delete GM_Room_playerCount::default_instance_;
  delete GM_Room_playerCount_reflection_;
  delete GM_Room_room::default_instance_;
  delete GM_Room_room_reflection_;
  delete GM_Room_record_return::default_instance_;
  delete GM_Room_record_return_reflection_;
  delete GM_Room_dayscore_return::default_instance_;
  delete GM_Room_dayscore_return_reflection_;
  delete GM_PlayBack::default_instance_;
  delete GM_PlayBack_reflection_;
  delete SM_PlayBack::default_instance_;
  delete SM_PlayBack_reflection_;
}

void protobuf_AddDesc_mess_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010mess.txt\":\n\026GM_Room_record_request\022\014\n\004"
    "page\030\001 \002(\005\022\022\n\nbattletype\030\002 \001(\005\"2\n\014GM_Roo"
    "m_role\022\020\n\010rolename\030\001 \002(\t\022\020\n\010wingolde\030\002 \001"
    "(\005\"g\n\023GM_Room_playerCount\022\021\n\tbegintime\030\001"
    " \002(\005\022\017\n\007endtime\030\002 \001(\005\022\033\n\004role\030\003 \003(\0132\r.GM"
    "_Room_role\022\017\n\007increid\030\004 \001(\005\"\211\001\n\014GM_Room_"
    "room\022\021\n\tbegintime\030\001 \002(\005\022\017\n\007endtime\030\002 \001(\005"
    "\022\014\n\004rate\030\003 \001(\005\022\016\n\006roleid\030\004 \001(\005\022\014\n\004name\030\005"
    " \001(\t\022)\n\013playercount\030\006 \003(\0132\024.GM_Room_play"
    "erCount\"E\n\025GM_Room_record_return\022\017\n\007erro"
    "rid\030\001 \002(\005\022\033\n\004data\030\002 \003(\0132\r.GM_Room_room\"("
    "\n\027GM_Room_dayscore_return\022\r\n\005score\030\001 \002(\005"
    "\"H\n\013GM_PlayBack\022\020\n\010m_Result\030\001 \002(\005\022\023\n\013m_M"
    "essageID\030\002 \003(\005\022\022\n\nm_ByteData\030\003 \003(\014\"F\n\013SM"
    "_PlayBack\022\021\n\tm_Increid\030\001 \002(\005\022$\n\016m_Playba"
    "ckData\030\002 \001(\0132\014.GM_PlayBack", 626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mess.txt", &protobuf_RegisterTypes);
  GM_Room_record_request::default_instance_ = new GM_Room_record_request();
  GM_Room_role::default_instance_ = new GM_Room_role();
  GM_Room_playerCount::default_instance_ = new GM_Room_playerCount();
  GM_Room_room::default_instance_ = new GM_Room_room();
  GM_Room_record_return::default_instance_ = new GM_Room_record_return();
  GM_Room_dayscore_return::default_instance_ = new GM_Room_dayscore_return();
  GM_PlayBack::default_instance_ = new GM_PlayBack();
  SM_PlayBack::default_instance_ = new SM_PlayBack();
  GM_Room_record_request::default_instance_->InitAsDefaultInstance();
  GM_Room_role::default_instance_->InitAsDefaultInstance();
  GM_Room_playerCount::default_instance_->InitAsDefaultInstance();
  GM_Room_room::default_instance_->InitAsDefaultInstance();
  GM_Room_record_return::default_instance_->InitAsDefaultInstance();
  GM_Room_dayscore_return::default_instance_->InitAsDefaultInstance();
  GM_PlayBack::default_instance_->InitAsDefaultInstance();
  SM_PlayBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mess_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mess_2etxt {
  StaticDescriptorInitializer_mess_2etxt() {
    protobuf_AddDesc_mess_2etxt();
  }
} static_descriptor_initializer_mess_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Room_record_request::kPageFieldNumber;
const int GM_Room_record_request::kBattletypeFieldNumber;
#endif  // !_MSC_VER

GM_Room_record_request::GM_Room_record_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_record_request::InitAsDefaultInstance() {
}

GM_Room_record_request::GM_Room_record_request(const GM_Room_record_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_record_request::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  battletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_record_request::~GM_Room_record_request() {
  SharedDtor();
}

void GM_Room_record_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Room_record_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_record_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_record_request_descriptor_;
}

const GM_Room_record_request& GM_Room_record_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_Room_record_request* GM_Room_record_request::default_instance_ = NULL;

GM_Room_record_request* GM_Room_record_request::New() const {
  return new GM_Room_record_request;
}

void GM_Room_record_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
    battletype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_record_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battletype;
        break;
      }

      // optional int32 battletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_record_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  // optional int32 battletype = 2;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_record_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  // optional int32 battletype = 2;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_record_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 battletype = 2;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_record_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_record_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_record_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_record_request::MergeFrom(const GM_Room_record_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_record_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_record_request::CopyFrom(const GM_Room_record_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_record_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Room_record_request::Swap(GM_Room_record_request* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(battletype_, other->battletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_record_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_record_request_descriptor_;
  metadata.reflection = GM_Room_record_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Room_role::kRolenameFieldNumber;
const int GM_Room_role::kWingoldeFieldNumber;
#endif  // !_MSC_VER

GM_Room_role::GM_Room_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_role::InitAsDefaultInstance() {
}

GM_Room_role::GM_Room_role(const GM_Room_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_role::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wingolde_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_role::~GM_Room_role() {
  SharedDtor();
}

void GM_Room_role::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_Room_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_role_descriptor_;
}

const GM_Room_role& GM_Room_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_Room_role* GM_Room_role::default_instance_ = NULL;

GM_Room_role* GM_Room_role::New() const {
  return new GM_Room_role;
}

void GM_Room_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    wingolde_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wingolde;
        break;
      }

      // optional int32 wingolde = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingolde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wingolde_)));
          set_has_wingolde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // optional int32 wingolde = 2;
  if (has_wingolde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wingolde(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // optional int32 wingolde = 2;
  if (has_wingolde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wingolde(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rolename = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 wingolde = 2;
    if (has_wingolde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wingolde());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_role::MergeFrom(const GM_Room_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_wingolde()) {
      set_wingolde(from.wingolde());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_role::CopyFrom(const GM_Room_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Room_role::Swap(GM_Room_role* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(wingolde_, other->wingolde_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_role_descriptor_;
  metadata.reflection = GM_Room_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Room_playerCount::kBegintimeFieldNumber;
const int GM_Room_playerCount::kEndtimeFieldNumber;
const int GM_Room_playerCount::kRoleFieldNumber;
const int GM_Room_playerCount::kIncreidFieldNumber;
#endif  // !_MSC_VER

GM_Room_playerCount::GM_Room_playerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_playerCount::InitAsDefaultInstance() {
}

GM_Room_playerCount::GM_Room_playerCount(const GM_Room_playerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_playerCount::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = 0;
  endtime_ = 0;
  increid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_playerCount::~GM_Room_playerCount() {
  SharedDtor();
}

void GM_Room_playerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Room_playerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_playerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_playerCount_descriptor_;
}

const GM_Room_playerCount& GM_Room_playerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_Room_playerCount* GM_Room_playerCount::default_instance_ = NULL;

GM_Room_playerCount* GM_Room_playerCount::New() const {
  return new GM_Room_playerCount;
}

void GM_Room_playerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = 0;
    endtime_ = 0;
    increid_ = 0;
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_playerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // repeated .GM_Room_role role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        if (input->ExpectTag(32)) goto parse_increid;
        break;
      }

      // optional int32 increid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increid_)));
          set_has_increid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_playerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begintime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begintime(), output);
  }

  // optional int32 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  // repeated .GM_Room_role role = 3;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role(i), output);
  }

  // optional int32 increid = 4;
  if (has_increid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->increid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_playerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begintime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begintime(), target);
  }

  // optional int32 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }

  // repeated .GM_Room_role role = 3;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role(i), target);
  }

  // optional int32 increid = 4;
  if (has_increid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->increid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_playerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begintime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

    // optional int32 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional int32 increid = 4;
    if (has_increid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increid());
    }

  }
  // repeated .GM_Room_role role = 3;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_playerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_playerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_playerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_playerCount::MergeFrom(const GM_Room_playerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_increid()) {
      set_increid(from.increid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_playerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_playerCount::CopyFrom(const GM_Room_playerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_playerCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < role_size(); i++) {
    if (!this->role(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Room_playerCount::Swap(GM_Room_playerCount* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    role_.Swap(&other->role_);
    std::swap(increid_, other->increid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_playerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_playerCount_descriptor_;
  metadata.reflection = GM_Room_playerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Room_room::kBegintimeFieldNumber;
const int GM_Room_room::kEndtimeFieldNumber;
const int GM_Room_room::kRateFieldNumber;
const int GM_Room_room::kRoleidFieldNumber;
const int GM_Room_room::kNameFieldNumber;
const int GM_Room_room::kPlayercountFieldNumber;
#endif  // !_MSC_VER

GM_Room_room::GM_Room_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_room::InitAsDefaultInstance() {
}

GM_Room_room::GM_Room_room(const GM_Room_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_room::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = 0;
  endtime_ = 0;
  rate_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_room::~GM_Room_room() {
  SharedDtor();
}

void GM_Room_room::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_Room_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_room_descriptor_;
}

const GM_Room_room& GM_Room_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_Room_room* GM_Room_room::default_instance_ = NULL;

GM_Room_room* GM_Room_room::New() const {
  return new GM_Room_room;
}

void GM_Room_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = 0;
    endtime_ = 0;
    rate_ = 0;
    roleid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  playercount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playercount;
        break;
      }

      // repeated .GM_Room_playerCount playercount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playercount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playercount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playercount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begintime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begintime(), output);
  }

  // optional int32 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // optional int32 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roleid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // repeated .GM_Room_playerCount playercount = 6;
  for (int i = 0; i < this->playercount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playercount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begintime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begintime(), target);
  }

  // optional int32 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // optional int32 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roleid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // repeated .GM_Room_playerCount playercount = 6;
  for (int i = 0; i < this->playercount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playercount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begintime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

    // optional int32 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .GM_Room_playerCount playercount = 6;
  total_size += 1 * this->playercount_size();
  for (int i = 0; i < this->playercount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playercount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_room::MergeFrom(const GM_Room_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  playercount_.MergeFrom(from.playercount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_room::CopyFrom(const GM_Room_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playercount_size(); i++) {
    if (!this->playercount(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Room_room::Swap(GM_Room_room* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(rate_, other->rate_);
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    playercount_.Swap(&other->playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_room_descriptor_;
  metadata.reflection = GM_Room_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Room_record_return::kErroridFieldNumber;
const int GM_Room_record_return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Room_record_return::GM_Room_record_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_record_return::InitAsDefaultInstance() {
}

GM_Room_record_return::GM_Room_record_return(const GM_Room_record_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_record_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_record_return::~GM_Room_record_return() {
  SharedDtor();
}

void GM_Room_record_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Room_record_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_record_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_record_return_descriptor_;
}

const GM_Room_record_return& GM_Room_record_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_Room_record_return* GM_Room_record_return::default_instance_ = NULL;

GM_Room_record_return* GM_Room_record_return::New() const {
  return new GM_Room_record_return;
}

void GM_Room_record_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_record_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_Room_room data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_record_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // repeated .GM_Room_room data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_record_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // repeated .GM_Room_room data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_record_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

  }
  // repeated .GM_Room_room data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_record_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_record_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_record_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_record_return::MergeFrom(const GM_Room_record_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_record_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_record_return::CopyFrom(const GM_Room_record_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_record_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Room_record_return::Swap(GM_Room_record_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_record_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_record_return_descriptor_;
  metadata.reflection = GM_Room_record_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Room_dayscore_return::kScoreFieldNumber;
#endif  // !_MSC_VER

GM_Room_dayscore_return::GM_Room_dayscore_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Room_dayscore_return::InitAsDefaultInstance() {
}

GM_Room_dayscore_return::GM_Room_dayscore_return(const GM_Room_dayscore_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Room_dayscore_return::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Room_dayscore_return::~GM_Room_dayscore_return() {
  SharedDtor();
}

void GM_Room_dayscore_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Room_dayscore_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Room_dayscore_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Room_dayscore_return_descriptor_;
}

const GM_Room_dayscore_return& GM_Room_dayscore_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_Room_dayscore_return* GM_Room_dayscore_return::default_instance_ = NULL;

GM_Room_dayscore_return* GM_Room_dayscore_return::New() const {
  return new GM_Room_dayscore_return;
}

void GM_Room_dayscore_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Room_dayscore_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Room_dayscore_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Room_dayscore_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Room_dayscore_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Room_dayscore_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Room_dayscore_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Room_dayscore_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Room_dayscore_return::MergeFrom(const GM_Room_dayscore_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Room_dayscore_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Room_dayscore_return::CopyFrom(const GM_Room_dayscore_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Room_dayscore_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Room_dayscore_return::Swap(GM_Room_dayscore_return* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Room_dayscore_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Room_dayscore_return_descriptor_;
  metadata.reflection = GM_Room_dayscore_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayBack::kMResultFieldNumber;
const int GM_PlayBack::kMMessageIDFieldNumber;
const int GM_PlayBack::kMByteDataFieldNumber;
#endif  // !_MSC_VER

GM_PlayBack::GM_PlayBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayBack::InitAsDefaultInstance() {
}

GM_PlayBack::GM_PlayBack(const GM_PlayBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayBack::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayBack::~GM_PlayBack() {
  SharedDtor();
}

void GM_PlayBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayBack_descriptor_;
}

const GM_PlayBack& GM_PlayBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

GM_PlayBack* GM_PlayBack::default_instance_ = NULL;

GM_PlayBack* GM_PlayBack::New() const {
  return new GM_PlayBack;
}

void GM_PlayBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  m_messageid_.Clear();
  m_bytedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_MessageID;
        break;
      }

      // repeated int32 m_MessageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_MessageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_messageid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_messageid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_MessageID;
        if (input->ExpectTag(26)) goto parse_m_ByteData;
        break;
      }

      // repeated bytes m_ByteData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ByteData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_m_bytedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_ByteData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated int32 m_MessageID = 2;
  for (int i = 0; i < this->m_messageid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_messageid(i), output);
  }

  // repeated bytes m_ByteData = 3;
  for (int i = 0; i < this->m_bytedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->m_bytedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated int32 m_MessageID = 2;
  for (int i = 0; i < this->m_messageid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_messageid(i), target);
  }

  // repeated bytes m_ByteData = 3;
  for (int i = 0; i < this->m_bytedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->m_bytedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated int32 m_MessageID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_messageid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_messageid(i));
    }
    total_size += 1 * this->m_messageid_size() + data_size;
  }

  // repeated bytes m_ByteData = 3;
  total_size += 1 * this->m_bytedata_size();
  for (int i = 0; i < this->m_bytedata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->m_bytedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayBack::MergeFrom(const GM_PlayBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_messageid_.MergeFrom(from.m_messageid_);
  m_bytedata_.MergeFrom(from.m_bytedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayBack::CopyFrom(const GM_PlayBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayBack::Swap(GM_PlayBack* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    m_messageid_.Swap(&other->m_messageid_);
    m_bytedata_.Swap(&other->m_bytedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayBack_descriptor_;
  metadata.reflection = GM_PlayBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_PlayBack::kMIncreidFieldNumber;
const int SM_PlayBack::kMPlaybackDataFieldNumber;
#endif  // !_MSC_VER

SM_PlayBack::SM_PlayBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PlayBack::InitAsDefaultInstance() {
  m_playbackdata_ = const_cast< ::GM_PlayBack*>(&::GM_PlayBack::default_instance());
}

SM_PlayBack::SM_PlayBack(const SM_PlayBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PlayBack::SharedCtor() {
  _cached_size_ = 0;
  m_increid_ = 0;
  m_playbackdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PlayBack::~SM_PlayBack() {
  SharedDtor();
}

void SM_PlayBack::SharedDtor() {
  if (this != default_instance_) {
    delete m_playbackdata_;
  }
}

void SM_PlayBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PlayBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PlayBack_descriptor_;
}

const SM_PlayBack& SM_PlayBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mess_2etxt();
  return *default_instance_;
}

SM_PlayBack* SM_PlayBack::default_instance_ = NULL;

SM_PlayBack* SM_PlayBack::New() const {
  return new SM_PlayBack;
}

void SM_PlayBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_increid_ = 0;
    if (has_m_playbackdata()) {
      if (m_playbackdata_ != NULL) m_playbackdata_->::GM_PlayBack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PlayBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Increid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_increid_)));
          set_has_m_increid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_PlaybackData;
        break;
      }

      // optional .GM_PlayBack m_PlaybackData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PlaybackData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_playbackdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PlayBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Increid = 1;
  if (has_m_increid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_increid(), output);
  }

  // optional .GM_PlayBack m_PlaybackData = 2;
  if (has_m_playbackdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_playbackdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PlayBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Increid = 1;
  if (has_m_increid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_increid(), target);
  }

  // optional .GM_PlayBack m_PlaybackData = 2;
  if (has_m_playbackdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_playbackdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PlayBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Increid = 1;
    if (has_m_increid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_increid());
    }

    // optional .GM_PlayBack m_PlaybackData = 2;
    if (has_m_playbackdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_playbackdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PlayBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PlayBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PlayBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PlayBack::MergeFrom(const SM_PlayBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_increid()) {
      set_m_increid(from.m_increid());
    }
    if (from.has_m_playbackdata()) {
      mutable_m_playbackdata()->::GM_PlayBack::MergeFrom(from.m_playbackdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PlayBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PlayBack::CopyFrom(const SM_PlayBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PlayBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_playbackdata()) {
    if (!this->m_playbackdata().IsInitialized()) return false;
  }
  return true;
}

void SM_PlayBack::Swap(SM_PlayBack* other) {
  if (other != this) {
    std::swap(m_increid_, other->m_increid_);
    std::swap(m_playbackdata_, other->m_playbackdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PlayBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PlayBack_descriptor_;
  metadata.reflection = SM_PlayBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
