// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Title.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Title.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_EquipTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EquipTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_AllTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_AllTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LimitTitleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LimitTitleNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fTitle_2etxt() {
  protobuf_AddDesc_SP_5fTitle_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Title.txt");
  GOOGLE_CHECK(file != NULL);
  DB_EquipTitle_descriptor_ = file->message_type(0);
  static const int DB_EquipTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipTitle, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipTitle, m_equipid_),
  };
  DB_EquipTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EquipTitle_descriptor_,
      DB_EquipTitle::default_instance_,
      DB_EquipTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EquipTitle));
  DB_AllTitle_descriptor_ = file->message_type(1);
  static const int DB_AllTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AllTitle, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AllTitle, m_titles_),
  };
  DB_AllTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_AllTitle_descriptor_,
      DB_AllTitle::default_instance_,
      DB_AllTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AllTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_AllTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_AllTitle));
  GM_Title_descriptor_ = file->message_type(2);
  static const int GM_Title_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Title, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Title, titletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Title, endtime_),
  };
  GM_Title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Title_descriptor_,
      GM_Title::default_instance_,
      GM_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Title, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Title));
  DB_LimitTitleNotify_descriptor_ = file->message_type(3);
  static const int DB_LimitTitleNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitTitleNotify, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitTitleNotify, m_isdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitTitleNotify, m_titleids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitTitleNotify, m_titletype_),
  };
  DB_LimitTitleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LimitTitleNotify_descriptor_,
      DB_LimitTitleNotify::default_instance_,
      DB_LimitTitleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitTitleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LimitTitleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LimitTitleNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fTitle_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EquipTitle_descriptor_, &DB_EquipTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_AllTitle_descriptor_, &DB_AllTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Title_descriptor_, &GM_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LimitTitleNotify_descriptor_, &DB_LimitTitleNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fTitle_2etxt() {
  delete DB_EquipTitle::default_instance_;
  delete DB_EquipTitle_reflection_;
  delete DB_AllTitle::default_instance_;
  delete DB_AllTitle_reflection_;
  delete GM_Title::default_instance_;
  delete GM_Title_reflection_;
  delete DB_LimitTitleNotify::default_instance_;
  delete DB_LimitTitleNotify_reflection_;
}

void protobuf_AddDesc_SP_5fTitle_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014SP_Title.txt\"4\n\rDB_EquipTitle\022\020\n\010m_rol"
    "eId\030\001 \002(\005\022\021\n\tm_equipId\030\002 \003(\005\"<\n\013DB_AllTi"
    "tle\022\020\n\010m_roleId\030\001 \002(\005\022\033\n\010m_titles\030\002 \003(\0132"
    "\t.GM_Title\"\?\n\010GM_Title\022\017\n\007titleId\030\001 \002(\005\022"
    "\021\n\ttitletype\030\002 \001(\005\022\017\n\007endtime\030\003 \001(\005\"d\n\023D"
    "B_LimitTitleNotify\022\020\n\010m_roleid\030\001 \002(\005\022\022\n\n"
    "m_isdelete\030\002 \001(\005\022\022\n\nm_titleids\030\003 \001(\005\022\023\n\013"
    "m_titletype\030\004 \001(\005", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Title.txt", &protobuf_RegisterTypes);
  DB_EquipTitle::default_instance_ = new DB_EquipTitle();
  DB_AllTitle::default_instance_ = new DB_AllTitle();
  GM_Title::default_instance_ = new GM_Title();
  DB_LimitTitleNotify::default_instance_ = new DB_LimitTitleNotify();
  DB_EquipTitle::default_instance_->InitAsDefaultInstance();
  DB_AllTitle::default_instance_->InitAsDefaultInstance();
  GM_Title::default_instance_->InitAsDefaultInstance();
  DB_LimitTitleNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fTitle_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fTitle_2etxt {
  StaticDescriptorInitializer_SP_5fTitle_2etxt() {
    protobuf_AddDesc_SP_5fTitle_2etxt();
  }
} static_descriptor_initializer_SP_5fTitle_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int DB_EquipTitle::kMRoleIdFieldNumber;
const int DB_EquipTitle::kMEquipIdFieldNumber;
#endif  // !_MSC_VER

DB_EquipTitle::DB_EquipTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_EquipTitle::InitAsDefaultInstance() {
}

DB_EquipTitle::DB_EquipTitle(const DB_EquipTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_EquipTitle::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EquipTitle::~DB_EquipTitle() {
  SharedDtor();
}

void DB_EquipTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EquipTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EquipTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EquipTitle_descriptor_;
}

const DB_EquipTitle& DB_EquipTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTitle_2etxt();
  return *default_instance_;
}

DB_EquipTitle* DB_EquipTitle::default_instance_ = NULL;

DB_EquipTitle* DB_EquipTitle::New() const {
  return new DB_EquipTitle;
}

void DB_EquipTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_equipid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EquipTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_equipId;
        break;
      }

      // repeated int32 m_equipId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_equipid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_equipid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_equipId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EquipTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated int32 m_equipId = 2;
  for (int i = 0; i < this->m_equipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_equipid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EquipTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated int32 m_equipId = 2;
  for (int i = 0; i < this->m_equipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_equipid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EquipTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated int32 m_equipId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_equipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_equipid(i));
    }
    total_size += 1 * this->m_equipid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EquipTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EquipTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EquipTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EquipTitle::MergeFrom(const DB_EquipTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_equipid_.MergeFrom(from.m_equipid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EquipTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EquipTitle::CopyFrom(const DB_EquipTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EquipTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_EquipTitle::Swap(DB_EquipTitle* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_equipid_.Swap(&other->m_equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EquipTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EquipTitle_descriptor_;
  metadata.reflection = DB_EquipTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_AllTitle::kMRoleIdFieldNumber;
const int DB_AllTitle::kMTitlesFieldNumber;
#endif  // !_MSC_VER

DB_AllTitle::DB_AllTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_AllTitle::InitAsDefaultInstance() {
}

DB_AllTitle::DB_AllTitle(const DB_AllTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_AllTitle::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_AllTitle::~DB_AllTitle() {
  SharedDtor();
}

void DB_AllTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_AllTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_AllTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_AllTitle_descriptor_;
}

const DB_AllTitle& DB_AllTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTitle_2etxt();
  return *default_instance_;
}

DB_AllTitle* DB_AllTitle::default_instance_ = NULL;

DB_AllTitle* DB_AllTitle::New() const {
  return new DB_AllTitle;
}

void DB_AllTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_titles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_AllTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_titles;
        break;
      }

      // repeated .GM_Title m_titles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_titles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_titles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_titles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_AllTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_Title m_titles = 2;
  for (int i = 0; i < this->m_titles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_titles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_AllTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_Title m_titles = 2;
  for (int i = 0; i < this->m_titles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_titles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_AllTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_Title m_titles = 2;
  total_size += 1 * this->m_titles_size();
  for (int i = 0; i < this->m_titles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_titles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_AllTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_AllTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_AllTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_AllTitle::MergeFrom(const DB_AllTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_titles_.MergeFrom(from.m_titles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_AllTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_AllTitle::CopyFrom(const DB_AllTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_AllTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_titles_size(); i++) {
    if (!this->m_titles(i).IsInitialized()) return false;
  }
  return true;
}

void DB_AllTitle::Swap(DB_AllTitle* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_titles_.Swap(&other->m_titles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_AllTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_AllTitle_descriptor_;
  metadata.reflection = DB_AllTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Title::kTitleIdFieldNumber;
const int GM_Title::kTitletypeFieldNumber;
const int GM_Title::kEndtimeFieldNumber;
#endif  // !_MSC_VER

GM_Title::GM_Title()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Title::InitAsDefaultInstance() {
}

GM_Title::GM_Title(const GM_Title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Title::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  titletype_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Title::~GM_Title() {
  SharedDtor();
}

void GM_Title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Title_descriptor_;
}

const GM_Title& GM_Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTitle_2etxt();
  return *default_instance_;
}

GM_Title* GM_Title::default_instance_ = NULL;

GM_Title* GM_Title::New() const {
  return new GM_Title;
}

void GM_Title::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
    titletype_ = 0;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titletype;
        break;
      }

      // optional int32 titletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titletype_)));
          set_has_titletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // optional int32 titletype = 2;
  if (has_titletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titletype(), output);
  }

  // optional int32 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleId = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // optional int32 titletype = 2;
  if (has_titletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titletype(), target);
  }

  // optional int32 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 titletype = 2;
    if (has_titletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titletype());
    }

    // optional int32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Title*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Title::MergeFrom(const GM_Title& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_titletype()) {
      set_titletype(from.titletype());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Title::CopyFrom(const GM_Title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Title::Swap(GM_Title* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(titletype_, other->titletype_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Title_descriptor_;
  metadata.reflection = GM_Title_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_LimitTitleNotify::kMRoleidFieldNumber;
const int DB_LimitTitleNotify::kMIsdeleteFieldNumber;
const int DB_LimitTitleNotify::kMTitleidsFieldNumber;
const int DB_LimitTitleNotify::kMTitletypeFieldNumber;
#endif  // !_MSC_VER

DB_LimitTitleNotify::DB_LimitTitleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_LimitTitleNotify::InitAsDefaultInstance() {
}

DB_LimitTitleNotify::DB_LimitTitleNotify(const DB_LimitTitleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_LimitTitleNotify::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_isdelete_ = 0;
  m_titleids_ = 0;
  m_titletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LimitTitleNotify::~DB_LimitTitleNotify() {
  SharedDtor();
}

void DB_LimitTitleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_LimitTitleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_LimitTitleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LimitTitleNotify_descriptor_;
}

const DB_LimitTitleNotify& DB_LimitTitleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTitle_2etxt();
  return *default_instance_;
}

DB_LimitTitleNotify* DB_LimitTitleNotify::default_instance_ = NULL;

DB_LimitTitleNotify* DB_LimitTitleNotify::New() const {
  return new DB_LimitTitleNotify;
}

void DB_LimitTitleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_isdelete_ = 0;
    m_titleids_ = 0;
    m_titletype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LimitTitleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_isdelete;
        break;
      }

      // optional int32 m_isdelete = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isdelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isdelete_)));
          set_has_m_isdelete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_titleids;
        break;
      }

      // optional int32 m_titleids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_titleids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_titleids_)));
          set_has_m_titleids();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_titletype;
        break;
      }

      // optional int32 m_titletype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_titletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_titletype_)));
          set_has_m_titletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LimitTitleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_isdelete = 2;
  if (has_m_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_isdelete(), output);
  }

  // optional int32 m_titleids = 3;
  if (has_m_titleids()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_titleids(), output);
  }

  // optional int32 m_titletype = 4;
  if (has_m_titletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_titletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LimitTitleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_isdelete = 2;
  if (has_m_isdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_isdelete(), target);
  }

  // optional int32 m_titleids = 3;
  if (has_m_titleids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_titleids(), target);
  }

  // optional int32 m_titletype = 4;
  if (has_m_titletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_titletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LimitTitleNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_isdelete = 2;
    if (has_m_isdelete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isdelete());
    }

    // optional int32 m_titleids = 3;
    if (has_m_titleids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_titleids());
    }

    // optional int32 m_titletype = 4;
    if (has_m_titletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_titletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_LimitTitleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LimitTitleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LimitTitleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LimitTitleNotify::MergeFrom(const DB_LimitTitleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_isdelete()) {
      set_m_isdelete(from.m_isdelete());
    }
    if (from.has_m_titleids()) {
      set_m_titleids(from.m_titleids());
    }
    if (from.has_m_titletype()) {
      set_m_titletype(from.m_titletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LimitTitleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LimitTitleNotify::CopyFrom(const DB_LimitTitleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LimitTitleNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_LimitTitleNotify::Swap(DB_LimitTitleNotify* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_isdelete_, other->m_isdelete_);
    std::swap(m_titleids_, other->m_titleids_);
    std::swap(m_titletype_, other->m_titletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LimitTitleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LimitTitleNotify_descriptor_;
  metadata.reflection = DB_LimitTitleNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
