// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Chat.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Chat.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_SystemChatPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SystemChatPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ToolAudios_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ToolAudios_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AudiosContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AudiosContent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fChat_2etxt() {
  protobuf_AddDesc_SP_5fChat_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Chat.txt");
  GOOGLE_CHECK(file != NULL);
  GM_SystemChatPack_descriptor_ = file->message_type(0);
  static const int GM_SystemChatPack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, colortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, sendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, sendstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, channel_),
  };
  GM_SystemChatPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SystemChatPack_descriptor_,
      GM_SystemChatPack::default_instance_,
      GM_SystemChatPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SystemChatPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SystemChatPack));
  GM_ToolAudios_descriptor_ = file->message_type(1);
  static const int GM_ToolAudios_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ToolAudios, audiostart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ToolAudios, audioend_),
  };
  GM_ToolAudios_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ToolAudios_descriptor_,
      GM_ToolAudios::default_instance_,
      GM_ToolAudios_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ToolAudios, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ToolAudios, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ToolAudios));
  GM_AudiosContent_descriptor_ = file->message_type(2);
  static const int GM_AudiosContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AudiosContent, audiosnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AudiosContent, audios_),
  };
  GM_AudiosContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AudiosContent_descriptor_,
      GM_AudiosContent::default_instance_,
      GM_AudiosContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AudiosContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AudiosContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AudiosContent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fChat_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SystemChatPack_descriptor_, &GM_SystemChatPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ToolAudios_descriptor_, &GM_ToolAudios::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AudiosContent_descriptor_, &GM_AudiosContent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fChat_2etxt() {
  delete GM_SystemChatPack::default_instance_;
  delete GM_SystemChatPack_reflection_;
  delete GM_ToolAudios::default_instance_;
  delete GM_ToolAudios_reflection_;
  delete GM_AudiosContent::default_instance_;
  delete GM_AudiosContent_reflection_;
}

void protobuf_AddDesc_SP_5fChat_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SP_Chat.txt\"l\n\021GM_SystemChatPack\022\021\n\tco"
    "lorType\030\001 \002(\005\022\020\n\010sendType\030\002 \002(\005\022\020\n\010userD"
    "ata\030\003 \001(\t\022\017\n\007sendStr\030\004 \003(\t\022\017\n\007channel\030\005 "
    "\002(\005\"5\n\rGM_ToolAudios\022\022\n\naudioStart\030\001 \002(\005"
    "\022\020\n\010audioEnd\030\002 \002(\005\"5\n\020GM_AudiosContent\022\021"
    "\n\taudiosNum\030\001 \002(\005\022\016\n\006audios\030\002 \003(\014", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Chat.txt", &protobuf_RegisterTypes);
  GM_SystemChatPack::default_instance_ = new GM_SystemChatPack();
  GM_ToolAudios::default_instance_ = new GM_ToolAudios();
  GM_AudiosContent::default_instance_ = new GM_AudiosContent();
  GM_SystemChatPack::default_instance_->InitAsDefaultInstance();
  GM_ToolAudios::default_instance_->InitAsDefaultInstance();
  GM_AudiosContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fChat_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fChat_2etxt {
  StaticDescriptorInitializer_SP_5fChat_2etxt() {
    protobuf_AddDesc_SP_5fChat_2etxt();
  }
} static_descriptor_initializer_SP_5fChat_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_SystemChatPack::kColorTypeFieldNumber;
const int GM_SystemChatPack::kSendTypeFieldNumber;
const int GM_SystemChatPack::kUserDataFieldNumber;
const int GM_SystemChatPack::kSendStrFieldNumber;
const int GM_SystemChatPack::kChannelFieldNumber;
#endif  // !_MSC_VER

GM_SystemChatPack::GM_SystemChatPack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SystemChatPack::InitAsDefaultInstance() {
}

GM_SystemChatPack::GM_SystemChatPack(const GM_SystemChatPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SystemChatPack::SharedCtor() {
  _cached_size_ = 0;
  colortype_ = 0;
  sendtype_ = 0;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SystemChatPack::~GM_SystemChatPack() {
  SharedDtor();
}

void GM_SystemChatPack::SharedDtor() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void GM_SystemChatPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SystemChatPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SystemChatPack_descriptor_;
}

const GM_SystemChatPack& GM_SystemChatPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChat_2etxt();
  return *default_instance_;
}

GM_SystemChatPack* GM_SystemChatPack::default_instance_ = NULL;

GM_SystemChatPack* GM_SystemChatPack::New() const {
  return new GM_SystemChatPack;
}

void GM_SystemChatPack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    colortype_ = 0;
    sendtype_ = 0;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::kEmptyString) {
        userdata_->clear();
      }
    }
    channel_ = 0;
  }
  sendstr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SystemChatPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 colorType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colortype_)));
          set_has_colortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendType;
        break;
      }

      // required int32 sendType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtype_)));
          set_has_sendtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userData;
        break;
      }

      // optional string userData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendStr;
        break;
      }

      // repeated string sendStr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sendstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendstr(this->sendstr_size() - 1).data(),
            this->sendstr(this->sendstr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendStr;
        if (input->ExpectTag(40)) goto parse_channel;
        break;
      }

      // required int32 channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SystemChatPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 colorType = 1;
  if (has_colortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->colortype(), output);
  }

  // required int32 sendType = 2;
  if (has_sendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sendtype(), output);
  }

  // optional string userData = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userdata(), output);
  }

  // repeated string sendStr = 4;
  for (int i = 0; i < this->sendstr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sendstr(i).data(), this->sendstr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sendstr(i), output);
  }

  // required int32 channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SystemChatPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 colorType = 1;
  if (has_colortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->colortype(), target);
  }

  // required int32 sendType = 2;
  if (has_sendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sendtype(), target);
  }

  // optional string userData = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userdata(), target);
  }

  // repeated string sendStr = 4;
  for (int i = 0; i < this->sendstr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendstr(i).data(), this->sendstr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->sendstr(i), target);
  }

  // required int32 channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SystemChatPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 colorType = 1;
    if (has_colortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colortype());
    }

    // required int32 sendType = 2;
    if (has_sendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtype());
    }

    // optional string userData = 3;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

    // required int32 channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  // repeated string sendStr = 4;
  total_size += 1 * this->sendstr_size();
  for (int i = 0; i < this->sendstr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sendstr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SystemChatPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SystemChatPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SystemChatPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SystemChatPack::MergeFrom(const GM_SystemChatPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  sendstr_.MergeFrom(from.sendstr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_colortype()) {
      set_colortype(from.colortype());
    }
    if (from.has_sendtype()) {
      set_sendtype(from.sendtype());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SystemChatPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SystemChatPack::CopyFrom(const GM_SystemChatPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SystemChatPack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void GM_SystemChatPack::Swap(GM_SystemChatPack* other) {
  if (other != this) {
    std::swap(colortype_, other->colortype_);
    std::swap(sendtype_, other->sendtype_);
    std::swap(userdata_, other->userdata_);
    sendstr_.Swap(&other->sendstr_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SystemChatPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SystemChatPack_descriptor_;
  metadata.reflection = GM_SystemChatPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ToolAudios::kAudioStartFieldNumber;
const int GM_ToolAudios::kAudioEndFieldNumber;
#endif  // !_MSC_VER

GM_ToolAudios::GM_ToolAudios()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ToolAudios::InitAsDefaultInstance() {
}

GM_ToolAudios::GM_ToolAudios(const GM_ToolAudios& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ToolAudios::SharedCtor() {
  _cached_size_ = 0;
  audiostart_ = 0;
  audioend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ToolAudios::~GM_ToolAudios() {
  SharedDtor();
}

void GM_ToolAudios::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ToolAudios::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ToolAudios::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ToolAudios_descriptor_;
}

const GM_ToolAudios& GM_ToolAudios::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChat_2etxt();
  return *default_instance_;
}

GM_ToolAudios* GM_ToolAudios::default_instance_ = NULL;

GM_ToolAudios* GM_ToolAudios::New() const {
  return new GM_ToolAudios;
}

void GM_ToolAudios::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    audiostart_ = 0;
    audioend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ToolAudios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 audioStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiostart_)));
          set_has_audiostart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_audioEnd;
        break;
      }

      // required int32 audioEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audioend_)));
          set_has_audioend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ToolAudios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 audioStart = 1;
  if (has_audiostart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->audiostart(), output);
  }

  // required int32 audioEnd = 2;
  if (has_audioend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->audioend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ToolAudios::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 audioStart = 1;
  if (has_audiostart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->audiostart(), target);
  }

  // required int32 audioEnd = 2;
  if (has_audioend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->audioend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ToolAudios::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 audioStart = 1;
    if (has_audiostart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiostart());
    }

    // required int32 audioEnd = 2;
    if (has_audioend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audioend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ToolAudios::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ToolAudios* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ToolAudios*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ToolAudios::MergeFrom(const GM_ToolAudios& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiostart()) {
      set_audiostart(from.audiostart());
    }
    if (from.has_audioend()) {
      set_audioend(from.audioend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ToolAudios::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ToolAudios::CopyFrom(const GM_ToolAudios& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ToolAudios::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_ToolAudios::Swap(GM_ToolAudios* other) {
  if (other != this) {
    std::swap(audiostart_, other->audiostart_);
    std::swap(audioend_, other->audioend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ToolAudios::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ToolAudios_descriptor_;
  metadata.reflection = GM_ToolAudios_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AudiosContent::kAudiosNumFieldNumber;
const int GM_AudiosContent::kAudiosFieldNumber;
#endif  // !_MSC_VER

GM_AudiosContent::GM_AudiosContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AudiosContent::InitAsDefaultInstance() {
}

GM_AudiosContent::GM_AudiosContent(const GM_AudiosContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AudiosContent::SharedCtor() {
  _cached_size_ = 0;
  audiosnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AudiosContent::~GM_AudiosContent() {
  SharedDtor();
}

void GM_AudiosContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AudiosContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AudiosContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AudiosContent_descriptor_;
}

const GM_AudiosContent& GM_AudiosContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChat_2etxt();
  return *default_instance_;
}

GM_AudiosContent* GM_AudiosContent::default_instance_ = NULL;

GM_AudiosContent* GM_AudiosContent::New() const {
  return new GM_AudiosContent;
}

void GM_AudiosContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    audiosnum_ = 0;
  }
  audios_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AudiosContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 audiosNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audiosnum_)));
          set_has_audiosnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_audios;
        break;
      }

      // repeated bytes audios = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audios:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_audios()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_audios;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AudiosContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 audiosNum = 1;
  if (has_audiosnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->audiosnum(), output);
  }

  // repeated bytes audios = 2;
  for (int i = 0; i < this->audios_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->audios(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AudiosContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 audiosNum = 1;
  if (has_audiosnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->audiosnum(), target);
  }

  // repeated bytes audios = 2;
  for (int i = 0; i < this->audios_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->audios(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AudiosContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 audiosNum = 1;
    if (has_audiosnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audiosnum());
    }

  }
  // repeated bytes audios = 2;
  total_size += 1 * this->audios_size();
  for (int i = 0; i < this->audios_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->audios(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AudiosContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AudiosContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AudiosContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AudiosContent::MergeFrom(const GM_AudiosContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  audios_.MergeFrom(from.audios_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiosnum()) {
      set_audiosnum(from.audiosnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AudiosContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AudiosContent::CopyFrom(const GM_AudiosContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AudiosContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AudiosContent::Swap(GM_AudiosContent* other) {
  if (other != this) {
    std::swap(audiosnum_, other->audiosnum_);
    audios_.Swap(&other->audios_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AudiosContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AudiosContent_descriptor_;
  metadata.reflection = GM_AudiosContent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
