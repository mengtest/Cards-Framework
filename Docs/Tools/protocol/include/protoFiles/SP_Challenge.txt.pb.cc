// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Challenge.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Challenge.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_Challenge_Data_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Data_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Data_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Data_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Store_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Store_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Store_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Store_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Pet_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Pet_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Pet_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Pet_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Rent_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Rent_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Rent_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Rent_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Battle_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Battle_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Challenge_Battle_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Challenge_Battle_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fChallenge_2etxt() {
  protobuf_AddDesc_SP_5fChallenge_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Challenge.txt");
  GOOGLE_CHECK(file != NULL);
  SM_Challenge_Data_Request_descriptor_ = file->message_type(0);
  static const int SM_Challenge_Data_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Request, roleid_),
  };
  SM_Challenge_Data_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Data_Request_descriptor_,
      SM_Challenge_Data_Request::default_instance_,
      SM_Challenge_Data_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Data_Request));
  SM_Challenge_Data_Return_descriptor_ = file->message_type(1);
  static const int SM_Challenge_Data_Return_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, resettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, fighttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, rolefortuneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, petfortuneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, fortunereset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, rentgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, sendgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, hpdecrease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, matcher_),
  };
  SM_Challenge_Data_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Data_Return_descriptor_,
      SM_Challenge_Data_Return::default_instance_,
      SM_Challenge_Data_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Data_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Data_Return));
  SM_Challenge_Store_Return_descriptor_ = file->message_type(2);
  static const int SM_Challenge_Store_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Return, data_),
  };
  SM_Challenge_Store_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Store_Return_descriptor_,
      SM_Challenge_Store_Return::default_instance_,
      SM_Challenge_Store_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Store_Return));
  SM_Challenge_Store_Info_descriptor_ = file->message_type(3);
  static const int SM_Challenge_Store_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Info, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Info, count_),
  };
  SM_Challenge_Store_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Store_Info_descriptor_,
      SM_Challenge_Store_Info::default_instance_,
      SM_Challenge_Store_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Store_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Store_Info));
  SM_Challenge_Pet_Return_descriptor_ = file->message_type(4);
  static const int SM_Challenge_Pet_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Return, data_),
  };
  SM_Challenge_Pet_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Pet_Return_descriptor_,
      SM_Challenge_Pet_Return::default_instance_,
      SM_Challenge_Pet_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Pet_Return));
  SM_Challenge_Pet_Info_descriptor_ = file->message_type(5);
  static const int SM_Challenge_Pet_Info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, hpdecrease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, onbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, petid_),
  };
  SM_Challenge_Pet_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Pet_Info_descriptor_,
      SM_Challenge_Pet_Info::default_instance_,
      SM_Challenge_Pet_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Pet_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Pet_Info));
  SM_Challenge_Rent_Return_descriptor_ = file->message_type(6);
  static const int SM_Challenge_Rent_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Return, data_),
  };
  SM_Challenge_Rent_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Rent_Return_descriptor_,
      SM_Challenge_Rent_Return::default_instance_,
      SM_Challenge_Rent_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Rent_Return));
  SM_Challenge_Rent_Info_descriptor_ = file->message_type(7);
  static const int SM_Challenge_Rent_Info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, evolve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, renttimes_),
  };
  SM_Challenge_Rent_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Rent_Info_descriptor_,
      SM_Challenge_Rent_Info::default_instance_,
      SM_Challenge_Rent_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Rent_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Rent_Info));
  SM_Challenge_Battle_Entry_descriptor_ = file->message_type(8);
  static const int SM_Challenge_Battle_Entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Entry, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Entry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Entry, battleid_),
  };
  SM_Challenge_Battle_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Battle_Entry_descriptor_,
      SM_Challenge_Battle_Entry::default_instance_,
      SM_Challenge_Battle_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Battle_Entry));
  SM_Challenge_Battle_Return_descriptor_ = file->message_type(9);
  static const int SM_Challenge_Battle_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Return, data_),
  };
  SM_Challenge_Battle_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Challenge_Battle_Return_descriptor_,
      SM_Challenge_Battle_Return::default_instance_,
      SM_Challenge_Battle_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Challenge_Battle_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Challenge_Battle_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fChallenge_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Data_Request_descriptor_, &SM_Challenge_Data_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Data_Return_descriptor_, &SM_Challenge_Data_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Store_Return_descriptor_, &SM_Challenge_Store_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Store_Info_descriptor_, &SM_Challenge_Store_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Pet_Return_descriptor_, &SM_Challenge_Pet_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Pet_Info_descriptor_, &SM_Challenge_Pet_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Rent_Return_descriptor_, &SM_Challenge_Rent_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Rent_Info_descriptor_, &SM_Challenge_Rent_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Battle_Entry_descriptor_, &SM_Challenge_Battle_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Challenge_Battle_Return_descriptor_, &SM_Challenge_Battle_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fChallenge_2etxt() {
  delete SM_Challenge_Data_Request::default_instance_;
  delete SM_Challenge_Data_Request_reflection_;
  delete SM_Challenge_Data_Return::default_instance_;
  delete SM_Challenge_Data_Return_reflection_;
  delete SM_Challenge_Store_Return::default_instance_;
  delete SM_Challenge_Store_Return_reflection_;
  delete SM_Challenge_Store_Info::default_instance_;
  delete SM_Challenge_Store_Info_reflection_;
  delete SM_Challenge_Pet_Return::default_instance_;
  delete SM_Challenge_Pet_Return_reflection_;
  delete SM_Challenge_Pet_Info::default_instance_;
  delete SM_Challenge_Pet_Info_reflection_;
  delete SM_Challenge_Rent_Return::default_instance_;
  delete SM_Challenge_Rent_Return_reflection_;
  delete SM_Challenge_Rent_Info::default_instance_;
  delete SM_Challenge_Rent_Info_reflection_;
  delete SM_Challenge_Battle_Entry::default_instance_;
  delete SM_Challenge_Battle_Entry_reflection_;
  delete SM_Challenge_Battle_Return::default_instance_;
  delete SM_Challenge_Battle_Return_reflection_;
}

void protobuf_AddDesc_SP_5fChallenge_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SP_Challenge.txt\"+\n\031SM_Challenge_Data_"
    "Request\022\016\n\006roleid\030\001 \002(\005\"\235\002\n\030SM_Challenge"
    "_Data_Return\022\016\n\006roleid\030\001 \002(\005\022\016\n\006degree\030\002"
    " \001(\005\022\r\n\005times\030\003 \001(\005\022\r\n\005proof\030\004 \001(\005\022\022\n\nre"
    "settimes\030\005 \001(\005\022\021\n\tfighttime\030\006 \001(\005\022\020\n\010fbt"
    "ypeid\030\007 \001(\005\022\025\n\rrolefortuneid\030\010 \001(\005\022\024\n\014pe"
    "tfortuneid\030\t \001(\005\022\024\n\014fortunereset\030\n \001(\003\022\020"
    "\n\010rentgmid\030\013 \001(\003\022\020\n\010sendgmid\030\014 \001(\003\022\022\n\nhp"
    "decrease\030\r \001(\005\022\017\n\007matcher\030\016 \001(\005\"R\n\031SM_Ch"
    "allenge_Store_Return\022\r\n\005count\030\001 \002(\005\022&\n\004d"
    "ata\030\002 \003(\0132\030.SM_Challenge_Store_Info\"H\n\027S"
    "M_Challenge_Store_Info\022\016\n\006roleid\030\001 \002(\005\022\016"
    "\n\006itemid\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"N\n\027SM_Chal"
    "lenge_Pet_Return\022\r\n\005count\030\001 \002(\005\022$\n\004data\030"
    "\002 \003(\0132\026.SM_Challenge_Pet_Info\"{\n\025SM_Chal"
    "lenge_Pet_Info\022\016\n\006roleid\030\001 \002(\005\022\014\n\004gmid\030\002"
    " \001(\003\022\022\n\nhpdecrease\030\003 \001(\005\022\017\n\007ownerid\030\004 \001("
    "\005\022\020\n\010onbattle\030\005 \001(\005\022\r\n\005petid\030\006 \001(\005\"P\n\030SM"
    "_Challenge_Rent_Return\022\r\n\005count\030\001 \002(\005\022%\n"
    "\004data\030\002 \003(\0132\027.SM_Challenge_Rent_Info\"\232\001\n"
    "\026SM_Challenge_Rent_Info\022\016\n\006gangid\030\001 \002(\003\022"
    "\016\n\006roleid\030\002 \001(\005\022\014\n\004gmid\030\003 \001(\003\022\r\n\005level\030\004"
    " \001(\005\022\016\n\006evolve\030\005 \001(\005\022\r\n\005petid\030\006 \001(\005\022\021\n\to"
    "wnername\030\007 \001(\t\022\021\n\trenttimes\030\010 \001(\005\"L\n\031SM_"
    "Challenge_Battle_Entry\022\016\n\006roleid\030\001 \002(\005\022\r"
    "\n\005index\030\002 \001(\005\022\020\n\010battleid\030\003 \001(\005\"U\n\032SM_Ch"
    "allenge_Battle_Return\022\r\n\005count\030\001 \002(\005\022(\n\004"
    "data\030\005 \003(\0132\032.SM_Challenge_Battle_Entry", 1118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Challenge.txt", &protobuf_RegisterTypes);
  SM_Challenge_Data_Request::default_instance_ = new SM_Challenge_Data_Request();
  SM_Challenge_Data_Return::default_instance_ = new SM_Challenge_Data_Return();
  SM_Challenge_Store_Return::default_instance_ = new SM_Challenge_Store_Return();
  SM_Challenge_Store_Info::default_instance_ = new SM_Challenge_Store_Info();
  SM_Challenge_Pet_Return::default_instance_ = new SM_Challenge_Pet_Return();
  SM_Challenge_Pet_Info::default_instance_ = new SM_Challenge_Pet_Info();
  SM_Challenge_Rent_Return::default_instance_ = new SM_Challenge_Rent_Return();
  SM_Challenge_Rent_Info::default_instance_ = new SM_Challenge_Rent_Info();
  SM_Challenge_Battle_Entry::default_instance_ = new SM_Challenge_Battle_Entry();
  SM_Challenge_Battle_Return::default_instance_ = new SM_Challenge_Battle_Return();
  SM_Challenge_Data_Request::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Data_Return::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Store_Return::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Store_Info::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Pet_Return::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Pet_Info::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Rent_Return::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Rent_Info::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Battle_Entry::default_instance_->InitAsDefaultInstance();
  SM_Challenge_Battle_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fChallenge_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fChallenge_2etxt {
  StaticDescriptorInitializer_SP_5fChallenge_2etxt() {
    protobuf_AddDesc_SP_5fChallenge_2etxt();
  }
} static_descriptor_initializer_SP_5fChallenge_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Data_Request::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Data_Request::SM_Challenge_Data_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Data_Request::InitAsDefaultInstance() {
}

SM_Challenge_Data_Request::SM_Challenge_Data_Request(const SM_Challenge_Data_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Data_Request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Data_Request::~SM_Challenge_Data_Request() {
  SharedDtor();
}

void SM_Challenge_Data_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Data_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Data_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Data_Request_descriptor_;
}

const SM_Challenge_Data_Request& SM_Challenge_Data_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Data_Request* SM_Challenge_Data_Request::default_instance_ = NULL;

SM_Challenge_Data_Request* SM_Challenge_Data_Request::New() const {
  return new SM_Challenge_Data_Request;
}

void SM_Challenge_Data_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Data_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Data_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Data_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Data_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Data_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Data_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Data_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Data_Request::MergeFrom(const SM_Challenge_Data_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Data_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Data_Request::CopyFrom(const SM_Challenge_Data_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Data_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Challenge_Data_Request::Swap(SM_Challenge_Data_Request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Data_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Data_Request_descriptor_;
  metadata.reflection = SM_Challenge_Data_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Data_Return::kRoleidFieldNumber;
const int SM_Challenge_Data_Return::kDegreeFieldNumber;
const int SM_Challenge_Data_Return::kTimesFieldNumber;
const int SM_Challenge_Data_Return::kProofFieldNumber;
const int SM_Challenge_Data_Return::kResettimesFieldNumber;
const int SM_Challenge_Data_Return::kFighttimeFieldNumber;
const int SM_Challenge_Data_Return::kFbtypeidFieldNumber;
const int SM_Challenge_Data_Return::kRolefortuneidFieldNumber;
const int SM_Challenge_Data_Return::kPetfortuneidFieldNumber;
const int SM_Challenge_Data_Return::kFortuneresetFieldNumber;
const int SM_Challenge_Data_Return::kRentgmidFieldNumber;
const int SM_Challenge_Data_Return::kSendgmidFieldNumber;
const int SM_Challenge_Data_Return::kHpdecreaseFieldNumber;
const int SM_Challenge_Data_Return::kMatcherFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Data_Return::SM_Challenge_Data_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Data_Return::InitAsDefaultInstance() {
}

SM_Challenge_Data_Return::SM_Challenge_Data_Return(const SM_Challenge_Data_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Data_Return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  degree_ = 0;
  times_ = 0;
  proof_ = 0;
  resettimes_ = 0;
  fighttime_ = 0;
  fbtypeid_ = 0;
  rolefortuneid_ = 0;
  petfortuneid_ = 0;
  fortunereset_ = GOOGLE_LONGLONG(0);
  rentgmid_ = GOOGLE_LONGLONG(0);
  sendgmid_ = GOOGLE_LONGLONG(0);
  hpdecrease_ = 0;
  matcher_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Data_Return::~SM_Challenge_Data_Return() {
  SharedDtor();
}

void SM_Challenge_Data_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Data_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Data_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Data_Return_descriptor_;
}

const SM_Challenge_Data_Return& SM_Challenge_Data_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Data_Return* SM_Challenge_Data_Return::default_instance_ = NULL;

SM_Challenge_Data_Return* SM_Challenge_Data_Return::New() const {
  return new SM_Challenge_Data_Return;
}

void SM_Challenge_Data_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    degree_ = 0;
    times_ = 0;
    proof_ = 0;
    resettimes_ = 0;
    fighttime_ = 0;
    fbtypeid_ = 0;
    rolefortuneid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    petfortuneid_ = 0;
    fortunereset_ = GOOGLE_LONGLONG(0);
    rentgmid_ = GOOGLE_LONGLONG(0);
    sendgmid_ = GOOGLE_LONGLONG(0);
    hpdecrease_ = 0;
    matcher_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Data_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_degree;
        break;
      }

      // optional int32 degree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proof;
        break;
      }

      // optional int32 proof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resettimes;
        break;
      }

      // optional int32 resettimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resettimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resettimes_)));
          set_has_resettimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fighttime;
        break;
      }

      // optional int32 fighttime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttime_)));
          set_has_fighttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fbtypeid;
        break;
      }

      // optional int32 fbtypeid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fbtypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbtypeid_)));
          set_has_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rolefortuneid;
        break;
      }

      // optional int32 rolefortuneid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolefortuneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolefortuneid_)));
          set_has_rolefortuneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_petfortuneid;
        break;
      }

      // optional int32 petfortuneid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petfortuneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petfortuneid_)));
          set_has_petfortuneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fortunereset;
        break;
      }

      // optional int64 fortunereset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fortunereset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fortunereset_)));
          set_has_fortunereset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rentgmid;
        break;
      }

      // optional int64 rentgmid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rentgmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rentgmid_)));
          set_has_rentgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sendgmid;
        break;
      }

      // optional int64 sendgmid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendgmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendgmid_)));
          set_has_sendgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hpdecrease;
        break;
      }

      // optional int32 hpdecrease = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpdecrease:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpdecrease_)));
          set_has_hpdecrease();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_matcher;
        break;
      }

      // optional int32 matcher = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matcher_)));
          set_has_matcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Data_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 degree = 2;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->degree(), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // optional int32 proof = 4;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->proof(), output);
  }

  // optional int32 resettimes = 5;
  if (has_resettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resettimes(), output);
  }

  // optional int32 fighttime = 6;
  if (has_fighttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fighttime(), output);
  }

  // optional int32 fbtypeid = 7;
  if (has_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fbtypeid(), output);
  }

  // optional int32 rolefortuneid = 8;
  if (has_rolefortuneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rolefortuneid(), output);
  }

  // optional int32 petfortuneid = 9;
  if (has_petfortuneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->petfortuneid(), output);
  }

  // optional int64 fortunereset = 10;
  if (has_fortunereset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->fortunereset(), output);
  }

  // optional int64 rentgmid = 11;
  if (has_rentgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->rentgmid(), output);
  }

  // optional int64 sendgmid = 12;
  if (has_sendgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->sendgmid(), output);
  }

  // optional int32 hpdecrease = 13;
  if (has_hpdecrease()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hpdecrease(), output);
  }

  // optional int32 matcher = 14;
  if (has_matcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->matcher(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Data_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 degree = 2;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->degree(), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // optional int32 proof = 4;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->proof(), target);
  }

  // optional int32 resettimes = 5;
  if (has_resettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resettimes(), target);
  }

  // optional int32 fighttime = 6;
  if (has_fighttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fighttime(), target);
  }

  // optional int32 fbtypeid = 7;
  if (has_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fbtypeid(), target);
  }

  // optional int32 rolefortuneid = 8;
  if (has_rolefortuneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rolefortuneid(), target);
  }

  // optional int32 petfortuneid = 9;
  if (has_petfortuneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->petfortuneid(), target);
  }

  // optional int64 fortunereset = 10;
  if (has_fortunereset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->fortunereset(), target);
  }

  // optional int64 rentgmid = 11;
  if (has_rentgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->rentgmid(), target);
  }

  // optional int64 sendgmid = 12;
  if (has_sendgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->sendgmid(), target);
  }

  // optional int32 hpdecrease = 13;
  if (has_hpdecrease()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hpdecrease(), target);
  }

  // optional int32 matcher = 14;
  if (has_matcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->matcher(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Data_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 degree = 2;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degree());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 proof = 4;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

    // optional int32 resettimes = 5;
    if (has_resettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resettimes());
    }

    // optional int32 fighttime = 6;
    if (has_fighttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttime());
    }

    // optional int32 fbtypeid = 7;
    if (has_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbtypeid());
    }

    // optional int32 rolefortuneid = 8;
    if (has_rolefortuneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolefortuneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 petfortuneid = 9;
    if (has_petfortuneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petfortuneid());
    }

    // optional int64 fortunereset = 10;
    if (has_fortunereset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fortunereset());
    }

    // optional int64 rentgmid = 11;
    if (has_rentgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rentgmid());
    }

    // optional int64 sendgmid = 12;
    if (has_sendgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendgmid());
    }

    // optional int32 hpdecrease = 13;
    if (has_hpdecrease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpdecrease());
    }

    // optional int32 matcher = 14;
    if (has_matcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matcher());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Data_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Data_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Data_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Data_Return::MergeFrom(const SM_Challenge_Data_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_proof()) {
      set_proof(from.proof());
    }
    if (from.has_resettimes()) {
      set_resettimes(from.resettimes());
    }
    if (from.has_fighttime()) {
      set_fighttime(from.fighttime());
    }
    if (from.has_fbtypeid()) {
      set_fbtypeid(from.fbtypeid());
    }
    if (from.has_rolefortuneid()) {
      set_rolefortuneid(from.rolefortuneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_petfortuneid()) {
      set_petfortuneid(from.petfortuneid());
    }
    if (from.has_fortunereset()) {
      set_fortunereset(from.fortunereset());
    }
    if (from.has_rentgmid()) {
      set_rentgmid(from.rentgmid());
    }
    if (from.has_sendgmid()) {
      set_sendgmid(from.sendgmid());
    }
    if (from.has_hpdecrease()) {
      set_hpdecrease(from.hpdecrease());
    }
    if (from.has_matcher()) {
      set_matcher(from.matcher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Data_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Data_Return::CopyFrom(const SM_Challenge_Data_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Data_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Challenge_Data_Return::Swap(SM_Challenge_Data_Return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(degree_, other->degree_);
    std::swap(times_, other->times_);
    std::swap(proof_, other->proof_);
    std::swap(resettimes_, other->resettimes_);
    std::swap(fighttime_, other->fighttime_);
    std::swap(fbtypeid_, other->fbtypeid_);
    std::swap(rolefortuneid_, other->rolefortuneid_);
    std::swap(petfortuneid_, other->petfortuneid_);
    std::swap(fortunereset_, other->fortunereset_);
    std::swap(rentgmid_, other->rentgmid_);
    std::swap(sendgmid_, other->sendgmid_);
    std::swap(hpdecrease_, other->hpdecrease_);
    std::swap(matcher_, other->matcher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Data_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Data_Return_descriptor_;
  metadata.reflection = SM_Challenge_Data_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Store_Return::kCountFieldNumber;
const int SM_Challenge_Store_Return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Store_Return::SM_Challenge_Store_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Store_Return::InitAsDefaultInstance() {
}

SM_Challenge_Store_Return::SM_Challenge_Store_Return(const SM_Challenge_Store_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Store_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Store_Return::~SM_Challenge_Store_Return() {
  SharedDtor();
}

void SM_Challenge_Store_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Store_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Store_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Store_Return_descriptor_;
}

const SM_Challenge_Store_Return& SM_Challenge_Store_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Store_Return* SM_Challenge_Store_Return::default_instance_ = NULL;

SM_Challenge_Store_Return* SM_Challenge_Store_Return::New() const {
  return new SM_Challenge_Store_Return;
}

void SM_Challenge_Store_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Store_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Challenge_Store_Info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Store_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_Challenge_Store_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Store_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_Challenge_Store_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Store_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_Challenge_Store_Info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Store_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Store_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Store_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Store_Return::MergeFrom(const SM_Challenge_Store_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Store_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Store_Return::CopyFrom(const SM_Challenge_Store_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Store_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Challenge_Store_Return::Swap(SM_Challenge_Store_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Store_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Store_Return_descriptor_;
  metadata.reflection = SM_Challenge_Store_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Store_Info::kRoleidFieldNumber;
const int SM_Challenge_Store_Info::kItemidFieldNumber;
const int SM_Challenge_Store_Info::kCountFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Store_Info::SM_Challenge_Store_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Store_Info::InitAsDefaultInstance() {
}

SM_Challenge_Store_Info::SM_Challenge_Store_Info(const SM_Challenge_Store_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Store_Info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  itemid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Store_Info::~SM_Challenge_Store_Info() {
  SharedDtor();
}

void SM_Challenge_Store_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Store_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Store_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Store_Info_descriptor_;
}

const SM_Challenge_Store_Info& SM_Challenge_Store_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Store_Info* SM_Challenge_Store_Info::default_instance_ = NULL;

SM_Challenge_Store_Info* SM_Challenge_Store_Info::New() const {
  return new SM_Challenge_Store_Info;
}

void SM_Challenge_Store_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    itemid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Store_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Store_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Store_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Store_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Store_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Store_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Store_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Store_Info::MergeFrom(const SM_Challenge_Store_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Store_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Store_Info::CopyFrom(const SM_Challenge_Store_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Store_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Challenge_Store_Info::Swap(SM_Challenge_Store_Info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Store_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Store_Info_descriptor_;
  metadata.reflection = SM_Challenge_Store_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Pet_Return::kCountFieldNumber;
const int SM_Challenge_Pet_Return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Pet_Return::SM_Challenge_Pet_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Pet_Return::InitAsDefaultInstance() {
}

SM_Challenge_Pet_Return::SM_Challenge_Pet_Return(const SM_Challenge_Pet_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Pet_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Pet_Return::~SM_Challenge_Pet_Return() {
  SharedDtor();
}

void SM_Challenge_Pet_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Pet_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Pet_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Pet_Return_descriptor_;
}

const SM_Challenge_Pet_Return& SM_Challenge_Pet_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Pet_Return* SM_Challenge_Pet_Return::default_instance_ = NULL;

SM_Challenge_Pet_Return* SM_Challenge_Pet_Return::New() const {
  return new SM_Challenge_Pet_Return;
}

void SM_Challenge_Pet_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Pet_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Challenge_Pet_Info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Pet_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_Challenge_Pet_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Pet_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_Challenge_Pet_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Pet_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_Challenge_Pet_Info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Pet_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Pet_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Pet_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Pet_Return::MergeFrom(const SM_Challenge_Pet_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Pet_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Pet_Return::CopyFrom(const SM_Challenge_Pet_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Pet_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Challenge_Pet_Return::Swap(SM_Challenge_Pet_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Pet_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Pet_Return_descriptor_;
  metadata.reflection = SM_Challenge_Pet_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Pet_Info::kRoleidFieldNumber;
const int SM_Challenge_Pet_Info::kGmidFieldNumber;
const int SM_Challenge_Pet_Info::kHpdecreaseFieldNumber;
const int SM_Challenge_Pet_Info::kOwneridFieldNumber;
const int SM_Challenge_Pet_Info::kOnbattleFieldNumber;
const int SM_Challenge_Pet_Info::kPetidFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Pet_Info::SM_Challenge_Pet_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Pet_Info::InitAsDefaultInstance() {
}

SM_Challenge_Pet_Info::SM_Challenge_Pet_Info(const SM_Challenge_Pet_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Pet_Info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  hpdecrease_ = 0;
  ownerid_ = 0;
  onbattle_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Pet_Info::~SM_Challenge_Pet_Info() {
  SharedDtor();
}

void SM_Challenge_Pet_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Pet_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Pet_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Pet_Info_descriptor_;
}

const SM_Challenge_Pet_Info& SM_Challenge_Pet_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Pet_Info* SM_Challenge_Pet_Info::default_instance_ = NULL;

SM_Challenge_Pet_Info* SM_Challenge_Pet_Info::New() const {
  return new SM_Challenge_Pet_Info;
}

void SM_Challenge_Pet_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    hpdecrease_ = 0;
    ownerid_ = 0;
    onbattle_ = 0;
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Pet_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hpdecrease;
        break;
      }

      // optional int32 hpdecrease = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpdecrease:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpdecrease_)));
          set_has_hpdecrease();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onbattle;
        break;
      }

      // optional int32 onbattle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onbattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onbattle_)));
          set_has_onbattle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_petid;
        break;
      }

      // optional int32 petid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Pet_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 hpdecrease = 3;
  if (has_hpdecrease()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hpdecrease(), output);
  }

  // optional int32 ownerid = 4;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ownerid(), output);
  }

  // optional int32 onbattle = 5;
  if (has_onbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onbattle(), output);
  }

  // optional int32 petid = 6;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Pet_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 hpdecrease = 3;
  if (has_hpdecrease()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hpdecrease(), target);
  }

  // optional int32 ownerid = 4;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ownerid(), target);
  }

  // optional int32 onbattle = 5;
  if (has_onbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onbattle(), target);
  }

  // optional int32 petid = 6;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Pet_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 hpdecrease = 3;
    if (has_hpdecrease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpdecrease());
    }

    // optional int32 ownerid = 4;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // optional int32 onbattle = 5;
    if (has_onbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onbattle());
    }

    // optional int32 petid = 6;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Pet_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Pet_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Pet_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Pet_Info::MergeFrom(const SM_Challenge_Pet_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_hpdecrease()) {
      set_hpdecrease(from.hpdecrease());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_onbattle()) {
      set_onbattle(from.onbattle());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Pet_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Pet_Info::CopyFrom(const SM_Challenge_Pet_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Pet_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Challenge_Pet_Info::Swap(SM_Challenge_Pet_Info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(gmid_, other->gmid_);
    std::swap(hpdecrease_, other->hpdecrease_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(onbattle_, other->onbattle_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Pet_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Pet_Info_descriptor_;
  metadata.reflection = SM_Challenge_Pet_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Rent_Return::kCountFieldNumber;
const int SM_Challenge_Rent_Return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Rent_Return::SM_Challenge_Rent_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Rent_Return::InitAsDefaultInstance() {
}

SM_Challenge_Rent_Return::SM_Challenge_Rent_Return(const SM_Challenge_Rent_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Rent_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Rent_Return::~SM_Challenge_Rent_Return() {
  SharedDtor();
}

void SM_Challenge_Rent_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Rent_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Rent_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Rent_Return_descriptor_;
}

const SM_Challenge_Rent_Return& SM_Challenge_Rent_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Rent_Return* SM_Challenge_Rent_Return::default_instance_ = NULL;

SM_Challenge_Rent_Return* SM_Challenge_Rent_Return::New() const {
  return new SM_Challenge_Rent_Return;
}

void SM_Challenge_Rent_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Rent_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Challenge_Rent_Info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Rent_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_Challenge_Rent_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Rent_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_Challenge_Rent_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Rent_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_Challenge_Rent_Info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Rent_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Rent_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Rent_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Rent_Return::MergeFrom(const SM_Challenge_Rent_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Rent_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Rent_Return::CopyFrom(const SM_Challenge_Rent_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Rent_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Challenge_Rent_Return::Swap(SM_Challenge_Rent_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Rent_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Rent_Return_descriptor_;
  metadata.reflection = SM_Challenge_Rent_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Rent_Info::kGangidFieldNumber;
const int SM_Challenge_Rent_Info::kRoleidFieldNumber;
const int SM_Challenge_Rent_Info::kGmidFieldNumber;
const int SM_Challenge_Rent_Info::kLevelFieldNumber;
const int SM_Challenge_Rent_Info::kEvolveFieldNumber;
const int SM_Challenge_Rent_Info::kPetidFieldNumber;
const int SM_Challenge_Rent_Info::kOwnernameFieldNumber;
const int SM_Challenge_Rent_Info::kRenttimesFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Rent_Info::SM_Challenge_Rent_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Rent_Info::InitAsDefaultInstance() {
}

SM_Challenge_Rent_Info::SM_Challenge_Rent_Info(const SM_Challenge_Rent_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Rent_Info::SharedCtor() {
  _cached_size_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  roleid_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  evolve_ = 0;
  petid_ = 0;
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  renttimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Rent_Info::~SM_Challenge_Rent_Info() {
  SharedDtor();
}

void SM_Challenge_Rent_Info::SharedDtor() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (this != default_instance_) {
  }
}

void SM_Challenge_Rent_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Rent_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Rent_Info_descriptor_;
}

const SM_Challenge_Rent_Info& SM_Challenge_Rent_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Rent_Info* SM_Challenge_Rent_Info::default_instance_ = NULL;

SM_Challenge_Rent_Info* SM_Challenge_Rent_Info::New() const {
  return new SM_Challenge_Rent_Info;
}

void SM_Challenge_Rent_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gangid_ = GOOGLE_LONGLONG(0);
    roleid_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    evolve_ = 0;
    petid_ = 0;
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    renttimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Rent_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gangid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_evolve;
        break;
      }

      // optional int32 evolve = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolve_)));
          set_has_evolve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_petid;
        break;
      }

      // optional int32 petid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ownername;
        break;
      }

      // optional string ownername = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_renttimes;
        break;
      }

      // optional int32 renttimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renttimes_)));
          set_has_renttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Rent_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gangid = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gangid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int64 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gmid(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 evolve = 5;
  if (has_evolve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->evolve(), output);
  }

  // optional int32 petid = 6;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->petid(), output);
  }

  // optional string ownername = 7;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ownername(), output);
  }

  // optional int32 renttimes = 8;
  if (has_renttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->renttimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Rent_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gangid = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gangid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int64 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gmid(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 evolve = 5;
  if (has_evolve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->evolve(), target);
  }

  // optional int32 petid = 6;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->petid(), target);
  }

  // optional string ownername = 7;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ownername(), target);
  }

  // optional int32 renttimes = 8;
  if (has_renttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->renttimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Rent_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gangid = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int64 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 evolve = 5;
    if (has_evolve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolve());
    }

    // optional int32 petid = 6;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional string ownername = 7;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

    // optional int32 renttimes = 8;
    if (has_renttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renttimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Rent_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Rent_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Rent_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Rent_Info::MergeFrom(const SM_Challenge_Rent_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_evolve()) {
      set_evolve(from.evolve());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_renttimes()) {
      set_renttimes(from.renttimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Rent_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Rent_Info::CopyFrom(const SM_Challenge_Rent_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Rent_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Challenge_Rent_Info::Swap(SM_Challenge_Rent_Info* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(roleid_, other->roleid_);
    std::swap(gmid_, other->gmid_);
    std::swap(level_, other->level_);
    std::swap(evolve_, other->evolve_);
    std::swap(petid_, other->petid_);
    std::swap(ownername_, other->ownername_);
    std::swap(renttimes_, other->renttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Rent_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Rent_Info_descriptor_;
  metadata.reflection = SM_Challenge_Rent_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Battle_Entry::kRoleidFieldNumber;
const int SM_Challenge_Battle_Entry::kIndexFieldNumber;
const int SM_Challenge_Battle_Entry::kBattleidFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Battle_Entry::SM_Challenge_Battle_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Battle_Entry::InitAsDefaultInstance() {
}

SM_Challenge_Battle_Entry::SM_Challenge_Battle_Entry(const SM_Challenge_Battle_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Battle_Entry::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  index_ = 0;
  battleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Battle_Entry::~SM_Challenge_Battle_Entry() {
  SharedDtor();
}

void SM_Challenge_Battle_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Battle_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Battle_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Battle_Entry_descriptor_;
}

const SM_Challenge_Battle_Entry& SM_Challenge_Battle_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Battle_Entry* SM_Challenge_Battle_Entry::default_instance_ = NULL;

SM_Challenge_Battle_Entry* SM_Challenge_Battle_Entry::New() const {
  return new SM_Challenge_Battle_Entry;
}

void SM_Challenge_Battle_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    index_ = 0;
    battleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Battle_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleid;
        break;
      }

      // optional int32 battleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Battle_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 battleid = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Battle_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 battleid = 3;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Battle_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 battleid = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Battle_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Battle_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Battle_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Battle_Entry::MergeFrom(const SM_Challenge_Battle_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Battle_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Battle_Entry::CopyFrom(const SM_Challenge_Battle_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Battle_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Challenge_Battle_Entry::Swap(SM_Challenge_Battle_Entry* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(index_, other->index_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Battle_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Battle_Entry_descriptor_;
  metadata.reflection = SM_Challenge_Battle_Entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Challenge_Battle_Return::kCountFieldNumber;
const int SM_Challenge_Battle_Return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Challenge_Battle_Return::SM_Challenge_Battle_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Challenge_Battle_Return::InitAsDefaultInstance() {
}

SM_Challenge_Battle_Return::SM_Challenge_Battle_Return(const SM_Challenge_Battle_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Challenge_Battle_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Challenge_Battle_Return::~SM_Challenge_Battle_Return() {
  SharedDtor();
}

void SM_Challenge_Battle_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Challenge_Battle_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Challenge_Battle_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Challenge_Battle_Return_descriptor_;
}

const SM_Challenge_Battle_Return& SM_Challenge_Battle_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fChallenge_2etxt();
  return *default_instance_;
}

SM_Challenge_Battle_Return* SM_Challenge_Battle_Return::default_instance_ = NULL;

SM_Challenge_Battle_Return* SM_Challenge_Battle_Return::New() const {
  return new SM_Challenge_Battle_Return;
}

void SM_Challenge_Battle_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Challenge_Battle_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .SM_Challenge_Battle_Entry data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Challenge_Battle_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_Challenge_Battle_Entry data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Challenge_Battle_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_Challenge_Battle_Entry data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Challenge_Battle_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_Challenge_Battle_Entry data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Challenge_Battle_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Challenge_Battle_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Challenge_Battle_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Challenge_Battle_Return::MergeFrom(const SM_Challenge_Battle_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Challenge_Battle_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Challenge_Battle_Return::CopyFrom(const SM_Challenge_Battle_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Challenge_Battle_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Challenge_Battle_Return::Swap(SM_Challenge_Battle_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Challenge_Battle_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Challenge_Battle_Return_descriptor_;
  metadata.reflection = SM_Challenge_Battle_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
