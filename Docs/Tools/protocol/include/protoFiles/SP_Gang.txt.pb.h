// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Gang.txt

#ifndef PROTOBUF_SP_5fGang_2etxt__INCLUDED
#define PROTOBUF_SP_5fGang_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fGang_2etxt();
void protobuf_AssignDesc_SP_5fGang_2etxt();
void protobuf_ShutdownFile_SP_5fGang_2etxt();

class GM_GangBuyRequest;
class GM_GangOreOperate;
class GM_MiningRequest;
class GM_GangSimpleInfo;
class GM_GangApplyInfo;
class GM_MarchInfo;
class GM_GangRaceSimpleInfo;
class GM_GangRaceData;
class GM_GangRace;
class GM_GangRacePare;
class GM_PlayerReady;
class GM_ReturnGangFightJoin;
class GM_NewReadyPlayer;
class GM_PlayerQuitReady;
class GM_GangRaceResult;
class GM_GangFightTime;
class GM_GangFightResultMember;
class GM_GangFightResult;
class GM_GangFightPeopleCount;
class GM_GangFightPeople;
class GM_DBGangActive;
class GM_DBAllGangSkill;
class GM_DBGangSkill;
class GM_DBGangExit;
class GM_AllGangInvite;
class GM_GangInvite;
class GM_GangDataChange;
class DB_tAllGangData;
class DB_tGangData;
class DB_LifeTreeRoleInfo_Return;

// ===================================================================

class GM_GangBuyRequest : public ::google::protobuf::Message {
 public:
  GM_GangBuyRequest();
  virtual ~GM_GangBuyRequest();

  GM_GangBuyRequest(const GM_GangBuyRequest& from);

  inline GM_GangBuyRequest& operator=(const GM_GangBuyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangBuyRequest& default_instance();

  void Swap(GM_GangBuyRequest* other);

  // implements Message ----------------------------------------------

  GM_GangBuyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangBuyRequest& from);
  void MergeFrom(const GM_GangBuyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangBuyRequest)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangBuyRequest* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangOreOperate : public ::google::protobuf::Message {
 public:
  GM_GangOreOperate();
  virtual ~GM_GangOreOperate();

  GM_GangOreOperate(const GM_GangOreOperate& from);

  inline GM_GangOreOperate& operator=(const GM_GangOreOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangOreOperate& default_instance();

  void Swap(GM_GangOreOperate* other);

  // implements Message ----------------------------------------------

  GM_GangOreOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangOreOperate& from);
  void MergeFrom(const GM_GangOreOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangOreOperate)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangOreOperate* default_instance_;
};
// -------------------------------------------------------------------

class GM_MiningRequest : public ::google::protobuf::Message {
 public:
  GM_MiningRequest();
  virtual ~GM_MiningRequest();

  GM_MiningRequest(const GM_MiningRequest& from);

  inline GM_MiningRequest& operator=(const GM_MiningRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_MiningRequest& default_instance();

  void Swap(GM_MiningRequest* other);

  // implements Message ----------------------------------------------

  GM_MiningRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_MiningRequest& from);
  void MergeFrom(const GM_MiningRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 mineId = 2;
  inline bool has_mineid() const;
  inline void clear_mineid();
  static const int kMineIdFieldNumber = 2;
  inline ::google::protobuf::int32 mineid() const;
  inline void set_mineid(::google::protobuf::int32 value);

  // required int64 pickaxeId = 3;
  inline bool has_pickaxeid() const;
  inline void clear_pickaxeid();
  static const int kPickaxeIdFieldNumber = 3;
  inline ::google::protobuf::int64 pickaxeid() const;
  inline void set_pickaxeid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_MiningRequest)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_mineid();
  inline void clear_has_mineid();
  inline void set_has_pickaxeid();
  inline void clear_has_pickaxeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 mineid_;
  ::google::protobuf::int64 pickaxeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_MiningRequest* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangSimpleInfo : public ::google::protobuf::Message {
 public:
  GM_GangSimpleInfo();
  virtual ~GM_GangSimpleInfo();

  GM_GangSimpleInfo(const GM_GangSimpleInfo& from);

  inline GM_GangSimpleInfo& operator=(const GM_GangSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangSimpleInfo& default_instance();

  void Swap(GM_GangSimpleInfo* other);

  // implements Message ----------------------------------------------

  GM_GangSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangSimpleInfo& from);
  void MergeFrom(const GM_GangSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required int32 power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangSimpleInfo)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangApplyInfo : public ::google::protobuf::Message {
 public:
  GM_GangApplyInfo();
  virtual ~GM_GangApplyInfo();

  GM_GangApplyInfo(const GM_GangApplyInfo& from);

  inline GM_GangApplyInfo& operator=(const GM_GangApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangApplyInfo& default_instance();

  void Swap(GM_GangApplyInfo* other);

  // implements Message ----------------------------------------------

  GM_GangApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangApplyInfo& from);
  void MergeFrom(const GM_GangApplyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GM_GangSimpleInfo gangsinfo = 2;
  inline int gangsinfo_size() const;
  inline void clear_gangsinfo();
  static const int kGangsinfoFieldNumber = 2;
  inline const ::GM_GangSimpleInfo& gangsinfo(int index) const;
  inline ::GM_GangSimpleInfo* mutable_gangsinfo(int index);
  inline ::GM_GangSimpleInfo* add_gangsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >&
      gangsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >*
      mutable_gangsinfo();

  // repeated .GM_GangSimpleInfo myganginfo = 3;
  inline int myganginfo_size() const;
  inline void clear_myganginfo();
  static const int kMyganginfoFieldNumber = 3;
  inline const ::GM_GangSimpleInfo& myganginfo(int index) const;
  inline ::GM_GangSimpleInfo* mutable_myganginfo(int index);
  inline ::GM_GangSimpleInfo* add_myganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >&
      myganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >*
      mutable_myganginfo();

  // optional int32 totalapply = 4;
  inline bool has_totalapply() const;
  inline void clear_totalapply();
  static const int kTotalapplyFieldNumber = 4;
  inline ::google::protobuf::int32 totalapply() const;
  inline void set_totalapply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangApplyInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_totalapply();
  inline void clear_has_totalapply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo > gangsinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 totalapply_;
  ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo > myganginfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_MarchInfo : public ::google::protobuf::Message {
 public:
  GM_MarchInfo();
  virtual ~GM_MarchInfo();

  GM_MarchInfo(const GM_MarchInfo& from);

  inline GM_MarchInfo& operator=(const GM_MarchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_MarchInfo& default_instance();

  void Swap(GM_MarchInfo* other);

  // implements Message ----------------------------------------------

  GM_MarchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_MarchInfo& from);
  void MergeFrom(const GM_MarchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // required int32 weekstart = 2;
  inline bool has_weekstart() const;
  inline void clear_weekstart();
  static const int kWeekstartFieldNumber = 2;
  inline ::google::protobuf::int32 weekstart() const;
  inline void set_weekstart(::google::protobuf::int32 value);

  // required int32 starttime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 3;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_MarchInfo)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_weekstart();
  inline void clear_has_weekstart();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 weekstart_;
  ::google::protobuf::int32 starttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_MarchInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRaceSimpleInfo : public ::google::protobuf::Message {
 public:
  GM_GangRaceSimpleInfo();
  virtual ~GM_GangRaceSimpleInfo();

  GM_GangRaceSimpleInfo(const GM_GangRaceSimpleInfo& from);

  inline GM_GangRaceSimpleInfo& operator=(const GM_GangRaceSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRaceSimpleInfo& default_instance();

  void Swap(GM_GangRaceSimpleInfo* other);

  // implements Message ----------------------------------------------

  GM_GangRaceSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRaceSimpleInfo& from);
  void MergeFrom(const GM_GangRaceSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 equipId = 3;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipIdFieldNumber = 3;
  inline ::google::protobuf::int32 equipid() const;
  inline void set_equipid(::google::protobuf::int32 value);

  // repeated int32 fashionInfo = 4;
  inline int fashioninfo_size() const;
  inline void clear_fashioninfo();
  static const int kFashionInfoFieldNumber = 4;
  inline ::google::protobuf::int32 fashioninfo(int index) const;
  inline void set_fashioninfo(int index, ::google::protobuf::int32 value);
  inline void add_fashioninfo(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fashioninfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fashioninfo();

  // required int32 profession = 2;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 2;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int64 ganggmid = 5;
  inline bool has_ganggmid() const;
  inline void clear_ganggmid();
  static const int kGanggmidFieldNumber = 5;
  inline ::google::protobuf::int64 ganggmid() const;
  inline void set_ganggmid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_GangRaceSimpleInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_ganggmid();
  inline void clear_has_ganggmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 equipid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fashioninfo_;
  ::google::protobuf::int64 ganggmid_;
  ::google::protobuf::int32 profession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRaceSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRaceData : public ::google::protobuf::Message {
 public:
  GM_GangRaceData();
  virtual ~GM_GangRaceData();

  GM_GangRaceData(const GM_GangRaceData& from);

  inline GM_GangRaceData& operator=(const GM_GangRaceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRaceData& default_instance();

  void Swap(GM_GangRaceData* other);

  // implements Message ----------------------------------------------

  GM_GangRaceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRaceData& from);
  void MergeFrom(const GM_GangRaceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 race = 2;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 2;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // repeated .GM_MarchInfo marchinfo = 4;
  inline int marchinfo_size() const;
  inline void clear_marchinfo();
  static const int kMarchinfoFieldNumber = 4;
  inline const ::GM_MarchInfo& marchinfo(int index) const;
  inline ::GM_MarchInfo* mutable_marchinfo(int index);
  inline ::GM_MarchInfo* add_marchinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_MarchInfo >&
      marchinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_MarchInfo >*
      mutable_marchinfo();

  // required int32 joinedpeople = 5;
  inline bool has_joinedpeople() const;
  inline void clear_joinedpeople();
  static const int kJoinedpeopleFieldNumber = 5;
  inline ::google::protobuf::int32 joinedpeople() const;
  inline void set_joinedpeople(::google::protobuf::int32 value);

  // required int64 yourgangid = 7;
  inline bool has_yourgangid() const;
  inline void clear_yourgangid();
  static const int kYourgangidFieldNumber = 7;
  inline ::google::protobuf::int64 yourgangid() const;
  inline void set_yourgangid(::google::protobuf::int64 value);

  // required string yourgangname = 9;
  inline bool has_yourgangname() const;
  inline void clear_yourgangname();
  static const int kYourgangnameFieldNumber = 9;
  inline const ::std::string& yourgangname() const;
  inline void set_yourgangname(const ::std::string& value);
  inline void set_yourgangname(const char* value);
  inline void set_yourgangname(const char* value, size_t size);
  inline ::std::string* mutable_yourgangname();
  inline ::std::string* release_yourgangname();
  inline void set_allocated_yourgangname(::std::string* yourgangname);

  // optional int64 othergangid = 10;
  inline bool has_othergangid() const;
  inline void clear_othergangid();
  static const int kOthergangidFieldNumber = 10;
  inline ::google::protobuf::int64 othergangid() const;
  inline void set_othergangid(::google::protobuf::int64 value);

  // optional string othergangname = 11;
  inline bool has_othergangname() const;
  inline void clear_othergangname();
  static const int kOthergangnameFieldNumber = 11;
  inline const ::std::string& othergangname() const;
  inline void set_othergangname(const ::std::string& value);
  inline void set_othergangname(const char* value);
  inline void set_othergangname(const char* value, size_t size);
  inline ::std::string* mutable_othergangname();
  inline ::std::string* release_othergangname();
  inline void set_allocated_othergangname(::std::string* othergangname);

  // optional int32 readyTime = 8;
  inline bool has_readytime() const;
  inline void clear_readytime();
  static const int kReadyTimeFieldNumber = 8;
  inline ::google::protobuf::int32 readytime() const;
  inline void set_readytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRaceData)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_joinedpeople();
  inline void clear_has_joinedpeople();
  inline void set_has_yourgangid();
  inline void clear_has_yourgangid();
  inline void set_has_yourgangname();
  inline void clear_has_yourgangname();
  inline void set_has_othergangid();
  inline void clear_has_othergangid();
  inline void set_has_othergangname();
  inline void clear_has_othergangname();
  inline void set_has_readytime();
  inline void clear_has_readytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::RepeatedPtrField< ::GM_MarchInfo > marchinfo_;
  ::google::protobuf::int64 yourgangid_;
  ::std::string* yourgangname_;
  ::google::protobuf::int32 joinedpeople_;
  ::google::protobuf::int32 readytime_;
  ::google::protobuf::int64 othergangid_;
  ::std::string* othergangname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRaceData* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRace : public ::google::protobuf::Message {
 public:
  GM_GangRace();
  virtual ~GM_GangRace();

  GM_GangRace(const GM_GangRace& from);

  inline GM_GangRace& operator=(const GM_GangRace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRace& default_instance();

  void Swap(GM_GangRace* other);

  // implements Message ----------------------------------------------

  GM_GangRace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRace& from);
  void MergeFrom(const GM_GangRace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int64 targetgmid = 3;
  inline bool has_targetgmid() const;
  inline void clear_targetgmid();
  static const int kTargetgmidFieldNumber = 3;
  inline ::google::protobuf::int64 targetgmid() const;
  inline void set_targetgmid(::google::protobuf::int64 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 people = 6;
  inline bool has_people() const;
  inline void clear_people();
  static const int kPeopleFieldNumber = 6;
  inline ::google::protobuf::int32 people() const;
  inline void set_people(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRace)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_targetgmid();
  inline void clear_has_targetgmid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_people();
  inline void clear_has_people();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int64 targetgmid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 people_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRace* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRacePare : public ::google::protobuf::Message {
 public:
  GM_GangRacePare();
  virtual ~GM_GangRacePare();

  GM_GangRacePare(const GM_GangRacePare& from);

  inline GM_GangRacePare& operator=(const GM_GangRacePare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRacePare& default_instance();

  void Swap(GM_GangRacePare* other);

  // implements Message ----------------------------------------------

  GM_GangRacePare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRacePare& from);
  void MergeFrom(const GM_GangRacePare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 race = 3;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 3;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // repeated .GM_GangRace racelist = 1;
  inline int racelist_size() const;
  inline void clear_racelist();
  static const int kRacelistFieldNumber = 1;
  inline const ::GM_GangRace& racelist(int index) const;
  inline ::GM_GangRace* mutable_racelist(int index);
  inline ::GM_GangRace* add_racelist();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRace >&
      racelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangRace >*
      mutable_racelist();

  // optional int32 timelast = 7;
  inline bool has_timelast() const;
  inline void clear_timelast();
  static const int kTimelastFieldNumber = 7;
  inline ::google::protobuf::int32 timelast() const;
  inline void set_timelast(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRacePare)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_timelast();
  inline void clear_has_timelast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::RepeatedPtrField< ::GM_GangRace > racelist_;
  ::google::protobuf::int32 timelast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRacePare* default_instance_;
};
// -------------------------------------------------------------------

class GM_PlayerReady : public ::google::protobuf::Message {
 public:
  GM_PlayerReady();
  virtual ~GM_PlayerReady();

  GM_PlayerReady(const GM_PlayerReady& from);

  inline GM_PlayerReady& operator=(const GM_PlayerReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_PlayerReady& default_instance();

  void Swap(GM_PlayerReady* other);

  // implements Message ----------------------------------------------

  GM_PlayerReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_PlayerReady& from);
  void MergeFrom(const GM_PlayerReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 roleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 ganggmid = 3;
  inline bool has_ganggmid() const;
  inline void clear_ganggmid();
  static const int kGanggmidFieldNumber = 3;
  inline ::google::protobuf::int64 ganggmid() const;
  inline void set_ganggmid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_PlayerReady)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ganggmid();
  inline void clear_has_ganggmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 ganggmid_;
  ::google::protobuf::uint32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_PlayerReady* default_instance_;
};
// -------------------------------------------------------------------

class GM_ReturnGangFightJoin : public ::google::protobuf::Message {
 public:
  GM_ReturnGangFightJoin();
  virtual ~GM_ReturnGangFightJoin();

  GM_ReturnGangFightJoin(const GM_ReturnGangFightJoin& from);

  inline GM_ReturnGangFightJoin& operator=(const GM_ReturnGangFightJoin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ReturnGangFightJoin& default_instance();

  void Swap(GM_ReturnGangFightJoin* other);

  // implements Message ----------------------------------------------

  GM_ReturnGangFightJoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ReturnGangFightJoin& from);
  void MergeFrom(const GM_ReturnGangFightJoin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GM_PlayerReady playerList = 2;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 2;
  inline const ::GM_PlayerReady& playerlist(int index) const;
  inline ::GM_PlayerReady* mutable_playerlist(int index);
  inline ::GM_PlayerReady* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_PlayerReady >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_PlayerReady >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:GM_ReturnGangFightJoin)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_PlayerReady > playerlist_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_ReturnGangFightJoin* default_instance_;
};
// -------------------------------------------------------------------

class GM_NewReadyPlayer : public ::google::protobuf::Message {
 public:
  GM_NewReadyPlayer();
  virtual ~GM_NewReadyPlayer();

  GM_NewReadyPlayer(const GM_NewReadyPlayer& from);

  inline GM_NewReadyPlayer& operator=(const GM_NewReadyPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_NewReadyPlayer& default_instance();

  void Swap(GM_NewReadyPlayer* other);

  // implements Message ----------------------------------------------

  GM_NewReadyPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_NewReadyPlayer& from);
  void MergeFrom(const GM_NewReadyPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GM_PlayerReady newplayer = 1;
  inline bool has_newplayer() const;
  inline void clear_newplayer();
  static const int kNewplayerFieldNumber = 1;
  inline const ::GM_PlayerReady& newplayer() const;
  inline ::GM_PlayerReady* mutable_newplayer();
  inline ::GM_PlayerReady* release_newplayer();
  inline void set_allocated_newplayer(::GM_PlayerReady* newplayer);

  // @@protoc_insertion_point(class_scope:GM_NewReadyPlayer)
 private:
  inline void set_has_newplayer();
  inline void clear_has_newplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GM_PlayerReady* newplayer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_NewReadyPlayer* default_instance_;
};
// -------------------------------------------------------------------

class GM_PlayerQuitReady : public ::google::protobuf::Message {
 public:
  GM_PlayerQuitReady();
  virtual ~GM_PlayerQuitReady();

  GM_PlayerQuitReady(const GM_PlayerQuitReady& from);

  inline GM_PlayerQuitReady& operator=(const GM_PlayerQuitReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_PlayerQuitReady& default_instance();

  void Swap(GM_PlayerQuitReady* other);

  // implements Message ----------------------------------------------

  GM_PlayerQuitReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_PlayerQuitReady& from);
  void MergeFrom(const GM_PlayerQuitReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 quitplayer = 1;
  inline bool has_quitplayer() const;
  inline void clear_quitplayer();
  static const int kQuitplayerFieldNumber = 1;
  inline ::google::protobuf::uint32 quitplayer() const;
  inline void set_quitplayer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GM_PlayerQuitReady)
 private:
  inline void set_has_quitplayer();
  inline void clear_has_quitplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 quitplayer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_PlayerQuitReady* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangRaceResult : public ::google::protobuf::Message {
 public:
  GM_GangRaceResult();
  virtual ~GM_GangRaceResult();

  GM_GangRaceResult(const GM_GangRaceResult& from);

  inline GM_GangRaceResult& operator=(const GM_GangRaceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangRaceResult& default_instance();

  void Swap(GM_GangRaceResult* other);

  // implements Message ----------------------------------------------

  GM_GangRaceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangRaceResult& from);
  void MergeFrom(const GM_GangRaceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangRaceResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangRaceResult* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFightTime : public ::google::protobuf::Message {
 public:
  GM_GangFightTime();
  virtual ~GM_GangFightTime();

  GM_GangFightTime(const GM_GangFightTime& from);

  inline GM_GangFightTime& operator=(const GM_GangFightTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFightTime& default_instance();

  void Swap(GM_GangFightTime* other);

  // implements Message ----------------------------------------------

  GM_GangFightTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFightTime& from);
  void MergeFrom(const GM_GangFightTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 apply_time = 1;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 1;
  inline ::google::protobuf::int32 apply_time() const;
  inline void set_apply_time(::google::protobuf::int32 value);

  // repeated int32 race_time = 2;
  inline int race_time_size() const;
  inline void clear_race_time();
  static const int kRaceTimeFieldNumber = 2;
  inline ::google::protobuf::int32 race_time(int index) const;
  inline void set_race_time(int index, ::google::protobuf::int32 value);
  inline void add_race_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      race_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_race_time();

  // required int32 race_state = 3;
  inline bool has_race_state() const;
  inline void clear_race_state();
  static const int kRaceStateFieldNumber = 3;
  inline ::google::protobuf::int32 race_state() const;
  inline void set_race_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFightTime)
 private:
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_race_state();
  inline void clear_has_race_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > race_time_;
  ::google::protobuf::int32 apply_time_;
  ::google::protobuf::int32 race_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFightTime* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFightResultMember : public ::google::protobuf::Message {
 public:
  GM_GangFightResultMember();
  virtual ~GM_GangFightResultMember();

  GM_GangFightResultMember(const GM_GangFightResultMember& from);

  inline GM_GangFightResultMember& operator=(const GM_GangFightResultMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFightResultMember& default_instance();

  void Swap(GM_GangFightResultMember* other);

  // implements Message ----------------------------------------------

  GM_GangFightResultMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFightResultMember& from);
  void MergeFrom(const GM_GangFightResultMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 kill = 2;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 2;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);

  // required int32 die = 3;
  inline bool has_die() const;
  inline void clear_die();
  static const int kDieFieldNumber = 3;
  inline ::google::protobuf::int32 die() const;
  inline void set_die(::google::protobuf::int32 value);

  // required int32 honor = 4;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 4;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // required int32 persent = 5;
  inline bool has_persent() const;
  inline void clear_persent();
  static const int kPersentFieldNumber = 5;
  inline ::google::protobuf::int32 persent() const;
  inline void set_persent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFightResultMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_kill();
  inline void clear_has_kill();
  inline void set_has_die();
  inline void clear_has_die();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_persent();
  inline void clear_has_persent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 kill_;
  ::google::protobuf::int32 die_;
  ::google::protobuf::int32 honor_;
  ::google::protobuf::int32 persent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFightResultMember* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFightResult : public ::google::protobuf::Message {
 public:
  GM_GangFightResult();
  virtual ~GM_GangFightResult();

  GM_GangFightResult(const GM_GangFightResult& from);

  inline GM_GangFightResult& operator=(const GM_GangFightResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFightResult& default_instance();

  void Swap(GM_GangFightResult* other);

  // implements Message ----------------------------------------------

  GM_GangFightResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFightResult& from);
  void MergeFrom(const GM_GangFightResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_GangFightResultMember ourteam = 1;
  inline int ourteam_size() const;
  inline void clear_ourteam();
  static const int kOurteamFieldNumber = 1;
  inline const ::GM_GangFightResultMember& ourteam(int index) const;
  inline ::GM_GangFightResultMember* mutable_ourteam(int index);
  inline ::GM_GangFightResultMember* add_ourteam();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFightResultMember >&
      ourteam() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangFightResultMember >*
      mutable_ourteam();

  // required int32 usetime = 3;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUsetimeFieldNumber = 3;
  inline ::google::protobuf::int32 usetime() const;
  inline void set_usetime(::google::protobuf::int32 value);

  // required int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 ourpeople = 5;
  inline bool has_ourpeople() const;
  inline void clear_ourpeople();
  static const int kOurpeopleFieldNumber = 5;
  inline ::google::protobuf::int32 ourpeople() const;
  inline void set_ourpeople(::google::protobuf::int32 value);

  // required string ourname = 6;
  inline bool has_ourname() const;
  inline void clear_ourname();
  static const int kOurnameFieldNumber = 6;
  inline const ::std::string& ourname() const;
  inline void set_ourname(const ::std::string& value);
  inline void set_ourname(const char* value);
  inline void set_ourname(const char* value, size_t size);
  inline ::std::string* mutable_ourname();
  inline ::std::string* release_ourname();
  inline void set_allocated_ourname(::std::string* ourname);

  // required int32 otherpeople = 7;
  inline bool has_otherpeople() const;
  inline void clear_otherpeople();
  static const int kOtherpeopleFieldNumber = 7;
  inline ::google::protobuf::int32 otherpeople() const;
  inline void set_otherpeople(::google::protobuf::int32 value);

  // required string othername = 8;
  inline bool has_othername() const;
  inline void clear_othername();
  static const int kOthernameFieldNumber = 8;
  inline const ::std::string& othername() const;
  inline void set_othername(const ::std::string& value);
  inline void set_othername(const char* value);
  inline void set_othername(const char* value, size_t size);
  inline ::std::string* mutable_othername();
  inline ::std::string* release_othername();
  inline void set_allocated_othername(::std::string* othername);

  // @@protoc_insertion_point(class_scope:GM_GangFightResult)
 private:
  inline void set_has_usetime();
  inline void clear_has_usetime();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ourpeople();
  inline void clear_has_ourpeople();
  inline void set_has_ourname();
  inline void clear_has_ourname();
  inline void set_has_otherpeople();
  inline void clear_has_otherpeople();
  inline void set_has_othername();
  inline void clear_has_othername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangFightResultMember > ourteam_;
  ::google::protobuf::int32 usetime_;
  ::google::protobuf::int32 result_;
  ::std::string* ourname_;
  ::google::protobuf::int32 ourpeople_;
  ::google::protobuf::int32 otherpeople_;
  ::std::string* othername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFightResult* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFightPeopleCount : public ::google::protobuf::Message {
 public:
  GM_GangFightPeopleCount();
  virtual ~GM_GangFightPeopleCount();

  GM_GangFightPeopleCount(const GM_GangFightPeopleCount& from);

  inline GM_GangFightPeopleCount& operator=(const GM_GangFightPeopleCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFightPeopleCount& default_instance();

  void Swap(GM_GangFightPeopleCount* other);

  // implements Message ----------------------------------------------

  GM_GangFightPeopleCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFightPeopleCount& from);
  void MergeFrom(const GM_GangFightPeopleCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 camp = 1;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 1;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // required int32 people = 2;
  inline bool has_people() const;
  inline void clear_people();
  static const int kPeopleFieldNumber = 2;
  inline ::google::protobuf::int32 people() const;
  inline void set_people(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangFightPeopleCount)
 private:
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_people();
  inline void clear_has_people();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 people_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFightPeopleCount* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangFightPeople : public ::google::protobuf::Message {
 public:
  GM_GangFightPeople();
  virtual ~GM_GangFightPeople();

  GM_GangFightPeople(const GM_GangFightPeople& from);

  inline GM_GangFightPeople& operator=(const GM_GangFightPeople& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangFightPeople& default_instance();

  void Swap(GM_GangFightPeople* other);

  // implements Message ----------------------------------------------

  GM_GangFightPeople* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangFightPeople& from);
  void MergeFrom(const GM_GangFightPeople& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_GangFightPeopleCount peopledata = 1;
  inline int peopledata_size() const;
  inline void clear_peopledata();
  static const int kPeopledataFieldNumber = 1;
  inline const ::GM_GangFightPeopleCount& peopledata(int index) const;
  inline ::GM_GangFightPeopleCount* mutable_peopledata(int index);
  inline ::GM_GangFightPeopleCount* add_peopledata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFightPeopleCount >&
      peopledata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangFightPeopleCount >*
      mutable_peopledata();

  // @@protoc_insertion_point(class_scope:GM_GangFightPeople)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangFightPeopleCount > peopledata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangFightPeople* default_instance_;
};
// -------------------------------------------------------------------

class GM_DBGangActive : public ::google::protobuf::Message {
 public:
  GM_DBGangActive();
  virtual ~GM_DBGangActive();

  GM_DBGangActive(const GM_DBGangActive& from);

  inline GM_DBGangActive& operator=(const GM_DBGangActive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DBGangActive& default_instance();

  void Swap(GM_DBGangActive* other);

  // implements Message ----------------------------------------------

  GM_DBGangActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DBGangActive& from);
  void MergeFrom(const GM_DBGangActive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 luckNum = 2;
  inline bool has_lucknum() const;
  inline void clear_lucknum();
  static const int kLuckNumFieldNumber = 2;
  inline ::google::protobuf::int32 lucknum() const;
  inline void set_lucknum(::google::protobuf::int32 value);

  // required int32 luckTime = 3;
  inline bool has_lucktime() const;
  inline void clear_lucktime();
  static const int kLuckTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lucktime() const;
  inline void set_lucktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_DBGangActive)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_lucknum();
  inline void clear_has_lucknum();
  inline void set_has_lucktime();
  inline void clear_has_lucktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 lucknum_;
  ::google::protobuf::int32 lucktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_DBGangActive* default_instance_;
};
// -------------------------------------------------------------------

class GM_DBAllGangSkill : public ::google::protobuf::Message {
 public:
  GM_DBAllGangSkill();
  virtual ~GM_DBAllGangSkill();

  GM_DBAllGangSkill(const GM_DBAllGangSkill& from);

  inline GM_DBAllGangSkill& operator=(const GM_DBAllGangSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DBAllGangSkill& default_instance();

  void Swap(GM_DBAllGangSkill* other);

  // implements Message ----------------------------------------------

  GM_DBAllGangSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DBAllGangSkill& from);
  void MergeFrom(const GM_DBAllGangSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_DBGangSkill skills = 3;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 3;
  inline const ::GM_DBGangSkill& skills(int index) const;
  inline ::GM_DBGangSkill* mutable_skills(int index);
  inline ::GM_DBGangSkill* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_DBGangSkill >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_DBGangSkill >*
      mutable_skills();

  // @@protoc_insertion_point(class_scope:GM_DBAllGangSkill)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::GM_DBGangSkill > skills_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_DBAllGangSkill* default_instance_;
};
// -------------------------------------------------------------------

class GM_DBGangSkill : public ::google::protobuf::Message {
 public:
  GM_DBGangSkill();
  virtual ~GM_DBGangSkill();

  GM_DBGangSkill(const GM_DBGangSkill& from);

  inline GM_DBGangSkill& operator=(const GM_DBGangSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DBGangSkill& default_instance();

  void Swap(GM_DBGangSkill* other);

  // implements Message ----------------------------------------------

  GM_DBGangSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DBGangSkill& from);
  void MergeFrom(const GM_DBGangSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 skillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // required int32 skillLv = 3;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 3;
  inline ::google::protobuf::int32 skilllv() const;
  inline void set_skilllv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_DBGangSkill)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 skilllv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_DBGangSkill* default_instance_;
};
// -------------------------------------------------------------------

class GM_DBGangExit : public ::google::protobuf::Message {
 public:
  GM_DBGangExit();
  virtual ~GM_DBGangExit();

  GM_DBGangExit(const GM_DBGangExit& from);

  inline GM_DBGangExit& operator=(const GM_DBGangExit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DBGangExit& default_instance();

  void Swap(GM_DBGangExit* other);

  // implements Message ----------------------------------------------

  GM_DBGangExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DBGangExit& from);
  void MergeFrom(const GM_DBGangExit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 exitTime = 2;
  inline bool has_exittime() const;
  inline void clear_exittime();
  static const int kExitTimeFieldNumber = 2;
  inline ::google::protobuf::int32 exittime() const;
  inline void set_exittime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_DBGangExit)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_exittime();
  inline void clear_has_exittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 exittime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_DBGangExit* default_instance_;
};
// -------------------------------------------------------------------

class GM_AllGangInvite : public ::google::protobuf::Message {
 public:
  GM_AllGangInvite();
  virtual ~GM_AllGangInvite();

  GM_AllGangInvite(const GM_AllGangInvite& from);

  inline GM_AllGangInvite& operator=(const GM_AllGangInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AllGangInvite& default_instance();

  void Swap(GM_AllGangInvite* other);

  // implements Message ----------------------------------------------

  GM_AllGangInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AllGangInvite& from);
  void MergeFrom(const GM_AllGangInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_GangInvite invites = 2;
  inline int invites_size() const;
  inline void clear_invites();
  static const int kInvitesFieldNumber = 2;
  inline const ::GM_GangInvite& invites(int index) const;
  inline ::GM_GangInvite* mutable_invites(int index);
  inline ::GM_GangInvite* add_invites();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_GangInvite >&
      invites() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_GangInvite >*
      mutable_invites();

  // @@protoc_insertion_point(class_scope:GM_AllGangInvite)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_GangInvite > invites_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_AllGangInvite* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangInvite : public ::google::protobuf::Message {
 public:
  GM_GangInvite();
  virtual ~GM_GangInvite();

  GM_GangInvite(const GM_GangInvite& from);

  inline GM_GangInvite& operator=(const GM_GangInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangInvite& default_instance();

  void Swap(GM_GangInvite* other);

  // implements Message ----------------------------------------------

  GM_GangInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangInvite& from);
  void MergeFrom(const GM_GangInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required int64 gangGmid = 3;
  inline bool has_ganggmid() const;
  inline void clear_ganggmid();
  static const int kGangGmidFieldNumber = 3;
  inline ::google::protobuf::int64 ganggmid() const;
  inline void set_ganggmid(::google::protobuf::int64 value);

  // required int32 operId = 4;
  inline bool has_operid() const;
  inline void clear_operid();
  static const int kOperIdFieldNumber = 4;
  inline ::google::protobuf::int32 operid() const;
  inline void set_operid(::google::protobuf::int32 value);

  // optional string operName = 5;
  inline bool has_opername() const;
  inline void clear_opername();
  static const int kOperNameFieldNumber = 5;
  inline const ::std::string& opername() const;
  inline void set_opername(const ::std::string& value);
  inline void set_opername(const char* value);
  inline void set_opername(const char* value, size_t size);
  inline ::std::string* mutable_opername();
  inline ::std::string* release_opername();
  inline void set_allocated_opername(::std::string* opername);

  // optional int32 flag = 6;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 6;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangInvite)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_ganggmid();
  inline void clear_has_ganggmid();
  inline void set_has_operid();
  inline void clear_has_operid();
  inline void set_has_opername();
  inline void clear_has_opername();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 operid_;
  ::google::protobuf::int64 ganggmid_;
  ::std::string* opername_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangInvite* default_instance_;
};
// -------------------------------------------------------------------

class GM_GangDataChange : public ::google::protobuf::Message {
 public:
  GM_GangDataChange();
  virtual ~GM_GangDataChange();

  GM_GangDataChange(const GM_GangDataChange& from);

  inline GM_GangDataChange& operator=(const GM_GangDataChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GangDataChange& default_instance();

  void Swap(GM_GangDataChange* other);

  // implements Message ----------------------------------------------

  GM_GangDataChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GangDataChange& from);
  void MergeFrom(const GM_GangDataChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 signFlag = 2;
  inline bool has_signflag() const;
  inline void clear_signflag();
  static const int kSignFlagFieldNumber = 2;
  inline ::google::protobuf::int32 signflag() const;
  inline void set_signflag(::google::protobuf::int32 value);

  // optional int32 skillLevel = 3;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 3;
  inline ::google::protobuf::int32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::int32 value);

  // optional int32 gangContribute = 4;
  inline bool has_gangcontribute() const;
  inline void clear_gangcontribute();
  static const int kGangContributeFieldNumber = 4;
  inline ::google::protobuf::int32 gangcontribute() const;
  inline void set_gangcontribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GangDataChange)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_signflag();
  inline void clear_has_signflag();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();
  inline void set_has_gangcontribute();
  inline void clear_has_gangcontribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 signflag_;
  ::google::protobuf::int32 skilllevel_;
  ::google::protobuf::int32 gangcontribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static GM_GangDataChange* default_instance_;
};
// -------------------------------------------------------------------

class DB_tAllGangData : public ::google::protobuf::Message {
 public:
  DB_tAllGangData();
  virtual ~DB_tAllGangData();

  DB_tAllGangData(const DB_tAllGangData& from);

  inline DB_tAllGangData& operator=(const DB_tAllGangData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_tAllGangData& default_instance();

  void Swap(DB_tAllGangData* other);

  // implements Message ----------------------------------------------

  DB_tAllGangData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_tAllGangData& from);
  void MergeFrom(const DB_tAllGangData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .DB_tGangData gangdata = 2;
  inline int gangdata_size() const;
  inline void clear_gangdata();
  static const int kGangdataFieldNumber = 2;
  inline const ::DB_tGangData& gangdata(int index) const;
  inline ::DB_tGangData* mutable_gangdata(int index);
  inline ::DB_tGangData* add_gangdata();
  inline const ::google::protobuf::RepeatedPtrField< ::DB_tGangData >&
      gangdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB_tGangData >*
      mutable_gangdata();

  // @@protoc_insertion_point(class_scope:DB_tAllGangData)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DB_tGangData > gangdata_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static DB_tAllGangData* default_instance_;
};
// -------------------------------------------------------------------

class DB_tGangData : public ::google::protobuf::Message {
 public:
  DB_tGangData();
  virtual ~DB_tGangData();

  DB_tGangData(const DB_tGangData& from);

  inline DB_tGangData& operator=(const DB_tGangData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_tGangData& default_instance();

  void Swap(DB_tGangData* other);

  // implements Message ----------------------------------------------

  DB_tGangData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_tGangData& from);
  void MergeFrom(const DB_tGangData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 templv = 5;
  inline bool has_templv() const;
  inline void clear_templv();
  static const int kTemplvFieldNumber = 5;
  inline ::google::protobuf::int32 templv() const;
  inline void set_templv(::google::protobuf::int32 value);

  // optional int32 shoplv = 6;
  inline bool has_shoplv() const;
  inline void clear_shoplv();
  static const int kShoplvFieldNumber = 6;
  inline ::google::protobuf::int32 shoplv() const;
  inline void set_shoplv(::google::protobuf::int32 value);

  // optional string notice = 7;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 7;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional string pronoce = 8;
  inline bool has_pronoce() const;
  inline void clear_pronoce();
  static const int kPronoceFieldNumber = 8;
  inline const ::std::string& pronoce() const;
  inline void set_pronoce(const ::std::string& value);
  inline void set_pronoce(const char* value);
  inline void set_pronoce(const char* value, size_t size);
  inline ::std::string* mutable_pronoce();
  inline ::std::string* release_pronoce();
  inline void set_allocated_pronoce(::std::string* pronoce);

  // optional int32 uplvtime = 9;
  inline bool has_uplvtime() const;
  inline void clear_uplvtime();
  static const int kUplvtimeFieldNumber = 9;
  inline ::google::protobuf::int32 uplvtime() const;
  inline void set_uplvtime(::google::protobuf::int32 value);

  // optional int32 blesscnt = 10;
  inline bool has_blesscnt() const;
  inline void clear_blesscnt();
  static const int kBlesscntFieldNumber = 10;
  inline ::google::protobuf::int32 blesscnt() const;
  inline void set_blesscnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_tGangData)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_templv();
  inline void clear_has_templv();
  inline void set_has_shoplv();
  inline void clear_has_shoplv();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_pronoce();
  inline void clear_has_pronoce();
  inline void set_has_uplvtime();
  inline void clear_has_uplvtime();
  inline void set_has_blesscnt();
  inline void clear_has_blesscnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::std::string* name_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 templv_;
  ::google::protobuf::int32 shoplv_;
  ::std::string* notice_;
  ::std::string* pronoce_;
  ::google::protobuf::int32 uplvtime_;
  ::google::protobuf::int32 blesscnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static DB_tGangData* default_instance_;
};
// -------------------------------------------------------------------

class DB_LifeTreeRoleInfo_Return : public ::google::protobuf::Message {
 public:
  DB_LifeTreeRoleInfo_Return();
  virtual ~DB_LifeTreeRoleInfo_Return();

  DB_LifeTreeRoleInfo_Return(const DB_LifeTreeRoleInfo_Return& from);

  inline DB_LifeTreeRoleInfo_Return& operator=(const DB_LifeTreeRoleInfo_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DB_LifeTreeRoleInfo_Return& default_instance();

  void Swap(DB_LifeTreeRoleInfo_Return* other);

  // implements Message ----------------------------------------------

  DB_LifeTreeRoleInfo_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DB_LifeTreeRoleInfo_Return& from);
  void MergeFrom(const DB_LifeTreeRoleInfo_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_RoleId = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // required int32 m_LastTime = 2;
  inline bool has_m_lasttime() const;
  inline void clear_m_lasttime();
  static const int kMLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 m_lasttime() const;
  inline void set_m_lasttime(::google::protobuf::int32 value);

  // required int32 m_Count = 3;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 3;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB_LifeTreeRoleInfo_Return)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_lasttime();
  inline void clear_has_m_lasttime();
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_lasttime_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGang_2etxt();
  friend void protobuf_AssignDesc_SP_5fGang_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGang_2etxt();

  void InitAsDefaultInstance();
  static DB_LifeTreeRoleInfo_Return* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_GangBuyRequest

// required int32 roleId = 1;
inline bool GM_GangBuyRequest::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangBuyRequest::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangBuyRequest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangBuyRequest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangBuyRequest::roleid() const {
  return roleid_;
}
inline void GM_GangBuyRequest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 itemId = 2;
inline bool GM_GangBuyRequest::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangBuyRequest::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangBuyRequest::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangBuyRequest::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 GM_GangBuyRequest::itemid() const {
  return itemid_;
}
inline void GM_GangBuyRequest::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 count = 3;
inline bool GM_GangBuyRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangBuyRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangBuyRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangBuyRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_GangBuyRequest::count() const {
  return count_;
}
inline void GM_GangBuyRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GM_GangOreOperate

// required int32 roleId = 1;
inline bool GM_GangOreOperate::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangOreOperate::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangOreOperate::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangOreOperate::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangOreOperate::roleid() const {
  return roleid_;
}
inline void GM_GangOreOperate::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 type = 2;
inline bool GM_GangOreOperate::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangOreOperate::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangOreOperate::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangOreOperate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GM_GangOreOperate::type() const {
  return type_;
}
inline void GM_GangOreOperate::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 num = 3;
inline bool GM_GangOreOperate::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangOreOperate::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangOreOperate::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangOreOperate::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GM_GangOreOperate::num() const {
  return num_;
}
inline void GM_GangOreOperate::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// GM_MiningRequest

// required int32 roleId = 1;
inline bool GM_MiningRequest::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_MiningRequest::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_MiningRequest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_MiningRequest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_MiningRequest::roleid() const {
  return roleid_;
}
inline void GM_MiningRequest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 mineId = 2;
inline bool GM_MiningRequest::has_mineid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_MiningRequest::set_has_mineid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_MiningRequest::clear_has_mineid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_MiningRequest::clear_mineid() {
  mineid_ = 0;
  clear_has_mineid();
}
inline ::google::protobuf::int32 GM_MiningRequest::mineid() const {
  return mineid_;
}
inline void GM_MiningRequest::set_mineid(::google::protobuf::int32 value) {
  set_has_mineid();
  mineid_ = value;
}

// required int64 pickaxeId = 3;
inline bool GM_MiningRequest::has_pickaxeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_MiningRequest::set_has_pickaxeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_MiningRequest::clear_has_pickaxeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_MiningRequest::clear_pickaxeid() {
  pickaxeid_ = GOOGLE_LONGLONG(0);
  clear_has_pickaxeid();
}
inline ::google::protobuf::int64 GM_MiningRequest::pickaxeid() const {
  return pickaxeid_;
}
inline void GM_MiningRequest::set_pickaxeid(::google::protobuf::int64 value) {
  set_has_pickaxeid();
  pickaxeid_ = value;
}

// -------------------------------------------------------------------

// GM_GangSimpleInfo

// required int64 gmid = 1;
inline bool GM_GangSimpleInfo::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangSimpleInfo::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangSimpleInfo::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangSimpleInfo::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_GangSimpleInfo::gmid() const {
  return gmid_;
}
inline void GM_GangSimpleInfo::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// required string name = 2;
inline bool GM_GangSimpleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangSimpleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangSimpleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangSimpleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_GangSimpleInfo::name() const {
  return *name_;
}
inline void GM_GangSimpleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangSimpleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangSimpleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangSimpleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_GangSimpleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangSimpleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 rank = 3;
inline bool GM_GangSimpleInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangSimpleInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangSimpleInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangSimpleInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GM_GangSimpleInfo::rank() const {
  return rank_;
}
inline void GM_GangSimpleInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 power = 4;
inline bool GM_GangSimpleInfo::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangSimpleInfo::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangSimpleInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangSimpleInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 GM_GangSimpleInfo::power() const {
  return power_;
}
inline void GM_GangSimpleInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// GM_GangApplyInfo

// required int32 result = 1;
inline bool GM_GangApplyInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangApplyInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangApplyInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangApplyInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangApplyInfo::result() const {
  return result_;
}
inline void GM_GangApplyInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GM_GangSimpleInfo gangsinfo = 2;
inline int GM_GangApplyInfo::gangsinfo_size() const {
  return gangsinfo_.size();
}
inline void GM_GangApplyInfo::clear_gangsinfo() {
  gangsinfo_.Clear();
}
inline const ::GM_GangSimpleInfo& GM_GangApplyInfo::gangsinfo(int index) const {
  return gangsinfo_.Get(index);
}
inline ::GM_GangSimpleInfo* GM_GangApplyInfo::mutable_gangsinfo(int index) {
  return gangsinfo_.Mutable(index);
}
inline ::GM_GangSimpleInfo* GM_GangApplyInfo::add_gangsinfo() {
  return gangsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >&
GM_GangApplyInfo::gangsinfo() const {
  return gangsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >*
GM_GangApplyInfo::mutable_gangsinfo() {
  return &gangsinfo_;
}

// repeated .GM_GangSimpleInfo myganginfo = 3;
inline int GM_GangApplyInfo::myganginfo_size() const {
  return myganginfo_.size();
}
inline void GM_GangApplyInfo::clear_myganginfo() {
  myganginfo_.Clear();
}
inline const ::GM_GangSimpleInfo& GM_GangApplyInfo::myganginfo(int index) const {
  return myganginfo_.Get(index);
}
inline ::GM_GangSimpleInfo* GM_GangApplyInfo::mutable_myganginfo(int index) {
  return myganginfo_.Mutable(index);
}
inline ::GM_GangSimpleInfo* GM_GangApplyInfo::add_myganginfo() {
  return myganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >&
GM_GangApplyInfo::myganginfo() const {
  return myganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangSimpleInfo >*
GM_GangApplyInfo::mutable_myganginfo() {
  return &myganginfo_;
}

// optional int32 totalapply = 4;
inline bool GM_GangApplyInfo::has_totalapply() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangApplyInfo::set_has_totalapply() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangApplyInfo::clear_has_totalapply() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangApplyInfo::clear_totalapply() {
  totalapply_ = 0;
  clear_has_totalapply();
}
inline ::google::protobuf::int32 GM_GangApplyInfo::totalapply() const {
  return totalapply_;
}
inline void GM_GangApplyInfo::set_totalapply(::google::protobuf::int32 value) {
  set_has_totalapply();
  totalapply_ = value;
}

// -------------------------------------------------------------------

// GM_MarchInfo

// required int32 round = 1;
inline bool GM_MarchInfo::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_MarchInfo::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_MarchInfo::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_MarchInfo::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 GM_MarchInfo::round() const {
  return round_;
}
inline void GM_MarchInfo::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// required int32 weekstart = 2;
inline bool GM_MarchInfo::has_weekstart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_MarchInfo::set_has_weekstart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_MarchInfo::clear_has_weekstart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_MarchInfo::clear_weekstart() {
  weekstart_ = 0;
  clear_has_weekstart();
}
inline ::google::protobuf::int32 GM_MarchInfo::weekstart() const {
  return weekstart_;
}
inline void GM_MarchInfo::set_weekstart(::google::protobuf::int32 value) {
  set_has_weekstart();
  weekstart_ = value;
}

// required int32 starttime = 3;
inline bool GM_MarchInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_MarchInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_MarchInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_MarchInfo::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 GM_MarchInfo::starttime() const {
  return starttime_;
}
inline void GM_MarchInfo::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// -------------------------------------------------------------------

// GM_GangRaceSimpleInfo

// required int32 roleid = 1;
inline bool GM_GangRaceSimpleInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRaceSimpleInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRaceSimpleInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRaceSimpleInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangRaceSimpleInfo::roleid() const {
  return roleid_;
}
inline void GM_GangRaceSimpleInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 equipId = 3;
inline bool GM_GangRaceSimpleInfo::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRaceSimpleInfo::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRaceSimpleInfo::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRaceSimpleInfo::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 GM_GangRaceSimpleInfo::equipid() const {
  return equipid_;
}
inline void GM_GangRaceSimpleInfo::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// repeated int32 fashionInfo = 4;
inline int GM_GangRaceSimpleInfo::fashioninfo_size() const {
  return fashioninfo_.size();
}
inline void GM_GangRaceSimpleInfo::clear_fashioninfo() {
  fashioninfo_.Clear();
}
inline ::google::protobuf::int32 GM_GangRaceSimpleInfo::fashioninfo(int index) const {
  return fashioninfo_.Get(index);
}
inline void GM_GangRaceSimpleInfo::set_fashioninfo(int index, ::google::protobuf::int32 value) {
  fashioninfo_.Set(index, value);
}
inline void GM_GangRaceSimpleInfo::add_fashioninfo(::google::protobuf::int32 value) {
  fashioninfo_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GM_GangRaceSimpleInfo::fashioninfo() const {
  return fashioninfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GM_GangRaceSimpleInfo::mutable_fashioninfo() {
  return &fashioninfo_;
}

// required int32 profession = 2;
inline bool GM_GangRaceSimpleInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRaceSimpleInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRaceSimpleInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRaceSimpleInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 GM_GangRaceSimpleInfo::profession() const {
  return profession_;
}
inline void GM_GangRaceSimpleInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int64 ganggmid = 5;
inline bool GM_GangRaceSimpleInfo::has_ganggmid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangRaceSimpleInfo::set_has_ganggmid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangRaceSimpleInfo::clear_has_ganggmid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangRaceSimpleInfo::clear_ganggmid() {
  ganggmid_ = GOOGLE_LONGLONG(0);
  clear_has_ganggmid();
}
inline ::google::protobuf::int64 GM_GangRaceSimpleInfo::ganggmid() const {
  return ganggmid_;
}
inline void GM_GangRaceSimpleInfo::set_ganggmid(::google::protobuf::int64 value) {
  set_has_ganggmid();
  ganggmid_ = value;
}

// -------------------------------------------------------------------

// GM_GangRaceData

// required int32 result = 3;
inline bool GM_GangRaceData::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRaceData::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRaceData::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRaceData::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangRaceData::result() const {
  return result_;
}
inline void GM_GangRaceData::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 race = 2;
inline bool GM_GangRaceData::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRaceData::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRaceData::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRaceData::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 GM_GangRaceData::race() const {
  return race_;
}
inline void GM_GangRaceData::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// repeated .GM_MarchInfo marchinfo = 4;
inline int GM_GangRaceData::marchinfo_size() const {
  return marchinfo_.size();
}
inline void GM_GangRaceData::clear_marchinfo() {
  marchinfo_.Clear();
}
inline const ::GM_MarchInfo& GM_GangRaceData::marchinfo(int index) const {
  return marchinfo_.Get(index);
}
inline ::GM_MarchInfo* GM_GangRaceData::mutable_marchinfo(int index) {
  return marchinfo_.Mutable(index);
}
inline ::GM_MarchInfo* GM_GangRaceData::add_marchinfo() {
  return marchinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_MarchInfo >&
GM_GangRaceData::marchinfo() const {
  return marchinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_MarchInfo >*
GM_GangRaceData::mutable_marchinfo() {
  return &marchinfo_;
}

// required int32 joinedpeople = 5;
inline bool GM_GangRaceData::has_joinedpeople() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRaceData::set_has_joinedpeople() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRaceData::clear_has_joinedpeople() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRaceData::clear_joinedpeople() {
  joinedpeople_ = 0;
  clear_has_joinedpeople();
}
inline ::google::protobuf::int32 GM_GangRaceData::joinedpeople() const {
  return joinedpeople_;
}
inline void GM_GangRaceData::set_joinedpeople(::google::protobuf::int32 value) {
  set_has_joinedpeople();
  joinedpeople_ = value;
}

// required int64 yourgangid = 7;
inline bool GM_GangRaceData::has_yourgangid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangRaceData::set_has_yourgangid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangRaceData::clear_has_yourgangid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangRaceData::clear_yourgangid() {
  yourgangid_ = GOOGLE_LONGLONG(0);
  clear_has_yourgangid();
}
inline ::google::protobuf::int64 GM_GangRaceData::yourgangid() const {
  return yourgangid_;
}
inline void GM_GangRaceData::set_yourgangid(::google::protobuf::int64 value) {
  set_has_yourgangid();
  yourgangid_ = value;
}

// required string yourgangname = 9;
inline bool GM_GangRaceData::has_yourgangname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangRaceData::set_has_yourgangname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangRaceData::clear_has_yourgangname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangRaceData::clear_yourgangname() {
  if (yourgangname_ != &::google::protobuf::internal::kEmptyString) {
    yourgangname_->clear();
  }
  clear_has_yourgangname();
}
inline const ::std::string& GM_GangRaceData::yourgangname() const {
  return *yourgangname_;
}
inline void GM_GangRaceData::set_yourgangname(const ::std::string& value) {
  set_has_yourgangname();
  if (yourgangname_ == &::google::protobuf::internal::kEmptyString) {
    yourgangname_ = new ::std::string;
  }
  yourgangname_->assign(value);
}
inline void GM_GangRaceData::set_yourgangname(const char* value) {
  set_has_yourgangname();
  if (yourgangname_ == &::google::protobuf::internal::kEmptyString) {
    yourgangname_ = new ::std::string;
  }
  yourgangname_->assign(value);
}
inline void GM_GangRaceData::set_yourgangname(const char* value, size_t size) {
  set_has_yourgangname();
  if (yourgangname_ == &::google::protobuf::internal::kEmptyString) {
    yourgangname_ = new ::std::string;
  }
  yourgangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangRaceData::mutable_yourgangname() {
  set_has_yourgangname();
  if (yourgangname_ == &::google::protobuf::internal::kEmptyString) {
    yourgangname_ = new ::std::string;
  }
  return yourgangname_;
}
inline ::std::string* GM_GangRaceData::release_yourgangname() {
  clear_has_yourgangname();
  if (yourgangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yourgangname_;
    yourgangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangRaceData::set_allocated_yourgangname(::std::string* yourgangname) {
  if (yourgangname_ != &::google::protobuf::internal::kEmptyString) {
    delete yourgangname_;
  }
  if (yourgangname) {
    set_has_yourgangname();
    yourgangname_ = yourgangname;
  } else {
    clear_has_yourgangname();
    yourgangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 othergangid = 10;
inline bool GM_GangRaceData::has_othergangid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GangRaceData::set_has_othergangid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GangRaceData::clear_has_othergangid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GangRaceData::clear_othergangid() {
  othergangid_ = GOOGLE_LONGLONG(0);
  clear_has_othergangid();
}
inline ::google::protobuf::int64 GM_GangRaceData::othergangid() const {
  return othergangid_;
}
inline void GM_GangRaceData::set_othergangid(::google::protobuf::int64 value) {
  set_has_othergangid();
  othergangid_ = value;
}

// optional string othergangname = 11;
inline bool GM_GangRaceData::has_othergangname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GangRaceData::set_has_othergangname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GangRaceData::clear_has_othergangname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GangRaceData::clear_othergangname() {
  if (othergangname_ != &::google::protobuf::internal::kEmptyString) {
    othergangname_->clear();
  }
  clear_has_othergangname();
}
inline const ::std::string& GM_GangRaceData::othergangname() const {
  return *othergangname_;
}
inline void GM_GangRaceData::set_othergangname(const ::std::string& value) {
  set_has_othergangname();
  if (othergangname_ == &::google::protobuf::internal::kEmptyString) {
    othergangname_ = new ::std::string;
  }
  othergangname_->assign(value);
}
inline void GM_GangRaceData::set_othergangname(const char* value) {
  set_has_othergangname();
  if (othergangname_ == &::google::protobuf::internal::kEmptyString) {
    othergangname_ = new ::std::string;
  }
  othergangname_->assign(value);
}
inline void GM_GangRaceData::set_othergangname(const char* value, size_t size) {
  set_has_othergangname();
  if (othergangname_ == &::google::protobuf::internal::kEmptyString) {
    othergangname_ = new ::std::string;
  }
  othergangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangRaceData::mutable_othergangname() {
  set_has_othergangname();
  if (othergangname_ == &::google::protobuf::internal::kEmptyString) {
    othergangname_ = new ::std::string;
  }
  return othergangname_;
}
inline ::std::string* GM_GangRaceData::release_othergangname() {
  clear_has_othergangname();
  if (othergangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othergangname_;
    othergangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangRaceData::set_allocated_othergangname(::std::string* othergangname) {
  if (othergangname_ != &::google::protobuf::internal::kEmptyString) {
    delete othergangname_;
  }
  if (othergangname) {
    set_has_othergangname();
    othergangname_ = othergangname;
  } else {
    clear_has_othergangname();
    othergangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 readyTime = 8;
inline bool GM_GangRaceData::has_readytime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GangRaceData::set_has_readytime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GangRaceData::clear_has_readytime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GangRaceData::clear_readytime() {
  readytime_ = 0;
  clear_has_readytime();
}
inline ::google::protobuf::int32 GM_GangRaceData::readytime() const {
  return readytime_;
}
inline void GM_GangRaceData::set_readytime(::google::protobuf::int32 value) {
  set_has_readytime();
  readytime_ = value;
}

// -------------------------------------------------------------------

// GM_GangRace

// required int64 gmid = 1;
inline bool GM_GangRace::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRace::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRace::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRace::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_GangRace::gmid() const {
  return gmid_;
}
inline void GM_GangRace::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int64 targetgmid = 3;
inline bool GM_GangRace::has_targetgmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRace::set_has_targetgmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRace::clear_has_targetgmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRace::clear_targetgmid() {
  targetgmid_ = GOOGLE_LONGLONG(0);
  clear_has_targetgmid();
}
inline ::google::protobuf::int64 GM_GangRace::targetgmid() const {
  return targetgmid_;
}
inline void GM_GangRace::set_targetgmid(::google::protobuf::int64 value) {
  set_has_targetgmid();
  targetgmid_ = value;
}

// optional int32 level = 2;
inline bool GM_GangRace::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangRace::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangRace::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangRace::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GM_GangRace::level() const {
  return level_;
}
inline void GM_GangRace::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string name = 4;
inline bool GM_GangRace::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRace::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRace::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRace::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_GangRace::name() const {
  return *name_;
}
inline void GM_GangRace::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangRace::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangRace::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangRace::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_GangRace::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangRace::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 power = 5;
inline bool GM_GangRace::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangRace::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangRace::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangRace::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 GM_GangRace::power() const {
  return power_;
}
inline void GM_GangRace::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 people = 6;
inline bool GM_GangRace::has_people() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangRace::set_has_people() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangRace::clear_has_people() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangRace::clear_people() {
  people_ = 0;
  clear_has_people();
}
inline ::google::protobuf::int32 GM_GangRace::people() const {
  return people_;
}
inline void GM_GangRace::set_people(::google::protobuf::int32 value) {
  set_has_people();
  people_ = value;
}

// -------------------------------------------------------------------

// GM_GangRacePare

// required int32 result = 2;
inline bool GM_GangRacePare::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRacePare::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRacePare::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRacePare::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangRacePare::result() const {
  return result_;
}
inline void GM_GangRacePare::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 race = 3;
inline bool GM_GangRacePare::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangRacePare::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangRacePare::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangRacePare::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 GM_GangRacePare::race() const {
  return race_;
}
inline void GM_GangRacePare::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// repeated .GM_GangRace racelist = 1;
inline int GM_GangRacePare::racelist_size() const {
  return racelist_.size();
}
inline void GM_GangRacePare::clear_racelist() {
  racelist_.Clear();
}
inline const ::GM_GangRace& GM_GangRacePare::racelist(int index) const {
  return racelist_.Get(index);
}
inline ::GM_GangRace* GM_GangRacePare::mutable_racelist(int index) {
  return racelist_.Mutable(index);
}
inline ::GM_GangRace* GM_GangRacePare::add_racelist() {
  return racelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangRace >&
GM_GangRacePare::racelist() const {
  return racelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangRace >*
GM_GangRacePare::mutable_racelist() {
  return &racelist_;
}

// optional int32 timelast = 7;
inline bool GM_GangRacePare::has_timelast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangRacePare::set_has_timelast() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangRacePare::clear_has_timelast() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangRacePare::clear_timelast() {
  timelast_ = 0;
  clear_has_timelast();
}
inline ::google::protobuf::int32 GM_GangRacePare::timelast() const {
  return timelast_;
}
inline void GM_GangRacePare::set_timelast(::google::protobuf::int32 value) {
  set_has_timelast();
  timelast_ = value;
}

// -------------------------------------------------------------------

// GM_PlayerReady

// required uint32 roleID = 1;
inline bool GM_PlayerReady::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_PlayerReady::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_PlayerReady::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_PlayerReady::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 GM_PlayerReady::roleid() const {
  return roleid_;
}
inline void GM_PlayerReady::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string name = 2;
inline bool GM_PlayerReady::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_PlayerReady::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_PlayerReady::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_PlayerReady::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_PlayerReady::name() const {
  return *name_;
}
inline void GM_PlayerReady::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_PlayerReady::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_PlayerReady::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_PlayerReady::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_PlayerReady::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_PlayerReady::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 ganggmid = 3;
inline bool GM_PlayerReady::has_ganggmid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_PlayerReady::set_has_ganggmid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_PlayerReady::clear_has_ganggmid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_PlayerReady::clear_ganggmid() {
  ganggmid_ = GOOGLE_LONGLONG(0);
  clear_has_ganggmid();
}
inline ::google::protobuf::int64 GM_PlayerReady::ganggmid() const {
  return ganggmid_;
}
inline void GM_PlayerReady::set_ganggmid(::google::protobuf::int64 value) {
  set_has_ganggmid();
  ganggmid_ = value;
}

// -------------------------------------------------------------------

// GM_ReturnGangFightJoin

// required int32 result = 1;
inline bool GM_ReturnGangFightJoin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ReturnGangFightJoin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ReturnGangFightJoin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ReturnGangFightJoin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_ReturnGangFightJoin::result() const {
  return result_;
}
inline void GM_ReturnGangFightJoin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GM_PlayerReady playerList = 2;
inline int GM_ReturnGangFightJoin::playerlist_size() const {
  return playerlist_.size();
}
inline void GM_ReturnGangFightJoin::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::GM_PlayerReady& GM_ReturnGangFightJoin::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::GM_PlayerReady* GM_ReturnGangFightJoin::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::GM_PlayerReady* GM_ReturnGangFightJoin::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_PlayerReady >&
GM_ReturnGangFightJoin::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_PlayerReady >*
GM_ReturnGangFightJoin::mutable_playerlist() {
  return &playerlist_;
}

// -------------------------------------------------------------------

// GM_NewReadyPlayer

// required .GM_PlayerReady newplayer = 1;
inline bool GM_NewReadyPlayer::has_newplayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_NewReadyPlayer::set_has_newplayer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_NewReadyPlayer::clear_has_newplayer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_NewReadyPlayer::clear_newplayer() {
  if (newplayer_ != NULL) newplayer_->::GM_PlayerReady::Clear();
  clear_has_newplayer();
}
inline const ::GM_PlayerReady& GM_NewReadyPlayer::newplayer() const {
  return newplayer_ != NULL ? *newplayer_ : *default_instance_->newplayer_;
}
inline ::GM_PlayerReady* GM_NewReadyPlayer::mutable_newplayer() {
  set_has_newplayer();
  if (newplayer_ == NULL) newplayer_ = new ::GM_PlayerReady;
  return newplayer_;
}
inline ::GM_PlayerReady* GM_NewReadyPlayer::release_newplayer() {
  clear_has_newplayer();
  ::GM_PlayerReady* temp = newplayer_;
  newplayer_ = NULL;
  return temp;
}
inline void GM_NewReadyPlayer::set_allocated_newplayer(::GM_PlayerReady* newplayer) {
  delete newplayer_;
  newplayer_ = newplayer;
  if (newplayer) {
    set_has_newplayer();
  } else {
    clear_has_newplayer();
  }
}

// -------------------------------------------------------------------

// GM_PlayerQuitReady

// required uint32 quitplayer = 1;
inline bool GM_PlayerQuitReady::has_quitplayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_PlayerQuitReady::set_has_quitplayer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_PlayerQuitReady::clear_has_quitplayer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_PlayerQuitReady::clear_quitplayer() {
  quitplayer_ = 0u;
  clear_has_quitplayer();
}
inline ::google::protobuf::uint32 GM_PlayerQuitReady::quitplayer() const {
  return quitplayer_;
}
inline void GM_PlayerQuitReady::set_quitplayer(::google::protobuf::uint32 value) {
  set_has_quitplayer();
  quitplayer_ = value;
}

// -------------------------------------------------------------------

// GM_GangRaceResult

// required int32 result = 1;
inline bool GM_GangRaceResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangRaceResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangRaceResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangRaceResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangRaceResult::result() const {
  return result_;
}
inline void GM_GangRaceResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GM_GangFightTime

// required int32 apply_time = 1;
inline bool GM_GangFightTime::has_apply_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFightTime::set_has_apply_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFightTime::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFightTime::clear_apply_time() {
  apply_time_ = 0;
  clear_has_apply_time();
}
inline ::google::protobuf::int32 GM_GangFightTime::apply_time() const {
  return apply_time_;
}
inline void GM_GangFightTime::set_apply_time(::google::protobuf::int32 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// repeated int32 race_time = 2;
inline int GM_GangFightTime::race_time_size() const {
  return race_time_.size();
}
inline void GM_GangFightTime::clear_race_time() {
  race_time_.Clear();
}
inline ::google::protobuf::int32 GM_GangFightTime::race_time(int index) const {
  return race_time_.Get(index);
}
inline void GM_GangFightTime::set_race_time(int index, ::google::protobuf::int32 value) {
  race_time_.Set(index, value);
}
inline void GM_GangFightTime::add_race_time(::google::protobuf::int32 value) {
  race_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GM_GangFightTime::race_time() const {
  return race_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GM_GangFightTime::mutable_race_time() {
  return &race_time_;
}

// required int32 race_state = 3;
inline bool GM_GangFightTime::has_race_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangFightTime::set_has_race_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangFightTime::clear_has_race_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangFightTime::clear_race_state() {
  race_state_ = 0;
  clear_has_race_state();
}
inline ::google::protobuf::int32 GM_GangFightTime::race_state() const {
  return race_state_;
}
inline void GM_GangFightTime::set_race_state(::google::protobuf::int32 value) {
  set_has_race_state();
  race_state_ = value;
}

// -------------------------------------------------------------------

// GM_GangFightResultMember

// required string name = 1;
inline bool GM_GangFightResultMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFightResultMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFightResultMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFightResultMember::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_GangFightResultMember::name() const {
  return *name_;
}
inline void GM_GangFightResultMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangFightResultMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_GangFightResultMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangFightResultMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_GangFightResultMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangFightResultMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 kill = 2;
inline bool GM_GangFightResultMember::has_kill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangFightResultMember::set_has_kill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangFightResultMember::clear_has_kill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangFightResultMember::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 GM_GangFightResultMember::kill() const {
  return kill_;
}
inline void GM_GangFightResultMember::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}

// required int32 die = 3;
inline bool GM_GangFightResultMember::has_die() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangFightResultMember::set_has_die() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangFightResultMember::clear_has_die() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangFightResultMember::clear_die() {
  die_ = 0;
  clear_has_die();
}
inline ::google::protobuf::int32 GM_GangFightResultMember::die() const {
  return die_;
}
inline void GM_GangFightResultMember::set_die(::google::protobuf::int32 value) {
  set_has_die();
  die_ = value;
}

// required int32 honor = 4;
inline bool GM_GangFightResultMember::has_honor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangFightResultMember::set_has_honor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangFightResultMember::clear_has_honor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangFightResultMember::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 GM_GangFightResultMember::honor() const {
  return honor_;
}
inline void GM_GangFightResultMember::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// required int32 persent = 5;
inline bool GM_GangFightResultMember::has_persent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangFightResultMember::set_has_persent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangFightResultMember::clear_has_persent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangFightResultMember::clear_persent() {
  persent_ = 0;
  clear_has_persent();
}
inline ::google::protobuf::int32 GM_GangFightResultMember::persent() const {
  return persent_;
}
inline void GM_GangFightResultMember::set_persent(::google::protobuf::int32 value) {
  set_has_persent();
  persent_ = value;
}

// -------------------------------------------------------------------

// GM_GangFightResult

// repeated .GM_GangFightResultMember ourteam = 1;
inline int GM_GangFightResult::ourteam_size() const {
  return ourteam_.size();
}
inline void GM_GangFightResult::clear_ourteam() {
  ourteam_.Clear();
}
inline const ::GM_GangFightResultMember& GM_GangFightResult::ourteam(int index) const {
  return ourteam_.Get(index);
}
inline ::GM_GangFightResultMember* GM_GangFightResult::mutable_ourteam(int index) {
  return ourteam_.Mutable(index);
}
inline ::GM_GangFightResultMember* GM_GangFightResult::add_ourteam() {
  return ourteam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFightResultMember >&
GM_GangFightResult::ourteam() const {
  return ourteam_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangFightResultMember >*
GM_GangFightResult::mutable_ourteam() {
  return &ourteam_;
}

// required int32 usetime = 3;
inline bool GM_GangFightResult::has_usetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangFightResult::set_has_usetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangFightResult::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangFightResult::clear_usetime() {
  usetime_ = 0;
  clear_has_usetime();
}
inline ::google::protobuf::int32 GM_GangFightResult::usetime() const {
  return usetime_;
}
inline void GM_GangFightResult::set_usetime(::google::protobuf::int32 value) {
  set_has_usetime();
  usetime_ = value;
}

// required int32 result = 4;
inline bool GM_GangFightResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangFightResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangFightResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangFightResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_GangFightResult::result() const {
  return result_;
}
inline void GM_GangFightResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 ourpeople = 5;
inline bool GM_GangFightResult::has_ourpeople() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangFightResult::set_has_ourpeople() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangFightResult::clear_has_ourpeople() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangFightResult::clear_ourpeople() {
  ourpeople_ = 0;
  clear_has_ourpeople();
}
inline ::google::protobuf::int32 GM_GangFightResult::ourpeople() const {
  return ourpeople_;
}
inline void GM_GangFightResult::set_ourpeople(::google::protobuf::int32 value) {
  set_has_ourpeople();
  ourpeople_ = value;
}

// required string ourname = 6;
inline bool GM_GangFightResult::has_ourname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangFightResult::set_has_ourname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangFightResult::clear_has_ourname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangFightResult::clear_ourname() {
  if (ourname_ != &::google::protobuf::internal::kEmptyString) {
    ourname_->clear();
  }
  clear_has_ourname();
}
inline const ::std::string& GM_GangFightResult::ourname() const {
  return *ourname_;
}
inline void GM_GangFightResult::set_ourname(const ::std::string& value) {
  set_has_ourname();
  if (ourname_ == &::google::protobuf::internal::kEmptyString) {
    ourname_ = new ::std::string;
  }
  ourname_->assign(value);
}
inline void GM_GangFightResult::set_ourname(const char* value) {
  set_has_ourname();
  if (ourname_ == &::google::protobuf::internal::kEmptyString) {
    ourname_ = new ::std::string;
  }
  ourname_->assign(value);
}
inline void GM_GangFightResult::set_ourname(const char* value, size_t size) {
  set_has_ourname();
  if (ourname_ == &::google::protobuf::internal::kEmptyString) {
    ourname_ = new ::std::string;
  }
  ourname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangFightResult::mutable_ourname() {
  set_has_ourname();
  if (ourname_ == &::google::protobuf::internal::kEmptyString) {
    ourname_ = new ::std::string;
  }
  return ourname_;
}
inline ::std::string* GM_GangFightResult::release_ourname() {
  clear_has_ourname();
  if (ourname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ourname_;
    ourname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangFightResult::set_allocated_ourname(::std::string* ourname) {
  if (ourname_ != &::google::protobuf::internal::kEmptyString) {
    delete ourname_;
  }
  if (ourname) {
    set_has_ourname();
    ourname_ = ourname;
  } else {
    clear_has_ourname();
    ourname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 otherpeople = 7;
inline bool GM_GangFightResult::has_otherpeople() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangFightResult::set_has_otherpeople() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangFightResult::clear_has_otherpeople() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangFightResult::clear_otherpeople() {
  otherpeople_ = 0;
  clear_has_otherpeople();
}
inline ::google::protobuf::int32 GM_GangFightResult::otherpeople() const {
  return otherpeople_;
}
inline void GM_GangFightResult::set_otherpeople(::google::protobuf::int32 value) {
  set_has_otherpeople();
  otherpeople_ = value;
}

// required string othername = 8;
inline bool GM_GangFightResult::has_othername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GangFightResult::set_has_othername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GangFightResult::clear_has_othername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GangFightResult::clear_othername() {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    othername_->clear();
  }
  clear_has_othername();
}
inline const ::std::string& GM_GangFightResult::othername() const {
  return *othername_;
}
inline void GM_GangFightResult::set_othername(const ::std::string& value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
}
inline void GM_GangFightResult::set_othername(const char* value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
}
inline void GM_GangFightResult::set_othername(const char* value, size_t size) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangFightResult::mutable_othername() {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  return othername_;
}
inline ::std::string* GM_GangFightResult::release_othername() {
  clear_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othername_;
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangFightResult::set_allocated_othername(::std::string* othername) {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    delete othername_;
  }
  if (othername) {
    set_has_othername();
    othername_ = othername;
  } else {
    clear_has_othername();
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GangFightPeopleCount

// required int32 camp = 1;
inline bool GM_GangFightPeopleCount::has_camp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangFightPeopleCount::set_has_camp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangFightPeopleCount::clear_has_camp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangFightPeopleCount::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 GM_GangFightPeopleCount::camp() const {
  return camp_;
}
inline void GM_GangFightPeopleCount::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// required int32 people = 2;
inline bool GM_GangFightPeopleCount::has_people() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangFightPeopleCount::set_has_people() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangFightPeopleCount::clear_has_people() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangFightPeopleCount::clear_people() {
  people_ = 0;
  clear_has_people();
}
inline ::google::protobuf::int32 GM_GangFightPeopleCount::people() const {
  return people_;
}
inline void GM_GangFightPeopleCount::set_people(::google::protobuf::int32 value) {
  set_has_people();
  people_ = value;
}

// -------------------------------------------------------------------

// GM_GangFightPeople

// repeated .GM_GangFightPeopleCount peopledata = 1;
inline int GM_GangFightPeople::peopledata_size() const {
  return peopledata_.size();
}
inline void GM_GangFightPeople::clear_peopledata() {
  peopledata_.Clear();
}
inline const ::GM_GangFightPeopleCount& GM_GangFightPeople::peopledata(int index) const {
  return peopledata_.Get(index);
}
inline ::GM_GangFightPeopleCount* GM_GangFightPeople::mutable_peopledata(int index) {
  return peopledata_.Mutable(index);
}
inline ::GM_GangFightPeopleCount* GM_GangFightPeople::add_peopledata() {
  return peopledata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangFightPeopleCount >&
GM_GangFightPeople::peopledata() const {
  return peopledata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangFightPeopleCount >*
GM_GangFightPeople::mutable_peopledata() {
  return &peopledata_;
}

// -------------------------------------------------------------------

// GM_DBGangActive

// required int32 roleId = 1;
inline bool GM_DBGangActive::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DBGangActive::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DBGangActive::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DBGangActive::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_DBGangActive::roleid() const {
  return roleid_;
}
inline void GM_DBGangActive::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 luckNum = 2;
inline bool GM_DBGangActive::has_lucknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_DBGangActive::set_has_lucknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_DBGangActive::clear_has_lucknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_DBGangActive::clear_lucknum() {
  lucknum_ = 0;
  clear_has_lucknum();
}
inline ::google::protobuf::int32 GM_DBGangActive::lucknum() const {
  return lucknum_;
}
inline void GM_DBGangActive::set_lucknum(::google::protobuf::int32 value) {
  set_has_lucknum();
  lucknum_ = value;
}

// required int32 luckTime = 3;
inline bool GM_DBGangActive::has_lucktime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_DBGangActive::set_has_lucktime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_DBGangActive::clear_has_lucktime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_DBGangActive::clear_lucktime() {
  lucktime_ = 0;
  clear_has_lucktime();
}
inline ::google::protobuf::int32 GM_DBGangActive::lucktime() const {
  return lucktime_;
}
inline void GM_DBGangActive::set_lucktime(::google::protobuf::int32 value) {
  set_has_lucktime();
  lucktime_ = value;
}

// -------------------------------------------------------------------

// GM_DBAllGangSkill

// required int32 roleId = 1;
inline bool GM_DBAllGangSkill::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DBAllGangSkill::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DBAllGangSkill::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DBAllGangSkill::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_DBAllGangSkill::roleid() const {
  return roleid_;
}
inline void GM_DBAllGangSkill::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 count = 2;
inline bool GM_DBAllGangSkill::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_DBAllGangSkill::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_DBAllGangSkill::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_DBAllGangSkill::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_DBAllGangSkill::count() const {
  return count_;
}
inline void GM_DBAllGangSkill::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_DBGangSkill skills = 3;
inline int GM_DBAllGangSkill::skills_size() const {
  return skills_.size();
}
inline void GM_DBAllGangSkill::clear_skills() {
  skills_.Clear();
}
inline const ::GM_DBGangSkill& GM_DBAllGangSkill::skills(int index) const {
  return skills_.Get(index);
}
inline ::GM_DBGangSkill* GM_DBAllGangSkill::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::GM_DBGangSkill* GM_DBAllGangSkill::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_DBGangSkill >&
GM_DBAllGangSkill::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_DBGangSkill >*
GM_DBAllGangSkill::mutable_skills() {
  return &skills_;
}

// -------------------------------------------------------------------

// GM_DBGangSkill

// required int32 roleId = 1;
inline bool GM_DBGangSkill::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DBGangSkill::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DBGangSkill::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DBGangSkill::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_DBGangSkill::roleid() const {
  return roleid_;
}
inline void GM_DBGangSkill::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 skillId = 2;
inline bool GM_DBGangSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_DBGangSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_DBGangSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_DBGangSkill::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 GM_DBGangSkill::skillid() const {
  return skillid_;
}
inline void GM_DBGangSkill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required int32 skillLv = 3;
inline bool GM_DBGangSkill::has_skilllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_DBGangSkill::set_has_skilllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_DBGangSkill::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_DBGangSkill::clear_skilllv() {
  skilllv_ = 0;
  clear_has_skilllv();
}
inline ::google::protobuf::int32 GM_DBGangSkill::skilllv() const {
  return skilllv_;
}
inline void GM_DBGangSkill::set_skilllv(::google::protobuf::int32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// -------------------------------------------------------------------

// GM_DBGangExit

// required int32 roleId = 1;
inline bool GM_DBGangExit::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DBGangExit::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DBGangExit::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DBGangExit::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_DBGangExit::roleid() const {
  return roleid_;
}
inline void GM_DBGangExit::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 exitTime = 2;
inline bool GM_DBGangExit::has_exittime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_DBGangExit::set_has_exittime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_DBGangExit::clear_has_exittime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_DBGangExit::clear_exittime() {
  exittime_ = 0;
  clear_has_exittime();
}
inline ::google::protobuf::int32 GM_DBGangExit::exittime() const {
  return exittime_;
}
inline void GM_DBGangExit::set_exittime(::google::protobuf::int32 value) {
  set_has_exittime();
  exittime_ = value;
}

// -------------------------------------------------------------------

// GM_AllGangInvite

// required int32 count = 1;
inline bool GM_AllGangInvite::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AllGangInvite::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AllGangInvite::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AllGangInvite::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_AllGangInvite::count() const {
  return count_;
}
inline void GM_AllGangInvite::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_GangInvite invites = 2;
inline int GM_AllGangInvite::invites_size() const {
  return invites_.size();
}
inline void GM_AllGangInvite::clear_invites() {
  invites_.Clear();
}
inline const ::GM_GangInvite& GM_AllGangInvite::invites(int index) const {
  return invites_.Get(index);
}
inline ::GM_GangInvite* GM_AllGangInvite::mutable_invites(int index) {
  return invites_.Mutable(index);
}
inline ::GM_GangInvite* GM_AllGangInvite::add_invites() {
  return invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_GangInvite >&
GM_AllGangInvite::invites() const {
  return invites_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_GangInvite >*
GM_AllGangInvite::mutable_invites() {
  return &invites_;
}

// -------------------------------------------------------------------

// GM_GangInvite

// required int32 roleId = 1;
inline bool GM_GangInvite::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangInvite::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangInvite::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangInvite::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangInvite::roleid() const {
  return roleid_;
}
inline void GM_GangInvite::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string roleName = 2;
inline bool GM_GangInvite::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangInvite::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangInvite::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangInvite::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& GM_GangInvite::rolename() const {
  return *rolename_;
}
inline void GM_GangInvite::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GM_GangInvite::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void GM_GangInvite::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangInvite::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* GM_GangInvite::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangInvite::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 gangGmid = 3;
inline bool GM_GangInvite::has_ganggmid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangInvite::set_has_ganggmid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangInvite::clear_has_ganggmid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangInvite::clear_ganggmid() {
  ganggmid_ = GOOGLE_LONGLONG(0);
  clear_has_ganggmid();
}
inline ::google::protobuf::int64 GM_GangInvite::ganggmid() const {
  return ganggmid_;
}
inline void GM_GangInvite::set_ganggmid(::google::protobuf::int64 value) {
  set_has_ganggmid();
  ganggmid_ = value;
}

// required int32 operId = 4;
inline bool GM_GangInvite::has_operid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangInvite::set_has_operid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangInvite::clear_has_operid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangInvite::clear_operid() {
  operid_ = 0;
  clear_has_operid();
}
inline ::google::protobuf::int32 GM_GangInvite::operid() const {
  return operid_;
}
inline void GM_GangInvite::set_operid(::google::protobuf::int32 value) {
  set_has_operid();
  operid_ = value;
}

// optional string operName = 5;
inline bool GM_GangInvite::has_opername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GangInvite::set_has_opername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GangInvite::clear_has_opername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GangInvite::clear_opername() {
  if (opername_ != &::google::protobuf::internal::kEmptyString) {
    opername_->clear();
  }
  clear_has_opername();
}
inline const ::std::string& GM_GangInvite::opername() const {
  return *opername_;
}
inline void GM_GangInvite::set_opername(const ::std::string& value) {
  set_has_opername();
  if (opername_ == &::google::protobuf::internal::kEmptyString) {
    opername_ = new ::std::string;
  }
  opername_->assign(value);
}
inline void GM_GangInvite::set_opername(const char* value) {
  set_has_opername();
  if (opername_ == &::google::protobuf::internal::kEmptyString) {
    opername_ = new ::std::string;
  }
  opername_->assign(value);
}
inline void GM_GangInvite::set_opername(const char* value, size_t size) {
  set_has_opername();
  if (opername_ == &::google::protobuf::internal::kEmptyString) {
    opername_ = new ::std::string;
  }
  opername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GangInvite::mutable_opername() {
  set_has_opername();
  if (opername_ == &::google::protobuf::internal::kEmptyString) {
    opername_ = new ::std::string;
  }
  return opername_;
}
inline ::std::string* GM_GangInvite::release_opername() {
  clear_has_opername();
  if (opername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opername_;
    opername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GangInvite::set_allocated_opername(::std::string* opername) {
  if (opername_ != &::google::protobuf::internal::kEmptyString) {
    delete opername_;
  }
  if (opername) {
    set_has_opername();
    opername_ = opername;
  } else {
    clear_has_opername();
    opername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag = 6;
inline bool GM_GangInvite::has_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GangInvite::set_has_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GangInvite::clear_has_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GangInvite::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GM_GangInvite::flag() const {
  return flag_;
}
inline void GM_GangInvite::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// GM_GangDataChange

// required int32 roleId = 1;
inline bool GM_GangDataChange::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GangDataChange::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GangDataChange::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GangDataChange::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_GangDataChange::roleid() const {
  return roleid_;
}
inline void GM_GangDataChange::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 signFlag = 2;
inline bool GM_GangDataChange::has_signflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GangDataChange::set_has_signflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GangDataChange::clear_has_signflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GangDataChange::clear_signflag() {
  signflag_ = 0;
  clear_has_signflag();
}
inline ::google::protobuf::int32 GM_GangDataChange::signflag() const {
  return signflag_;
}
inline void GM_GangDataChange::set_signflag(::google::protobuf::int32 value) {
  set_has_signflag();
  signflag_ = value;
}

// optional int32 skillLevel = 3;
inline bool GM_GangDataChange::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GangDataChange::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GangDataChange::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GangDataChange::clear_skilllevel() {
  skilllevel_ = 0;
  clear_has_skilllevel();
}
inline ::google::protobuf::int32 GM_GangDataChange::skilllevel() const {
  return skilllevel_;
}
inline void GM_GangDataChange::set_skilllevel(::google::protobuf::int32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
}

// optional int32 gangContribute = 4;
inline bool GM_GangDataChange::has_gangcontribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GangDataChange::set_has_gangcontribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GangDataChange::clear_has_gangcontribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GangDataChange::clear_gangcontribute() {
  gangcontribute_ = 0;
  clear_has_gangcontribute();
}
inline ::google::protobuf::int32 GM_GangDataChange::gangcontribute() const {
  return gangcontribute_;
}
inline void GM_GangDataChange::set_gangcontribute(::google::protobuf::int32 value) {
  set_has_gangcontribute();
  gangcontribute_ = value;
}

// -------------------------------------------------------------------

// DB_tAllGangData

// required int32 count = 1;
inline bool DB_tAllGangData::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_tAllGangData::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_tAllGangData::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_tAllGangData::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 DB_tAllGangData::count() const {
  return count_;
}
inline void DB_tAllGangData::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .DB_tGangData gangdata = 2;
inline int DB_tAllGangData::gangdata_size() const {
  return gangdata_.size();
}
inline void DB_tAllGangData::clear_gangdata() {
  gangdata_.Clear();
}
inline const ::DB_tGangData& DB_tAllGangData::gangdata(int index) const {
  return gangdata_.Get(index);
}
inline ::DB_tGangData* DB_tAllGangData::mutable_gangdata(int index) {
  return gangdata_.Mutable(index);
}
inline ::DB_tGangData* DB_tAllGangData::add_gangdata() {
  return gangdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB_tGangData >&
DB_tAllGangData::gangdata() const {
  return gangdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB_tGangData >*
DB_tAllGangData::mutable_gangdata() {
  return &gangdata_;
}

// -------------------------------------------------------------------

// DB_tGangData

// required int64 gmid = 1;
inline bool DB_tGangData::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_tGangData::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_tGangData::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_tGangData::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 DB_tGangData::gmid() const {
  return gmid_;
}
inline void DB_tGangData::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional string name = 2;
inline bool DB_tGangData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_tGangData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_tGangData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_tGangData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DB_tGangData::name() const {
  return *name_;
}
inline void DB_tGangData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_tGangData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DB_tGangData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_tGangData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DB_tGangData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DB_tGangData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 exp = 3;
inline bool DB_tGangData::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_tGangData::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_tGangData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_tGangData::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 DB_tGangData::exp() const {
  return exp_;
}
inline void DB_tGangData::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 lv = 4;
inline bool DB_tGangData::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DB_tGangData::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DB_tGangData::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DB_tGangData::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 DB_tGangData::lv() const {
  return lv_;
}
inline void DB_tGangData::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 templv = 5;
inline bool DB_tGangData::has_templv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DB_tGangData::set_has_templv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DB_tGangData::clear_has_templv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DB_tGangData::clear_templv() {
  templv_ = 0;
  clear_has_templv();
}
inline ::google::protobuf::int32 DB_tGangData::templv() const {
  return templv_;
}
inline void DB_tGangData::set_templv(::google::protobuf::int32 value) {
  set_has_templv();
  templv_ = value;
}

// optional int32 shoplv = 6;
inline bool DB_tGangData::has_shoplv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DB_tGangData::set_has_shoplv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DB_tGangData::clear_has_shoplv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DB_tGangData::clear_shoplv() {
  shoplv_ = 0;
  clear_has_shoplv();
}
inline ::google::protobuf::int32 DB_tGangData::shoplv() const {
  return shoplv_;
}
inline void DB_tGangData::set_shoplv(::google::protobuf::int32 value) {
  set_has_shoplv();
  shoplv_ = value;
}

// optional string notice = 7;
inline bool DB_tGangData::has_notice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DB_tGangData::set_has_notice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DB_tGangData::clear_has_notice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DB_tGangData::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& DB_tGangData::notice() const {
  return *notice_;
}
inline void DB_tGangData::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void DB_tGangData::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void DB_tGangData::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_tGangData::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* DB_tGangData::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DB_tGangData::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pronoce = 8;
inline bool DB_tGangData::has_pronoce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DB_tGangData::set_has_pronoce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DB_tGangData::clear_has_pronoce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DB_tGangData::clear_pronoce() {
  if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
    pronoce_->clear();
  }
  clear_has_pronoce();
}
inline const ::std::string& DB_tGangData::pronoce() const {
  return *pronoce_;
}
inline void DB_tGangData::set_pronoce(const ::std::string& value) {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  pronoce_->assign(value);
}
inline void DB_tGangData::set_pronoce(const char* value) {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  pronoce_->assign(value);
}
inline void DB_tGangData::set_pronoce(const char* value, size_t size) {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  pronoce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DB_tGangData::mutable_pronoce() {
  set_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    pronoce_ = new ::std::string;
  }
  return pronoce_;
}
inline ::std::string* DB_tGangData::release_pronoce() {
  clear_has_pronoce();
  if (pronoce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pronoce_;
    pronoce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DB_tGangData::set_allocated_pronoce(::std::string* pronoce) {
  if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
    delete pronoce_;
  }
  if (pronoce) {
    set_has_pronoce();
    pronoce_ = pronoce;
  } else {
    clear_has_pronoce();
    pronoce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uplvtime = 9;
inline bool DB_tGangData::has_uplvtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DB_tGangData::set_has_uplvtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DB_tGangData::clear_has_uplvtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DB_tGangData::clear_uplvtime() {
  uplvtime_ = 0;
  clear_has_uplvtime();
}
inline ::google::protobuf::int32 DB_tGangData::uplvtime() const {
  return uplvtime_;
}
inline void DB_tGangData::set_uplvtime(::google::protobuf::int32 value) {
  set_has_uplvtime();
  uplvtime_ = value;
}

// optional int32 blesscnt = 10;
inline bool DB_tGangData::has_blesscnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DB_tGangData::set_has_blesscnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DB_tGangData::clear_has_blesscnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DB_tGangData::clear_blesscnt() {
  blesscnt_ = 0;
  clear_has_blesscnt();
}
inline ::google::protobuf::int32 DB_tGangData::blesscnt() const {
  return blesscnt_;
}
inline void DB_tGangData::set_blesscnt(::google::protobuf::int32 value) {
  set_has_blesscnt();
  blesscnt_ = value;
}

// -------------------------------------------------------------------

// DB_LifeTreeRoleInfo_Return

// required int32 m_RoleId = 1;
inline bool DB_LifeTreeRoleInfo_Return::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DB_LifeTreeRoleInfo_Return::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DB_LifeTreeRoleInfo_Return::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DB_LifeTreeRoleInfo_Return::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 DB_LifeTreeRoleInfo_Return::m_roleid() const {
  return m_roleid_;
}
inline void DB_LifeTreeRoleInfo_Return::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// required int32 m_LastTime = 2;
inline bool DB_LifeTreeRoleInfo_Return::has_m_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DB_LifeTreeRoleInfo_Return::set_has_m_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DB_LifeTreeRoleInfo_Return::clear_has_m_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DB_LifeTreeRoleInfo_Return::clear_m_lasttime() {
  m_lasttime_ = 0;
  clear_has_m_lasttime();
}
inline ::google::protobuf::int32 DB_LifeTreeRoleInfo_Return::m_lasttime() const {
  return m_lasttime_;
}
inline void DB_LifeTreeRoleInfo_Return::set_m_lasttime(::google::protobuf::int32 value) {
  set_has_m_lasttime();
  m_lasttime_ = value;
}

// required int32 m_Count = 3;
inline bool DB_LifeTreeRoleInfo_Return::has_m_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DB_LifeTreeRoleInfo_Return::set_has_m_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DB_LifeTreeRoleInfo_Return::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DB_LifeTreeRoleInfo_Return::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 DB_LifeTreeRoleInfo_Return::m_count() const {
  return m_count_;
}
inline void DB_LifeTreeRoleInfo_Return::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fGang_2etxt__INCLUDED
