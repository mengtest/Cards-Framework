// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Gmtool.txt

#ifndef PROTOBUF_SP_5fGmtool_2etxt__INCLUDED
#define PROTOBUF_SP_5fGmtool_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fGmtool_2etxt();
void protobuf_AssignDesc_SP_5fGmtool_2etxt();
void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

class GMTool_GetOnline;
class GMTool_CurrentData;
class GMTool_Request;
class GMTool_Seal_Player_Request;
class GMTool_Operation_result;
class GiftBagItem;
class GMTool_GiftBag;
class GMTool_OperateRequest;
class GMTool_noticeRequest;
class GMTool_SystemWord;
class GMTool_SealAccountReturn;
class GMTool_Mail;
class GMTool_MailItem;
class GMTool_DynTable;
class GM_FreshTable;
class GM_SealAll;
class GMTool_UpdateArea;
class GMTool_Acitveshare;

// ===================================================================

class GMTool_GetOnline : public ::google::protobuf::Message {
 public:
  GMTool_GetOnline();
  virtual ~GMTool_GetOnline();

  GMTool_GetOnline(const GMTool_GetOnline& from);

  inline GMTool_GetOnline& operator=(const GMTool_GetOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_GetOnline& default_instance();

  void Swap(GMTool_GetOnline* other);

  // implements Message ----------------------------------------------

  GMTool_GetOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_GetOnline& from);
  void MergeFrom(const GMTool_GetOnline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 connect = 3;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 3;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // required uint32 MaxOnline = 1;
  inline bool has_maxonline() const;
  inline void clear_maxonline();
  static const int kMaxOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 maxonline() const;
  inline void set_maxonline(::google::protobuf::uint32 value);

  // required uint32 CurrentOnline = 2;
  inline bool has_currentonline() const;
  inline void clear_currentonline();
  static const int kCurrentOnlineFieldNumber = 2;
  inline ::google::protobuf::uint32 currentonline() const;
  inline void set_currentonline(::google::protobuf::uint32 value);

  // required string HttpServerIp = 4;
  inline bool has_httpserverip() const;
  inline void clear_httpserverip();
  static const int kHttpServerIpFieldNumber = 4;
  inline const ::std::string& httpserverip() const;
  inline void set_httpserverip(const ::std::string& value);
  inline void set_httpserverip(const char* value);
  inline void set_httpserverip(const char* value, size_t size);
  inline ::std::string* mutable_httpserverip();
  inline ::std::string* release_httpserverip();
  inline void set_allocated_httpserverip(::std::string* httpserverip);

  // @@protoc_insertion_point(class_scope:GMTool_GetOnline)
 private:
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_maxonline();
  inline void clear_has_maxonline();
  inline void set_has_currentonline();
  inline void clear_has_currentonline();
  inline void set_has_httpserverip();
  inline void clear_has_httpserverip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connect_;
  ::google::protobuf::uint32 maxonline_;
  ::std::string* httpserverip_;
  ::google::protobuf::uint32 currentonline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_GetOnline* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_CurrentData : public ::google::protobuf::Message {
 public:
  GMTool_CurrentData();
  virtual ~GMTool_CurrentData();

  GMTool_CurrentData(const GMTool_CurrentData& from);

  inline GMTool_CurrentData& operator=(const GMTool_CurrentData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_CurrentData& default_instance();

  void Swap(GMTool_CurrentData* other);

  // implements Message ----------------------------------------------

  GMTool_CurrentData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_CurrentData& from);
  void MergeFrom(const GMTool_CurrentData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 connect = 3;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 3;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // required uint32 MaxOnline = 1;
  inline bool has_maxonline() const;
  inline void clear_maxonline();
  static const int kMaxOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 maxonline() const;
  inline void set_maxonline(::google::protobuf::uint32 value);

  // required uint32 CurrentOnline = 2;
  inline bool has_currentonline() const;
  inline void clear_currentonline();
  static const int kCurrentOnlineFieldNumber = 2;
  inline ::google::protobuf::uint32 currentonline() const;
  inline void set_currentonline(::google::protobuf::uint32 value);

  // required uint32 RegisterCount = 4;
  inline bool has_registercount() const;
  inline void clear_registercount();
  static const int kRegisterCountFieldNumber = 4;
  inline ::google::protobuf::uint32 registercount() const;
  inline void set_registercount(::google::protobuf::uint32 value);

  // required string HttpServerIp = 5;
  inline bool has_httpserverip() const;
  inline void clear_httpserverip();
  static const int kHttpServerIpFieldNumber = 5;
  inline const ::std::string& httpserverip() const;
  inline void set_httpserverip(const ::std::string& value);
  inline void set_httpserverip(const char* value);
  inline void set_httpserverip(const char* value, size_t size);
  inline ::std::string* mutable_httpserverip();
  inline ::std::string* release_httpserverip();
  inline void set_allocated_httpserverip(::std::string* httpserverip);

  // @@protoc_insertion_point(class_scope:GMTool_CurrentData)
 private:
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_maxonline();
  inline void clear_has_maxonline();
  inline void set_has_currentonline();
  inline void clear_has_currentonline();
  inline void set_has_registercount();
  inline void clear_has_registercount();
  inline void set_has_httpserverip();
  inline void clear_has_httpserverip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connect_;
  ::google::protobuf::uint32 maxonline_;
  ::google::protobuf::uint32 currentonline_;
  ::google::protobuf::uint32 registercount_;
  ::std::string* httpserverip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_CurrentData* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_Request : public ::google::protobuf::Message {
 public:
  GMTool_Request();
  virtual ~GMTool_Request();

  GMTool_Request(const GMTool_Request& from);

  inline GMTool_Request& operator=(const GMTool_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_Request& default_instance();

  void Swap(GMTool_Request* other);

  // implements Message ----------------------------------------------

  GMTool_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_Request& from);
  void MergeFrom(const GMTool_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GMTool_Request)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_Request* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_Seal_Player_Request : public ::google::protobuf::Message {
 public:
  GMTool_Seal_Player_Request();
  virtual ~GMTool_Seal_Player_Request();

  GMTool_Seal_Player_Request(const GMTool_Seal_Player_Request& from);

  inline GMTool_Seal_Player_Request& operator=(const GMTool_Seal_Player_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_Seal_Player_Request& default_instance();

  void Swap(GMTool_Seal_Player_Request* other);

  // implements Message ----------------------------------------------

  GMTool_Seal_Player_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_Seal_Player_Request& from);
  void MergeFrom(const GMTool_Seal_Player_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional int32 seal_end_time = 2;
  inline bool has_seal_end_time() const;
  inline void clear_seal_end_time();
  static const int kSealEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 seal_end_time() const;
  inline void set_seal_end_time(::google::protobuf::int32 value);

  // required uint32 connect = 3;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 3;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // optional int32 action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional int32 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // optional string role_desc = 6;
  inline bool has_role_desc() const;
  inline void clear_role_desc();
  static const int kRoleDescFieldNumber = 6;
  inline const ::std::string& role_desc() const;
  inline void set_role_desc(const ::std::string& value);
  inline void set_role_desc(const char* value);
  inline void set_role_desc(const char* value, size_t size);
  inline ::std::string* mutable_role_desc();
  inline ::std::string* release_role_desc();
  inline void set_allocated_role_desc(::std::string* role_desc);

  // @@protoc_insertion_point(class_scope:GMTool_Seal_Player_Request)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_seal_end_time();
  inline void clear_has_seal_end_time();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_desc();
  inline void clear_has_role_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::int32 seal_end_time_;
  ::google::protobuf::uint32 connect_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 role_id_;
  ::std::string* role_desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_Seal_Player_Request* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_Operation_result : public ::google::protobuf::Message {
 public:
  GMTool_Operation_result();
  virtual ~GMTool_Operation_result();

  GMTool_Operation_result(const GMTool_Operation_result& from);

  inline GMTool_Operation_result& operator=(const GMTool_Operation_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_Operation_result& default_instance();

  void Swap(GMTool_Operation_result* other);

  // implements Message ----------------------------------------------

  GMTool_Operation_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_Operation_result& from);
  void MergeFrom(const GMTool_Operation_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 operation_result = 1;
  inline bool has_operation_result() const;
  inline void clear_operation_result();
  static const int kOperationResultFieldNumber = 1;
  inline ::google::protobuf::int32 operation_result() const;
  inline void set_operation_result(::google::protobuf::int32 value);

  // required uint32 connect = 2;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 2;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GMTool_Operation_result)
 private:
  inline void set_has_operation_result();
  inline void clear_has_operation_result();
  inline void set_has_connect();
  inline void clear_has_connect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 operation_result_;
  ::google::protobuf::uint32 connect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_Operation_result* default_instance_;
};
// -------------------------------------------------------------------

class GiftBagItem : public ::google::protobuf::Message {
 public:
  GiftBagItem();
  virtual ~GiftBagItem();

  GiftBagItem(const GiftBagItem& from);

  inline GiftBagItem& operator=(const GiftBagItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiftBagItem& default_instance();

  void Swap(GiftBagItem* other);

  // implements Message ----------------------------------------------

  GiftBagItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiftBagItem& from);
  void MergeFrom(const GiftBagItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 objectid = 1;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::uint32 objectid() const;
  inline void set_objectid(::google::protobuf::uint32 value);

  // required uint32 objcount = 2;
  inline bool has_objcount() const;
  inline void clear_objcount();
  static const int kObjcountFieldNumber = 2;
  inline ::google::protobuf::uint32 objcount() const;
  inline void set_objcount(::google::protobuf::uint32 value);

  // required uint32 objlevel = 3;
  inline bool has_objlevel() const;
  inline void clear_objlevel();
  static const int kObjlevelFieldNumber = 3;
  inline ::google::protobuf::uint32 objlevel() const;
  inline void set_objlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GiftBagItem)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_objcount();
  inline void clear_has_objcount();
  inline void set_has_objlevel();
  inline void clear_has_objlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 objectid_;
  ::google::protobuf::uint32 objcount_;
  ::google::protobuf::uint32 objlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GiftBagItem* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_GiftBag : public ::google::protobuf::Message {
 public:
  GMTool_GiftBag();
  virtual ~GMTool_GiftBag();

  GMTool_GiftBag(const GMTool_GiftBag& from);

  inline GMTool_GiftBag& operator=(const GMTool_GiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_GiftBag& default_instance();

  void Swap(GMTool_GiftBag* other);

  // implements Message ----------------------------------------------

  GMTool_GiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_GiftBag& from);
  void MergeFrom(const GMTool_GiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_typeid = 2;
  inline bool has_m_typeid() const;
  inline void clear_m_typeid();
  static const int kMTypeidFieldNumber = 2;
  inline ::google::protobuf::uint32 m_typeid() const;
  inline void set_m_typeid(::google::protobuf::uint32 value);

  // required string m_name = 3;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 3;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // required string m_iconurl = 4;
  inline bool has_m_iconurl() const;
  inline void clear_m_iconurl();
  static const int kMIconurlFieldNumber = 4;
  inline const ::std::string& m_iconurl() const;
  inline void set_m_iconurl(const ::std::string& value);
  inline void set_m_iconurl(const char* value);
  inline void set_m_iconurl(const char* value, size_t size);
  inline ::std::string* mutable_m_iconurl();
  inline ::std::string* release_m_iconurl();
  inline void set_allocated_m_iconurl(::std::string* m_iconurl);

  // required string m_describe = 5;
  inline bool has_m_describe() const;
  inline void clear_m_describe();
  static const int kMDescribeFieldNumber = 5;
  inline const ::std::string& m_describe() const;
  inline void set_m_describe(const ::std::string& value);
  inline void set_m_describe(const char* value);
  inline void set_m_describe(const char* value, size_t size);
  inline ::std::string* mutable_m_describe();
  inline ::std::string* release_m_describe();
  inline void set_allocated_m_describe(::std::string* m_describe);

  // required uint32 connect = 6;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 6;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // repeated .GiftBagItem m_giftBagItem = 1;
  inline int m_giftbagitem_size() const;
  inline void clear_m_giftbagitem();
  static const int kMGiftBagItemFieldNumber = 1;
  inline const ::GiftBagItem& m_giftbagitem(int index) const;
  inline ::GiftBagItem* mutable_m_giftbagitem(int index);
  inline ::GiftBagItem* add_m_giftbagitem();
  inline const ::google::protobuf::RepeatedPtrField< ::GiftBagItem >&
      m_giftbagitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::GiftBagItem >*
      mutable_m_giftbagitem();

  // @@protoc_insertion_point(class_scope:GMTool_GiftBag)
 private:
  inline void set_has_m_typeid();
  inline void clear_has_m_typeid();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_iconurl();
  inline void clear_has_m_iconurl();
  inline void set_has_m_describe();
  inline void clear_has_m_describe();
  inline void set_has_connect();
  inline void clear_has_connect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::std::string* m_iconurl_;
  ::google::protobuf::uint32 m_typeid_;
  ::google::protobuf::uint32 connect_;
  ::std::string* m_describe_;
  ::google::protobuf::RepeatedPtrField< ::GiftBagItem > m_giftbagitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_GiftBag* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_OperateRequest : public ::google::protobuf::Message {
 public:
  GMTool_OperateRequest();
  virtual ~GMTool_OperateRequest();

  GMTool_OperateRequest(const GMTool_OperateRequest& from);

  inline GMTool_OperateRequest& operator=(const GMTool_OperateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_OperateRequest& default_instance();

  void Swap(GMTool_OperateRequest* other);

  // implements Message ----------------------------------------------

  GMTool_OperateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_OperateRequest& from);
  void MergeFrom(const GMTool_OperateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 connect = 1;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 1;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // optional int32 int_param = 2;
  inline bool has_int_param() const;
  inline void clear_int_param();
  static const int kIntParamFieldNumber = 2;
  inline ::google::protobuf::int32 int_param() const;
  inline void set_int_param(::google::protobuf::int32 value);

  // optional string str_param = 3;
  inline bool has_str_param() const;
  inline void clear_str_param();
  static const int kStrParamFieldNumber = 3;
  inline const ::std::string& str_param() const;
  inline void set_str_param(const ::std::string& value);
  inline void set_str_param(const char* value);
  inline void set_str_param(const char* value, size_t size);
  inline ::std::string* mutable_str_param();
  inline ::std::string* release_str_param();
  inline void set_allocated_str_param(::std::string* str_param);

  // optional string str_param2 = 4;
  inline bool has_str_param2() const;
  inline void clear_str_param2();
  static const int kStrParam2FieldNumber = 4;
  inline const ::std::string& str_param2() const;
  inline void set_str_param2(const ::std::string& value);
  inline void set_str_param2(const char* value);
  inline void set_str_param2(const char* value, size_t size);
  inline ::std::string* mutable_str_param2();
  inline ::std::string* release_str_param2();
  inline void set_allocated_str_param2(::std::string* str_param2);

  // optional int32 int_param2 = 5;
  inline bool has_int_param2() const;
  inline void clear_int_param2();
  static const int kIntParam2FieldNumber = 5;
  inline ::google::protobuf::int32 int_param2() const;
  inline void set_int_param2(::google::protobuf::int32 value);

  // optional int32 int_param3 = 6;
  inline bool has_int_param3() const;
  inline void clear_int_param3();
  static const int kIntParam3FieldNumber = 6;
  inline ::google::protobuf::int32 int_param3() const;
  inline void set_int_param3(::google::protobuf::int32 value);

  // optional string str_param3 = 7;
  inline bool has_str_param3() const;
  inline void clear_str_param3();
  static const int kStrParam3FieldNumber = 7;
  inline const ::std::string& str_param3() const;
  inline void set_str_param3(const ::std::string& value);
  inline void set_str_param3(const char* value);
  inline void set_str_param3(const char* value, size_t size);
  inline ::std::string* mutable_str_param3();
  inline ::std::string* release_str_param3();
  inline void set_allocated_str_param3(::std::string* str_param3);

  // optional string str_param4 = 8;
  inline bool has_str_param4() const;
  inline void clear_str_param4();
  static const int kStrParam4FieldNumber = 8;
  inline const ::std::string& str_param4() const;
  inline void set_str_param4(const ::std::string& value);
  inline void set_str_param4(const char* value);
  inline void set_str_param4(const char* value, size_t size);
  inline ::std::string* mutable_str_param4();
  inline ::std::string* release_str_param4();
  inline void set_allocated_str_param4(::std::string* str_param4);

  // optional string str_param5 = 9;
  inline bool has_str_param5() const;
  inline void clear_str_param5();
  static const int kStrParam5FieldNumber = 9;
  inline const ::std::string& str_param5() const;
  inline void set_str_param5(const ::std::string& value);
  inline void set_str_param5(const char* value);
  inline void set_str_param5(const char* value, size_t size);
  inline ::std::string* mutable_str_param5();
  inline ::std::string* release_str_param5();
  inline void set_allocated_str_param5(::std::string* str_param5);

  // optional int32 int_param4 = 10;
  inline bool has_int_param4() const;
  inline void clear_int_param4();
  static const int kIntParam4FieldNumber = 10;
  inline ::google::protobuf::int32 int_param4() const;
  inline void set_int_param4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTool_OperateRequest)
 private:
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_int_param();
  inline void clear_has_int_param();
  inline void set_has_str_param();
  inline void clear_has_str_param();
  inline void set_has_str_param2();
  inline void clear_has_str_param2();
  inline void set_has_int_param2();
  inline void clear_has_int_param2();
  inline void set_has_int_param3();
  inline void clear_has_int_param3();
  inline void set_has_str_param3();
  inline void clear_has_str_param3();
  inline void set_has_str_param4();
  inline void clear_has_str_param4();
  inline void set_has_str_param5();
  inline void clear_has_str_param5();
  inline void set_has_int_param4();
  inline void clear_has_int_param4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connect_;
  ::google::protobuf::int32 int_param_;
  ::std::string* str_param_;
  ::std::string* str_param2_;
  ::google::protobuf::int32 int_param2_;
  ::google::protobuf::int32 int_param3_;
  ::std::string* str_param3_;
  ::std::string* str_param4_;
  ::std::string* str_param5_;
  ::google::protobuf::int32 int_param4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_OperateRequest* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_noticeRequest : public ::google::protobuf::Message {
 public:
  GMTool_noticeRequest();
  virtual ~GMTool_noticeRequest();

  GMTool_noticeRequest(const GMTool_noticeRequest& from);

  inline GMTool_noticeRequest& operator=(const GMTool_noticeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_noticeRequest& default_instance();

  void Swap(GMTool_noticeRequest* other);

  // implements Message ----------------------------------------------

  GMTool_noticeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_noticeRequest& from);
  void MergeFrom(const GMTool_noticeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 connect = 1;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 1;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // optional int32 int_param = 2;
  inline bool has_int_param() const;
  inline void clear_int_param();
  static const int kIntParamFieldNumber = 2;
  inline ::google::protobuf::int32 int_param() const;
  inline void set_int_param(::google::protobuf::int32 value);

  // optional string str_param = 3;
  inline bool has_str_param() const;
  inline void clear_str_param();
  static const int kStrParamFieldNumber = 3;
  inline const ::std::string& str_param() const;
  inline void set_str_param(const ::std::string& value);
  inline void set_str_param(const char* value);
  inline void set_str_param(const char* value, size_t size);
  inline ::std::string* mutable_str_param();
  inline ::std::string* release_str_param();
  inline void set_allocated_str_param(::std::string* str_param);

  // @@protoc_insertion_point(class_scope:GMTool_noticeRequest)
 private:
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_int_param();
  inline void clear_has_int_param();
  inline void set_has_str_param();
  inline void clear_has_str_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connect_;
  ::google::protobuf::int32 int_param_;
  ::std::string* str_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_noticeRequest* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_SystemWord : public ::google::protobuf::Message {
 public:
  GMTool_SystemWord();
  virtual ~GMTool_SystemWord();

  GMTool_SystemWord(const GMTool_SystemWord& from);

  inline GMTool_SystemWord& operator=(const GMTool_SystemWord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_SystemWord& default_instance();

  void Swap(GMTool_SystemWord* other);

  // implements Message ----------------------------------------------

  GMTool_SystemWord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_SystemWord& from);
  void MergeFrom(const GMTool_SystemWord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string word = 1;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 1;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const char* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // repeated int32 channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::int32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::int32 value);
  inline void add_channels(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_channels();

  // optional int32 repeatCount = 2;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatCountFieldNumber = 2;
  inline ::google::protobuf::int32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::int32 value);

  // required uint32 connect = 4;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 4;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // optional int32 interval = 5;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 5;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTool_SystemWord)
 private:
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_interval();
  inline void clear_has_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* word_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > channels_;
  ::google::protobuf::int32 repeatcount_;
  ::google::protobuf::uint32 connect_;
  ::google::protobuf::int32 interval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_SystemWord* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_SealAccountReturn : public ::google::protobuf::Message {
 public:
  GMTool_SealAccountReturn();
  virtual ~GMTool_SealAccountReturn();

  GMTool_SealAccountReturn(const GMTool_SealAccountReturn& from);

  inline GMTool_SealAccountReturn& operator=(const GMTool_SealAccountReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_SealAccountReturn& default_instance();

  void Swap(GMTool_SealAccountReturn* other);

  // implements Message ----------------------------------------------

  GMTool_SealAccountReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_SealAccountReturn& from);
  void MergeFrom(const GMTool_SealAccountReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 connect = 1;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 1;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // required int32 operation_result = 2;
  inline bool has_operation_result() const;
  inline void clear_operation_result();
  static const int kOperationResultFieldNumber = 2;
  inline ::google::protobuf::int32 operation_result() const;
  inline void set_operation_result(::google::protobuf::int32 value);

  // required int32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTool_SealAccountReturn)
 private:
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_operation_result();
  inline void clear_has_operation_result();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connect_;
  ::google::protobuf::int32 operation_result_;
  ::google::protobuf::int32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_SealAccountReturn* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_Mail : public ::google::protobuf::Message {
 public:
  GMTool_Mail();
  virtual ~GMTool_Mail();

  GMTool_Mail(const GMTool_Mail& from);

  inline GMTool_Mail& operator=(const GMTool_Mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_Mail& default_instance();

  void Swap(GMTool_Mail* other);

  // implements Message ----------------------------------------------

  GMTool_Mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_Mail& from);
  void MergeFrom(const GMTool_Mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_rolename = 1;
  inline bool has_m_rolename() const;
  inline void clear_m_rolename();
  static const int kMRolenameFieldNumber = 1;
  inline const ::std::string& m_rolename() const;
  inline void set_m_rolename(const ::std::string& value);
  inline void set_m_rolename(const char* value);
  inline void set_m_rolename(const char* value, size_t size);
  inline ::std::string* mutable_m_rolename();
  inline ::std::string* release_m_rolename();
  inline void set_allocated_m_rolename(::std::string* m_rolename);

  // optional int32 m_roleid = 2;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 2;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // required string m_subject = 3;
  inline bool has_m_subject() const;
  inline void clear_m_subject();
  static const int kMSubjectFieldNumber = 3;
  inline const ::std::string& m_subject() const;
  inline void set_m_subject(const ::std::string& value);
  inline void set_m_subject(const char* value);
  inline void set_m_subject(const char* value, size_t size);
  inline ::std::string* mutable_m_subject();
  inline ::std::string* release_m_subject();
  inline void set_allocated_m_subject(::std::string* m_subject);

  // required string m_word = 4;
  inline bool has_m_word() const;
  inline void clear_m_word();
  static const int kMWordFieldNumber = 4;
  inline const ::std::string& m_word() const;
  inline void set_m_word(const ::std::string& value);
  inline void set_m_word(const char* value);
  inline void set_m_word(const char* value, size_t size);
  inline ::std::string* mutable_m_word();
  inline ::std::string* release_m_word();
  inline void set_allocated_m_word(::std::string* m_word);

  // required int32 m_time = 5;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 5;
  inline ::google::protobuf::int32 m_time() const;
  inline void set_m_time(::google::protobuf::int32 value);

  // required int32 m_connect = 6;
  inline bool has_m_connect() const;
  inline void clear_m_connect();
  static const int kMConnectFieldNumber = 6;
  inline ::google::protobuf::int32 m_connect() const;
  inline void set_m_connect(::google::protobuf::int32 value);

  // repeated .GMTool_MailItem m_items = 7;
  inline int m_items_size() const;
  inline void clear_m_items();
  static const int kMItemsFieldNumber = 7;
  inline const ::GMTool_MailItem& m_items(int index) const;
  inline ::GMTool_MailItem* mutable_m_items(int index);
  inline ::GMTool_MailItem* add_m_items();
  inline const ::google::protobuf::RepeatedPtrField< ::GMTool_MailItem >&
      m_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::GMTool_MailItem >*
      mutable_m_items();

  // optional int32 m_isonline = 8;
  inline bool has_m_isonline() const;
  inline void clear_m_isonline();
  static const int kMIsonlineFieldNumber = 8;
  inline ::google::protobuf::int32 m_isonline() const;
  inline void set_m_isonline(::google::protobuf::int32 value);

  // optional int32 m_sendtime = 9;
  inline bool has_m_sendtime() const;
  inline void clear_m_sendtime();
  static const int kMSendtimeFieldNumber = 9;
  inline ::google::protobuf::int32 m_sendtime() const;
  inline void set_m_sendtime(::google::protobuf::int32 value);

  // optional int32 m_gmid = 10;
  inline bool has_m_gmid() const;
  inline void clear_m_gmid();
  static const int kMGmidFieldNumber = 10;
  inline ::google::protobuf::int32 m_gmid() const;
  inline void set_m_gmid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTool_Mail)
 private:
  inline void set_has_m_rolename();
  inline void clear_has_m_rolename();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_subject();
  inline void clear_has_m_subject();
  inline void set_has_m_word();
  inline void clear_has_m_word();
  inline void set_has_m_time();
  inline void clear_has_m_time();
  inline void set_has_m_connect();
  inline void clear_has_m_connect();
  inline void set_has_m_isonline();
  inline void clear_has_m_isonline();
  inline void set_has_m_sendtime();
  inline void clear_has_m_sendtime();
  inline void set_has_m_gmid();
  inline void clear_has_m_gmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_rolename_;
  ::std::string* m_subject_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_time_;
  ::std::string* m_word_;
  ::google::protobuf::RepeatedPtrField< ::GMTool_MailItem > m_items_;
  ::google::protobuf::int32 m_connect_;
  ::google::protobuf::int32 m_isonline_;
  ::google::protobuf::int32 m_sendtime_;
  ::google::protobuf::int32 m_gmid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_Mail* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_MailItem : public ::google::protobuf::Message {
 public:
  GMTool_MailItem();
  virtual ~GMTool_MailItem();

  GMTool_MailItem(const GMTool_MailItem& from);

  inline GMTool_MailItem& operator=(const GMTool_MailItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_MailItem& default_instance();

  void Swap(GMTool_MailItem* other);

  // implements Message ----------------------------------------------

  GMTool_MailItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_MailItem& from);
  void MergeFrom(const GMTool_MailItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_typeid = 1;
  inline bool has_m_typeid() const;
  inline void clear_m_typeid();
  static const int kMTypeidFieldNumber = 1;
  inline ::google::protobuf::int32 m_typeid() const;
  inline void set_m_typeid(::google::protobuf::int32 value);

  // required int32 m_num = 2;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 2;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // required int32 m_level = 3;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTool_MailItem)
 private:
  inline void set_has_m_typeid();
  inline void clear_has_m_typeid();
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_level();
  inline void clear_has_m_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_typeid_;
  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_MailItem* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_DynTable : public ::google::protobuf::Message {
 public:
  GMTool_DynTable();
  virtual ~GMTool_DynTable();

  GMTool_DynTable(const GMTool_DynTable& from);

  inline GMTool_DynTable& operator=(const GMTool_DynTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_DynTable& default_instance();

  void Swap(GMTool_DynTable* other);

  // implements Message ----------------------------------------------

  GMTool_DynTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_DynTable& from);
  void MergeFrom(const GMTool_DynTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::std::string& m_data(int index) const;
  inline ::std::string* mutable_m_data(int index);
  inline void set_m_data(int index, const ::std::string& value);
  inline void set_m_data(int index, const char* value);
  inline void set_m_data(int index, const void* value, size_t size);
  inline ::std::string* add_m_data();
  inline void add_m_data(const ::std::string& value);
  inline void add_m_data(const char* value);
  inline void add_m_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_data();

  // optional int32 m_lastupdate = 2;
  inline bool has_m_lastupdate() const;
  inline void clear_m_lastupdate();
  static const int kMLastupdateFieldNumber = 2;
  inline ::google::protobuf::int32 m_lastupdate() const;
  inline void set_m_lastupdate(::google::protobuf::int32 value);

  // optional string m_tablename = 3;
  inline bool has_m_tablename() const;
  inline void clear_m_tablename();
  static const int kMTablenameFieldNumber = 3;
  inline const ::std::string& m_tablename() const;
  inline void set_m_tablename(const ::std::string& value);
  inline void set_m_tablename(const char* value);
  inline void set_m_tablename(const char* value, size_t size);
  inline ::std::string* mutable_m_tablename();
  inline ::std::string* release_m_tablename();
  inline void set_allocated_m_tablename(::std::string* m_tablename);

  // @@protoc_insertion_point(class_scope:GMTool_DynTable)
 private:
  inline void set_has_m_lastupdate();
  inline void clear_has_m_lastupdate();
  inline void set_has_m_tablename();
  inline void clear_has_m_tablename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> m_data_;
  ::std::string* m_tablename_;
  ::google::protobuf::int32 m_lastupdate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_DynTable* default_instance_;
};
// -------------------------------------------------------------------

class GM_FreshTable : public ::google::protobuf::Message {
 public:
  GM_FreshTable();
  virtual ~GM_FreshTable();

  GM_FreshTable(const GM_FreshTable& from);

  inline GM_FreshTable& operator=(const GM_FreshTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_FreshTable& default_instance();

  void Swap(GM_FreshTable* other);

  // implements Message ----------------------------------------------

  GM_FreshTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_FreshTable& from);
  void MergeFrom(const GM_FreshTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_table = 1;
  inline bool has_m_table() const;
  inline void clear_m_table();
  static const int kMTableFieldNumber = 1;
  inline const ::std::string& m_table() const;
  inline void set_m_table(const ::std::string& value);
  inline void set_m_table(const char* value);
  inline void set_m_table(const char* value, size_t size);
  inline ::std::string* mutable_m_table();
  inline ::std::string* release_m_table();
  inline void set_allocated_m_table(::std::string* m_table);

  // required int32 m_lastupdate = 2;
  inline bool has_m_lastupdate() const;
  inline void clear_m_lastupdate();
  static const int kMLastupdateFieldNumber = 2;
  inline ::google::protobuf::int32 m_lastupdate() const;
  inline void set_m_lastupdate(::google::protobuf::int32 value);

  // required int32 m_serverid = 3;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServeridFieldNumber = 3;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_FreshTable)
 private:
  inline void set_has_m_table();
  inline void clear_has_m_table();
  inline void set_has_m_lastupdate();
  inline void clear_has_m_lastupdate();
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_table_;
  ::google::protobuf::int32 m_lastupdate_;
  ::google::protobuf::int32 m_serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GM_FreshTable* default_instance_;
};
// -------------------------------------------------------------------

class GM_SealAll : public ::google::protobuf::Message {
 public:
  GM_SealAll();
  virtual ~GM_SealAll();

  GM_SealAll(const GM_SealAll& from);

  inline GM_SealAll& operator=(const GM_SealAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_SealAll& default_instance();

  void Swap(GM_SealAll* other);

  // implements Message ----------------------------------------------

  GM_SealAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_SealAll& from);
  void MergeFrom(const GM_SealAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_rolename = 1;
  inline bool has_m_rolename() const;
  inline void clear_m_rolename();
  static const int kMRolenameFieldNumber = 1;
  inline const ::std::string& m_rolename() const;
  inline void set_m_rolename(const ::std::string& value);
  inline void set_m_rolename(const char* value);
  inline void set_m_rolename(const char* value, size_t size);
  inline ::std::string* mutable_m_rolename();
  inline ::std::string* release_m_rolename();
  inline void set_allocated_m_rolename(::std::string* m_rolename);

  // required int32 m_serverid = 2;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // required int32 m_sealendtime = 3;
  inline bool has_m_sealendtime() const;
  inline void clear_m_sealendtime();
  static const int kMSealendtimeFieldNumber = 3;
  inline ::google::protobuf::int32 m_sealendtime() const;
  inline void set_m_sealendtime(::google::protobuf::int32 value);

  // optional string m_seal_desc = 4;
  inline bool has_m_seal_desc() const;
  inline void clear_m_seal_desc();
  static const int kMSealDescFieldNumber = 4;
  inline const ::std::string& m_seal_desc() const;
  inline void set_m_seal_desc(const ::std::string& value);
  inline void set_m_seal_desc(const char* value);
  inline void set_m_seal_desc(const char* value, size_t size);
  inline ::std::string* mutable_m_seal_desc();
  inline ::std::string* release_m_seal_desc();
  inline void set_allocated_m_seal_desc(::std::string* m_seal_desc);

  // required int32 m_sealtype = 5;
  inline bool has_m_sealtype() const;
  inline void clear_m_sealtype();
  static const int kMSealtypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_sealtype() const;
  inline void set_m_sealtype(::google::protobuf::int32 value);

  // optional int32 m_accountid = 6;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountidFieldNumber = 6;
  inline ::google::protobuf::int32 m_accountid() const;
  inline void set_m_accountid(::google::protobuf::int32 value);

  // optional int32 m_result = 7;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 7;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // required uint32 connect = 8;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 8;
  inline ::google::protobuf::uint32 connect() const;
  inline void set_connect(::google::protobuf::uint32 value);

  // optional int32 m_roleid = 9;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 9;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_SealAll)
 private:
  inline void set_has_m_rolename();
  inline void clear_has_m_rolename();
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();
  inline void set_has_m_sealendtime();
  inline void clear_has_m_sealendtime();
  inline void set_has_m_seal_desc();
  inline void clear_has_m_seal_desc();
  inline void set_has_m_sealtype();
  inline void clear_has_m_sealtype();
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_rolename_;
  ::google::protobuf::int32 m_serverid_;
  ::google::protobuf::int32 m_sealendtime_;
  ::std::string* m_seal_desc_;
  ::google::protobuf::int32 m_sealtype_;
  ::google::protobuf::int32 m_accountid_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::uint32 connect_;
  ::google::protobuf::int32 m_roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GM_SealAll* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_UpdateArea : public ::google::protobuf::Message {
 public:
  GMTool_UpdateArea();
  virtual ~GMTool_UpdateArea();

  GMTool_UpdateArea(const GMTool_UpdateArea& from);

  inline GMTool_UpdateArea& operator=(const GMTool_UpdateArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_UpdateArea& default_instance();

  void Swap(GMTool_UpdateArea* other);

  // implements Message ----------------------------------------------

  GMTool_UpdateArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_UpdateArea& from);
  void MergeFrom(const GMTool_UpdateArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_state = 2;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional int32 m_flag = 3;
  inline bool has_m_flag() const;
  inline void clear_m_flag();
  static const int kMFlagFieldNumber = 3;
  inline ::google::protobuf::int32 m_flag() const;
  inline void set_m_flag(::google::protobuf::int32 value);

  // required int32 m_connect = 4;
  inline bool has_m_connect() const;
  inline void clear_m_connect();
  static const int kMConnectFieldNumber = 4;
  inline ::google::protobuf::int32 m_connect() const;
  inline void set_m_connect(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMTool_UpdateArea)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_flag();
  inline void clear_has_m_flag();
  inline void set_has_m_connect();
  inline void clear_has_m_connect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_state_;
  ::google::protobuf::int32 m_flag_;
  ::google::protobuf::int32 m_connect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_UpdateArea* default_instance_;
};
// -------------------------------------------------------------------

class GMTool_Acitveshare : public ::google::protobuf::Message {
 public:
  GMTool_Acitveshare();
  virtual ~GMTool_Acitveshare();

  GMTool_Acitveshare(const GMTool_Acitveshare& from);

  inline GMTool_Acitveshare& operator=(const GMTool_Acitveshare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMTool_Acitveshare& default_instance();

  void Swap(GMTool_Acitveshare* other);

  // implements Message ----------------------------------------------

  GMTool_Acitveshare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMTool_Acitveshare& from);
  void MergeFrom(const GMTool_Acitveshare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string unionid = 1;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 1;
  inline const ::std::string& unionid() const;
  inline void set_unionid(const ::std::string& value);
  inline void set_unionid(const char* value);
  inline void set_unionid(const char* value, size_t size);
  inline ::std::string* mutable_unionid();
  inline ::std::string* release_unionid();
  inline void set_allocated_unionid(::std::string* unionid);

  // @@protoc_insertion_point(class_scope:GMTool_Acitveshare)
 private:
  inline void set_has_unionid();
  inline void clear_has_unionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fGmtool_2etxt();
  friend void protobuf_AssignDesc_SP_5fGmtool_2etxt();
  friend void protobuf_ShutdownFile_SP_5fGmtool_2etxt();

  void InitAsDefaultInstance();
  static GMTool_Acitveshare* default_instance_;
};
// ===================================================================


// ===================================================================

// GMTool_GetOnline

// required uint32 connect = 3;
inline bool GMTool_GetOnline::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_GetOnline::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_GetOnline::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_GetOnline::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_GetOnline::connect() const {
  return connect_;
}
inline void GMTool_GetOnline::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// required uint32 MaxOnline = 1;
inline bool GMTool_GetOnline::has_maxonline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_GetOnline::set_has_maxonline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_GetOnline::clear_has_maxonline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_GetOnline::clear_maxonline() {
  maxonline_ = 0u;
  clear_has_maxonline();
}
inline ::google::protobuf::uint32 GMTool_GetOnline::maxonline() const {
  return maxonline_;
}
inline void GMTool_GetOnline::set_maxonline(::google::protobuf::uint32 value) {
  set_has_maxonline();
  maxonline_ = value;
}

// required uint32 CurrentOnline = 2;
inline bool GMTool_GetOnline::has_currentonline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_GetOnline::set_has_currentonline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_GetOnline::clear_has_currentonline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_GetOnline::clear_currentonline() {
  currentonline_ = 0u;
  clear_has_currentonline();
}
inline ::google::protobuf::uint32 GMTool_GetOnline::currentonline() const {
  return currentonline_;
}
inline void GMTool_GetOnline::set_currentonline(::google::protobuf::uint32 value) {
  set_has_currentonline();
  currentonline_ = value;
}

// required string HttpServerIp = 4;
inline bool GMTool_GetOnline::has_httpserverip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_GetOnline::set_has_httpserverip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_GetOnline::clear_has_httpserverip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_GetOnline::clear_httpserverip() {
  if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
    httpserverip_->clear();
  }
  clear_has_httpserverip();
}
inline const ::std::string& GMTool_GetOnline::httpserverip() const {
  return *httpserverip_;
}
inline void GMTool_GetOnline::set_httpserverip(const ::std::string& value) {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  httpserverip_->assign(value);
}
inline void GMTool_GetOnline::set_httpserverip(const char* value) {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  httpserverip_->assign(value);
}
inline void GMTool_GetOnline::set_httpserverip(const char* value, size_t size) {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  httpserverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_GetOnline::mutable_httpserverip() {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  return httpserverip_;
}
inline ::std::string* GMTool_GetOnline::release_httpserverip() {
  clear_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = httpserverip_;
    httpserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_GetOnline::set_allocated_httpserverip(::std::string* httpserverip) {
  if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete httpserverip_;
  }
  if (httpserverip) {
    set_has_httpserverip();
    httpserverip_ = httpserverip;
  } else {
    clear_has_httpserverip();
    httpserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GMTool_CurrentData

// required uint32 connect = 3;
inline bool GMTool_CurrentData::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_CurrentData::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_CurrentData::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_CurrentData::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_CurrentData::connect() const {
  return connect_;
}
inline void GMTool_CurrentData::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// required uint32 MaxOnline = 1;
inline bool GMTool_CurrentData::has_maxonline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_CurrentData::set_has_maxonline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_CurrentData::clear_has_maxonline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_CurrentData::clear_maxonline() {
  maxonline_ = 0u;
  clear_has_maxonline();
}
inline ::google::protobuf::uint32 GMTool_CurrentData::maxonline() const {
  return maxonline_;
}
inline void GMTool_CurrentData::set_maxonline(::google::protobuf::uint32 value) {
  set_has_maxonline();
  maxonline_ = value;
}

// required uint32 CurrentOnline = 2;
inline bool GMTool_CurrentData::has_currentonline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_CurrentData::set_has_currentonline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_CurrentData::clear_has_currentonline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_CurrentData::clear_currentonline() {
  currentonline_ = 0u;
  clear_has_currentonline();
}
inline ::google::protobuf::uint32 GMTool_CurrentData::currentonline() const {
  return currentonline_;
}
inline void GMTool_CurrentData::set_currentonline(::google::protobuf::uint32 value) {
  set_has_currentonline();
  currentonline_ = value;
}

// required uint32 RegisterCount = 4;
inline bool GMTool_CurrentData::has_registercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_CurrentData::set_has_registercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_CurrentData::clear_has_registercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_CurrentData::clear_registercount() {
  registercount_ = 0u;
  clear_has_registercount();
}
inline ::google::protobuf::uint32 GMTool_CurrentData::registercount() const {
  return registercount_;
}
inline void GMTool_CurrentData::set_registercount(::google::protobuf::uint32 value) {
  set_has_registercount();
  registercount_ = value;
}

// required string HttpServerIp = 5;
inline bool GMTool_CurrentData::has_httpserverip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTool_CurrentData::set_has_httpserverip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTool_CurrentData::clear_has_httpserverip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTool_CurrentData::clear_httpserverip() {
  if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
    httpserverip_->clear();
  }
  clear_has_httpserverip();
}
inline const ::std::string& GMTool_CurrentData::httpserverip() const {
  return *httpserverip_;
}
inline void GMTool_CurrentData::set_httpserverip(const ::std::string& value) {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  httpserverip_->assign(value);
}
inline void GMTool_CurrentData::set_httpserverip(const char* value) {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  httpserverip_->assign(value);
}
inline void GMTool_CurrentData::set_httpserverip(const char* value, size_t size) {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  httpserverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_CurrentData::mutable_httpserverip() {
  set_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    httpserverip_ = new ::std::string;
  }
  return httpserverip_;
}
inline ::std::string* GMTool_CurrentData::release_httpserverip() {
  clear_has_httpserverip();
  if (httpserverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = httpserverip_;
    httpserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_CurrentData::set_allocated_httpserverip(::std::string* httpserverip) {
  if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete httpserverip_;
  }
  if (httpserverip) {
    set_has_httpserverip();
    httpserverip_ = httpserverip;
  } else {
    clear_has_httpserverip();
    httpserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GMTool_Request

// required uint32 roleid = 1;
inline bool GMTool_Request::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_Request::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_Request::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_Request::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 GMTool_Request::roleid() const {
  return roleid_;
}
inline void GMTool_Request::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// GMTool_Seal_Player_Request

// optional string role_name = 1;
inline bool GMTool_Seal_Player_Request::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_Seal_Player_Request::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_Seal_Player_Request::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_Seal_Player_Request::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& GMTool_Seal_Player_Request::role_name() const {
  return *role_name_;
}
inline void GMTool_Seal_Player_Request::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void GMTool_Seal_Player_Request::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void GMTool_Seal_Player_Request::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_Seal_Player_Request::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* GMTool_Seal_Player_Request::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_Seal_Player_Request::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 seal_end_time = 2;
inline bool GMTool_Seal_Player_Request::has_seal_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_Seal_Player_Request::set_has_seal_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_Seal_Player_Request::clear_has_seal_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_Seal_Player_Request::clear_seal_end_time() {
  seal_end_time_ = 0;
  clear_has_seal_end_time();
}
inline ::google::protobuf::int32 GMTool_Seal_Player_Request::seal_end_time() const {
  return seal_end_time_;
}
inline void GMTool_Seal_Player_Request::set_seal_end_time(::google::protobuf::int32 value) {
  set_has_seal_end_time();
  seal_end_time_ = value;
}

// required uint32 connect = 3;
inline bool GMTool_Seal_Player_Request::has_connect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_Seal_Player_Request::set_has_connect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_Seal_Player_Request::clear_has_connect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_Seal_Player_Request::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_Seal_Player_Request::connect() const {
  return connect_;
}
inline void GMTool_Seal_Player_Request::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// optional int32 action = 4;
inline bool GMTool_Seal_Player_Request::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_Seal_Player_Request::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_Seal_Player_Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_Seal_Player_Request::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 GMTool_Seal_Player_Request::action() const {
  return action_;
}
inline void GMTool_Seal_Player_Request::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// optional int32 role_id = 5;
inline bool GMTool_Seal_Player_Request::has_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTool_Seal_Player_Request::set_has_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTool_Seal_Player_Request::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTool_Seal_Player_Request::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 GMTool_Seal_Player_Request::role_id() const {
  return role_id_;
}
inline void GMTool_Seal_Player_Request::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_desc = 6;
inline bool GMTool_Seal_Player_Request::has_role_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMTool_Seal_Player_Request::set_has_role_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMTool_Seal_Player_Request::clear_has_role_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMTool_Seal_Player_Request::clear_role_desc() {
  if (role_desc_ != &::google::protobuf::internal::kEmptyString) {
    role_desc_->clear();
  }
  clear_has_role_desc();
}
inline const ::std::string& GMTool_Seal_Player_Request::role_desc() const {
  return *role_desc_;
}
inline void GMTool_Seal_Player_Request::set_role_desc(const ::std::string& value) {
  set_has_role_desc();
  if (role_desc_ == &::google::protobuf::internal::kEmptyString) {
    role_desc_ = new ::std::string;
  }
  role_desc_->assign(value);
}
inline void GMTool_Seal_Player_Request::set_role_desc(const char* value) {
  set_has_role_desc();
  if (role_desc_ == &::google::protobuf::internal::kEmptyString) {
    role_desc_ = new ::std::string;
  }
  role_desc_->assign(value);
}
inline void GMTool_Seal_Player_Request::set_role_desc(const char* value, size_t size) {
  set_has_role_desc();
  if (role_desc_ == &::google::protobuf::internal::kEmptyString) {
    role_desc_ = new ::std::string;
  }
  role_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_Seal_Player_Request::mutable_role_desc() {
  set_has_role_desc();
  if (role_desc_ == &::google::protobuf::internal::kEmptyString) {
    role_desc_ = new ::std::string;
  }
  return role_desc_;
}
inline ::std::string* GMTool_Seal_Player_Request::release_role_desc() {
  clear_has_role_desc();
  if (role_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_desc_;
    role_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_Seal_Player_Request::set_allocated_role_desc(::std::string* role_desc) {
  if (role_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete role_desc_;
  }
  if (role_desc) {
    set_has_role_desc();
    role_desc_ = role_desc;
  } else {
    clear_has_role_desc();
    role_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GMTool_Operation_result

// required int32 operation_result = 1;
inline bool GMTool_Operation_result::has_operation_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_Operation_result::set_has_operation_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_Operation_result::clear_has_operation_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_Operation_result::clear_operation_result() {
  operation_result_ = 0;
  clear_has_operation_result();
}
inline ::google::protobuf::int32 GMTool_Operation_result::operation_result() const {
  return operation_result_;
}
inline void GMTool_Operation_result::set_operation_result(::google::protobuf::int32 value) {
  set_has_operation_result();
  operation_result_ = value;
}

// required uint32 connect = 2;
inline bool GMTool_Operation_result::has_connect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_Operation_result::set_has_connect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_Operation_result::clear_has_connect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_Operation_result::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_Operation_result::connect() const {
  return connect_;
}
inline void GMTool_Operation_result::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// -------------------------------------------------------------------

// GiftBagItem

// required uint32 objectid = 1;
inline bool GiftBagItem::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiftBagItem::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiftBagItem::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiftBagItem::clear_objectid() {
  objectid_ = 0u;
  clear_has_objectid();
}
inline ::google::protobuf::uint32 GiftBagItem::objectid() const {
  return objectid_;
}
inline void GiftBagItem::set_objectid(::google::protobuf::uint32 value) {
  set_has_objectid();
  objectid_ = value;
}

// required uint32 objcount = 2;
inline bool GiftBagItem::has_objcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiftBagItem::set_has_objcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiftBagItem::clear_has_objcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiftBagItem::clear_objcount() {
  objcount_ = 0u;
  clear_has_objcount();
}
inline ::google::protobuf::uint32 GiftBagItem::objcount() const {
  return objcount_;
}
inline void GiftBagItem::set_objcount(::google::protobuf::uint32 value) {
  set_has_objcount();
  objcount_ = value;
}

// required uint32 objlevel = 3;
inline bool GiftBagItem::has_objlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiftBagItem::set_has_objlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiftBagItem::clear_has_objlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiftBagItem::clear_objlevel() {
  objlevel_ = 0u;
  clear_has_objlevel();
}
inline ::google::protobuf::uint32 GiftBagItem::objlevel() const {
  return objlevel_;
}
inline void GiftBagItem::set_objlevel(::google::protobuf::uint32 value) {
  set_has_objlevel();
  objlevel_ = value;
}

// -------------------------------------------------------------------

// GMTool_GiftBag

// required uint32 m_typeid = 2;
inline bool GMTool_GiftBag::has_m_typeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_GiftBag::set_has_m_typeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_GiftBag::clear_has_m_typeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_GiftBag::clear_m_typeid() {
  m_typeid_ = 0u;
  clear_has_m_typeid();
}
inline ::google::protobuf::uint32 GMTool_GiftBag::m_typeid() const {
  return m_typeid_;
}
inline void GMTool_GiftBag::set_m_typeid(::google::protobuf::uint32 value) {
  set_has_m_typeid();
  m_typeid_ = value;
}

// required string m_name = 3;
inline bool GMTool_GiftBag::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_GiftBag::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_GiftBag::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_GiftBag::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& GMTool_GiftBag::m_name() const {
  return *m_name_;
}
inline void GMTool_GiftBag::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GMTool_GiftBag::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GMTool_GiftBag::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_GiftBag::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* GMTool_GiftBag::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_GiftBag::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_iconurl = 4;
inline bool GMTool_GiftBag::has_m_iconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_GiftBag::set_has_m_iconurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_GiftBag::clear_has_m_iconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_GiftBag::clear_m_iconurl() {
  if (m_iconurl_ != &::google::protobuf::internal::kEmptyString) {
    m_iconurl_->clear();
  }
  clear_has_m_iconurl();
}
inline const ::std::string& GMTool_GiftBag::m_iconurl() const {
  return *m_iconurl_;
}
inline void GMTool_GiftBag::set_m_iconurl(const ::std::string& value) {
  set_has_m_iconurl();
  if (m_iconurl_ == &::google::protobuf::internal::kEmptyString) {
    m_iconurl_ = new ::std::string;
  }
  m_iconurl_->assign(value);
}
inline void GMTool_GiftBag::set_m_iconurl(const char* value) {
  set_has_m_iconurl();
  if (m_iconurl_ == &::google::protobuf::internal::kEmptyString) {
    m_iconurl_ = new ::std::string;
  }
  m_iconurl_->assign(value);
}
inline void GMTool_GiftBag::set_m_iconurl(const char* value, size_t size) {
  set_has_m_iconurl();
  if (m_iconurl_ == &::google::protobuf::internal::kEmptyString) {
    m_iconurl_ = new ::std::string;
  }
  m_iconurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_GiftBag::mutable_m_iconurl() {
  set_has_m_iconurl();
  if (m_iconurl_ == &::google::protobuf::internal::kEmptyString) {
    m_iconurl_ = new ::std::string;
  }
  return m_iconurl_;
}
inline ::std::string* GMTool_GiftBag::release_m_iconurl() {
  clear_has_m_iconurl();
  if (m_iconurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_iconurl_;
    m_iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_GiftBag::set_allocated_m_iconurl(::std::string* m_iconurl) {
  if (m_iconurl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_iconurl_;
  }
  if (m_iconurl) {
    set_has_m_iconurl();
    m_iconurl_ = m_iconurl;
  } else {
    clear_has_m_iconurl();
    m_iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_describe = 5;
inline bool GMTool_GiftBag::has_m_describe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_GiftBag::set_has_m_describe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_GiftBag::clear_has_m_describe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_GiftBag::clear_m_describe() {
  if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
    m_describe_->clear();
  }
  clear_has_m_describe();
}
inline const ::std::string& GMTool_GiftBag::m_describe() const {
  return *m_describe_;
}
inline void GMTool_GiftBag::set_m_describe(const ::std::string& value) {
  set_has_m_describe();
  if (m_describe_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_ = new ::std::string;
  }
  m_describe_->assign(value);
}
inline void GMTool_GiftBag::set_m_describe(const char* value) {
  set_has_m_describe();
  if (m_describe_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_ = new ::std::string;
  }
  m_describe_->assign(value);
}
inline void GMTool_GiftBag::set_m_describe(const char* value, size_t size) {
  set_has_m_describe();
  if (m_describe_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_ = new ::std::string;
  }
  m_describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_GiftBag::mutable_m_describe() {
  set_has_m_describe();
  if (m_describe_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_ = new ::std::string;
  }
  return m_describe_;
}
inline ::std::string* GMTool_GiftBag::release_m_describe() {
  clear_has_m_describe();
  if (m_describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_describe_;
    m_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_GiftBag::set_allocated_m_describe(::std::string* m_describe) {
  if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_describe_;
  }
  if (m_describe) {
    set_has_m_describe();
    m_describe_ = m_describe;
  } else {
    clear_has_m_describe();
    m_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 connect = 6;
inline bool GMTool_GiftBag::has_connect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTool_GiftBag::set_has_connect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTool_GiftBag::clear_has_connect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTool_GiftBag::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_GiftBag::connect() const {
  return connect_;
}
inline void GMTool_GiftBag::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// repeated .GiftBagItem m_giftBagItem = 1;
inline int GMTool_GiftBag::m_giftbagitem_size() const {
  return m_giftbagitem_.size();
}
inline void GMTool_GiftBag::clear_m_giftbagitem() {
  m_giftbagitem_.Clear();
}
inline const ::GiftBagItem& GMTool_GiftBag::m_giftbagitem(int index) const {
  return m_giftbagitem_.Get(index);
}
inline ::GiftBagItem* GMTool_GiftBag::mutable_m_giftbagitem(int index) {
  return m_giftbagitem_.Mutable(index);
}
inline ::GiftBagItem* GMTool_GiftBag::add_m_giftbagitem() {
  return m_giftbagitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GiftBagItem >&
GMTool_GiftBag::m_giftbagitem() const {
  return m_giftbagitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::GiftBagItem >*
GMTool_GiftBag::mutable_m_giftbagitem() {
  return &m_giftbagitem_;
}

// -------------------------------------------------------------------

// GMTool_OperateRequest

// required uint32 connect = 1;
inline bool GMTool_OperateRequest::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_OperateRequest::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_OperateRequest::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_OperateRequest::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_OperateRequest::connect() const {
  return connect_;
}
inline void GMTool_OperateRequest::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// optional int32 int_param = 2;
inline bool GMTool_OperateRequest::has_int_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_OperateRequest::set_has_int_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_OperateRequest::clear_has_int_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_OperateRequest::clear_int_param() {
  int_param_ = 0;
  clear_has_int_param();
}
inline ::google::protobuf::int32 GMTool_OperateRequest::int_param() const {
  return int_param_;
}
inline void GMTool_OperateRequest::set_int_param(::google::protobuf::int32 value) {
  set_has_int_param();
  int_param_ = value;
}

// optional string str_param = 3;
inline bool GMTool_OperateRequest::has_str_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_OperateRequest::set_has_str_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_OperateRequest::clear_has_str_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_OperateRequest::clear_str_param() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    str_param_->clear();
  }
  clear_has_str_param();
}
inline const ::std::string& GMTool_OperateRequest::str_param() const {
  return *str_param_;
}
inline void GMTool_OperateRequest::set_str_param(const ::std::string& value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param(const char* value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param(const char* value, size_t size) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_OperateRequest::mutable_str_param() {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  return str_param_;
}
inline ::std::string* GMTool_OperateRequest::release_str_param() {
  clear_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param_;
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_OperateRequest::set_allocated_str_param(::std::string* str_param) {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (str_param) {
    set_has_str_param();
    str_param_ = str_param;
  } else {
    clear_has_str_param();
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string str_param2 = 4;
inline bool GMTool_OperateRequest::has_str_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_OperateRequest::set_has_str_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_OperateRequest::clear_has_str_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_OperateRequest::clear_str_param2() {
  if (str_param2_ != &::google::protobuf::internal::kEmptyString) {
    str_param2_->clear();
  }
  clear_has_str_param2();
}
inline const ::std::string& GMTool_OperateRequest::str_param2() const {
  return *str_param2_;
}
inline void GMTool_OperateRequest::set_str_param2(const ::std::string& value) {
  set_has_str_param2();
  if (str_param2_ == &::google::protobuf::internal::kEmptyString) {
    str_param2_ = new ::std::string;
  }
  str_param2_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param2(const char* value) {
  set_has_str_param2();
  if (str_param2_ == &::google::protobuf::internal::kEmptyString) {
    str_param2_ = new ::std::string;
  }
  str_param2_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param2(const char* value, size_t size) {
  set_has_str_param2();
  if (str_param2_ == &::google::protobuf::internal::kEmptyString) {
    str_param2_ = new ::std::string;
  }
  str_param2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_OperateRequest::mutable_str_param2() {
  set_has_str_param2();
  if (str_param2_ == &::google::protobuf::internal::kEmptyString) {
    str_param2_ = new ::std::string;
  }
  return str_param2_;
}
inline ::std::string* GMTool_OperateRequest::release_str_param2() {
  clear_has_str_param2();
  if (str_param2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param2_;
    str_param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_OperateRequest::set_allocated_str_param2(::std::string* str_param2) {
  if (str_param2_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param2_;
  }
  if (str_param2) {
    set_has_str_param2();
    str_param2_ = str_param2;
  } else {
    clear_has_str_param2();
    str_param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 int_param2 = 5;
inline bool GMTool_OperateRequest::has_int_param2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTool_OperateRequest::set_has_int_param2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTool_OperateRequest::clear_has_int_param2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTool_OperateRequest::clear_int_param2() {
  int_param2_ = 0;
  clear_has_int_param2();
}
inline ::google::protobuf::int32 GMTool_OperateRequest::int_param2() const {
  return int_param2_;
}
inline void GMTool_OperateRequest::set_int_param2(::google::protobuf::int32 value) {
  set_has_int_param2();
  int_param2_ = value;
}

// optional int32 int_param3 = 6;
inline bool GMTool_OperateRequest::has_int_param3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMTool_OperateRequest::set_has_int_param3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMTool_OperateRequest::clear_has_int_param3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMTool_OperateRequest::clear_int_param3() {
  int_param3_ = 0;
  clear_has_int_param3();
}
inline ::google::protobuf::int32 GMTool_OperateRequest::int_param3() const {
  return int_param3_;
}
inline void GMTool_OperateRequest::set_int_param3(::google::protobuf::int32 value) {
  set_has_int_param3();
  int_param3_ = value;
}

// optional string str_param3 = 7;
inline bool GMTool_OperateRequest::has_str_param3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GMTool_OperateRequest::set_has_str_param3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GMTool_OperateRequest::clear_has_str_param3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GMTool_OperateRequest::clear_str_param3() {
  if (str_param3_ != &::google::protobuf::internal::kEmptyString) {
    str_param3_->clear();
  }
  clear_has_str_param3();
}
inline const ::std::string& GMTool_OperateRequest::str_param3() const {
  return *str_param3_;
}
inline void GMTool_OperateRequest::set_str_param3(const ::std::string& value) {
  set_has_str_param3();
  if (str_param3_ == &::google::protobuf::internal::kEmptyString) {
    str_param3_ = new ::std::string;
  }
  str_param3_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param3(const char* value) {
  set_has_str_param3();
  if (str_param3_ == &::google::protobuf::internal::kEmptyString) {
    str_param3_ = new ::std::string;
  }
  str_param3_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param3(const char* value, size_t size) {
  set_has_str_param3();
  if (str_param3_ == &::google::protobuf::internal::kEmptyString) {
    str_param3_ = new ::std::string;
  }
  str_param3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_OperateRequest::mutable_str_param3() {
  set_has_str_param3();
  if (str_param3_ == &::google::protobuf::internal::kEmptyString) {
    str_param3_ = new ::std::string;
  }
  return str_param3_;
}
inline ::std::string* GMTool_OperateRequest::release_str_param3() {
  clear_has_str_param3();
  if (str_param3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param3_;
    str_param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_OperateRequest::set_allocated_str_param3(::std::string* str_param3) {
  if (str_param3_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param3_;
  }
  if (str_param3) {
    set_has_str_param3();
    str_param3_ = str_param3;
  } else {
    clear_has_str_param3();
    str_param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string str_param4 = 8;
inline bool GMTool_OperateRequest::has_str_param4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GMTool_OperateRequest::set_has_str_param4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GMTool_OperateRequest::clear_has_str_param4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GMTool_OperateRequest::clear_str_param4() {
  if (str_param4_ != &::google::protobuf::internal::kEmptyString) {
    str_param4_->clear();
  }
  clear_has_str_param4();
}
inline const ::std::string& GMTool_OperateRequest::str_param4() const {
  return *str_param4_;
}
inline void GMTool_OperateRequest::set_str_param4(const ::std::string& value) {
  set_has_str_param4();
  if (str_param4_ == &::google::protobuf::internal::kEmptyString) {
    str_param4_ = new ::std::string;
  }
  str_param4_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param4(const char* value) {
  set_has_str_param4();
  if (str_param4_ == &::google::protobuf::internal::kEmptyString) {
    str_param4_ = new ::std::string;
  }
  str_param4_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param4(const char* value, size_t size) {
  set_has_str_param4();
  if (str_param4_ == &::google::protobuf::internal::kEmptyString) {
    str_param4_ = new ::std::string;
  }
  str_param4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_OperateRequest::mutable_str_param4() {
  set_has_str_param4();
  if (str_param4_ == &::google::protobuf::internal::kEmptyString) {
    str_param4_ = new ::std::string;
  }
  return str_param4_;
}
inline ::std::string* GMTool_OperateRequest::release_str_param4() {
  clear_has_str_param4();
  if (str_param4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param4_;
    str_param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_OperateRequest::set_allocated_str_param4(::std::string* str_param4) {
  if (str_param4_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param4_;
  }
  if (str_param4) {
    set_has_str_param4();
    str_param4_ = str_param4;
  } else {
    clear_has_str_param4();
    str_param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string str_param5 = 9;
inline bool GMTool_OperateRequest::has_str_param5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GMTool_OperateRequest::set_has_str_param5() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GMTool_OperateRequest::clear_has_str_param5() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GMTool_OperateRequest::clear_str_param5() {
  if (str_param5_ != &::google::protobuf::internal::kEmptyString) {
    str_param5_->clear();
  }
  clear_has_str_param5();
}
inline const ::std::string& GMTool_OperateRequest::str_param5() const {
  return *str_param5_;
}
inline void GMTool_OperateRequest::set_str_param5(const ::std::string& value) {
  set_has_str_param5();
  if (str_param5_ == &::google::protobuf::internal::kEmptyString) {
    str_param5_ = new ::std::string;
  }
  str_param5_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param5(const char* value) {
  set_has_str_param5();
  if (str_param5_ == &::google::protobuf::internal::kEmptyString) {
    str_param5_ = new ::std::string;
  }
  str_param5_->assign(value);
}
inline void GMTool_OperateRequest::set_str_param5(const char* value, size_t size) {
  set_has_str_param5();
  if (str_param5_ == &::google::protobuf::internal::kEmptyString) {
    str_param5_ = new ::std::string;
  }
  str_param5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_OperateRequest::mutable_str_param5() {
  set_has_str_param5();
  if (str_param5_ == &::google::protobuf::internal::kEmptyString) {
    str_param5_ = new ::std::string;
  }
  return str_param5_;
}
inline ::std::string* GMTool_OperateRequest::release_str_param5() {
  clear_has_str_param5();
  if (str_param5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param5_;
    str_param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_OperateRequest::set_allocated_str_param5(::std::string* str_param5) {
  if (str_param5_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param5_;
  }
  if (str_param5) {
    set_has_str_param5();
    str_param5_ = str_param5;
  } else {
    clear_has_str_param5();
    str_param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 int_param4 = 10;
inline bool GMTool_OperateRequest::has_int_param4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GMTool_OperateRequest::set_has_int_param4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GMTool_OperateRequest::clear_has_int_param4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GMTool_OperateRequest::clear_int_param4() {
  int_param4_ = 0;
  clear_has_int_param4();
}
inline ::google::protobuf::int32 GMTool_OperateRequest::int_param4() const {
  return int_param4_;
}
inline void GMTool_OperateRequest::set_int_param4(::google::protobuf::int32 value) {
  set_has_int_param4();
  int_param4_ = value;
}

// -------------------------------------------------------------------

// GMTool_noticeRequest

// required uint32 connect = 1;
inline bool GMTool_noticeRequest::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_noticeRequest::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_noticeRequest::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_noticeRequest::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_noticeRequest::connect() const {
  return connect_;
}
inline void GMTool_noticeRequest::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// optional int32 int_param = 2;
inline bool GMTool_noticeRequest::has_int_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_noticeRequest::set_has_int_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_noticeRequest::clear_has_int_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_noticeRequest::clear_int_param() {
  int_param_ = 0;
  clear_has_int_param();
}
inline ::google::protobuf::int32 GMTool_noticeRequest::int_param() const {
  return int_param_;
}
inline void GMTool_noticeRequest::set_int_param(::google::protobuf::int32 value) {
  set_has_int_param();
  int_param_ = value;
}

// optional string str_param = 3;
inline bool GMTool_noticeRequest::has_str_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_noticeRequest::set_has_str_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_noticeRequest::clear_has_str_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_noticeRequest::clear_str_param() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    str_param_->clear();
  }
  clear_has_str_param();
}
inline const ::std::string& GMTool_noticeRequest::str_param() const {
  return *str_param_;
}
inline void GMTool_noticeRequest::set_str_param(const ::std::string& value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void GMTool_noticeRequest::set_str_param(const char* value) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(value);
}
inline void GMTool_noticeRequest::set_str_param(const char* value, size_t size) {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  str_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_noticeRequest::mutable_str_param() {
  set_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    str_param_ = new ::std::string;
  }
  return str_param_;
}
inline ::std::string* GMTool_noticeRequest::release_str_param() {
  clear_has_str_param();
  if (str_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_param_;
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_noticeRequest::set_allocated_str_param(::std::string* str_param) {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (str_param) {
    set_has_str_param();
    str_param_ = str_param;
  } else {
    clear_has_str_param();
    str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GMTool_SystemWord

// required string word = 1;
inline bool GMTool_SystemWord::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_SystemWord::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_SystemWord::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_SystemWord::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& GMTool_SystemWord::word() const {
  return *word_;
}
inline void GMTool_SystemWord::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void GMTool_SystemWord::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void GMTool_SystemWord::set_word(const char* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_SystemWord::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* GMTool_SystemWord::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_SystemWord::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 channels = 3;
inline int GMTool_SystemWord::channels_size() const {
  return channels_.size();
}
inline void GMTool_SystemWord::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::int32 GMTool_SystemWord::channels(int index) const {
  return channels_.Get(index);
}
inline void GMTool_SystemWord::set_channels(int index, ::google::protobuf::int32 value) {
  channels_.Set(index, value);
}
inline void GMTool_SystemWord::add_channels(::google::protobuf::int32 value) {
  channels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GMTool_SystemWord::channels() const {
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GMTool_SystemWord::mutable_channels() {
  return &channels_;
}

// optional int32 repeatCount = 2;
inline bool GMTool_SystemWord::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_SystemWord::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_SystemWord::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_SystemWord::clear_repeatcount() {
  repeatcount_ = 0;
  clear_has_repeatcount();
}
inline ::google::protobuf::int32 GMTool_SystemWord::repeatcount() const {
  return repeatcount_;
}
inline void GMTool_SystemWord::set_repeatcount(::google::protobuf::int32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// required uint32 connect = 4;
inline bool GMTool_SystemWord::has_connect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_SystemWord::set_has_connect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_SystemWord::clear_has_connect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_SystemWord::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_SystemWord::connect() const {
  return connect_;
}
inline void GMTool_SystemWord::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// optional int32 interval = 5;
inline bool GMTool_SystemWord::has_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTool_SystemWord::set_has_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTool_SystemWord::clear_has_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTool_SystemWord::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 GMTool_SystemWord::interval() const {
  return interval_;
}
inline void GMTool_SystemWord::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// -------------------------------------------------------------------

// GMTool_SealAccountReturn

// required uint32 connect = 1;
inline bool GMTool_SealAccountReturn::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_SealAccountReturn::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_SealAccountReturn::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_SealAccountReturn::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GMTool_SealAccountReturn::connect() const {
  return connect_;
}
inline void GMTool_SealAccountReturn::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// required int32 operation_result = 2;
inline bool GMTool_SealAccountReturn::has_operation_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_SealAccountReturn::set_has_operation_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_SealAccountReturn::clear_has_operation_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_SealAccountReturn::clear_operation_result() {
  operation_result_ = 0;
  clear_has_operation_result();
}
inline ::google::protobuf::int32 GMTool_SealAccountReturn::operation_result() const {
  return operation_result_;
}
inline void GMTool_SealAccountReturn::set_operation_result(::google::protobuf::int32 value) {
  set_has_operation_result();
  operation_result_ = value;
}

// required int32 accountid = 3;
inline bool GMTool_SealAccountReturn::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_SealAccountReturn::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_SealAccountReturn::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_SealAccountReturn::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 GMTool_SealAccountReturn::accountid() const {
  return accountid_;
}
inline void GMTool_SealAccountReturn::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// GMTool_Mail

// optional string m_rolename = 1;
inline bool GMTool_Mail::has_m_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_Mail::set_has_m_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_Mail::clear_has_m_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_Mail::clear_m_rolename() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    m_rolename_->clear();
  }
  clear_has_m_rolename();
}
inline const ::std::string& GMTool_Mail::m_rolename() const {
  return *m_rolename_;
}
inline void GMTool_Mail::set_m_rolename(const ::std::string& value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GMTool_Mail::set_m_rolename(const char* value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GMTool_Mail::set_m_rolename(const char* value, size_t size) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_Mail::mutable_m_rolename() {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  return m_rolename_;
}
inline ::std::string* GMTool_Mail::release_m_rolename() {
  clear_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rolename_;
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_Mail::set_allocated_m_rolename(::std::string* m_rolename) {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_rolename) {
    set_has_m_rolename();
    m_rolename_ = m_rolename;
  } else {
    clear_has_m_rolename();
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_roleid = 2;
inline bool GMTool_Mail::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_Mail::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_Mail::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_Mail::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GMTool_Mail::m_roleid() const {
  return m_roleid_;
}
inline void GMTool_Mail::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// required string m_subject = 3;
inline bool GMTool_Mail::has_m_subject() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_Mail::set_has_m_subject() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_Mail::clear_has_m_subject() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_Mail::clear_m_subject() {
  if (m_subject_ != &::google::protobuf::internal::kEmptyString) {
    m_subject_->clear();
  }
  clear_has_m_subject();
}
inline const ::std::string& GMTool_Mail::m_subject() const {
  return *m_subject_;
}
inline void GMTool_Mail::set_m_subject(const ::std::string& value) {
  set_has_m_subject();
  if (m_subject_ == &::google::protobuf::internal::kEmptyString) {
    m_subject_ = new ::std::string;
  }
  m_subject_->assign(value);
}
inline void GMTool_Mail::set_m_subject(const char* value) {
  set_has_m_subject();
  if (m_subject_ == &::google::protobuf::internal::kEmptyString) {
    m_subject_ = new ::std::string;
  }
  m_subject_->assign(value);
}
inline void GMTool_Mail::set_m_subject(const char* value, size_t size) {
  set_has_m_subject();
  if (m_subject_ == &::google::protobuf::internal::kEmptyString) {
    m_subject_ = new ::std::string;
  }
  m_subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_Mail::mutable_m_subject() {
  set_has_m_subject();
  if (m_subject_ == &::google::protobuf::internal::kEmptyString) {
    m_subject_ = new ::std::string;
  }
  return m_subject_;
}
inline ::std::string* GMTool_Mail::release_m_subject() {
  clear_has_m_subject();
  if (m_subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_subject_;
    m_subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_Mail::set_allocated_m_subject(::std::string* m_subject) {
  if (m_subject_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subject_;
  }
  if (m_subject) {
    set_has_m_subject();
    m_subject_ = m_subject;
  } else {
    clear_has_m_subject();
    m_subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_word = 4;
inline bool GMTool_Mail::has_m_word() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_Mail::set_has_m_word() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_Mail::clear_has_m_word() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_Mail::clear_m_word() {
  if (m_word_ != &::google::protobuf::internal::kEmptyString) {
    m_word_->clear();
  }
  clear_has_m_word();
}
inline const ::std::string& GMTool_Mail::m_word() const {
  return *m_word_;
}
inline void GMTool_Mail::set_m_word(const ::std::string& value) {
  set_has_m_word();
  if (m_word_ == &::google::protobuf::internal::kEmptyString) {
    m_word_ = new ::std::string;
  }
  m_word_->assign(value);
}
inline void GMTool_Mail::set_m_word(const char* value) {
  set_has_m_word();
  if (m_word_ == &::google::protobuf::internal::kEmptyString) {
    m_word_ = new ::std::string;
  }
  m_word_->assign(value);
}
inline void GMTool_Mail::set_m_word(const char* value, size_t size) {
  set_has_m_word();
  if (m_word_ == &::google::protobuf::internal::kEmptyString) {
    m_word_ = new ::std::string;
  }
  m_word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_Mail::mutable_m_word() {
  set_has_m_word();
  if (m_word_ == &::google::protobuf::internal::kEmptyString) {
    m_word_ = new ::std::string;
  }
  return m_word_;
}
inline ::std::string* GMTool_Mail::release_m_word() {
  clear_has_m_word();
  if (m_word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_word_;
    m_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_Mail::set_allocated_m_word(::std::string* m_word) {
  if (m_word_ != &::google::protobuf::internal::kEmptyString) {
    delete m_word_;
  }
  if (m_word) {
    set_has_m_word();
    m_word_ = m_word;
  } else {
    clear_has_m_word();
    m_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_time = 5;
inline bool GMTool_Mail::has_m_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMTool_Mail::set_has_m_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMTool_Mail::clear_has_m_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMTool_Mail::clear_m_time() {
  m_time_ = 0;
  clear_has_m_time();
}
inline ::google::protobuf::int32 GMTool_Mail::m_time() const {
  return m_time_;
}
inline void GMTool_Mail::set_m_time(::google::protobuf::int32 value) {
  set_has_m_time();
  m_time_ = value;
}

// required int32 m_connect = 6;
inline bool GMTool_Mail::has_m_connect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMTool_Mail::set_has_m_connect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMTool_Mail::clear_has_m_connect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMTool_Mail::clear_m_connect() {
  m_connect_ = 0;
  clear_has_m_connect();
}
inline ::google::protobuf::int32 GMTool_Mail::m_connect() const {
  return m_connect_;
}
inline void GMTool_Mail::set_m_connect(::google::protobuf::int32 value) {
  set_has_m_connect();
  m_connect_ = value;
}

// repeated .GMTool_MailItem m_items = 7;
inline int GMTool_Mail::m_items_size() const {
  return m_items_.size();
}
inline void GMTool_Mail::clear_m_items() {
  m_items_.Clear();
}
inline const ::GMTool_MailItem& GMTool_Mail::m_items(int index) const {
  return m_items_.Get(index);
}
inline ::GMTool_MailItem* GMTool_Mail::mutable_m_items(int index) {
  return m_items_.Mutable(index);
}
inline ::GMTool_MailItem* GMTool_Mail::add_m_items() {
  return m_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GMTool_MailItem >&
GMTool_Mail::m_items() const {
  return m_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::GMTool_MailItem >*
GMTool_Mail::mutable_m_items() {
  return &m_items_;
}

// optional int32 m_isonline = 8;
inline bool GMTool_Mail::has_m_isonline() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GMTool_Mail::set_has_m_isonline() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GMTool_Mail::clear_has_m_isonline() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GMTool_Mail::clear_m_isonline() {
  m_isonline_ = 0;
  clear_has_m_isonline();
}
inline ::google::protobuf::int32 GMTool_Mail::m_isonline() const {
  return m_isonline_;
}
inline void GMTool_Mail::set_m_isonline(::google::protobuf::int32 value) {
  set_has_m_isonline();
  m_isonline_ = value;
}

// optional int32 m_sendtime = 9;
inline bool GMTool_Mail::has_m_sendtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GMTool_Mail::set_has_m_sendtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GMTool_Mail::clear_has_m_sendtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GMTool_Mail::clear_m_sendtime() {
  m_sendtime_ = 0;
  clear_has_m_sendtime();
}
inline ::google::protobuf::int32 GMTool_Mail::m_sendtime() const {
  return m_sendtime_;
}
inline void GMTool_Mail::set_m_sendtime(::google::protobuf::int32 value) {
  set_has_m_sendtime();
  m_sendtime_ = value;
}

// optional int32 m_gmid = 10;
inline bool GMTool_Mail::has_m_gmid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GMTool_Mail::set_has_m_gmid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GMTool_Mail::clear_has_m_gmid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GMTool_Mail::clear_m_gmid() {
  m_gmid_ = 0;
  clear_has_m_gmid();
}
inline ::google::protobuf::int32 GMTool_Mail::m_gmid() const {
  return m_gmid_;
}
inline void GMTool_Mail::set_m_gmid(::google::protobuf::int32 value) {
  set_has_m_gmid();
  m_gmid_ = value;
}

// -------------------------------------------------------------------

// GMTool_MailItem

// required int32 m_typeid = 1;
inline bool GMTool_MailItem::has_m_typeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_MailItem::set_has_m_typeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_MailItem::clear_has_m_typeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_MailItem::clear_m_typeid() {
  m_typeid_ = 0;
  clear_has_m_typeid();
}
inline ::google::protobuf::int32 GMTool_MailItem::m_typeid() const {
  return m_typeid_;
}
inline void GMTool_MailItem::set_m_typeid(::google::protobuf::int32 value) {
  set_has_m_typeid();
  m_typeid_ = value;
}

// required int32 m_num = 2;
inline bool GMTool_MailItem::has_m_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_MailItem::set_has_m_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_MailItem::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_MailItem::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 GMTool_MailItem::m_num() const {
  return m_num_;
}
inline void GMTool_MailItem::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// required int32 m_level = 3;
inline bool GMTool_MailItem::has_m_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_MailItem::set_has_m_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_MailItem::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_MailItem::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 GMTool_MailItem::m_level() const {
  return m_level_;
}
inline void GMTool_MailItem::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// -------------------------------------------------------------------

// GMTool_DynTable

// repeated bytes m_data = 1;
inline int GMTool_DynTable::m_data_size() const {
  return m_data_.size();
}
inline void GMTool_DynTable::clear_m_data() {
  m_data_.Clear();
}
inline const ::std::string& GMTool_DynTable::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::std::string* GMTool_DynTable::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline void GMTool_DynTable::set_m_data(int index, const ::std::string& value) {
  m_data_.Mutable(index)->assign(value);
}
inline void GMTool_DynTable::set_m_data(int index, const char* value) {
  m_data_.Mutable(index)->assign(value);
}
inline void GMTool_DynTable::set_m_data(int index, const void* value, size_t size) {
  m_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_DynTable::add_m_data() {
  return m_data_.Add();
}
inline void GMTool_DynTable::add_m_data(const ::std::string& value) {
  m_data_.Add()->assign(value);
}
inline void GMTool_DynTable::add_m_data(const char* value) {
  m_data_.Add()->assign(value);
}
inline void GMTool_DynTable::add_m_data(const void* value, size_t size) {
  m_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GMTool_DynTable::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GMTool_DynTable::mutable_m_data() {
  return &m_data_;
}

// optional int32 m_lastupdate = 2;
inline bool GMTool_DynTable::has_m_lastupdate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_DynTable::set_has_m_lastupdate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_DynTable::clear_has_m_lastupdate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_DynTable::clear_m_lastupdate() {
  m_lastupdate_ = 0;
  clear_has_m_lastupdate();
}
inline ::google::protobuf::int32 GMTool_DynTable::m_lastupdate() const {
  return m_lastupdate_;
}
inline void GMTool_DynTable::set_m_lastupdate(::google::protobuf::int32 value) {
  set_has_m_lastupdate();
  m_lastupdate_ = value;
}

// optional string m_tablename = 3;
inline bool GMTool_DynTable::has_m_tablename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_DynTable::set_has_m_tablename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_DynTable::clear_has_m_tablename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_DynTable::clear_m_tablename() {
  if (m_tablename_ != &::google::protobuf::internal::kEmptyString) {
    m_tablename_->clear();
  }
  clear_has_m_tablename();
}
inline const ::std::string& GMTool_DynTable::m_tablename() const {
  return *m_tablename_;
}
inline void GMTool_DynTable::set_m_tablename(const ::std::string& value) {
  set_has_m_tablename();
  if (m_tablename_ == &::google::protobuf::internal::kEmptyString) {
    m_tablename_ = new ::std::string;
  }
  m_tablename_->assign(value);
}
inline void GMTool_DynTable::set_m_tablename(const char* value) {
  set_has_m_tablename();
  if (m_tablename_ == &::google::protobuf::internal::kEmptyString) {
    m_tablename_ = new ::std::string;
  }
  m_tablename_->assign(value);
}
inline void GMTool_DynTable::set_m_tablename(const char* value, size_t size) {
  set_has_m_tablename();
  if (m_tablename_ == &::google::protobuf::internal::kEmptyString) {
    m_tablename_ = new ::std::string;
  }
  m_tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_DynTable::mutable_m_tablename() {
  set_has_m_tablename();
  if (m_tablename_ == &::google::protobuf::internal::kEmptyString) {
    m_tablename_ = new ::std::string;
  }
  return m_tablename_;
}
inline ::std::string* GMTool_DynTable::release_m_tablename() {
  clear_has_m_tablename();
  if (m_tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_tablename_;
    m_tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_DynTable::set_allocated_m_tablename(::std::string* m_tablename) {
  if (m_tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tablename_;
  }
  if (m_tablename) {
    set_has_m_tablename();
    m_tablename_ = m_tablename;
  } else {
    clear_has_m_tablename();
    m_tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_FreshTable

// required string m_table = 1;
inline bool GM_FreshTable::has_m_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_FreshTable::set_has_m_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_FreshTable::clear_has_m_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_FreshTable::clear_m_table() {
  if (m_table_ != &::google::protobuf::internal::kEmptyString) {
    m_table_->clear();
  }
  clear_has_m_table();
}
inline const ::std::string& GM_FreshTable::m_table() const {
  return *m_table_;
}
inline void GM_FreshTable::set_m_table(const ::std::string& value) {
  set_has_m_table();
  if (m_table_ == &::google::protobuf::internal::kEmptyString) {
    m_table_ = new ::std::string;
  }
  m_table_->assign(value);
}
inline void GM_FreshTable::set_m_table(const char* value) {
  set_has_m_table();
  if (m_table_ == &::google::protobuf::internal::kEmptyString) {
    m_table_ = new ::std::string;
  }
  m_table_->assign(value);
}
inline void GM_FreshTable::set_m_table(const char* value, size_t size) {
  set_has_m_table();
  if (m_table_ == &::google::protobuf::internal::kEmptyString) {
    m_table_ = new ::std::string;
  }
  m_table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_FreshTable::mutable_m_table() {
  set_has_m_table();
  if (m_table_ == &::google::protobuf::internal::kEmptyString) {
    m_table_ = new ::std::string;
  }
  return m_table_;
}
inline ::std::string* GM_FreshTable::release_m_table() {
  clear_has_m_table();
  if (m_table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_table_;
    m_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_FreshTable::set_allocated_m_table(::std::string* m_table) {
  if (m_table_ != &::google::protobuf::internal::kEmptyString) {
    delete m_table_;
  }
  if (m_table) {
    set_has_m_table();
    m_table_ = m_table;
  } else {
    clear_has_m_table();
    m_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_lastupdate = 2;
inline bool GM_FreshTable::has_m_lastupdate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_FreshTable::set_has_m_lastupdate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_FreshTable::clear_has_m_lastupdate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_FreshTable::clear_m_lastupdate() {
  m_lastupdate_ = 0;
  clear_has_m_lastupdate();
}
inline ::google::protobuf::int32 GM_FreshTable::m_lastupdate() const {
  return m_lastupdate_;
}
inline void GM_FreshTable::set_m_lastupdate(::google::protobuf::int32 value) {
  set_has_m_lastupdate();
  m_lastupdate_ = value;
}

// required int32 m_serverid = 3;
inline bool GM_FreshTable::has_m_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_FreshTable::set_has_m_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_FreshTable::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_FreshTable::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 GM_FreshTable::m_serverid() const {
  return m_serverid_;
}
inline void GM_FreshTable::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// -------------------------------------------------------------------

// GM_SealAll

// required string m_rolename = 1;
inline bool GM_SealAll::has_m_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_SealAll::set_has_m_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_SealAll::clear_has_m_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_SealAll::clear_m_rolename() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    m_rolename_->clear();
  }
  clear_has_m_rolename();
}
inline const ::std::string& GM_SealAll::m_rolename() const {
  return *m_rolename_;
}
inline void GM_SealAll::set_m_rolename(const ::std::string& value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_SealAll::set_m_rolename(const char* value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_SealAll::set_m_rolename(const char* value, size_t size) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_SealAll::mutable_m_rolename() {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  return m_rolename_;
}
inline ::std::string* GM_SealAll::release_m_rolename() {
  clear_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rolename_;
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_SealAll::set_allocated_m_rolename(::std::string* m_rolename) {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_rolename) {
    set_has_m_rolename();
    m_rolename_ = m_rolename;
  } else {
    clear_has_m_rolename();
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_serverid = 2;
inline bool GM_SealAll::has_m_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_SealAll::set_has_m_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_SealAll::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_SealAll::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 GM_SealAll::m_serverid() const {
  return m_serverid_;
}
inline void GM_SealAll::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// required int32 m_sealendtime = 3;
inline bool GM_SealAll::has_m_sealendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_SealAll::set_has_m_sealendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_SealAll::clear_has_m_sealendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_SealAll::clear_m_sealendtime() {
  m_sealendtime_ = 0;
  clear_has_m_sealendtime();
}
inline ::google::protobuf::int32 GM_SealAll::m_sealendtime() const {
  return m_sealendtime_;
}
inline void GM_SealAll::set_m_sealendtime(::google::protobuf::int32 value) {
  set_has_m_sealendtime();
  m_sealendtime_ = value;
}

// optional string m_seal_desc = 4;
inline bool GM_SealAll::has_m_seal_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_SealAll::set_has_m_seal_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_SealAll::clear_has_m_seal_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_SealAll::clear_m_seal_desc() {
  if (m_seal_desc_ != &::google::protobuf::internal::kEmptyString) {
    m_seal_desc_->clear();
  }
  clear_has_m_seal_desc();
}
inline const ::std::string& GM_SealAll::m_seal_desc() const {
  return *m_seal_desc_;
}
inline void GM_SealAll::set_m_seal_desc(const ::std::string& value) {
  set_has_m_seal_desc();
  if (m_seal_desc_ == &::google::protobuf::internal::kEmptyString) {
    m_seal_desc_ = new ::std::string;
  }
  m_seal_desc_->assign(value);
}
inline void GM_SealAll::set_m_seal_desc(const char* value) {
  set_has_m_seal_desc();
  if (m_seal_desc_ == &::google::protobuf::internal::kEmptyString) {
    m_seal_desc_ = new ::std::string;
  }
  m_seal_desc_->assign(value);
}
inline void GM_SealAll::set_m_seal_desc(const char* value, size_t size) {
  set_has_m_seal_desc();
  if (m_seal_desc_ == &::google::protobuf::internal::kEmptyString) {
    m_seal_desc_ = new ::std::string;
  }
  m_seal_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_SealAll::mutable_m_seal_desc() {
  set_has_m_seal_desc();
  if (m_seal_desc_ == &::google::protobuf::internal::kEmptyString) {
    m_seal_desc_ = new ::std::string;
  }
  return m_seal_desc_;
}
inline ::std::string* GM_SealAll::release_m_seal_desc() {
  clear_has_m_seal_desc();
  if (m_seal_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_seal_desc_;
    m_seal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_SealAll::set_allocated_m_seal_desc(::std::string* m_seal_desc) {
  if (m_seal_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_seal_desc_;
  }
  if (m_seal_desc) {
    set_has_m_seal_desc();
    m_seal_desc_ = m_seal_desc;
  } else {
    clear_has_m_seal_desc();
    m_seal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_sealtype = 5;
inline bool GM_SealAll::has_m_sealtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_SealAll::set_has_m_sealtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_SealAll::clear_has_m_sealtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_SealAll::clear_m_sealtype() {
  m_sealtype_ = 0;
  clear_has_m_sealtype();
}
inline ::google::protobuf::int32 GM_SealAll::m_sealtype() const {
  return m_sealtype_;
}
inline void GM_SealAll::set_m_sealtype(::google::protobuf::int32 value) {
  set_has_m_sealtype();
  m_sealtype_ = value;
}

// optional int32 m_accountid = 6;
inline bool GM_SealAll::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_SealAll::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_SealAll::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_SealAll::clear_m_accountid() {
  m_accountid_ = 0;
  clear_has_m_accountid();
}
inline ::google::protobuf::int32 GM_SealAll::m_accountid() const {
  return m_accountid_;
}
inline void GM_SealAll::set_m_accountid(::google::protobuf::int32 value) {
  set_has_m_accountid();
  m_accountid_ = value;
}

// optional int32 m_result = 7;
inline bool GM_SealAll::has_m_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_SealAll::set_has_m_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_SealAll::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_SealAll::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_SealAll::m_result() const {
  return m_result_;
}
inline void GM_SealAll::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// required uint32 connect = 8;
inline bool GM_SealAll::has_connect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_SealAll::set_has_connect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_SealAll::clear_has_connect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_SealAll::clear_connect() {
  connect_ = 0u;
  clear_has_connect();
}
inline ::google::protobuf::uint32 GM_SealAll::connect() const {
  return connect_;
}
inline void GM_SealAll::set_connect(::google::protobuf::uint32 value) {
  set_has_connect();
  connect_ = value;
}

// optional int32 m_roleid = 9;
inline bool GM_SealAll::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_SealAll::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_SealAll::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_SealAll::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_SealAll::m_roleid() const {
  return m_roleid_;
}
inline void GM_SealAll::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// -------------------------------------------------------------------

// GMTool_UpdateArea

// required int32 m_id = 1;
inline bool GMTool_UpdateArea::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_UpdateArea::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_UpdateArea::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_UpdateArea::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 GMTool_UpdateArea::m_id() const {
  return m_id_;
}
inline void GMTool_UpdateArea::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_state = 2;
inline bool GMTool_UpdateArea::has_m_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMTool_UpdateArea::set_has_m_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMTool_UpdateArea::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMTool_UpdateArea::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GMTool_UpdateArea::m_state() const {
  return m_state_;
}
inline void GMTool_UpdateArea::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional int32 m_flag = 3;
inline bool GMTool_UpdateArea::has_m_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMTool_UpdateArea::set_has_m_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMTool_UpdateArea::clear_has_m_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMTool_UpdateArea::clear_m_flag() {
  m_flag_ = 0;
  clear_has_m_flag();
}
inline ::google::protobuf::int32 GMTool_UpdateArea::m_flag() const {
  return m_flag_;
}
inline void GMTool_UpdateArea::set_m_flag(::google::protobuf::int32 value) {
  set_has_m_flag();
  m_flag_ = value;
}

// required int32 m_connect = 4;
inline bool GMTool_UpdateArea::has_m_connect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMTool_UpdateArea::set_has_m_connect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMTool_UpdateArea::clear_has_m_connect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMTool_UpdateArea::clear_m_connect() {
  m_connect_ = 0;
  clear_has_m_connect();
}
inline ::google::protobuf::int32 GMTool_UpdateArea::m_connect() const {
  return m_connect_;
}
inline void GMTool_UpdateArea::set_m_connect(::google::protobuf::int32 value) {
  set_has_m_connect();
  m_connect_ = value;
}

// -------------------------------------------------------------------

// GMTool_Acitveshare

// required string unionid = 1;
inline bool GMTool_Acitveshare::has_unionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMTool_Acitveshare::set_has_unionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMTool_Acitveshare::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMTool_Acitveshare::clear_unionid() {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    unionid_->clear();
  }
  clear_has_unionid();
}
inline const ::std::string& GMTool_Acitveshare::unionid() const {
  return *unionid_;
}
inline void GMTool_Acitveshare::set_unionid(const ::std::string& value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
}
inline void GMTool_Acitveshare::set_unionid(const char* value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
}
inline void GMTool_Acitveshare::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMTool_Acitveshare::mutable_unionid() {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  return unionid_;
}
inline ::std::string* GMTool_Acitveshare::release_unionid() {
  clear_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unionid_;
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMTool_Acitveshare::set_allocated_unionid(::std::string* unionid) {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    delete unionid_;
  }
  if (unionid) {
    set_has_unionid();
    unionid_ = unionid;
  } else {
    clear_has_unionid();
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fGmtool_2etxt__INCLUDED
