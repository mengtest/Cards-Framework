// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_BattleFBServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BattleFBServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginFBServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginFBServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LoginFBServerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LoginFBServerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BattleEntryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BattleEntryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ItemDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ItemDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClientBuffs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClientBuffs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClientAllBuffs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClientAllBuffs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EntryInfo_Single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EntryInfo_Single_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EnterSceneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EnterSceneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FullRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FullRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SendReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SendReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NotifyBattleEndTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NotifyBattleEndTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ActiveBigWave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ActiveBigWave_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ActiveMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ActiveMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClientNotifyDied_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClientNotifyDied_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BattleInfo_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BattleInfo_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_BattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_BattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WhiteListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WhiteListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DrawCardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DrawCardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReplacePet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReplacePet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DrawCardReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DrawCardReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NotifyHPMPChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NotifyHPMPChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LeaveBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LeaveBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_BattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_BattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_BattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_BattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMovement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMovement_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FBSweepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FBSweepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FBSweepReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FBSweepReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllPetBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllPetBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RealTime_SendPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RealTime_SendPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NotifyBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NotifyBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClientHpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClientHpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClientMpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClientMpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Notify_Specialskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Notify_Specialskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CenterBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CenterBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_TeamMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_TeamMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ClientRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ClientRelive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_majiang_role_battleresult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_majiang_role_battleresult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_majiang_battleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_majiang_battleResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle_2etxt() {
  protobuf_AddDesc_battle_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle.txt");
  GOOGLE_CHECK(file != NULL);
  GM_BattleFBServerInfo_descriptor_ = file->message_type(0);
  static const int GM_BattleFBServerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_fbserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_increidmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_playway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, m_gamecount_),
  };
  GM_BattleFBServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BattleFBServerInfo_descriptor_,
      GM_BattleFBServerInfo::default_instance_,
      GM_BattleFBServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleFBServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BattleFBServerInfo));
  GM_LoginFBServer_descriptor_ = file->message_type(1);
  static const int GM_LoginFBServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, m_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, m_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, m_reallypos_),
  };
  GM_LoginFBServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginFBServer_descriptor_,
      GM_LoginFBServer::default_instance_,
      GM_LoginFBServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginFBServer));
  GM_LoginFBServerResult_descriptor_ = file->message_type(2);
  static const int GM_LoginFBServerResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServerResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServerResult, m_battletype_),
  };
  GM_LoginFBServerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LoginFBServerResult_descriptor_,
      GM_LoginFBServerResult::default_instance_,
      GM_LoginFBServerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LoginFBServerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LoginFBServerResult));
  GM_BattleEntryInfo_descriptor_ = file->message_type(3);
  static const int GM_BattleEntryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleEntryInfo, m_isself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleEntryInfo, m_roommasterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleEntryInfo, m_character_),
  };
  GM_BattleEntryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BattleEntryInfo_descriptor_,
      GM_BattleEntryInfo::default_instance_,
      GM_BattleEntryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleEntryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleEntryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BattleEntryInfo));
  GM_ItemDrop_descriptor_ = file->message_type(4);
  static const int GM_ItemDrop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemDrop, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemDrop, m_count_),
  };
  GM_ItemDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ItemDrop_descriptor_,
      GM_ItemDrop::default_instance_,
      GM_ItemDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ItemDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ItemDrop));
  GM_SkillInfo_descriptor_ = file->message_type(5);
  static const int GM_SkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillInfo, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillInfo, m_skilllv_),
  };
  GM_SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SkillInfo_descriptor_,
      GM_SkillInfo::default_instance_,
      GM_SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SkillInfo));
  GM_RoleBaseInfo_descriptor_ = file->message_type(6);
  static const int GM_RoleBaseInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_catatertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, m_headphotourl_),
  };
  GM_RoleBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleBaseInfo_descriptor_,
      GM_RoleBaseInfo::default_instance_,
      GM_RoleBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleBaseInfo));
  GM_Buff_descriptor_ = file->message_type(7);
  static const int GM_Buff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Buff, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Buff, fromid_),
  };
  GM_Buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Buff_descriptor_,
      GM_Buff::default_instance_,
      GM_Buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Buff));
  GM_ClientBuffs_descriptor_ = file->message_type(8);
  static const int GM_ClientBuffs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientBuffs, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientBuffs, m_buffs_),
  };
  GM_ClientBuffs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClientBuffs_descriptor_,
      GM_ClientBuffs::default_instance_,
      GM_ClientBuffs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientBuffs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientBuffs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClientBuffs));
  GM_ClientAllBuffs_descriptor_ = file->message_type(9);
  static const int GM_ClientAllBuffs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientAllBuffs, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientAllBuffs, needclear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientAllBuffs, m_rolebuff_),
  };
  GM_ClientAllBuffs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClientAllBuffs_descriptor_,
      GM_ClientAllBuffs::default_instance_,
      GM_ClientAllBuffs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientAllBuffs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientAllBuffs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClientAllBuffs));
  GM_EntryInfo_Single_descriptor_ = file->message_type(10);
  static const int GM_EntryInfo_Single_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, m_roledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, m_isready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, m_totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, m_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, m_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, m_reallypos_),
  };
  GM_EntryInfo_Single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EntryInfo_Single_descriptor_,
      GM_EntryInfo_Single::default_instance_,
      GM_EntryInfo_Single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EntryInfo_Single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EntryInfo_Single));
  GM_EnterSceneInfo_descriptor_ = file->message_type(11);
  static const int GM_EnterSceneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnterSceneInfo, entryinfo_),
  };
  GM_EnterSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EnterSceneInfo_descriptor_,
      GM_EnterSceneInfo::default_instance_,
      GM_EnterSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnterSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EnterSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EnterSceneInfo));
  GM_FullRoleInfo_descriptor_ = file->message_type(12);
  static const int GM_FullRoleInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, headpotot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, roomcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, mjallnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, mjwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, zjhallnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, zjhwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, fishget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, fruitget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, headphotourl_),
  };
  GM_FullRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FullRoleInfo_descriptor_,
      GM_FullRoleInfo::default_instance_,
      GM_FullRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FullRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FullRoleInfo));
  GM_SendReady_descriptor_ = file->message_type(13);
  static const int GM_SendReady_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendReady, m_resutl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendReady, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendReady, m_fbid_),
  };
  GM_SendReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SendReady_descriptor_,
      GM_SendReady::default_instance_,
      GM_SendReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SendReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SendReady));
  GM_NotifyBattleEndTime_descriptor_ = file->message_type(14);
  static const int GM_NotifyBattleEndTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBattleEndTime, m_endtime_),
  };
  GM_NotifyBattleEndTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NotifyBattleEndTime_descriptor_,
      GM_NotifyBattleEndTime::default_instance_,
      GM_NotifyBattleEndTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBattleEndTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBattleEndTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NotifyBattleEndTime));
  GM_ActiveBigWave_descriptor_ = file->message_type(15);
  static const int GM_ActiveBigWave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveBigWave, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveBigWave, m_bigwave_),
  };
  GM_ActiveBigWave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ActiveBigWave_descriptor_,
      GM_ActiveBigWave::default_instance_,
      GM_ActiveBigWave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveBigWave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveBigWave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ActiveBigWave));
  GM_ActiveMonster_descriptor_ = file->message_type(16);
  static const int GM_ActiveMonster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveMonster, m_resutl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveMonster, monsterid_),
  };
  GM_ActiveMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ActiveMonster_descriptor_,
      GM_ActiveMonster::default_instance_,
      GM_ActiveMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActiveMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ActiveMonster));
  GM_ClientNotifyDied_descriptor_ = file->message_type(17);
  static const int GM_ClientNotifyDied_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientNotifyDied, m_battleobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientNotifyDied, m_attackobjectid_),
  };
  GM_ClientNotifyDied_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClientNotifyDied_descriptor_,
      GM_ClientNotifyDied::default_instance_,
      GM_ClientNotifyDied_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientNotifyDied, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientNotifyDied, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClientNotifyDied));
  GM_BattleInfo_Result_descriptor_ = file->message_type(18);
  static const int GM_BattleInfo_Result_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_deadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_parentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_toprank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_areanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, m_percentage_),
  };
  GM_BattleInfo_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BattleInfo_Result_descriptor_,
      GM_BattleInfo_Result::default_instance_,
      GM_BattleInfo_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleInfo_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BattleInfo_Result));
  GM_BattleResult_descriptor_ = file->message_type(19);
  static const int GM_BattleResult_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_usetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_laterrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_arenapres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_topscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_isdoubleactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_battledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, m_dropdata_),
  };
  GM_BattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BattleResult_descriptor_,
      GM_BattleResult::default_instance_,
      GM_BattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BattleResult));
  SM_BattleRequest_descriptor_ = file->message_type(20);
  static const int SM_BattleRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_incrematchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_copyailevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_fbplayway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_roomcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_playerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, m_whitelistinfo_),
  };
  SM_BattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_BattleRequest_descriptor_,
      SM_BattleRequest::default_instance_,
      SM_BattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_BattleRequest));
  GM_WhiteListInfo_descriptor_ = file->message_type(21);
  static const int GM_WhiteListInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, isself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, szmincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, szmaxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, sfmincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, sfmaxcount_),
  };
  GM_WhiteListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WhiteListInfo_descriptor_,
      GM_WhiteListInfo::default_instance_,
      GM_WhiteListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WhiteListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WhiteListInfo));
  GM_DrawCardRequest_descriptor_ = file->message_type(22);
  static const int GM_DrawCardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardRequest, m_cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardRequest, m_fbid_),
  };
  GM_DrawCardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DrawCardRequest_descriptor_,
      GM_DrawCardRequest::default_instance_,
      GM_DrawCardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DrawCardRequest));
  GM_ReplacePet_descriptor_ = file->message_type(23);
  static const int GM_ReplacePet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, m_teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, m_hp_),
  };
  GM_ReplacePet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReplacePet_descriptor_,
      GM_ReplacePet::default_instance_,
      GM_ReplacePet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReplacePet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReplacePet));
  GM_DrawCardReturn_descriptor_ = file->message_type(24);
  static const int GM_DrawCardReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardReturn, m_resul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardReturn, m_dropdata_),
  };
  GM_DrawCardReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DrawCardReturn_descriptor_,
      GM_DrawCardReturn::default_instance_,
      GM_DrawCardReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DrawCardReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DrawCardReturn));
  GM_Damage_descriptor_ = file->message_type(25);
  static const int GM_Damage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, damagerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, attackerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, damageval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, vecx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, vecy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, vecz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, damagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, isdodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, isblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, iscritical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, nowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, attackbreakdefense_),
  };
  GM_Damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Damage_descriptor_,
      GM_Damage::default_instance_,
      GM_Damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Damage));
  GM_NotifyHPMPChange_descriptor_ = file->message_type(26);
  static const int GM_NotifyHPMPChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyHPMPChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyHPMPChange, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyHPMPChange, roleid_),
  };
  GM_NotifyHPMPChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NotifyHPMPChange_descriptor_,
      GM_NotifyHPMPChange::default_instance_,
      GM_NotifyHPMPChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyHPMPChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyHPMPChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NotifyHPMPChange));
  GM_LeaveBattle_descriptor_ = file->message_type(27);
  static const int GM_LeaveBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LeaveBattle, roleid_),
  };
  GM_LeaveBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LeaveBattle_descriptor_,
      GM_LeaveBattle::default_instance_,
      GM_LeaveBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LeaveBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LeaveBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LeaveBattle));
  GM_RoleLeave_descriptor_ = file->message_type(28);
  static const int GM_RoleLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleLeave, leaveinfo_),
  };
  GM_RoleLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleLeave_descriptor_,
      GM_RoleLeave::default_instance_,
      GM_RoleLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleLeave));
  SM_BattleInfo_descriptor_ = file->message_type(29);
  static const int SM_BattleInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_remainhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_hurtval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_dienum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_fightval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_charactertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_exittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_parentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_topgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_topsocre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_bosspercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_dropdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, m_killmonsterdata_),
  };
  SM_BattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_BattleInfo_descriptor_,
      SM_BattleInfo::default_instance_,
      SM_BattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_BattleInfo));
  SM_BattleResult_descriptor_ = file->message_type(30);
  static const int SM_BattleResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, m_wincamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, m_battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, m_usetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, m_bosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, m_playerdata_),
  };
  SM_BattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_BattleResult_descriptor_,
      SM_BattleResult::default_instance_,
      SM_BattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_BattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_BattleResult));
  SyncMovement_descriptor_ = file->message_type(31);
  static const int SyncMovement_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, m_posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, m_posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, m_vecx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, m_vecz_),
  };
  SyncMovement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMovement_descriptor_,
      SyncMovement::default_instance_,
      SyncMovement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMovement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMovement));
  GM_FBSweepRequest_descriptor_ = file->message_type(32);
  static const int GM_FBSweepRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepRequest, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepRequest, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepRequest, m_repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepRequest, m_profession_),
  };
  GM_FBSweepRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FBSweepRequest_descriptor_,
      GM_FBSweepRequest::default_instance_,
      GM_FBSweepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FBSweepRequest));
  GM_FBSweepReturn_descriptor_ = file->message_type(33);
  static const int GM_FBSweepReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepReturn, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepReturn, m_sweepcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepReturn, m_dropdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepReturn, m_killmonsterdata_),
  };
  GM_FBSweepReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FBSweepReturn_descriptor_,
      GM_FBSweepReturn::default_instance_,
      GM_FBSweepReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBSweepReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FBSweepReturn));
  GM_PetBattleInfo_descriptor_ = file->message_type(34);
  static const int GM_PetBattleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetBattleInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetBattleInfo, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetBattleInfo, m_position_),
  };
  GM_PetBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetBattleInfo_descriptor_,
      GM_PetBattleInfo::default_instance_,
      GM_PetBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetBattleInfo));
  GM_AllPetBattleInfo_descriptor_ = file->message_type(35);
  static const int GM_AllPetBattleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllPetBattleInfo, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllPetBattleInfo, m_data_),
  };
  GM_AllPetBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllPetBattleInfo_descriptor_,
      GM_AllPetBattleInfo::default_instance_,
      GM_AllPetBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllPetBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllPetBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllPetBattleInfo));
  GM_RealTime_SendPoint_descriptor_ = file->message_type(36);
  static const int GM_RealTime_SendPoint_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_serialkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_attackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_diename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_bekilledid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_attackpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, m_battlepoint_),
  };
  GM_RealTime_SendPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RealTime_SendPoint_descriptor_,
      GM_RealTime_SendPoint::default_instance_,
      GM_RealTime_SendPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RealTime_SendPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RealTime_SendPoint));
  GM_NotifyBuff_descriptor_ = file->message_type(37);
  static const int GM_NotifyBuff_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, m_attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, m_buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, m_extend_),
  };
  GM_NotifyBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NotifyBuff_descriptor_,
      GM_NotifyBuff::default_instance_,
      GM_NotifyBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NotifyBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NotifyBuff));
  GM_ClientHpNotify_descriptor_ = file->message_type(38);
  static const int GM_ClientHpNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientHpNotify, m_attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientHpNotify, m_beattackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientHpNotify, m_hurtval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientHpNotify, m_hurttype_),
  };
  GM_ClientHpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClientHpNotify_descriptor_,
      GM_ClientHpNotify::default_instance_,
      GM_ClientHpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientHpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientHpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClientHpNotify));
  GM_ClientMpNotify_descriptor_ = file->message_type(39);
  static const int GM_ClientMpNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientMpNotify, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientMpNotify, m_value_),
  };
  GM_ClientMpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClientMpNotify_descriptor_,
      GM_ClientMpNotify::default_instance_,
      GM_ClientMpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientMpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientMpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClientMpNotify));
  GM_Notify_Specialskill_descriptor_ = file->message_type(40);
  static const int GM_Notify_Specialskill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_Specialskill, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_Specialskill, m_type_),
  };
  GM_Notify_Specialskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Notify_Specialskill_descriptor_,
      GM_Notify_Specialskill::default_instance_,
      GM_Notify_Specialskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_Specialskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_Specialskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Notify_Specialskill));
  GM_CenterBattle_descriptor_ = file->message_type(41);
  static const int GM_CenterBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CenterBattle, m_fbip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CenterBattle, m_rolegmid_),
  };
  GM_CenterBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CenterBattle_descriptor_,
      GM_CenterBattle::default_instance_,
      GM_CenterBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CenterBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CenterBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CenterBattle));
  SM_TeamMatchData_descriptor_ = file->message_type(42);
  static const int SM_TeamMatchData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, m_areanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, m_nleaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, m_nfbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, m_nmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, m_member_),
  };
  SM_TeamMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_TeamMatchData_descriptor_,
      SM_TeamMatchData::default_instance_,
      SM_TeamMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_TeamMatchData));
  GM_ClientRelive_descriptor_ = file->message_type(43);
  static const int GM_ClientRelive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientRelive, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientRelive, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientRelive, m_hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientRelive, m_attackpercent_),
  };
  GM_ClientRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ClientRelive_descriptor_,
      GM_ClientRelive::default_instance_,
      GM_ClientRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ClientRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ClientRelive));
  SM_majiang_role_battleresult_descriptor_ = file->message_type(44);
  static const int SM_majiang_role_battleresult_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_allgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_wingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_wintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_sjchongguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_sjbawang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_xjchongguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_xjbawang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_cartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_room_bnote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_is_blasting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_is_washedoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_left_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_chow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_pong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_exposed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_concealed_kong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_up_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_down_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_exposed_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_smile_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_mines_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_song_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, m_hu_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_player_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_rolecard_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_is_dealer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_is_discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_fill_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_compare_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_look_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_call_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_role_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_total_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, g_exit_type_),
  };
  SM_majiang_role_battleresult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_majiang_role_battleresult_descriptor_,
      SM_majiang_role_battleresult::default_instance_,
      SM_majiang_role_battleresult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_role_battleresult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_majiang_role_battleresult));
  SM_majiang_battleResult_descriptor_ = file->message_type(45);
  static const int SM_majiang_battleResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_incrematchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_ismatchovergolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_isreallyresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_playcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_roomcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_roleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, m_is_dealer_),
  };
  SM_majiang_battleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_majiang_battleResult_descriptor_,
      SM_majiang_battleResult::default_instance_,
      SM_majiang_battleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_majiang_battleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_majiang_battleResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BattleFBServerInfo_descriptor_, &GM_BattleFBServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginFBServer_descriptor_, &GM_LoginFBServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LoginFBServerResult_descriptor_, &GM_LoginFBServerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BattleEntryInfo_descriptor_, &GM_BattleEntryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ItemDrop_descriptor_, &GM_ItemDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SkillInfo_descriptor_, &GM_SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleBaseInfo_descriptor_, &GM_RoleBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Buff_descriptor_, &GM_Buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClientBuffs_descriptor_, &GM_ClientBuffs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClientAllBuffs_descriptor_, &GM_ClientAllBuffs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EntryInfo_Single_descriptor_, &GM_EntryInfo_Single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EnterSceneInfo_descriptor_, &GM_EnterSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FullRoleInfo_descriptor_, &GM_FullRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SendReady_descriptor_, &GM_SendReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NotifyBattleEndTime_descriptor_, &GM_NotifyBattleEndTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ActiveBigWave_descriptor_, &GM_ActiveBigWave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ActiveMonster_descriptor_, &GM_ActiveMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClientNotifyDied_descriptor_, &GM_ClientNotifyDied::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BattleInfo_Result_descriptor_, &GM_BattleInfo_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BattleResult_descriptor_, &GM_BattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_BattleRequest_descriptor_, &SM_BattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WhiteListInfo_descriptor_, &GM_WhiteListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DrawCardRequest_descriptor_, &GM_DrawCardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReplacePet_descriptor_, &GM_ReplacePet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DrawCardReturn_descriptor_, &GM_DrawCardReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Damage_descriptor_, &GM_Damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NotifyHPMPChange_descriptor_, &GM_NotifyHPMPChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LeaveBattle_descriptor_, &GM_LeaveBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleLeave_descriptor_, &GM_RoleLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_BattleInfo_descriptor_, &SM_BattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_BattleResult_descriptor_, &SM_BattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMovement_descriptor_, &SyncMovement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FBSweepRequest_descriptor_, &GM_FBSweepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FBSweepReturn_descriptor_, &GM_FBSweepReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetBattleInfo_descriptor_, &GM_PetBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllPetBattleInfo_descriptor_, &GM_AllPetBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RealTime_SendPoint_descriptor_, &GM_RealTime_SendPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NotifyBuff_descriptor_, &GM_NotifyBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClientHpNotify_descriptor_, &GM_ClientHpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClientMpNotify_descriptor_, &GM_ClientMpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Notify_Specialskill_descriptor_, &GM_Notify_Specialskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CenterBattle_descriptor_, &GM_CenterBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_TeamMatchData_descriptor_, &SM_TeamMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ClientRelive_descriptor_, &GM_ClientRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_majiang_role_battleresult_descriptor_, &SM_majiang_role_battleresult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_majiang_battleResult_descriptor_, &SM_majiang_battleResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle_2etxt() {
  delete GM_BattleFBServerInfo::default_instance_;
  delete GM_BattleFBServerInfo_reflection_;
  delete GM_LoginFBServer::default_instance_;
  delete GM_LoginFBServer_reflection_;
  delete GM_LoginFBServerResult::default_instance_;
  delete GM_LoginFBServerResult_reflection_;
  delete GM_BattleEntryInfo::default_instance_;
  delete GM_BattleEntryInfo_reflection_;
  delete GM_ItemDrop::default_instance_;
  delete GM_ItemDrop_reflection_;
  delete GM_SkillInfo::default_instance_;
  delete GM_SkillInfo_reflection_;
  delete GM_RoleBaseInfo::default_instance_;
  delete GM_RoleBaseInfo_reflection_;
  delete GM_Buff::default_instance_;
  delete GM_Buff_reflection_;
  delete GM_ClientBuffs::default_instance_;
  delete GM_ClientBuffs_reflection_;
  delete GM_ClientAllBuffs::default_instance_;
  delete GM_ClientAllBuffs_reflection_;
  delete GM_EntryInfo_Single::default_instance_;
  delete GM_EntryInfo_Single_reflection_;
  delete GM_EnterSceneInfo::default_instance_;
  delete GM_EnterSceneInfo_reflection_;
  delete GM_FullRoleInfo::default_instance_;
  delete GM_FullRoleInfo_reflection_;
  delete GM_SendReady::default_instance_;
  delete GM_SendReady_reflection_;
  delete GM_NotifyBattleEndTime::default_instance_;
  delete GM_NotifyBattleEndTime_reflection_;
  delete GM_ActiveBigWave::default_instance_;
  delete GM_ActiveBigWave_reflection_;
  delete GM_ActiveMonster::default_instance_;
  delete GM_ActiveMonster_reflection_;
  delete GM_ClientNotifyDied::default_instance_;
  delete GM_ClientNotifyDied_reflection_;
  delete GM_BattleInfo_Result::default_instance_;
  delete GM_BattleInfo_Result_reflection_;
  delete GM_BattleResult::default_instance_;
  delete GM_BattleResult_reflection_;
  delete SM_BattleRequest::default_instance_;
  delete SM_BattleRequest_reflection_;
  delete GM_WhiteListInfo::default_instance_;
  delete GM_WhiteListInfo_reflection_;
  delete GM_DrawCardRequest::default_instance_;
  delete GM_DrawCardRequest_reflection_;
  delete GM_ReplacePet::default_instance_;
  delete GM_ReplacePet_reflection_;
  delete GM_DrawCardReturn::default_instance_;
  delete GM_DrawCardReturn_reflection_;
  delete GM_Damage::default_instance_;
  delete GM_Damage_reflection_;
  delete GM_NotifyHPMPChange::default_instance_;
  delete GM_NotifyHPMPChange_reflection_;
  delete GM_LeaveBattle::default_instance_;
  delete GM_LeaveBattle_reflection_;
  delete GM_RoleLeave::default_instance_;
  delete GM_RoleLeave_reflection_;
  delete SM_BattleInfo::default_instance_;
  delete SM_BattleInfo_reflection_;
  delete SM_BattleResult::default_instance_;
  delete SM_BattleResult_reflection_;
  delete SyncMovement::default_instance_;
  delete SyncMovement_reflection_;
  delete GM_FBSweepRequest::default_instance_;
  delete GM_FBSweepRequest_reflection_;
  delete GM_FBSweepReturn::default_instance_;
  delete GM_FBSweepReturn_reflection_;
  delete GM_PetBattleInfo::default_instance_;
  delete GM_PetBattleInfo_reflection_;
  delete GM_AllPetBattleInfo::default_instance_;
  delete GM_AllPetBattleInfo_reflection_;
  delete GM_RealTime_SendPoint::default_instance_;
  delete GM_RealTime_SendPoint_reflection_;
  delete GM_NotifyBuff::default_instance_;
  delete GM_NotifyBuff_reflection_;
  delete GM_ClientHpNotify::default_instance_;
  delete GM_ClientHpNotify_reflection_;
  delete GM_ClientMpNotify::default_instance_;
  delete GM_ClientMpNotify_reflection_;
  delete GM_Notify_Specialskill::default_instance_;
  delete GM_Notify_Specialskill_reflection_;
  delete GM_CenterBattle::default_instance_;
  delete GM_CenterBattle_reflection_;
  delete SM_TeamMatchData::default_instance_;
  delete SM_TeamMatchData_reflection_;
  delete GM_ClientRelive::default_instance_;
  delete GM_ClientRelive_reflection_;
  delete SM_majiang_role_battleresult::default_instance_;
  delete SM_majiang_role_battleresult_reflection_;
  delete SM_majiang_battleResult::default_instance_;
  delete SM_majiang_battleResult_reflection_;
}

void protobuf_AddDesc_battle_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbattle.txt\"\272\001\n\025GM_BattleFBServerInfo\022\020"
    "\n\010m_Result\030\001 \002(\005\022\016\n\006m_FBID\030\002 \001(\005\022\024\n\014m_FB"
    "ServerID\030\003 \001(\005\022\022\n\nm_FBTypeID\030\004 \001(\005\022\026\n\016m_"
    "increidmatch\030\005 \001(\005\022\021\n\tm_playWay\030\006 \001(\t\022\025\n"
    "\rm_playerCount\030\007 \001(\005\022\023\n\013m_gameCount\030\010 \001("
    "\005\"r\n\020GM_LoginFBServer\022\020\n\010m_RoleID\030\001 \002(\005\022"
    "\016\n\006m_FBID\030\002 \001(\005\022\023\n\013m_Longitude\030\003 \001(\001\022\022\n\n"
    "m_Latitude\030\004 \001(\001\022\023\n\013m_reallyPos\030\005 \001(\t\">\n"
    "\026GM_LoginFBServerResult\022\016\n\006result\030\001 \002(\005\022"
    "\024\n\014m_battletype\030\002 \001(\005\"i\n\022GM_BattleEntryI"
    "nfo\022\020\n\010m_isSelf\030\001 \002(\010\022\026\n\016m_RoomMasterID\030"
    "\002 \001(\005\022)\n\013m_Character\030\003 \003(\0132\024.GM_EntryInf"
    "o_Single\"2\n\013GM_ItemDrop\022\022\n\nm_ObjectID\030\001 "
    "\002(\005\022\017\n\007m_Count\030\002 \001(\005\"4\n\014GM_SkillInfo\022\021\n\t"
    "m_SkillID\030\001 \002(\005\022\021\n\tm_SkillLv\030\002 \001(\005\"\346\001\n\017G"
    "M_RoleBaseInfo\022\020\n\010m_Roleid\030\001 \002(\005\022\016\n\006m_Go"
    "ld\030\002 \001(\003\022\023\n\013m_HeadPhoto\030\003 \001(\005\022\025\n\rm_Catat"
    "erType\030\004 \001(\005\022\021\n\tm_Postion\030\005 \001(\005\022\016\n\006m_Nam"
    "e\030\006 \001(\t\022\r\n\005m_Sex\030\007 \001(\005\022\022\n\nm_viplevel\030\010 \001"
    "(\005\022\023\n\013m_HeadFrame\030\t \001(\005\022\022\n\nm_NickName\030\n "
    "\001(\t\022\026\n\016m_HeadPhotoUrl\030\013 \001(\t\")\n\007GM_Buff\022\016"
    "\n\006buffid\030\001 \002(\005\022\016\n\006fromid\030\002 \001(\005\"<\n\016GM_Cli"
    "entBuffs\022\017\n\007ownerid\030\001 \002(\005\022\031\n\007m_Buffs\030\n \003"
    "(\0132\010.GM_Buff\"Z\n\021GM_ClientAllBuffs\022\r\n\005cou"
    "nt\030\001 \002(\005\022\021\n\tneedClear\030\002 \001(\005\022#\n\nm_RoleBuf"
    "f\030\n \003(\0132\017.GM_ClientBuffs\"\242\001\n\023GM_EntryInf"
    "o_Single\022$\n\nm_RoleData\030\001 \002(\0132\020.GM_RoleBa"
    "seInfo\022\021\n\tm_isReady\030\002 \001(\005\022\024\n\014m_totalScor"
    "e\030\003 \001(\005\022\023\n\013m_Longitude\030\004 \001(\001\022\022\n\nm_Latitu"
    "de\030\005 \001(\001\022\023\n\013m_reallyPos\030\006 \001(\t\"<\n\021GM_Ente"
    "rSceneInfo\022\'\n\tentryInfo\030\001 \003(\0132\024.GM_Entry"
    "Info_Single\"\343\002\n\017GM_FullRoleInfo\022\n\n\002id\030\001 "
    "\002(\005\022\014\n\004name\030\002 \001(\t\022\021\n\taccountid\030\003 \001(\005\022\013\n\003"
    "sex\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\014\n\004sign\030\006 \001(\t\022\021"
    "\n\theadpotot\030\007 \001(\005\022\r\n\005viplv\030\t \001(\005\022\014\n\004gold"
    "\030\n \001(\003\022\017\n\007diamond\030\013 \001(\003\022\020\n\010roomcard\030\014 \001("
    "\003\022\020\n\010mjAllNum\030\r \001(\005\022\020\n\010mjWinNum\030\016 \001(\005\022\021\n"
    "\tzjhAllNum\030\017 \001(\005\022\021\n\tzjhWinNum\030\020 \001(\005\022\017\n\007f"
    "ishGet\030\021 \001(\003\022\020\n\010fruitGet\030\022 \001(\003\022\021\n\theadfr"
    "ame\030\023 \001(\005\022\020\n\010nickName\030\024 \001(\t\022\024\n\014headPhoto"
    "Url\030\025 \001(\t\"B\n\014GM_SendReady\022\020\n\010m_Resutl\030\001 "
    "\002(\005\022\020\n\010m_RoleID\030\002 \001(\005\022\016\n\006m_FBID\030\003 \001(\005\"+\n"
    "\026GM_NotifyBattleEndTime\022\021\n\tm_EndTime\030\001 \002"
    "(\005\"5\n\020GM_ActiveBigWave\022\016\n\006m_FBID\030\001 \002(\005\022\021"
    "\n\tm_BigWave\030\002 \001(\005\"7\n\020GM_ActiveMonster\022\020\n"
    "\010m_resutl\030\001 \002(\005\022\021\n\tmonsterID\030\002 \003(\005\"I\n\023GM"
    "_ClientNotifyDied\022\030\n\020m_BattleObjectID\030\001 "
    "\002(\005\022\030\n\020m_AttackObjectID\030\002 \001(\005\"\203\002\n\024GM_Bat"
    "tleInfo_Result\022\020\n\010m_Result\030\001 \002(\005\022\016\n\006m_na"
    "me\030\002 \001(\t\022\017\n\007m_level\030\003 \001(\005\022\r\n\005m_val\030\004 \001(\005"
    "\022\021\n\tm_killnum\030\005 \001(\005\022\021\n\tm_deadnum\030\006 \001(\005\022\016"
    "\n\006m_hurt\030\007 \001(\005\022\020\n\010m_RoleID\030\010 \001(\005\022\017\n\007m_po"
    "int\030\t \001(\005\022\024\n\014m_parentName\030\n \001(\t\022\021\n\tm_top"
    "rank\030\013 \001(\005\022\021\n\tm_areanid\030\014 \001(\005\022\024\n\014m_perce"
    "ntage\030\r \001(\005\"\261\002\n\017GM_BattleResult\022\020\n\010m_Res"
    "ult\030\001 \002(\005\022\024\n\014m_BattleType\030\002 \001(\005\022\022\n\nm_FBT"
    "ypeID\030\003 \001(\005\022\021\n\tm_UseTime\030\004 \001(\005\022\021\n\tm_Star"
    "Num\030\005 \001(\005\022\023\n\013m_laterRank\030\007 \001(\005\022\023\n\013m_aren"
    "aPres\030\010 \001(\005\022\022\n\nm_topscore\030\n \001(\005\022\023\n\013m_err"
    "orcode\030\013 \001(\005\022\032\n\022m_isDoubleActivity\030\014 \001(\010"
    "\022+\n\014m_BattleData\030\t \003(\0132\025.GM_BattleInfo_R"
    "esult\022 \n\nm_DropData\030\006 \003(\0132\014.GM_ItemDrop\""
    "\214\002\n\020SM_BattleRequest\022\016\n\006m_FBID\030\001 \002(\005\022\022\n\n"
    "m_FBTypeID\030\002 \001(\005\022\014\n\004rate\030\003 \001(\005\022\026\n\016m_incr"
    "eMatchid\030\004 \001(\005\022\025\n\rm_copyAILevel\030\005 \001(\005\022\023\n"
    "\013m_FBPlayWay\030\006 \001(\t\022\023\n\013m_RoomCount\030\007 \001(\005\022"
    "\025\n\rm_PlayerCount\030\010 \001(\005\022*\n\014m_PlayerData\030\n"
    " \003(\0132\024.GM_EntryInfo_Single\022*\n\017m_WhiteLis"
    "tInfo\030\013 \003(\0132\021.GM_WhiteListInfo\"\202\001\n\020GM_Wh"
    "iteListInfo\022\016\n\006roleid\030\001 \002(\005\022\016\n\006isSelf\030\002 "
    "\001(\005\022\022\n\nszMinCount\030\003 \001(\005\022\022\n\nszMaxCount\030\004 "
    "\001(\005\022\022\n\nsfMinCount\030\005 \001(\005\022\022\n\nsfMaxCount\030\006 "
    "\001(\005\"6\n\022GM_DrawCardRequest\022\020\n\010m_CardID\030\001 "
    "\002(\005\022\016\n\006m_FBID\030\002 \001(\005\"b\n\rGM_ReplacePet\022\020\n\010"
    "m_roleid\030\001 \002(\005\022\016\n\006m_FBID\030\002 \001(\005\022\020\n\010m_Team"
    "ID\030\003 \001(\005\022\017\n\007m_petid\030\004 \003(\005\022\014\n\004m_hp\030\005 \003(\005\""
    "F\n\021GM_DrawCardReturn\022\017\n\007m_Resul\030\001 \002(\005\022 \n"
    "\nm_DropData\030\002 \003(\0132\014.GM_ItemDrop\"\364\001\n\tGM_D"
    "amage\022\014\n\004fbid\030\001 \002(\005\022\021\n\tdamagerId\030\002 \001(\005\022\022"
    "\n\nattackerId\030\003 \001(\005\022\021\n\tdamageVal\030\004 \001(\005\022\014\n"
    "\004vecX\030\005 \001(\002\022\014\n\004vecY\030\006 \001(\002\022\014\n\004vecZ\030\007 \001(\002\022"
    "\022\n\ndamageType\030\010 \001(\005\022\017\n\007isDodge\030\t \001(\010\022\017\n\007"
    "isBlock\030\n \001(\010\022\022\n\nisCritical\030\013 \001(\010\022\017\n\007now"
    "time\030\014 \001(\005\022\032\n\022attackBreakDefense\030\r \001(\005\"B"
    "\n\023GM_NotifyHPMPChange\022\014\n\004type\030\001 \002(\005\022\r\n\005v"
    "alue\030\002 \001(\005\022\016\n\006roleid\030\003 \001(\005\" \n\016GM_LeaveBa"
    "ttle\022\016\n\006roleID\030\002 \002(\005\"2\n\014GM_RoleLeave\022\"\n\t"
    "leaveInfo\030\001 \003(\0132\017.GM_LeaveBattle\"\273\003\n\rSM_"
    "BattleInfo\022\020\n\010m_RoleID\030\001 \002(\005\022\016\n\006m_Camp\030\002"
    " \001(\005\022\022\n\nm_RemainHP\030\003 \001(\005\022\021\n\tm_HurtVal\030\004 "
    "\001(\005\022\021\n\tm_killNum\030\005 \001(\005\022\020\n\010m_dieNum\030\006 \001(\005"
    "\022\016\n\006m_name\030\007 \001(\t\022\017\n\007m_level\030\010 \001(\005\022\022\n\nm_f"
    "ightval\030\t \001(\005\022\017\n\007m_point\030\n \001(\005\022\027\n\017m_Char"
    "acterType\030\013 \001(\005\022\022\n\nm_parentID\030\014 \001(\005\022\022\n\nm"
    "_exitType\030\r \001(\005\022\024\n\014m_parentName\030\016 \001(\t\022\022\n"
    "\nm_topgrade\030\017 \001(\005\022\022\n\nm_serverid\030\020 \001(\005\022\022\n"
    "\nm_topsocre\030\021 \001(\005\022\030\n\020m_bosspercentage\030\022 "
    "\001(\005\022 \n\nm_DropData\030\024 \003(\0132\014.GM_ItemDrop\022\'\n"
    "\021m_KillMonsterData\030\025 \003(\0132\014.GM_ItemDrop\"\231"
    "\001\n\017SM_BattleResult\022\021\n\tm_WinCamp\030\001 \002(\005\022\024\n"
    "\014m_BattleType\030\002 \001(\005\022\022\n\nm_FBTypeID\030\003 \001(\005\022"
    "\021\n\tm_UseTime\030\004 \001(\005\022\020\n\010m_BossHP\030\005 \001(\005\022$\n\014"
    "m_PlayerData\030\006 \003(\0132\016.SM_BattleInfo\"`\n\014Sy"
    "ncMovement\022\020\n\010m_roleid\030\001 \002(\005\022\016\n\006m_PosX\030\002"
    " \001(\002\022\016\n\006m_PosZ\030\003 \001(\002\022\016\n\006m_VecX\030\004 \001(\002\022\016\n\006"
    "m_VecZ\030\005 \001(\002\"_\n\021GM_FBSweepRequest\022\022\n\nm_f"
    "btypeid\030\001 \002(\005\022\016\n\006m_fbid\030\002 \001(\005\022\020\n\010m_repea"
    "t\030\003 \001(\005\022\024\n\014m_profession\030\004 \001(\005\"\207\001\n\020GM_FBS"
    "weepReturn\022\022\n\nm_fbtypeid\030\001 \002(\005\022\024\n\014m_swee"
    "pcount\030\002 \001(\005\022 \n\nm_DropData\030\003 \003(\0132\014.GM_It"
    "emDrop\022\'\n\021m_KillMonsterData\030\025 \003(\0132\014.GM_I"
    "temDrop\"J\n\020GM_PetBattleInfo\022\020\n\010m_roleID\030"
    "\001 \002(\005\022\020\n\010m_typeID\030\002 \001(\005\022\022\n\nm_position\030\003 "
    "\001(\005\"I\n\023GM_AllPetBattleInfo\022\017\n\007m_count\030\001 "
    "\002(\005\022!\n\006m_Data\030\002 \003(\0132\021.GM_PetBattleInfo\"\273"
    "\001\n\025GM_RealTime_SendPoint\022\017\n\007m_point\030\001 \002("
    "\005\022\016\n\006m_type\030\002 \001(\005\022\024\n\014m_serialkill\030\003 \001(\005\022"
    "\024\n\014m_attackname\030\004 \001(\t\022\021\n\tm_diename\030\005 \001(\t"
    "\022\024\n\014m_bekilledid\030\006 \001(\005\022\025\n\rm_attackpoint\030"
    "\007 \001(\005\022\025\n\rm_battlepoint\030\010 \001(\005\"i\n\rGM_Notif"
    "yBuff\022\020\n\010m_roleid\030\001 \002(\005\022\022\n\nm_attackid\030\002 "
    "\001(\005\022\020\n\010m_buffid\030\003 \001(\005\022\016\n\006m_time\030\004 \001(\002\022\020\n"
    "\010m_extend\030\005 \001(\005\"d\n\021GM_ClientHpNotify\022\022\n\n"
    "m_attackID\030\001 \002(\005\022\024\n\014m_beAttackID\030\002 \001(\005\022\021"
    "\n\tm_hurtVal\030\003 \001(\005\022\022\n\nm_hurtType\030\004 \001(\005\"6\n"
    "\021GM_ClientMpNotify\022\020\n\010m_roleid\030\001 \002(\005\022\017\n\007"
    "m_value\030\002 \001(\005\":\n\026GM_Notify_Specialskill\022"
    "\020\n\010m_roleid\030\001 \002(\005\022\016\n\006m_type\030\002 \001(\005\"5\n\017GM_"
    "CenterBattle\022\016\n\006m_fbIp\030\001 \002(\t\022\022\n\nm_rolegm"
    "id\030\002 \001(\005\"\212\001\n\020SM_TeamMatchData\022\021\n\tm_arean"
    "ID\030\001 \002(\005\022\023\n\013m_nleaderid\030\003 \001(\005\022\023\n\013m_nfbty"
    "peid\030\004 \001(\005\022\024\n\014m_nmembernum\030\005 \001(\005\022#\n\010m_me"
    "mber\030\024 \003(\0132\021.SM_BattleRequest\"a\n\017GM_Clie"
    "ntRelive\022\020\n\010m_roleid\030\001 \002(\005\022\016\n\006m_fbid\030\002 \001"
    "(\005\022\023\n\013m_hpPercent\030\003 \001(\005\022\027\n\017m_attackPerce"
    "nt\030\004 \001(\005\"\227\007\n\034SM_majiang_role_battleresul"
    "t\022\020\n\010m_roleid\030\001 \002(\005\022\021\n\tm_allGold\030\002 \001(\003\022\021"
    "\n\tm_winGold\030\003 \001(\003\022\023\n\013m_character\030\004 \001(\005\022\021"
    "\n\tm_winType\030\005 \001(\t\022\025\n\rm_sjChongGuan\030\006 \001(\005"
    "\022\022\n\nm_sjBaWang\030\007 \001(\005\022\025\n\rm_xjChongGuan\030\010 "
    "\001(\005\022\022\n\nm_xjBaWang\030\t \001(\005\022\021\n\tm_cartype\030\n \001"
    "(\005\022\021\n\tm_room_id\030\013 \001(\005\022\024\n\014m_room_bnote\030\014 "
    "\001(\005\022\022\n\nm_win_type\030\r \001(\005\022\025\n\rm_is_blasting"
    "\030\016 \001(\005\022\026\n\016m_is_washedoff\030\017 \001(\005\022\023\n\013m_left"
    "_card\030\020 \001(\005\022\016\n\006m_chow\030\021 \001(\005\022\016\n\006m_pong\030\022 "
    "\001(\005\022\021\n\tm_exposed\030\023 \001(\005\022\030\n\020m_concealed_ko"
    "ng\030\024 \001(\005\022\017\n\007m_patch\030\025 \001(\005\022\022\n\nm_up_score\030"
    "\026 \001(\005\022\024\n\014m_down_score\030\027 \001(\005\022\020\n\010m_result\030"
    "\030 \001(\005\022\027\n\017m_Exposed_score\030\031 \001(\005\022\025\n\rm_smil"
    "e_score\030\032 \001(\005\022\025\n\rm_mines_score\030\033 \001(\005\022\024\n\014"
    "m_song_score\030\034 \001(\005\022\022\n\nm_hu_score\030\035 \001(\005\022\023"
    "\n\013g_card_type\030\036 \001(\005\022\024\n\014g_player_num\030\037 \001("
    "\005\022\027\n\017g_rolecard_type\030  \001(\005\022\020\n\010g_is_win\030!"
    " \001(\005\022\023\n\013g_is_dealer\030\" \001(\005\022\024\n\014g_is_discar"
    "d\030# \001(\005\022\025\n\rg_fill_counts\030$ \001(\005\022\030\n\020g_comp"
    "are_counts\030% \001(\005\022\025\n\rg_look_counts\030& \001(\005\022"
    "\025\n\rg_call_counts\030\' \001(\005\022\025\n\rg_role_counts\030"
    "( \001(\005\022\026\n\016g_total_counts\030) \001(\005\022\023\n\013g_exit_"
    "type\030* \001(\005\"\233\002\n\027SM_majiang_battleResult\022\024"
    "\n\014m_BattleType\030\001 \002(\005\022\022\n\nm_FBTypeID\030\002 \001(\005"
    "\022\026\n\016m_increMatchid\030\003 \001(\005\022\033\n\023m_isMatchOve"
    "rGolden\030\004 \001(\005\022\030\n\020m_isReallyResult\030\005 \001(\005\022"
    "\023\n\013m_playcount\030\006 \001(\005\022\023\n\013m_monsterid\030\007 \001("
    "\005\022\023\n\013m_roomcount\030\010 \001(\005\0223\n\014m_roleresult\030\t"
    " \003(\0132\035.SM_majiang_role_battleresult\022\023\n\013m"
    "_is_dealer\030\n \001(\005", 6616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle.txt", &protobuf_RegisterTypes);
  GM_BattleFBServerInfo::default_instance_ = new GM_BattleFBServerInfo();
  GM_LoginFBServer::default_instance_ = new GM_LoginFBServer();
  GM_LoginFBServerResult::default_instance_ = new GM_LoginFBServerResult();
  GM_BattleEntryInfo::default_instance_ = new GM_BattleEntryInfo();
  GM_ItemDrop::default_instance_ = new GM_ItemDrop();
  GM_SkillInfo::default_instance_ = new GM_SkillInfo();
  GM_RoleBaseInfo::default_instance_ = new GM_RoleBaseInfo();
  GM_Buff::default_instance_ = new GM_Buff();
  GM_ClientBuffs::default_instance_ = new GM_ClientBuffs();
  GM_ClientAllBuffs::default_instance_ = new GM_ClientAllBuffs();
  GM_EntryInfo_Single::default_instance_ = new GM_EntryInfo_Single();
  GM_EnterSceneInfo::default_instance_ = new GM_EnterSceneInfo();
  GM_FullRoleInfo::default_instance_ = new GM_FullRoleInfo();
  GM_SendReady::default_instance_ = new GM_SendReady();
  GM_NotifyBattleEndTime::default_instance_ = new GM_NotifyBattleEndTime();
  GM_ActiveBigWave::default_instance_ = new GM_ActiveBigWave();
  GM_ActiveMonster::default_instance_ = new GM_ActiveMonster();
  GM_ClientNotifyDied::default_instance_ = new GM_ClientNotifyDied();
  GM_BattleInfo_Result::default_instance_ = new GM_BattleInfo_Result();
  GM_BattleResult::default_instance_ = new GM_BattleResult();
  SM_BattleRequest::default_instance_ = new SM_BattleRequest();
  GM_WhiteListInfo::default_instance_ = new GM_WhiteListInfo();
  GM_DrawCardRequest::default_instance_ = new GM_DrawCardRequest();
  GM_ReplacePet::default_instance_ = new GM_ReplacePet();
  GM_DrawCardReturn::default_instance_ = new GM_DrawCardReturn();
  GM_Damage::default_instance_ = new GM_Damage();
  GM_NotifyHPMPChange::default_instance_ = new GM_NotifyHPMPChange();
  GM_LeaveBattle::default_instance_ = new GM_LeaveBattle();
  GM_RoleLeave::default_instance_ = new GM_RoleLeave();
  SM_BattleInfo::default_instance_ = new SM_BattleInfo();
  SM_BattleResult::default_instance_ = new SM_BattleResult();
  SyncMovement::default_instance_ = new SyncMovement();
  GM_FBSweepRequest::default_instance_ = new GM_FBSweepRequest();
  GM_FBSweepReturn::default_instance_ = new GM_FBSweepReturn();
  GM_PetBattleInfo::default_instance_ = new GM_PetBattleInfo();
  GM_AllPetBattleInfo::default_instance_ = new GM_AllPetBattleInfo();
  GM_RealTime_SendPoint::default_instance_ = new GM_RealTime_SendPoint();
  GM_NotifyBuff::default_instance_ = new GM_NotifyBuff();
  GM_ClientHpNotify::default_instance_ = new GM_ClientHpNotify();
  GM_ClientMpNotify::default_instance_ = new GM_ClientMpNotify();
  GM_Notify_Specialskill::default_instance_ = new GM_Notify_Specialskill();
  GM_CenterBattle::default_instance_ = new GM_CenterBattle();
  SM_TeamMatchData::default_instance_ = new SM_TeamMatchData();
  GM_ClientRelive::default_instance_ = new GM_ClientRelive();
  SM_majiang_role_battleresult::default_instance_ = new SM_majiang_role_battleresult();
  SM_majiang_battleResult::default_instance_ = new SM_majiang_battleResult();
  GM_BattleFBServerInfo::default_instance_->InitAsDefaultInstance();
  GM_LoginFBServer::default_instance_->InitAsDefaultInstance();
  GM_LoginFBServerResult::default_instance_->InitAsDefaultInstance();
  GM_BattleEntryInfo::default_instance_->InitAsDefaultInstance();
  GM_ItemDrop::default_instance_->InitAsDefaultInstance();
  GM_SkillInfo::default_instance_->InitAsDefaultInstance();
  GM_RoleBaseInfo::default_instance_->InitAsDefaultInstance();
  GM_Buff::default_instance_->InitAsDefaultInstance();
  GM_ClientBuffs::default_instance_->InitAsDefaultInstance();
  GM_ClientAllBuffs::default_instance_->InitAsDefaultInstance();
  GM_EntryInfo_Single::default_instance_->InitAsDefaultInstance();
  GM_EnterSceneInfo::default_instance_->InitAsDefaultInstance();
  GM_FullRoleInfo::default_instance_->InitAsDefaultInstance();
  GM_SendReady::default_instance_->InitAsDefaultInstance();
  GM_NotifyBattleEndTime::default_instance_->InitAsDefaultInstance();
  GM_ActiveBigWave::default_instance_->InitAsDefaultInstance();
  GM_ActiveMonster::default_instance_->InitAsDefaultInstance();
  GM_ClientNotifyDied::default_instance_->InitAsDefaultInstance();
  GM_BattleInfo_Result::default_instance_->InitAsDefaultInstance();
  GM_BattleResult::default_instance_->InitAsDefaultInstance();
  SM_BattleRequest::default_instance_->InitAsDefaultInstance();
  GM_WhiteListInfo::default_instance_->InitAsDefaultInstance();
  GM_DrawCardRequest::default_instance_->InitAsDefaultInstance();
  GM_ReplacePet::default_instance_->InitAsDefaultInstance();
  GM_DrawCardReturn::default_instance_->InitAsDefaultInstance();
  GM_Damage::default_instance_->InitAsDefaultInstance();
  GM_NotifyHPMPChange::default_instance_->InitAsDefaultInstance();
  GM_LeaveBattle::default_instance_->InitAsDefaultInstance();
  GM_RoleLeave::default_instance_->InitAsDefaultInstance();
  SM_BattleInfo::default_instance_->InitAsDefaultInstance();
  SM_BattleResult::default_instance_->InitAsDefaultInstance();
  SyncMovement::default_instance_->InitAsDefaultInstance();
  GM_FBSweepRequest::default_instance_->InitAsDefaultInstance();
  GM_FBSweepReturn::default_instance_->InitAsDefaultInstance();
  GM_PetBattleInfo::default_instance_->InitAsDefaultInstance();
  GM_AllPetBattleInfo::default_instance_->InitAsDefaultInstance();
  GM_RealTime_SendPoint::default_instance_->InitAsDefaultInstance();
  GM_NotifyBuff::default_instance_->InitAsDefaultInstance();
  GM_ClientHpNotify::default_instance_->InitAsDefaultInstance();
  GM_ClientMpNotify::default_instance_->InitAsDefaultInstance();
  GM_Notify_Specialskill::default_instance_->InitAsDefaultInstance();
  GM_CenterBattle::default_instance_->InitAsDefaultInstance();
  SM_TeamMatchData::default_instance_->InitAsDefaultInstance();
  GM_ClientRelive::default_instance_->InitAsDefaultInstance();
  SM_majiang_role_battleresult::default_instance_->InitAsDefaultInstance();
  SM_majiang_battleResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle_2etxt {
  StaticDescriptorInitializer_battle_2etxt() {
    protobuf_AddDesc_battle_2etxt();
  }
} static_descriptor_initializer_battle_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_BattleFBServerInfo::kMResultFieldNumber;
const int GM_BattleFBServerInfo::kMFBIDFieldNumber;
const int GM_BattleFBServerInfo::kMFBServerIDFieldNumber;
const int GM_BattleFBServerInfo::kMFBTypeIDFieldNumber;
const int GM_BattleFBServerInfo::kMIncreidmatchFieldNumber;
const int GM_BattleFBServerInfo::kMPlayWayFieldNumber;
const int GM_BattleFBServerInfo::kMPlayerCountFieldNumber;
const int GM_BattleFBServerInfo::kMGameCountFieldNumber;
#endif  // !_MSC_VER

GM_BattleFBServerInfo::GM_BattleFBServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BattleFBServerInfo::InitAsDefaultInstance() {
}

GM_BattleFBServerInfo::GM_BattleFBServerInfo(const GM_BattleFBServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BattleFBServerInfo::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_fbid_ = 0;
  m_fbserverid_ = 0;
  m_fbtypeid_ = 0;
  m_increidmatch_ = 0;
  m_playway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_playercount_ = 0;
  m_gamecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BattleFBServerInfo::~GM_BattleFBServerInfo() {
  SharedDtor();
}

void GM_BattleFBServerInfo::SharedDtor() {
  if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playway_;
  }
  if (this != default_instance_) {
  }
}

void GM_BattleFBServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BattleFBServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BattleFBServerInfo_descriptor_;
}

const GM_BattleFBServerInfo& GM_BattleFBServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_BattleFBServerInfo* GM_BattleFBServerInfo::default_instance_ = NULL;

GM_BattleFBServerInfo* GM_BattleFBServerInfo::New() const {
  return new GM_BattleFBServerInfo;
}

void GM_BattleFBServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_fbid_ = 0;
    m_fbserverid_ = 0;
    m_fbtypeid_ = 0;
    m_increidmatch_ = 0;
    if (has_m_playway()) {
      if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
        m_playway_->clear();
      }
    }
    m_playercount_ = 0;
    m_gamecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BattleFBServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FBID;
        break;
      }

      // optional int32 m_FBID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_FBServerID;
        break;
      }

      // optional int32 m_FBServerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbserverid_)));
          set_has_m_fbserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_FBTypeID;
        break;
      }

      // optional int32 m_FBTypeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_increidmatch;
        break;
      }

      // optional int32 m_increidmatch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_increidmatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_increidmatch_)));
          set_has_m_increidmatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_playWay;
        break;
      }

      // optional string m_playWay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playWay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playway().data(), this->m_playway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_playerCount;
        break;
      }

      // optional int32 m_playerCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playercount_)));
          set_has_m_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_gameCount;
        break;
      }

      // optional int32 m_gameCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gamecount_)));
          set_has_m_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BattleFBServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // optional int32 m_FBServerID = 3;
  if (has_m_fbserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fbserverid(), output);
  }

  // optional int32 m_FBTypeID = 4;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_fbtypeid(), output);
  }

  // optional int32 m_increidmatch = 5;
  if (has_m_increidmatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_increidmatch(), output);
  }

  // optional string m_playWay = 6;
  if (has_m_playway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playway().data(), this->m_playway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_playway(), output);
  }

  // optional int32 m_playerCount = 7;
  if (has_m_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_playercount(), output);
  }

  // optional int32 m_gameCount = 8;
  if (has_m_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_gamecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BattleFBServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // optional int32 m_FBServerID = 3;
  if (has_m_fbserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fbserverid(), target);
  }

  // optional int32 m_FBTypeID = 4;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_fbtypeid(), target);
  }

  // optional int32 m_increidmatch = 5;
  if (has_m_increidmatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_increidmatch(), target);
  }

  // optional string m_playWay = 6;
  if (has_m_playway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playway().data(), this->m_playway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_playway(), target);
  }

  // optional int32 m_playerCount = 7;
  if (has_m_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_playercount(), target);
  }

  // optional int32 m_gameCount = 8;
  if (has_m_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_gamecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BattleFBServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_FBID = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional int32 m_FBServerID = 3;
    if (has_m_fbserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbserverid());
    }

    // optional int32 m_FBTypeID = 4;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 m_increidmatch = 5;
    if (has_m_increidmatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_increidmatch());
    }

    // optional string m_playWay = 6;
    if (has_m_playway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playway());
    }

    // optional int32 m_playerCount = 7;
    if (has_m_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playercount());
    }

    // optional int32 m_gameCount = 8;
    if (has_m_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gamecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BattleFBServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BattleFBServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BattleFBServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BattleFBServerInfo::MergeFrom(const GM_BattleFBServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_fbserverid()) {
      set_m_fbserverid(from.m_fbserverid());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_increidmatch()) {
      set_m_increidmatch(from.m_increidmatch());
    }
    if (from.has_m_playway()) {
      set_m_playway(from.m_playway());
    }
    if (from.has_m_playercount()) {
      set_m_playercount(from.m_playercount());
    }
    if (from.has_m_gamecount()) {
      set_m_gamecount(from.m_gamecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BattleFBServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BattleFBServerInfo::CopyFrom(const GM_BattleFBServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BattleFBServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BattleFBServerInfo::Swap(GM_BattleFBServerInfo* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_fbserverid_, other->m_fbserverid_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_increidmatch_, other->m_increidmatch_);
    std::swap(m_playway_, other->m_playway_);
    std::swap(m_playercount_, other->m_playercount_);
    std::swap(m_gamecount_, other->m_gamecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BattleFBServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BattleFBServerInfo_descriptor_;
  metadata.reflection = GM_BattleFBServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginFBServer::kMRoleIDFieldNumber;
const int GM_LoginFBServer::kMFBIDFieldNumber;
const int GM_LoginFBServer::kMLongitudeFieldNumber;
const int GM_LoginFBServer::kMLatitudeFieldNumber;
const int GM_LoginFBServer::kMReallyPosFieldNumber;
#endif  // !_MSC_VER

GM_LoginFBServer::GM_LoginFBServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginFBServer::InitAsDefaultInstance() {
}

GM_LoginFBServer::GM_LoginFBServer(const GM_LoginFBServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginFBServer::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_fbid_ = 0;
  m_longitude_ = 0;
  m_latitude_ = 0;
  m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginFBServer::~GM_LoginFBServer() {
  SharedDtor();
}

void GM_LoginFBServer::SharedDtor() {
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reallypos_;
  }
  if (this != default_instance_) {
  }
}

void GM_LoginFBServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginFBServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginFBServer_descriptor_;
}

const GM_LoginFBServer& GM_LoginFBServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_LoginFBServer* GM_LoginFBServer::default_instance_ = NULL;

GM_LoginFBServer* GM_LoginFBServer::New() const {
  return new GM_LoginFBServer;
}

void GM_LoginFBServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_fbid_ = 0;
    m_longitude_ = 0;
    m_latitude_ = 0;
    if (has_m_reallypos()) {
      if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
        m_reallypos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginFBServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FBID;
        break;
      }

      // optional int32 m_FBID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_m_Longitude;
        break;
      }

      // optional double m_Longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_Longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_longitude_)));
          set_has_m_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_m_Latitude;
        break;
      }

      // optional double m_Latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_Latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_latitude_)));
          set_has_m_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reallyPos;
        break;
      }

      // optional string m_reallyPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reallyPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_reallypos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_reallypos().data(), this->m_reallypos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginFBServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // optional double m_Longitude = 3;
  if (has_m_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->m_longitude(), output);
  }

  // optional double m_Latitude = 4;
  if (has_m_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->m_latitude(), output);
  }

  // optional string m_reallyPos = 5;
  if (has_m_reallypos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reallypos().data(), this->m_reallypos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_reallypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginFBServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // optional double m_Longitude = 3;
  if (has_m_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->m_longitude(), target);
  }

  // optional double m_Latitude = 4;
  if (has_m_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->m_latitude(), target);
  }

  // optional string m_reallyPos = 5;
  if (has_m_reallypos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reallypos().data(), this->m_reallypos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_reallypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginFBServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_FBID = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional double m_Longitude = 3;
    if (has_m_longitude()) {
      total_size += 1 + 8;
    }

    // optional double m_Latitude = 4;
    if (has_m_latitude()) {
      total_size += 1 + 8;
    }

    // optional string m_reallyPos = 5;
    if (has_m_reallypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_reallypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginFBServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginFBServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginFBServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginFBServer::MergeFrom(const GM_LoginFBServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_longitude()) {
      set_m_longitude(from.m_longitude());
    }
    if (from.has_m_latitude()) {
      set_m_latitude(from.m_latitude());
    }
    if (from.has_m_reallypos()) {
      set_m_reallypos(from.m_reallypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginFBServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginFBServer::CopyFrom(const GM_LoginFBServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginFBServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_LoginFBServer::Swap(GM_LoginFBServer* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_longitude_, other->m_longitude_);
    std::swap(m_latitude_, other->m_latitude_);
    std::swap(m_reallypos_, other->m_reallypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginFBServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginFBServer_descriptor_;
  metadata.reflection = GM_LoginFBServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LoginFBServerResult::kResultFieldNumber;
const int GM_LoginFBServerResult::kMBattletypeFieldNumber;
#endif  // !_MSC_VER

GM_LoginFBServerResult::GM_LoginFBServerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LoginFBServerResult::InitAsDefaultInstance() {
}

GM_LoginFBServerResult::GM_LoginFBServerResult(const GM_LoginFBServerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LoginFBServerResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  m_battletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LoginFBServerResult::~GM_LoginFBServerResult() {
  SharedDtor();
}

void GM_LoginFBServerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LoginFBServerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LoginFBServerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LoginFBServerResult_descriptor_;
}

const GM_LoginFBServerResult& GM_LoginFBServerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_LoginFBServerResult* GM_LoginFBServerResult::default_instance_ = NULL;

GM_LoginFBServerResult* GM_LoginFBServerResult::New() const {
  return new GM_LoginFBServerResult;
}

void GM_LoginFBServerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    m_battletype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LoginFBServerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_battletype;
        break;
      }

      // optional int32 m_battletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_battletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battletype_)));
          set_has_m_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LoginFBServerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 m_battletype = 2;
  if (has_m_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_battletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LoginFBServerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 m_battletype = 2;
  if (has_m_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_battletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LoginFBServerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 m_battletype = 2;
    if (has_m_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LoginFBServerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LoginFBServerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LoginFBServerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LoginFBServerResult::MergeFrom(const GM_LoginFBServerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_m_battletype()) {
      set_m_battletype(from.m_battletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LoginFBServerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LoginFBServerResult::CopyFrom(const GM_LoginFBServerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LoginFBServerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_LoginFBServerResult::Swap(GM_LoginFBServerResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(m_battletype_, other->m_battletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LoginFBServerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LoginFBServerResult_descriptor_;
  metadata.reflection = GM_LoginFBServerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BattleEntryInfo::kMIsSelfFieldNumber;
const int GM_BattleEntryInfo::kMRoomMasterIDFieldNumber;
const int GM_BattleEntryInfo::kMCharacterFieldNumber;
#endif  // !_MSC_VER

GM_BattleEntryInfo::GM_BattleEntryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BattleEntryInfo::InitAsDefaultInstance() {
}

GM_BattleEntryInfo::GM_BattleEntryInfo(const GM_BattleEntryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BattleEntryInfo::SharedCtor() {
  _cached_size_ = 0;
  m_isself_ = false;
  m_roommasterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BattleEntryInfo::~GM_BattleEntryInfo() {
  SharedDtor();
}

void GM_BattleEntryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BattleEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BattleEntryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BattleEntryInfo_descriptor_;
}

const GM_BattleEntryInfo& GM_BattleEntryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_BattleEntryInfo* GM_BattleEntryInfo::default_instance_ = NULL;

GM_BattleEntryInfo* GM_BattleEntryInfo::New() const {
  return new GM_BattleEntryInfo;
}

void GM_BattleEntryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_isself_ = false;
    m_roommasterid_ = 0;
  }
  m_character_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BattleEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool m_isSelf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_isself_)));
          set_has_m_isself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_RoomMasterID;
        break;
      }

      // optional int32 m_RoomMasterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoomMasterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roommasterid_)));
          set_has_m_roommasterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Character;
        break;
      }

      // repeated .GM_EntryInfo_Single m_Character = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_character()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Character;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BattleEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool m_isSelf = 1;
  if (has_m_isself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_isself(), output);
  }

  // optional int32 m_RoomMasterID = 2;
  if (has_m_roommasterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roommasterid(), output);
  }

  // repeated .GM_EntryInfo_Single m_Character = 3;
  for (int i = 0; i < this->m_character_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_character(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BattleEntryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool m_isSelf = 1;
  if (has_m_isself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_isself(), target);
  }

  // optional int32 m_RoomMasterID = 2;
  if (has_m_roommasterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roommasterid(), target);
  }

  // repeated .GM_EntryInfo_Single m_Character = 3;
  for (int i = 0; i < this->m_character_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_character(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BattleEntryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool m_isSelf = 1;
    if (has_m_isself()) {
      total_size += 1 + 1;
    }

    // optional int32 m_RoomMasterID = 2;
    if (has_m_roommasterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roommasterid());
    }

  }
  // repeated .GM_EntryInfo_Single m_Character = 3;
  total_size += 1 * this->m_character_size();
  for (int i = 0; i < this->m_character_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_character(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BattleEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BattleEntryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BattleEntryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BattleEntryInfo::MergeFrom(const GM_BattleEntryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_character_.MergeFrom(from.m_character_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_isself()) {
      set_m_isself(from.m_isself());
    }
    if (from.has_m_roommasterid()) {
      set_m_roommasterid(from.m_roommasterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BattleEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BattleEntryInfo::CopyFrom(const GM_BattleEntryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BattleEntryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_character_size(); i++) {
    if (!this->m_character(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BattleEntryInfo::Swap(GM_BattleEntryInfo* other) {
  if (other != this) {
    std::swap(m_isself_, other->m_isself_);
    std::swap(m_roommasterid_, other->m_roommasterid_);
    m_character_.Swap(&other->m_character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BattleEntryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BattleEntryInfo_descriptor_;
  metadata.reflection = GM_BattleEntryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ItemDrop::kMObjectIDFieldNumber;
const int GM_ItemDrop::kMCountFieldNumber;
#endif  // !_MSC_VER

GM_ItemDrop::GM_ItemDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ItemDrop::InitAsDefaultInstance() {
}

GM_ItemDrop::GM_ItemDrop(const GM_ItemDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ItemDrop::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ItemDrop::~GM_ItemDrop() {
  SharedDtor();
}

void GM_ItemDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ItemDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ItemDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ItemDrop_descriptor_;
}

const GM_ItemDrop& GM_ItemDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ItemDrop* GM_ItemDrop::default_instance_ = NULL;

GM_ItemDrop* GM_ItemDrop::New() const {
  return new GM_ItemDrop;
}

void GM_ItemDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ItemDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_ObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Count;
        break;
      }

      // optional int32 m_Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ItemDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_ObjectID = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_Count = 2;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ItemDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_ObjectID = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_Count = 2;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ItemDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_ObjectID = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_Count = 2;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ItemDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ItemDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ItemDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ItemDrop::MergeFrom(const GM_ItemDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ItemDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ItemDrop::CopyFrom(const GM_ItemDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ItemDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ItemDrop::Swap(GM_ItemDrop* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_count_, other->m_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ItemDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ItemDrop_descriptor_;
  metadata.reflection = GM_ItemDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SkillInfo::kMSkillIDFieldNumber;
const int GM_SkillInfo::kMSkillLvFieldNumber;
#endif  // !_MSC_VER

GM_SkillInfo::GM_SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SkillInfo::InitAsDefaultInstance() {
}

GM_SkillInfo::GM_SkillInfo(const GM_SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  m_skillid_ = 0;
  m_skilllv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SkillInfo::~GM_SkillInfo() {
  SharedDtor();
}

void GM_SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SkillInfo_descriptor_;
}

const GM_SkillInfo& GM_SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_SkillInfo* GM_SkillInfo::default_instance_ = NULL;

GM_SkillInfo* GM_SkillInfo::New() const {
  return new GM_SkillInfo;
}

void GM_SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_skillid_ = 0;
    m_skilllv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_SkillLv;
        break;
      }

      // optional int32 m_SkillLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SkillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skilllv_)));
          set_has_m_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_SkillID = 1;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_skillid(), output);
  }

  // optional int32 m_SkillLv = 2;
  if (has_m_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skilllv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_SkillID = 1;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_skillid(), target);
  }

  // optional int32 m_SkillLv = 2;
  if (has_m_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skilllv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_SkillID = 1;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_SkillLv = 2;
    if (has_m_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skilllv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SkillInfo::MergeFrom(const GM_SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_skilllv()) {
      set_m_skilllv(from.m_skilllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SkillInfo::CopyFrom(const GM_SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SkillInfo::Swap(GM_SkillInfo* other) {
  if (other != this) {
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_skilllv_, other->m_skilllv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SkillInfo_descriptor_;
  metadata.reflection = GM_SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleBaseInfo::kMRoleidFieldNumber;
const int GM_RoleBaseInfo::kMGoldFieldNumber;
const int GM_RoleBaseInfo::kMHeadPhotoFieldNumber;
const int GM_RoleBaseInfo::kMCataterTypeFieldNumber;
const int GM_RoleBaseInfo::kMPostionFieldNumber;
const int GM_RoleBaseInfo::kMNameFieldNumber;
const int GM_RoleBaseInfo::kMSexFieldNumber;
const int GM_RoleBaseInfo::kMViplevelFieldNumber;
const int GM_RoleBaseInfo::kMHeadFrameFieldNumber;
const int GM_RoleBaseInfo::kMNickNameFieldNumber;
const int GM_RoleBaseInfo::kMHeadPhotoUrlFieldNumber;
#endif  // !_MSC_VER

GM_RoleBaseInfo::GM_RoleBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleBaseInfo::InitAsDefaultInstance() {
}

GM_RoleBaseInfo::GM_RoleBaseInfo(const GM_RoleBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_gold_ = GOOGLE_LONGLONG(0);
  m_headphoto_ = 0;
  m_catatertype_ = 0;
  m_postion_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_viplevel_ = 0;
  m_headframe_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleBaseInfo::~GM_RoleBaseInfo() {
  SharedDtor();
}

void GM_RoleBaseInfo::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (this != default_instance_) {
  }
}

void GM_RoleBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleBaseInfo_descriptor_;
}

const GM_RoleBaseInfo& GM_RoleBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_RoleBaseInfo* GM_RoleBaseInfo::default_instance_ = NULL;

GM_RoleBaseInfo* GM_RoleBaseInfo::New() const {
  return new GM_RoleBaseInfo;
}

void GM_RoleBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_gold_ = GOOGLE_LONGLONG(0);
    m_headphoto_ = 0;
    m_catatertype_ = 0;
    m_postion_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_sex_ = 0;
    m_viplevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_headframe_ = 0;
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Gold;
        break;
      }

      // optional int64 m_Gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gold_)));
          set_has_m_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_HeadPhoto;
        break;
      }

      // optional int32 m_HeadPhoto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HeadPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_CataterType;
        break;
      }

      // optional int32 m_CataterType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CataterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_catatertype_)));
          set_has_m_catatertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Postion;
        break;
      }

      // optional int32 m_Postion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_postion_)));
          set_has_m_postion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_Name;
        break;
      }

      // optional string m_Name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_Sex;
        break;
      }

      // optional int32 m_Sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_HeadFrame;
        break;
      }

      // optional int32 m_HeadFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int64 m_Gold = 2;
  if (has_m_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gold(), output);
  }

  // optional int32 m_HeadPhoto = 3;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_headphoto(), output);
  }

  // optional int32 m_CataterType = 4;
  if (has_m_catatertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_catatertype(), output);
  }

  // optional int32 m_Postion = 5;
  if (has_m_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_postion(), output);
  }

  // optional string m_Name = 6;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_name(), output);
  }

  // optional int32 m_Sex = 7;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_sex(), output);
  }

  // optional int32 m_viplevel = 8;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_viplevel(), output);
  }

  // optional int32 m_HeadFrame = 9;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_headframe(), output);
  }

  // optional string m_NickName = 10;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 11;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_headphotourl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int64 m_Gold = 2;
  if (has_m_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gold(), target);
  }

  // optional int32 m_HeadPhoto = 3;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_headphoto(), target);
  }

  // optional int32 m_CataterType = 4;
  if (has_m_catatertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_catatertype(), target);
  }

  // optional int32 m_Postion = 5;
  if (has_m_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_postion(), target);
  }

  // optional string m_Name = 6;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_name(), target);
  }

  // optional int32 m_Sex = 7;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_sex(), target);
  }

  // optional int32 m_viplevel = 8;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_viplevel(), target);
  }

  // optional int32 m_HeadFrame = 9;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_headframe(), target);
  }

  // optional string m_NickName = 10;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 11;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_headphotourl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int64 m_Gold = 2;
    if (has_m_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gold());
    }

    // optional int32 m_HeadPhoto = 3;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_CataterType = 4;
    if (has_m_catatertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_catatertype());
    }

    // optional int32 m_Postion = 5;
    if (has_m_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_postion());
    }

    // optional string m_Name = 6;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_Sex = 7;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_viplevel = 8;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_HeadFrame = 9;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

    // optional string m_NickName = 10;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // optional string m_HeadPhotoUrl = 11;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleBaseInfo::MergeFrom(const GM_RoleBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_gold()) {
      set_m_gold(from.m_gold());
    }
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_catatertype()) {
      set_m_catatertype(from.m_catatertype());
    }
    if (from.has_m_postion()) {
      set_m_postion(from.m_postion());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleBaseInfo::CopyFrom(const GM_RoleBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RoleBaseInfo::Swap(GM_RoleBaseInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_gold_, other->m_gold_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_catatertype_, other->m_catatertype_);
    std::swap(m_postion_, other->m_postion_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleBaseInfo_descriptor_;
  metadata.reflection = GM_RoleBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Buff::kBuffidFieldNumber;
const int GM_Buff::kFromidFieldNumber;
#endif  // !_MSC_VER

GM_Buff::GM_Buff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Buff::InitAsDefaultInstance() {
}

GM_Buff::GM_Buff(const GM_Buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Buff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0;
  fromid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Buff::~GM_Buff() {
  SharedDtor();
}

void GM_Buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Buff_descriptor_;
}

const GM_Buff& GM_Buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_Buff* GM_Buff::default_instance_ = NULL;

GM_Buff* GM_Buff::New() const {
  return new GM_Buff;
}

void GM_Buff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0;
    fromid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromid;
        break;
      }

      // optional int32 fromid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffid(), output);
  }

  // optional int32 fromid = 2;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fromid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buffid(), target);
  }

  // optional int32 fromid = 2;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fromid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Buff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 fromid = 2;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Buff::MergeFrom(const GM_Buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Buff::CopyFrom(const GM_Buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Buff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Buff::Swap(GM_Buff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(fromid_, other->fromid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Buff_descriptor_;
  metadata.reflection = GM_Buff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClientBuffs::kOwneridFieldNumber;
const int GM_ClientBuffs::kMBuffsFieldNumber;
#endif  // !_MSC_VER

GM_ClientBuffs::GM_ClientBuffs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClientBuffs::InitAsDefaultInstance() {
}

GM_ClientBuffs::GM_ClientBuffs(const GM_ClientBuffs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClientBuffs::SharedCtor() {
  _cached_size_ = 0;
  ownerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClientBuffs::~GM_ClientBuffs() {
  SharedDtor();
}

void GM_ClientBuffs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClientBuffs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClientBuffs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClientBuffs_descriptor_;
}

const GM_ClientBuffs& GM_ClientBuffs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ClientBuffs* GM_ClientBuffs::default_instance_ = NULL;

GM_ClientBuffs* GM_ClientBuffs::New() const {
  return new GM_ClientBuffs;
}

void GM_ClientBuffs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ownerid_ = 0;
  }
  m_buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClientBuffs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ownerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_Buffs;
        break;
      }

      // repeated .GM_Buff m_Buffs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_buffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_Buffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClientBuffs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ownerid = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ownerid(), output);
  }

  // repeated .GM_Buff m_Buffs = 10;
  for (int i = 0; i < this->m_buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_buffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClientBuffs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ownerid = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ownerid(), target);
  }

  // repeated .GM_Buff m_Buffs = 10;
  for (int i = 0; i < this->m_buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_buffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClientBuffs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ownerid = 1;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  // repeated .GM_Buff m_Buffs = 10;
  total_size += 1 * this->m_buffs_size();
  for (int i = 0; i < this->m_buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClientBuffs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClientBuffs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClientBuffs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClientBuffs::MergeFrom(const GM_ClientBuffs& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_buffs_.MergeFrom(from.m_buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClientBuffs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClientBuffs::CopyFrom(const GM_ClientBuffs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClientBuffs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_buffs_size(); i++) {
    if (!this->m_buffs(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ClientBuffs::Swap(GM_ClientBuffs* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    m_buffs_.Swap(&other->m_buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClientBuffs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClientBuffs_descriptor_;
  metadata.reflection = GM_ClientBuffs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClientAllBuffs::kCountFieldNumber;
const int GM_ClientAllBuffs::kNeedClearFieldNumber;
const int GM_ClientAllBuffs::kMRoleBuffFieldNumber;
#endif  // !_MSC_VER

GM_ClientAllBuffs::GM_ClientAllBuffs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClientAllBuffs::InitAsDefaultInstance() {
}

GM_ClientAllBuffs::GM_ClientAllBuffs(const GM_ClientAllBuffs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClientAllBuffs::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  needclear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClientAllBuffs::~GM_ClientAllBuffs() {
  SharedDtor();
}

void GM_ClientAllBuffs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClientAllBuffs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClientAllBuffs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClientAllBuffs_descriptor_;
}

const GM_ClientAllBuffs& GM_ClientAllBuffs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ClientAllBuffs* GM_ClientAllBuffs::default_instance_ = NULL;

GM_ClientAllBuffs* GM_ClientAllBuffs::New() const {
  return new GM_ClientAllBuffs;
}

void GM_ClientAllBuffs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    needclear_ = 0;
  }
  m_rolebuff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClientAllBuffs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needClear;
        break;
      }

      // optional int32 needClear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needClear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needclear_)));
          set_has_needclear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_RoleBuff;
        break;
      }

      // repeated .GM_ClientBuffs m_RoleBuff = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RoleBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_rolebuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_RoleBuff;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClientAllBuffs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int32 needClear = 2;
  if (has_needclear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needclear(), output);
  }

  // repeated .GM_ClientBuffs m_RoleBuff = 10;
  for (int i = 0; i < this->m_rolebuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_rolebuff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClientAllBuffs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional int32 needClear = 2;
  if (has_needclear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needclear(), target);
  }

  // repeated .GM_ClientBuffs m_RoleBuff = 10;
  for (int i = 0; i < this->m_rolebuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_rolebuff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClientAllBuffs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 needClear = 2;
    if (has_needclear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needclear());
    }

  }
  // repeated .GM_ClientBuffs m_RoleBuff = 10;
  total_size += 1 * this->m_rolebuff_size();
  for (int i = 0; i < this->m_rolebuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_rolebuff(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClientAllBuffs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClientAllBuffs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClientAllBuffs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClientAllBuffs::MergeFrom(const GM_ClientAllBuffs& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_rolebuff_.MergeFrom(from.m_rolebuff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_needclear()) {
      set_needclear(from.needclear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClientAllBuffs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClientAllBuffs::CopyFrom(const GM_ClientAllBuffs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClientAllBuffs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_rolebuff_size(); i++) {
    if (!this->m_rolebuff(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ClientAllBuffs::Swap(GM_ClientAllBuffs* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(needclear_, other->needclear_);
    m_rolebuff_.Swap(&other->m_rolebuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClientAllBuffs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClientAllBuffs_descriptor_;
  metadata.reflection = GM_ClientAllBuffs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EntryInfo_Single::kMRoleDataFieldNumber;
const int GM_EntryInfo_Single::kMIsReadyFieldNumber;
const int GM_EntryInfo_Single::kMTotalScoreFieldNumber;
const int GM_EntryInfo_Single::kMLongitudeFieldNumber;
const int GM_EntryInfo_Single::kMLatitudeFieldNumber;
const int GM_EntryInfo_Single::kMReallyPosFieldNumber;
#endif  // !_MSC_VER

GM_EntryInfo_Single::GM_EntryInfo_Single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EntryInfo_Single::InitAsDefaultInstance() {
  m_roledata_ = const_cast< ::GM_RoleBaseInfo*>(&::GM_RoleBaseInfo::default_instance());
}

GM_EntryInfo_Single::GM_EntryInfo_Single(const GM_EntryInfo_Single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EntryInfo_Single::SharedCtor() {
  _cached_size_ = 0;
  m_roledata_ = NULL;
  m_isready_ = 0;
  m_totalscore_ = 0;
  m_longitude_ = 0;
  m_latitude_ = 0;
  m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EntryInfo_Single::~GM_EntryInfo_Single() {
  SharedDtor();
}

void GM_EntryInfo_Single::SharedDtor() {
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reallypos_;
  }
  if (this != default_instance_) {
    delete m_roledata_;
  }
}

void GM_EntryInfo_Single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EntryInfo_Single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EntryInfo_Single_descriptor_;
}

const GM_EntryInfo_Single& GM_EntryInfo_Single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_EntryInfo_Single* GM_EntryInfo_Single::default_instance_ = NULL;

GM_EntryInfo_Single* GM_EntryInfo_Single::New() const {
  return new GM_EntryInfo_Single;
}

void GM_EntryInfo_Single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_roledata()) {
      if (m_roledata_ != NULL) m_roledata_->::GM_RoleBaseInfo::Clear();
    }
    m_isready_ = 0;
    m_totalscore_ = 0;
    m_longitude_ = 0;
    m_latitude_ = 0;
    if (has_m_reallypos()) {
      if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
        m_reallypos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EntryInfo_Single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GM_RoleBaseInfo m_RoleData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_roledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_isReady;
        break;
      }

      // optional int32 m_isReady = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isready_)));
          set_has_m_isready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_totalScore;
        break;
      }

      // optional int32 m_totalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalscore_)));
          set_has_m_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_m_Longitude;
        break;
      }

      // optional double m_Longitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_Longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_longitude_)));
          set_has_m_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_m_Latitude;
        break;
      }

      // optional double m_Latitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m_Latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_latitude_)));
          set_has_m_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_reallyPos;
        break;
      }

      // optional string m_reallyPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reallyPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_reallypos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_reallypos().data(), this->m_reallypos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EntryInfo_Single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GM_RoleBaseInfo m_RoleData = 1;
  if (has_m_roledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_roledata(), output);
  }

  // optional int32 m_isReady = 2;
  if (has_m_isready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_isready(), output);
  }

  // optional int32 m_totalScore = 3;
  if (has_m_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_totalscore(), output);
  }

  // optional double m_Longitude = 4;
  if (has_m_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->m_longitude(), output);
  }

  // optional double m_Latitude = 5;
  if (has_m_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->m_latitude(), output);
  }

  // optional string m_reallyPos = 6;
  if (has_m_reallypos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reallypos().data(), this->m_reallypos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_reallypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EntryInfo_Single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GM_RoleBaseInfo m_RoleData = 1;
  if (has_m_roledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_roledata(), target);
  }

  // optional int32 m_isReady = 2;
  if (has_m_isready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_isready(), target);
  }

  // optional int32 m_totalScore = 3;
  if (has_m_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_totalscore(), target);
  }

  // optional double m_Longitude = 4;
  if (has_m_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->m_longitude(), target);
  }

  // optional double m_Latitude = 5;
  if (has_m_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->m_latitude(), target);
  }

  // optional string m_reallyPos = 6;
  if (has_m_reallypos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reallypos().data(), this->m_reallypos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_reallypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EntryInfo_Single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GM_RoleBaseInfo m_RoleData = 1;
    if (has_m_roledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_roledata());
    }

    // optional int32 m_isReady = 2;
    if (has_m_isready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isready());
    }

    // optional int32 m_totalScore = 3;
    if (has_m_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalscore());
    }

    // optional double m_Longitude = 4;
    if (has_m_longitude()) {
      total_size += 1 + 8;
    }

    // optional double m_Latitude = 5;
    if (has_m_latitude()) {
      total_size += 1 + 8;
    }

    // optional string m_reallyPos = 6;
    if (has_m_reallypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_reallypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EntryInfo_Single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EntryInfo_Single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EntryInfo_Single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EntryInfo_Single::MergeFrom(const GM_EntryInfo_Single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roledata()) {
      mutable_m_roledata()->::GM_RoleBaseInfo::MergeFrom(from.m_roledata());
    }
    if (from.has_m_isready()) {
      set_m_isready(from.m_isready());
    }
    if (from.has_m_totalscore()) {
      set_m_totalscore(from.m_totalscore());
    }
    if (from.has_m_longitude()) {
      set_m_longitude(from.m_longitude());
    }
    if (from.has_m_latitude()) {
      set_m_latitude(from.m_latitude());
    }
    if (from.has_m_reallypos()) {
      set_m_reallypos(from.m_reallypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EntryInfo_Single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EntryInfo_Single::CopyFrom(const GM_EntryInfo_Single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EntryInfo_Single::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_roledata()) {
    if (!this->m_roledata().IsInitialized()) return false;
  }
  return true;
}

void GM_EntryInfo_Single::Swap(GM_EntryInfo_Single* other) {
  if (other != this) {
    std::swap(m_roledata_, other->m_roledata_);
    std::swap(m_isready_, other->m_isready_);
    std::swap(m_totalscore_, other->m_totalscore_);
    std::swap(m_longitude_, other->m_longitude_);
    std::swap(m_latitude_, other->m_latitude_);
    std::swap(m_reallypos_, other->m_reallypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EntryInfo_Single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EntryInfo_Single_descriptor_;
  metadata.reflection = GM_EntryInfo_Single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EnterSceneInfo::kEntryInfoFieldNumber;
#endif  // !_MSC_VER

GM_EnterSceneInfo::GM_EnterSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EnterSceneInfo::InitAsDefaultInstance() {
}

GM_EnterSceneInfo::GM_EnterSceneInfo(const GM_EnterSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EnterSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EnterSceneInfo::~GM_EnterSceneInfo() {
  SharedDtor();
}

void GM_EnterSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EnterSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EnterSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EnterSceneInfo_descriptor_;
}

const GM_EnterSceneInfo& GM_EnterSceneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_EnterSceneInfo* GM_EnterSceneInfo::default_instance_ = NULL;

GM_EnterSceneInfo* GM_EnterSceneInfo::New() const {
  return new GM_EnterSceneInfo;
}

void GM_EnterSceneInfo::Clear() {
  entryinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EnterSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_EntryInfo_Single entryInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entryInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entryinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entryInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EnterSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_EntryInfo_Single entryInfo = 1;
  for (int i = 0; i < this->entryinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entryinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EnterSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_EntryInfo_Single entryInfo = 1;
  for (int i = 0; i < this->entryinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entryinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EnterSceneInfo::ByteSize() const {
  int total_size = 0;

  // repeated .GM_EntryInfo_Single entryInfo = 1;
  total_size += 1 * this->entryinfo_size();
  for (int i = 0; i < this->entryinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entryinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EnterSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EnterSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EnterSceneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EnterSceneInfo::MergeFrom(const GM_EnterSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  entryinfo_.MergeFrom(from.entryinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EnterSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EnterSceneInfo::CopyFrom(const GM_EnterSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EnterSceneInfo::IsInitialized() const {

  for (int i = 0; i < entryinfo_size(); i++) {
    if (!this->entryinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EnterSceneInfo::Swap(GM_EnterSceneInfo* other) {
  if (other != this) {
    entryinfo_.Swap(&other->entryinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EnterSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EnterSceneInfo_descriptor_;
  metadata.reflection = GM_EnterSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FullRoleInfo::kIdFieldNumber;
const int GM_FullRoleInfo::kNameFieldNumber;
const int GM_FullRoleInfo::kAccountidFieldNumber;
const int GM_FullRoleInfo::kSexFieldNumber;
const int GM_FullRoleInfo::kLevelFieldNumber;
const int GM_FullRoleInfo::kSignFieldNumber;
const int GM_FullRoleInfo::kHeadpototFieldNumber;
const int GM_FullRoleInfo::kViplvFieldNumber;
const int GM_FullRoleInfo::kGoldFieldNumber;
const int GM_FullRoleInfo::kDiamondFieldNumber;
const int GM_FullRoleInfo::kRoomcardFieldNumber;
const int GM_FullRoleInfo::kMjAllNumFieldNumber;
const int GM_FullRoleInfo::kMjWinNumFieldNumber;
const int GM_FullRoleInfo::kZjhAllNumFieldNumber;
const int GM_FullRoleInfo::kZjhWinNumFieldNumber;
const int GM_FullRoleInfo::kFishGetFieldNumber;
const int GM_FullRoleInfo::kFruitGetFieldNumber;
const int GM_FullRoleInfo::kHeadframeFieldNumber;
const int GM_FullRoleInfo::kNickNameFieldNumber;
const int GM_FullRoleInfo::kHeadPhotoUrlFieldNumber;
#endif  // !_MSC_VER

GM_FullRoleInfo::GM_FullRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FullRoleInfo::InitAsDefaultInstance() {
}

GM_FullRoleInfo::GM_FullRoleInfo(const GM_FullRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FullRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0;
  sex_ = 0;
  level_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headpotot_ = 0;
  viplv_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  diamond_ = GOOGLE_LONGLONG(0);
  roomcard_ = GOOGLE_LONGLONG(0);
  mjallnum_ = 0;
  mjwinnum_ = 0;
  zjhallnum_ = 0;
  zjhwinnum_ = 0;
  fishget_ = GOOGLE_LONGLONG(0);
  fruitget_ = GOOGLE_LONGLONG(0);
  headframe_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FullRoleInfo::~GM_FullRoleInfo() {
  SharedDtor();
}

void GM_FullRoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete headphotourl_;
  }
  if (this != default_instance_) {
  }
}

void GM_FullRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FullRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FullRoleInfo_descriptor_;
}

const GM_FullRoleInfo& GM_FullRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_FullRoleInfo* GM_FullRoleInfo::default_instance_ = NULL;

GM_FullRoleInfo* GM_FullRoleInfo::New() const {
  return new GM_FullRoleInfo;
}

void GM_FullRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    accountid_ = 0;
    sex_ = 0;
    level_ = 0;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    headpotot_ = 0;
    viplv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    diamond_ = GOOGLE_LONGLONG(0);
    roomcard_ = GOOGLE_LONGLONG(0);
    mjallnum_ = 0;
    mjwinnum_ = 0;
    zjhallnum_ = 0;
    zjhwinnum_ = 0;
    fishget_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fruitget_ = GOOGLE_LONGLONG(0);
    headframe_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_headphotourl()) {
      if (headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        headphotourl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FullRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // optional int32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional string sign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headpotot;
        break;
      }

      // optional int32 headpotot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headpotot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headpotot_)));
          set_has_headpotot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional int64 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_roomcard;
        break;
      }

      // optional int64 roomcard = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomcard_)));
          set_has_roomcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mjAllNum;
        break;
      }

      // optional int32 mjAllNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mjAllNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjallnum_)));
          set_has_mjallnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mjWinNum;
        break;
      }

      // optional int32 mjWinNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mjWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjwinnum_)));
          set_has_mjwinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_zjhAllNum;
        break;
      }

      // optional int32 zjhAllNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zjhAllNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zjhallnum_)));
          set_has_zjhallnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_zjhWinNum;
        break;
      }

      // optional int32 zjhWinNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zjhWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zjhwinnum_)));
          set_has_zjhwinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fishGet;
        break;
      }

      // optional int64 fishGet = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fishget_)));
          set_has_fishget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fruitGet;
        break;
      }

      // optional int64 fruitGet = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fruitGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fruitget_)));
          set_has_fruitget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_headframe;
        break;
      }

      // optional int32 headframe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_nickName;
        break;
      }

      // optional string nickName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_headPhotoUrl;
        break;
      }

      // optional string headPhotoUrl = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headphotourl().data(), this->headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FullRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accountid(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sign(), output);
  }

  // optional int32 headpotot = 7;
  if (has_headpotot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->headpotot(), output);
  }

  // optional int32 viplv = 9;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->viplv(), output);
  }

  // optional int64 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gold(), output);
  }

  // optional int64 diamond = 11;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->diamond(), output);
  }

  // optional int64 roomcard = 12;
  if (has_roomcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->roomcard(), output);
  }

  // optional int32 mjAllNum = 13;
  if (has_mjallnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mjallnum(), output);
  }

  // optional int32 mjWinNum = 14;
  if (has_mjwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mjwinnum(), output);
  }

  // optional int32 zjhAllNum = 15;
  if (has_zjhallnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->zjhallnum(), output);
  }

  // optional int32 zjhWinNum = 16;
  if (has_zjhwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->zjhwinnum(), output);
  }

  // optional int64 fishGet = 17;
  if (has_fishget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->fishget(), output);
  }

  // optional int64 fruitGet = 18;
  if (has_fruitget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->fruitget(), output);
  }

  // optional int32 headframe = 19;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->headframe(), output);
  }

  // optional string nickName = 20;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->nickname(), output);
  }

  // optional string headPhotoUrl = 21;
  if (has_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headphotourl().data(), this->headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->headphotourl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FullRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accountid(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }

  // optional int32 headpotot = 7;
  if (has_headpotot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->headpotot(), target);
  }

  // optional int32 viplv = 9;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->viplv(), target);
  }

  // optional int64 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gold(), target);
  }

  // optional int64 diamond = 11;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->diamond(), target);
  }

  // optional int64 roomcard = 12;
  if (has_roomcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->roomcard(), target);
  }

  // optional int32 mjAllNum = 13;
  if (has_mjallnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mjallnum(), target);
  }

  // optional int32 mjWinNum = 14;
  if (has_mjwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mjwinnum(), target);
  }

  // optional int32 zjhAllNum = 15;
  if (has_zjhallnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->zjhallnum(), target);
  }

  // optional int32 zjhWinNum = 16;
  if (has_zjhwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->zjhwinnum(), target);
  }

  // optional int64 fishGet = 17;
  if (has_fishget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->fishget(), target);
  }

  // optional int64 fruitGet = 18;
  if (has_fruitget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->fruitget(), target);
  }

  // optional int32 headframe = 19;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->headframe(), target);
  }

  // optional string nickName = 20;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->nickname(), target);
  }

  // optional string headPhotoUrl = 21;
  if (has_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headphotourl().data(), this->headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->headphotourl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FullRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional int32 headpotot = 7;
    if (has_headpotot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headpotot());
    }

    // optional int32 viplv = 9;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 diamond = 11;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 roomcard = 12;
    if (has_roomcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roomcard());
    }

    // optional int32 mjAllNum = 13;
    if (has_mjallnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjallnum());
    }

    // optional int32 mjWinNum = 14;
    if (has_mjwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjwinnum());
    }

    // optional int32 zjhAllNum = 15;
    if (has_zjhallnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zjhallnum());
    }

    // optional int32 zjhWinNum = 16;
    if (has_zjhwinnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zjhwinnum());
    }

    // optional int64 fishGet = 17;
    if (has_fishget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fishget());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 fruitGet = 18;
    if (has_fruitget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fruitget());
    }

    // optional int32 headframe = 19;
    if (has_headframe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }

    // optional string nickName = 20;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string headPhotoUrl = 21;
    if (has_headphotourl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headphotourl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FullRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FullRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FullRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FullRoleInfo::MergeFrom(const GM_FullRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_headpotot()) {
      set_headpotot(from.headpotot());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_roomcard()) {
      set_roomcard(from.roomcard());
    }
    if (from.has_mjallnum()) {
      set_mjallnum(from.mjallnum());
    }
    if (from.has_mjwinnum()) {
      set_mjwinnum(from.mjwinnum());
    }
    if (from.has_zjhallnum()) {
      set_zjhallnum(from.zjhallnum());
    }
    if (from.has_zjhwinnum()) {
      set_zjhwinnum(from.zjhwinnum());
    }
    if (from.has_fishget()) {
      set_fishget(from.fishget());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fruitget()) {
      set_fruitget(from.fruitget());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headphotourl()) {
      set_headphotourl(from.headphotourl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FullRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FullRoleInfo::CopyFrom(const GM_FullRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FullRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FullRoleInfo::Swap(GM_FullRoleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(accountid_, other->accountid_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(sign_, other->sign_);
    std::swap(headpotot_, other->headpotot_);
    std::swap(viplv_, other->viplv_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(roomcard_, other->roomcard_);
    std::swap(mjallnum_, other->mjallnum_);
    std::swap(mjwinnum_, other->mjwinnum_);
    std::swap(zjhallnum_, other->zjhallnum_);
    std::swap(zjhwinnum_, other->zjhwinnum_);
    std::swap(fishget_, other->fishget_);
    std::swap(fruitget_, other->fruitget_);
    std::swap(headframe_, other->headframe_);
    std::swap(nickname_, other->nickname_);
    std::swap(headphotourl_, other->headphotourl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FullRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FullRoleInfo_descriptor_;
  metadata.reflection = GM_FullRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SendReady::kMResutlFieldNumber;
const int GM_SendReady::kMRoleIDFieldNumber;
const int GM_SendReady::kMFBIDFieldNumber;
#endif  // !_MSC_VER

GM_SendReady::GM_SendReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SendReady::InitAsDefaultInstance() {
}

GM_SendReady::GM_SendReady(const GM_SendReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SendReady::SharedCtor() {
  _cached_size_ = 0;
  m_resutl_ = 0;
  m_roleid_ = 0;
  m_fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SendReady::~GM_SendReady() {
  SharedDtor();
}

void GM_SendReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SendReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SendReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SendReady_descriptor_;
}

const GM_SendReady& GM_SendReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_SendReady* GM_SendReady::default_instance_ = NULL;

GM_SendReady* GM_SendReady::New() const {
  return new GM_SendReady;
}

void GM_SendReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_resutl_ = 0;
    m_roleid_ = 0;
    m_fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SendReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Resutl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resutl_)));
          set_has_m_resutl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_RoleID;
        break;
      }

      // optional int32 m_RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_FBID;
        break;
      }

      // optional int32 m_FBID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SendReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Resutl = 1;
  if (has_m_resutl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_resutl(), output);
  }

  // optional int32 m_RoleID = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // optional int32 m_FBID = 3;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SendReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Resutl = 1;
  if (has_m_resutl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_resutl(), target);
  }

  // optional int32 m_RoleID = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // optional int32 m_FBID = 3;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SendReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Resutl = 1;
    if (has_m_resutl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resutl());
    }

    // optional int32 m_RoleID = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_FBID = 3;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SendReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SendReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SendReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SendReady::MergeFrom(const GM_SendReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_resutl()) {
      set_m_resutl(from.m_resutl());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SendReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SendReady::CopyFrom(const GM_SendReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SendReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SendReady::Swap(GM_SendReady* other) {
  if (other != this) {
    std::swap(m_resutl_, other->m_resutl_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SendReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SendReady_descriptor_;
  metadata.reflection = GM_SendReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NotifyBattleEndTime::kMEndTimeFieldNumber;
#endif  // !_MSC_VER

GM_NotifyBattleEndTime::GM_NotifyBattleEndTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NotifyBattleEndTime::InitAsDefaultInstance() {
}

GM_NotifyBattleEndTime::GM_NotifyBattleEndTime(const GM_NotifyBattleEndTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NotifyBattleEndTime::SharedCtor() {
  _cached_size_ = 0;
  m_endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NotifyBattleEndTime::~GM_NotifyBattleEndTime() {
  SharedDtor();
}

void GM_NotifyBattleEndTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_NotifyBattleEndTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NotifyBattleEndTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NotifyBattleEndTime_descriptor_;
}

const GM_NotifyBattleEndTime& GM_NotifyBattleEndTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_NotifyBattleEndTime* GM_NotifyBattleEndTime::default_instance_ = NULL;

GM_NotifyBattleEndTime* GM_NotifyBattleEndTime::New() const {
  return new GM_NotifyBattleEndTime;
}

void GM_NotifyBattleEndTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NotifyBattleEndTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_EndTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_endtime_)));
          set_has_m_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NotifyBattleEndTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_EndTime = 1;
  if (has_m_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NotifyBattleEndTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_EndTime = 1;
  if (has_m_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NotifyBattleEndTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_EndTime = 1;
    if (has_m_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NotifyBattleEndTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NotifyBattleEndTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NotifyBattleEndTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NotifyBattleEndTime::MergeFrom(const GM_NotifyBattleEndTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_endtime()) {
      set_m_endtime(from.m_endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NotifyBattleEndTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NotifyBattleEndTime::CopyFrom(const GM_NotifyBattleEndTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NotifyBattleEndTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_NotifyBattleEndTime::Swap(GM_NotifyBattleEndTime* other) {
  if (other != this) {
    std::swap(m_endtime_, other->m_endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NotifyBattleEndTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NotifyBattleEndTime_descriptor_;
  metadata.reflection = GM_NotifyBattleEndTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ActiveBigWave::kMFBIDFieldNumber;
const int GM_ActiveBigWave::kMBigWaveFieldNumber;
#endif  // !_MSC_VER

GM_ActiveBigWave::GM_ActiveBigWave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ActiveBigWave::InitAsDefaultInstance() {
}

GM_ActiveBigWave::GM_ActiveBigWave(const GM_ActiveBigWave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ActiveBigWave::SharedCtor() {
  _cached_size_ = 0;
  m_fbid_ = 0;
  m_bigwave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ActiveBigWave::~GM_ActiveBigWave() {
  SharedDtor();
}

void GM_ActiveBigWave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ActiveBigWave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ActiveBigWave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ActiveBigWave_descriptor_;
}

const GM_ActiveBigWave& GM_ActiveBigWave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ActiveBigWave* GM_ActiveBigWave::default_instance_ = NULL;

GM_ActiveBigWave* GM_ActiveBigWave::New() const {
  return new GM_ActiveBigWave;
}

void GM_ActiveBigWave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbid_ = 0;
    m_bigwave_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ActiveBigWave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_FBID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_BigWave;
        break;
      }

      // optional int32 m_BigWave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BigWave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bigwave_)));
          set_has_m_bigwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ActiveBigWave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_FBID = 1;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbid(), output);
  }

  // optional int32 m_BigWave = 2;
  if (has_m_bigwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_bigwave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ActiveBigWave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_FBID = 1;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbid(), target);
  }

  // optional int32 m_BigWave = 2;
  if (has_m_bigwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_bigwave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ActiveBigWave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_FBID = 1;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional int32 m_BigWave = 2;
    if (has_m_bigwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bigwave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ActiveBigWave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ActiveBigWave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ActiveBigWave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ActiveBigWave::MergeFrom(const GM_ActiveBigWave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_bigwave()) {
      set_m_bigwave(from.m_bigwave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ActiveBigWave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ActiveBigWave::CopyFrom(const GM_ActiveBigWave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ActiveBigWave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ActiveBigWave::Swap(GM_ActiveBigWave* other) {
  if (other != this) {
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_bigwave_, other->m_bigwave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ActiveBigWave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ActiveBigWave_descriptor_;
  metadata.reflection = GM_ActiveBigWave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ActiveMonster::kMResutlFieldNumber;
const int GM_ActiveMonster::kMonsterIDFieldNumber;
#endif  // !_MSC_VER

GM_ActiveMonster::GM_ActiveMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ActiveMonster::InitAsDefaultInstance() {
}

GM_ActiveMonster::GM_ActiveMonster(const GM_ActiveMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ActiveMonster::SharedCtor() {
  _cached_size_ = 0;
  m_resutl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ActiveMonster::~GM_ActiveMonster() {
  SharedDtor();
}

void GM_ActiveMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ActiveMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ActiveMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ActiveMonster_descriptor_;
}

const GM_ActiveMonster& GM_ActiveMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ActiveMonster* GM_ActiveMonster::default_instance_ = NULL;

GM_ActiveMonster* GM_ActiveMonster::New() const {
  return new GM_ActiveMonster;
}

void GM_ActiveMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_resutl_ = 0;
  }
  monsterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ActiveMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_resutl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resutl_)));
          set_has_m_resutl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterID;
        break;
      }

      // repeated int32 monsterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_monsterid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monsterid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ActiveMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_resutl = 1;
  if (has_m_resutl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_resutl(), output);
  }

  // repeated int32 monsterID = 2;
  for (int i = 0; i < this->monsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->monsterid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ActiveMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_resutl = 1;
  if (has_m_resutl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_resutl(), target);
  }

  // repeated int32 monsterID = 2;
  for (int i = 0; i < this->monsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->monsterid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ActiveMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_resutl = 1;
    if (has_m_resutl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resutl());
    }

  }
  // repeated int32 monsterID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monsterid(i));
    }
    total_size += 1 * this->monsterid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ActiveMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ActiveMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ActiveMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ActiveMonster::MergeFrom(const GM_ActiveMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterid_.MergeFrom(from.monsterid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_resutl()) {
      set_m_resutl(from.m_resutl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ActiveMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ActiveMonster::CopyFrom(const GM_ActiveMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ActiveMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ActiveMonster::Swap(GM_ActiveMonster* other) {
  if (other != this) {
    std::swap(m_resutl_, other->m_resutl_);
    monsterid_.Swap(&other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ActiveMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ActiveMonster_descriptor_;
  metadata.reflection = GM_ActiveMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClientNotifyDied::kMBattleObjectIDFieldNumber;
const int GM_ClientNotifyDied::kMAttackObjectIDFieldNumber;
#endif  // !_MSC_VER

GM_ClientNotifyDied::GM_ClientNotifyDied()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClientNotifyDied::InitAsDefaultInstance() {
}

GM_ClientNotifyDied::GM_ClientNotifyDied(const GM_ClientNotifyDied& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClientNotifyDied::SharedCtor() {
  _cached_size_ = 0;
  m_battleobjectid_ = 0;
  m_attackobjectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClientNotifyDied::~GM_ClientNotifyDied() {
  SharedDtor();
}

void GM_ClientNotifyDied::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClientNotifyDied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClientNotifyDied::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClientNotifyDied_descriptor_;
}

const GM_ClientNotifyDied& GM_ClientNotifyDied::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ClientNotifyDied* GM_ClientNotifyDied::default_instance_ = NULL;

GM_ClientNotifyDied* GM_ClientNotifyDied::New() const {
  return new GM_ClientNotifyDied;
}

void GM_ClientNotifyDied::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_battleobjectid_ = 0;
    m_attackobjectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClientNotifyDied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_BattleObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battleobjectid_)));
          set_has_m_battleobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_AttackObjectID;
        break;
      }

      // optional int32 m_AttackObjectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_AttackObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attackobjectid_)));
          set_has_m_attackobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClientNotifyDied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_BattleObjectID = 1;
  if (has_m_battleobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_battleobjectid(), output);
  }

  // optional int32 m_AttackObjectID = 2;
  if (has_m_attackobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_attackobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClientNotifyDied::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_BattleObjectID = 1;
  if (has_m_battleobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_battleobjectid(), target);
  }

  // optional int32 m_AttackObjectID = 2;
  if (has_m_attackobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_attackobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClientNotifyDied::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_BattleObjectID = 1;
    if (has_m_battleobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battleobjectid());
    }

    // optional int32 m_AttackObjectID = 2;
    if (has_m_attackobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attackobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClientNotifyDied::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClientNotifyDied* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClientNotifyDied*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClientNotifyDied::MergeFrom(const GM_ClientNotifyDied& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_battleobjectid()) {
      set_m_battleobjectid(from.m_battleobjectid());
    }
    if (from.has_m_attackobjectid()) {
      set_m_attackobjectid(from.m_attackobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClientNotifyDied::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClientNotifyDied::CopyFrom(const GM_ClientNotifyDied& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClientNotifyDied::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ClientNotifyDied::Swap(GM_ClientNotifyDied* other) {
  if (other != this) {
    std::swap(m_battleobjectid_, other->m_battleobjectid_);
    std::swap(m_attackobjectid_, other->m_attackobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClientNotifyDied::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClientNotifyDied_descriptor_;
  metadata.reflection = GM_ClientNotifyDied_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BattleInfo_Result::kMResultFieldNumber;
const int GM_BattleInfo_Result::kMNameFieldNumber;
const int GM_BattleInfo_Result::kMLevelFieldNumber;
const int GM_BattleInfo_Result::kMValFieldNumber;
const int GM_BattleInfo_Result::kMKillnumFieldNumber;
const int GM_BattleInfo_Result::kMDeadnumFieldNumber;
const int GM_BattleInfo_Result::kMHurtFieldNumber;
const int GM_BattleInfo_Result::kMRoleIDFieldNumber;
const int GM_BattleInfo_Result::kMPointFieldNumber;
const int GM_BattleInfo_Result::kMParentNameFieldNumber;
const int GM_BattleInfo_Result::kMToprankFieldNumber;
const int GM_BattleInfo_Result::kMAreanidFieldNumber;
const int GM_BattleInfo_Result::kMPercentageFieldNumber;
#endif  // !_MSC_VER

GM_BattleInfo_Result::GM_BattleInfo_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BattleInfo_Result::InitAsDefaultInstance() {
}

GM_BattleInfo_Result::GM_BattleInfo_Result(const GM_BattleInfo_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BattleInfo_Result::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_level_ = 0;
  m_val_ = 0;
  m_killnum_ = 0;
  m_deadnum_ = 0;
  m_hurt_ = 0;
  m_roleid_ = 0;
  m_point_ = 0;
  m_parentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_toprank_ = 0;
  m_areanid_ = 0;
  m_percentage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BattleInfo_Result::~GM_BattleInfo_Result() {
  SharedDtor();
}

void GM_BattleInfo_Result::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parentname_;
  }
  if (this != default_instance_) {
  }
}

void GM_BattleInfo_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BattleInfo_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BattleInfo_Result_descriptor_;
}

const GM_BattleInfo_Result& GM_BattleInfo_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_BattleInfo_Result* GM_BattleInfo_Result::default_instance_ = NULL;

GM_BattleInfo_Result* GM_BattleInfo_Result::New() const {
  return new GM_BattleInfo_Result;
}

void GM_BattleInfo_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_level_ = 0;
    m_val_ = 0;
    m_killnum_ = 0;
    m_deadnum_ = 0;
    m_hurt_ = 0;
    m_roleid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_point_ = 0;
    if (has_m_parentname()) {
      if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
        m_parentname_->clear();
      }
    }
    m_toprank_ = 0;
    m_areanid_ = 0;
    m_percentage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BattleInfo_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_val;
        break;
      }

      // optional int32 m_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_val_)));
          set_has_m_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_killnum;
        break;
      }

      // optional int32 m_killnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killnum_)));
          set_has_m_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_deadnum;
        break;
      }

      // optional int32 m_deadnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_deadnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_deadnum_)));
          set_has_m_deadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_hurt;
        break;
      }

      // optional int32 m_hurt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hurt_)));
          set_has_m_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_RoleID;
        break;
      }

      // optional int32 m_RoleID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_point;
        break;
      }

      // optional int32 m_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_parentName;
        break;
      }

      // optional string m_parentName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_parentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_parentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_parentname().data(), this->m_parentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_toprank;
        break;
      }

      // optional int32 m_toprank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_toprank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toprank_)));
          set_has_m_toprank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_areanid;
        break;
      }

      // optional int32 m_areanid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_areanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areanid_)));
          set_has_m_areanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_percentage;
        break;
      }

      // optional int32 m_percentage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_percentage_)));
          set_has_m_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BattleInfo_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  // optional int32 m_val = 4;
  if (has_m_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_val(), output);
  }

  // optional int32 m_killnum = 5;
  if (has_m_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_killnum(), output);
  }

  // optional int32 m_deadnum = 6;
  if (has_m_deadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_deadnum(), output);
  }

  // optional int32 m_hurt = 7;
  if (has_m_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_hurt(), output);
  }

  // optional int32 m_RoleID = 8;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_roleid(), output);
  }

  // optional int32 m_point = 9;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_point(), output);
  }

  // optional string m_parentName = 10;
  if (has_m_parentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parentname().data(), this->m_parentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_parentname(), output);
  }

  // optional int32 m_toprank = 11;
  if (has_m_toprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_toprank(), output);
  }

  // optional int32 m_areanid = 12;
  if (has_m_areanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_areanid(), output);
  }

  // optional int32 m_percentage = 13;
  if (has_m_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_percentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BattleInfo_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  // optional int32 m_val = 4;
  if (has_m_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_val(), target);
  }

  // optional int32 m_killnum = 5;
  if (has_m_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_killnum(), target);
  }

  // optional int32 m_deadnum = 6;
  if (has_m_deadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_deadnum(), target);
  }

  // optional int32 m_hurt = 7;
  if (has_m_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_hurt(), target);
  }

  // optional int32 m_RoleID = 8;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_roleid(), target);
  }

  // optional int32 m_point = 9;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_point(), target);
  }

  // optional string m_parentName = 10;
  if (has_m_parentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parentname().data(), this->m_parentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_parentname(), target);
  }

  // optional int32 m_toprank = 11;
  if (has_m_toprank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_toprank(), target);
  }

  // optional int32 m_areanid = 12;
  if (has_m_areanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_areanid(), target);
  }

  // optional int32 m_percentage = 13;
  if (has_m_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_percentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BattleInfo_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_val = 4;
    if (has_m_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_val());
    }

    // optional int32 m_killnum = 5;
    if (has_m_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killnum());
    }

    // optional int32 m_deadnum = 6;
    if (has_m_deadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_deadnum());
    }

    // optional int32 m_hurt = 7;
    if (has_m_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hurt());
    }

    // optional int32 m_RoleID = 8;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_point = 9;
    if (has_m_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

    // optional string m_parentName = 10;
    if (has_m_parentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_parentname());
    }

    // optional int32 m_toprank = 11;
    if (has_m_toprank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toprank());
    }

    // optional int32 m_areanid = 12;
    if (has_m_areanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areanid());
    }

    // optional int32 m_percentage = 13;
    if (has_m_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_percentage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BattleInfo_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BattleInfo_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BattleInfo_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BattleInfo_Result::MergeFrom(const GM_BattleInfo_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_val()) {
      set_m_val(from.m_val());
    }
    if (from.has_m_killnum()) {
      set_m_killnum(from.m_killnum());
    }
    if (from.has_m_deadnum()) {
      set_m_deadnum(from.m_deadnum());
    }
    if (from.has_m_hurt()) {
      set_m_hurt(from.m_hurt());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
    if (from.has_m_parentname()) {
      set_m_parentname(from.m_parentname());
    }
    if (from.has_m_toprank()) {
      set_m_toprank(from.m_toprank());
    }
    if (from.has_m_areanid()) {
      set_m_areanid(from.m_areanid());
    }
    if (from.has_m_percentage()) {
      set_m_percentage(from.m_percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BattleInfo_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BattleInfo_Result::CopyFrom(const GM_BattleInfo_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BattleInfo_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_BattleInfo_Result::Swap(GM_BattleInfo_Result* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_val_, other->m_val_);
    std::swap(m_killnum_, other->m_killnum_);
    std::swap(m_deadnum_, other->m_deadnum_);
    std::swap(m_hurt_, other->m_hurt_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_point_, other->m_point_);
    std::swap(m_parentname_, other->m_parentname_);
    std::swap(m_toprank_, other->m_toprank_);
    std::swap(m_areanid_, other->m_areanid_);
    std::swap(m_percentage_, other->m_percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BattleInfo_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BattleInfo_Result_descriptor_;
  metadata.reflection = GM_BattleInfo_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BattleResult::kMResultFieldNumber;
const int GM_BattleResult::kMBattleTypeFieldNumber;
const int GM_BattleResult::kMFBTypeIDFieldNumber;
const int GM_BattleResult::kMUseTimeFieldNumber;
const int GM_BattleResult::kMStarNumFieldNumber;
const int GM_BattleResult::kMLaterRankFieldNumber;
const int GM_BattleResult::kMArenaPresFieldNumber;
const int GM_BattleResult::kMTopscoreFieldNumber;
const int GM_BattleResult::kMErrorcodeFieldNumber;
const int GM_BattleResult::kMIsDoubleActivityFieldNumber;
const int GM_BattleResult::kMBattleDataFieldNumber;
const int GM_BattleResult::kMDropDataFieldNumber;
#endif  // !_MSC_VER

GM_BattleResult::GM_BattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BattleResult::InitAsDefaultInstance() {
}

GM_BattleResult::GM_BattleResult(const GM_BattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BattleResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_battletype_ = 0;
  m_fbtypeid_ = 0;
  m_usetime_ = 0;
  m_starnum_ = 0;
  m_laterrank_ = 0;
  m_arenapres_ = 0;
  m_topscore_ = 0;
  m_errorcode_ = 0;
  m_isdoubleactivity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BattleResult::~GM_BattleResult() {
  SharedDtor();
}

void GM_BattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BattleResult_descriptor_;
}

const GM_BattleResult& GM_BattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_BattleResult* GM_BattleResult::default_instance_ = NULL;

GM_BattleResult* GM_BattleResult::New() const {
  return new GM_BattleResult;
}

void GM_BattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_battletype_ = 0;
    m_fbtypeid_ = 0;
    m_usetime_ = 0;
    m_starnum_ = 0;
    m_laterrank_ = 0;
    m_arenapres_ = 0;
    m_topscore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_errorcode_ = 0;
    m_isdoubleactivity_ = false;
  }
  m_battledata_.Clear();
  m_dropdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_BattleType;
        break;
      }

      // optional int32 m_BattleType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battletype_)));
          set_has_m_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_FBTypeID;
        break;
      }

      // optional int32 m_FBTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_UseTime;
        break;
      }

      // optional int32 m_UseTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_usetime_)));
          set_has_m_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_StarNum;
        break;
      }

      // optional int32 m_StarNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_StarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starnum_)));
          set_has_m_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_DropData;
        break;
      }

      // repeated .GM_ItemDrop m_DropData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_DropData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_dropdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_DropData;
        if (input->ExpectTag(56)) goto parse_m_laterRank;
        break;
      }

      // optional int32 m_laterRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_laterRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_laterrank_)));
          set_has_m_laterrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_arenaPres;
        break;
      }

      // optional int32 m_arenaPres = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arenaPres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_arenapres_)));
          set_has_m_arenapres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_BattleData;
        break;
      }

      // repeated .GM_BattleInfo_Result m_BattleData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_BattleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_battledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_BattleData;
        if (input->ExpectTag(80)) goto parse_m_topscore;
        break;
      }

      // optional int32 m_topscore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_topscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_topscore_)));
          set_has_m_topscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_errorcode;
        break;
      }

      // optional int32 m_errorcode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_errorcode_)));
          set_has_m_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_isDoubleActivity;
        break;
      }

      // optional bool m_isDoubleActivity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isDoubleActivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_isdoubleactivity_)));
          set_has_m_isdoubleactivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_BattleType = 2;
  if (has_m_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_battletype(), output);
  }

  // optional int32 m_FBTypeID = 3;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fbtypeid(), output);
  }

  // optional int32 m_UseTime = 4;
  if (has_m_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_usetime(), output);
  }

  // optional int32 m_StarNum = 5;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_starnum(), output);
  }

  // repeated .GM_ItemDrop m_DropData = 6;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_dropdata(i), output);
  }

  // optional int32 m_laterRank = 7;
  if (has_m_laterrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_laterrank(), output);
  }

  // optional int32 m_arenaPres = 8;
  if (has_m_arenapres()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_arenapres(), output);
  }

  // repeated .GM_BattleInfo_Result m_BattleData = 9;
  for (int i = 0; i < this->m_battledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_battledata(i), output);
  }

  // optional int32 m_topscore = 10;
  if (has_m_topscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_topscore(), output);
  }

  // optional int32 m_errorcode = 11;
  if (has_m_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_errorcode(), output);
  }

  // optional bool m_isDoubleActivity = 12;
  if (has_m_isdoubleactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->m_isdoubleactivity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_BattleType = 2;
  if (has_m_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_battletype(), target);
  }

  // optional int32 m_FBTypeID = 3;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fbtypeid(), target);
  }

  // optional int32 m_UseTime = 4;
  if (has_m_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_usetime(), target);
  }

  // optional int32 m_StarNum = 5;
  if (has_m_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_starnum(), target);
  }

  // repeated .GM_ItemDrop m_DropData = 6;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_dropdata(i), target);
  }

  // optional int32 m_laterRank = 7;
  if (has_m_laterrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_laterrank(), target);
  }

  // optional int32 m_arenaPres = 8;
  if (has_m_arenapres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_arenapres(), target);
  }

  // repeated .GM_BattleInfo_Result m_BattleData = 9;
  for (int i = 0; i < this->m_battledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_battledata(i), target);
  }

  // optional int32 m_topscore = 10;
  if (has_m_topscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_topscore(), target);
  }

  // optional int32 m_errorcode = 11;
  if (has_m_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_errorcode(), target);
  }

  // optional bool m_isDoubleActivity = 12;
  if (has_m_isdoubleactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->m_isdoubleactivity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_BattleType = 2;
    if (has_m_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battletype());
    }

    // optional int32 m_FBTypeID = 3;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 m_UseTime = 4;
    if (has_m_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_usetime());
    }

    // optional int32 m_StarNum = 5;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starnum());
    }

    // optional int32 m_laterRank = 7;
    if (has_m_laterrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_laterrank());
    }

    // optional int32 m_arenaPres = 8;
    if (has_m_arenapres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_arenapres());
    }

    // optional int32 m_topscore = 10;
    if (has_m_topscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_topscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_errorcode = 11;
    if (has_m_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_errorcode());
    }

    // optional bool m_isDoubleActivity = 12;
    if (has_m_isdoubleactivity()) {
      total_size += 1 + 1;
    }

  }
  // repeated .GM_BattleInfo_Result m_BattleData = 9;
  total_size += 1 * this->m_battledata_size();
  for (int i = 0; i < this->m_battledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_battledata(i));
  }

  // repeated .GM_ItemDrop m_DropData = 6;
  total_size += 1 * this->m_dropdata_size();
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_dropdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BattleResult::MergeFrom(const GM_BattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_battledata_.MergeFrom(from.m_battledata_);
  m_dropdata_.MergeFrom(from.m_dropdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_battletype()) {
      set_m_battletype(from.m_battletype());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_usetime()) {
      set_m_usetime(from.m_usetime());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_laterrank()) {
      set_m_laterrank(from.m_laterrank());
    }
    if (from.has_m_arenapres()) {
      set_m_arenapres(from.m_arenapres());
    }
    if (from.has_m_topscore()) {
      set_m_topscore(from.m_topscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_errorcode()) {
      set_m_errorcode(from.m_errorcode());
    }
    if (from.has_m_isdoubleactivity()) {
      set_m_isdoubleactivity(from.m_isdoubleactivity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BattleResult::CopyFrom(const GM_BattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_battledata_size(); i++) {
    if (!this->m_battledata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_dropdata_size(); i++) {
    if (!this->m_dropdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_BattleResult::Swap(GM_BattleResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_battletype_, other->m_battletype_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_usetime_, other->m_usetime_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_laterrank_, other->m_laterrank_);
    std::swap(m_arenapres_, other->m_arenapres_);
    std::swap(m_topscore_, other->m_topscore_);
    std::swap(m_errorcode_, other->m_errorcode_);
    std::swap(m_isdoubleactivity_, other->m_isdoubleactivity_);
    m_battledata_.Swap(&other->m_battledata_);
    m_dropdata_.Swap(&other->m_dropdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BattleResult_descriptor_;
  metadata.reflection = GM_BattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_BattleRequest::kMFBIDFieldNumber;
const int SM_BattleRequest::kMFBTypeIDFieldNumber;
const int SM_BattleRequest::kRateFieldNumber;
const int SM_BattleRequest::kMIncreMatchidFieldNumber;
const int SM_BattleRequest::kMCopyAILevelFieldNumber;
const int SM_BattleRequest::kMFBPlayWayFieldNumber;
const int SM_BattleRequest::kMRoomCountFieldNumber;
const int SM_BattleRequest::kMPlayerCountFieldNumber;
const int SM_BattleRequest::kMPlayerDataFieldNumber;
const int SM_BattleRequest::kMWhiteListInfoFieldNumber;
#endif  // !_MSC_VER

SM_BattleRequest::SM_BattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_BattleRequest::InitAsDefaultInstance() {
}

SM_BattleRequest::SM_BattleRequest(const SM_BattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_BattleRequest::SharedCtor() {
  _cached_size_ = 0;
  m_fbid_ = 0;
  m_fbtypeid_ = 0;
  rate_ = 0;
  m_incrematchid_ = 0;
  m_copyailevel_ = 0;
  m_fbplayway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roomcount_ = 0;
  m_playercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_BattleRequest::~SM_BattleRequest() {
  SharedDtor();
}

void SM_BattleRequest::SharedDtor() {
  if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbplayway_;
  }
  if (this != default_instance_) {
  }
}

void SM_BattleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_BattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_BattleRequest_descriptor_;
}

const SM_BattleRequest& SM_BattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SM_BattleRequest* SM_BattleRequest::default_instance_ = NULL;

SM_BattleRequest* SM_BattleRequest::New() const {
  return new SM_BattleRequest;
}

void SM_BattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbid_ = 0;
    m_fbtypeid_ = 0;
    rate_ = 0;
    m_incrematchid_ = 0;
    m_copyailevel_ = 0;
    if (has_m_fbplayway()) {
      if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
        m_fbplayway_->clear();
      }
    }
    m_roomcount_ = 0;
    m_playercount_ = 0;
  }
  m_playerdata_.Clear();
  m_whitelistinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_BattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_FBID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FBTypeID;
        break;
      }

      // optional int32 m_FBTypeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_increMatchid;
        break;
      }

      // optional int32 m_increMatchid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_increMatchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_incrematchid_)));
          set_has_m_incrematchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_copyAILevel;
        break;
      }

      // optional int32 m_copyAILevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_copyAILevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_copyailevel_)));
          set_has_m_copyailevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_FBPlayWay;
        break;
      }

      // optional string m_FBPlayWay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FBPlayWay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fbplayway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fbplayway().data(), this->m_fbplayway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_RoomCount;
        break;
      }

      // optional int32 m_RoomCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RoomCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomcount_)));
          set_has_m_roomcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_PlayerCount;
        break;
      }

      // optional int32 m_PlayerCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PlayerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playercount_)));
          set_has_m_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_PlayerData;
        break;
      }

      // repeated .GM_EntryInfo_Single m_PlayerData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PlayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_PlayerData;
        if (input->ExpectTag(90)) goto parse_m_WhiteListInfo;
        break;
      }

      // repeated .GM_WhiteListInfo m_WhiteListInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_WhiteListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_whitelistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_WhiteListInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_BattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_FBID = 1;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbid(), output);
  }

  // optional int32 m_FBTypeID = 2;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbtypeid(), output);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // optional int32 m_increMatchid = 4;
  if (has_m_incrematchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_incrematchid(), output);
  }

  // optional int32 m_copyAILevel = 5;
  if (has_m_copyailevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_copyailevel(), output);
  }

  // optional string m_FBPlayWay = 6;
  if (has_m_fbplayway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbplayway().data(), this->m_fbplayway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_fbplayway(), output);
  }

  // optional int32 m_RoomCount = 7;
  if (has_m_roomcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_roomcount(), output);
  }

  // optional int32 m_PlayerCount = 8;
  if (has_m_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_playercount(), output);
  }

  // repeated .GM_EntryInfo_Single m_PlayerData = 10;
  for (int i = 0; i < this->m_playerdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_playerdata(i), output);
  }

  // repeated .GM_WhiteListInfo m_WhiteListInfo = 11;
  for (int i = 0; i < this->m_whitelistinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_whitelistinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_BattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_FBID = 1;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbid(), target);
  }

  // optional int32 m_FBTypeID = 2;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbtypeid(), target);
  }

  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // optional int32 m_increMatchid = 4;
  if (has_m_incrematchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_incrematchid(), target);
  }

  // optional int32 m_copyAILevel = 5;
  if (has_m_copyailevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_copyailevel(), target);
  }

  // optional string m_FBPlayWay = 6;
  if (has_m_fbplayway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbplayway().data(), this->m_fbplayway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_fbplayway(), target);
  }

  // optional int32 m_RoomCount = 7;
  if (has_m_roomcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_roomcount(), target);
  }

  // optional int32 m_PlayerCount = 8;
  if (has_m_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_playercount(), target);
  }

  // repeated .GM_EntryInfo_Single m_PlayerData = 10;
  for (int i = 0; i < this->m_playerdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_playerdata(i), target);
  }

  // repeated .GM_WhiteListInfo m_WhiteListInfo = 11;
  for (int i = 0; i < this->m_whitelistinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_whitelistinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_BattleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_FBID = 1;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional int32 m_FBTypeID = 2;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 m_increMatchid = 4;
    if (has_m_incrematchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_incrematchid());
    }

    // optional int32 m_copyAILevel = 5;
    if (has_m_copyailevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_copyailevel());
    }

    // optional string m_FBPlayWay = 6;
    if (has_m_fbplayway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fbplayway());
    }

    // optional int32 m_RoomCount = 7;
    if (has_m_roomcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomcount());
    }

    // optional int32 m_PlayerCount = 8;
    if (has_m_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playercount());
    }

  }
  // repeated .GM_EntryInfo_Single m_PlayerData = 10;
  total_size += 1 * this->m_playerdata_size();
  for (int i = 0; i < this->m_playerdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_playerdata(i));
  }

  // repeated .GM_WhiteListInfo m_WhiteListInfo = 11;
  total_size += 1 * this->m_whitelistinfo_size();
  for (int i = 0; i < this->m_whitelistinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_whitelistinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_BattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_BattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_BattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_BattleRequest::MergeFrom(const SM_BattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_playerdata_.MergeFrom(from.m_playerdata_);
  m_whitelistinfo_.MergeFrom(from.m_whitelistinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_m_incrematchid()) {
      set_m_incrematchid(from.m_incrematchid());
    }
    if (from.has_m_copyailevel()) {
      set_m_copyailevel(from.m_copyailevel());
    }
    if (from.has_m_fbplayway()) {
      set_m_fbplayway(from.m_fbplayway());
    }
    if (from.has_m_roomcount()) {
      set_m_roomcount(from.m_roomcount());
    }
    if (from.has_m_playercount()) {
      set_m_playercount(from.m_playercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_BattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_BattleRequest::CopyFrom(const SM_BattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_BattleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_playerdata_size(); i++) {
    if (!this->m_playerdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_whitelistinfo_size(); i++) {
    if (!this->m_whitelistinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SM_BattleRequest::Swap(SM_BattleRequest* other) {
  if (other != this) {
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(rate_, other->rate_);
    std::swap(m_incrematchid_, other->m_incrematchid_);
    std::swap(m_copyailevel_, other->m_copyailevel_);
    std::swap(m_fbplayway_, other->m_fbplayway_);
    std::swap(m_roomcount_, other->m_roomcount_);
    std::swap(m_playercount_, other->m_playercount_);
    m_playerdata_.Swap(&other->m_playerdata_);
    m_whitelistinfo_.Swap(&other->m_whitelistinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_BattleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_BattleRequest_descriptor_;
  metadata.reflection = SM_BattleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WhiteListInfo::kRoleidFieldNumber;
const int GM_WhiteListInfo::kIsSelfFieldNumber;
const int GM_WhiteListInfo::kSzMinCountFieldNumber;
const int GM_WhiteListInfo::kSzMaxCountFieldNumber;
const int GM_WhiteListInfo::kSfMinCountFieldNumber;
const int GM_WhiteListInfo::kSfMaxCountFieldNumber;
#endif  // !_MSC_VER

GM_WhiteListInfo::GM_WhiteListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WhiteListInfo::InitAsDefaultInstance() {
}

GM_WhiteListInfo::GM_WhiteListInfo(const GM_WhiteListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WhiteListInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  isself_ = 0;
  szmincount_ = 0;
  szmaxcount_ = 0;
  sfmincount_ = 0;
  sfmaxcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WhiteListInfo::~GM_WhiteListInfo() {
  SharedDtor();
}

void GM_WhiteListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WhiteListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WhiteListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WhiteListInfo_descriptor_;
}

const GM_WhiteListInfo& GM_WhiteListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_WhiteListInfo* GM_WhiteListInfo::default_instance_ = NULL;

GM_WhiteListInfo* GM_WhiteListInfo::New() const {
  return new GM_WhiteListInfo;
}

void GM_WhiteListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    isself_ = 0;
    szmincount_ = 0;
    szmaxcount_ = 0;
    sfmincount_ = 0;
    sfmaxcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WhiteListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSelf;
        break;
      }

      // optional int32 isSelf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isself_)));
          set_has_isself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_szMinCount;
        break;
      }

      // optional int32 szMinCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_szMinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &szmincount_)));
          set_has_szmincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_szMaxCount;
        break;
      }

      // optional int32 szMaxCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_szMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &szmaxcount_)));
          set_has_szmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sfMinCount;
        break;
      }

      // optional int32 sfMinCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sfMinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sfmincount_)));
          set_has_sfmincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sfMaxCount;
        break;
      }

      // optional int32 sfMaxCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sfMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sfmaxcount_)));
          set_has_sfmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WhiteListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 isSelf = 2;
  if (has_isself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isself(), output);
  }

  // optional int32 szMinCount = 3;
  if (has_szmincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->szmincount(), output);
  }

  // optional int32 szMaxCount = 4;
  if (has_szmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->szmaxcount(), output);
  }

  // optional int32 sfMinCount = 5;
  if (has_sfmincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sfmincount(), output);
  }

  // optional int32 sfMaxCount = 6;
  if (has_sfmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sfmaxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WhiteListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 isSelf = 2;
  if (has_isself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isself(), target);
  }

  // optional int32 szMinCount = 3;
  if (has_szmincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->szmincount(), target);
  }

  // optional int32 szMaxCount = 4;
  if (has_szmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->szmaxcount(), target);
  }

  // optional int32 sfMinCount = 5;
  if (has_sfmincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sfmincount(), target);
  }

  // optional int32 sfMaxCount = 6;
  if (has_sfmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sfmaxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WhiteListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 isSelf = 2;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isself());
    }

    // optional int32 szMinCount = 3;
    if (has_szmincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->szmincount());
    }

    // optional int32 szMaxCount = 4;
    if (has_szmaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->szmaxcount());
    }

    // optional int32 sfMinCount = 5;
    if (has_sfmincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sfmincount());
    }

    // optional int32 sfMaxCount = 6;
    if (has_sfmaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sfmaxcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WhiteListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WhiteListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WhiteListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WhiteListInfo::MergeFrom(const GM_WhiteListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_isself()) {
      set_isself(from.isself());
    }
    if (from.has_szmincount()) {
      set_szmincount(from.szmincount());
    }
    if (from.has_szmaxcount()) {
      set_szmaxcount(from.szmaxcount());
    }
    if (from.has_sfmincount()) {
      set_sfmincount(from.sfmincount());
    }
    if (from.has_sfmaxcount()) {
      set_sfmaxcount(from.sfmaxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WhiteListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WhiteListInfo::CopyFrom(const GM_WhiteListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WhiteListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_WhiteListInfo::Swap(GM_WhiteListInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(isself_, other->isself_);
    std::swap(szmincount_, other->szmincount_);
    std::swap(szmaxcount_, other->szmaxcount_);
    std::swap(sfmincount_, other->sfmincount_);
    std::swap(sfmaxcount_, other->sfmaxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WhiteListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WhiteListInfo_descriptor_;
  metadata.reflection = GM_WhiteListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DrawCardRequest::kMCardIDFieldNumber;
const int GM_DrawCardRequest::kMFBIDFieldNumber;
#endif  // !_MSC_VER

GM_DrawCardRequest::GM_DrawCardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DrawCardRequest::InitAsDefaultInstance() {
}

GM_DrawCardRequest::GM_DrawCardRequest(const GM_DrawCardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DrawCardRequest::SharedCtor() {
  _cached_size_ = 0;
  m_cardid_ = 0;
  m_fbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DrawCardRequest::~GM_DrawCardRequest() {
  SharedDtor();
}

void GM_DrawCardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DrawCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DrawCardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DrawCardRequest_descriptor_;
}

const GM_DrawCardRequest& GM_DrawCardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_DrawCardRequest* GM_DrawCardRequest::default_instance_ = NULL;

GM_DrawCardRequest* GM_DrawCardRequest::New() const {
  return new GM_DrawCardRequest;
}

void GM_DrawCardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_cardid_ = 0;
    m_fbid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DrawCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_CardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardid_)));
          set_has_m_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FBID;
        break;
      }

      // optional int32 m_FBID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DrawCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_CardID = 1;
  if (has_m_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_cardid(), output);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DrawCardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_CardID = 1;
  if (has_m_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_cardid(), target);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DrawCardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_CardID = 1;
    if (has_m_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardid());
    }

    // optional int32 m_FBID = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DrawCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DrawCardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DrawCardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DrawCardRequest::MergeFrom(const GM_DrawCardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_cardid()) {
      set_m_cardid(from.m_cardid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DrawCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DrawCardRequest::CopyFrom(const GM_DrawCardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DrawCardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_DrawCardRequest::Swap(GM_DrawCardRequest* other) {
  if (other != this) {
    std::swap(m_cardid_, other->m_cardid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DrawCardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DrawCardRequest_descriptor_;
  metadata.reflection = GM_DrawCardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReplacePet::kMRoleidFieldNumber;
const int GM_ReplacePet::kMFBIDFieldNumber;
const int GM_ReplacePet::kMTeamIDFieldNumber;
const int GM_ReplacePet::kMPetidFieldNumber;
const int GM_ReplacePet::kMHpFieldNumber;
#endif  // !_MSC_VER

GM_ReplacePet::GM_ReplacePet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReplacePet::InitAsDefaultInstance() {
}

GM_ReplacePet::GM_ReplacePet(const GM_ReplacePet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReplacePet::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_fbid_ = 0;
  m_teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReplacePet::~GM_ReplacePet() {
  SharedDtor();
}

void GM_ReplacePet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ReplacePet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReplacePet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReplacePet_descriptor_;
}

const GM_ReplacePet& GM_ReplacePet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ReplacePet* GM_ReplacePet::default_instance_ = NULL;

GM_ReplacePet* GM_ReplacePet::New() const {
  return new GM_ReplacePet;
}

void GM_ReplacePet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_fbid_ = 0;
    m_teamid_ = 0;
  }
  m_petid_.Clear();
  m_hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReplacePet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FBID;
        break;
      }

      // optional int32 m_FBID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_TeamID;
        break;
      }

      // optional int32 m_TeamID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamid_)));
          set_has_m_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_petid;
        break;
      }

      // repeated int32 m_petid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_m_petid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_petid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_petid;
        if (input->ExpectTag(40)) goto parse_m_hp;
        break;
      }

      // repeated int32 m_hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_hp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_hp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_hp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReplacePet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // optional int32 m_TeamID = 3;
  if (has_m_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_teamid(), output);
  }

  // repeated int32 m_petid = 4;
  for (int i = 0; i < this->m_petid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->m_petid(i), output);
  }

  // repeated int32 m_hp = 5;
  for (int i = 0; i < this->m_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_hp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReplacePet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_FBID = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // optional int32 m_TeamID = 3;
  if (has_m_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_teamid(), target);
  }

  // repeated int32 m_petid = 4;
  for (int i = 0; i < this->m_petid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->m_petid(i), target);
  }

  // repeated int32 m_hp = 5;
  for (int i = 0; i < this->m_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_hp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReplacePet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_FBID = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional int32 m_TeamID = 3;
    if (has_m_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamid());
    }

  }
  // repeated int32 m_petid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_petid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_petid(i));
    }
    total_size += 1 * this->m_petid_size() + data_size;
  }

  // repeated int32 m_hp = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_hp(i));
    }
    total_size += 1 * this->m_hp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReplacePet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReplacePet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReplacePet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReplacePet::MergeFrom(const GM_ReplacePet& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_petid_.MergeFrom(from.m_petid_);
  m_hp_.MergeFrom(from.m_hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_teamid()) {
      set_m_teamid(from.m_teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReplacePet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReplacePet::CopyFrom(const GM_ReplacePet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReplacePet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ReplacePet::Swap(GM_ReplacePet* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_teamid_, other->m_teamid_);
    m_petid_.Swap(&other->m_petid_);
    m_hp_.Swap(&other->m_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReplacePet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReplacePet_descriptor_;
  metadata.reflection = GM_ReplacePet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DrawCardReturn::kMResulFieldNumber;
const int GM_DrawCardReturn::kMDropDataFieldNumber;
#endif  // !_MSC_VER

GM_DrawCardReturn::GM_DrawCardReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DrawCardReturn::InitAsDefaultInstance() {
}

GM_DrawCardReturn::GM_DrawCardReturn(const GM_DrawCardReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DrawCardReturn::SharedCtor() {
  _cached_size_ = 0;
  m_resul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DrawCardReturn::~GM_DrawCardReturn() {
  SharedDtor();
}

void GM_DrawCardReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DrawCardReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DrawCardReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DrawCardReturn_descriptor_;
}

const GM_DrawCardReturn& GM_DrawCardReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_DrawCardReturn* GM_DrawCardReturn::default_instance_ = NULL;

GM_DrawCardReturn* GM_DrawCardReturn::New() const {
  return new GM_DrawCardReturn;
}

void GM_DrawCardReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_resul_ = 0;
  }
  m_dropdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DrawCardReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Resul = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resul_)));
          set_has_m_resul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_DropData;
        break;
      }

      // repeated .GM_ItemDrop m_DropData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_DropData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_dropdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_DropData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DrawCardReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Resul = 1;
  if (has_m_resul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_resul(), output);
  }

  // repeated .GM_ItemDrop m_DropData = 2;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_dropdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DrawCardReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Resul = 1;
  if (has_m_resul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_resul(), target);
  }

  // repeated .GM_ItemDrop m_DropData = 2;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_dropdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DrawCardReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Resul = 1;
    if (has_m_resul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resul());
    }

  }
  // repeated .GM_ItemDrop m_DropData = 2;
  total_size += 1 * this->m_dropdata_size();
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_dropdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DrawCardReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DrawCardReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DrawCardReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DrawCardReturn::MergeFrom(const GM_DrawCardReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_dropdata_.MergeFrom(from.m_dropdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_resul()) {
      set_m_resul(from.m_resul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DrawCardReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DrawCardReturn::CopyFrom(const GM_DrawCardReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DrawCardReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_dropdata_size(); i++) {
    if (!this->m_dropdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_DrawCardReturn::Swap(GM_DrawCardReturn* other) {
  if (other != this) {
    std::swap(m_resul_, other->m_resul_);
    m_dropdata_.Swap(&other->m_dropdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DrawCardReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DrawCardReturn_descriptor_;
  metadata.reflection = GM_DrawCardReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Damage::kFbidFieldNumber;
const int GM_Damage::kDamagerIdFieldNumber;
const int GM_Damage::kAttackerIdFieldNumber;
const int GM_Damage::kDamageValFieldNumber;
const int GM_Damage::kVecXFieldNumber;
const int GM_Damage::kVecYFieldNumber;
const int GM_Damage::kVecZFieldNumber;
const int GM_Damage::kDamageTypeFieldNumber;
const int GM_Damage::kIsDodgeFieldNumber;
const int GM_Damage::kIsBlockFieldNumber;
const int GM_Damage::kIsCriticalFieldNumber;
const int GM_Damage::kNowtimeFieldNumber;
const int GM_Damage::kAttackBreakDefenseFieldNumber;
#endif  // !_MSC_VER

GM_Damage::GM_Damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Damage::InitAsDefaultInstance() {
}

GM_Damage::GM_Damage(const GM_Damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Damage::SharedCtor() {
  _cached_size_ = 0;
  fbid_ = 0;
  damagerid_ = 0;
  attackerid_ = 0;
  damageval_ = 0;
  vecx_ = 0;
  vecy_ = 0;
  vecz_ = 0;
  damagetype_ = 0;
  isdodge_ = false;
  isblock_ = false;
  iscritical_ = false;
  nowtime_ = 0;
  attackbreakdefense_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Damage::~GM_Damage() {
  SharedDtor();
}

void GM_Damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Damage_descriptor_;
}

const GM_Damage& GM_Damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_Damage* GM_Damage::default_instance_ = NULL;

GM_Damage* GM_Damage::New() const {
  return new GM_Damage;
}

void GM_Damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbid_ = 0;
    damagerid_ = 0;
    attackerid_ = 0;
    damageval_ = 0;
    vecx_ = 0;
    vecy_ = 0;
    vecz_ = 0;
    damagetype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isdodge_ = false;
    isblock_ = false;
    iscritical_ = false;
    nowtime_ = 0;
    attackbreakdefense_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbid_)));
          set_has_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damagerId;
        break;
      }

      // optional int32 damagerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagerid_)));
          set_has_damagerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackerId;
        break;
      }

      // optional int32 attackerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackerid_)));
          set_has_attackerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damageVal;
        break;
      }

      // optional int32 damageVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damageval_)));
          set_has_damageval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_vecX;
        break;
      }

      // optional float vecX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vecX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vecx_)));
          set_has_vecx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_vecY;
        break;
      }

      // optional float vecY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vecY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vecy_)));
          set_has_vecy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_vecZ;
        break;
      }

      // optional float vecZ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vecZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vecz_)));
          set_has_vecz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_damageType;
        break;
      }

      // optional int32 damageType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagetype_)));
          set_has_damagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isDodge;
        break;
      }

      // optional bool isDodge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdodge_)));
          set_has_isdodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isBlock;
        break;
      }

      // optional bool isBlock = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblock_)));
          set_has_isblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isCritical;
        break;
      }

      // optional bool isCritical = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCritical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscritical_)));
          set_has_iscritical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nowtime;
        break;
      }

      // optional int32 nowtime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowtime_)));
          set_has_nowtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attackBreakDefense;
        break;
      }

      // optional int32 attackBreakDefense = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackBreakDefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackbreakdefense_)));
          set_has_attackbreakdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbid(), output);
  }

  // optional int32 damagerId = 2;
  if (has_damagerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damagerid(), output);
  }

  // optional int32 attackerId = 3;
  if (has_attackerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attackerid(), output);
  }

  // optional int32 damageVal = 4;
  if (has_damageval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damageval(), output);
  }

  // optional float vecX = 5;
  if (has_vecx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vecx(), output);
  }

  // optional float vecY = 6;
  if (has_vecy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vecy(), output);
  }

  // optional float vecZ = 7;
  if (has_vecz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vecz(), output);
  }

  // optional int32 damageType = 8;
  if (has_damagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->damagetype(), output);
  }

  // optional bool isDodge = 9;
  if (has_isdodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isdodge(), output);
  }

  // optional bool isBlock = 10;
  if (has_isblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isblock(), output);
  }

  // optional bool isCritical = 11;
  if (has_iscritical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->iscritical(), output);
  }

  // optional int32 nowtime = 12;
  if (has_nowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nowtime(), output);
  }

  // optional int32 attackBreakDefense = 13;
  if (has_attackbreakdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attackbreakdefense(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbid = 1;
  if (has_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbid(), target);
  }

  // optional int32 damagerId = 2;
  if (has_damagerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damagerid(), target);
  }

  // optional int32 attackerId = 3;
  if (has_attackerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attackerid(), target);
  }

  // optional int32 damageVal = 4;
  if (has_damageval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damageval(), target);
  }

  // optional float vecX = 5;
  if (has_vecx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vecx(), target);
  }

  // optional float vecY = 6;
  if (has_vecy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vecy(), target);
  }

  // optional float vecZ = 7;
  if (has_vecz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vecz(), target);
  }

  // optional int32 damageType = 8;
  if (has_damagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->damagetype(), target);
  }

  // optional bool isDodge = 9;
  if (has_isdodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isdodge(), target);
  }

  // optional bool isBlock = 10;
  if (has_isblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isblock(), target);
  }

  // optional bool isCritical = 11;
  if (has_iscritical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->iscritical(), target);
  }

  // optional int32 nowtime = 12;
  if (has_nowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nowtime(), target);
  }

  // optional int32 attackBreakDefense = 13;
  if (has_attackbreakdefense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->attackbreakdefense(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbid = 1;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbid());
    }

    // optional int32 damagerId = 2;
    if (has_damagerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagerid());
    }

    // optional int32 attackerId = 3;
    if (has_attackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackerid());
    }

    // optional int32 damageVal = 4;
    if (has_damageval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageval());
    }

    // optional float vecX = 5;
    if (has_vecx()) {
      total_size += 1 + 4;
    }

    // optional float vecY = 6;
    if (has_vecy()) {
      total_size += 1 + 4;
    }

    // optional float vecZ = 7;
    if (has_vecz()) {
      total_size += 1 + 4;
    }

    // optional int32 damageType = 8;
    if (has_damagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isDodge = 9;
    if (has_isdodge()) {
      total_size += 1 + 1;
    }

    // optional bool isBlock = 10;
    if (has_isblock()) {
      total_size += 1 + 1;
    }

    // optional bool isCritical = 11;
    if (has_iscritical()) {
      total_size += 1 + 1;
    }

    // optional int32 nowtime = 12;
    if (has_nowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowtime());
    }

    // optional int32 attackBreakDefense = 13;
    if (has_attackbreakdefense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackbreakdefense());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Damage::MergeFrom(const GM_Damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
    if (from.has_damagerid()) {
      set_damagerid(from.damagerid());
    }
    if (from.has_attackerid()) {
      set_attackerid(from.attackerid());
    }
    if (from.has_damageval()) {
      set_damageval(from.damageval());
    }
    if (from.has_vecx()) {
      set_vecx(from.vecx());
    }
    if (from.has_vecy()) {
      set_vecy(from.vecy());
    }
    if (from.has_vecz()) {
      set_vecz(from.vecz());
    }
    if (from.has_damagetype()) {
      set_damagetype(from.damagetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isdodge()) {
      set_isdodge(from.isdodge());
    }
    if (from.has_isblock()) {
      set_isblock(from.isblock());
    }
    if (from.has_iscritical()) {
      set_iscritical(from.iscritical());
    }
    if (from.has_nowtime()) {
      set_nowtime(from.nowtime());
    }
    if (from.has_attackbreakdefense()) {
      set_attackbreakdefense(from.attackbreakdefense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Damage::CopyFrom(const GM_Damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Damage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Damage::Swap(GM_Damage* other) {
  if (other != this) {
    std::swap(fbid_, other->fbid_);
    std::swap(damagerid_, other->damagerid_);
    std::swap(attackerid_, other->attackerid_);
    std::swap(damageval_, other->damageval_);
    std::swap(vecx_, other->vecx_);
    std::swap(vecy_, other->vecy_);
    std::swap(vecz_, other->vecz_);
    std::swap(damagetype_, other->damagetype_);
    std::swap(isdodge_, other->isdodge_);
    std::swap(isblock_, other->isblock_);
    std::swap(iscritical_, other->iscritical_);
    std::swap(nowtime_, other->nowtime_);
    std::swap(attackbreakdefense_, other->attackbreakdefense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Damage_descriptor_;
  metadata.reflection = GM_Damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NotifyHPMPChange::kTypeFieldNumber;
const int GM_NotifyHPMPChange::kValueFieldNumber;
const int GM_NotifyHPMPChange::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_NotifyHPMPChange::GM_NotifyHPMPChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NotifyHPMPChange::InitAsDefaultInstance() {
}

GM_NotifyHPMPChange::GM_NotifyHPMPChange(const GM_NotifyHPMPChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NotifyHPMPChange::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NotifyHPMPChange::~GM_NotifyHPMPChange() {
  SharedDtor();
}

void GM_NotifyHPMPChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_NotifyHPMPChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NotifyHPMPChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NotifyHPMPChange_descriptor_;
}

const GM_NotifyHPMPChange& GM_NotifyHPMPChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_NotifyHPMPChange* GM_NotifyHPMPChange::default_instance_ = NULL;

GM_NotifyHPMPChange* GM_NotifyHPMPChange::New() const {
  return new GM_NotifyHPMPChange;
}

void GM_NotifyHPMPChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NotifyHPMPChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NotifyHPMPChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 roleid = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NotifyHPMPChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 roleid = 3;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NotifyHPMPChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 roleid = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NotifyHPMPChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NotifyHPMPChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NotifyHPMPChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NotifyHPMPChange::MergeFrom(const GM_NotifyHPMPChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NotifyHPMPChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NotifyHPMPChange::CopyFrom(const GM_NotifyHPMPChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NotifyHPMPChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_NotifyHPMPChange::Swap(GM_NotifyHPMPChange* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NotifyHPMPChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NotifyHPMPChange_descriptor_;
  metadata.reflection = GM_NotifyHPMPChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LeaveBattle::kRoleIDFieldNumber;
#endif  // !_MSC_VER

GM_LeaveBattle::GM_LeaveBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LeaveBattle::InitAsDefaultInstance() {
}

GM_LeaveBattle::GM_LeaveBattle(const GM_LeaveBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LeaveBattle::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LeaveBattle::~GM_LeaveBattle() {
  SharedDtor();
}

void GM_LeaveBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LeaveBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LeaveBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LeaveBattle_descriptor_;
}

const GM_LeaveBattle& GM_LeaveBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_LeaveBattle* GM_LeaveBattle::default_instance_ = NULL;

GM_LeaveBattle* GM_LeaveBattle::New() const {
  return new GM_LeaveBattle;
}

void GM_LeaveBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LeaveBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LeaveBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LeaveBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleID = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LeaveBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LeaveBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LeaveBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LeaveBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LeaveBattle::MergeFrom(const GM_LeaveBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LeaveBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LeaveBattle::CopyFrom(const GM_LeaveBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LeaveBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_LeaveBattle::Swap(GM_LeaveBattle* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LeaveBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LeaveBattle_descriptor_;
  metadata.reflection = GM_LeaveBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleLeave::kLeaveInfoFieldNumber;
#endif  // !_MSC_VER

GM_RoleLeave::GM_RoleLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleLeave::InitAsDefaultInstance() {
}

GM_RoleLeave::GM_RoleLeave(const GM_RoleLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleLeave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleLeave::~GM_RoleLeave() {
  SharedDtor();
}

void GM_RoleLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RoleLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleLeave_descriptor_;
}

const GM_RoleLeave& GM_RoleLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_RoleLeave* GM_RoleLeave::default_instance_ = NULL;

GM_RoleLeave* GM_RoleLeave::New() const {
  return new GM_RoleLeave;
}

void GM_RoleLeave::Clear() {
  leaveinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_LeaveBattle leaveInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaveInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaveinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_leaveInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_LeaveBattle leaveInfo = 1;
  for (int i = 0; i < this->leaveinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leaveinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_LeaveBattle leaveInfo = 1;
  for (int i = 0; i < this->leaveinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leaveinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleLeave::ByteSize() const {
  int total_size = 0;

  // repeated .GM_LeaveBattle leaveInfo = 1;
  total_size += 1 * this->leaveinfo_size();
  for (int i = 0; i < this->leaveinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaveinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleLeave::MergeFrom(const GM_RoleLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  leaveinfo_.MergeFrom(from.leaveinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleLeave::CopyFrom(const GM_RoleLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleLeave::IsInitialized() const {

  for (int i = 0; i < leaveinfo_size(); i++) {
    if (!this->leaveinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_RoleLeave::Swap(GM_RoleLeave* other) {
  if (other != this) {
    leaveinfo_.Swap(&other->leaveinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleLeave_descriptor_;
  metadata.reflection = GM_RoleLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_BattleInfo::kMRoleIDFieldNumber;
const int SM_BattleInfo::kMCampFieldNumber;
const int SM_BattleInfo::kMRemainHPFieldNumber;
const int SM_BattleInfo::kMHurtValFieldNumber;
const int SM_BattleInfo::kMKillNumFieldNumber;
const int SM_BattleInfo::kMDieNumFieldNumber;
const int SM_BattleInfo::kMNameFieldNumber;
const int SM_BattleInfo::kMLevelFieldNumber;
const int SM_BattleInfo::kMFightvalFieldNumber;
const int SM_BattleInfo::kMPointFieldNumber;
const int SM_BattleInfo::kMCharacterTypeFieldNumber;
const int SM_BattleInfo::kMParentIDFieldNumber;
const int SM_BattleInfo::kMExitTypeFieldNumber;
const int SM_BattleInfo::kMParentNameFieldNumber;
const int SM_BattleInfo::kMTopgradeFieldNumber;
const int SM_BattleInfo::kMServeridFieldNumber;
const int SM_BattleInfo::kMTopsocreFieldNumber;
const int SM_BattleInfo::kMBosspercentageFieldNumber;
const int SM_BattleInfo::kMDropDataFieldNumber;
const int SM_BattleInfo::kMKillMonsterDataFieldNumber;
#endif  // !_MSC_VER

SM_BattleInfo::SM_BattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_BattleInfo::InitAsDefaultInstance() {
}

SM_BattleInfo::SM_BattleInfo(const SM_BattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_camp_ = 0;
  m_remainhp_ = 0;
  m_hurtval_ = 0;
  m_killnum_ = 0;
  m_dienum_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_level_ = 0;
  m_fightval_ = 0;
  m_point_ = 0;
  m_charactertype_ = 0;
  m_parentid_ = 0;
  m_exittype_ = 0;
  m_parentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_topgrade_ = 0;
  m_serverid_ = 0;
  m_topsocre_ = 0;
  m_bosspercentage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_BattleInfo::~SM_BattleInfo() {
  SharedDtor();
}

void SM_BattleInfo::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parentname_;
  }
  if (this != default_instance_) {
  }
}

void SM_BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_BattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_BattleInfo_descriptor_;
}

const SM_BattleInfo& SM_BattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SM_BattleInfo* SM_BattleInfo::default_instance_ = NULL;

SM_BattleInfo* SM_BattleInfo::New() const {
  return new SM_BattleInfo;
}

void SM_BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_camp_ = 0;
    m_remainhp_ = 0;
    m_hurtval_ = 0;
    m_killnum_ = 0;
    m_dienum_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_fightval_ = 0;
    m_point_ = 0;
    m_charactertype_ = 0;
    m_parentid_ = 0;
    m_exittype_ = 0;
    if (has_m_parentname()) {
      if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
        m_parentname_->clear();
      }
    }
    m_topgrade_ = 0;
    m_serverid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_topsocre_ = 0;
    m_bosspercentage_ = 0;
  }
  m_dropdata_.Clear();
  m_killmonsterdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Camp;
        break;
      }

      // optional int32 m_Camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_camp_)));
          set_has_m_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_RemainHP;
        break;
      }

      // optional int32 m_RemainHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RemainHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_remainhp_)));
          set_has_m_remainhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_HurtVal;
        break;
      }

      // optional int32 m_HurtVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_HurtVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hurtval_)));
          set_has_m_hurtval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_killNum;
        break;
      }

      // optional int32 m_killNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killnum_)));
          set_has_m_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_dieNum;
        break;
      }

      // optional int32 m_dieNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dieNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dienum_)));
          set_has_m_dienum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_name;
        break;
      }

      // optional string m_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_fightval;
        break;
      }

      // optional int32 m_fightval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fightval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightval_)));
          set_has_m_fightval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_point;
        break;
      }

      // optional int32 m_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_CharacterType;
        break;
      }

      // optional int32 m_CharacterType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CharacterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_charactertype_)));
          set_has_m_charactertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_parentID;
        break;
      }

      // optional int32 m_parentID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_parentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_parentid_)));
          set_has_m_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_exitType;
        break;
      }

      // optional int32 m_exitType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exittype_)));
          set_has_m_exittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_parentName;
        break;
      }

      // optional string m_parentName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_parentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_parentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_parentname().data(), this->m_parentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_topgrade;
        break;
      }

      // optional int32 m_topgrade = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_topgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_topgrade_)));
          set_has_m_topgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_serverid;
        break;
      }

      // optional int32 m_serverid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverid_)));
          set_has_m_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_topsocre;
        break;
      }

      // optional int32 m_topsocre = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_topsocre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_topsocre_)));
          set_has_m_topsocre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_bosspercentage;
        break;
      }

      // optional int32 m_bosspercentage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bosspercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bosspercentage_)));
          set_has_m_bosspercentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_DropData;
        break;
      }

      // repeated .GM_ItemDrop m_DropData = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_DropData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_dropdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_DropData;
        if (input->ExpectTag(170)) goto parse_m_KillMonsterData;
        break;
      }

      // repeated .GM_ItemDrop m_KillMonsterData = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_KillMonsterData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_killmonsterdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_KillMonsterData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_Camp = 2;
  if (has_m_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_camp(), output);
  }

  // optional int32 m_RemainHP = 3;
  if (has_m_remainhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_remainhp(), output);
  }

  // optional int32 m_HurtVal = 4;
  if (has_m_hurtval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_hurtval(), output);
  }

  // optional int32 m_killNum = 5;
  if (has_m_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_killnum(), output);
  }

  // optional int32 m_dieNum = 6;
  if (has_m_dienum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_dienum(), output);
  }

  // optional string m_name = 7;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_name(), output);
  }

  // optional int32 m_level = 8;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_level(), output);
  }

  // optional int32 m_fightval = 9;
  if (has_m_fightval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_fightval(), output);
  }

  // optional int32 m_point = 10;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_point(), output);
  }

  // optional int32 m_CharacterType = 11;
  if (has_m_charactertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_charactertype(), output);
  }

  // optional int32 m_parentID = 12;
  if (has_m_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_parentid(), output);
  }

  // optional int32 m_exitType = 13;
  if (has_m_exittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_exittype(), output);
  }

  // optional string m_parentName = 14;
  if (has_m_parentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parentname().data(), this->m_parentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->m_parentname(), output);
  }

  // optional int32 m_topgrade = 15;
  if (has_m_topgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_topgrade(), output);
  }

  // optional int32 m_serverid = 16;
  if (has_m_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_serverid(), output);
  }

  // optional int32 m_topsocre = 17;
  if (has_m_topsocre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_topsocre(), output);
  }

  // optional int32 m_bosspercentage = 18;
  if (has_m_bosspercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_bosspercentage(), output);
  }

  // repeated .GM_ItemDrop m_DropData = 20;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_dropdata(i), output);
  }

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  for (int i = 0; i < this->m_killmonsterdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->m_killmonsterdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_BattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_Camp = 2;
  if (has_m_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_camp(), target);
  }

  // optional int32 m_RemainHP = 3;
  if (has_m_remainhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_remainhp(), target);
  }

  // optional int32 m_HurtVal = 4;
  if (has_m_hurtval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_hurtval(), target);
  }

  // optional int32 m_killNum = 5;
  if (has_m_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_killnum(), target);
  }

  // optional int32 m_dieNum = 6;
  if (has_m_dienum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_dienum(), target);
  }

  // optional string m_name = 7;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_name(), target);
  }

  // optional int32 m_level = 8;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_level(), target);
  }

  // optional int32 m_fightval = 9;
  if (has_m_fightval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_fightval(), target);
  }

  // optional int32 m_point = 10;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_point(), target);
  }

  // optional int32 m_CharacterType = 11;
  if (has_m_charactertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_charactertype(), target);
  }

  // optional int32 m_parentID = 12;
  if (has_m_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_parentid(), target);
  }

  // optional int32 m_exitType = 13;
  if (has_m_exittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_exittype(), target);
  }

  // optional string m_parentName = 14;
  if (has_m_parentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parentname().data(), this->m_parentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->m_parentname(), target);
  }

  // optional int32 m_topgrade = 15;
  if (has_m_topgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_topgrade(), target);
  }

  // optional int32 m_serverid = 16;
  if (has_m_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_serverid(), target);
  }

  // optional int32 m_topsocre = 17;
  if (has_m_topsocre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_topsocre(), target);
  }

  // optional int32 m_bosspercentage = 18;
  if (has_m_bosspercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_bosspercentage(), target);
  }

  // repeated .GM_ItemDrop m_DropData = 20;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_dropdata(i), target);
  }

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  for (int i = 0; i < this->m_killmonsterdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->m_killmonsterdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_BattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_Camp = 2;
    if (has_m_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_camp());
    }

    // optional int32 m_RemainHP = 3;
    if (has_m_remainhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_remainhp());
    }

    // optional int32 m_HurtVal = 4;
    if (has_m_hurtval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hurtval());
    }

    // optional int32 m_killNum = 5;
    if (has_m_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killnum());
    }

    // optional int32 m_dieNum = 6;
    if (has_m_dienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dienum());
    }

    // optional string m_name = 7;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_level = 8;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_fightval = 9;
    if (has_m_fightval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightval());
    }

    // optional int32 m_point = 10;
    if (has_m_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

    // optional int32 m_CharacterType = 11;
    if (has_m_charactertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_charactertype());
    }

    // optional int32 m_parentID = 12;
    if (has_m_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_parentid());
    }

    // optional int32 m_exitType = 13;
    if (has_m_exittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exittype());
    }

    // optional string m_parentName = 14;
    if (has_m_parentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_parentname());
    }

    // optional int32 m_topgrade = 15;
    if (has_m_topgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_topgrade());
    }

    // optional int32 m_serverid = 16;
    if (has_m_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_topsocre = 17;
    if (has_m_topsocre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_topsocre());
    }

    // optional int32 m_bosspercentage = 18;
    if (has_m_bosspercentage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bosspercentage());
    }

  }
  // repeated .GM_ItemDrop m_DropData = 20;
  total_size += 2 * this->m_dropdata_size();
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_dropdata(i));
  }

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  total_size += 2 * this->m_killmonsterdata_size();
  for (int i = 0; i < this->m_killmonsterdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_killmonsterdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_BattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_BattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_BattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_BattleInfo::MergeFrom(const SM_BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_dropdata_.MergeFrom(from.m_dropdata_);
  m_killmonsterdata_.MergeFrom(from.m_killmonsterdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_camp()) {
      set_m_camp(from.m_camp());
    }
    if (from.has_m_remainhp()) {
      set_m_remainhp(from.m_remainhp());
    }
    if (from.has_m_hurtval()) {
      set_m_hurtval(from.m_hurtval());
    }
    if (from.has_m_killnum()) {
      set_m_killnum(from.m_killnum());
    }
    if (from.has_m_dienum()) {
      set_m_dienum(from.m_dienum());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_fightval()) {
      set_m_fightval(from.m_fightval());
    }
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
    if (from.has_m_charactertype()) {
      set_m_charactertype(from.m_charactertype());
    }
    if (from.has_m_parentid()) {
      set_m_parentid(from.m_parentid());
    }
    if (from.has_m_exittype()) {
      set_m_exittype(from.m_exittype());
    }
    if (from.has_m_parentname()) {
      set_m_parentname(from.m_parentname());
    }
    if (from.has_m_topgrade()) {
      set_m_topgrade(from.m_topgrade());
    }
    if (from.has_m_serverid()) {
      set_m_serverid(from.m_serverid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_topsocre()) {
      set_m_topsocre(from.m_topsocre());
    }
    if (from.has_m_bosspercentage()) {
      set_m_bosspercentage(from.m_bosspercentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_BattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_BattleInfo::CopyFrom(const SM_BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_dropdata_size(); i++) {
    if (!this->m_dropdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_killmonsterdata_size(); i++) {
    if (!this->m_killmonsterdata(i).IsInitialized()) return false;
  }
  return true;
}

void SM_BattleInfo::Swap(SM_BattleInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_camp_, other->m_camp_);
    std::swap(m_remainhp_, other->m_remainhp_);
    std::swap(m_hurtval_, other->m_hurtval_);
    std::swap(m_killnum_, other->m_killnum_);
    std::swap(m_dienum_, other->m_dienum_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_fightval_, other->m_fightval_);
    std::swap(m_point_, other->m_point_);
    std::swap(m_charactertype_, other->m_charactertype_);
    std::swap(m_parentid_, other->m_parentid_);
    std::swap(m_exittype_, other->m_exittype_);
    std::swap(m_parentname_, other->m_parentname_);
    std::swap(m_topgrade_, other->m_topgrade_);
    std::swap(m_serverid_, other->m_serverid_);
    std::swap(m_topsocre_, other->m_topsocre_);
    std::swap(m_bosspercentage_, other->m_bosspercentage_);
    m_dropdata_.Swap(&other->m_dropdata_);
    m_killmonsterdata_.Swap(&other->m_killmonsterdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_BattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_BattleInfo_descriptor_;
  metadata.reflection = SM_BattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_BattleResult::kMWinCampFieldNumber;
const int SM_BattleResult::kMBattleTypeFieldNumber;
const int SM_BattleResult::kMFBTypeIDFieldNumber;
const int SM_BattleResult::kMUseTimeFieldNumber;
const int SM_BattleResult::kMBossHPFieldNumber;
const int SM_BattleResult::kMPlayerDataFieldNumber;
#endif  // !_MSC_VER

SM_BattleResult::SM_BattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_BattleResult::InitAsDefaultInstance() {
}

SM_BattleResult::SM_BattleResult(const SM_BattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_BattleResult::SharedCtor() {
  _cached_size_ = 0;
  m_wincamp_ = 0;
  m_battletype_ = 0;
  m_fbtypeid_ = 0;
  m_usetime_ = 0;
  m_bosshp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_BattleResult::~SM_BattleResult() {
  SharedDtor();
}

void SM_BattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_BattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_BattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_BattleResult_descriptor_;
}

const SM_BattleResult& SM_BattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SM_BattleResult* SM_BattleResult::default_instance_ = NULL;

SM_BattleResult* SM_BattleResult::New() const {
  return new SM_BattleResult;
}

void SM_BattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wincamp_ = 0;
    m_battletype_ = 0;
    m_fbtypeid_ = 0;
    m_usetime_ = 0;
    m_bosshp_ = 0;
  }
  m_playerdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_BattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_WinCamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wincamp_)));
          set_has_m_wincamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_BattleType;
        break;
      }

      // optional int32 m_BattleType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battletype_)));
          set_has_m_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_FBTypeID;
        break;
      }

      // optional int32 m_FBTypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_UseTime;
        break;
      }

      // optional int32 m_UseTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_usetime_)));
          set_has_m_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_BossHP;
        break;
      }

      // optional int32 m_BossHP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BossHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bosshp_)));
          set_has_m_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_PlayerData;
        break;
      }

      // repeated .SM_BattleInfo m_PlayerData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PlayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_PlayerData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_BattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_WinCamp = 1;
  if (has_m_wincamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wincamp(), output);
  }

  // optional int32 m_BattleType = 2;
  if (has_m_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_battletype(), output);
  }

  // optional int32 m_FBTypeID = 3;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fbtypeid(), output);
  }

  // optional int32 m_UseTime = 4;
  if (has_m_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_usetime(), output);
  }

  // optional int32 m_BossHP = 5;
  if (has_m_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bosshp(), output);
  }

  // repeated .SM_BattleInfo m_PlayerData = 6;
  for (int i = 0; i < this->m_playerdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_playerdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_BattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_WinCamp = 1;
  if (has_m_wincamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wincamp(), target);
  }

  // optional int32 m_BattleType = 2;
  if (has_m_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_battletype(), target);
  }

  // optional int32 m_FBTypeID = 3;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fbtypeid(), target);
  }

  // optional int32 m_UseTime = 4;
  if (has_m_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_usetime(), target);
  }

  // optional int32 m_BossHP = 5;
  if (has_m_bosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bosshp(), target);
  }

  // repeated .SM_BattleInfo m_PlayerData = 6;
  for (int i = 0; i < this->m_playerdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_playerdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_BattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_WinCamp = 1;
    if (has_m_wincamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wincamp());
    }

    // optional int32 m_BattleType = 2;
    if (has_m_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battletype());
    }

    // optional int32 m_FBTypeID = 3;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 m_UseTime = 4;
    if (has_m_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_usetime());
    }

    // optional int32 m_BossHP = 5;
    if (has_m_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bosshp());
    }

  }
  // repeated .SM_BattleInfo m_PlayerData = 6;
  total_size += 1 * this->m_playerdata_size();
  for (int i = 0; i < this->m_playerdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_playerdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_BattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_BattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_BattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_BattleResult::MergeFrom(const SM_BattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_playerdata_.MergeFrom(from.m_playerdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wincamp()) {
      set_m_wincamp(from.m_wincamp());
    }
    if (from.has_m_battletype()) {
      set_m_battletype(from.m_battletype());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_usetime()) {
      set_m_usetime(from.m_usetime());
    }
    if (from.has_m_bosshp()) {
      set_m_bosshp(from.m_bosshp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_BattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_BattleResult::CopyFrom(const SM_BattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_BattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_playerdata_size(); i++) {
    if (!this->m_playerdata(i).IsInitialized()) return false;
  }
  return true;
}

void SM_BattleResult::Swap(SM_BattleResult* other) {
  if (other != this) {
    std::swap(m_wincamp_, other->m_wincamp_);
    std::swap(m_battletype_, other->m_battletype_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_usetime_, other->m_usetime_);
    std::swap(m_bosshp_, other->m_bosshp_);
    m_playerdata_.Swap(&other->m_playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_BattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_BattleResult_descriptor_;
  metadata.reflection = SM_BattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMovement::kMRoleidFieldNumber;
const int SyncMovement::kMPosXFieldNumber;
const int SyncMovement::kMPosZFieldNumber;
const int SyncMovement::kMVecXFieldNumber;
const int SyncMovement::kMVecZFieldNumber;
#endif  // !_MSC_VER

SyncMovement::SyncMovement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncMovement::InitAsDefaultInstance() {
}

SyncMovement::SyncMovement(const SyncMovement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncMovement::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_posx_ = 0;
  m_posz_ = 0;
  m_vecx_ = 0;
  m_vecz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMovement::~SyncMovement() {
  SharedDtor();
}

void SyncMovement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncMovement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMovement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMovement_descriptor_;
}

const SyncMovement& SyncMovement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SyncMovement* SyncMovement::default_instance_ = NULL;

SyncMovement* SyncMovement::New() const {
  return new SyncMovement;
}

void SyncMovement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_posx_ = 0;
    m_posz_ = 0;
    m_vecx_ = 0;
    m_vecz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMovement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m_PosX;
        break;
      }

      // optional float m_PosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_posx_)));
          set_has_m_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_m_PosZ;
        break;
      }

      // optional float m_PosZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_PosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_posz_)));
          set_has_m_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m_VecX;
        break;
      }

      // optional float m_VecX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_VecX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_vecx_)));
          set_has_m_vecx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m_VecZ;
        break;
      }

      // optional float m_VecZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_VecZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_vecz_)));
          set_has_m_vecz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncMovement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional float m_PosX = 2;
  if (has_m_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->m_posx(), output);
  }

  // optional float m_PosZ = 3;
  if (has_m_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->m_posz(), output);
  }

  // optional float m_VecX = 4;
  if (has_m_vecx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->m_vecx(), output);
  }

  // optional float m_VecZ = 5;
  if (has_m_vecz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->m_vecz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncMovement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional float m_PosX = 2;
  if (has_m_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->m_posx(), target);
  }

  // optional float m_PosZ = 3;
  if (has_m_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->m_posz(), target);
  }

  // optional float m_VecX = 4;
  if (has_m_vecx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->m_vecx(), target);
  }

  // optional float m_VecZ = 5;
  if (has_m_vecz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->m_vecz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncMovement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional float m_PosX = 2;
    if (has_m_posx()) {
      total_size += 1 + 4;
    }

    // optional float m_PosZ = 3;
    if (has_m_posz()) {
      total_size += 1 + 4;
    }

    // optional float m_VecX = 4;
    if (has_m_vecx()) {
      total_size += 1 + 4;
    }

    // optional float m_VecZ = 5;
    if (has_m_vecz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMovement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMovement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMovement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMovement::MergeFrom(const SyncMovement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_posx()) {
      set_m_posx(from.m_posx());
    }
    if (from.has_m_posz()) {
      set_m_posz(from.m_posz());
    }
    if (from.has_m_vecx()) {
      set_m_vecx(from.m_vecx());
    }
    if (from.has_m_vecz()) {
      set_m_vecz(from.m_vecz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMovement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMovement::CopyFrom(const SyncMovement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMovement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncMovement::Swap(SyncMovement* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_posx_, other->m_posx_);
    std::swap(m_posz_, other->m_posz_);
    std::swap(m_vecx_, other->m_vecx_);
    std::swap(m_vecz_, other->m_vecz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMovement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMovement_descriptor_;
  metadata.reflection = SyncMovement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FBSweepRequest::kMFbtypeidFieldNumber;
const int GM_FBSweepRequest::kMFbidFieldNumber;
const int GM_FBSweepRequest::kMRepeatFieldNumber;
const int GM_FBSweepRequest::kMProfessionFieldNumber;
#endif  // !_MSC_VER

GM_FBSweepRequest::GM_FBSweepRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FBSweepRequest::InitAsDefaultInstance() {
}

GM_FBSweepRequest::GM_FBSweepRequest(const GM_FBSweepRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FBSweepRequest::SharedCtor() {
  _cached_size_ = 0;
  m_fbtypeid_ = 0;
  m_fbid_ = 0;
  m_repeat_ = 0;
  m_profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FBSweepRequest::~GM_FBSweepRequest() {
  SharedDtor();
}

void GM_FBSweepRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FBSweepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FBSweepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FBSweepRequest_descriptor_;
}

const GM_FBSweepRequest& GM_FBSweepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_FBSweepRequest* GM_FBSweepRequest::default_instance_ = NULL;

GM_FBSweepRequest* GM_FBSweepRequest::New() const {
  return new GM_FBSweepRequest;
}

void GM_FBSweepRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbtypeid_ = 0;
    m_fbid_ = 0;
    m_repeat_ = 0;
    m_profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FBSweepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fbtypeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fbid;
        break;
      }

      // optional int32 m_fbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_repeat;
        break;
      }

      // optional int32 m_repeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_repeat_)));
          set_has_m_repeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FBSweepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fbtypeid = 1;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbtypeid(), output);
  }

  // optional int32 m_fbid = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // optional int32 m_repeat = 3;
  if (has_m_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_repeat(), output);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FBSweepRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fbtypeid = 1;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbtypeid(), target);
  }

  // optional int32 m_fbid = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // optional int32 m_repeat = 3;
  if (has_m_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_repeat(), target);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FBSweepRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fbtypeid = 1;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 m_fbid = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional int32 m_repeat = 3;
    if (has_m_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_repeat());
    }

    // optional int32 m_profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FBSweepRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FBSweepRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FBSweepRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FBSweepRequest::MergeFrom(const GM_FBSweepRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_repeat()) {
      set_m_repeat(from.m_repeat());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FBSweepRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FBSweepRequest::CopyFrom(const GM_FBSweepRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FBSweepRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FBSweepRequest::Swap(GM_FBSweepRequest* other) {
  if (other != this) {
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_repeat_, other->m_repeat_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FBSweepRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FBSweepRequest_descriptor_;
  metadata.reflection = GM_FBSweepRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FBSweepReturn::kMFbtypeidFieldNumber;
const int GM_FBSweepReturn::kMSweepcountFieldNumber;
const int GM_FBSweepReturn::kMDropDataFieldNumber;
const int GM_FBSweepReturn::kMKillMonsterDataFieldNumber;
#endif  // !_MSC_VER

GM_FBSweepReturn::GM_FBSweepReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FBSweepReturn::InitAsDefaultInstance() {
}

GM_FBSweepReturn::GM_FBSweepReturn(const GM_FBSweepReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FBSweepReturn::SharedCtor() {
  _cached_size_ = 0;
  m_fbtypeid_ = 0;
  m_sweepcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FBSweepReturn::~GM_FBSweepReturn() {
  SharedDtor();
}

void GM_FBSweepReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FBSweepReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FBSweepReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FBSweepReturn_descriptor_;
}

const GM_FBSweepReturn& GM_FBSweepReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_FBSweepReturn* GM_FBSweepReturn::default_instance_ = NULL;

GM_FBSweepReturn* GM_FBSweepReturn::New() const {
  return new GM_FBSweepReturn;
}

void GM_FBSweepReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbtypeid_ = 0;
    m_sweepcount_ = 0;
  }
  m_dropdata_.Clear();
  m_killmonsterdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FBSweepReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fbtypeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_sweepcount;
        break;
      }

      // optional int32 m_sweepcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweepcount_)));
          set_has_m_sweepcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_DropData;
        break;
      }

      // repeated .GM_ItemDrop m_DropData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_DropData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_dropdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_DropData;
        if (input->ExpectTag(170)) goto parse_m_KillMonsterData;
        break;
      }

      // repeated .GM_ItemDrop m_KillMonsterData = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_KillMonsterData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_killmonsterdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_m_KillMonsterData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FBSweepReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fbtypeid = 1;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbtypeid(), output);
  }

  // optional int32 m_sweepcount = 2;
  if (has_m_sweepcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_sweepcount(), output);
  }

  // repeated .GM_ItemDrop m_DropData = 3;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_dropdata(i), output);
  }

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  for (int i = 0; i < this->m_killmonsterdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->m_killmonsterdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FBSweepReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fbtypeid = 1;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbtypeid(), target);
  }

  // optional int32 m_sweepcount = 2;
  if (has_m_sweepcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_sweepcount(), target);
  }

  // repeated .GM_ItemDrop m_DropData = 3;
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_dropdata(i), target);
  }

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  for (int i = 0; i < this->m_killmonsterdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->m_killmonsterdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FBSweepReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fbtypeid = 1;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 m_sweepcount = 2;
    if (has_m_sweepcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweepcount());
    }

  }
  // repeated .GM_ItemDrop m_DropData = 3;
  total_size += 1 * this->m_dropdata_size();
  for (int i = 0; i < this->m_dropdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_dropdata(i));
  }

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  total_size += 2 * this->m_killmonsterdata_size();
  for (int i = 0; i < this->m_killmonsterdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_killmonsterdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FBSweepReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FBSweepReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FBSweepReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FBSweepReturn::MergeFrom(const GM_FBSweepReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_dropdata_.MergeFrom(from.m_dropdata_);
  m_killmonsterdata_.MergeFrom(from.m_killmonsterdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_sweepcount()) {
      set_m_sweepcount(from.m_sweepcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FBSweepReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FBSweepReturn::CopyFrom(const GM_FBSweepReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FBSweepReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_dropdata_size(); i++) {
    if (!this->m_dropdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_killmonsterdata_size(); i++) {
    if (!this->m_killmonsterdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_FBSweepReturn::Swap(GM_FBSweepReturn* other) {
  if (other != this) {
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_sweepcount_, other->m_sweepcount_);
    m_dropdata_.Swap(&other->m_dropdata_);
    m_killmonsterdata_.Swap(&other->m_killmonsterdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FBSweepReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FBSweepReturn_descriptor_;
  metadata.reflection = GM_FBSweepReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetBattleInfo::kMRoleIDFieldNumber;
const int GM_PetBattleInfo::kMTypeIDFieldNumber;
const int GM_PetBattleInfo::kMPositionFieldNumber;
#endif  // !_MSC_VER

GM_PetBattleInfo::GM_PetBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetBattleInfo::InitAsDefaultInstance() {
}

GM_PetBattleInfo::GM_PetBattleInfo(const GM_PetBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_typeid_ = 0;
  m_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetBattleInfo::~GM_PetBattleInfo() {
  SharedDtor();
}

void GM_PetBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetBattleInfo_descriptor_;
}

const GM_PetBattleInfo& GM_PetBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_PetBattleInfo* GM_PetBattleInfo::default_instance_ = NULL;

GM_PetBattleInfo* GM_PetBattleInfo::New() const {
  return new GM_PetBattleInfo;
}

void GM_PetBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_typeid_ = 0;
    m_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_typeID;
        break;
      }

      // optional int32 m_typeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_typeID = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_typeid(), output);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_typeID = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_typeid(), target);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_typeID = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional int32 m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetBattleInfo::MergeFrom(const GM_PetBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetBattleInfo::CopyFrom(const GM_PetBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetBattleInfo::Swap(GM_PetBattleInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetBattleInfo_descriptor_;
  metadata.reflection = GM_PetBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllPetBattleInfo::kMCountFieldNumber;
const int GM_AllPetBattleInfo::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_AllPetBattleInfo::GM_AllPetBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllPetBattleInfo::InitAsDefaultInstance() {
}

GM_AllPetBattleInfo::GM_AllPetBattleInfo(const GM_AllPetBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllPetBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllPetBattleInfo::~GM_AllPetBattleInfo() {
  SharedDtor();
}

void GM_AllPetBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllPetBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllPetBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllPetBattleInfo_descriptor_;
}

const GM_AllPetBattleInfo& GM_AllPetBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_AllPetBattleInfo* GM_AllPetBattleInfo::default_instance_ = NULL;

GM_AllPetBattleInfo* GM_AllPetBattleInfo::New() const {
  return new GM_AllPetBattleInfo;
}

void GM_AllPetBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllPetBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Data;
        break;
      }

      // repeated .GM_PetBattleInfo m_Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllPetBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_PetBattleInfo m_Data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllPetBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_PetBattleInfo m_Data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllPetBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_PetBattleInfo m_Data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllPetBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllPetBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllPetBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllPetBattleInfo::MergeFrom(const GM_AllPetBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllPetBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllPetBattleInfo::CopyFrom(const GM_AllPetBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllPetBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllPetBattleInfo::Swap(GM_AllPetBattleInfo* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllPetBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllPetBattleInfo_descriptor_;
  metadata.reflection = GM_AllPetBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RealTime_SendPoint::kMPointFieldNumber;
const int GM_RealTime_SendPoint::kMTypeFieldNumber;
const int GM_RealTime_SendPoint::kMSerialkillFieldNumber;
const int GM_RealTime_SendPoint::kMAttacknameFieldNumber;
const int GM_RealTime_SendPoint::kMDienameFieldNumber;
const int GM_RealTime_SendPoint::kMBekilledidFieldNumber;
const int GM_RealTime_SendPoint::kMAttackpointFieldNumber;
const int GM_RealTime_SendPoint::kMBattlepointFieldNumber;
#endif  // !_MSC_VER

GM_RealTime_SendPoint::GM_RealTime_SendPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RealTime_SendPoint::InitAsDefaultInstance() {
}

GM_RealTime_SendPoint::GM_RealTime_SendPoint(const GM_RealTime_SendPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RealTime_SendPoint::SharedCtor() {
  _cached_size_ = 0;
  m_point_ = 0;
  m_type_ = 0;
  m_serialkill_ = 0;
  m_attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_diename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_bekilledid_ = 0;
  m_attackpoint_ = 0;
  m_battlepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RealTime_SendPoint::~GM_RealTime_SendPoint() {
  SharedDtor();
}

void GM_RealTime_SendPoint::SharedDtor() {
  if (m_attackname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_attackname_;
  }
  if (m_diename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_diename_;
  }
  if (this != default_instance_) {
  }
}

void GM_RealTime_SendPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RealTime_SendPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RealTime_SendPoint_descriptor_;
}

const GM_RealTime_SendPoint& GM_RealTime_SendPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_RealTime_SendPoint* GM_RealTime_SendPoint::default_instance_ = NULL;

GM_RealTime_SendPoint* GM_RealTime_SendPoint::New() const {
  return new GM_RealTime_SendPoint;
}

void GM_RealTime_SendPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_point_ = 0;
    m_type_ = 0;
    m_serialkill_ = 0;
    if (has_m_attackname()) {
      if (m_attackname_ != &::google::protobuf::internal::kEmptyString) {
        m_attackname_->clear();
      }
    }
    if (has_m_diename()) {
      if (m_diename_ != &::google::protobuf::internal::kEmptyString) {
        m_diename_->clear();
      }
    }
    m_bekilledid_ = 0;
    m_attackpoint_ = 0;
    m_battlepoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RealTime_SendPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_serialkill;
        break;
      }

      // optional int32 m_serialkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serialkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serialkill_)));
          set_has_m_serialkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attackname;
        break;
      }

      // optional string m_attackname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attackname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_attackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_attackname().data(), this->m_attackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_diename;
        break;
      }

      // optional string m_diename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_diename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_diename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_diename().data(), this->m_diename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_bekilledid;
        break;
      }

      // optional int32 m_bekilledid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bekilledid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bekilledid_)));
          set_has_m_bekilledid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_attackpoint;
        break;
      }

      // optional int32 m_attackpoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attackpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attackpoint_)));
          set_has_m_attackpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_battlepoint;
        break;
      }

      // optional int32 m_battlepoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_battlepoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battlepoint_)));
          set_has_m_battlepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RealTime_SendPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_point = 1;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_point(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_serialkill = 3;
  if (has_m_serialkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_serialkill(), output);
  }

  // optional string m_attackname = 4;
  if (has_m_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_attackname().data(), this->m_attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_attackname(), output);
  }

  // optional string m_diename = 5;
  if (has_m_diename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_diename().data(), this->m_diename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_diename(), output);
  }

  // optional int32 m_bekilledid = 6;
  if (has_m_bekilledid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bekilledid(), output);
  }

  // optional int32 m_attackpoint = 7;
  if (has_m_attackpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_attackpoint(), output);
  }

  // optional int32 m_battlepoint = 8;
  if (has_m_battlepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_battlepoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RealTime_SendPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_point = 1;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_point(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_serialkill = 3;
  if (has_m_serialkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_serialkill(), target);
  }

  // optional string m_attackname = 4;
  if (has_m_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_attackname().data(), this->m_attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_attackname(), target);
  }

  // optional string m_diename = 5;
  if (has_m_diename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_diename().data(), this->m_diename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_diename(), target);
  }

  // optional int32 m_bekilledid = 6;
  if (has_m_bekilledid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_bekilledid(), target);
  }

  // optional int32 m_attackpoint = 7;
  if (has_m_attackpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_attackpoint(), target);
  }

  // optional int32 m_battlepoint = 8;
  if (has_m_battlepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_battlepoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RealTime_SendPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_point = 1;
    if (has_m_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_serialkill = 3;
    if (has_m_serialkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serialkill());
    }

    // optional string m_attackname = 4;
    if (has_m_attackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_attackname());
    }

    // optional string m_diename = 5;
    if (has_m_diename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_diename());
    }

    // optional int32 m_bekilledid = 6;
    if (has_m_bekilledid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bekilledid());
    }

    // optional int32 m_attackpoint = 7;
    if (has_m_attackpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attackpoint());
    }

    // optional int32 m_battlepoint = 8;
    if (has_m_battlepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battlepoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RealTime_SendPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RealTime_SendPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RealTime_SendPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RealTime_SendPoint::MergeFrom(const GM_RealTime_SendPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_serialkill()) {
      set_m_serialkill(from.m_serialkill());
    }
    if (from.has_m_attackname()) {
      set_m_attackname(from.m_attackname());
    }
    if (from.has_m_diename()) {
      set_m_diename(from.m_diename());
    }
    if (from.has_m_bekilledid()) {
      set_m_bekilledid(from.m_bekilledid());
    }
    if (from.has_m_attackpoint()) {
      set_m_attackpoint(from.m_attackpoint());
    }
    if (from.has_m_battlepoint()) {
      set_m_battlepoint(from.m_battlepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RealTime_SendPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RealTime_SendPoint::CopyFrom(const GM_RealTime_SendPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RealTime_SendPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RealTime_SendPoint::Swap(GM_RealTime_SendPoint* other) {
  if (other != this) {
    std::swap(m_point_, other->m_point_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_serialkill_, other->m_serialkill_);
    std::swap(m_attackname_, other->m_attackname_);
    std::swap(m_diename_, other->m_diename_);
    std::swap(m_bekilledid_, other->m_bekilledid_);
    std::swap(m_attackpoint_, other->m_attackpoint_);
    std::swap(m_battlepoint_, other->m_battlepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RealTime_SendPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RealTime_SendPoint_descriptor_;
  metadata.reflection = GM_RealTime_SendPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NotifyBuff::kMRoleidFieldNumber;
const int GM_NotifyBuff::kMAttackidFieldNumber;
const int GM_NotifyBuff::kMBuffidFieldNumber;
const int GM_NotifyBuff::kMTimeFieldNumber;
const int GM_NotifyBuff::kMExtendFieldNumber;
#endif  // !_MSC_VER

GM_NotifyBuff::GM_NotifyBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NotifyBuff::InitAsDefaultInstance() {
}

GM_NotifyBuff::GM_NotifyBuff(const GM_NotifyBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NotifyBuff::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_attackid_ = 0;
  m_buffid_ = 0;
  m_time_ = 0;
  m_extend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NotifyBuff::~GM_NotifyBuff() {
  SharedDtor();
}

void GM_NotifyBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_NotifyBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NotifyBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NotifyBuff_descriptor_;
}

const GM_NotifyBuff& GM_NotifyBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_NotifyBuff* GM_NotifyBuff::default_instance_ = NULL;

GM_NotifyBuff* GM_NotifyBuff::New() const {
  return new GM_NotifyBuff;
}

void GM_NotifyBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_attackid_ = 0;
    m_buffid_ = 0;
    m_time_ = 0;
    m_extend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NotifyBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_attackid;
        break;
      }

      // optional int32 m_attackid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attackid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attackid_)));
          set_has_m_attackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_buffid;
        break;
      }

      // optional int32 m_buffid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buffid_)));
          set_has_m_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m_time;
        break;
      }

      // optional float m_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_extend;
        break;
      }

      // optional int32 m_extend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_extend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_extend_)));
          set_has_m_extend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NotifyBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_attackid = 2;
  if (has_m_attackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_attackid(), output);
  }

  // optional int32 m_buffid = 3;
  if (has_m_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_buffid(), output);
  }

  // optional float m_time = 4;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->m_time(), output);
  }

  // optional int32 m_extend = 5;
  if (has_m_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_extend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NotifyBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_attackid = 2;
  if (has_m_attackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_attackid(), target);
  }

  // optional int32 m_buffid = 3;
  if (has_m_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_buffid(), target);
  }

  // optional float m_time = 4;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->m_time(), target);
  }

  // optional int32 m_extend = 5;
  if (has_m_extend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_extend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NotifyBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_attackid = 2;
    if (has_m_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attackid());
    }

    // optional int32 m_buffid = 3;
    if (has_m_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buffid());
    }

    // optional float m_time = 4;
    if (has_m_time()) {
      total_size += 1 + 4;
    }

    // optional int32 m_extend = 5;
    if (has_m_extend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_extend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NotifyBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NotifyBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NotifyBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NotifyBuff::MergeFrom(const GM_NotifyBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_attackid()) {
      set_m_attackid(from.m_attackid());
    }
    if (from.has_m_buffid()) {
      set_m_buffid(from.m_buffid());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_extend()) {
      set_m_extend(from.m_extend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NotifyBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NotifyBuff::CopyFrom(const GM_NotifyBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NotifyBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_NotifyBuff::Swap(GM_NotifyBuff* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_attackid_, other->m_attackid_);
    std::swap(m_buffid_, other->m_buffid_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_extend_, other->m_extend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NotifyBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NotifyBuff_descriptor_;
  metadata.reflection = GM_NotifyBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClientHpNotify::kMAttackIDFieldNumber;
const int GM_ClientHpNotify::kMBeAttackIDFieldNumber;
const int GM_ClientHpNotify::kMHurtValFieldNumber;
const int GM_ClientHpNotify::kMHurtTypeFieldNumber;
#endif  // !_MSC_VER

GM_ClientHpNotify::GM_ClientHpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClientHpNotify::InitAsDefaultInstance() {
}

GM_ClientHpNotify::GM_ClientHpNotify(const GM_ClientHpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClientHpNotify::SharedCtor() {
  _cached_size_ = 0;
  m_attackid_ = 0;
  m_beattackid_ = 0;
  m_hurtval_ = 0;
  m_hurttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClientHpNotify::~GM_ClientHpNotify() {
  SharedDtor();
}

void GM_ClientHpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClientHpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClientHpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClientHpNotify_descriptor_;
}

const GM_ClientHpNotify& GM_ClientHpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ClientHpNotify* GM_ClientHpNotify::default_instance_ = NULL;

GM_ClientHpNotify* GM_ClientHpNotify::New() const {
  return new GM_ClientHpNotify;
}

void GM_ClientHpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_attackid_ = 0;
    m_beattackid_ = 0;
    m_hurtval_ = 0;
    m_hurttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClientHpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_attackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attackid_)));
          set_has_m_attackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_beAttackID;
        break;
      }

      // optional int32 m_beAttackID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_beAttackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_beattackid_)));
          set_has_m_beattackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_hurtVal;
        break;
      }

      // optional int32 m_hurtVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hurtVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hurtval_)));
          set_has_m_hurtval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_hurtType;
        break;
      }

      // optional int32 m_hurtType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hurtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hurttype_)));
          set_has_m_hurttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClientHpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_attackID = 1;
  if (has_m_attackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_attackid(), output);
  }

  // optional int32 m_beAttackID = 2;
  if (has_m_beattackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_beattackid(), output);
  }

  // optional int32 m_hurtVal = 3;
  if (has_m_hurtval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_hurtval(), output);
  }

  // optional int32 m_hurtType = 4;
  if (has_m_hurttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_hurttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClientHpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_attackID = 1;
  if (has_m_attackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_attackid(), target);
  }

  // optional int32 m_beAttackID = 2;
  if (has_m_beattackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_beattackid(), target);
  }

  // optional int32 m_hurtVal = 3;
  if (has_m_hurtval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_hurtval(), target);
  }

  // optional int32 m_hurtType = 4;
  if (has_m_hurttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_hurttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClientHpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_attackID = 1;
    if (has_m_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attackid());
    }

    // optional int32 m_beAttackID = 2;
    if (has_m_beattackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_beattackid());
    }

    // optional int32 m_hurtVal = 3;
    if (has_m_hurtval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hurtval());
    }

    // optional int32 m_hurtType = 4;
    if (has_m_hurttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hurttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClientHpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClientHpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClientHpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClientHpNotify::MergeFrom(const GM_ClientHpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_attackid()) {
      set_m_attackid(from.m_attackid());
    }
    if (from.has_m_beattackid()) {
      set_m_beattackid(from.m_beattackid());
    }
    if (from.has_m_hurtval()) {
      set_m_hurtval(from.m_hurtval());
    }
    if (from.has_m_hurttype()) {
      set_m_hurttype(from.m_hurttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClientHpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClientHpNotify::CopyFrom(const GM_ClientHpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClientHpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ClientHpNotify::Swap(GM_ClientHpNotify* other) {
  if (other != this) {
    std::swap(m_attackid_, other->m_attackid_);
    std::swap(m_beattackid_, other->m_beattackid_);
    std::swap(m_hurtval_, other->m_hurtval_);
    std::swap(m_hurttype_, other->m_hurttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClientHpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClientHpNotify_descriptor_;
  metadata.reflection = GM_ClientHpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClientMpNotify::kMRoleidFieldNumber;
const int GM_ClientMpNotify::kMValueFieldNumber;
#endif  // !_MSC_VER

GM_ClientMpNotify::GM_ClientMpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClientMpNotify::InitAsDefaultInstance() {
}

GM_ClientMpNotify::GM_ClientMpNotify(const GM_ClientMpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClientMpNotify::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClientMpNotify::~GM_ClientMpNotify() {
  SharedDtor();
}

void GM_ClientMpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClientMpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClientMpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClientMpNotify_descriptor_;
}

const GM_ClientMpNotify& GM_ClientMpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ClientMpNotify* GM_ClientMpNotify::default_instance_ = NULL;

GM_ClientMpNotify* GM_ClientMpNotify::New() const {
  return new GM_ClientMpNotify;
}

void GM_ClientMpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClientMpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClientMpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClientMpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClientMpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClientMpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClientMpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClientMpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClientMpNotify::MergeFrom(const GM_ClientMpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClientMpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClientMpNotify::CopyFrom(const GM_ClientMpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClientMpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ClientMpNotify::Swap(GM_ClientMpNotify* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClientMpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClientMpNotify_descriptor_;
  metadata.reflection = GM_ClientMpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Notify_Specialskill::kMRoleidFieldNumber;
const int GM_Notify_Specialskill::kMTypeFieldNumber;
#endif  // !_MSC_VER

GM_Notify_Specialskill::GM_Notify_Specialskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Notify_Specialskill::InitAsDefaultInstance() {
}

GM_Notify_Specialskill::GM_Notify_Specialskill(const GM_Notify_Specialskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Notify_Specialskill::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Notify_Specialskill::~GM_Notify_Specialskill() {
  SharedDtor();
}

void GM_Notify_Specialskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Notify_Specialskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Notify_Specialskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Notify_Specialskill_descriptor_;
}

const GM_Notify_Specialskill& GM_Notify_Specialskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_Notify_Specialskill* GM_Notify_Specialskill::default_instance_ = NULL;

GM_Notify_Specialskill* GM_Notify_Specialskill::New() const {
  return new GM_Notify_Specialskill;
}

void GM_Notify_Specialskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Notify_Specialskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Notify_Specialskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Notify_Specialskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Notify_Specialskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Notify_Specialskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Notify_Specialskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Notify_Specialskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Notify_Specialskill::MergeFrom(const GM_Notify_Specialskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Notify_Specialskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Notify_Specialskill::CopyFrom(const GM_Notify_Specialskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Notify_Specialskill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Notify_Specialskill::Swap(GM_Notify_Specialskill* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Notify_Specialskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Notify_Specialskill_descriptor_;
  metadata.reflection = GM_Notify_Specialskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CenterBattle::kMFbIpFieldNumber;
const int GM_CenterBattle::kMRolegmidFieldNumber;
#endif  // !_MSC_VER

GM_CenterBattle::GM_CenterBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CenterBattle::InitAsDefaultInstance() {
}

GM_CenterBattle::GM_CenterBattle(const GM_CenterBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CenterBattle::SharedCtor() {
  _cached_size_ = 0;
  m_fbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rolegmid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CenterBattle::~GM_CenterBattle() {
  SharedDtor();
}

void GM_CenterBattle::SharedDtor() {
  if (m_fbip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbip_;
  }
  if (this != default_instance_) {
  }
}

void GM_CenterBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CenterBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CenterBattle_descriptor_;
}

const GM_CenterBattle& GM_CenterBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_CenterBattle* GM_CenterBattle::default_instance_ = NULL;

GM_CenterBattle* GM_CenterBattle::New() const {
  return new GM_CenterBattle;
}

void GM_CenterBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_fbip()) {
      if (m_fbip_ != &::google::protobuf::internal::kEmptyString) {
        m_fbip_->clear();
      }
    }
    m_rolegmid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CenterBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_fbIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fbip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fbip().data(), this->m_fbip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rolegmid;
        break;
      }

      // optional int32 m_rolegmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rolegmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolegmid_)));
          set_has_m_rolegmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CenterBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_fbIp = 1;
  if (has_m_fbip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbip().data(), this->m_fbip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_fbip(), output);
  }

  // optional int32 m_rolegmid = 2;
  if (has_m_rolegmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rolegmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CenterBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_fbIp = 1;
  if (has_m_fbip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fbip().data(), this->m_fbip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_fbip(), target);
  }

  // optional int32 m_rolegmid = 2;
  if (has_m_rolegmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rolegmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CenterBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_fbIp = 1;
    if (has_m_fbip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fbip());
    }

    // optional int32 m_rolegmid = 2;
    if (has_m_rolegmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolegmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CenterBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CenterBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CenterBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CenterBattle::MergeFrom(const GM_CenterBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbip()) {
      set_m_fbip(from.m_fbip());
    }
    if (from.has_m_rolegmid()) {
      set_m_rolegmid(from.m_rolegmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CenterBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CenterBattle::CopyFrom(const GM_CenterBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CenterBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CenterBattle::Swap(GM_CenterBattle* other) {
  if (other != this) {
    std::swap(m_fbip_, other->m_fbip_);
    std::swap(m_rolegmid_, other->m_rolegmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CenterBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CenterBattle_descriptor_;
  metadata.reflection = GM_CenterBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_TeamMatchData::kMAreanIDFieldNumber;
const int SM_TeamMatchData::kMNleaderidFieldNumber;
const int SM_TeamMatchData::kMNfbtypeidFieldNumber;
const int SM_TeamMatchData::kMNmembernumFieldNumber;
const int SM_TeamMatchData::kMMemberFieldNumber;
#endif  // !_MSC_VER

SM_TeamMatchData::SM_TeamMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_TeamMatchData::InitAsDefaultInstance() {
}

SM_TeamMatchData::SM_TeamMatchData(const SM_TeamMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_TeamMatchData::SharedCtor() {
  _cached_size_ = 0;
  m_areanid_ = 0;
  m_nleaderid_ = 0;
  m_nfbtypeid_ = 0;
  m_nmembernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_TeamMatchData::~SM_TeamMatchData() {
  SharedDtor();
}

void SM_TeamMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_TeamMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_TeamMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_TeamMatchData_descriptor_;
}

const SM_TeamMatchData& SM_TeamMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SM_TeamMatchData* SM_TeamMatchData::default_instance_ = NULL;

SM_TeamMatchData* SM_TeamMatchData::New() const {
  return new SM_TeamMatchData;
}

void SM_TeamMatchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_areanid_ = 0;
    m_nleaderid_ = 0;
    m_nfbtypeid_ = 0;
    m_nmembernum_ = 0;
  }
  m_member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_TeamMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_areanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areanid_)));
          set_has_m_areanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nleaderid;
        break;
      }

      // optional int32 m_nleaderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nleaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nleaderid_)));
          set_has_m_nleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_nfbtypeid;
        break;
      }

      // optional int32 m_nfbtypeid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nfbtypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nfbtypeid_)));
          set_has_m_nfbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_nmembernum;
        break;
      }

      // optional int32 m_nmembernum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nmembernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nmembernum_)));
          set_has_m_nmembernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_member;
        break;
      }

      // repeated .SM_BattleRequest m_member = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_TeamMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_areanID = 1;
  if (has_m_areanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_areanid(), output);
  }

  // optional int32 m_nleaderid = 3;
  if (has_m_nleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nleaderid(), output);
  }

  // optional int32 m_nfbtypeid = 4;
  if (has_m_nfbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_nfbtypeid(), output);
  }

  // optional int32 m_nmembernum = 5;
  if (has_m_nmembernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_nmembernum(), output);
  }

  // repeated .SM_BattleRequest m_member = 20;
  for (int i = 0; i < this->m_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_TeamMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_areanID = 1;
  if (has_m_areanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_areanid(), target);
  }

  // optional int32 m_nleaderid = 3;
  if (has_m_nleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_nleaderid(), target);
  }

  // optional int32 m_nfbtypeid = 4;
  if (has_m_nfbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_nfbtypeid(), target);
  }

  // optional int32 m_nmembernum = 5;
  if (has_m_nmembernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_nmembernum(), target);
  }

  // repeated .SM_BattleRequest m_member = 20;
  for (int i = 0; i < this->m_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_TeamMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_areanID = 1;
    if (has_m_areanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areanid());
    }

    // optional int32 m_nleaderid = 3;
    if (has_m_nleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nleaderid());
    }

    // optional int32 m_nfbtypeid = 4;
    if (has_m_nfbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nfbtypeid());
    }

    // optional int32 m_nmembernum = 5;
    if (has_m_nmembernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nmembernum());
    }

  }
  // repeated .SM_BattleRequest m_member = 20;
  total_size += 2 * this->m_member_size();
  for (int i = 0; i < this->m_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_TeamMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_TeamMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_TeamMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_TeamMatchData::MergeFrom(const SM_TeamMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_member_.MergeFrom(from.m_member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_areanid()) {
      set_m_areanid(from.m_areanid());
    }
    if (from.has_m_nleaderid()) {
      set_m_nleaderid(from.m_nleaderid());
    }
    if (from.has_m_nfbtypeid()) {
      set_m_nfbtypeid(from.m_nfbtypeid());
    }
    if (from.has_m_nmembernum()) {
      set_m_nmembernum(from.m_nmembernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_TeamMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_TeamMatchData::CopyFrom(const SM_TeamMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_TeamMatchData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_member_size(); i++) {
    if (!this->m_member(i).IsInitialized()) return false;
  }
  return true;
}

void SM_TeamMatchData::Swap(SM_TeamMatchData* other) {
  if (other != this) {
    std::swap(m_areanid_, other->m_areanid_);
    std::swap(m_nleaderid_, other->m_nleaderid_);
    std::swap(m_nfbtypeid_, other->m_nfbtypeid_);
    std::swap(m_nmembernum_, other->m_nmembernum_);
    m_member_.Swap(&other->m_member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_TeamMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_TeamMatchData_descriptor_;
  metadata.reflection = SM_TeamMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ClientRelive::kMRoleidFieldNumber;
const int GM_ClientRelive::kMFbidFieldNumber;
const int GM_ClientRelive::kMHpPercentFieldNumber;
const int GM_ClientRelive::kMAttackPercentFieldNumber;
#endif  // !_MSC_VER

GM_ClientRelive::GM_ClientRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ClientRelive::InitAsDefaultInstance() {
}

GM_ClientRelive::GM_ClientRelive(const GM_ClientRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ClientRelive::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_fbid_ = 0;
  m_hppercent_ = 0;
  m_attackpercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ClientRelive::~GM_ClientRelive() {
  SharedDtor();
}

void GM_ClientRelive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ClientRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ClientRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ClientRelive_descriptor_;
}

const GM_ClientRelive& GM_ClientRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

GM_ClientRelive* GM_ClientRelive::default_instance_ = NULL;

GM_ClientRelive* GM_ClientRelive::New() const {
  return new GM_ClientRelive;
}

void GM_ClientRelive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_fbid_ = 0;
    m_hppercent_ = 0;
    m_attackpercent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ClientRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fbid;
        break;
      }

      // optional int32 m_fbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_hpPercent;
        break;
      }

      // optional int32 m_hpPercent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hpPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hppercent_)));
          set_has_m_hppercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_attackPercent;
        break;
      }

      // optional int32 m_attackPercent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attackPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attackpercent_)));
          set_has_m_attackpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ClientRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_fbid = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // optional int32 m_hpPercent = 3;
  if (has_m_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_hppercent(), output);
  }

  // optional int32 m_attackPercent = 4;
  if (has_m_attackpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_attackpercent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ClientRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_fbid = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // optional int32 m_hpPercent = 3;
  if (has_m_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_hppercent(), target);
  }

  // optional int32 m_attackPercent = 4;
  if (has_m_attackpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_attackpercent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ClientRelive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_fbid = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // optional int32 m_hpPercent = 3;
    if (has_m_hppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hppercent());
    }

    // optional int32 m_attackPercent = 4;
    if (has_m_attackpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attackpercent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ClientRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ClientRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ClientRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ClientRelive::MergeFrom(const GM_ClientRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_hppercent()) {
      set_m_hppercent(from.m_hppercent());
    }
    if (from.has_m_attackpercent()) {
      set_m_attackpercent(from.m_attackpercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ClientRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ClientRelive::CopyFrom(const GM_ClientRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ClientRelive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ClientRelive::Swap(GM_ClientRelive* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_hppercent_, other->m_hppercent_);
    std::swap(m_attackpercent_, other->m_attackpercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ClientRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ClientRelive_descriptor_;
  metadata.reflection = GM_ClientRelive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_majiang_role_battleresult::kMRoleidFieldNumber;
const int SM_majiang_role_battleresult::kMAllGoldFieldNumber;
const int SM_majiang_role_battleresult::kMWinGoldFieldNumber;
const int SM_majiang_role_battleresult::kMCharacterFieldNumber;
const int SM_majiang_role_battleresult::kMWinTypeFieldNumber;
const int SM_majiang_role_battleresult::kMSjChongGuanFieldNumber;
const int SM_majiang_role_battleresult::kMSjBaWangFieldNumber;
const int SM_majiang_role_battleresult::kMXjChongGuanFieldNumber;
const int SM_majiang_role_battleresult::kMXjBaWangFieldNumber;
const int SM_majiang_role_battleresult::kMCartypeFieldNumber;
const int SM_majiang_role_battleresult::kMRoomIdFieldNumber;
const int SM_majiang_role_battleresult::kMRoomBnoteFieldNumber;
const int SM_majiang_role_battleresult::kMWinTypeFieldNumber_13;
const int SM_majiang_role_battleresult::kMIsBlastingFieldNumber;
const int SM_majiang_role_battleresult::kMIsWashedoffFieldNumber;
const int SM_majiang_role_battleresult::kMLeftCardFieldNumber;
const int SM_majiang_role_battleresult::kMChowFieldNumber;
const int SM_majiang_role_battleresult::kMPongFieldNumber;
const int SM_majiang_role_battleresult::kMExposedFieldNumber;
const int SM_majiang_role_battleresult::kMConcealedKongFieldNumber;
const int SM_majiang_role_battleresult::kMPatchFieldNumber;
const int SM_majiang_role_battleresult::kMUpScoreFieldNumber;
const int SM_majiang_role_battleresult::kMDownScoreFieldNumber;
const int SM_majiang_role_battleresult::kMResultFieldNumber;
const int SM_majiang_role_battleresult::kMExposedScoreFieldNumber;
const int SM_majiang_role_battleresult::kMSmileScoreFieldNumber;
const int SM_majiang_role_battleresult::kMMinesScoreFieldNumber;
const int SM_majiang_role_battleresult::kMSongScoreFieldNumber;
const int SM_majiang_role_battleresult::kMHuScoreFieldNumber;
const int SM_majiang_role_battleresult::kGCardTypeFieldNumber;
const int SM_majiang_role_battleresult::kGPlayerNumFieldNumber;
const int SM_majiang_role_battleresult::kGRolecardTypeFieldNumber;
const int SM_majiang_role_battleresult::kGIsWinFieldNumber;
const int SM_majiang_role_battleresult::kGIsDealerFieldNumber;
const int SM_majiang_role_battleresult::kGIsDiscardFieldNumber;
const int SM_majiang_role_battleresult::kGFillCountsFieldNumber;
const int SM_majiang_role_battleresult::kGCompareCountsFieldNumber;
const int SM_majiang_role_battleresult::kGLookCountsFieldNumber;
const int SM_majiang_role_battleresult::kGCallCountsFieldNumber;
const int SM_majiang_role_battleresult::kGRoleCountsFieldNumber;
const int SM_majiang_role_battleresult::kGTotalCountsFieldNumber;
const int SM_majiang_role_battleresult::kGExitTypeFieldNumber;
#endif  // !_MSC_VER

SM_majiang_role_battleresult::SM_majiang_role_battleresult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_majiang_role_battleresult::InitAsDefaultInstance() {
}

SM_majiang_role_battleresult::SM_majiang_role_battleresult(const SM_majiang_role_battleresult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_majiang_role_battleresult::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_allgold_ = GOOGLE_LONGLONG(0);
  m_wingold_ = GOOGLE_LONGLONG(0);
  m_character_ = 0;
  m_wintype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sjchongguan_ = 0;
  m_sjbawang_ = 0;
  m_xjchongguan_ = 0;
  m_xjbawang_ = 0;
  m_cartype_ = 0;
  m_room_id_ = 0;
  m_room_bnote_ = 0;
  m_win_type_ = 0;
  m_is_blasting_ = 0;
  m_is_washedoff_ = 0;
  m_left_card_ = 0;
  m_chow_ = 0;
  m_pong_ = 0;
  m_exposed_ = 0;
  m_concealed_kong_ = 0;
  m_patch_ = 0;
  m_up_score_ = 0;
  m_down_score_ = 0;
  m_result_ = 0;
  m_exposed_score_ = 0;
  m_smile_score_ = 0;
  m_mines_score_ = 0;
  m_song_score_ = 0;
  m_hu_score_ = 0;
  g_card_type_ = 0;
  g_player_num_ = 0;
  g_rolecard_type_ = 0;
  g_is_win_ = 0;
  g_is_dealer_ = 0;
  g_is_discard_ = 0;
  g_fill_counts_ = 0;
  g_compare_counts_ = 0;
  g_look_counts_ = 0;
  g_call_counts_ = 0;
  g_role_counts_ = 0;
  g_total_counts_ = 0;
  g_exit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_majiang_role_battleresult::~SM_majiang_role_battleresult() {
  SharedDtor();
}

void SM_majiang_role_battleresult::SharedDtor() {
  if (m_wintype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wintype_;
  }
  if (this != default_instance_) {
  }
}

void SM_majiang_role_battleresult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_majiang_role_battleresult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_majiang_role_battleresult_descriptor_;
}

const SM_majiang_role_battleresult& SM_majiang_role_battleresult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SM_majiang_role_battleresult* SM_majiang_role_battleresult::default_instance_ = NULL;

SM_majiang_role_battleresult* SM_majiang_role_battleresult::New() const {
  return new SM_majiang_role_battleresult;
}

void SM_majiang_role_battleresult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_allgold_ = GOOGLE_LONGLONG(0);
    m_wingold_ = GOOGLE_LONGLONG(0);
    m_character_ = 0;
    if (has_m_wintype()) {
      if (m_wintype_ != &::google::protobuf::internal::kEmptyString) {
        m_wintype_->clear();
      }
    }
    m_sjchongguan_ = 0;
    m_sjbawang_ = 0;
    m_xjchongguan_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_xjbawang_ = 0;
    m_cartype_ = 0;
    m_room_id_ = 0;
    m_room_bnote_ = 0;
    m_win_type_ = 0;
    m_is_blasting_ = 0;
    m_is_washedoff_ = 0;
    m_left_card_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_chow_ = 0;
    m_pong_ = 0;
    m_exposed_ = 0;
    m_concealed_kong_ = 0;
    m_patch_ = 0;
    m_up_score_ = 0;
    m_down_score_ = 0;
    m_result_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_exposed_score_ = 0;
    m_smile_score_ = 0;
    m_mines_score_ = 0;
    m_song_score_ = 0;
    m_hu_score_ = 0;
    g_card_type_ = 0;
    g_player_num_ = 0;
    g_rolecard_type_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    g_is_win_ = 0;
    g_is_dealer_ = 0;
    g_is_discard_ = 0;
    g_fill_counts_ = 0;
    g_compare_counts_ = 0;
    g_look_counts_ = 0;
    g_call_counts_ = 0;
    g_role_counts_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    g_total_counts_ = 0;
    g_exit_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_majiang_role_battleresult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_allGold;
        break;
      }

      // optional int64 m_allGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_allGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_allgold_)));
          set_has_m_allgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_winGold;
        break;
      }

      // optional int64 m_winGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_wingold_)));
          set_has_m_wingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_character;
        break;
      }

      // optional int32 m_character = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_character_)));
          set_has_m_character();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_winType;
        break;
      }

      // optional string m_winType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_winType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_wintype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_wintype().data(), this->m_wintype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_sjChongGuan;
        break;
      }

      // optional int32 m_sjChongGuan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sjChongGuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sjchongguan_)));
          set_has_m_sjchongguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_sjBaWang;
        break;
      }

      // optional int32 m_sjBaWang = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sjBaWang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sjbawang_)));
          set_has_m_sjbawang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_xjChongGuan;
        break;
      }

      // optional int32 m_xjChongGuan = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xjChongGuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjchongguan_)));
          set_has_m_xjchongguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_xjBaWang;
        break;
      }

      // optional int32 m_xjBaWang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_xjBaWang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_xjbawang_)));
          set_has_m_xjbawang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_cartype;
        break;
      }

      // optional int32 m_cartype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cartype_)));
          set_has_m_cartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_room_id;
        break;
      }

      // optional int32 m_room_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_room_id_)));
          set_has_m_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_room_bnote;
        break;
      }

      // optional int32 m_room_bnote = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_room_bnote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_room_bnote_)));
          set_has_m_room_bnote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_win_type;
        break;
      }

      // optional int32 m_win_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_win_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_win_type_)));
          set_has_m_win_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_is_blasting;
        break;
      }

      // optional int32 m_is_blasting = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_is_blasting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_is_blasting_)));
          set_has_m_is_blasting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_is_washedoff;
        break;
      }

      // optional int32 m_is_washedoff = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_is_washedoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_is_washedoff_)));
          set_has_m_is_washedoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_left_card;
        break;
      }

      // optional int32 m_left_card = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_left_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_left_card_)));
          set_has_m_left_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_chow;
        break;
      }

      // optional int32 m_chow = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_chow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chow_)));
          set_has_m_chow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_pong;
        break;
      }

      // optional int32 m_pong = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pong_)));
          set_has_m_pong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_exposed;
        break;
      }

      // optional int32 m_exposed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exposed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exposed_)));
          set_has_m_exposed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_concealed_kong;
        break;
      }

      // optional int32 m_concealed_kong = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_concealed_kong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_concealed_kong_)));
          set_has_m_concealed_kong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_patch;
        break;
      }

      // optional int32 m_patch = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_patch_)));
          set_has_m_patch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_up_score;
        break;
      }

      // optional int32 m_up_score = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_up_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_up_score_)));
          set_has_m_up_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_down_score;
        break;
      }

      // optional int32 m_down_score = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_down_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_down_score_)));
          set_has_m_down_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_result;
        break;
      }

      // optional int32 m_result = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_Exposed_score;
        break;
      }

      // optional int32 m_Exposed_score = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Exposed_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exposed_score_)));
          set_has_m_exposed_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_smile_score;
        break;
      }

      // optional int32 m_smile_score = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_smile_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_smile_score_)));
          set_has_m_smile_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_mines_score;
        break;
      }

      // optional int32 m_mines_score = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mines_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mines_score_)));
          set_has_m_mines_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_song_score;
        break;
      }

      // optional int32 m_song_score = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_song_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_song_score_)));
          set_has_m_song_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_hu_score;
        break;
      }

      // optional int32 m_hu_score = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hu_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hu_score_)));
          set_has_m_hu_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_g_card_type;
        break;
      }

      // optional int32 g_card_type = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_card_type_)));
          set_has_g_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_g_player_num;
        break;
      }

      // optional int32 g_player_num = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_player_num_)));
          set_has_g_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_g_rolecard_type;
        break;
      }

      // optional int32 g_rolecard_type = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_rolecard_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_rolecard_type_)));
          set_has_g_rolecard_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_g_is_win;
        break;
      }

      // optional int32 g_is_win = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_is_win_)));
          set_has_g_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_g_is_dealer;
        break;
      }

      // optional int32 g_is_dealer = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_is_dealer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_is_dealer_)));
          set_has_g_is_dealer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_g_is_discard;
        break;
      }

      // optional int32 g_is_discard = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_is_discard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_is_discard_)));
          set_has_g_is_discard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_g_fill_counts;
        break;
      }

      // optional int32 g_fill_counts = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_fill_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_fill_counts_)));
          set_has_g_fill_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_g_compare_counts;
        break;
      }

      // optional int32 g_compare_counts = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_compare_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_compare_counts_)));
          set_has_g_compare_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_g_look_counts;
        break;
      }

      // optional int32 g_look_counts = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_look_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_look_counts_)));
          set_has_g_look_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_g_call_counts;
        break;
      }

      // optional int32 g_call_counts = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_call_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_call_counts_)));
          set_has_g_call_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_g_role_counts;
        break;
      }

      // optional int32 g_role_counts = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_role_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_role_counts_)));
          set_has_g_role_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_g_total_counts;
        break;
      }

      // optional int32 g_total_counts = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_total_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_total_counts_)));
          set_has_g_total_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_g_exit_type;
        break;
      }

      // optional int32 g_exit_type = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g_exit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_exit_type_)));
          set_has_g_exit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_majiang_role_battleresult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int64 m_allGold = 2;
  if (has_m_allgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_allgold(), output);
  }

  // optional int64 m_winGold = 3;
  if (has_m_wingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_wingold(), output);
  }

  // optional int32 m_character = 4;
  if (has_m_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_character(), output);
  }

  // optional string m_winType = 5;
  if (has_m_wintype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wintype().data(), this->m_wintype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_wintype(), output);
  }

  // optional int32 m_sjChongGuan = 6;
  if (has_m_sjchongguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_sjchongguan(), output);
  }

  // optional int32 m_sjBaWang = 7;
  if (has_m_sjbawang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_sjbawang(), output);
  }

  // optional int32 m_xjChongGuan = 8;
  if (has_m_xjchongguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_xjchongguan(), output);
  }

  // optional int32 m_xjBaWang = 9;
  if (has_m_xjbawang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_xjbawang(), output);
  }

  // optional int32 m_cartype = 10;
  if (has_m_cartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_cartype(), output);
  }

  // optional int32 m_room_id = 11;
  if (has_m_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_room_id(), output);
  }

  // optional int32 m_room_bnote = 12;
  if (has_m_room_bnote()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_room_bnote(), output);
  }

  // optional int32 m_win_type = 13;
  if (has_m_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_win_type(), output);
  }

  // optional int32 m_is_blasting = 14;
  if (has_m_is_blasting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_is_blasting(), output);
  }

  // optional int32 m_is_washedoff = 15;
  if (has_m_is_washedoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_is_washedoff(), output);
  }

  // optional int32 m_left_card = 16;
  if (has_m_left_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_left_card(), output);
  }

  // optional int32 m_chow = 17;
  if (has_m_chow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_chow(), output);
  }

  // optional int32 m_pong = 18;
  if (has_m_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_pong(), output);
  }

  // optional int32 m_exposed = 19;
  if (has_m_exposed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_exposed(), output);
  }

  // optional int32 m_concealed_kong = 20;
  if (has_m_concealed_kong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_concealed_kong(), output);
  }

  // optional int32 m_patch = 21;
  if (has_m_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_patch(), output);
  }

  // optional int32 m_up_score = 22;
  if (has_m_up_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_up_score(), output);
  }

  // optional int32 m_down_score = 23;
  if (has_m_down_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_down_score(), output);
  }

  // optional int32 m_result = 24;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_result(), output);
  }

  // optional int32 m_Exposed_score = 25;
  if (has_m_exposed_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_exposed_score(), output);
  }

  // optional int32 m_smile_score = 26;
  if (has_m_smile_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_smile_score(), output);
  }

  // optional int32 m_mines_score = 27;
  if (has_m_mines_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_mines_score(), output);
  }

  // optional int32 m_song_score = 28;
  if (has_m_song_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_song_score(), output);
  }

  // optional int32 m_hu_score = 29;
  if (has_m_hu_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->m_hu_score(), output);
  }

  // optional int32 g_card_type = 30;
  if (has_g_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->g_card_type(), output);
  }

  // optional int32 g_player_num = 31;
  if (has_g_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->g_player_num(), output);
  }

  // optional int32 g_rolecard_type = 32;
  if (has_g_rolecard_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->g_rolecard_type(), output);
  }

  // optional int32 g_is_win = 33;
  if (has_g_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->g_is_win(), output);
  }

  // optional int32 g_is_dealer = 34;
  if (has_g_is_dealer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->g_is_dealer(), output);
  }

  // optional int32 g_is_discard = 35;
  if (has_g_is_discard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->g_is_discard(), output);
  }

  // optional int32 g_fill_counts = 36;
  if (has_g_fill_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->g_fill_counts(), output);
  }

  // optional int32 g_compare_counts = 37;
  if (has_g_compare_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->g_compare_counts(), output);
  }

  // optional int32 g_look_counts = 38;
  if (has_g_look_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->g_look_counts(), output);
  }

  // optional int32 g_call_counts = 39;
  if (has_g_call_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->g_call_counts(), output);
  }

  // optional int32 g_role_counts = 40;
  if (has_g_role_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->g_role_counts(), output);
  }

  // optional int32 g_total_counts = 41;
  if (has_g_total_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->g_total_counts(), output);
  }

  // optional int32 g_exit_type = 42;
  if (has_g_exit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->g_exit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_majiang_role_battleresult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int64 m_allGold = 2;
  if (has_m_allgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_allgold(), target);
  }

  // optional int64 m_winGold = 3;
  if (has_m_wingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_wingold(), target);
  }

  // optional int32 m_character = 4;
  if (has_m_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_character(), target);
  }

  // optional string m_winType = 5;
  if (has_m_wintype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_wintype().data(), this->m_wintype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_wintype(), target);
  }

  // optional int32 m_sjChongGuan = 6;
  if (has_m_sjchongguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_sjchongguan(), target);
  }

  // optional int32 m_sjBaWang = 7;
  if (has_m_sjbawang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_sjbawang(), target);
  }

  // optional int32 m_xjChongGuan = 8;
  if (has_m_xjchongguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_xjchongguan(), target);
  }

  // optional int32 m_xjBaWang = 9;
  if (has_m_xjbawang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_xjbawang(), target);
  }

  // optional int32 m_cartype = 10;
  if (has_m_cartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_cartype(), target);
  }

  // optional int32 m_room_id = 11;
  if (has_m_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_room_id(), target);
  }

  // optional int32 m_room_bnote = 12;
  if (has_m_room_bnote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_room_bnote(), target);
  }

  // optional int32 m_win_type = 13;
  if (has_m_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_win_type(), target);
  }

  // optional int32 m_is_blasting = 14;
  if (has_m_is_blasting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_is_blasting(), target);
  }

  // optional int32 m_is_washedoff = 15;
  if (has_m_is_washedoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_is_washedoff(), target);
  }

  // optional int32 m_left_card = 16;
  if (has_m_left_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_left_card(), target);
  }

  // optional int32 m_chow = 17;
  if (has_m_chow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_chow(), target);
  }

  // optional int32 m_pong = 18;
  if (has_m_pong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_pong(), target);
  }

  // optional int32 m_exposed = 19;
  if (has_m_exposed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_exposed(), target);
  }

  // optional int32 m_concealed_kong = 20;
  if (has_m_concealed_kong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_concealed_kong(), target);
  }

  // optional int32 m_patch = 21;
  if (has_m_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_patch(), target);
  }

  // optional int32 m_up_score = 22;
  if (has_m_up_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_up_score(), target);
  }

  // optional int32 m_down_score = 23;
  if (has_m_down_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_down_score(), target);
  }

  // optional int32 m_result = 24;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_result(), target);
  }

  // optional int32 m_Exposed_score = 25;
  if (has_m_exposed_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_exposed_score(), target);
  }

  // optional int32 m_smile_score = 26;
  if (has_m_smile_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_smile_score(), target);
  }

  // optional int32 m_mines_score = 27;
  if (has_m_mines_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_mines_score(), target);
  }

  // optional int32 m_song_score = 28;
  if (has_m_song_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_song_score(), target);
  }

  // optional int32 m_hu_score = 29;
  if (has_m_hu_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->m_hu_score(), target);
  }

  // optional int32 g_card_type = 30;
  if (has_g_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->g_card_type(), target);
  }

  // optional int32 g_player_num = 31;
  if (has_g_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->g_player_num(), target);
  }

  // optional int32 g_rolecard_type = 32;
  if (has_g_rolecard_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->g_rolecard_type(), target);
  }

  // optional int32 g_is_win = 33;
  if (has_g_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->g_is_win(), target);
  }

  // optional int32 g_is_dealer = 34;
  if (has_g_is_dealer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->g_is_dealer(), target);
  }

  // optional int32 g_is_discard = 35;
  if (has_g_is_discard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->g_is_discard(), target);
  }

  // optional int32 g_fill_counts = 36;
  if (has_g_fill_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->g_fill_counts(), target);
  }

  // optional int32 g_compare_counts = 37;
  if (has_g_compare_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->g_compare_counts(), target);
  }

  // optional int32 g_look_counts = 38;
  if (has_g_look_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->g_look_counts(), target);
  }

  // optional int32 g_call_counts = 39;
  if (has_g_call_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->g_call_counts(), target);
  }

  // optional int32 g_role_counts = 40;
  if (has_g_role_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->g_role_counts(), target);
  }

  // optional int32 g_total_counts = 41;
  if (has_g_total_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->g_total_counts(), target);
  }

  // optional int32 g_exit_type = 42;
  if (has_g_exit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->g_exit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_majiang_role_battleresult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int64 m_allGold = 2;
    if (has_m_allgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_allgold());
    }

    // optional int64 m_winGold = 3;
    if (has_m_wingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_wingold());
    }

    // optional int32 m_character = 4;
    if (has_m_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_character());
    }

    // optional string m_winType = 5;
    if (has_m_wintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_wintype());
    }

    // optional int32 m_sjChongGuan = 6;
    if (has_m_sjchongguan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sjchongguan());
    }

    // optional int32 m_sjBaWang = 7;
    if (has_m_sjbawang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sjbawang());
    }

    // optional int32 m_xjChongGuan = 8;
    if (has_m_xjchongguan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjchongguan());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_xjBaWang = 9;
    if (has_m_xjbawang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_xjbawang());
    }

    // optional int32 m_cartype = 10;
    if (has_m_cartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cartype());
    }

    // optional int32 m_room_id = 11;
    if (has_m_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_room_id());
    }

    // optional int32 m_room_bnote = 12;
    if (has_m_room_bnote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_room_bnote());
    }

    // optional int32 m_win_type = 13;
    if (has_m_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_win_type());
    }

    // optional int32 m_is_blasting = 14;
    if (has_m_is_blasting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_is_blasting());
    }

    // optional int32 m_is_washedoff = 15;
    if (has_m_is_washedoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_is_washedoff());
    }

    // optional int32 m_left_card = 16;
    if (has_m_left_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_left_card());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_chow = 17;
    if (has_m_chow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chow());
    }

    // optional int32 m_pong = 18;
    if (has_m_pong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pong());
    }

    // optional int32 m_exposed = 19;
    if (has_m_exposed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exposed());
    }

    // optional int32 m_concealed_kong = 20;
    if (has_m_concealed_kong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_concealed_kong());
    }

    // optional int32 m_patch = 21;
    if (has_m_patch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_patch());
    }

    // optional int32 m_up_score = 22;
    if (has_m_up_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_up_score());
    }

    // optional int32 m_down_score = 23;
    if (has_m_down_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_down_score());
    }

    // optional int32 m_result = 24;
    if (has_m_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_Exposed_score = 25;
    if (has_m_exposed_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exposed_score());
    }

    // optional int32 m_smile_score = 26;
    if (has_m_smile_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_smile_score());
    }

    // optional int32 m_mines_score = 27;
    if (has_m_mines_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mines_score());
    }

    // optional int32 m_song_score = 28;
    if (has_m_song_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_song_score());
    }

    // optional int32 m_hu_score = 29;
    if (has_m_hu_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hu_score());
    }

    // optional int32 g_card_type = 30;
    if (has_g_card_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_card_type());
    }

    // optional int32 g_player_num = 31;
    if (has_g_player_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_player_num());
    }

    // optional int32 g_rolecard_type = 32;
    if (has_g_rolecard_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_rolecard_type());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 g_is_win = 33;
    if (has_g_is_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_is_win());
    }

    // optional int32 g_is_dealer = 34;
    if (has_g_is_dealer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_is_dealer());
    }

    // optional int32 g_is_discard = 35;
    if (has_g_is_discard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_is_discard());
    }

    // optional int32 g_fill_counts = 36;
    if (has_g_fill_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_fill_counts());
    }

    // optional int32 g_compare_counts = 37;
    if (has_g_compare_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_compare_counts());
    }

    // optional int32 g_look_counts = 38;
    if (has_g_look_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_look_counts());
    }

    // optional int32 g_call_counts = 39;
    if (has_g_call_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_call_counts());
    }

    // optional int32 g_role_counts = 40;
    if (has_g_role_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_role_counts());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 g_total_counts = 41;
    if (has_g_total_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_total_counts());
    }

    // optional int32 g_exit_type = 42;
    if (has_g_exit_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_exit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_majiang_role_battleresult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_majiang_role_battleresult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_majiang_role_battleresult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_majiang_role_battleresult::MergeFrom(const SM_majiang_role_battleresult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_allgold()) {
      set_m_allgold(from.m_allgold());
    }
    if (from.has_m_wingold()) {
      set_m_wingold(from.m_wingold());
    }
    if (from.has_m_character()) {
      set_m_character(from.m_character());
    }
    if (from.has_m_wintype()) {
      set_m_wintype(from.m_wintype());
    }
    if (from.has_m_sjchongguan()) {
      set_m_sjchongguan(from.m_sjchongguan());
    }
    if (from.has_m_sjbawang()) {
      set_m_sjbawang(from.m_sjbawang());
    }
    if (from.has_m_xjchongguan()) {
      set_m_xjchongguan(from.m_xjchongguan());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_xjbawang()) {
      set_m_xjbawang(from.m_xjbawang());
    }
    if (from.has_m_cartype()) {
      set_m_cartype(from.m_cartype());
    }
    if (from.has_m_room_id()) {
      set_m_room_id(from.m_room_id());
    }
    if (from.has_m_room_bnote()) {
      set_m_room_bnote(from.m_room_bnote());
    }
    if (from.has_m_win_type()) {
      set_m_win_type(from.m_win_type());
    }
    if (from.has_m_is_blasting()) {
      set_m_is_blasting(from.m_is_blasting());
    }
    if (from.has_m_is_washedoff()) {
      set_m_is_washedoff(from.m_is_washedoff());
    }
    if (from.has_m_left_card()) {
      set_m_left_card(from.m_left_card());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_chow()) {
      set_m_chow(from.m_chow());
    }
    if (from.has_m_pong()) {
      set_m_pong(from.m_pong());
    }
    if (from.has_m_exposed()) {
      set_m_exposed(from.m_exposed());
    }
    if (from.has_m_concealed_kong()) {
      set_m_concealed_kong(from.m_concealed_kong());
    }
    if (from.has_m_patch()) {
      set_m_patch(from.m_patch());
    }
    if (from.has_m_up_score()) {
      set_m_up_score(from.m_up_score());
    }
    if (from.has_m_down_score()) {
      set_m_down_score(from.m_down_score());
    }
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_exposed_score()) {
      set_m_exposed_score(from.m_exposed_score());
    }
    if (from.has_m_smile_score()) {
      set_m_smile_score(from.m_smile_score());
    }
    if (from.has_m_mines_score()) {
      set_m_mines_score(from.m_mines_score());
    }
    if (from.has_m_song_score()) {
      set_m_song_score(from.m_song_score());
    }
    if (from.has_m_hu_score()) {
      set_m_hu_score(from.m_hu_score());
    }
    if (from.has_g_card_type()) {
      set_g_card_type(from.g_card_type());
    }
    if (from.has_g_player_num()) {
      set_g_player_num(from.g_player_num());
    }
    if (from.has_g_rolecard_type()) {
      set_g_rolecard_type(from.g_rolecard_type());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_g_is_win()) {
      set_g_is_win(from.g_is_win());
    }
    if (from.has_g_is_dealer()) {
      set_g_is_dealer(from.g_is_dealer());
    }
    if (from.has_g_is_discard()) {
      set_g_is_discard(from.g_is_discard());
    }
    if (from.has_g_fill_counts()) {
      set_g_fill_counts(from.g_fill_counts());
    }
    if (from.has_g_compare_counts()) {
      set_g_compare_counts(from.g_compare_counts());
    }
    if (from.has_g_look_counts()) {
      set_g_look_counts(from.g_look_counts());
    }
    if (from.has_g_call_counts()) {
      set_g_call_counts(from.g_call_counts());
    }
    if (from.has_g_role_counts()) {
      set_g_role_counts(from.g_role_counts());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_g_total_counts()) {
      set_g_total_counts(from.g_total_counts());
    }
    if (from.has_g_exit_type()) {
      set_g_exit_type(from.g_exit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_majiang_role_battleresult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_majiang_role_battleresult::CopyFrom(const SM_majiang_role_battleresult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_majiang_role_battleresult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_majiang_role_battleresult::Swap(SM_majiang_role_battleresult* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_allgold_, other->m_allgold_);
    std::swap(m_wingold_, other->m_wingold_);
    std::swap(m_character_, other->m_character_);
    std::swap(m_wintype_, other->m_wintype_);
    std::swap(m_sjchongguan_, other->m_sjchongguan_);
    std::swap(m_sjbawang_, other->m_sjbawang_);
    std::swap(m_xjchongguan_, other->m_xjchongguan_);
    std::swap(m_xjbawang_, other->m_xjbawang_);
    std::swap(m_cartype_, other->m_cartype_);
    std::swap(m_room_id_, other->m_room_id_);
    std::swap(m_room_bnote_, other->m_room_bnote_);
    std::swap(m_win_type_, other->m_win_type_);
    std::swap(m_is_blasting_, other->m_is_blasting_);
    std::swap(m_is_washedoff_, other->m_is_washedoff_);
    std::swap(m_left_card_, other->m_left_card_);
    std::swap(m_chow_, other->m_chow_);
    std::swap(m_pong_, other->m_pong_);
    std::swap(m_exposed_, other->m_exposed_);
    std::swap(m_concealed_kong_, other->m_concealed_kong_);
    std::swap(m_patch_, other->m_patch_);
    std::swap(m_up_score_, other->m_up_score_);
    std::swap(m_down_score_, other->m_down_score_);
    std::swap(m_result_, other->m_result_);
    std::swap(m_exposed_score_, other->m_exposed_score_);
    std::swap(m_smile_score_, other->m_smile_score_);
    std::swap(m_mines_score_, other->m_mines_score_);
    std::swap(m_song_score_, other->m_song_score_);
    std::swap(m_hu_score_, other->m_hu_score_);
    std::swap(g_card_type_, other->g_card_type_);
    std::swap(g_player_num_, other->g_player_num_);
    std::swap(g_rolecard_type_, other->g_rolecard_type_);
    std::swap(g_is_win_, other->g_is_win_);
    std::swap(g_is_dealer_, other->g_is_dealer_);
    std::swap(g_is_discard_, other->g_is_discard_);
    std::swap(g_fill_counts_, other->g_fill_counts_);
    std::swap(g_compare_counts_, other->g_compare_counts_);
    std::swap(g_look_counts_, other->g_look_counts_);
    std::swap(g_call_counts_, other->g_call_counts_);
    std::swap(g_role_counts_, other->g_role_counts_);
    std::swap(g_total_counts_, other->g_total_counts_);
    std::swap(g_exit_type_, other->g_exit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_majiang_role_battleresult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_majiang_role_battleresult_descriptor_;
  metadata.reflection = SM_majiang_role_battleresult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_majiang_battleResult::kMBattleTypeFieldNumber;
const int SM_majiang_battleResult::kMFBTypeIDFieldNumber;
const int SM_majiang_battleResult::kMIncreMatchidFieldNumber;
const int SM_majiang_battleResult::kMIsMatchOverGoldenFieldNumber;
const int SM_majiang_battleResult::kMIsReallyResultFieldNumber;
const int SM_majiang_battleResult::kMPlaycountFieldNumber;
const int SM_majiang_battleResult::kMMonsteridFieldNumber;
const int SM_majiang_battleResult::kMRoomcountFieldNumber;
const int SM_majiang_battleResult::kMRoleresultFieldNumber;
const int SM_majiang_battleResult::kMIsDealerFieldNumber;
#endif  // !_MSC_VER

SM_majiang_battleResult::SM_majiang_battleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_majiang_battleResult::InitAsDefaultInstance() {
}

SM_majiang_battleResult::SM_majiang_battleResult(const SM_majiang_battleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_majiang_battleResult::SharedCtor() {
  _cached_size_ = 0;
  m_battletype_ = 0;
  m_fbtypeid_ = 0;
  m_incrematchid_ = 0;
  m_ismatchovergolden_ = 0;
  m_isreallyresult_ = 0;
  m_playcount_ = 0;
  m_monsterid_ = 0;
  m_roomcount_ = 0;
  m_is_dealer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_majiang_battleResult::~SM_majiang_battleResult() {
  SharedDtor();
}

void SM_majiang_battleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_majiang_battleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_majiang_battleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_majiang_battleResult_descriptor_;
}

const SM_majiang_battleResult& SM_majiang_battleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2etxt();
  return *default_instance_;
}

SM_majiang_battleResult* SM_majiang_battleResult::default_instance_ = NULL;

SM_majiang_battleResult* SM_majiang_battleResult::New() const {
  return new SM_majiang_battleResult;
}

void SM_majiang_battleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_battletype_ = 0;
    m_fbtypeid_ = 0;
    m_incrematchid_ = 0;
    m_ismatchovergolden_ = 0;
    m_isreallyresult_ = 0;
    m_playcount_ = 0;
    m_monsterid_ = 0;
    m_roomcount_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    m_is_dealer_ = 0;
  }
  m_roleresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_majiang_battleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_BattleType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battletype_)));
          set_has_m_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_FBTypeID;
        break;
      }

      // optional int32 m_FBTypeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_FBTypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_increMatchid;
        break;
      }

      // optional int32 m_increMatchid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_increMatchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_incrematchid_)));
          set_has_m_incrematchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_isMatchOverGolden;
        break;
      }

      // optional int32 m_isMatchOverGolden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isMatchOverGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ismatchovergolden_)));
          set_has_m_ismatchovergolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_isReallyResult;
        break;
      }

      // optional int32 m_isReallyResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isReallyResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isreallyresult_)));
          set_has_m_isreallyresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_playcount;
        break;
      }

      // optional int32 m_playcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playcount_)));
          set_has_m_playcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_monsterid;
        break;
      }

      // optional int32 m_monsterid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterid_)));
          set_has_m_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_roomcount;
        break;
      }

      // optional int32 m_roomcount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomcount_)));
          set_has_m_roomcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_roleresult;
        break;
      }

      // repeated .SM_majiang_role_battleresult m_roleresult = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roleresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_roleresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_roleresult;
        if (input->ExpectTag(80)) goto parse_m_is_dealer;
        break;
      }

      // optional int32 m_is_dealer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_is_dealer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_is_dealer_)));
          set_has_m_is_dealer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_majiang_battleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_BattleType = 1;
  if (has_m_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_battletype(), output);
  }

  // optional int32 m_FBTypeID = 2;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbtypeid(), output);
  }

  // optional int32 m_increMatchid = 3;
  if (has_m_incrematchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_incrematchid(), output);
  }

  // optional int32 m_isMatchOverGolden = 4;
  if (has_m_ismatchovergolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ismatchovergolden(), output);
  }

  // optional int32 m_isReallyResult = 5;
  if (has_m_isreallyresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_isreallyresult(), output);
  }

  // optional int32 m_playcount = 6;
  if (has_m_playcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_playcount(), output);
  }

  // optional int32 m_monsterid = 7;
  if (has_m_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_monsterid(), output);
  }

  // optional int32 m_roomcount = 8;
  if (has_m_roomcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_roomcount(), output);
  }

  // repeated .SM_majiang_role_battleresult m_roleresult = 9;
  for (int i = 0; i < this->m_roleresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_roleresult(i), output);
  }

  // optional int32 m_is_dealer = 10;
  if (has_m_is_dealer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_is_dealer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_majiang_battleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_BattleType = 1;
  if (has_m_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_battletype(), target);
  }

  // optional int32 m_FBTypeID = 2;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbtypeid(), target);
  }

  // optional int32 m_increMatchid = 3;
  if (has_m_incrematchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_incrematchid(), target);
  }

  // optional int32 m_isMatchOverGolden = 4;
  if (has_m_ismatchovergolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ismatchovergolden(), target);
  }

  // optional int32 m_isReallyResult = 5;
  if (has_m_isreallyresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_isreallyresult(), target);
  }

  // optional int32 m_playcount = 6;
  if (has_m_playcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_playcount(), target);
  }

  // optional int32 m_monsterid = 7;
  if (has_m_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_monsterid(), target);
  }

  // optional int32 m_roomcount = 8;
  if (has_m_roomcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_roomcount(), target);
  }

  // repeated .SM_majiang_role_battleresult m_roleresult = 9;
  for (int i = 0; i < this->m_roleresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_roleresult(i), target);
  }

  // optional int32 m_is_dealer = 10;
  if (has_m_is_dealer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_is_dealer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_majiang_battleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_BattleType = 1;
    if (has_m_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battletype());
    }

    // optional int32 m_FBTypeID = 2;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

    // optional int32 m_increMatchid = 3;
    if (has_m_incrematchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_incrematchid());
    }

    // optional int32 m_isMatchOverGolden = 4;
    if (has_m_ismatchovergolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ismatchovergolden());
    }

    // optional int32 m_isReallyResult = 5;
    if (has_m_isreallyresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isreallyresult());
    }

    // optional int32 m_playcount = 6;
    if (has_m_playcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playcount());
    }

    // optional int32 m_monsterid = 7;
    if (has_m_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterid());
    }

    // optional int32 m_roomcount = 8;
    if (has_m_roomcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomcount());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 m_is_dealer = 10;
    if (has_m_is_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_is_dealer());
    }

  }
  // repeated .SM_majiang_role_battleresult m_roleresult = 9;
  total_size += 1 * this->m_roleresult_size();
  for (int i = 0; i < this->m_roleresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_roleresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_majiang_battleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_majiang_battleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_majiang_battleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_majiang_battleResult::MergeFrom(const SM_majiang_battleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_roleresult_.MergeFrom(from.m_roleresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_battletype()) {
      set_m_battletype(from.m_battletype());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
    if (from.has_m_incrematchid()) {
      set_m_incrematchid(from.m_incrematchid());
    }
    if (from.has_m_ismatchovergolden()) {
      set_m_ismatchovergolden(from.m_ismatchovergolden());
    }
    if (from.has_m_isreallyresult()) {
      set_m_isreallyresult(from.m_isreallyresult());
    }
    if (from.has_m_playcount()) {
      set_m_playcount(from.m_playcount());
    }
    if (from.has_m_monsterid()) {
      set_m_monsterid(from.m_monsterid());
    }
    if (from.has_m_roomcount()) {
      set_m_roomcount(from.m_roomcount());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_m_is_dealer()) {
      set_m_is_dealer(from.m_is_dealer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_majiang_battleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_majiang_battleResult::CopyFrom(const SM_majiang_battleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_majiang_battleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_roleresult_size(); i++) {
    if (!this->m_roleresult(i).IsInitialized()) return false;
  }
  return true;
}

void SM_majiang_battleResult::Swap(SM_majiang_battleResult* other) {
  if (other != this) {
    std::swap(m_battletype_, other->m_battletype_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(m_incrematchid_, other->m_incrematchid_);
    std::swap(m_ismatchovergolden_, other->m_ismatchovergolden_);
    std::swap(m_isreallyresult_, other->m_isreallyresult_);
    std::swap(m_playcount_, other->m_playcount_);
    std::swap(m_monsterid_, other->m_monsterid_);
    std::swap(m_roomcount_, other->m_roomcount_);
    m_roleresult_.Swap(&other->m_roleresult_);
    std::swap(m_is_dealer_, other->m_is_dealer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_majiang_battleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_majiang_battleResult_descriptor_;
  metadata.reflection = SM_majiang_battleResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
