// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equipuplevel.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "equipuplevel.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_EquipInfoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipInfoReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipForge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipForge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OneKeyInfoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OneKeyInfoReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ForgeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ForgeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_UI_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_UI_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_UI_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_UI_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Hole_Detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Hole_Detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Upgrade_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Upgrade_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Obtain_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Obtain_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Obtain_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Obtain_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_AddSwap_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_AddSwap_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_AddSwap_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_AddSwap_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Store_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Store_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Store_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Store_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Refine_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Refine_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Refine_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Refine_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Unlock_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Unlock_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Unlock_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Unlock_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Info_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Info_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Info_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Info_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Swap_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Swap_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Swap_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Swap_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Upgrade_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipAwaken_Upgrade_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipWing_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipWing_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AwakeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AwakeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AwakeEquipAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AwakeEquipAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AwakeEquipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AwakeEquipRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_equipuplevel_2etxt() {
  protobuf_AddDesc_equipuplevel_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "equipuplevel.txt");
  GOOGLE_CHECK(file != NULL);
  GM_EquipInfoReturn_descriptor_ = file->message_type(0);
  static const int GM_EquipInfoReturn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, m_ironcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, m_elitestone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, m_animalbone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, m_ironid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, m_equipinfo_),
  };
  GM_EquipInfoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipInfoReturn_descriptor_,
      GM_EquipInfoReturn::default_instance_,
      GM_EquipInfoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipInfoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipInfoReturn));
  GM_EquipForge_descriptor_ = file->message_type(1);
  static const int GM_EquipForge_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_forgelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_forgeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_refinlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_gradelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_awkeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, m_winglevel_),
  };
  GM_EquipForge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipForge_descriptor_,
      GM_EquipForge::default_instance_,
      GM_EquipForge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipForge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipForge));
  GM_EquipAwaken_descriptor_ = file->message_type(2);
  static const int GM_EquipAwaken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken, m_propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken, m_propertylv_),
  };
  GM_EquipAwaken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_descriptor_,
      GM_EquipAwaken::default_instance_,
      GM_EquipAwaken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken));
  GM_OneKeyInfoReturn_descriptor_ = file->message_type(3);
  static const int GM_OneKeyInfoReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OneKeyInfoReturn, m_costgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OneKeyInfoReturn, m_costiron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OneKeyInfoReturn, m_maxforgelv_),
  };
  GM_OneKeyInfoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OneKeyInfoReturn_descriptor_,
      GM_OneKeyInfoReturn::default_instance_,
      GM_OneKeyInfoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OneKeyInfoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OneKeyInfoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OneKeyInfoReturn));
  GM_ForgeRequest_descriptor_ = file->message_type(4);
  static const int GM_ForgeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ForgeRequest, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ForgeRequest, m_gmids_),
  };
  GM_ForgeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ForgeRequest_descriptor_,
      GM_ForgeRequest::default_instance_,
      GM_ForgeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ForgeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ForgeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ForgeRequest));
  GM_EquipNotify_descriptor_ = file->message_type(5);
  static const int GM_EquipNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipNotify, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipNotify, m_equipinfo_),
  };
  GM_EquipNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipNotify_descriptor_,
      GM_EquipNotify::default_instance_,
      GM_EquipNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipNotify));
  GM_EquipAwaken_UI_Request_descriptor_ = file->message_type(6);
  static const int GM_EquipAwaken_UI_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Request, gmid_),
  };
  GM_EquipAwaken_UI_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_UI_Request_descriptor_,
      GM_EquipAwaken_UI_Request::default_instance_,
      GM_EquipAwaken_UI_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_UI_Request));
  GM_EquipAwaken_UI_Return_descriptor_ = file->message_type(7);
  static const int GM_EquipAwaken_UI_Return_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, pillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, diamondtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, diamondneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, data_),
  };
  GM_EquipAwaken_UI_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_UI_Return_descriptor_,
      GM_EquipAwaken_UI_Return::default_instance_,
      GM_EquipAwaken_UI_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_UI_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_UI_Return));
  GM_EquipAwaken_Hole_Detail_descriptor_ = file->message_type(8);
  static const int GM_EquipAwaken_Hole_Detail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, propertylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, state_),
  };
  GM_EquipAwaken_Hole_Detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Hole_Detail_descriptor_,
      GM_EquipAwaken_Hole_Detail::default_instance_,
      GM_EquipAwaken_Hole_Detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Hole_Detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Hole_Detail));
  GM_EquipAwaken_Upgrade_Request_descriptor_ = file->message_type(9);
  static const int GM_EquipAwaken_Upgrade_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Request, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Request, holenum_),
  };
  GM_EquipAwaken_Upgrade_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Upgrade_Request_descriptor_,
      GM_EquipAwaken_Upgrade_Request::default_instance_,
      GM_EquipAwaken_Upgrade_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Upgrade_Request));
  GM_EquipAwaken_Upgrade_Return_descriptor_ = file->message_type(10);
  static const int GM_EquipAwaken_Upgrade_Return_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, propertylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, canupgrade_),
  };
  GM_EquipAwaken_Upgrade_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Upgrade_Return_descriptor_,
      GM_EquipAwaken_Upgrade_Return::default_instance_,
      GM_EquipAwaken_Upgrade_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Upgrade_Return));
  GM_EquipAwaken_Obtain_Request_descriptor_ = file->message_type(11);
  static const int GM_EquipAwaken_Obtain_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Request, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Request, obtaintype_),
  };
  GM_EquipAwaken_Obtain_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Obtain_Request_descriptor_,
      GM_EquipAwaken_Obtain_Request::default_instance_,
      GM_EquipAwaken_Obtain_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Obtain_Request));
  GM_EquipAwaken_Obtain_Return_descriptor_ = file->message_type(12);
  static const int GM_EquipAwaken_Obtain_Return_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, obtaintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, pillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, diamondtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, diamondneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, getexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, realtimes_),
  };
  GM_EquipAwaken_Obtain_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Obtain_Return_descriptor_,
      GM_EquipAwaken_Obtain_Return::default_instance_,
      GM_EquipAwaken_Obtain_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Obtain_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Obtain_Return));
  GM_EquipAwaken_AddSwap_Request_descriptor_ = file->message_type(13);
  static const int GM_EquipAwaken_AddSwap_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Request, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Request, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Request, replaceholenum_),
  };
  GM_EquipAwaken_AddSwap_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_AddSwap_Request_descriptor_,
      GM_EquipAwaken_AddSwap_Request::default_instance_,
      GM_EquipAwaken_AddSwap_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_AddSwap_Request));
  GM_EquipAwaken_AddSwap_Return_descriptor_ = file->message_type(14);
  static const int GM_EquipAwaken_AddSwap_Return_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, replaceholenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, getexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, data_),
  };
  GM_EquipAwaken_AddSwap_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_AddSwap_Return_descriptor_,
      GM_EquipAwaken_AddSwap_Return::default_instance_,
      GM_EquipAwaken_AddSwap_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_AddSwap_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_AddSwap_Return));
  GM_EquipAwaken_Store_Request_descriptor_ = file->message_type(15);
  static const int GM_EquipAwaken_Store_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Request, gmid_),
  };
  GM_EquipAwaken_Store_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Store_Request_descriptor_,
      GM_EquipAwaken_Store_Request::default_instance_,
      GM_EquipAwaken_Store_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Store_Request));
  GM_EquipAwaken_Store_Return_descriptor_ = file->message_type(16);
  static const int GM_EquipAwaken_Store_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Return, data_),
  };
  GM_EquipAwaken_Store_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Store_Return_descriptor_,
      GM_EquipAwaken_Store_Return::default_instance_,
      GM_EquipAwaken_Store_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Store_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Store_Return));
  GM_EquipAwaken_Refine_Request_descriptor_ = file->message_type(17);
  static const int GM_EquipAwaken_Refine_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Request, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Request, holenum_),
  };
  GM_EquipAwaken_Refine_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Refine_Request_descriptor_,
      GM_EquipAwaken_Refine_Request::default_instance_,
      GM_EquipAwaken_Refine_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Refine_Request));
  GM_EquipAwaken_Refine_Return_descriptor_ = file->message_type(18);
  static const int GM_EquipAwaken_Refine_Return_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, getexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, data_),
  };
  GM_EquipAwaken_Refine_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Refine_Return_descriptor_,
      GM_EquipAwaken_Refine_Return::default_instance_,
      GM_EquipAwaken_Refine_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Refine_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Refine_Return));
  GM_EquipAwaken_Unlock_Request_descriptor_ = file->message_type(19);
  static const int GM_EquipAwaken_Unlock_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Request, gmid_),
  };
  GM_EquipAwaken_Unlock_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Unlock_Request_descriptor_,
      GM_EquipAwaken_Unlock_Request::default_instance_,
      GM_EquipAwaken_Unlock_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Unlock_Request));
  GM_EquipAwaken_Unlock_Return_descriptor_ = file->message_type(20);
  static const int GM_EquipAwaken_Unlock_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Return, gmid_),
  };
  GM_EquipAwaken_Unlock_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Unlock_Return_descriptor_,
      GM_EquipAwaken_Unlock_Return::default_instance_,
      GM_EquipAwaken_Unlock_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Unlock_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Unlock_Return));
  GM_EquipAwaken_Info_Request_descriptor_ = file->message_type(21);
  static const int GM_EquipAwaken_Info_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Request, ngmid_),
  };
  GM_EquipAwaken_Info_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Info_Request_descriptor_,
      GM_EquipAwaken_Info_Request::default_instance_,
      GM_EquipAwaken_Info_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Info_Request));
  GM_EquipAwaken_Info_Return_descriptor_ = file->message_type(22);
  static const int GM_EquipAwaken_Info_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Return, nresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Return, ngmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Return, data_),
  };
  GM_EquipAwaken_Info_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Info_Return_descriptor_,
      GM_EquipAwaken_Info_Return::default_instance_,
      GM_EquipAwaken_Info_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Info_Return));
  GM_EquipAwaken_Info_descriptor_ = file->message_type(23);
  static const int GM_EquipAwaken_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info, awakenlevel_),
  };
  GM_EquipAwaken_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Info_descriptor_,
      GM_EquipAwaken_Info::default_instance_,
      GM_EquipAwaken_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Info));
  GM_EquipAwaken_Swap_Request_descriptor_ = file->message_type(24);
  static const int GM_EquipAwaken_Swap_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Request, nleftgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Request, nrightgmid_),
  };
  GM_EquipAwaken_Swap_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Swap_Request_descriptor_,
      GM_EquipAwaken_Swap_Request::default_instance_,
      GM_EquipAwaken_Swap_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Swap_Request));
  GM_EquipAwaken_Swap_Return_descriptor_ = file->message_type(25);
  static const int GM_EquipAwaken_Swap_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Return, nresult_),
  };
  GM_EquipAwaken_Swap_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Swap_Return_descriptor_,
      GM_EquipAwaken_Swap_Return::default_instance_,
      GM_EquipAwaken_Swap_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Swap_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Swap_Return));
  GM_EquipAwaken_Upgrade_Change_descriptor_ = file->message_type(26);
  static const int GM_EquipAwaken_Upgrade_Change_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Change, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Change, data_),
  };
  GM_EquipAwaken_Upgrade_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Upgrade_Change_descriptor_,
      GM_EquipAwaken_Upgrade_Change::default_instance_,
      GM_EquipAwaken_Upgrade_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Upgrade_Change));
  GM_EquipAwaken_Upgrade_Info_descriptor_ = file->message_type(27);
  static const int GM_EquipAwaken_Upgrade_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Info, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Info, state_),
  };
  GM_EquipAwaken_Upgrade_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipAwaken_Upgrade_Info_descriptor_,
      GM_EquipAwaken_Upgrade_Info::default_instance_,
      GM_EquipAwaken_Upgrade_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipAwaken_Upgrade_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipAwaken_Upgrade_Info));
  GM_EquipWing_Request_descriptor_ = file->message_type(28);
  static const int GM_EquipWing_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipWing_Request, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipWing_Request, winglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipWing_Request, issucess_),
  };
  GM_EquipWing_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipWing_Request_descriptor_,
      GM_EquipWing_Request::default_instance_,
      GM_EquipWing_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipWing_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipWing_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipWing_Request));
  GM_AwakeEquip_descriptor_ = file->message_type(29);
  static const int GM_AwakeEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquip, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquip, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquip, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquip, isfull_),
  };
  GM_AwakeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AwakeEquip_descriptor_,
      GM_AwakeEquip::default_instance_,
      GM_AwakeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AwakeEquip));
  GM_AwakeEquipAll_descriptor_ = file->message_type(30);
  static const int GM_AwakeEquipAll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipAll, return__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipAll, awakedata_),
  };
  GM_AwakeEquipAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AwakeEquipAll_descriptor_,
      GM_AwakeEquipAll::default_instance_,
      GM_AwakeEquipAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AwakeEquipAll));
  GM_AwakeEquipRequest_descriptor_ = file->message_type(31);
  static const int GM_AwakeEquipRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipRequest, awakeequipgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipRequest, equipgmid_),
  };
  GM_AwakeEquipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AwakeEquipRequest_descriptor_,
      GM_AwakeEquipRequest::default_instance_,
      GM_AwakeEquipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AwakeEquipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AwakeEquipRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_equipuplevel_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipInfoReturn_descriptor_, &GM_EquipInfoReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipForge_descriptor_, &GM_EquipForge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_descriptor_, &GM_EquipAwaken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OneKeyInfoReturn_descriptor_, &GM_OneKeyInfoReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ForgeRequest_descriptor_, &GM_ForgeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipNotify_descriptor_, &GM_EquipNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_UI_Request_descriptor_, &GM_EquipAwaken_UI_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_UI_Return_descriptor_, &GM_EquipAwaken_UI_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Hole_Detail_descriptor_, &GM_EquipAwaken_Hole_Detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Upgrade_Request_descriptor_, &GM_EquipAwaken_Upgrade_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Upgrade_Return_descriptor_, &GM_EquipAwaken_Upgrade_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Obtain_Request_descriptor_, &GM_EquipAwaken_Obtain_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Obtain_Return_descriptor_, &GM_EquipAwaken_Obtain_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_AddSwap_Request_descriptor_, &GM_EquipAwaken_AddSwap_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_AddSwap_Return_descriptor_, &GM_EquipAwaken_AddSwap_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Store_Request_descriptor_, &GM_EquipAwaken_Store_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Store_Return_descriptor_, &GM_EquipAwaken_Store_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Refine_Request_descriptor_, &GM_EquipAwaken_Refine_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Refine_Return_descriptor_, &GM_EquipAwaken_Refine_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Unlock_Request_descriptor_, &GM_EquipAwaken_Unlock_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Unlock_Return_descriptor_, &GM_EquipAwaken_Unlock_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Info_Request_descriptor_, &GM_EquipAwaken_Info_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Info_Return_descriptor_, &GM_EquipAwaken_Info_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Info_descriptor_, &GM_EquipAwaken_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Swap_Request_descriptor_, &GM_EquipAwaken_Swap_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Swap_Return_descriptor_, &GM_EquipAwaken_Swap_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Upgrade_Change_descriptor_, &GM_EquipAwaken_Upgrade_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipAwaken_Upgrade_Info_descriptor_, &GM_EquipAwaken_Upgrade_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipWing_Request_descriptor_, &GM_EquipWing_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AwakeEquip_descriptor_, &GM_AwakeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AwakeEquipAll_descriptor_, &GM_AwakeEquipAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AwakeEquipRequest_descriptor_, &GM_AwakeEquipRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_equipuplevel_2etxt() {
  delete GM_EquipInfoReturn::default_instance_;
  delete GM_EquipInfoReturn_reflection_;
  delete GM_EquipForge::default_instance_;
  delete GM_EquipForge_reflection_;
  delete GM_EquipAwaken::default_instance_;
  delete GM_EquipAwaken_reflection_;
  delete GM_OneKeyInfoReturn::default_instance_;
  delete GM_OneKeyInfoReturn_reflection_;
  delete GM_ForgeRequest::default_instance_;
  delete GM_ForgeRequest_reflection_;
  delete GM_EquipNotify::default_instance_;
  delete GM_EquipNotify_reflection_;
  delete GM_EquipAwaken_UI_Request::default_instance_;
  delete GM_EquipAwaken_UI_Request_reflection_;
  delete GM_EquipAwaken_UI_Return::default_instance_;
  delete GM_EquipAwaken_UI_Return_reflection_;
  delete GM_EquipAwaken_Hole_Detail::default_instance_;
  delete GM_EquipAwaken_Hole_Detail_reflection_;
  delete GM_EquipAwaken_Upgrade_Request::default_instance_;
  delete GM_EquipAwaken_Upgrade_Request_reflection_;
  delete GM_EquipAwaken_Upgrade_Return::default_instance_;
  delete GM_EquipAwaken_Upgrade_Return_reflection_;
  delete GM_EquipAwaken_Obtain_Request::default_instance_;
  delete GM_EquipAwaken_Obtain_Request_reflection_;
  delete GM_EquipAwaken_Obtain_Return::default_instance_;
  delete GM_EquipAwaken_Obtain_Return_reflection_;
  delete GM_EquipAwaken_AddSwap_Request::default_instance_;
  delete GM_EquipAwaken_AddSwap_Request_reflection_;
  delete GM_EquipAwaken_AddSwap_Return::default_instance_;
  delete GM_EquipAwaken_AddSwap_Return_reflection_;
  delete GM_EquipAwaken_Store_Request::default_instance_;
  delete GM_EquipAwaken_Store_Request_reflection_;
  delete GM_EquipAwaken_Store_Return::default_instance_;
  delete GM_EquipAwaken_Store_Return_reflection_;
  delete GM_EquipAwaken_Refine_Request::default_instance_;
  delete GM_EquipAwaken_Refine_Request_reflection_;
  delete GM_EquipAwaken_Refine_Return::default_instance_;
  delete GM_EquipAwaken_Refine_Return_reflection_;
  delete GM_EquipAwaken_Unlock_Request::default_instance_;
  delete GM_EquipAwaken_Unlock_Request_reflection_;
  delete GM_EquipAwaken_Unlock_Return::default_instance_;
  delete GM_EquipAwaken_Unlock_Return_reflection_;
  delete GM_EquipAwaken_Info_Request::default_instance_;
  delete GM_EquipAwaken_Info_Request_reflection_;
  delete GM_EquipAwaken_Info_Return::default_instance_;
  delete GM_EquipAwaken_Info_Return_reflection_;
  delete GM_EquipAwaken_Info::default_instance_;
  delete GM_EquipAwaken_Info_reflection_;
  delete GM_EquipAwaken_Swap_Request::default_instance_;
  delete GM_EquipAwaken_Swap_Request_reflection_;
  delete GM_EquipAwaken_Swap_Return::default_instance_;
  delete GM_EquipAwaken_Swap_Return_reflection_;
  delete GM_EquipAwaken_Upgrade_Change::default_instance_;
  delete GM_EquipAwaken_Upgrade_Change_reflection_;
  delete GM_EquipAwaken_Upgrade_Info::default_instance_;
  delete GM_EquipAwaken_Upgrade_Info_reflection_;
  delete GM_EquipWing_Request::default_instance_;
  delete GM_EquipWing_Request_reflection_;
  delete GM_AwakeEquip::default_instance_;
  delete GM_AwakeEquip_reflection_;
  delete GM_AwakeEquipAll::default_instance_;
  delete GM_AwakeEquipAll_reflection_;
  delete GM_AwakeEquipRequest::default_instance_;
  delete GM_AwakeEquipRequest_reflection_;
}

void protobuf_AddDesc_equipuplevel_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020equipuplevel.txt\"\236\001\n\022GM_EquipInfoRetur"
    "n\022\020\n\010m_roleid\030\001 \002(\005\022\023\n\013m_ironcount\030\002 \001(\005"
    "\022\024\n\014m_elitestone\030\003 \001(\005\022\024\n\014m_animalbone\030\004"
    " \001(\005\022\020\n\010m_ironid\030\006 \001(\005\022#\n\013m_equipinfo\030\005 "
    "\003(\0132\016.GM_EquipForge\"\247\001\n\rGM_EquipForge\022\016\n"
    "\006m_gmid\030\001 \002(\003\022\021\n\tm_forgeLv\030\002 \001(\005\022\022\n\nm_fo"
    "rgeExp\030\003 \001(\005\022\021\n\tm_refinLv\030\004 \001(\005\022\021\n\tm_gra"
    "deLv\030\005 \001(\005\022$\n\013m_awkenInfo\030\006 \003(\0132\017.GM_Equ"
    "ipAwaken\022\023\n\013m_winglevel\030\007 \001(\005\"<\n\016GM_Equi"
    "pAwaken\022\024\n\014m_propertyid\030\001 \002(\005\022\024\n\014m_prope"
    "rtyLv\030\002 \001(\005\"S\n\023GM_OneKeyInfoReturn\022\022\n\nm_"
    "costGold\030\001 \002(\005\022\022\n\nm_costIron\030\002 \001(\005\022\024\n\014m_"
    "maxForgeLv\030\003 \001(\005\"2\n\017GM_ForgeRequest\022\016\n\006m"
    "_gmid\030\001 \002(\003\022\017\n\007m_gmids\030\002 \003(\003\"E\n\016GM_Equip"
    "Notify\022\016\n\006m_type\030\001 \002(\005\022#\n\013m_equipinfo\030\002 "
    "\002(\0132\016.GM_EquipForge\")\n\031GM_EquipAwaken_UI"
    "_Request\022\014\n\004gmid\030\001 \002(\003\"\305\001\n\030GM_EquipAwake"
    "n_UI_Return\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid\030\002 \001("
    "\003\022\022\n\nexperience\030\003 \001(\003\022\017\n\007pillNum\030\004 \001(\005\022\024"
    "\n\014diamondTotal\030\005 \001(\005\022\023\n\013diamondNeed\030\006 \001("
    "\005\022\020\n\010discount\030\007 \001(\002\022)\n\004data\030\010 \003(\0132\033.GM_E"
    "quipAwaken_Hole_Detail\"y\n\032GM_EquipAwaken"
    "_Hole_Detail\022\017\n\007holenum\030\001 \002(\005\022\022\n\npropert"
    "yId\030\002 \001(\005\022\025\n\rpropertyLevel\030\003 \001(\005\022\020\n\010maxl"
    "evel\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\"\?\n\036GM_EquipAwa"
    "ken_Upgrade_Request\022\014\n\004gmid\030\001 \002(\003\022\017\n\007hol"
    "enum\030\002 \001(\005\"\241\001\n\035GM_EquipAwaken_Upgrade_Re"
    "turn\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022\017\n\007ho"
    "lenum\030\003 \001(\005\022\022\n\npropertyId\030\004 \001(\005\022\025\n\rprope"
    "rtyLevel\030\005 \001(\005\022\022\n\nexperience\030\006 \001(\003\022\022\n\nca"
    "nupgrade\030\007 \001(\005\"A\n\035GM_EquipAwaken_Obtain_"
    "Request\022\014\n\004gmid\030\001 \002(\003\022\022\n\nobtainType\030\002 \001("
    "\005\"\356\001\n\034GM_EquipAwaken_Obtain_Return\022\016\n\006re"
    "sult\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022\022\n\nobtainType\030\003"
    " \001(\005\022\017\n\007pillNum\030\004 \001(\005\022\024\n\014diamondTotal\030\005 "
    "\001(\005\022\023\n\013diamondNeed\030\006 \001(\005\022\016\n\006getexp\030\007 \001(\005"
    "\022\022\n\nexperience\030\010 \001(\003\022)\n\004data\030\t \001(\0132\033.GM_"
    "EquipAwaken_Hole_Detail\022\021\n\trealtimes\030\n \001"
    "(\005\"W\n\036GM_EquipAwaken_AddSwap_Request\022\014\n\004"
    "gmid\030\001 \002(\003\022\017\n\007holenum\030\002 \002(\005\022\026\n\016replaceho"
    "lenum\030\003 \002(\005\"\265\001\n\035GM_EquipAwaken_AddSwap_R"
    "eturn\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022\017\n\007h"
    "olenum\030\003 \001(\005\022\026\n\016replaceholenum\030\004 \001(\005\022\016\n\006"
    "getexp\030\005 \001(\005\022\022\n\nexperience\030\006 \001(\003\022)\n\004data"
    "\030\007 \003(\0132\033.GM_EquipAwaken_Hole_Detail\",\n\034G"
    "M_EquipAwaken_Store_Request\022\014\n\004gmid\030\001 \002("
    "\003\"f\n\033GM_EquipAwaken_Store_Return\022\016\n\006resu"
    "lt\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022)\n\004data\030\003 \001(\0132\033.G"
    "M_EquipAwaken_Hole_Detail\">\n\035GM_EquipAwa"
    "ken_Refine_Request\022\014\n\004gmid\030\001 \002(\003\022\017\n\007hole"
    "num\030\002 \001(\005\"\234\001\n\034GM_EquipAwaken_Refine_Retu"
    "rn\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022\017\n\007hole"
    "num\030\003 \001(\005\022\016\n\006getexp\030\004 \001(\005\022\022\n\nexperience\030"
    "\005 \001(\003\022)\n\004data\030\006 \003(\0132\033.GM_EquipAwaken_Hol"
    "e_Detail\"-\n\035GM_EquipAwaken_Unlock_Reques"
    "t\022\014\n\004gmid\030\001 \002(\003\"M\n\034GM_EquipAwaken_Unlock"
    "_Return\022\016\n\006result\030\001 \002(\005\022\017\n\007holenum\030\002 \001(\005"
    "\022\014\n\004gmid\030\003 \001(\003\",\n\033GM_EquipAwaken_Info_Re"
    "quest\022\r\n\005nGmid\030\001 \002(\003\"`\n\032GM_EquipAwaken_I"
    "nfo_Return\022\017\n\007nresult\030\001 \002(\005\022\r\n\005nGmid\030\002 \002"
    "(\003\022\"\n\004data\030\003 \003(\0132\024.GM_EquipAwaken_Info\"<"
    "\n\023GM_EquipAwaken_Info\022\020\n\010awakenid\030\001 \002(\005\022"
    "\023\n\013awakenlevel\030\002 \001(\005\"D\n\033GM_EquipAwaken_S"
    "wap_Request\022\021\n\tnLeftGmid\030\001 \002(\003\022\022\n\nnRight"
    "Gmid\030\002 \001(\003\"-\n\032GM_EquipAwaken_Swap_Return"
    "\022\017\n\007nResult\030\001 \002(\005\"[\n\035GM_EquipAwaken_Upgr"
    "ade_Change\022\016\n\006result\030\001 \002(\005\022*\n\004data\030\002 \003(\013"
    "2\034.GM_EquipAwaken_Upgrade_Info\"=\n\033GM_Equ"
    "ipAwaken_Upgrade_Info\022\017\n\007holenum\030\001 \002(\005\022\r"
    "\n\005state\030\002 \001(\005\"I\n\024GM_EquipWing_Request\022\014\n"
    "\004gmid\030\001 \002(\003\022\021\n\twinglevel\030\002 \001(\005\022\020\n\010issuce"
    "ss\030\003 \002(\005\"C\n\rGM_AwakeEquip\022\014\n\004gmid\030\001 \002(\003\022"
    "\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\016\n\006isFull\030\004 \002(\005\"E\n"
    "\020GM_AwakeEquipAll\022\016\n\006return\030\001 \002(\005\022!\n\tawa"
    "kedata\030\002 \003(\0132\016.GM_AwakeEquip\"A\n\024GM_Awake"
    "EquipRequest\022\026\n\016awakeequipgmid\030\001 \002(\003\022\021\n\t"
    "equipgmid\030\002 \002(\003", 3055);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equipuplevel.txt", &protobuf_RegisterTypes);
  GM_EquipInfoReturn::default_instance_ = new GM_EquipInfoReturn();
  GM_EquipForge::default_instance_ = new GM_EquipForge();
  GM_EquipAwaken::default_instance_ = new GM_EquipAwaken();
  GM_OneKeyInfoReturn::default_instance_ = new GM_OneKeyInfoReturn();
  GM_ForgeRequest::default_instance_ = new GM_ForgeRequest();
  GM_EquipNotify::default_instance_ = new GM_EquipNotify();
  GM_EquipAwaken_UI_Request::default_instance_ = new GM_EquipAwaken_UI_Request();
  GM_EquipAwaken_UI_Return::default_instance_ = new GM_EquipAwaken_UI_Return();
  GM_EquipAwaken_Hole_Detail::default_instance_ = new GM_EquipAwaken_Hole_Detail();
  GM_EquipAwaken_Upgrade_Request::default_instance_ = new GM_EquipAwaken_Upgrade_Request();
  GM_EquipAwaken_Upgrade_Return::default_instance_ = new GM_EquipAwaken_Upgrade_Return();
  GM_EquipAwaken_Obtain_Request::default_instance_ = new GM_EquipAwaken_Obtain_Request();
  GM_EquipAwaken_Obtain_Return::default_instance_ = new GM_EquipAwaken_Obtain_Return();
  GM_EquipAwaken_AddSwap_Request::default_instance_ = new GM_EquipAwaken_AddSwap_Request();
  GM_EquipAwaken_AddSwap_Return::default_instance_ = new GM_EquipAwaken_AddSwap_Return();
  GM_EquipAwaken_Store_Request::default_instance_ = new GM_EquipAwaken_Store_Request();
  GM_EquipAwaken_Store_Return::default_instance_ = new GM_EquipAwaken_Store_Return();
  GM_EquipAwaken_Refine_Request::default_instance_ = new GM_EquipAwaken_Refine_Request();
  GM_EquipAwaken_Refine_Return::default_instance_ = new GM_EquipAwaken_Refine_Return();
  GM_EquipAwaken_Unlock_Request::default_instance_ = new GM_EquipAwaken_Unlock_Request();
  GM_EquipAwaken_Unlock_Return::default_instance_ = new GM_EquipAwaken_Unlock_Return();
  GM_EquipAwaken_Info_Request::default_instance_ = new GM_EquipAwaken_Info_Request();
  GM_EquipAwaken_Info_Return::default_instance_ = new GM_EquipAwaken_Info_Return();
  GM_EquipAwaken_Info::default_instance_ = new GM_EquipAwaken_Info();
  GM_EquipAwaken_Swap_Request::default_instance_ = new GM_EquipAwaken_Swap_Request();
  GM_EquipAwaken_Swap_Return::default_instance_ = new GM_EquipAwaken_Swap_Return();
  GM_EquipAwaken_Upgrade_Change::default_instance_ = new GM_EquipAwaken_Upgrade_Change();
  GM_EquipAwaken_Upgrade_Info::default_instance_ = new GM_EquipAwaken_Upgrade_Info();
  GM_EquipWing_Request::default_instance_ = new GM_EquipWing_Request();
  GM_AwakeEquip::default_instance_ = new GM_AwakeEquip();
  GM_AwakeEquipAll::default_instance_ = new GM_AwakeEquipAll();
  GM_AwakeEquipRequest::default_instance_ = new GM_AwakeEquipRequest();
  GM_EquipInfoReturn::default_instance_->InitAsDefaultInstance();
  GM_EquipForge::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken::default_instance_->InitAsDefaultInstance();
  GM_OneKeyInfoReturn::default_instance_->InitAsDefaultInstance();
  GM_ForgeRequest::default_instance_->InitAsDefaultInstance();
  GM_EquipNotify::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_UI_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_UI_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Hole_Detail::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Upgrade_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Upgrade_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Obtain_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Obtain_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_AddSwap_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_AddSwap_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Store_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Store_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Refine_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Refine_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Unlock_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Unlock_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Info_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Info_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Info::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Swap_Request::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Swap_Return::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Upgrade_Change::default_instance_->InitAsDefaultInstance();
  GM_EquipAwaken_Upgrade_Info::default_instance_->InitAsDefaultInstance();
  GM_EquipWing_Request::default_instance_->InitAsDefaultInstance();
  GM_AwakeEquip::default_instance_->InitAsDefaultInstance();
  GM_AwakeEquipAll::default_instance_->InitAsDefaultInstance();
  GM_AwakeEquipRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_equipuplevel_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_equipuplevel_2etxt {
  StaticDescriptorInitializer_equipuplevel_2etxt() {
    protobuf_AddDesc_equipuplevel_2etxt();
  }
} static_descriptor_initializer_equipuplevel_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_EquipInfoReturn::kMRoleidFieldNumber;
const int GM_EquipInfoReturn::kMIroncountFieldNumber;
const int GM_EquipInfoReturn::kMElitestoneFieldNumber;
const int GM_EquipInfoReturn::kMAnimalboneFieldNumber;
const int GM_EquipInfoReturn::kMIronidFieldNumber;
const int GM_EquipInfoReturn::kMEquipinfoFieldNumber;
#endif  // !_MSC_VER

GM_EquipInfoReturn::GM_EquipInfoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipInfoReturn::InitAsDefaultInstance() {
}

GM_EquipInfoReturn::GM_EquipInfoReturn(const GM_EquipInfoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipInfoReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_ironcount_ = 0;
  m_elitestone_ = 0;
  m_animalbone_ = 0;
  m_ironid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipInfoReturn::~GM_EquipInfoReturn() {
  SharedDtor();
}

void GM_EquipInfoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipInfoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipInfoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipInfoReturn_descriptor_;
}

const GM_EquipInfoReturn& GM_EquipInfoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipInfoReturn* GM_EquipInfoReturn::default_instance_ = NULL;

GM_EquipInfoReturn* GM_EquipInfoReturn::New() const {
  return new GM_EquipInfoReturn;
}

void GM_EquipInfoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_ironcount_ = 0;
    m_elitestone_ = 0;
    m_animalbone_ = 0;
    m_ironid_ = 0;
  }
  m_equipinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipInfoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_ironcount;
        break;
      }

      // optional int32 m_ironcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ironcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ironcount_)));
          set_has_m_ironcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_elitestone;
        break;
      }

      // optional int32 m_elitestone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_elitestone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_elitestone_)));
          set_has_m_elitestone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_animalbone;
        break;
      }

      // optional int32 m_animalbone = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_animalbone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_animalbone_)));
          set_has_m_animalbone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_equipinfo;
        break;
      }

      // repeated .GM_EquipForge m_equipinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_equipinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_equipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_equipinfo;
        if (input->ExpectTag(48)) goto parse_m_ironid;
        break;
      }

      // optional int32 m_ironid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ironid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ironid_)));
          set_has_m_ironid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipInfoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_ironcount = 2;
  if (has_m_ironcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ironcount(), output);
  }

  // optional int32 m_elitestone = 3;
  if (has_m_elitestone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_elitestone(), output);
  }

  // optional int32 m_animalbone = 4;
  if (has_m_animalbone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_animalbone(), output);
  }

  // repeated .GM_EquipForge m_equipinfo = 5;
  for (int i = 0; i < this->m_equipinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_equipinfo(i), output);
  }

  // optional int32 m_ironid = 6;
  if (has_m_ironid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_ironid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipInfoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_ironcount = 2;
  if (has_m_ironcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ironcount(), target);
  }

  // optional int32 m_elitestone = 3;
  if (has_m_elitestone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_elitestone(), target);
  }

  // optional int32 m_animalbone = 4;
  if (has_m_animalbone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_animalbone(), target);
  }

  // repeated .GM_EquipForge m_equipinfo = 5;
  for (int i = 0; i < this->m_equipinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_equipinfo(i), target);
  }

  // optional int32 m_ironid = 6;
  if (has_m_ironid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_ironid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipInfoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_ironcount = 2;
    if (has_m_ironcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ironcount());
    }

    // optional int32 m_elitestone = 3;
    if (has_m_elitestone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_elitestone());
    }

    // optional int32 m_animalbone = 4;
    if (has_m_animalbone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_animalbone());
    }

    // optional int32 m_ironid = 6;
    if (has_m_ironid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ironid());
    }

  }
  // repeated .GM_EquipForge m_equipinfo = 5;
  total_size += 1 * this->m_equipinfo_size();
  for (int i = 0; i < this->m_equipinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_equipinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipInfoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipInfoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipInfoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipInfoReturn::MergeFrom(const GM_EquipInfoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_equipinfo_.MergeFrom(from.m_equipinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_ironcount()) {
      set_m_ironcount(from.m_ironcount());
    }
    if (from.has_m_elitestone()) {
      set_m_elitestone(from.m_elitestone());
    }
    if (from.has_m_animalbone()) {
      set_m_animalbone(from.m_animalbone());
    }
    if (from.has_m_ironid()) {
      set_m_ironid(from.m_ironid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipInfoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipInfoReturn::CopyFrom(const GM_EquipInfoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipInfoReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_equipinfo_size(); i++) {
    if (!this->m_equipinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipInfoReturn::Swap(GM_EquipInfoReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_ironcount_, other->m_ironcount_);
    std::swap(m_elitestone_, other->m_elitestone_);
    std::swap(m_animalbone_, other->m_animalbone_);
    std::swap(m_ironid_, other->m_ironid_);
    m_equipinfo_.Swap(&other->m_equipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipInfoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipInfoReturn_descriptor_;
  metadata.reflection = GM_EquipInfoReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipForge::kMGmidFieldNumber;
const int GM_EquipForge::kMForgeLvFieldNumber;
const int GM_EquipForge::kMForgeExpFieldNumber;
const int GM_EquipForge::kMRefinLvFieldNumber;
const int GM_EquipForge::kMGradeLvFieldNumber;
const int GM_EquipForge::kMAwkenInfoFieldNumber;
const int GM_EquipForge::kMWinglevelFieldNumber;
#endif  // !_MSC_VER

GM_EquipForge::GM_EquipForge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipForge::InitAsDefaultInstance() {
}

GM_EquipForge::GM_EquipForge(const GM_EquipForge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipForge::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_forgelv_ = 0;
  m_forgeexp_ = 0;
  m_refinlv_ = 0;
  m_gradelv_ = 0;
  m_winglevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipForge::~GM_EquipForge() {
  SharedDtor();
}

void GM_EquipForge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipForge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipForge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipForge_descriptor_;
}

const GM_EquipForge& GM_EquipForge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipForge* GM_EquipForge::default_instance_ = NULL;

GM_EquipForge* GM_EquipForge::New() const {
  return new GM_EquipForge;
}

void GM_EquipForge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_forgelv_ = 0;
    m_forgeexp_ = 0;
    m_refinlv_ = 0;
    m_gradelv_ = 0;
    m_winglevel_ = 0;
  }
  m_awkeninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipForge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_forgeLv;
        break;
      }

      // optional int32 m_forgeLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_forgeLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_forgelv_)));
          set_has_m_forgelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_forgeExp;
        break;
      }

      // optional int32 m_forgeExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_forgeExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_forgeexp_)));
          set_has_m_forgeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_refinLv;
        break;
      }

      // optional int32 m_refinLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refinLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refinlv_)));
          set_has_m_refinlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_gradeLv;
        break;
      }

      // optional int32 m_gradeLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gradeLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gradelv_)));
          set_has_m_gradelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_awkenInfo;
        break;
      }

      // repeated .GM_EquipAwaken m_awkenInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_awkenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_awkeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_awkenInfo;
        if (input->ExpectTag(56)) goto parse_m_winglevel;
        break;
      }

      // optional int32 m_winglevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_winglevel_)));
          set_has_m_winglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipForge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // optional int32 m_forgeLv = 2;
  if (has_m_forgelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_forgelv(), output);
  }

  // optional int32 m_forgeExp = 3;
  if (has_m_forgeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_forgeexp(), output);
  }

  // optional int32 m_refinLv = 4;
  if (has_m_refinlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_refinlv(), output);
  }

  // optional int32 m_gradeLv = 5;
  if (has_m_gradelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_gradelv(), output);
  }

  // repeated .GM_EquipAwaken m_awkenInfo = 6;
  for (int i = 0; i < this->m_awkeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_awkeninfo(i), output);
  }

  // optional int32 m_winglevel = 7;
  if (has_m_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_winglevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipForge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // optional int32 m_forgeLv = 2;
  if (has_m_forgelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_forgelv(), target);
  }

  // optional int32 m_forgeExp = 3;
  if (has_m_forgeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_forgeexp(), target);
  }

  // optional int32 m_refinLv = 4;
  if (has_m_refinlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_refinlv(), target);
  }

  // optional int32 m_gradeLv = 5;
  if (has_m_gradelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_gradelv(), target);
  }

  // repeated .GM_EquipAwaken m_awkenInfo = 6;
  for (int i = 0; i < this->m_awkeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_awkeninfo(i), target);
  }

  // optional int32 m_winglevel = 7;
  if (has_m_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_winglevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipForge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // optional int32 m_forgeLv = 2;
    if (has_m_forgelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_forgelv());
    }

    // optional int32 m_forgeExp = 3;
    if (has_m_forgeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_forgeexp());
    }

    // optional int32 m_refinLv = 4;
    if (has_m_refinlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refinlv());
    }

    // optional int32 m_gradeLv = 5;
    if (has_m_gradelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gradelv());
    }

    // optional int32 m_winglevel = 7;
    if (has_m_winglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_winglevel());
    }

  }
  // repeated .GM_EquipAwaken m_awkenInfo = 6;
  total_size += 1 * this->m_awkeninfo_size();
  for (int i = 0; i < this->m_awkeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_awkeninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipForge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipForge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipForge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipForge::MergeFrom(const GM_EquipForge& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_awkeninfo_.MergeFrom(from.m_awkeninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_forgelv()) {
      set_m_forgelv(from.m_forgelv());
    }
    if (from.has_m_forgeexp()) {
      set_m_forgeexp(from.m_forgeexp());
    }
    if (from.has_m_refinlv()) {
      set_m_refinlv(from.m_refinlv());
    }
    if (from.has_m_gradelv()) {
      set_m_gradelv(from.m_gradelv());
    }
    if (from.has_m_winglevel()) {
      set_m_winglevel(from.m_winglevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipForge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipForge::CopyFrom(const GM_EquipForge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipForge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_awkeninfo_size(); i++) {
    if (!this->m_awkeninfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipForge::Swap(GM_EquipForge* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_forgelv_, other->m_forgelv_);
    std::swap(m_forgeexp_, other->m_forgeexp_);
    std::swap(m_refinlv_, other->m_refinlv_);
    std::swap(m_gradelv_, other->m_gradelv_);
    m_awkeninfo_.Swap(&other->m_awkeninfo_);
    std::swap(m_winglevel_, other->m_winglevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipForge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipForge_descriptor_;
  metadata.reflection = GM_EquipForge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken::kMPropertyidFieldNumber;
const int GM_EquipAwaken::kMPropertyLvFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken::GM_EquipAwaken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken::InitAsDefaultInstance() {
}

GM_EquipAwaken::GM_EquipAwaken(const GM_EquipAwaken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken::SharedCtor() {
  _cached_size_ = 0;
  m_propertyid_ = 0;
  m_propertylv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken::~GM_EquipAwaken() {
  SharedDtor();
}

void GM_EquipAwaken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_descriptor_;
}

const GM_EquipAwaken& GM_EquipAwaken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken* GM_EquipAwaken::default_instance_ = NULL;

GM_EquipAwaken* GM_EquipAwaken::New() const {
  return new GM_EquipAwaken;
}

void GM_EquipAwaken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_propertyid_ = 0;
    m_propertylv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_propertyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertyid_)));
          set_has_m_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_propertyLv;
        break;
      }

      // optional int32 m_propertyLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_propertyLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertylv_)));
          set_has_m_propertylv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_propertyid = 1;
  if (has_m_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_propertyid(), output);
  }

  // optional int32 m_propertyLv = 2;
  if (has_m_propertylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_propertylv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_propertyid = 1;
  if (has_m_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_propertyid(), target);
  }

  // optional int32 m_propertyLv = 2;
  if (has_m_propertylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_propertylv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_propertyid = 1;
    if (has_m_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertyid());
    }

    // optional int32 m_propertyLv = 2;
    if (has_m_propertylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertylv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken::MergeFrom(const GM_EquipAwaken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_propertyid()) {
      set_m_propertyid(from.m_propertyid());
    }
    if (from.has_m_propertylv()) {
      set_m_propertylv(from.m_propertylv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken::CopyFrom(const GM_EquipAwaken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken::Swap(GM_EquipAwaken* other) {
  if (other != this) {
    std::swap(m_propertyid_, other->m_propertyid_);
    std::swap(m_propertylv_, other->m_propertylv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_descriptor_;
  metadata.reflection = GM_EquipAwaken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OneKeyInfoReturn::kMCostGoldFieldNumber;
const int GM_OneKeyInfoReturn::kMCostIronFieldNumber;
const int GM_OneKeyInfoReturn::kMMaxForgeLvFieldNumber;
#endif  // !_MSC_VER

GM_OneKeyInfoReturn::GM_OneKeyInfoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OneKeyInfoReturn::InitAsDefaultInstance() {
}

GM_OneKeyInfoReturn::GM_OneKeyInfoReturn(const GM_OneKeyInfoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OneKeyInfoReturn::SharedCtor() {
  _cached_size_ = 0;
  m_costgold_ = 0;
  m_costiron_ = 0;
  m_maxforgelv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OneKeyInfoReturn::~GM_OneKeyInfoReturn() {
  SharedDtor();
}

void GM_OneKeyInfoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OneKeyInfoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OneKeyInfoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OneKeyInfoReturn_descriptor_;
}

const GM_OneKeyInfoReturn& GM_OneKeyInfoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_OneKeyInfoReturn* GM_OneKeyInfoReturn::default_instance_ = NULL;

GM_OneKeyInfoReturn* GM_OneKeyInfoReturn::New() const {
  return new GM_OneKeyInfoReturn;
}

void GM_OneKeyInfoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_costgold_ = 0;
    m_costiron_ = 0;
    m_maxforgelv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OneKeyInfoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_costGold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costgold_)));
          set_has_m_costgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_costIron;
        break;
      }

      // optional int32 m_costIron = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costIron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costiron_)));
          set_has_m_costiron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_maxForgeLv;
        break;
      }

      // optional int32 m_maxForgeLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxForgeLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxforgelv_)));
          set_has_m_maxforgelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OneKeyInfoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_costGold = 1;
  if (has_m_costgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_costgold(), output);
  }

  // optional int32 m_costIron = 2;
  if (has_m_costiron()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_costiron(), output);
  }

  // optional int32 m_maxForgeLv = 3;
  if (has_m_maxforgelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_maxforgelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OneKeyInfoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_costGold = 1;
  if (has_m_costgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_costgold(), target);
  }

  // optional int32 m_costIron = 2;
  if (has_m_costiron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_costiron(), target);
  }

  // optional int32 m_maxForgeLv = 3;
  if (has_m_maxforgelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_maxforgelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OneKeyInfoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_costGold = 1;
    if (has_m_costgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costgold());
    }

    // optional int32 m_costIron = 2;
    if (has_m_costiron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costiron());
    }

    // optional int32 m_maxForgeLv = 3;
    if (has_m_maxforgelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxforgelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OneKeyInfoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OneKeyInfoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OneKeyInfoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OneKeyInfoReturn::MergeFrom(const GM_OneKeyInfoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_costgold()) {
      set_m_costgold(from.m_costgold());
    }
    if (from.has_m_costiron()) {
      set_m_costiron(from.m_costiron());
    }
    if (from.has_m_maxforgelv()) {
      set_m_maxforgelv(from.m_maxforgelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OneKeyInfoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OneKeyInfoReturn::CopyFrom(const GM_OneKeyInfoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OneKeyInfoReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_OneKeyInfoReturn::Swap(GM_OneKeyInfoReturn* other) {
  if (other != this) {
    std::swap(m_costgold_, other->m_costgold_);
    std::swap(m_costiron_, other->m_costiron_);
    std::swap(m_maxforgelv_, other->m_maxforgelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OneKeyInfoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OneKeyInfoReturn_descriptor_;
  metadata.reflection = GM_OneKeyInfoReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ForgeRequest::kMGmidFieldNumber;
const int GM_ForgeRequest::kMGmidsFieldNumber;
#endif  // !_MSC_VER

GM_ForgeRequest::GM_ForgeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ForgeRequest::InitAsDefaultInstance() {
}

GM_ForgeRequest::GM_ForgeRequest(const GM_ForgeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ForgeRequest::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ForgeRequest::~GM_ForgeRequest() {
  SharedDtor();
}

void GM_ForgeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ForgeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ForgeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ForgeRequest_descriptor_;
}

const GM_ForgeRequest& GM_ForgeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_ForgeRequest* GM_ForgeRequest::default_instance_ = NULL;

GM_ForgeRequest* GM_ForgeRequest::New() const {
  return new GM_ForgeRequest;
}

void GM_ForgeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  m_gmids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ForgeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gmids;
        break;
      }

      // repeated int64 m_gmids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_m_gmids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_gmids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gmids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ForgeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // repeated int64 m_gmids = 2;
  for (int i = 0; i < this->m_gmids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->m_gmids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ForgeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_gmid = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // repeated int64 m_gmids = 2;
  for (int i = 0; i < this->m_gmids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->m_gmids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ForgeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_gmid = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  // repeated int64 m_gmids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_gmids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_gmids(i));
    }
    total_size += 1 * this->m_gmids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ForgeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ForgeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ForgeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ForgeRequest::MergeFrom(const GM_ForgeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_gmids_.MergeFrom(from.m_gmids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ForgeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ForgeRequest::CopyFrom(const GM_ForgeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ForgeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ForgeRequest::Swap(GM_ForgeRequest* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    m_gmids_.Swap(&other->m_gmids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ForgeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ForgeRequest_descriptor_;
  metadata.reflection = GM_ForgeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipNotify::kMTypeFieldNumber;
const int GM_EquipNotify::kMEquipinfoFieldNumber;
#endif  // !_MSC_VER

GM_EquipNotify::GM_EquipNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipNotify::InitAsDefaultInstance() {
  m_equipinfo_ = const_cast< ::GM_EquipForge*>(&::GM_EquipForge::default_instance());
}

GM_EquipNotify::GM_EquipNotify(const GM_EquipNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipNotify::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_equipinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipNotify::~GM_EquipNotify() {
  SharedDtor();
}

void GM_EquipNotify::SharedDtor() {
  if (this != default_instance_) {
    delete m_equipinfo_;
  }
}

void GM_EquipNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipNotify_descriptor_;
}

const GM_EquipNotify& GM_EquipNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipNotify* GM_EquipNotify::default_instance_ = NULL;

GM_EquipNotify* GM_EquipNotify::New() const {
  return new GM_EquipNotify;
}

void GM_EquipNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    if (has_m_equipinfo()) {
      if (m_equipinfo_ != NULL) m_equipinfo_->::GM_EquipForge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_equipinfo;
        break;
      }

      // required .GM_EquipForge m_equipinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_equipinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_equipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // required .GM_EquipForge m_equipinfo = 2;
  if (has_m_equipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_equipinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // required .GM_EquipForge m_equipinfo = 2;
  if (has_m_equipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_equipinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // required .GM_EquipForge m_equipinfo = 2;
    if (has_m_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_equipinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipNotify::MergeFrom(const GM_EquipNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_equipinfo()) {
      mutable_m_equipinfo()->::GM_EquipForge::MergeFrom(from.m_equipinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipNotify::CopyFrom(const GM_EquipNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_equipinfo()) {
    if (!this->m_equipinfo().IsInitialized()) return false;
  }
  return true;
}

void GM_EquipNotify::Swap(GM_EquipNotify* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_equipinfo_, other->m_equipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipNotify_descriptor_;
  metadata.reflection = GM_EquipNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_UI_Request::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_UI_Request::GM_EquipAwaken_UI_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_UI_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_UI_Request::GM_EquipAwaken_UI_Request(const GM_EquipAwaken_UI_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_UI_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_UI_Request::~GM_EquipAwaken_UI_Request() {
  SharedDtor();
}

void GM_EquipAwaken_UI_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_UI_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_UI_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_UI_Request_descriptor_;
}

const GM_EquipAwaken_UI_Request& GM_EquipAwaken_UI_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_UI_Request* GM_EquipAwaken_UI_Request::default_instance_ = NULL;

GM_EquipAwaken_UI_Request* GM_EquipAwaken_UI_Request::New() const {
  return new GM_EquipAwaken_UI_Request;
}

void GM_EquipAwaken_UI_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_UI_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_UI_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_UI_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_UI_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_UI_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_UI_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_UI_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_UI_Request::MergeFrom(const GM_EquipAwaken_UI_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_UI_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_UI_Request::CopyFrom(const GM_EquipAwaken_UI_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_UI_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_UI_Request::Swap(GM_EquipAwaken_UI_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_UI_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_UI_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_UI_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_UI_Return::kResultFieldNumber;
const int GM_EquipAwaken_UI_Return::kGmidFieldNumber;
const int GM_EquipAwaken_UI_Return::kExperienceFieldNumber;
const int GM_EquipAwaken_UI_Return::kPillNumFieldNumber;
const int GM_EquipAwaken_UI_Return::kDiamondTotalFieldNumber;
const int GM_EquipAwaken_UI_Return::kDiamondNeedFieldNumber;
const int GM_EquipAwaken_UI_Return::kDiscountFieldNumber;
const int GM_EquipAwaken_UI_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_UI_Return::GM_EquipAwaken_UI_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_UI_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_UI_Return::GM_EquipAwaken_UI_Return(const GM_EquipAwaken_UI_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_UI_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  experience_ = GOOGLE_LONGLONG(0);
  pillnum_ = 0;
  diamondtotal_ = 0;
  diamondneed_ = 0;
  discount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_UI_Return::~GM_EquipAwaken_UI_Return() {
  SharedDtor();
}

void GM_EquipAwaken_UI_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_UI_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_UI_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_UI_Return_descriptor_;
}

const GM_EquipAwaken_UI_Return& GM_EquipAwaken_UI_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_UI_Return* GM_EquipAwaken_UI_Return::default_instance_ = NULL;

GM_EquipAwaken_UI_Return* GM_EquipAwaken_UI_Return::New() const {
  return new GM_EquipAwaken_UI_Return;
}

void GM_EquipAwaken_UI_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    experience_ = GOOGLE_LONGLONG(0);
    pillnum_ = 0;
    diamondtotal_ = 0;
    diamondneed_ = 0;
    discount_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_UI_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // optional int64 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pillNum;
        break;
      }

      // optional int32 pillNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pillnum_)));
          set_has_pillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamondTotal;
        break;
      }

      // optional int32 diamondTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondtotal_)));
          set_has_diamondtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamondNeed;
        break;
      }

      // optional int32 diamondNeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondneed_)));
          set_has_diamondneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_discount;
        break;
      }

      // optional float discount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .GM_EquipAwaken_Hole_Detail data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_UI_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int64 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->experience(), output);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pillnum(), output);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamondtotal(), output);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamondneed(), output);
  }

  // optional float discount = 7;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->discount(), output);
  }

  // repeated .GM_EquipAwaken_Hole_Detail data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_UI_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int64 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->experience(), target);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pillnum(), target);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamondtotal(), target);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->diamondneed(), target);
  }

  // optional float discount = 7;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->discount(), target);
  }

  // repeated .GM_EquipAwaken_Hole_Detail data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_UI_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int64 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }

    // optional int32 pillNum = 4;
    if (has_pillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pillnum());
    }

    // optional int32 diamondTotal = 5;
    if (has_diamondtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondtotal());
    }

    // optional int32 diamondNeed = 6;
    if (has_diamondneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondneed());
    }

    // optional float discount = 7;
    if (has_discount()) {
      total_size += 1 + 4;
    }

  }
  // repeated .GM_EquipAwaken_Hole_Detail data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_UI_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_UI_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_UI_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_UI_Return::MergeFrom(const GM_EquipAwaken_UI_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_pillnum()) {
      set_pillnum(from.pillnum());
    }
    if (from.has_diamondtotal()) {
      set_diamondtotal(from.diamondtotal());
    }
    if (from.has_diamondneed()) {
      set_diamondneed(from.diamondneed());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_UI_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_UI_Return::CopyFrom(const GM_EquipAwaken_UI_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_UI_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_UI_Return::Swap(GM_EquipAwaken_UI_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(experience_, other->experience_);
    std::swap(pillnum_, other->pillnum_);
    std::swap(diamondtotal_, other->diamondtotal_);
    std::swap(diamondneed_, other->diamondneed_);
    std::swap(discount_, other->discount_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_UI_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_UI_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_UI_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Hole_Detail::kHolenumFieldNumber;
const int GM_EquipAwaken_Hole_Detail::kPropertyIdFieldNumber;
const int GM_EquipAwaken_Hole_Detail::kPropertyLevelFieldNumber;
const int GM_EquipAwaken_Hole_Detail::kMaxlevelFieldNumber;
const int GM_EquipAwaken_Hole_Detail::kStateFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Hole_Detail::GM_EquipAwaken_Hole_Detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Hole_Detail::InitAsDefaultInstance() {
}

GM_EquipAwaken_Hole_Detail::GM_EquipAwaken_Hole_Detail(const GM_EquipAwaken_Hole_Detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Hole_Detail::SharedCtor() {
  _cached_size_ = 0;
  holenum_ = 0;
  propertyid_ = 0;
  propertylevel_ = 0;
  maxlevel_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Hole_Detail::~GM_EquipAwaken_Hole_Detail() {
  SharedDtor();
}

void GM_EquipAwaken_Hole_Detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Hole_Detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Hole_Detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Hole_Detail_descriptor_;
}

const GM_EquipAwaken_Hole_Detail& GM_EquipAwaken_Hole_Detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Hole_Detail* GM_EquipAwaken_Hole_Detail::default_instance_ = NULL;

GM_EquipAwaken_Hole_Detail* GM_EquipAwaken_Hole_Detail::New() const {
  return new GM_EquipAwaken_Hole_Detail;
}

void GM_EquipAwaken_Hole_Detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    holenum_ = 0;
    propertyid_ = 0;
    propertylevel_ = 0;
    maxlevel_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Hole_Detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 holenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propertyId;
        break;
      }

      // optional int32 propertyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_propertyLevel;
        break;
      }

      // optional int32 propertyLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertylevel_)));
          set_has_propertylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxlevel;
        break;
      }

      // optional int32 maxlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Hole_Detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holenum(), output);
  }

  // optional int32 propertyId = 2;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propertyid(), output);
  }

  // optional int32 propertyLevel = 3;
  if (has_propertylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->propertylevel(), output);
  }

  // optional int32 maxlevel = 4;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxlevel(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Hole_Detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holenum(), target);
  }

  // optional int32 propertyId = 2;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propertyid(), target);
  }

  // optional int32 propertyLevel = 3;
  if (has_propertylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->propertylevel(), target);
  }

  // optional int32 maxlevel = 4;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxlevel(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Hole_Detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 holenum = 1;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 propertyId = 2;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 propertyLevel = 3;
    if (has_propertylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertylevel());
    }

    // optional int32 maxlevel = 4;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Hole_Detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Hole_Detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Hole_Detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Hole_Detail::MergeFrom(const GM_EquipAwaken_Hole_Detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_propertylevel()) {
      set_propertylevel(from.propertylevel());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Hole_Detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Hole_Detail::CopyFrom(const GM_EquipAwaken_Hole_Detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Hole_Detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Hole_Detail::Swap(GM_EquipAwaken_Hole_Detail* other) {
  if (other != this) {
    std::swap(holenum_, other->holenum_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(propertylevel_, other->propertylevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Hole_Detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Hole_Detail_descriptor_;
  metadata.reflection = GM_EquipAwaken_Hole_Detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Upgrade_Request::kGmidFieldNumber;
const int GM_EquipAwaken_Upgrade_Request::kHolenumFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Upgrade_Request::GM_EquipAwaken_Upgrade_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Upgrade_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Upgrade_Request::GM_EquipAwaken_Upgrade_Request(const GM_EquipAwaken_Upgrade_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  holenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Upgrade_Request::~GM_EquipAwaken_Upgrade_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Upgrade_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Upgrade_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Upgrade_Request_descriptor_;
}

const GM_EquipAwaken_Upgrade_Request& GM_EquipAwaken_Upgrade_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Upgrade_Request* GM_EquipAwaken_Upgrade_Request::default_instance_ = NULL;

GM_EquipAwaken_Upgrade_Request* GM_EquipAwaken_Upgrade_Request::New() const {
  return new GM_EquipAwaken_Upgrade_Request;
}

void GM_EquipAwaken_Upgrade_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    holenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Upgrade_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Upgrade_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Upgrade_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Upgrade_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Upgrade_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Upgrade_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Upgrade_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Upgrade_Request::MergeFrom(const GM_EquipAwaken_Upgrade_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Upgrade_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Request::CopyFrom(const GM_EquipAwaken_Upgrade_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Upgrade_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Upgrade_Request::Swap(GM_EquipAwaken_Upgrade_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(holenum_, other->holenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Upgrade_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Upgrade_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Upgrade_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Upgrade_Return::kResultFieldNumber;
const int GM_EquipAwaken_Upgrade_Return::kGmidFieldNumber;
const int GM_EquipAwaken_Upgrade_Return::kHolenumFieldNumber;
const int GM_EquipAwaken_Upgrade_Return::kPropertyIdFieldNumber;
const int GM_EquipAwaken_Upgrade_Return::kPropertyLevelFieldNumber;
const int GM_EquipAwaken_Upgrade_Return::kExperienceFieldNumber;
const int GM_EquipAwaken_Upgrade_Return::kCanupgradeFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Upgrade_Return::GM_EquipAwaken_Upgrade_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Upgrade_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_Upgrade_Return::GM_EquipAwaken_Upgrade_Return(const GM_EquipAwaken_Upgrade_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  holenum_ = 0;
  propertyid_ = 0;
  propertylevel_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  canupgrade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Upgrade_Return::~GM_EquipAwaken_Upgrade_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Upgrade_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Upgrade_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Upgrade_Return_descriptor_;
}

const GM_EquipAwaken_Upgrade_Return& GM_EquipAwaken_Upgrade_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Upgrade_Return* GM_EquipAwaken_Upgrade_Return::default_instance_ = NULL;

GM_EquipAwaken_Upgrade_Return* GM_EquipAwaken_Upgrade_Return::New() const {
  return new GM_EquipAwaken_Upgrade_Return;
}

void GM_EquipAwaken_Upgrade_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    holenum_ = 0;
    propertyid_ = 0;
    propertylevel_ = 0;
    experience_ = GOOGLE_LONGLONG(0);
    canupgrade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Upgrade_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propertyId;
        break;
      }

      // optional int32 propertyId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_propertyLevel;
        break;
      }

      // optional int32 propertyLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertylevel_)));
          set_has_propertylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_experience;
        break;
      }

      // optional int64 experience = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_canupgrade;
        break;
      }

      // optional int32 canupgrade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canupgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canupgrade_)));
          set_has_canupgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Upgrade_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 propertyId = 4;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->propertyid(), output);
  }

  // optional int32 propertyLevel = 5;
  if (has_propertylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->propertylevel(), output);
  }

  // optional int64 experience = 6;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->experience(), output);
  }

  // optional int32 canupgrade = 7;
  if (has_canupgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->canupgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Upgrade_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 propertyId = 4;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->propertyid(), target);
  }

  // optional int32 propertyLevel = 5;
  if (has_propertylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->propertylevel(), target);
  }

  // optional int64 experience = 6;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->experience(), target);
  }

  // optional int32 canupgrade = 7;
  if (has_canupgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->canupgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Upgrade_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 propertyId = 4;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 propertyLevel = 5;
    if (has_propertylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertylevel());
    }

    // optional int64 experience = 6;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }

    // optional int32 canupgrade = 7;
    if (has_canupgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canupgrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Upgrade_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Upgrade_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Upgrade_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Upgrade_Return::MergeFrom(const GM_EquipAwaken_Upgrade_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_propertylevel()) {
      set_propertylevel(from.propertylevel());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_canupgrade()) {
      set_canupgrade(from.canupgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Upgrade_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Return::CopyFrom(const GM_EquipAwaken_Upgrade_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Upgrade_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Upgrade_Return::Swap(GM_EquipAwaken_Upgrade_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(holenum_, other->holenum_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(propertylevel_, other->propertylevel_);
    std::swap(experience_, other->experience_);
    std::swap(canupgrade_, other->canupgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Upgrade_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Upgrade_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Upgrade_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Obtain_Request::kGmidFieldNumber;
const int GM_EquipAwaken_Obtain_Request::kObtainTypeFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Obtain_Request::GM_EquipAwaken_Obtain_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Obtain_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Obtain_Request::GM_EquipAwaken_Obtain_Request(const GM_EquipAwaken_Obtain_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Obtain_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  obtaintype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Obtain_Request::~GM_EquipAwaken_Obtain_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Obtain_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Obtain_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Obtain_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Obtain_Request_descriptor_;
}

const GM_EquipAwaken_Obtain_Request& GM_EquipAwaken_Obtain_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Obtain_Request* GM_EquipAwaken_Obtain_Request::default_instance_ = NULL;

GM_EquipAwaken_Obtain_Request* GM_EquipAwaken_Obtain_Request::New() const {
  return new GM_EquipAwaken_Obtain_Request;
}

void GM_EquipAwaken_Obtain_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    obtaintype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Obtain_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obtainType;
        break;
      }

      // optional int32 obtainType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obtaintype_)));
          set_has_obtaintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Obtain_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 obtainType = 2;
  if (has_obtaintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obtaintype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Obtain_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 obtainType = 2;
  if (has_obtaintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obtaintype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Obtain_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 obtainType = 2;
    if (has_obtaintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obtaintype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Obtain_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Obtain_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Obtain_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Obtain_Request::MergeFrom(const GM_EquipAwaken_Obtain_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_obtaintype()) {
      set_obtaintype(from.obtaintype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Obtain_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Obtain_Request::CopyFrom(const GM_EquipAwaken_Obtain_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Obtain_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Obtain_Request::Swap(GM_EquipAwaken_Obtain_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(obtaintype_, other->obtaintype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Obtain_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Obtain_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Obtain_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Obtain_Return::kResultFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kGmidFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kObtainTypeFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kPillNumFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kDiamondTotalFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kDiamondNeedFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kGetexpFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kExperienceFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kDataFieldNumber;
const int GM_EquipAwaken_Obtain_Return::kRealtimesFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Obtain_Return::GM_EquipAwaken_Obtain_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Obtain_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_EquipAwaken_Hole_Detail*>(&::GM_EquipAwaken_Hole_Detail::default_instance());
}

GM_EquipAwaken_Obtain_Return::GM_EquipAwaken_Obtain_Return(const GM_EquipAwaken_Obtain_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Obtain_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  obtaintype_ = 0;
  pillnum_ = 0;
  diamondtotal_ = 0;
  diamondneed_ = 0;
  getexp_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  realtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Obtain_Return::~GM_EquipAwaken_Obtain_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Obtain_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_EquipAwaken_Obtain_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Obtain_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Obtain_Return_descriptor_;
}

const GM_EquipAwaken_Obtain_Return& GM_EquipAwaken_Obtain_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Obtain_Return* GM_EquipAwaken_Obtain_Return::default_instance_ = NULL;

GM_EquipAwaken_Obtain_Return* GM_EquipAwaken_Obtain_Return::New() const {
  return new GM_EquipAwaken_Obtain_Return;
}

void GM_EquipAwaken_Obtain_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    obtaintype_ = 0;
    pillnum_ = 0;
    diamondtotal_ = 0;
    diamondneed_ = 0;
    getexp_ = 0;
    experience_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::GM_EquipAwaken_Hole_Detail::Clear();
    }
    realtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Obtain_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obtainType;
        break;
      }

      // optional int32 obtainType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obtaintype_)));
          set_has_obtaintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pillNum;
        break;
      }

      // optional int32 pillNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pillnum_)));
          set_has_pillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamondTotal;
        break;
      }

      // optional int32 diamondTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondtotal_)));
          set_has_diamondtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamondNeed;
        break;
      }

      // optional int32 diamondNeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondneed_)));
          set_has_diamondneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getexp;
        break;
      }

      // optional int32 getexp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getexp_)));
          set_has_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_experience;
        break;
      }

      // optional int64 experience = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional .GM_EquipAwaken_Hole_Detail data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_realtimes;
        break;
      }

      // optional int32 realtimes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realtimes_)));
          set_has_realtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Obtain_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 obtainType = 3;
  if (has_obtaintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obtaintype(), output);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pillnum(), output);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamondtotal(), output);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamondneed(), output);
  }

  // optional int32 getexp = 7;
  if (has_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->getexp(), output);
  }

  // optional int64 experience = 8;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->experience(), output);
  }

  // optional .GM_EquipAwaken_Hole_Detail data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(), output);
  }

  // optional int32 realtimes = 10;
  if (has_realtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->realtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Obtain_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 obtainType = 3;
  if (has_obtaintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obtaintype(), target);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pillnum(), target);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamondtotal(), target);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->diamondneed(), target);
  }

  // optional int32 getexp = 7;
  if (has_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->getexp(), target);
  }

  // optional int64 experience = 8;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->experience(), target);
  }

  // optional .GM_EquipAwaken_Hole_Detail data = 9;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(), target);
  }

  // optional int32 realtimes = 10;
  if (has_realtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->realtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Obtain_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 obtainType = 3;
    if (has_obtaintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obtaintype());
    }

    // optional int32 pillNum = 4;
    if (has_pillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pillnum());
    }

    // optional int32 diamondTotal = 5;
    if (has_diamondtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondtotal());
    }

    // optional int32 diamondNeed = 6;
    if (has_diamondneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondneed());
    }

    // optional int32 getexp = 7;
    if (has_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getexp());
    }

    // optional int64 experience = 8;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GM_EquipAwaken_Hole_Detail data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 realtimes = 10;
    if (has_realtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Obtain_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Obtain_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Obtain_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Obtain_Return::MergeFrom(const GM_EquipAwaken_Obtain_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_obtaintype()) {
      set_obtaintype(from.obtaintype());
    }
    if (from.has_pillnum()) {
      set_pillnum(from.pillnum());
    }
    if (from.has_diamondtotal()) {
      set_diamondtotal(from.diamondtotal());
    }
    if (from.has_diamondneed()) {
      set_diamondneed(from.diamondneed());
    }
    if (from.has_getexp()) {
      set_getexp(from.getexp());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      mutable_data()->::GM_EquipAwaken_Hole_Detail::MergeFrom(from.data());
    }
    if (from.has_realtimes()) {
      set_realtimes(from.realtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Obtain_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Obtain_Return::CopyFrom(const GM_EquipAwaken_Obtain_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Obtain_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_Obtain_Return::Swap(GM_EquipAwaken_Obtain_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(obtaintype_, other->obtaintype_);
    std::swap(pillnum_, other->pillnum_);
    std::swap(diamondtotal_, other->diamondtotal_);
    std::swap(diamondneed_, other->diamondneed_);
    std::swap(getexp_, other->getexp_);
    std::swap(experience_, other->experience_);
    std::swap(data_, other->data_);
    std::swap(realtimes_, other->realtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Obtain_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Obtain_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Obtain_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_AddSwap_Request::kGmidFieldNumber;
const int GM_EquipAwaken_AddSwap_Request::kHolenumFieldNumber;
const int GM_EquipAwaken_AddSwap_Request::kReplaceholenumFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_AddSwap_Request::GM_EquipAwaken_AddSwap_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_AddSwap_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_AddSwap_Request::GM_EquipAwaken_AddSwap_Request(const GM_EquipAwaken_AddSwap_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_AddSwap_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  holenum_ = 0;
  replaceholenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_AddSwap_Request::~GM_EquipAwaken_AddSwap_Request() {
  SharedDtor();
}

void GM_EquipAwaken_AddSwap_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_AddSwap_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_AddSwap_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_AddSwap_Request_descriptor_;
}

const GM_EquipAwaken_AddSwap_Request& GM_EquipAwaken_AddSwap_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_AddSwap_Request* GM_EquipAwaken_AddSwap_Request::default_instance_ = NULL;

GM_EquipAwaken_AddSwap_Request* GM_EquipAwaken_AddSwap_Request::New() const {
  return new GM_EquipAwaken_AddSwap_Request;
}

void GM_EquipAwaken_AddSwap_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    holenum_ = 0;
    replaceholenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_AddSwap_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // required int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replaceholenum;
        break;
      }

      // required int32 replaceholenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replaceholenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replaceholenum_)));
          set_has_replaceholenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_AddSwap_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // required int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  // required int32 replaceholenum = 3;
  if (has_replaceholenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replaceholenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_AddSwap_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // required int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  // required int32 replaceholenum = 3;
  if (has_replaceholenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replaceholenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_AddSwap_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // required int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // required int32 replaceholenum = 3;
    if (has_replaceholenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replaceholenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_AddSwap_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_AddSwap_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_AddSwap_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_AddSwap_Request::MergeFrom(const GM_EquipAwaken_AddSwap_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_replaceholenum()) {
      set_replaceholenum(from.replaceholenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_AddSwap_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_AddSwap_Request::CopyFrom(const GM_EquipAwaken_AddSwap_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_AddSwap_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_EquipAwaken_AddSwap_Request::Swap(GM_EquipAwaken_AddSwap_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(holenum_, other->holenum_);
    std::swap(replaceholenum_, other->replaceholenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_AddSwap_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_AddSwap_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_AddSwap_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_AddSwap_Return::kResultFieldNumber;
const int GM_EquipAwaken_AddSwap_Return::kGmidFieldNumber;
const int GM_EquipAwaken_AddSwap_Return::kHolenumFieldNumber;
const int GM_EquipAwaken_AddSwap_Return::kReplaceholenumFieldNumber;
const int GM_EquipAwaken_AddSwap_Return::kGetexpFieldNumber;
const int GM_EquipAwaken_AddSwap_Return::kExperienceFieldNumber;
const int GM_EquipAwaken_AddSwap_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_AddSwap_Return::GM_EquipAwaken_AddSwap_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_AddSwap_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_AddSwap_Return::GM_EquipAwaken_AddSwap_Return(const GM_EquipAwaken_AddSwap_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_AddSwap_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  holenum_ = 0;
  replaceholenum_ = 0;
  getexp_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_AddSwap_Return::~GM_EquipAwaken_AddSwap_Return() {
  SharedDtor();
}

void GM_EquipAwaken_AddSwap_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_AddSwap_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_AddSwap_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_AddSwap_Return_descriptor_;
}

const GM_EquipAwaken_AddSwap_Return& GM_EquipAwaken_AddSwap_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_AddSwap_Return* GM_EquipAwaken_AddSwap_Return::default_instance_ = NULL;

GM_EquipAwaken_AddSwap_Return* GM_EquipAwaken_AddSwap_Return::New() const {
  return new GM_EquipAwaken_AddSwap_Return;
}

void GM_EquipAwaken_AddSwap_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    holenum_ = 0;
    replaceholenum_ = 0;
    getexp_ = 0;
    experience_ = GOOGLE_LONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_AddSwap_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_replaceholenum;
        break;
      }

      // optional int32 replaceholenum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replaceholenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replaceholenum_)));
          set_has_replaceholenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getexp;
        break;
      }

      // optional int32 getexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getexp_)));
          set_has_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_experience;
        break;
      }

      // optional int64 experience = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .GM_EquipAwaken_Hole_Detail data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_AddSwap_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 replaceholenum = 4;
  if (has_replaceholenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replaceholenum(), output);
  }

  // optional int32 getexp = 5;
  if (has_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->getexp(), output);
  }

  // optional int64 experience = 6;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->experience(), output);
  }

  // repeated .GM_EquipAwaken_Hole_Detail data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_AddSwap_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 replaceholenum = 4;
  if (has_replaceholenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replaceholenum(), target);
  }

  // optional int32 getexp = 5;
  if (has_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->getexp(), target);
  }

  // optional int64 experience = 6;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->experience(), target);
  }

  // repeated .GM_EquipAwaken_Hole_Detail data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_AddSwap_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 replaceholenum = 4;
    if (has_replaceholenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replaceholenum());
    }

    // optional int32 getexp = 5;
    if (has_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getexp());
    }

    // optional int64 experience = 6;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }

  }
  // repeated .GM_EquipAwaken_Hole_Detail data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_AddSwap_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_AddSwap_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_AddSwap_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_AddSwap_Return::MergeFrom(const GM_EquipAwaken_AddSwap_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_replaceholenum()) {
      set_replaceholenum(from.replaceholenum());
    }
    if (from.has_getexp()) {
      set_getexp(from.getexp());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_AddSwap_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_AddSwap_Return::CopyFrom(const GM_EquipAwaken_AddSwap_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_AddSwap_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_AddSwap_Return::Swap(GM_EquipAwaken_AddSwap_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(holenum_, other->holenum_);
    std::swap(replaceholenum_, other->replaceholenum_);
    std::swap(getexp_, other->getexp_);
    std::swap(experience_, other->experience_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_AddSwap_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_AddSwap_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_AddSwap_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Store_Request::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Store_Request::GM_EquipAwaken_Store_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Store_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Store_Request::GM_EquipAwaken_Store_Request(const GM_EquipAwaken_Store_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Store_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Store_Request::~GM_EquipAwaken_Store_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Store_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Store_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Store_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Store_Request_descriptor_;
}

const GM_EquipAwaken_Store_Request& GM_EquipAwaken_Store_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Store_Request* GM_EquipAwaken_Store_Request::default_instance_ = NULL;

GM_EquipAwaken_Store_Request* GM_EquipAwaken_Store_Request::New() const {
  return new GM_EquipAwaken_Store_Request;
}

void GM_EquipAwaken_Store_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Store_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Store_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Store_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Store_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Store_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Store_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Store_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Store_Request::MergeFrom(const GM_EquipAwaken_Store_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Store_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Store_Request::CopyFrom(const GM_EquipAwaken_Store_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Store_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Store_Request::Swap(GM_EquipAwaken_Store_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Store_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Store_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Store_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Store_Return::kResultFieldNumber;
const int GM_EquipAwaken_Store_Return::kGmidFieldNumber;
const int GM_EquipAwaken_Store_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Store_Return::GM_EquipAwaken_Store_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Store_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_EquipAwaken_Hole_Detail*>(&::GM_EquipAwaken_Hole_Detail::default_instance());
}

GM_EquipAwaken_Store_Return::GM_EquipAwaken_Store_Return(const GM_EquipAwaken_Store_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Store_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Store_Return::~GM_EquipAwaken_Store_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Store_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_EquipAwaken_Store_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Store_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Store_Return_descriptor_;
}

const GM_EquipAwaken_Store_Return& GM_EquipAwaken_Store_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Store_Return* GM_EquipAwaken_Store_Return::default_instance_ = NULL;

GM_EquipAwaken_Store_Return* GM_EquipAwaken_Store_Return::New() const {
  return new GM_EquipAwaken_Store_Return;
}

void GM_EquipAwaken_Store_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::GM_EquipAwaken_Hole_Detail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Store_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .GM_EquipAwaken_Hole_Detail data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Store_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional .GM_EquipAwaken_Hole_Detail data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Store_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional .GM_EquipAwaken_Hole_Detail data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Store_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional .GM_EquipAwaken_Hole_Detail data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Store_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Store_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Store_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Store_Return::MergeFrom(const GM_EquipAwaken_Store_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_data()) {
      mutable_data()->::GM_EquipAwaken_Hole_Detail::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Store_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Store_Return::CopyFrom(const GM_EquipAwaken_Store_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Store_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_Store_Return::Swap(GM_EquipAwaken_Store_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Store_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Store_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Store_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Refine_Request::kGmidFieldNumber;
const int GM_EquipAwaken_Refine_Request::kHolenumFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Refine_Request::GM_EquipAwaken_Refine_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Refine_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Refine_Request::GM_EquipAwaken_Refine_Request(const GM_EquipAwaken_Refine_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Refine_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  holenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Refine_Request::~GM_EquipAwaken_Refine_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Refine_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Refine_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Refine_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Refine_Request_descriptor_;
}

const GM_EquipAwaken_Refine_Request& GM_EquipAwaken_Refine_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Refine_Request* GM_EquipAwaken_Refine_Request::default_instance_ = NULL;

GM_EquipAwaken_Refine_Request* GM_EquipAwaken_Refine_Request::New() const {
  return new GM_EquipAwaken_Refine_Request;
}

void GM_EquipAwaken_Refine_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    holenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Refine_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Refine_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Refine_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Refine_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Refine_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Refine_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Refine_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Refine_Request::MergeFrom(const GM_EquipAwaken_Refine_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Refine_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Refine_Request::CopyFrom(const GM_EquipAwaken_Refine_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Refine_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Refine_Request::Swap(GM_EquipAwaken_Refine_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(holenum_, other->holenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Refine_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Refine_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Refine_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Refine_Return::kResultFieldNumber;
const int GM_EquipAwaken_Refine_Return::kGmidFieldNumber;
const int GM_EquipAwaken_Refine_Return::kHolenumFieldNumber;
const int GM_EquipAwaken_Refine_Return::kGetexpFieldNumber;
const int GM_EquipAwaken_Refine_Return::kExperienceFieldNumber;
const int GM_EquipAwaken_Refine_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Refine_Return::GM_EquipAwaken_Refine_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Refine_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_Refine_Return::GM_EquipAwaken_Refine_Return(const GM_EquipAwaken_Refine_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Refine_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  holenum_ = 0;
  getexp_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Refine_Return::~GM_EquipAwaken_Refine_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Refine_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Refine_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Refine_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Refine_Return_descriptor_;
}

const GM_EquipAwaken_Refine_Return& GM_EquipAwaken_Refine_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Refine_Return* GM_EquipAwaken_Refine_Return::default_instance_ = NULL;

GM_EquipAwaken_Refine_Return* GM_EquipAwaken_Refine_Return::New() const {
  return new GM_EquipAwaken_Refine_Return;
}

void GM_EquipAwaken_Refine_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    holenum_ = 0;
    getexp_ = 0;
    experience_ = GOOGLE_LONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Refine_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getexp;
        break;
      }

      // optional int32 getexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getexp_)));
          set_has_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_experience;
        break;
      }

      // optional int64 experience = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .GM_EquipAwaken_Hole_Detail data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Refine_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 getexp = 4;
  if (has_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getexp(), output);
  }

  // optional int64 experience = 5;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->experience(), output);
  }

  // repeated .GM_EquipAwaken_Hole_Detail data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Refine_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 getexp = 4;
  if (has_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getexp(), target);
  }

  // optional int64 experience = 5;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->experience(), target);
  }

  // repeated .GM_EquipAwaken_Hole_Detail data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Refine_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 getexp = 4;
    if (has_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getexp());
    }

    // optional int64 experience = 5;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }

  }
  // repeated .GM_EquipAwaken_Hole_Detail data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Refine_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Refine_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Refine_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Refine_Return::MergeFrom(const GM_EquipAwaken_Refine_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_getexp()) {
      set_getexp(from.getexp());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Refine_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Refine_Return::CopyFrom(const GM_EquipAwaken_Refine_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Refine_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_Refine_Return::Swap(GM_EquipAwaken_Refine_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(holenum_, other->holenum_);
    std::swap(getexp_, other->getexp_);
    std::swap(experience_, other->experience_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Refine_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Refine_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Refine_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Unlock_Request::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Unlock_Request::GM_EquipAwaken_Unlock_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Unlock_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Unlock_Request::GM_EquipAwaken_Unlock_Request(const GM_EquipAwaken_Unlock_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Unlock_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Unlock_Request::~GM_EquipAwaken_Unlock_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Unlock_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Unlock_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Unlock_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Unlock_Request_descriptor_;
}

const GM_EquipAwaken_Unlock_Request& GM_EquipAwaken_Unlock_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Unlock_Request* GM_EquipAwaken_Unlock_Request::default_instance_ = NULL;

GM_EquipAwaken_Unlock_Request* GM_EquipAwaken_Unlock_Request::New() const {
  return new GM_EquipAwaken_Unlock_Request;
}

void GM_EquipAwaken_Unlock_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Unlock_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Unlock_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Unlock_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Unlock_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Unlock_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Unlock_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Unlock_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Unlock_Request::MergeFrom(const GM_EquipAwaken_Unlock_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Unlock_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Unlock_Request::CopyFrom(const GM_EquipAwaken_Unlock_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Unlock_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Unlock_Request::Swap(GM_EquipAwaken_Unlock_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Unlock_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Unlock_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Unlock_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Unlock_Return::kResultFieldNumber;
const int GM_EquipAwaken_Unlock_Return::kHolenumFieldNumber;
const int GM_EquipAwaken_Unlock_Return::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Unlock_Return::GM_EquipAwaken_Unlock_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Unlock_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_Unlock_Return::GM_EquipAwaken_Unlock_Return(const GM_EquipAwaken_Unlock_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Unlock_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  holenum_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Unlock_Return::~GM_EquipAwaken_Unlock_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Unlock_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Unlock_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Unlock_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Unlock_Return_descriptor_;
}

const GM_EquipAwaken_Unlock_Return& GM_EquipAwaken_Unlock_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Unlock_Return* GM_EquipAwaken_Unlock_Return::default_instance_ = NULL;

GM_EquipAwaken_Unlock_Return* GM_EquipAwaken_Unlock_Return::New() const {
  return new GM_EquipAwaken_Unlock_Return;
}

void GM_EquipAwaken_Unlock_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    holenum_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Unlock_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Unlock_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  // optional int64 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Unlock_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  // optional int64 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Unlock_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int64 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Unlock_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Unlock_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Unlock_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Unlock_Return::MergeFrom(const GM_EquipAwaken_Unlock_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Unlock_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Unlock_Return::CopyFrom(const GM_EquipAwaken_Unlock_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Unlock_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Unlock_Return::Swap(GM_EquipAwaken_Unlock_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(holenum_, other->holenum_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Unlock_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Unlock_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Unlock_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Info_Request::kNGmidFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Info_Request::GM_EquipAwaken_Info_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Info_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Info_Request::GM_EquipAwaken_Info_Request(const GM_EquipAwaken_Info_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Info_Request::SharedCtor() {
  _cached_size_ = 0;
  ngmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Info_Request::~GM_EquipAwaken_Info_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Info_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Info_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Info_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Info_Request_descriptor_;
}

const GM_EquipAwaken_Info_Request& GM_EquipAwaken_Info_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Info_Request* GM_EquipAwaken_Info_Request::default_instance_ = NULL;

GM_EquipAwaken_Info_Request* GM_EquipAwaken_Info_Request::New() const {
  return new GM_EquipAwaken_Info_Request;
}

void GM_EquipAwaken_Info_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Info_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 nGmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ngmid_)));
          set_has_ngmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Info_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 nGmid = 1;
  if (has_ngmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ngmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Info_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 nGmid = 1;
  if (has_ngmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ngmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Info_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 nGmid = 1;
    if (has_ngmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ngmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Info_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Info_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Info_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Info_Request::MergeFrom(const GM_EquipAwaken_Info_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngmid()) {
      set_ngmid(from.ngmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Info_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Info_Request::CopyFrom(const GM_EquipAwaken_Info_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Info_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Info_Request::Swap(GM_EquipAwaken_Info_Request* other) {
  if (other != this) {
    std::swap(ngmid_, other->ngmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Info_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Info_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Info_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Info_Return::kNresultFieldNumber;
const int GM_EquipAwaken_Info_Return::kNGmidFieldNumber;
const int GM_EquipAwaken_Info_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Info_Return::GM_EquipAwaken_Info_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Info_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_Info_Return::GM_EquipAwaken_Info_Return(const GM_EquipAwaken_Info_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Info_Return::SharedCtor() {
  _cached_size_ = 0;
  nresult_ = 0;
  ngmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Info_Return::~GM_EquipAwaken_Info_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Info_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Info_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Info_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Info_Return_descriptor_;
}

const GM_EquipAwaken_Info_Return& GM_EquipAwaken_Info_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Info_Return* GM_EquipAwaken_Info_Return::default_instance_ = NULL;

GM_EquipAwaken_Info_Return* GM_EquipAwaken_Info_Return::New() const {
  return new GM_EquipAwaken_Info_Return;
}

void GM_EquipAwaken_Info_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nresult_ = 0;
    ngmid_ = GOOGLE_LONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Info_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nGmid;
        break;
      }

      // required int64 nGmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ngmid_)));
          set_has_ngmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .GM_EquipAwaken_Info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Info_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nresult = 1;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nresult(), output);
  }

  // required int64 nGmid = 2;
  if (has_ngmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ngmid(), output);
  }

  // repeated .GM_EquipAwaken_Info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Info_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nresult = 1;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nresult(), target);
  }

  // required int64 nGmid = 2;
  if (has_ngmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ngmid(), target);
  }

  // repeated .GM_EquipAwaken_Info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Info_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nresult = 1;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

    // required int64 nGmid = 2;
    if (has_ngmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ngmid());
    }

  }
  // repeated .GM_EquipAwaken_Info data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Info_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Info_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Info_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Info_Return::MergeFrom(const GM_EquipAwaken_Info_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
    if (from.has_ngmid()) {
      set_ngmid(from.ngmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Info_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Info_Return::CopyFrom(const GM_EquipAwaken_Info_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Info_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_Info_Return::Swap(GM_EquipAwaken_Info_Return* other) {
  if (other != this) {
    std::swap(nresult_, other->nresult_);
    std::swap(ngmid_, other->ngmid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Info_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Info_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Info_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Info::kAwakenidFieldNumber;
const int GM_EquipAwaken_Info::kAwakenlevelFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Info::GM_EquipAwaken_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Info::InitAsDefaultInstance() {
}

GM_EquipAwaken_Info::GM_EquipAwaken_Info(const GM_EquipAwaken_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Info::SharedCtor() {
  _cached_size_ = 0;
  awakenid_ = 0;
  awakenlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Info::~GM_EquipAwaken_Info() {
  SharedDtor();
}

void GM_EquipAwaken_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Info_descriptor_;
}

const GM_EquipAwaken_Info& GM_EquipAwaken_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Info* GM_EquipAwaken_Info::default_instance_ = NULL;

GM_EquipAwaken_Info* GM_EquipAwaken_Info::New() const {
  return new GM_EquipAwaken_Info;
}

void GM_EquipAwaken_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awakenid_ = 0;
    awakenlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 awakenid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awakenlevel;
        break;
      }

      // optional int32 awakenlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenlevel_)));
          set_has_awakenlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 awakenid = 1;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awakenid(), output);
  }

  // optional int32 awakenlevel = 2;
  if (has_awakenlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awakenlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 awakenid = 1;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awakenid(), target);
  }

  // optional int32 awakenlevel = 2;
  if (has_awakenlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awakenlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 awakenid = 1;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenid());
    }

    // optional int32 awakenlevel = 2;
    if (has_awakenlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Info::MergeFrom(const GM_EquipAwaken_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_awakenlevel()) {
      set_awakenlevel(from.awakenlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Info::CopyFrom(const GM_EquipAwaken_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Info::Swap(GM_EquipAwaken_Info* other) {
  if (other != this) {
    std::swap(awakenid_, other->awakenid_);
    std::swap(awakenlevel_, other->awakenlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Info_descriptor_;
  metadata.reflection = GM_EquipAwaken_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Swap_Request::kNLeftGmidFieldNumber;
const int GM_EquipAwaken_Swap_Request::kNRightGmidFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Swap_Request::GM_EquipAwaken_Swap_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Swap_Request::InitAsDefaultInstance() {
}

GM_EquipAwaken_Swap_Request::GM_EquipAwaken_Swap_Request(const GM_EquipAwaken_Swap_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Swap_Request::SharedCtor() {
  _cached_size_ = 0;
  nleftgmid_ = GOOGLE_LONGLONG(0);
  nrightgmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Swap_Request::~GM_EquipAwaken_Swap_Request() {
  SharedDtor();
}

void GM_EquipAwaken_Swap_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Swap_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Swap_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Swap_Request_descriptor_;
}

const GM_EquipAwaken_Swap_Request& GM_EquipAwaken_Swap_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Swap_Request* GM_EquipAwaken_Swap_Request::default_instance_ = NULL;

GM_EquipAwaken_Swap_Request* GM_EquipAwaken_Swap_Request::New() const {
  return new GM_EquipAwaken_Swap_Request;
}

void GM_EquipAwaken_Swap_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nleftgmid_ = GOOGLE_LONGLONG(0);
    nrightgmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Swap_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 nLeftGmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nleftgmid_)));
          set_has_nleftgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nRightGmid;
        break;
      }

      // optional int64 nRightGmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRightGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nrightgmid_)));
          set_has_nrightgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Swap_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 nLeftGmid = 1;
  if (has_nleftgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nleftgmid(), output);
  }

  // optional int64 nRightGmid = 2;
  if (has_nrightgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nrightgmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Swap_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 nLeftGmid = 1;
  if (has_nleftgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nleftgmid(), target);
  }

  // optional int64 nRightGmid = 2;
  if (has_nrightgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nrightgmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Swap_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 nLeftGmid = 1;
    if (has_nleftgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nleftgmid());
    }

    // optional int64 nRightGmid = 2;
    if (has_nrightgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nrightgmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Swap_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Swap_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Swap_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Swap_Request::MergeFrom(const GM_EquipAwaken_Swap_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nleftgmid()) {
      set_nleftgmid(from.nleftgmid());
    }
    if (from.has_nrightgmid()) {
      set_nrightgmid(from.nrightgmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Swap_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Swap_Request::CopyFrom(const GM_EquipAwaken_Swap_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Swap_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Swap_Request::Swap(GM_EquipAwaken_Swap_Request* other) {
  if (other != this) {
    std::swap(nleftgmid_, other->nleftgmid_);
    std::swap(nrightgmid_, other->nrightgmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Swap_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Swap_Request_descriptor_;
  metadata.reflection = GM_EquipAwaken_Swap_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Swap_Return::kNResultFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Swap_Return::GM_EquipAwaken_Swap_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Swap_Return::InitAsDefaultInstance() {
}

GM_EquipAwaken_Swap_Return::GM_EquipAwaken_Swap_Return(const GM_EquipAwaken_Swap_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Swap_Return::SharedCtor() {
  _cached_size_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Swap_Return::~GM_EquipAwaken_Swap_Return() {
  SharedDtor();
}

void GM_EquipAwaken_Swap_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Swap_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Swap_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Swap_Return_descriptor_;
}

const GM_EquipAwaken_Swap_Return& GM_EquipAwaken_Swap_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Swap_Return* GM_EquipAwaken_Swap_Return::default_instance_ = NULL;

GM_EquipAwaken_Swap_Return* GM_EquipAwaken_Swap_Return::New() const {
  return new GM_EquipAwaken_Swap_Return;
}

void GM_EquipAwaken_Swap_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Swap_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Swap_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nResult = 1;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Swap_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nResult = 1;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Swap_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nResult = 1;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Swap_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Swap_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Swap_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Swap_Return::MergeFrom(const GM_EquipAwaken_Swap_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Swap_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Swap_Return::CopyFrom(const GM_EquipAwaken_Swap_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Swap_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Swap_Return::Swap(GM_EquipAwaken_Swap_Return* other) {
  if (other != this) {
    std::swap(nresult_, other->nresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Swap_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Swap_Return_descriptor_;
  metadata.reflection = GM_EquipAwaken_Swap_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Upgrade_Change::kResultFieldNumber;
const int GM_EquipAwaken_Upgrade_Change::kDataFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Upgrade_Change::GM_EquipAwaken_Upgrade_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Upgrade_Change::InitAsDefaultInstance() {
}

GM_EquipAwaken_Upgrade_Change::GM_EquipAwaken_Upgrade_Change(const GM_EquipAwaken_Upgrade_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Change::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Upgrade_Change::~GM_EquipAwaken_Upgrade_Change() {
  SharedDtor();
}

void GM_EquipAwaken_Upgrade_Change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Upgrade_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Upgrade_Change_descriptor_;
}

const GM_EquipAwaken_Upgrade_Change& GM_EquipAwaken_Upgrade_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Upgrade_Change* GM_EquipAwaken_Upgrade_Change::default_instance_ = NULL;

GM_EquipAwaken_Upgrade_Change* GM_EquipAwaken_Upgrade_Change::New() const {
  return new GM_EquipAwaken_Upgrade_Change;
}

void GM_EquipAwaken_Upgrade_Change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Upgrade_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_EquipAwaken_Upgrade_Info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Upgrade_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_EquipAwaken_Upgrade_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Upgrade_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_EquipAwaken_Upgrade_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Upgrade_Change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_EquipAwaken_Upgrade_Info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Upgrade_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Upgrade_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Upgrade_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Upgrade_Change::MergeFrom(const GM_EquipAwaken_Upgrade_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Upgrade_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Change::CopyFrom(const GM_EquipAwaken_Upgrade_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Upgrade_Change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_EquipAwaken_Upgrade_Change::Swap(GM_EquipAwaken_Upgrade_Change* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Upgrade_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Upgrade_Change_descriptor_;
  metadata.reflection = GM_EquipAwaken_Upgrade_Change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipAwaken_Upgrade_Info::kHolenumFieldNumber;
const int GM_EquipAwaken_Upgrade_Info::kStateFieldNumber;
#endif  // !_MSC_VER

GM_EquipAwaken_Upgrade_Info::GM_EquipAwaken_Upgrade_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipAwaken_Upgrade_Info::InitAsDefaultInstance() {
}

GM_EquipAwaken_Upgrade_Info::GM_EquipAwaken_Upgrade_Info(const GM_EquipAwaken_Upgrade_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Info::SharedCtor() {
  _cached_size_ = 0;
  holenum_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipAwaken_Upgrade_Info::~GM_EquipAwaken_Upgrade_Info() {
  SharedDtor();
}

void GM_EquipAwaken_Upgrade_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipAwaken_Upgrade_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipAwaken_Upgrade_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipAwaken_Upgrade_Info_descriptor_;
}

const GM_EquipAwaken_Upgrade_Info& GM_EquipAwaken_Upgrade_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipAwaken_Upgrade_Info* GM_EquipAwaken_Upgrade_Info::default_instance_ = NULL;

GM_EquipAwaken_Upgrade_Info* GM_EquipAwaken_Upgrade_Info::New() const {
  return new GM_EquipAwaken_Upgrade_Info;
}

void GM_EquipAwaken_Upgrade_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    holenum_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipAwaken_Upgrade_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 holenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipAwaken_Upgrade_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holenum(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipAwaken_Upgrade_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holenum(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipAwaken_Upgrade_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 holenum = 1;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipAwaken_Upgrade_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipAwaken_Upgrade_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipAwaken_Upgrade_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipAwaken_Upgrade_Info::MergeFrom(const GM_EquipAwaken_Upgrade_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipAwaken_Upgrade_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipAwaken_Upgrade_Info::CopyFrom(const GM_EquipAwaken_Upgrade_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipAwaken_Upgrade_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_EquipAwaken_Upgrade_Info::Swap(GM_EquipAwaken_Upgrade_Info* other) {
  if (other != this) {
    std::swap(holenum_, other->holenum_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipAwaken_Upgrade_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipAwaken_Upgrade_Info_descriptor_;
  metadata.reflection = GM_EquipAwaken_Upgrade_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipWing_Request::kGmidFieldNumber;
const int GM_EquipWing_Request::kWinglevelFieldNumber;
const int GM_EquipWing_Request::kIssucessFieldNumber;
#endif  // !_MSC_VER

GM_EquipWing_Request::GM_EquipWing_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipWing_Request::InitAsDefaultInstance() {
}

GM_EquipWing_Request::GM_EquipWing_Request(const GM_EquipWing_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipWing_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  winglevel_ = 0;
  issucess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipWing_Request::~GM_EquipWing_Request() {
  SharedDtor();
}

void GM_EquipWing_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipWing_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipWing_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipWing_Request_descriptor_;
}

const GM_EquipWing_Request& GM_EquipWing_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_EquipWing_Request* GM_EquipWing_Request::default_instance_ = NULL;

GM_EquipWing_Request* GM_EquipWing_Request::New() const {
  return new GM_EquipWing_Request;
}

void GM_EquipWing_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    winglevel_ = 0;
    issucess_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipWing_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winglevel;
        break;
      }

      // optional int32 winglevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winglevel_)));
          set_has_winglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_issucess;
        break;
      }

      // required int32 issucess = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issucess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issucess_)));
          set_has_issucess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipWing_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 winglevel = 2;
  if (has_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winglevel(), output);
  }

  // required int32 issucess = 3;
  if (has_issucess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->issucess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipWing_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 winglevel = 2;
  if (has_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winglevel(), target);
  }

  // required int32 issucess = 3;
  if (has_issucess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->issucess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipWing_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 winglevel = 2;
    if (has_winglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winglevel());
    }

    // required int32 issucess = 3;
    if (has_issucess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issucess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipWing_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipWing_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipWing_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipWing_Request::MergeFrom(const GM_EquipWing_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_winglevel()) {
      set_winglevel(from.winglevel());
    }
    if (from.has_issucess()) {
      set_issucess(from.issucess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipWing_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipWing_Request::CopyFrom(const GM_EquipWing_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipWing_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void GM_EquipWing_Request::Swap(GM_EquipWing_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(winglevel_, other->winglevel_);
    std::swap(issucess_, other->issucess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipWing_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipWing_Request_descriptor_;
  metadata.reflection = GM_EquipWing_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AwakeEquip::kGmidFieldNumber;
const int GM_AwakeEquip::kXFieldNumber;
const int GM_AwakeEquip::kYFieldNumber;
const int GM_AwakeEquip::kIsFullFieldNumber;
#endif  // !_MSC_VER

GM_AwakeEquip::GM_AwakeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AwakeEquip::InitAsDefaultInstance() {
}

GM_AwakeEquip::GM_AwakeEquip(const GM_AwakeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AwakeEquip::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  x_ = 0;
  y_ = 0;
  isfull_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AwakeEquip::~GM_AwakeEquip() {
  SharedDtor();
}

void GM_AwakeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AwakeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AwakeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AwakeEquip_descriptor_;
}

const GM_AwakeEquip& GM_AwakeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_AwakeEquip* GM_AwakeEquip::default_instance_ = NULL;

GM_AwakeEquip* GM_AwakeEquip::New() const {
  return new GM_AwakeEquip;
}

void GM_AwakeEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    x_ = 0;
    y_ = 0;
    isfull_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AwakeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isFull;
        break;
      }

      // required int32 isFull = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AwakeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required int32 isFull = 4;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isfull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AwakeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required int32 isFull = 4;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isfull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AwakeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 isFull = 4;
    if (has_isfull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfull());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AwakeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AwakeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AwakeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AwakeEquip::MergeFrom(const GM_AwakeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AwakeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AwakeEquip::CopyFrom(const GM_AwakeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AwakeEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_AwakeEquip::Swap(GM_AwakeEquip* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(isfull_, other->isfull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AwakeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AwakeEquip_descriptor_;
  metadata.reflection = GM_AwakeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AwakeEquipAll::kReturnFieldNumber;
const int GM_AwakeEquipAll::kAwakedataFieldNumber;
#endif  // !_MSC_VER

GM_AwakeEquipAll::GM_AwakeEquipAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AwakeEquipAll::InitAsDefaultInstance() {
}

GM_AwakeEquipAll::GM_AwakeEquipAll(const GM_AwakeEquipAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AwakeEquipAll::SharedCtor() {
  _cached_size_ = 0;
  return__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AwakeEquipAll::~GM_AwakeEquipAll() {
  SharedDtor();
}

void GM_AwakeEquipAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AwakeEquipAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AwakeEquipAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AwakeEquipAll_descriptor_;
}

const GM_AwakeEquipAll& GM_AwakeEquipAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_AwakeEquipAll* GM_AwakeEquipAll::default_instance_ = NULL;

GM_AwakeEquipAll* GM_AwakeEquipAll::New() const {
  return new GM_AwakeEquipAll;
}

void GM_AwakeEquipAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    return__ = 0;
  }
  awakedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AwakeEquipAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 return = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return__)));
          set_has_return_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awakedata;
        break;
      }

      // repeated .GM_AwakeEquip awakedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awakedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awakedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awakedata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AwakeEquipAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 return = 1;
  if (has_return_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_(), output);
  }

  // repeated .GM_AwakeEquip awakedata = 2;
  for (int i = 0; i < this->awakedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->awakedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AwakeEquipAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 return = 1;
  if (has_return_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_(), target);
  }

  // repeated .GM_AwakeEquip awakedata = 2;
  for (int i = 0; i < this->awakedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->awakedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AwakeEquipAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 return = 1;
    if (has_return_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_());
    }

  }
  // repeated .GM_AwakeEquip awakedata = 2;
  total_size += 1 * this->awakedata_size();
  for (int i = 0; i < this->awakedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awakedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AwakeEquipAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AwakeEquipAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AwakeEquipAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AwakeEquipAll::MergeFrom(const GM_AwakeEquipAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  awakedata_.MergeFrom(from.awakedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_return_()) {
      set_return_(from.return_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AwakeEquipAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AwakeEquipAll::CopyFrom(const GM_AwakeEquipAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AwakeEquipAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awakedata_size(); i++) {
    if (!this->awakedata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AwakeEquipAll::Swap(GM_AwakeEquipAll* other) {
  if (other != this) {
    std::swap(return__, other->return__);
    awakedata_.Swap(&other->awakedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AwakeEquipAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AwakeEquipAll_descriptor_;
  metadata.reflection = GM_AwakeEquipAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AwakeEquipRequest::kAwakeequipgmidFieldNumber;
const int GM_AwakeEquipRequest::kEquipgmidFieldNumber;
#endif  // !_MSC_VER

GM_AwakeEquipRequest::GM_AwakeEquipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AwakeEquipRequest::InitAsDefaultInstance() {
}

GM_AwakeEquipRequest::GM_AwakeEquipRequest(const GM_AwakeEquipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AwakeEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  awakeequipgmid_ = GOOGLE_LONGLONG(0);
  equipgmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AwakeEquipRequest::~GM_AwakeEquipRequest() {
  SharedDtor();
}

void GM_AwakeEquipRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AwakeEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AwakeEquipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AwakeEquipRequest_descriptor_;
}

const GM_AwakeEquipRequest& GM_AwakeEquipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equipuplevel_2etxt();
  return *default_instance_;
}

GM_AwakeEquipRequest* GM_AwakeEquipRequest::default_instance_ = NULL;

GM_AwakeEquipRequest* GM_AwakeEquipRequest::New() const {
  return new GM_AwakeEquipRequest;
}

void GM_AwakeEquipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awakeequipgmid_ = GOOGLE_LONGLONG(0);
    equipgmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AwakeEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 awakeequipgmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awakeequipgmid_)));
          set_has_awakeequipgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipgmid;
        break;
      }

      // required int64 equipgmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipgmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipgmid_)));
          set_has_equipgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AwakeEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 awakeequipgmid = 1;
  if (has_awakeequipgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->awakeequipgmid(), output);
  }

  // required int64 equipgmid = 2;
  if (has_equipgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equipgmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AwakeEquipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 awakeequipgmid = 1;
  if (has_awakeequipgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->awakeequipgmid(), target);
  }

  // required int64 equipgmid = 2;
  if (has_equipgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equipgmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AwakeEquipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 awakeequipgmid = 1;
    if (has_awakeequipgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awakeequipgmid());
    }

    // required int64 equipgmid = 2;
    if (has_equipgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipgmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AwakeEquipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AwakeEquipRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AwakeEquipRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AwakeEquipRequest::MergeFrom(const GM_AwakeEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awakeequipgmid()) {
      set_awakeequipgmid(from.awakeequipgmid());
    }
    if (from.has_equipgmid()) {
      set_equipgmid(from.equipgmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AwakeEquipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AwakeEquipRequest::CopyFrom(const GM_AwakeEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AwakeEquipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_AwakeEquipRequest::Swap(GM_AwakeEquipRequest* other) {
  if (other != this) {
    std::swap(awakeequipgmid_, other->awakeequipgmid_);
    std::swap(equipgmid_, other->equipgmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AwakeEquipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AwakeEquipRequest_descriptor_;
  metadata.reflection = GM_AwakeEquipRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
