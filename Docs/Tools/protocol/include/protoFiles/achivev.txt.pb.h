// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achivev.txt

#ifndef PROTOBUF_achivev_2etxt__INCLUDED
#define PROTOBUF_achivev_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_achivev_2etxt();
void protobuf_AssignDesc_achivev_2etxt();
void protobuf_ShutdownFile_achivev_2etxt();

class SM_Achieve_channel_request;
class SM_Achieve_data;
class SM_Achieve_channel_return;
class GM_Achieve_all_return;
class SM_Achieve_accept_request;
class SM_Achieve_accept_return;
class SM_Achieve_can_data;
class SM_Achieve_can_return;
class GM_Achieve_Condition;

// ===================================================================

class SM_Achieve_channel_request : public ::google::protobuf::Message {
 public:
  SM_Achieve_channel_request();
  virtual ~SM_Achieve_channel_request();

  SM_Achieve_channel_request(const SM_Achieve_channel_request& from);

  inline SM_Achieve_channel_request& operator=(const SM_Achieve_channel_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_channel_request& default_instance();

  void Swap(SM_Achieve_channel_request* other);

  // implements Message ----------------------------------------------

  SM_Achieve_channel_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_channel_request& from);
  void MergeFrom(const SM_Achieve_channel_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Achieve_channel_request)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_channel_request* default_instance_;
};
// -------------------------------------------------------------------

class SM_Achieve_data : public ::google::protobuf::Message {
 public:
  SM_Achieve_data();
  virtual ~SM_Achieve_data();

  SM_Achieve_data(const SM_Achieve_data& from);

  inline SM_Achieve_data& operator=(const SM_Achieve_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_data& default_instance();

  void Swap(SM_Achieve_data* other);

  // implements Message ----------------------------------------------

  SM_Achieve_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_data& from);
  void MergeFrom(const SM_Achieve_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 achieveid = 1;
  inline bool has_achieveid() const;
  inline void clear_achieveid();
  static const int kAchieveidFieldNumber = 1;
  inline ::google::protobuf::int32 achieveid() const;
  inline void set_achieveid(::google::protobuf::int32 value);

  // optional int32 conditiontype = 2;
  inline bool has_conditiontype() const;
  inline void clear_conditiontype();
  static const int kConditiontypeFieldNumber = 2;
  inline ::google::protobuf::int32 conditiontype() const;
  inline void set_conditiontype(::google::protobuf::int32 value);

  // optional int32 mow = 3;
  inline bool has_mow() const;
  inline void clear_mow();
  static const int kMowFieldNumber = 3;
  inline ::google::protobuf::int32 mow() const;
  inline void set_mow(::google::protobuf::int32 value);

  // optional int32 limit = 4;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional int32 iscan = 5;
  inline bool has_iscan() const;
  inline void clear_iscan();
  static const int kIscanFieldNumber = 5;
  inline ::google::protobuf::int32 iscan() const;
  inline void set_iscan(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Achieve_data)
 private:
  inline void set_has_achieveid();
  inline void clear_has_achieveid();
  inline void set_has_conditiontype();
  inline void clear_has_conditiontype();
  inline void set_has_mow();
  inline void clear_has_mow();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_iscan();
  inline void clear_has_iscan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 achieveid_;
  ::google::protobuf::int32 conditiontype_;
  ::google::protobuf::int32 mow_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 iscan_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_data* default_instance_;
};
// -------------------------------------------------------------------

class SM_Achieve_channel_return : public ::google::protobuf::Message {
 public:
  SM_Achieve_channel_return();
  virtual ~SM_Achieve_channel_return();

  SM_Achieve_channel_return(const SM_Achieve_channel_return& from);

  inline SM_Achieve_channel_return& operator=(const SM_Achieve_channel_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_channel_return& default_instance();

  void Swap(SM_Achieve_channel_return* other);

  // implements Message ----------------------------------------------

  SM_Achieve_channel_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_channel_return& from);
  void MergeFrom(const SM_Achieve_channel_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // repeated .SM_Achieve_data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Achieve_data& data(int index) const;
  inline ::SM_Achieve_data* mutable_data(int index);
  inline ::SM_Achieve_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Achieve_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Achieve_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Achieve_channel_return)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Achieve_data > data_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_channel_return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Achieve_all_return : public ::google::protobuf::Message {
 public:
  GM_Achieve_all_return();
  virtual ~GM_Achieve_all_return();

  GM_Achieve_all_return(const GM_Achieve_all_return& from);

  inline GM_Achieve_all_return& operator=(const GM_Achieve_all_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Achieve_all_return& default_instance();

  void Swap(GM_Achieve_all_return* other);

  // implements Message ----------------------------------------------

  GM_Achieve_all_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Achieve_all_return& from);
  void MergeFrom(const GM_Achieve_all_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rolied = 1;
  inline bool has_rolied() const;
  inline void clear_rolied();
  static const int kRoliedFieldNumber = 1;
  inline ::google::protobuf::int32 rolied() const;
  inline void set_rolied(::google::protobuf::int32 value);

  // repeated .SM_Achieve_channel_return channeldata = 2;
  inline int channeldata_size() const;
  inline void clear_channeldata();
  static const int kChanneldataFieldNumber = 2;
  inline const ::SM_Achieve_channel_return& channeldata(int index) const;
  inline ::SM_Achieve_channel_return* mutable_channeldata(int index);
  inline ::SM_Achieve_channel_return* add_channeldata();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Achieve_channel_return >&
      channeldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Achieve_channel_return >*
      mutable_channeldata();

  // @@protoc_insertion_point(class_scope:GM_Achieve_all_return)
 private:
  inline void set_has_rolied();
  inline void clear_has_rolied();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Achieve_channel_return > channeldata_;
  ::google::protobuf::int32 rolied_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static GM_Achieve_all_return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Achieve_accept_request : public ::google::protobuf::Message {
 public:
  SM_Achieve_accept_request();
  virtual ~SM_Achieve_accept_request();

  SM_Achieve_accept_request(const SM_Achieve_accept_request& from);

  inline SM_Achieve_accept_request& operator=(const SM_Achieve_accept_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_accept_request& default_instance();

  void Swap(SM_Achieve_accept_request* other);

  // implements Message ----------------------------------------------

  SM_Achieve_accept_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_accept_request& from);
  void MergeFrom(const SM_Achieve_accept_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 achieveid = 2;
  inline bool has_achieveid() const;
  inline void clear_achieveid();
  static const int kAchieveidFieldNumber = 2;
  inline ::google::protobuf::int32 achieveid() const;
  inline void set_achieveid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Achieve_accept_request)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_achieveid();
  inline void clear_has_achieveid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 achieveid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_accept_request* default_instance_;
};
// -------------------------------------------------------------------

class SM_Achieve_accept_return : public ::google::protobuf::Message {
 public:
  SM_Achieve_accept_return();
  virtual ~SM_Achieve_accept_return();

  SM_Achieve_accept_return(const SM_Achieve_accept_return& from);

  inline SM_Achieve_accept_return& operator=(const SM_Achieve_accept_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_accept_return& default_instance();

  void Swap(SM_Achieve_accept_return* other);

  // implements Message ----------------------------------------------

  SM_Achieve_accept_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_accept_return& from);
  void MergeFrom(const SM_Achieve_accept_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorid = 1;
  inline bool has_errorid() const;
  inline void clear_errorid();
  static const int kErroridFieldNumber = 1;
  inline ::google::protobuf::int32 errorid() const;
  inline void set_errorid(::google::protobuf::int32 value);

  // optional int32 achieveid = 2;
  inline bool has_achieveid() const;
  inline void clear_achieveid();
  static const int kAchieveidFieldNumber = 2;
  inline ::google::protobuf::int32 achieveid() const;
  inline void set_achieveid(::google::protobuf::int32 value);

  // optional int32 objectid = 3;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Achieve_accept_return)
 private:
  inline void set_has_errorid();
  inline void clear_has_errorid();
  inline void set_has_achieveid();
  inline void clear_has_achieveid();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 errorid_;
  ::google::protobuf::int32 achieveid_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_accept_return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Achieve_can_data : public ::google::protobuf::Message {
 public:
  SM_Achieve_can_data();
  virtual ~SM_Achieve_can_data();

  SM_Achieve_can_data(const SM_Achieve_can_data& from);

  inline SM_Achieve_can_data& operator=(const SM_Achieve_can_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_can_data& default_instance();

  void Swap(SM_Achieve_can_data* other);

  // implements Message ----------------------------------------------

  SM_Achieve_can_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_can_data& from);
  void MergeFrom(const SM_Achieve_can_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 achieveid = 2;
  inline bool has_achieveid() const;
  inline void clear_achieveid();
  static const int kAchieveidFieldNumber = 2;
  inline ::google::protobuf::int32 achieveid() const;
  inline void set_achieveid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Achieve_can_data)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_achieveid();
  inline void clear_has_achieveid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 achieveid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_can_data* default_instance_;
};
// -------------------------------------------------------------------

class SM_Achieve_can_return : public ::google::protobuf::Message {
 public:
  SM_Achieve_can_return();
  virtual ~SM_Achieve_can_return();

  SM_Achieve_can_return(const SM_Achieve_can_return& from);

  inline SM_Achieve_can_return& operator=(const SM_Achieve_can_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Achieve_can_return& default_instance();

  void Swap(SM_Achieve_can_return* other);

  // implements Message ----------------------------------------------

  SM_Achieve_can_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Achieve_can_return& from);
  void MergeFrom(const SM_Achieve_can_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .SM_Achieve_can_data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Achieve_can_data& data(int index) const;
  inline ::SM_Achieve_can_data* mutable_data(int index);
  inline ::SM_Achieve_can_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Achieve_can_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Achieve_can_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Achieve_can_return)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Achieve_can_data > data_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static SM_Achieve_can_return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Achieve_Condition : public ::google::protobuf::Message {
 public:
  GM_Achieve_Condition();
  virtual ~GM_Achieve_Condition();

  GM_Achieve_Condition(const GM_Achieve_Condition& from);

  inline GM_Achieve_Condition& operator=(const GM_Achieve_Condition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Achieve_Condition& default_instance();

  void Swap(GM_Achieve_Condition* other);

  // implements Message ----------------------------------------------

  GM_Achieve_Condition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Achieve_Condition& from);
  void MergeFrom(const GM_Achieve_Condition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::int32 tag() const;
  inline void set_tag(::google::protobuf::int32 value);

  // optional int32 condition = 2;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 2;
  inline ::google::protobuf::int32 condition() const;
  inline void set_condition(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Achieve_Condition)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tag_;
  ::google::protobuf::int32 condition_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_achivev_2etxt();
  friend void protobuf_AssignDesc_achivev_2etxt();
  friend void protobuf_ShutdownFile_achivev_2etxt();

  void InitAsDefaultInstance();
  static GM_Achieve_Condition* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_Achieve_channel_request

// required int32 channel = 1;
inline bool SM_Achieve_channel_request::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_channel_request::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_channel_request::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_channel_request::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 SM_Achieve_channel_request::channel() const {
  return channel_;
}
inline void SM_Achieve_channel_request::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// SM_Achieve_data

// required int32 achieveid = 1;
inline bool SM_Achieve_data::has_achieveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_data::set_has_achieveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_data::clear_has_achieveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_data::clear_achieveid() {
  achieveid_ = 0;
  clear_has_achieveid();
}
inline ::google::protobuf::int32 SM_Achieve_data::achieveid() const {
  return achieveid_;
}
inline void SM_Achieve_data::set_achieveid(::google::protobuf::int32 value) {
  set_has_achieveid();
  achieveid_ = value;
}

// optional int32 conditiontype = 2;
inline bool SM_Achieve_data::has_conditiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Achieve_data::set_has_conditiontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Achieve_data::clear_has_conditiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Achieve_data::clear_conditiontype() {
  conditiontype_ = 0;
  clear_has_conditiontype();
}
inline ::google::protobuf::int32 SM_Achieve_data::conditiontype() const {
  return conditiontype_;
}
inline void SM_Achieve_data::set_conditiontype(::google::protobuf::int32 value) {
  set_has_conditiontype();
  conditiontype_ = value;
}

// optional int32 mow = 3;
inline bool SM_Achieve_data::has_mow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Achieve_data::set_has_mow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Achieve_data::clear_has_mow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Achieve_data::clear_mow() {
  mow_ = 0;
  clear_has_mow();
}
inline ::google::protobuf::int32 SM_Achieve_data::mow() const {
  return mow_;
}
inline void SM_Achieve_data::set_mow(::google::protobuf::int32 value) {
  set_has_mow();
  mow_ = value;
}

// optional int32 limit = 4;
inline bool SM_Achieve_data::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Achieve_data::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Achieve_data::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Achieve_data::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 SM_Achieve_data::limit() const {
  return limit_;
}
inline void SM_Achieve_data::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional int32 iscan = 5;
inline bool SM_Achieve_data::has_iscan() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_Achieve_data::set_has_iscan() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_Achieve_data::clear_has_iscan() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_Achieve_data::clear_iscan() {
  iscan_ = 0;
  clear_has_iscan();
}
inline ::google::protobuf::int32 SM_Achieve_data::iscan() const {
  return iscan_;
}
inline void SM_Achieve_data::set_iscan(::google::protobuf::int32 value) {
  set_has_iscan();
  iscan_ = value;
}

// -------------------------------------------------------------------

// SM_Achieve_channel_return

// required int32 channel = 1;
inline bool SM_Achieve_channel_return::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_channel_return::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_channel_return::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_channel_return::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 SM_Achieve_channel_return::channel() const {
  return channel_;
}
inline void SM_Achieve_channel_return::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// repeated .SM_Achieve_data data = 2;
inline int SM_Achieve_channel_return::data_size() const {
  return data_.size();
}
inline void SM_Achieve_channel_return::clear_data() {
  data_.Clear();
}
inline const ::SM_Achieve_data& SM_Achieve_channel_return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Achieve_data* SM_Achieve_channel_return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Achieve_data* SM_Achieve_channel_return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Achieve_data >&
SM_Achieve_channel_return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Achieve_data >*
SM_Achieve_channel_return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GM_Achieve_all_return

// required int32 rolied = 1;
inline bool GM_Achieve_all_return::has_rolied() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Achieve_all_return::set_has_rolied() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Achieve_all_return::clear_has_rolied() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Achieve_all_return::clear_rolied() {
  rolied_ = 0;
  clear_has_rolied();
}
inline ::google::protobuf::int32 GM_Achieve_all_return::rolied() const {
  return rolied_;
}
inline void GM_Achieve_all_return::set_rolied(::google::protobuf::int32 value) {
  set_has_rolied();
  rolied_ = value;
}

// repeated .SM_Achieve_channel_return channeldata = 2;
inline int GM_Achieve_all_return::channeldata_size() const {
  return channeldata_.size();
}
inline void GM_Achieve_all_return::clear_channeldata() {
  channeldata_.Clear();
}
inline const ::SM_Achieve_channel_return& GM_Achieve_all_return::channeldata(int index) const {
  return channeldata_.Get(index);
}
inline ::SM_Achieve_channel_return* GM_Achieve_all_return::mutable_channeldata(int index) {
  return channeldata_.Mutable(index);
}
inline ::SM_Achieve_channel_return* GM_Achieve_all_return::add_channeldata() {
  return channeldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Achieve_channel_return >&
GM_Achieve_all_return::channeldata() const {
  return channeldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Achieve_channel_return >*
GM_Achieve_all_return::mutable_channeldata() {
  return &channeldata_;
}

// -------------------------------------------------------------------

// SM_Achieve_accept_request

// required int32 channel = 1;
inline bool SM_Achieve_accept_request::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_accept_request::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_accept_request::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_accept_request::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 SM_Achieve_accept_request::channel() const {
  return channel_;
}
inline void SM_Achieve_accept_request::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 achieveid = 2;
inline bool SM_Achieve_accept_request::has_achieveid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Achieve_accept_request::set_has_achieveid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Achieve_accept_request::clear_has_achieveid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Achieve_accept_request::clear_achieveid() {
  achieveid_ = 0;
  clear_has_achieveid();
}
inline ::google::protobuf::int32 SM_Achieve_accept_request::achieveid() const {
  return achieveid_;
}
inline void SM_Achieve_accept_request::set_achieveid(::google::protobuf::int32 value) {
  set_has_achieveid();
  achieveid_ = value;
}

// -------------------------------------------------------------------

// SM_Achieve_accept_return

// required int32 errorid = 1;
inline bool SM_Achieve_accept_return::has_errorid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_accept_return::set_has_errorid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_accept_return::clear_has_errorid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_accept_return::clear_errorid() {
  errorid_ = 0;
  clear_has_errorid();
}
inline ::google::protobuf::int32 SM_Achieve_accept_return::errorid() const {
  return errorid_;
}
inline void SM_Achieve_accept_return::set_errorid(::google::protobuf::int32 value) {
  set_has_errorid();
  errorid_ = value;
}

// optional int32 achieveid = 2;
inline bool SM_Achieve_accept_return::has_achieveid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Achieve_accept_return::set_has_achieveid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Achieve_accept_return::clear_has_achieveid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Achieve_accept_return::clear_achieveid() {
  achieveid_ = 0;
  clear_has_achieveid();
}
inline ::google::protobuf::int32 SM_Achieve_accept_return::achieveid() const {
  return achieveid_;
}
inline void SM_Achieve_accept_return::set_achieveid(::google::protobuf::int32 value) {
  set_has_achieveid();
  achieveid_ = value;
}

// optional int32 objectid = 3;
inline bool SM_Achieve_accept_return::has_objectid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Achieve_accept_return::set_has_objectid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Achieve_accept_return::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Achieve_accept_return::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 SM_Achieve_accept_return::objectid() const {
  return objectid_;
}
inline void SM_Achieve_accept_return::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// optional int32 num = 4;
inline bool SM_Achieve_accept_return::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Achieve_accept_return::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Achieve_accept_return::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Achieve_accept_return::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SM_Achieve_accept_return::num() const {
  return num_;
}
inline void SM_Achieve_accept_return::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// SM_Achieve_can_data

// required int32 channel = 1;
inline bool SM_Achieve_can_data::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_can_data::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_can_data::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_can_data::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 SM_Achieve_can_data::channel() const {
  return channel_;
}
inline void SM_Achieve_can_data::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 achieveid = 2;
inline bool SM_Achieve_can_data::has_achieveid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Achieve_can_data::set_has_achieveid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Achieve_can_data::clear_has_achieveid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Achieve_can_data::clear_achieveid() {
  achieveid_ = 0;
  clear_has_achieveid();
}
inline ::google::protobuf::int32 SM_Achieve_can_data::achieveid() const {
  return achieveid_;
}
inline void SM_Achieve_can_data::set_achieveid(::google::protobuf::int32 value) {
  set_has_achieveid();
  achieveid_ = value;
}

// -------------------------------------------------------------------

// SM_Achieve_can_return

// required int32 roleid = 1;
inline bool SM_Achieve_can_return::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Achieve_can_return::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Achieve_can_return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Achieve_can_return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Achieve_can_return::roleid() const {
  return roleid_;
}
inline void SM_Achieve_can_return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .SM_Achieve_can_data data = 2;
inline int SM_Achieve_can_return::data_size() const {
  return data_.size();
}
inline void SM_Achieve_can_return::clear_data() {
  data_.Clear();
}
inline const ::SM_Achieve_can_data& SM_Achieve_can_return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Achieve_can_data* SM_Achieve_can_return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Achieve_can_data* SM_Achieve_can_return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Achieve_can_data >&
SM_Achieve_can_return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Achieve_can_data >*
SM_Achieve_can_return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GM_Achieve_Condition

// required int32 tag = 1;
inline bool GM_Achieve_Condition::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Achieve_Condition::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Achieve_Condition::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Achieve_Condition::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::google::protobuf::int32 GM_Achieve_Condition::tag() const {
  return tag_;
}
inline void GM_Achieve_Condition::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
}

// optional int32 condition = 2;
inline bool GM_Achieve_Condition::has_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Achieve_Condition::set_has_condition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Achieve_Condition::clear_has_condition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Achieve_Condition::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 GM_Achieve_Condition::condition() const {
  return condition_;
}
inline void GM_Achieve_Condition::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
}

// optional int32 num = 3;
inline bool GM_Achieve_Condition::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Achieve_Condition::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Achieve_Condition::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Achieve_Condition::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GM_Achieve_Condition::num() const {
  return num_;
}
inline void GM_Achieve_Condition::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_achivev_2etxt__INCLUDED
