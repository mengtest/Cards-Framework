// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achivev.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "achivev.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_Achieve_channel_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_channel_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Achieve_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Achieve_channel_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_channel_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Achieve_all_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Achieve_all_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Achieve_accept_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_accept_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Achieve_accept_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_accept_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Achieve_can_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_can_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Achieve_can_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Achieve_can_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Achieve_Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Achieve_Condition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_achivev_2etxt() {
  protobuf_AddDesc_achivev_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "achivev.txt");
  GOOGLE_CHECK(file != NULL);
  SM_Achieve_channel_request_descriptor_ = file->message_type(0);
  static const int SM_Achieve_channel_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_request, channel_),
  };
  SM_Achieve_channel_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_channel_request_descriptor_,
      SM_Achieve_channel_request::default_instance_,
      SM_Achieve_channel_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_channel_request));
  SM_Achieve_data_descriptor_ = file->message_type(1);
  static const int SM_Achieve_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, achieveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, conditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, mow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, iscan_),
  };
  SM_Achieve_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_data_descriptor_,
      SM_Achieve_data::default_instance_,
      SM_Achieve_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_data));
  SM_Achieve_channel_return_descriptor_ = file->message_type(2);
  static const int SM_Achieve_channel_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_return, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_return, data_),
  };
  SM_Achieve_channel_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_channel_return_descriptor_,
      SM_Achieve_channel_return::default_instance_,
      SM_Achieve_channel_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_channel_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_channel_return));
  GM_Achieve_all_return_descriptor_ = file->message_type(3);
  static const int GM_Achieve_all_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_all_return, rolied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_all_return, channeldata_),
  };
  GM_Achieve_all_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Achieve_all_return_descriptor_,
      GM_Achieve_all_return::default_instance_,
      GM_Achieve_all_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_all_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_all_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Achieve_all_return));
  SM_Achieve_accept_request_descriptor_ = file->message_type(4);
  static const int SM_Achieve_accept_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_request, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_request, achieveid_),
  };
  SM_Achieve_accept_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_accept_request_descriptor_,
      SM_Achieve_accept_request::default_instance_,
      SM_Achieve_accept_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_accept_request));
  SM_Achieve_accept_return_descriptor_ = file->message_type(5);
  static const int SM_Achieve_accept_return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_return, achieveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_return, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_return, num_),
  };
  SM_Achieve_accept_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_accept_return_descriptor_,
      SM_Achieve_accept_return::default_instance_,
      SM_Achieve_accept_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_accept_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_accept_return));
  SM_Achieve_can_data_descriptor_ = file->message_type(6);
  static const int SM_Achieve_can_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_data, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_data, achieveid_),
  };
  SM_Achieve_can_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_can_data_descriptor_,
      SM_Achieve_can_data::default_instance_,
      SM_Achieve_can_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_can_data));
  SM_Achieve_can_return_descriptor_ = file->message_type(7);
  static const int SM_Achieve_can_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_return, data_),
  };
  SM_Achieve_can_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Achieve_can_return_descriptor_,
      SM_Achieve_can_return::default_instance_,
      SM_Achieve_can_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Achieve_can_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Achieve_can_return));
  GM_Achieve_Condition_descriptor_ = file->message_type(8);
  static const int GM_Achieve_Condition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_Condition, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_Condition, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_Condition, num_),
  };
  GM_Achieve_Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Achieve_Condition_descriptor_,
      GM_Achieve_Condition::default_instance_,
      GM_Achieve_Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Achieve_Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Achieve_Condition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_achivev_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_channel_request_descriptor_, &SM_Achieve_channel_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_data_descriptor_, &SM_Achieve_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_channel_return_descriptor_, &SM_Achieve_channel_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Achieve_all_return_descriptor_, &GM_Achieve_all_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_accept_request_descriptor_, &SM_Achieve_accept_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_accept_return_descriptor_, &SM_Achieve_accept_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_can_data_descriptor_, &SM_Achieve_can_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Achieve_can_return_descriptor_, &SM_Achieve_can_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Achieve_Condition_descriptor_, &GM_Achieve_Condition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_achivev_2etxt() {
  delete SM_Achieve_channel_request::default_instance_;
  delete SM_Achieve_channel_request_reflection_;
  delete SM_Achieve_data::default_instance_;
  delete SM_Achieve_data_reflection_;
  delete SM_Achieve_channel_return::default_instance_;
  delete SM_Achieve_channel_return_reflection_;
  delete GM_Achieve_all_return::default_instance_;
  delete GM_Achieve_all_return_reflection_;
  delete SM_Achieve_accept_request::default_instance_;
  delete SM_Achieve_accept_request_reflection_;
  delete SM_Achieve_accept_return::default_instance_;
  delete SM_Achieve_accept_return_reflection_;
  delete SM_Achieve_can_data::default_instance_;
  delete SM_Achieve_can_data_reflection_;
  delete SM_Achieve_can_return::default_instance_;
  delete SM_Achieve_can_return_reflection_;
  delete GM_Achieve_Condition::default_instance_;
  delete GM_Achieve_Condition_reflection_;
}

void protobuf_AddDesc_achivev_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013achivev.txt\"-\n\032SM_Achieve_channel_requ"
    "est\022\017\n\007channel\030\001 \002(\005\"f\n\017SM_Achieve_data\022"
    "\021\n\tachieveid\030\001 \002(\005\022\025\n\rconditiontype\030\002 \001("
    "\005\022\013\n\003mow\030\003 \001(\005\022\r\n\005limit\030\004 \001(\005\022\r\n\005iscan\030\005"
    " \001(\005\"L\n\031SM_Achieve_channel_return\022\017\n\007cha"
    "nnel\030\001 \002(\005\022\036\n\004data\030\002 \003(\0132\020.SM_Achieve_da"
    "ta\"X\n\025GM_Achieve_all_return\022\016\n\006rolied\030\001 "
    "\002(\005\022/\n\013channeldata\030\002 \003(\0132\032.SM_Achieve_ch"
    "annel_return\"\?\n\031SM_Achieve_accept_reques"
    "t\022\017\n\007channel\030\001 \002(\005\022\021\n\tachieveid\030\002 \001(\005\"]\n"
    "\030SM_Achieve_accept_return\022\017\n\007errorid\030\001 \002"
    "(\005\022\021\n\tachieveid\030\002 \001(\005\022\020\n\010objectid\030\003 \001(\005\022"
    "\013\n\003num\030\004 \001(\005\"9\n\023SM_Achieve_can_data\022\017\n\007c"
    "hannel\030\001 \002(\005\022\021\n\tachieveid\030\002 \001(\005\"K\n\025SM_Ac"
    "hieve_can_return\022\016\n\006roleid\030\001 \002(\005\022\"\n\004data"
    "\030\002 \003(\0132\024.SM_Achieve_can_data\"C\n\024GM_Achie"
    "ve_Condition\022\013\n\003tag\030\001 \002(\005\022\021\n\tcondition\030\002"
    " \001(\005\022\013\n\003num\030\003 \001(\005", 697);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "achivev.txt", &protobuf_RegisterTypes);
  SM_Achieve_channel_request::default_instance_ = new SM_Achieve_channel_request();
  SM_Achieve_data::default_instance_ = new SM_Achieve_data();
  SM_Achieve_channel_return::default_instance_ = new SM_Achieve_channel_return();
  GM_Achieve_all_return::default_instance_ = new GM_Achieve_all_return();
  SM_Achieve_accept_request::default_instance_ = new SM_Achieve_accept_request();
  SM_Achieve_accept_return::default_instance_ = new SM_Achieve_accept_return();
  SM_Achieve_can_data::default_instance_ = new SM_Achieve_can_data();
  SM_Achieve_can_return::default_instance_ = new SM_Achieve_can_return();
  GM_Achieve_Condition::default_instance_ = new GM_Achieve_Condition();
  SM_Achieve_channel_request::default_instance_->InitAsDefaultInstance();
  SM_Achieve_data::default_instance_->InitAsDefaultInstance();
  SM_Achieve_channel_return::default_instance_->InitAsDefaultInstance();
  GM_Achieve_all_return::default_instance_->InitAsDefaultInstance();
  SM_Achieve_accept_request::default_instance_->InitAsDefaultInstance();
  SM_Achieve_accept_return::default_instance_->InitAsDefaultInstance();
  SM_Achieve_can_data::default_instance_->InitAsDefaultInstance();
  SM_Achieve_can_return::default_instance_->InitAsDefaultInstance();
  GM_Achieve_Condition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_achivev_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_achivev_2etxt {
  StaticDescriptorInitializer_achivev_2etxt() {
    protobuf_AddDesc_achivev_2etxt();
  }
} static_descriptor_initializer_achivev_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_channel_request::kChannelFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_channel_request::SM_Achieve_channel_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_channel_request::InitAsDefaultInstance() {
}

SM_Achieve_channel_request::SM_Achieve_channel_request(const SM_Achieve_channel_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_channel_request::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_channel_request::~SM_Achieve_channel_request() {
  SharedDtor();
}

void SM_Achieve_channel_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_channel_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_channel_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_channel_request_descriptor_;
}

const SM_Achieve_channel_request& SM_Achieve_channel_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_channel_request* SM_Achieve_channel_request::default_instance_ = NULL;

SM_Achieve_channel_request* SM_Achieve_channel_request::New() const {
  return new SM_Achieve_channel_request;
}

void SM_Achieve_channel_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_channel_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_channel_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_channel_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_channel_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_channel_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_channel_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_channel_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_channel_request::MergeFrom(const SM_Achieve_channel_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_channel_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_channel_request::CopyFrom(const SM_Achieve_channel_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_channel_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Achieve_channel_request::Swap(SM_Achieve_channel_request* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_channel_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_channel_request_descriptor_;
  metadata.reflection = SM_Achieve_channel_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_data::kAchieveidFieldNumber;
const int SM_Achieve_data::kConditiontypeFieldNumber;
const int SM_Achieve_data::kMowFieldNumber;
const int SM_Achieve_data::kLimitFieldNumber;
const int SM_Achieve_data::kIscanFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_data::SM_Achieve_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_data::InitAsDefaultInstance() {
}

SM_Achieve_data::SM_Achieve_data(const SM_Achieve_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_data::SharedCtor() {
  _cached_size_ = 0;
  achieveid_ = 0;
  conditiontype_ = 0;
  mow_ = 0;
  limit_ = 0;
  iscan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_data::~SM_Achieve_data() {
  SharedDtor();
}

void SM_Achieve_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_data_descriptor_;
}

const SM_Achieve_data& SM_Achieve_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_data* SM_Achieve_data::default_instance_ = NULL;

SM_Achieve_data* SM_Achieve_data::New() const {
  return new SM_Achieve_data;
}

void SM_Achieve_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieveid_ = 0;
    conditiontype_ = 0;
    mow_ = 0;
    limit_ = 0;
    iscan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 achieveid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_conditiontype;
        break;
      }

      // optional int32 conditiontype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditiontype_)));
          set_has_conditiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mow;
        break;
      }

      // optional int32 mow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mow_)));
          set_has_mow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iscan;
        break;
      }

      // optional int32 iscan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscan_)));
          set_has_iscan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 achieveid = 1;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achieveid(), output);
  }

  // optional int32 conditiontype = 2;
  if (has_conditiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->conditiontype(), output);
  }

  // optional int32 mow = 3;
  if (has_mow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mow(), output);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  // optional int32 iscan = 5;
  if (has_iscan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iscan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 achieveid = 1;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achieveid(), target);
  }

  // optional int32 conditiontype = 2;
  if (has_conditiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->conditiontype(), target);
  }

  // optional int32 mow = 3;
  if (has_mow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mow(), target);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  // optional int32 iscan = 5;
  if (has_iscan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iscan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 achieveid = 1;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieveid());
    }

    // optional int32 conditiontype = 2;
    if (has_conditiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditiontype());
    }

    // optional int32 mow = 3;
    if (has_mow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mow());
    }

    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 iscan = 5;
    if (has_iscan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_data::MergeFrom(const SM_Achieve_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
    if (from.has_conditiontype()) {
      set_conditiontype(from.conditiontype());
    }
    if (from.has_mow()) {
      set_mow(from.mow());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_iscan()) {
      set_iscan(from.iscan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_data::CopyFrom(const SM_Achieve_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Achieve_data::Swap(SM_Achieve_data* other) {
  if (other != this) {
    std::swap(achieveid_, other->achieveid_);
    std::swap(conditiontype_, other->conditiontype_);
    std::swap(mow_, other->mow_);
    std::swap(limit_, other->limit_);
    std::swap(iscan_, other->iscan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_data_descriptor_;
  metadata.reflection = SM_Achieve_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_channel_return::kChannelFieldNumber;
const int SM_Achieve_channel_return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_channel_return::SM_Achieve_channel_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_channel_return::InitAsDefaultInstance() {
}

SM_Achieve_channel_return::SM_Achieve_channel_return(const SM_Achieve_channel_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_channel_return::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_channel_return::~SM_Achieve_channel_return() {
  SharedDtor();
}

void SM_Achieve_channel_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_channel_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_channel_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_channel_return_descriptor_;
}

const SM_Achieve_channel_return& SM_Achieve_channel_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_channel_return* SM_Achieve_channel_return::default_instance_ = NULL;

SM_Achieve_channel_return* SM_Achieve_channel_return::New() const {
  return new SM_Achieve_channel_return;
}

void SM_Achieve_channel_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_channel_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Achieve_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_channel_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // repeated .SM_Achieve_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_channel_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // repeated .SM_Achieve_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_channel_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  // repeated .SM_Achieve_data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_channel_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_channel_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_channel_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_channel_return::MergeFrom(const SM_Achieve_channel_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_channel_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_channel_return::CopyFrom(const SM_Achieve_channel_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_channel_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Achieve_channel_return::Swap(SM_Achieve_channel_return* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_channel_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_channel_return_descriptor_;
  metadata.reflection = SM_Achieve_channel_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Achieve_all_return::kRoliedFieldNumber;
const int GM_Achieve_all_return::kChanneldataFieldNumber;
#endif  // !_MSC_VER

GM_Achieve_all_return::GM_Achieve_all_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Achieve_all_return::InitAsDefaultInstance() {
}

GM_Achieve_all_return::GM_Achieve_all_return(const GM_Achieve_all_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Achieve_all_return::SharedCtor() {
  _cached_size_ = 0;
  rolied_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Achieve_all_return::~GM_Achieve_all_return() {
  SharedDtor();
}

void GM_Achieve_all_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Achieve_all_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Achieve_all_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Achieve_all_return_descriptor_;
}

const GM_Achieve_all_return& GM_Achieve_all_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

GM_Achieve_all_return* GM_Achieve_all_return::default_instance_ = NULL;

GM_Achieve_all_return* GM_Achieve_all_return::New() const {
  return new GM_Achieve_all_return;
}

void GM_Achieve_all_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rolied_ = 0;
  }
  channeldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Achieve_all_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rolied = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolied_)));
          set_has_rolied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channeldata;
        break;
      }

      // repeated .SM_Achieve_channel_return channeldata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channeldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channeldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channeldata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Achieve_all_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rolied = 1;
  if (has_rolied()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rolied(), output);
  }

  // repeated .SM_Achieve_channel_return channeldata = 2;
  for (int i = 0; i < this->channeldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channeldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Achieve_all_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rolied = 1;
  if (has_rolied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rolied(), target);
  }

  // repeated .SM_Achieve_channel_return channeldata = 2;
  for (int i = 0; i < this->channeldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channeldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Achieve_all_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rolied = 1;
    if (has_rolied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolied());
    }

  }
  // repeated .SM_Achieve_channel_return channeldata = 2;
  total_size += 1 * this->channeldata_size();
  for (int i = 0; i < this->channeldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channeldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Achieve_all_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Achieve_all_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Achieve_all_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Achieve_all_return::MergeFrom(const GM_Achieve_all_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  channeldata_.MergeFrom(from.channeldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolied()) {
      set_rolied(from.rolied());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Achieve_all_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Achieve_all_return::CopyFrom(const GM_Achieve_all_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Achieve_all_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < channeldata_size(); i++) {
    if (!this->channeldata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Achieve_all_return::Swap(GM_Achieve_all_return* other) {
  if (other != this) {
    std::swap(rolied_, other->rolied_);
    channeldata_.Swap(&other->channeldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Achieve_all_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Achieve_all_return_descriptor_;
  metadata.reflection = GM_Achieve_all_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_accept_request::kChannelFieldNumber;
const int SM_Achieve_accept_request::kAchieveidFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_accept_request::SM_Achieve_accept_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_accept_request::InitAsDefaultInstance() {
}

SM_Achieve_accept_request::SM_Achieve_accept_request(const SM_Achieve_accept_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_accept_request::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  achieveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_accept_request::~SM_Achieve_accept_request() {
  SharedDtor();
}

void SM_Achieve_accept_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_accept_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_accept_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_accept_request_descriptor_;
}

const SM_Achieve_accept_request& SM_Achieve_accept_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_accept_request* SM_Achieve_accept_request::default_instance_ = NULL;

SM_Achieve_accept_request* SM_Achieve_accept_request::New() const {
  return new SM_Achieve_accept_request;
}

void SM_Achieve_accept_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    achieveid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_accept_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achieveid;
        break;
      }

      // optional int32 achieveid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieveid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_accept_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // optional int32 achieveid = 2;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achieveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_accept_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // optional int32 achieveid = 2;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achieveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_accept_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 achieveid = 2;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_accept_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_accept_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_accept_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_accept_request::MergeFrom(const SM_Achieve_accept_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_accept_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_accept_request::CopyFrom(const SM_Achieve_accept_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_accept_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Achieve_accept_request::Swap(SM_Achieve_accept_request* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(achieveid_, other->achieveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_accept_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_accept_request_descriptor_;
  metadata.reflection = SM_Achieve_accept_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_accept_return::kErroridFieldNumber;
const int SM_Achieve_accept_return::kAchieveidFieldNumber;
const int SM_Achieve_accept_return::kObjectidFieldNumber;
const int SM_Achieve_accept_return::kNumFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_accept_return::SM_Achieve_accept_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_accept_return::InitAsDefaultInstance() {
}

SM_Achieve_accept_return::SM_Achieve_accept_return(const SM_Achieve_accept_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_accept_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  achieveid_ = 0;
  objectid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_accept_return::~SM_Achieve_accept_return() {
  SharedDtor();
}

void SM_Achieve_accept_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_accept_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_accept_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_accept_return_descriptor_;
}

const SM_Achieve_accept_return& SM_Achieve_accept_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_accept_return* SM_Achieve_accept_return::default_instance_ = NULL;

SM_Achieve_accept_return* SM_Achieve_accept_return::New() const {
  return new SM_Achieve_accept_return;
}

void SM_Achieve_accept_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    achieveid_ = 0;
    objectid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_accept_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achieveid;
        break;
      }

      // optional int32 achieveid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieveid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_accept_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 achieveid = 2;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achieveid(), output);
  }

  // optional int32 objectid = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_accept_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 achieveid = 2;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achieveid(), target);
  }

  // optional int32 objectid = 3;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_accept_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 achieveid = 2;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieveid());
    }

    // optional int32 objectid = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_accept_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_accept_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_accept_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_accept_return::MergeFrom(const SM_Achieve_accept_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_accept_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_accept_return::CopyFrom(const SM_Achieve_accept_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_accept_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Achieve_accept_return::Swap(SM_Achieve_accept_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(achieveid_, other->achieveid_);
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_accept_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_accept_return_descriptor_;
  metadata.reflection = SM_Achieve_accept_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_can_data::kChannelFieldNumber;
const int SM_Achieve_can_data::kAchieveidFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_can_data::SM_Achieve_can_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_can_data::InitAsDefaultInstance() {
}

SM_Achieve_can_data::SM_Achieve_can_data(const SM_Achieve_can_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_can_data::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  achieveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_can_data::~SM_Achieve_can_data() {
  SharedDtor();
}

void SM_Achieve_can_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_can_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_can_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_can_data_descriptor_;
}

const SM_Achieve_can_data& SM_Achieve_can_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_can_data* SM_Achieve_can_data::default_instance_ = NULL;

SM_Achieve_can_data* SM_Achieve_can_data::New() const {
  return new SM_Achieve_can_data;
}

void SM_Achieve_can_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    achieveid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_can_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achieveid;
        break;
      }

      // optional int32 achieveid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achieveid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_can_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // optional int32 achieveid = 2;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achieveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_can_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // optional int32 achieveid = 2;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achieveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_can_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 achieveid = 2;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_can_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_can_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_can_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_can_data::MergeFrom(const SM_Achieve_can_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_can_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_can_data::CopyFrom(const SM_Achieve_can_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_can_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Achieve_can_data::Swap(SM_Achieve_can_data* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(achieveid_, other->achieveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_can_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_can_data_descriptor_;
  metadata.reflection = SM_Achieve_can_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Achieve_can_return::kRoleidFieldNumber;
const int SM_Achieve_can_return::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Achieve_can_return::SM_Achieve_can_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Achieve_can_return::InitAsDefaultInstance() {
}

SM_Achieve_can_return::SM_Achieve_can_return(const SM_Achieve_can_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Achieve_can_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Achieve_can_return::~SM_Achieve_can_return() {
  SharedDtor();
}

void SM_Achieve_can_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Achieve_can_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Achieve_can_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Achieve_can_return_descriptor_;
}

const SM_Achieve_can_return& SM_Achieve_can_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

SM_Achieve_can_return* SM_Achieve_can_return::default_instance_ = NULL;

SM_Achieve_can_return* SM_Achieve_can_return::New() const {
  return new SM_Achieve_can_return;
}

void SM_Achieve_can_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Achieve_can_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Achieve_can_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Achieve_can_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .SM_Achieve_can_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Achieve_can_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .SM_Achieve_can_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Achieve_can_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .SM_Achieve_can_data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Achieve_can_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Achieve_can_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Achieve_can_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Achieve_can_return::MergeFrom(const SM_Achieve_can_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Achieve_can_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Achieve_can_return::CopyFrom(const SM_Achieve_can_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Achieve_can_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Achieve_can_return::Swap(SM_Achieve_can_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Achieve_can_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Achieve_can_return_descriptor_;
  metadata.reflection = SM_Achieve_can_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Achieve_Condition::kTagFieldNumber;
const int GM_Achieve_Condition::kConditionFieldNumber;
const int GM_Achieve_Condition::kNumFieldNumber;
#endif  // !_MSC_VER

GM_Achieve_Condition::GM_Achieve_Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Achieve_Condition::InitAsDefaultInstance() {
}

GM_Achieve_Condition::GM_Achieve_Condition(const GM_Achieve_Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Achieve_Condition::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0;
  condition_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Achieve_Condition::~GM_Achieve_Condition() {
  SharedDtor();
}

void GM_Achieve_Condition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Achieve_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Achieve_Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Achieve_Condition_descriptor_;
}

const GM_Achieve_Condition& GM_Achieve_Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achivev_2etxt();
  return *default_instance_;
}

GM_Achieve_Condition* GM_Achieve_Condition::default_instance_ = NULL;

GM_Achieve_Condition* GM_Achieve_Condition::New() const {
  return new GM_Achieve_Condition;
}

void GM_Achieve_Condition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0;
    condition_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Achieve_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_condition;
        break;
      }

      // optional int32 condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Achieve_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional int32 condition = 2;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->condition(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Achieve_Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // optional int32 condition = 2;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->condition(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Achieve_Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional int32 condition = 2;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Achieve_Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Achieve_Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Achieve_Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Achieve_Condition::MergeFrom(const GM_Achieve_Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Achieve_Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Achieve_Condition::CopyFrom(const GM_Achieve_Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Achieve_Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Achieve_Condition::Swap(GM_Achieve_Condition* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(condition_, other->condition_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Achieve_Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Achieve_Condition_descriptor_;
  metadata.reflection = GM_Achieve_Condition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
