// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Challenge.txt

#ifndef PROTOBUF_SP_5fChallenge_2etxt__INCLUDED
#define PROTOBUF_SP_5fChallenge_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fChallenge_2etxt();
void protobuf_AssignDesc_SP_5fChallenge_2etxt();
void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

class SM_Challenge_Data_Request;
class SM_Challenge_Data_Return;
class SM_Challenge_Store_Return;
class SM_Challenge_Store_Info;
class SM_Challenge_Pet_Return;
class SM_Challenge_Pet_Info;
class SM_Challenge_Rent_Return;
class SM_Challenge_Rent_Info;
class SM_Challenge_Battle_Entry;
class SM_Challenge_Battle_Return;

// ===================================================================

class SM_Challenge_Data_Request : public ::google::protobuf::Message {
 public:
  SM_Challenge_Data_Request();
  virtual ~SM_Challenge_Data_Request();

  SM_Challenge_Data_Request(const SM_Challenge_Data_Request& from);

  inline SM_Challenge_Data_Request& operator=(const SM_Challenge_Data_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Data_Request& default_instance();

  void Swap(SM_Challenge_Data_Request* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Data_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Data_Request& from);
  void MergeFrom(const SM_Challenge_Data_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Challenge_Data_Request)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Data_Request* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Data_Return : public ::google::protobuf::Message {
 public:
  SM_Challenge_Data_Return();
  virtual ~SM_Challenge_Data_Return();

  SM_Challenge_Data_Return(const SM_Challenge_Data_Return& from);

  inline SM_Challenge_Data_Return& operator=(const SM_Challenge_Data_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Data_Return& default_instance();

  void Swap(SM_Challenge_Data_Return* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Data_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Data_Return& from);
  void MergeFrom(const SM_Challenge_Data_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 degree = 2;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 2;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);

  // optional int32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional int32 proof = 4;
  inline bool has_proof() const;
  inline void clear_proof();
  static const int kProofFieldNumber = 4;
  inline ::google::protobuf::int32 proof() const;
  inline void set_proof(::google::protobuf::int32 value);

  // optional int32 resettimes = 5;
  inline bool has_resettimes() const;
  inline void clear_resettimes();
  static const int kResettimesFieldNumber = 5;
  inline ::google::protobuf::int32 resettimes() const;
  inline void set_resettimes(::google::protobuf::int32 value);

  // optional int32 fighttime = 6;
  inline bool has_fighttime() const;
  inline void clear_fighttime();
  static const int kFighttimeFieldNumber = 6;
  inline ::google::protobuf::int32 fighttime() const;
  inline void set_fighttime(::google::protobuf::int32 value);

  // optional int32 fbtypeid = 7;
  inline bool has_fbtypeid() const;
  inline void clear_fbtypeid();
  static const int kFbtypeidFieldNumber = 7;
  inline ::google::protobuf::int32 fbtypeid() const;
  inline void set_fbtypeid(::google::protobuf::int32 value);

  // optional int32 rolefortuneid = 8;
  inline bool has_rolefortuneid() const;
  inline void clear_rolefortuneid();
  static const int kRolefortuneidFieldNumber = 8;
  inline ::google::protobuf::int32 rolefortuneid() const;
  inline void set_rolefortuneid(::google::protobuf::int32 value);

  // optional int32 petfortuneid = 9;
  inline bool has_petfortuneid() const;
  inline void clear_petfortuneid();
  static const int kPetfortuneidFieldNumber = 9;
  inline ::google::protobuf::int32 petfortuneid() const;
  inline void set_petfortuneid(::google::protobuf::int32 value);

  // optional int64 fortunereset = 10;
  inline bool has_fortunereset() const;
  inline void clear_fortunereset();
  static const int kFortuneresetFieldNumber = 10;
  inline ::google::protobuf::int64 fortunereset() const;
  inline void set_fortunereset(::google::protobuf::int64 value);

  // optional int64 rentgmid = 11;
  inline bool has_rentgmid() const;
  inline void clear_rentgmid();
  static const int kRentgmidFieldNumber = 11;
  inline ::google::protobuf::int64 rentgmid() const;
  inline void set_rentgmid(::google::protobuf::int64 value);

  // optional int64 sendgmid = 12;
  inline bool has_sendgmid() const;
  inline void clear_sendgmid();
  static const int kSendgmidFieldNumber = 12;
  inline ::google::protobuf::int64 sendgmid() const;
  inline void set_sendgmid(::google::protobuf::int64 value);

  // optional int32 hpdecrease = 13;
  inline bool has_hpdecrease() const;
  inline void clear_hpdecrease();
  static const int kHpdecreaseFieldNumber = 13;
  inline ::google::protobuf::int32 hpdecrease() const;
  inline void set_hpdecrease(::google::protobuf::int32 value);

  // optional int32 matcher = 14;
  inline bool has_matcher() const;
  inline void clear_matcher();
  static const int kMatcherFieldNumber = 14;
  inline ::google::protobuf::int32 matcher() const;
  inline void set_matcher(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Challenge_Data_Return)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_proof();
  inline void clear_has_proof();
  inline void set_has_resettimes();
  inline void clear_has_resettimes();
  inline void set_has_fighttime();
  inline void clear_has_fighttime();
  inline void set_has_fbtypeid();
  inline void clear_has_fbtypeid();
  inline void set_has_rolefortuneid();
  inline void clear_has_rolefortuneid();
  inline void set_has_petfortuneid();
  inline void clear_has_petfortuneid();
  inline void set_has_fortunereset();
  inline void clear_has_fortunereset();
  inline void set_has_rentgmid();
  inline void clear_has_rentgmid();
  inline void set_has_sendgmid();
  inline void clear_has_sendgmid();
  inline void set_has_hpdecrease();
  inline void clear_has_hpdecrease();
  inline void set_has_matcher();
  inline void clear_has_matcher();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 degree_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 proof_;
  ::google::protobuf::int32 resettimes_;
  ::google::protobuf::int32 fighttime_;
  ::google::protobuf::int32 fbtypeid_;
  ::google::protobuf::int32 rolefortuneid_;
  ::google::protobuf::int64 fortunereset_;
  ::google::protobuf::int64 rentgmid_;
  ::google::protobuf::int32 petfortuneid_;
  ::google::protobuf::int32 hpdecrease_;
  ::google::protobuf::int64 sendgmid_;
  ::google::protobuf::int32 matcher_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Data_Return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Store_Return : public ::google::protobuf::Message {
 public:
  SM_Challenge_Store_Return();
  virtual ~SM_Challenge_Store_Return();

  SM_Challenge_Store_Return(const SM_Challenge_Store_Return& from);

  inline SM_Challenge_Store_Return& operator=(const SM_Challenge_Store_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Store_Return& default_instance();

  void Swap(SM_Challenge_Store_Return* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Store_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Store_Return& from);
  void MergeFrom(const SM_Challenge_Store_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .SM_Challenge_Store_Info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Challenge_Store_Info& data(int index) const;
  inline ::SM_Challenge_Store_Info* mutable_data(int index);
  inline ::SM_Challenge_Store_Info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Store_Info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Store_Info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Challenge_Store_Return)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Store_Info > data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Store_Return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Store_Info : public ::google::protobuf::Message {
 public:
  SM_Challenge_Store_Info();
  virtual ~SM_Challenge_Store_Info();

  SM_Challenge_Store_Info(const SM_Challenge_Store_Info& from);

  inline SM_Challenge_Store_Info& operator=(const SM_Challenge_Store_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Store_Info& default_instance();

  void Swap(SM_Challenge_Store_Info* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Store_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Store_Info& from);
  void MergeFrom(const SM_Challenge_Store_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Challenge_Store_Info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Store_Info* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Pet_Return : public ::google::protobuf::Message {
 public:
  SM_Challenge_Pet_Return();
  virtual ~SM_Challenge_Pet_Return();

  SM_Challenge_Pet_Return(const SM_Challenge_Pet_Return& from);

  inline SM_Challenge_Pet_Return& operator=(const SM_Challenge_Pet_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Pet_Return& default_instance();

  void Swap(SM_Challenge_Pet_Return* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Pet_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Pet_Return& from);
  void MergeFrom(const SM_Challenge_Pet_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .SM_Challenge_Pet_Info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Challenge_Pet_Info& data(int index) const;
  inline ::SM_Challenge_Pet_Info* mutable_data(int index);
  inline ::SM_Challenge_Pet_Info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Pet_Info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Pet_Info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Challenge_Pet_Return)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Pet_Info > data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Pet_Return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Pet_Info : public ::google::protobuf::Message {
 public:
  SM_Challenge_Pet_Info();
  virtual ~SM_Challenge_Pet_Info();

  SM_Challenge_Pet_Info(const SM_Challenge_Pet_Info& from);

  inline SM_Challenge_Pet_Info& operator=(const SM_Challenge_Pet_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Pet_Info& default_instance();

  void Swap(SM_Challenge_Pet_Info* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Pet_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Pet_Info& from);
  void MergeFrom(const SM_Challenge_Pet_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int64 gmid = 2;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 2;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 hpdecrease = 3;
  inline bool has_hpdecrease() const;
  inline void clear_hpdecrease();
  static const int kHpdecreaseFieldNumber = 3;
  inline ::google::protobuf::int32 hpdecrease() const;
  inline void set_hpdecrease(::google::protobuf::int32 value);

  // optional int32 ownerid = 4;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 4;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 onbattle = 5;
  inline bool has_onbattle() const;
  inline void clear_onbattle();
  static const int kOnbattleFieldNumber = 5;
  inline ::google::protobuf::int32 onbattle() const;
  inline void set_onbattle(::google::protobuf::int32 value);

  // optional int32 petid = 6;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 6;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Challenge_Pet_Info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_hpdecrease();
  inline void clear_has_hpdecrease();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_onbattle();
  inline void clear_has_onbattle();
  inline void set_has_petid();
  inline void clear_has_petid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 hpdecrease_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 onbattle_;
  ::google::protobuf::int32 petid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Pet_Info* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Rent_Return : public ::google::protobuf::Message {
 public:
  SM_Challenge_Rent_Return();
  virtual ~SM_Challenge_Rent_Return();

  SM_Challenge_Rent_Return(const SM_Challenge_Rent_Return& from);

  inline SM_Challenge_Rent_Return& operator=(const SM_Challenge_Rent_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Rent_Return& default_instance();

  void Swap(SM_Challenge_Rent_Return* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Rent_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Rent_Return& from);
  void MergeFrom(const SM_Challenge_Rent_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .SM_Challenge_Rent_Info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Challenge_Rent_Info& data(int index) const;
  inline ::SM_Challenge_Rent_Info* mutable_data(int index);
  inline ::SM_Challenge_Rent_Info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Rent_Info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Rent_Info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Challenge_Rent_Return)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Rent_Info > data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Rent_Return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Rent_Info : public ::google::protobuf::Message {
 public:
  SM_Challenge_Rent_Info();
  virtual ~SM_Challenge_Rent_Info();

  SM_Challenge_Rent_Info(const SM_Challenge_Rent_Info& from);

  inline SM_Challenge_Rent_Info& operator=(const SM_Challenge_Rent_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Rent_Info& default_instance();

  void Swap(SM_Challenge_Rent_Info* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Rent_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Rent_Info& from);
  void MergeFrom(const SM_Challenge_Rent_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gangid = 1;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangidFieldNumber = 1;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional int32 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int64 gmid = 3;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 3;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 evolve = 5;
  inline bool has_evolve() const;
  inline void clear_evolve();
  static const int kEvolveFieldNumber = 5;
  inline ::google::protobuf::int32 evolve() const;
  inline void set_evolve(::google::protobuf::int32 value);

  // optional int32 petid = 6;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 6;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // optional string ownername = 7;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnernameFieldNumber = 7;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const char* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // optional int32 renttimes = 8;
  inline bool has_renttimes() const;
  inline void clear_renttimes();
  static const int kRenttimesFieldNumber = 8;
  inline ::google::protobuf::int32 renttimes() const;
  inline void set_renttimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Challenge_Rent_Info)
 private:
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_evolve();
  inline void clear_has_evolve();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_ownername();
  inline void clear_has_ownername();
  inline void set_has_renttimes();
  inline void clear_has_renttimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gangid_;
  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 evolve_;
  ::google::protobuf::int32 petid_;
  ::std::string* ownername_;
  ::google::protobuf::int32 renttimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Rent_Info* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Battle_Entry : public ::google::protobuf::Message {
 public:
  SM_Challenge_Battle_Entry();
  virtual ~SM_Challenge_Battle_Entry();

  SM_Challenge_Battle_Entry(const SM_Challenge_Battle_Entry& from);

  inline SM_Challenge_Battle_Entry& operator=(const SM_Challenge_Battle_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Battle_Entry& default_instance();

  void Swap(SM_Challenge_Battle_Entry* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Battle_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Battle_Entry& from);
  void MergeFrom(const SM_Challenge_Battle_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 battleid = 3;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleidFieldNumber = 3;
  inline ::google::protobuf::int32 battleid() const;
  inline void set_battleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Challenge_Battle_Entry)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_battleid();
  inline void clear_has_battleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 battleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Battle_Entry* default_instance_;
};
// -------------------------------------------------------------------

class SM_Challenge_Battle_Return : public ::google::protobuf::Message {
 public:
  SM_Challenge_Battle_Return();
  virtual ~SM_Challenge_Battle_Return();

  SM_Challenge_Battle_Return(const SM_Challenge_Battle_Return& from);

  inline SM_Challenge_Battle_Return& operator=(const SM_Challenge_Battle_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Challenge_Battle_Return& default_instance();

  void Swap(SM_Challenge_Battle_Return* other);

  // implements Message ----------------------------------------------

  SM_Challenge_Battle_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Challenge_Battle_Return& from);
  void MergeFrom(const SM_Challenge_Battle_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .SM_Challenge_Battle_Entry data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::SM_Challenge_Battle_Entry& data(int index) const;
  inline ::SM_Challenge_Battle_Entry* mutable_data(int index);
  inline ::SM_Challenge_Battle_Entry* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Battle_Entry >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Battle_Entry >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Challenge_Battle_Return)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Battle_Entry > data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChallenge_2etxt();
  friend void protobuf_AssignDesc_SP_5fChallenge_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChallenge_2etxt();

  void InitAsDefaultInstance();
  static SM_Challenge_Battle_Return* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_Challenge_Data_Request

// required int32 roleid = 1;
inline bool SM_Challenge_Data_Request::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Data_Request::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Data_Request::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Data_Request::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Request::roleid() const {
  return roleid_;
}
inline void SM_Challenge_Data_Request::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// SM_Challenge_Data_Return

// required int32 roleid = 1;
inline bool SM_Challenge_Data_Return::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Data_Return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Data_Return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::roleid() const {
  return roleid_;
}
inline void SM_Challenge_Data_Return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 degree = 2;
inline bool SM_Challenge_Data_Return::has_degree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_degree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Challenge_Data_Return::clear_has_degree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Challenge_Data_Return::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::degree() const {
  return degree_;
}
inline void SM_Challenge_Data_Return::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
}

// optional int32 times = 3;
inline bool SM_Challenge_Data_Return::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Challenge_Data_Return::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Challenge_Data_Return::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::times() const {
  return times_;
}
inline void SM_Challenge_Data_Return::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 proof = 4;
inline bool SM_Challenge_Data_Return::has_proof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_proof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Challenge_Data_Return::clear_has_proof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Challenge_Data_Return::clear_proof() {
  proof_ = 0;
  clear_has_proof();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::proof() const {
  return proof_;
}
inline void SM_Challenge_Data_Return::set_proof(::google::protobuf::int32 value) {
  set_has_proof();
  proof_ = value;
}

// optional int32 resettimes = 5;
inline bool SM_Challenge_Data_Return::has_resettimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_resettimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_Challenge_Data_Return::clear_has_resettimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_Challenge_Data_Return::clear_resettimes() {
  resettimes_ = 0;
  clear_has_resettimes();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::resettimes() const {
  return resettimes_;
}
inline void SM_Challenge_Data_Return::set_resettimes(::google::protobuf::int32 value) {
  set_has_resettimes();
  resettimes_ = value;
}

// optional int32 fighttime = 6;
inline bool SM_Challenge_Data_Return::has_fighttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_fighttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_Challenge_Data_Return::clear_has_fighttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_Challenge_Data_Return::clear_fighttime() {
  fighttime_ = 0;
  clear_has_fighttime();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::fighttime() const {
  return fighttime_;
}
inline void SM_Challenge_Data_Return::set_fighttime(::google::protobuf::int32 value) {
  set_has_fighttime();
  fighttime_ = value;
}

// optional int32 fbtypeid = 7;
inline bool SM_Challenge_Data_Return::has_fbtypeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_fbtypeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_Challenge_Data_Return::clear_has_fbtypeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_Challenge_Data_Return::clear_fbtypeid() {
  fbtypeid_ = 0;
  clear_has_fbtypeid();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::fbtypeid() const {
  return fbtypeid_;
}
inline void SM_Challenge_Data_Return::set_fbtypeid(::google::protobuf::int32 value) {
  set_has_fbtypeid();
  fbtypeid_ = value;
}

// optional int32 rolefortuneid = 8;
inline bool SM_Challenge_Data_Return::has_rolefortuneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_rolefortuneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_Challenge_Data_Return::clear_has_rolefortuneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_Challenge_Data_Return::clear_rolefortuneid() {
  rolefortuneid_ = 0;
  clear_has_rolefortuneid();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::rolefortuneid() const {
  return rolefortuneid_;
}
inline void SM_Challenge_Data_Return::set_rolefortuneid(::google::protobuf::int32 value) {
  set_has_rolefortuneid();
  rolefortuneid_ = value;
}

// optional int32 petfortuneid = 9;
inline bool SM_Challenge_Data_Return::has_petfortuneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_petfortuneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SM_Challenge_Data_Return::clear_has_petfortuneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SM_Challenge_Data_Return::clear_petfortuneid() {
  petfortuneid_ = 0;
  clear_has_petfortuneid();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::petfortuneid() const {
  return petfortuneid_;
}
inline void SM_Challenge_Data_Return::set_petfortuneid(::google::protobuf::int32 value) {
  set_has_petfortuneid();
  petfortuneid_ = value;
}

// optional int64 fortunereset = 10;
inline bool SM_Challenge_Data_Return::has_fortunereset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_fortunereset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SM_Challenge_Data_Return::clear_has_fortunereset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SM_Challenge_Data_Return::clear_fortunereset() {
  fortunereset_ = GOOGLE_LONGLONG(0);
  clear_has_fortunereset();
}
inline ::google::protobuf::int64 SM_Challenge_Data_Return::fortunereset() const {
  return fortunereset_;
}
inline void SM_Challenge_Data_Return::set_fortunereset(::google::protobuf::int64 value) {
  set_has_fortunereset();
  fortunereset_ = value;
}

// optional int64 rentgmid = 11;
inline bool SM_Challenge_Data_Return::has_rentgmid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_rentgmid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SM_Challenge_Data_Return::clear_has_rentgmid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SM_Challenge_Data_Return::clear_rentgmid() {
  rentgmid_ = GOOGLE_LONGLONG(0);
  clear_has_rentgmid();
}
inline ::google::protobuf::int64 SM_Challenge_Data_Return::rentgmid() const {
  return rentgmid_;
}
inline void SM_Challenge_Data_Return::set_rentgmid(::google::protobuf::int64 value) {
  set_has_rentgmid();
  rentgmid_ = value;
}

// optional int64 sendgmid = 12;
inline bool SM_Challenge_Data_Return::has_sendgmid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_sendgmid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SM_Challenge_Data_Return::clear_has_sendgmid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SM_Challenge_Data_Return::clear_sendgmid() {
  sendgmid_ = GOOGLE_LONGLONG(0);
  clear_has_sendgmid();
}
inline ::google::protobuf::int64 SM_Challenge_Data_Return::sendgmid() const {
  return sendgmid_;
}
inline void SM_Challenge_Data_Return::set_sendgmid(::google::protobuf::int64 value) {
  set_has_sendgmid();
  sendgmid_ = value;
}

// optional int32 hpdecrease = 13;
inline bool SM_Challenge_Data_Return::has_hpdecrease() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_hpdecrease() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SM_Challenge_Data_Return::clear_has_hpdecrease() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SM_Challenge_Data_Return::clear_hpdecrease() {
  hpdecrease_ = 0;
  clear_has_hpdecrease();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::hpdecrease() const {
  return hpdecrease_;
}
inline void SM_Challenge_Data_Return::set_hpdecrease(::google::protobuf::int32 value) {
  set_has_hpdecrease();
  hpdecrease_ = value;
}

// optional int32 matcher = 14;
inline bool SM_Challenge_Data_Return::has_matcher() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SM_Challenge_Data_Return::set_has_matcher() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SM_Challenge_Data_Return::clear_has_matcher() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SM_Challenge_Data_Return::clear_matcher() {
  matcher_ = 0;
  clear_has_matcher();
}
inline ::google::protobuf::int32 SM_Challenge_Data_Return::matcher() const {
  return matcher_;
}
inline void SM_Challenge_Data_Return::set_matcher(::google::protobuf::int32 value) {
  set_has_matcher();
  matcher_ = value;
}

// -------------------------------------------------------------------

// SM_Challenge_Store_Return

// required int32 count = 1;
inline bool SM_Challenge_Store_Return::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Store_Return::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Store_Return::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Store_Return::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SM_Challenge_Store_Return::count() const {
  return count_;
}
inline void SM_Challenge_Store_Return::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .SM_Challenge_Store_Info data = 2;
inline int SM_Challenge_Store_Return::data_size() const {
  return data_.size();
}
inline void SM_Challenge_Store_Return::clear_data() {
  data_.Clear();
}
inline const ::SM_Challenge_Store_Info& SM_Challenge_Store_Return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Challenge_Store_Info* SM_Challenge_Store_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Challenge_Store_Info* SM_Challenge_Store_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Store_Info >&
SM_Challenge_Store_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Store_Info >*
SM_Challenge_Store_Return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_Challenge_Store_Info

// required int32 roleid = 1;
inline bool SM_Challenge_Store_Info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Store_Info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Store_Info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Store_Info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Challenge_Store_Info::roleid() const {
  return roleid_;
}
inline void SM_Challenge_Store_Info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 itemid = 2;
inline bool SM_Challenge_Store_Info::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Challenge_Store_Info::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Challenge_Store_Info::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Challenge_Store_Info::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 SM_Challenge_Store_Info::itemid() const {
  return itemid_;
}
inline void SM_Challenge_Store_Info::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 count = 3;
inline bool SM_Challenge_Store_Info::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Challenge_Store_Info::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Challenge_Store_Info::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Challenge_Store_Info::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SM_Challenge_Store_Info::count() const {
  return count_;
}
inline void SM_Challenge_Store_Info::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// SM_Challenge_Pet_Return

// required int32 count = 1;
inline bool SM_Challenge_Pet_Return::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Pet_Return::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Pet_Return::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Pet_Return::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SM_Challenge_Pet_Return::count() const {
  return count_;
}
inline void SM_Challenge_Pet_Return::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .SM_Challenge_Pet_Info data = 2;
inline int SM_Challenge_Pet_Return::data_size() const {
  return data_.size();
}
inline void SM_Challenge_Pet_Return::clear_data() {
  data_.Clear();
}
inline const ::SM_Challenge_Pet_Info& SM_Challenge_Pet_Return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Challenge_Pet_Info* SM_Challenge_Pet_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Challenge_Pet_Info* SM_Challenge_Pet_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Pet_Info >&
SM_Challenge_Pet_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Pet_Info >*
SM_Challenge_Pet_Return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_Challenge_Pet_Info

// required int32 roleid = 1;
inline bool SM_Challenge_Pet_Info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Pet_Info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Pet_Info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Pet_Info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Challenge_Pet_Info::roleid() const {
  return roleid_;
}
inline void SM_Challenge_Pet_Info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int64 gmid = 2;
inline bool SM_Challenge_Pet_Info::has_gmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Challenge_Pet_Info::set_has_gmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Challenge_Pet_Info::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Challenge_Pet_Info::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 SM_Challenge_Pet_Info::gmid() const {
  return gmid_;
}
inline void SM_Challenge_Pet_Info::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 hpdecrease = 3;
inline bool SM_Challenge_Pet_Info::has_hpdecrease() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Challenge_Pet_Info::set_has_hpdecrease() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Challenge_Pet_Info::clear_has_hpdecrease() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Challenge_Pet_Info::clear_hpdecrease() {
  hpdecrease_ = 0;
  clear_has_hpdecrease();
}
inline ::google::protobuf::int32 SM_Challenge_Pet_Info::hpdecrease() const {
  return hpdecrease_;
}
inline void SM_Challenge_Pet_Info::set_hpdecrease(::google::protobuf::int32 value) {
  set_has_hpdecrease();
  hpdecrease_ = value;
}

// optional int32 ownerid = 4;
inline bool SM_Challenge_Pet_Info::has_ownerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Challenge_Pet_Info::set_has_ownerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Challenge_Pet_Info::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Challenge_Pet_Info::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 SM_Challenge_Pet_Info::ownerid() const {
  return ownerid_;
}
inline void SM_Challenge_Pet_Info::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 onbattle = 5;
inline bool SM_Challenge_Pet_Info::has_onbattle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_Challenge_Pet_Info::set_has_onbattle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_Challenge_Pet_Info::clear_has_onbattle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_Challenge_Pet_Info::clear_onbattle() {
  onbattle_ = 0;
  clear_has_onbattle();
}
inline ::google::protobuf::int32 SM_Challenge_Pet_Info::onbattle() const {
  return onbattle_;
}
inline void SM_Challenge_Pet_Info::set_onbattle(::google::protobuf::int32 value) {
  set_has_onbattle();
  onbattle_ = value;
}

// optional int32 petid = 6;
inline bool SM_Challenge_Pet_Info::has_petid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_Challenge_Pet_Info::set_has_petid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_Challenge_Pet_Info::clear_has_petid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_Challenge_Pet_Info::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 SM_Challenge_Pet_Info::petid() const {
  return petid_;
}
inline void SM_Challenge_Pet_Info::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// SM_Challenge_Rent_Return

// required int32 count = 1;
inline bool SM_Challenge_Rent_Return::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Rent_Return::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Rent_Return::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Rent_Return::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SM_Challenge_Rent_Return::count() const {
  return count_;
}
inline void SM_Challenge_Rent_Return::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .SM_Challenge_Rent_Info data = 2;
inline int SM_Challenge_Rent_Return::data_size() const {
  return data_.size();
}
inline void SM_Challenge_Rent_Return::clear_data() {
  data_.Clear();
}
inline const ::SM_Challenge_Rent_Info& SM_Challenge_Rent_Return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Challenge_Rent_Info* SM_Challenge_Rent_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Challenge_Rent_Info* SM_Challenge_Rent_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Rent_Info >&
SM_Challenge_Rent_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Rent_Info >*
SM_Challenge_Rent_Return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_Challenge_Rent_Info

// required int64 gangid = 1;
inline bool SM_Challenge_Rent_Info::has_gangid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_gangid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Rent_Info::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Rent_Info::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 SM_Challenge_Rent_Info::gangid() const {
  return gangid_;
}
inline void SM_Challenge_Rent_Info::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
}

// optional int32 roleid = 2;
inline bool SM_Challenge_Rent_Info::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Challenge_Rent_Info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Challenge_Rent_Info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Challenge_Rent_Info::roleid() const {
  return roleid_;
}
inline void SM_Challenge_Rent_Info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int64 gmid = 3;
inline bool SM_Challenge_Rent_Info::has_gmid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_gmid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Challenge_Rent_Info::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Challenge_Rent_Info::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 SM_Challenge_Rent_Info::gmid() const {
  return gmid_;
}
inline void SM_Challenge_Rent_Info::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 level = 4;
inline bool SM_Challenge_Rent_Info::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Challenge_Rent_Info::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Challenge_Rent_Info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SM_Challenge_Rent_Info::level() const {
  return level_;
}
inline void SM_Challenge_Rent_Info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 evolve = 5;
inline bool SM_Challenge_Rent_Info::has_evolve() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_evolve() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_Challenge_Rent_Info::clear_has_evolve() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_Challenge_Rent_Info::clear_evolve() {
  evolve_ = 0;
  clear_has_evolve();
}
inline ::google::protobuf::int32 SM_Challenge_Rent_Info::evolve() const {
  return evolve_;
}
inline void SM_Challenge_Rent_Info::set_evolve(::google::protobuf::int32 value) {
  set_has_evolve();
  evolve_ = value;
}

// optional int32 petid = 6;
inline bool SM_Challenge_Rent_Info::has_petid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_petid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_Challenge_Rent_Info::clear_has_petid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_Challenge_Rent_Info::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 SM_Challenge_Rent_Info::petid() const {
  return petid_;
}
inline void SM_Challenge_Rent_Info::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional string ownername = 7;
inline bool SM_Challenge_Rent_Info::has_ownername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_ownername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_Challenge_Rent_Info::clear_has_ownername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_Challenge_Rent_Info::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& SM_Challenge_Rent_Info::ownername() const {
  return *ownername_;
}
inline void SM_Challenge_Rent_Info::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void SM_Challenge_Rent_Info::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void SM_Challenge_Rent_Info::set_ownername(const char* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Challenge_Rent_Info::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* SM_Challenge_Rent_Info::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Challenge_Rent_Info::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 renttimes = 8;
inline bool SM_Challenge_Rent_Info::has_renttimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_Challenge_Rent_Info::set_has_renttimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_Challenge_Rent_Info::clear_has_renttimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_Challenge_Rent_Info::clear_renttimes() {
  renttimes_ = 0;
  clear_has_renttimes();
}
inline ::google::protobuf::int32 SM_Challenge_Rent_Info::renttimes() const {
  return renttimes_;
}
inline void SM_Challenge_Rent_Info::set_renttimes(::google::protobuf::int32 value) {
  set_has_renttimes();
  renttimes_ = value;
}

// -------------------------------------------------------------------

// SM_Challenge_Battle_Entry

// required int32 roleid = 1;
inline bool SM_Challenge_Battle_Entry::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Battle_Entry::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Battle_Entry::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Battle_Entry::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Challenge_Battle_Entry::roleid() const {
  return roleid_;
}
inline void SM_Challenge_Battle_Entry::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 index = 2;
inline bool SM_Challenge_Battle_Entry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Challenge_Battle_Entry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Challenge_Battle_Entry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Challenge_Battle_Entry::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SM_Challenge_Battle_Entry::index() const {
  return index_;
}
inline void SM_Challenge_Battle_Entry::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 battleid = 3;
inline bool SM_Challenge_Battle_Entry::has_battleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Challenge_Battle_Entry::set_has_battleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Challenge_Battle_Entry::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Challenge_Battle_Entry::clear_battleid() {
  battleid_ = 0;
  clear_has_battleid();
}
inline ::google::protobuf::int32 SM_Challenge_Battle_Entry::battleid() const {
  return battleid_;
}
inline void SM_Challenge_Battle_Entry::set_battleid(::google::protobuf::int32 value) {
  set_has_battleid();
  battleid_ = value;
}

// -------------------------------------------------------------------

// SM_Challenge_Battle_Return

// required int32 count = 1;
inline bool SM_Challenge_Battle_Return::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Challenge_Battle_Return::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Challenge_Battle_Return::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Challenge_Battle_Return::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SM_Challenge_Battle_Return::count() const {
  return count_;
}
inline void SM_Challenge_Battle_Return::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .SM_Challenge_Battle_Entry data = 5;
inline int SM_Challenge_Battle_Return::data_size() const {
  return data_.size();
}
inline void SM_Challenge_Battle_Return::clear_data() {
  data_.Clear();
}
inline const ::SM_Challenge_Battle_Entry& SM_Challenge_Battle_Return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Challenge_Battle_Entry* SM_Challenge_Battle_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Challenge_Battle_Entry* SM_Challenge_Battle_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Battle_Entry >&
SM_Challenge_Battle_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Challenge_Battle_Entry >*
SM_Challenge_Battle_Return::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fChallenge_2etxt__INCLUDED
