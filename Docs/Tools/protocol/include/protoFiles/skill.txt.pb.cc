// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skill.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Skill_Info_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Skill_Info_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Player_Skill_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Player_Skill_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Skill_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Skill_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SkillUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SkillUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SkillUpdate_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SkillUpdate_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_skill_2etxt() {
  protobuf_AddDesc_skill_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "skill.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Skill_Info_return_descriptor_ = file->message_type(0);
  static const int GM_Skill_Info_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Skill_Info_return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Skill_Info_return, playerskillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Skill_Info_return, petskillinfo_),
  };
  GM_Skill_Info_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Skill_Info_return_descriptor_,
      GM_Skill_Info_return::default_instance_,
      GM_Skill_Info_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Skill_Info_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Skill_Info_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Skill_Info_return));
  GM_Player_Skill_Info_descriptor_ = file->message_type(1);
  static const int GM_Player_Skill_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Skill_Info, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Skill_Info, skilllevel_),
  };
  GM_Player_Skill_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Player_Skill_Info_descriptor_,
      GM_Player_Skill_Info::default_instance_,
      GM_Player_Skill_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Skill_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Player_Skill_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Player_Skill_Info));
  GM_Pet_Skill_Info_descriptor_ = file->message_type(2);
  static const int GM_Pet_Skill_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Skill_Info, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Skill_Info, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Skill_Info, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Skill_Info, isactive_),
  };
  GM_Pet_Skill_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Skill_Info_descriptor_,
      GM_Pet_Skill_Info::default_instance_,
      GM_Pet_Skill_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Skill_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Skill_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Skill_Info));
  GM_SkillUpdate_descriptor_ = file->message_type(3);
  static const int GM_SkillUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate, skillid_),
  };
  GM_SkillUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SkillUpdate_descriptor_,
      GM_SkillUpdate::default_instance_,
      GM_SkillUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SkillUpdate));
  GM_SkillUpdate_Return_descriptor_ = file->message_type(4);
  static const int GM_SkillUpdate_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate_Return, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate_Return, skilllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate_Return, skilltype_),
  };
  GM_SkillUpdate_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SkillUpdate_Return_descriptor_,
      GM_SkillUpdate_Return::default_instance_,
      GM_SkillUpdate_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SkillUpdate_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SkillUpdate_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_skill_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Skill_Info_return_descriptor_, &GM_Skill_Info_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Player_Skill_Info_descriptor_, &GM_Player_Skill_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Skill_Info_descriptor_, &GM_Pet_Skill_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SkillUpdate_descriptor_, &GM_SkillUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SkillUpdate_Return_descriptor_, &GM_SkillUpdate_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_skill_2etxt() {
  delete GM_Skill_Info_return::default_instance_;
  delete GM_Skill_Info_return_reflection_;
  delete GM_Player_Skill_Info::default_instance_;
  delete GM_Player_Skill_Info_reflection_;
  delete GM_Pet_Skill_Info::default_instance_;
  delete GM_Pet_Skill_Info_reflection_;
  delete GM_SkillUpdate::default_instance_;
  delete GM_SkillUpdate_reflection_;
  delete GM_SkillUpdate_Return::default_instance_;
  delete GM_SkillUpdate_Return_reflection_;
}

void protobuf_AddDesc_skill_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tskill.txt\"\200\001\n\024GM_Skill_Info_return\022\016\n\006"
    "result\030\001 \002(\005\022.\n\017playerskillinfo\030\002 \003(\0132\025."
    "GM_Player_Skill_Info\022(\n\014petskillinfo\030\003 \003"
    "(\0132\022.GM_Pet_Skill_Info\";\n\024GM_Player_Skil"
    "l_Info\022\017\n\007skillID\030\001 \002(\005\022\022\n\nskilllevel\030\002 "
    "\001(\005\"Y\n\021GM_Pet_Skill_Info\022\r\n\005petID\030\001 \002(\003\022"
    "\017\n\007skillID\030\002 \001(\005\022\022\n\nskilllevel\030\003 \001(\005\022\020\n\010"
    "isActive\030\004 \001(\005\"!\n\016GM_SkillUpdate\022\017\n\007skil"
    "lid\030\001 \002(\005\"]\n\025GM_SkillUpdate_Return\022\016\n\006re"
    "sult\030\001 \002(\005\022\017\n\007skillid\030\002 \001(\005\022\020\n\010skilllvl\030"
    "\003 \001(\005\022\021\n\tskillType\030\004 \001(\005", 424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "skill.txt", &protobuf_RegisterTypes);
  GM_Skill_Info_return::default_instance_ = new GM_Skill_Info_return();
  GM_Player_Skill_Info::default_instance_ = new GM_Player_Skill_Info();
  GM_Pet_Skill_Info::default_instance_ = new GM_Pet_Skill_Info();
  GM_SkillUpdate::default_instance_ = new GM_SkillUpdate();
  GM_SkillUpdate_Return::default_instance_ = new GM_SkillUpdate_Return();
  GM_Skill_Info_return::default_instance_->InitAsDefaultInstance();
  GM_Player_Skill_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Skill_Info::default_instance_->InitAsDefaultInstance();
  GM_SkillUpdate::default_instance_->InitAsDefaultInstance();
  GM_SkillUpdate_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skill_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skill_2etxt {
  StaticDescriptorInitializer_skill_2etxt() {
    protobuf_AddDesc_skill_2etxt();
  }
} static_descriptor_initializer_skill_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Skill_Info_return::kResultFieldNumber;
const int GM_Skill_Info_return::kPlayerskillinfoFieldNumber;
const int GM_Skill_Info_return::kPetskillinfoFieldNumber;
#endif  // !_MSC_VER

GM_Skill_Info_return::GM_Skill_Info_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Skill_Info_return::InitAsDefaultInstance() {
}

GM_Skill_Info_return::GM_Skill_Info_return(const GM_Skill_Info_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Skill_Info_return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Skill_Info_return::~GM_Skill_Info_return() {
  SharedDtor();
}

void GM_Skill_Info_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Skill_Info_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Skill_Info_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Skill_Info_return_descriptor_;
}

const GM_Skill_Info_return& GM_Skill_Info_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2etxt();
  return *default_instance_;
}

GM_Skill_Info_return* GM_Skill_Info_return::default_instance_ = NULL;

GM_Skill_Info_return* GM_Skill_Info_return::New() const {
  return new GM_Skill_Info_return;
}

void GM_Skill_Info_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  playerskillinfo_.Clear();
  petskillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Skill_Info_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerskillinfo;
        break;
      }

      // repeated .GM_Player_Skill_Info playerskillinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerskillinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerskillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerskillinfo;
        if (input->ExpectTag(26)) goto parse_petskillinfo;
        break;
      }

      // repeated .GM_Pet_Skill_Info petskillinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petskillinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petskillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_petskillinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Skill_Info_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_Player_Skill_Info playerskillinfo = 2;
  for (int i = 0; i < this->playerskillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerskillinfo(i), output);
  }

  // repeated .GM_Pet_Skill_Info petskillinfo = 3;
  for (int i = 0; i < this->petskillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->petskillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Skill_Info_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_Player_Skill_Info playerskillinfo = 2;
  for (int i = 0; i < this->playerskillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerskillinfo(i), target);
  }

  // repeated .GM_Pet_Skill_Info petskillinfo = 3;
  for (int i = 0; i < this->petskillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->petskillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Skill_Info_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_Player_Skill_Info playerskillinfo = 2;
  total_size += 1 * this->playerskillinfo_size();
  for (int i = 0; i < this->playerskillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerskillinfo(i));
  }

  // repeated .GM_Pet_Skill_Info petskillinfo = 3;
  total_size += 1 * this->petskillinfo_size();
  for (int i = 0; i < this->petskillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petskillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Skill_Info_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Skill_Info_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Skill_Info_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Skill_Info_return::MergeFrom(const GM_Skill_Info_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerskillinfo_.MergeFrom(from.playerskillinfo_);
  petskillinfo_.MergeFrom(from.petskillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Skill_Info_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Skill_Info_return::CopyFrom(const GM_Skill_Info_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Skill_Info_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerskillinfo_size(); i++) {
    if (!this->playerskillinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < petskillinfo_size(); i++) {
    if (!this->petskillinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Skill_Info_return::Swap(GM_Skill_Info_return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    playerskillinfo_.Swap(&other->playerskillinfo_);
    petskillinfo_.Swap(&other->petskillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Skill_Info_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Skill_Info_return_descriptor_;
  metadata.reflection = GM_Skill_Info_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Player_Skill_Info::kSkillIDFieldNumber;
const int GM_Player_Skill_Info::kSkilllevelFieldNumber;
#endif  // !_MSC_VER

GM_Player_Skill_Info::GM_Player_Skill_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Player_Skill_Info::InitAsDefaultInstance() {
}

GM_Player_Skill_Info::GM_Player_Skill_Info(const GM_Player_Skill_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Player_Skill_Info::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  skilllevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Player_Skill_Info::~GM_Player_Skill_Info() {
  SharedDtor();
}

void GM_Player_Skill_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Player_Skill_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Player_Skill_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Player_Skill_Info_descriptor_;
}

const GM_Player_Skill_Info& GM_Player_Skill_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2etxt();
  return *default_instance_;
}

GM_Player_Skill_Info* GM_Player_Skill_Info::default_instance_ = NULL;

GM_Player_Skill_Info* GM_Player_Skill_Info::New() const {
  return new GM_Player_Skill_Info;
}

void GM_Player_Skill_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    skilllevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Player_Skill_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skilllevel;
        break;
      }

      // optional int32 skilllevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Player_Skill_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 skilllevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Player_Skill_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 skilllevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Player_Skill_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skilllevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Player_Skill_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Player_Skill_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Player_Skill_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Player_Skill_Info::MergeFrom(const GM_Player_Skill_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Player_Skill_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Player_Skill_Info::CopyFrom(const GM_Player_Skill_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Player_Skill_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Player_Skill_Info::Swap(GM_Player_Skill_Info* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Player_Skill_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Player_Skill_Info_descriptor_;
  metadata.reflection = GM_Player_Skill_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Skill_Info::kPetIDFieldNumber;
const int GM_Pet_Skill_Info::kSkillIDFieldNumber;
const int GM_Pet_Skill_Info::kSkilllevelFieldNumber;
const int GM_Pet_Skill_Info::kIsActiveFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Skill_Info::GM_Pet_Skill_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Skill_Info::InitAsDefaultInstance() {
}

GM_Pet_Skill_Info::GM_Pet_Skill_Info(const GM_Pet_Skill_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Skill_Info::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  skillid_ = 0;
  skilllevel_ = 0;
  isactive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Skill_Info::~GM_Pet_Skill_Info() {
  SharedDtor();
}

void GM_Pet_Skill_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Skill_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Skill_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Skill_Info_descriptor_;
}

const GM_Pet_Skill_Info& GM_Pet_Skill_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2etxt();
  return *default_instance_;
}

GM_Pet_Skill_Info* GM_Pet_Skill_Info::default_instance_ = NULL;

GM_Pet_Skill_Info* GM_Pet_Skill_Info::New() const {
  return new GM_Pet_Skill_Info;
}

void GM_Pet_Skill_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = GOOGLE_LONGLONG(0);
    skillid_ = 0;
    skilllevel_ = 0;
    isactive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Skill_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 petID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional int32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilllevel;
        break;
      }

      // optional int32 skilllevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isActive;
        break;
      }

      // optional int32 isActive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Skill_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 petID = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional int32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 skilllevel = 3;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skilllevel(), output);
  }

  // optional int32 isActive = 4;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Skill_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 petID = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional int32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 skilllevel = 3;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skilllevel(), target);
  }

  // optional int32 isActive = 4;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Skill_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 petID = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skilllevel = 3;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional int32 isActive = 4;
    if (has_isactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isactive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Skill_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Skill_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Skill_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Skill_Info::MergeFrom(const GM_Pet_Skill_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Skill_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Skill_Info::CopyFrom(const GM_Pet_Skill_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Skill_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Skill_Info::Swap(GM_Pet_Skill_Info* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(isactive_, other->isactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Skill_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Skill_Info_descriptor_;
  metadata.reflection = GM_Pet_Skill_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SkillUpdate::kSkillidFieldNumber;
#endif  // !_MSC_VER

GM_SkillUpdate::GM_SkillUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SkillUpdate::InitAsDefaultInstance() {
}

GM_SkillUpdate::GM_SkillUpdate(const GM_SkillUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SkillUpdate::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SkillUpdate::~GM_SkillUpdate() {
  SharedDtor();
}

void GM_SkillUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SkillUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SkillUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SkillUpdate_descriptor_;
}

const GM_SkillUpdate& GM_SkillUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2etxt();
  return *default_instance_;
}

GM_SkillUpdate* GM_SkillUpdate::default_instance_ = NULL;

GM_SkillUpdate* GM_SkillUpdate::New() const {
  return new GM_SkillUpdate;
}

void GM_SkillUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SkillUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SkillUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SkillUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SkillUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SkillUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SkillUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SkillUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SkillUpdate::MergeFrom(const GM_SkillUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SkillUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SkillUpdate::CopyFrom(const GM_SkillUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SkillUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SkillUpdate::Swap(GM_SkillUpdate* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SkillUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SkillUpdate_descriptor_;
  metadata.reflection = GM_SkillUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SkillUpdate_Return::kResultFieldNumber;
const int GM_SkillUpdate_Return::kSkillidFieldNumber;
const int GM_SkillUpdate_Return::kSkilllvlFieldNumber;
const int GM_SkillUpdate_Return::kSkillTypeFieldNumber;
#endif  // !_MSC_VER

GM_SkillUpdate_Return::GM_SkillUpdate_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SkillUpdate_Return::InitAsDefaultInstance() {
}

GM_SkillUpdate_Return::GM_SkillUpdate_Return(const GM_SkillUpdate_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SkillUpdate_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  skillid_ = 0;
  skilllvl_ = 0;
  skilltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SkillUpdate_Return::~GM_SkillUpdate_Return() {
  SharedDtor();
}

void GM_SkillUpdate_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SkillUpdate_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SkillUpdate_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SkillUpdate_Return_descriptor_;
}

const GM_SkillUpdate_Return& GM_SkillUpdate_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2etxt();
  return *default_instance_;
}

GM_SkillUpdate_Return* GM_SkillUpdate_Return::default_instance_ = NULL;

GM_SkillUpdate_Return* GM_SkillUpdate_Return::New() const {
  return new GM_SkillUpdate_Return;
}

void GM_SkillUpdate_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    skillid_ = 0;
    skilllvl_ = 0;
    skilltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SkillUpdate_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilllvl;
        break;
      }

      // optional int32 skilllvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllvl_)));
          set_has_skilllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillType;
        break;
      }

      // optional int32 skillType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));
          set_has_skilltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SkillUpdate_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 skilllvl = 3;
  if (has_skilllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skilllvl(), output);
  }

  // optional int32 skillType = 4;
  if (has_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skilltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SkillUpdate_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 skilllvl = 3;
  if (has_skilllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skilllvl(), target);
  }

  // optional int32 skillType = 4;
  if (has_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skilltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SkillUpdate_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skilllvl = 3;
    if (has_skilllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllvl());
    }

    // optional int32 skillType = 4;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SkillUpdate_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SkillUpdate_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SkillUpdate_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SkillUpdate_Return::MergeFrom(const GM_SkillUpdate_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllvl()) {
      set_skilllvl(from.skilllvl());
    }
    if (from.has_skilltype()) {
      set_skilltype(from.skilltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SkillUpdate_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SkillUpdate_Return::CopyFrom(const GM_SkillUpdate_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SkillUpdate_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_SkillUpdate_Return::Swap(GM_SkillUpdate_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllvl_, other->skilllvl_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SkillUpdate_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SkillUpdate_Return_descriptor_;
  metadata.reflection = GM_SkillUpdate_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
