// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fightrealtime.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fightrealtime.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMRealTimeOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRealTimeTimeZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeTimeZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRealTimeStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRealTimeStoreObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeStoreObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRealTimeStoreReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeStoreReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRealTimeStoreBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeStoreBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMRealTimeStoreBuyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMRealTimeStoreBuyResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fightrealtime_2etxt() {
  protobuf_AddDesc_fightrealtime_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fightrealtime.txt");
  GOOGLE_CHECK(file != NULL);
  GMRealTimeOpen_descriptor_ = file->message_type(0);
  static const int GMRealTimeOpen_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeOpen, fighttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeOpen, fighttotaltimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeOpen, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeOpen, matchtime_),
  };
  GMRealTimeOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeOpen_descriptor_,
      GMRealTimeOpen::default_instance_,
      GMRealTimeOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeOpen));
  GMRealTimeTimeZone_descriptor_ = file->message_type(1);
  static const int GMRealTimeTimeZone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeTimeZone, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeTimeZone, end_),
  };
  GMRealTimeTimeZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeTimeZone_descriptor_,
      GMRealTimeTimeZone::default_instance_,
      GMRealTimeTimeZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeTimeZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeTimeZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeTimeZone));
  GMRealTimeStore_descriptor_ = file->message_type(2);
  static const int GMRealTimeStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStore, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStore, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStore, resetcost_),
  };
  GMRealTimeStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeStore_descriptor_,
      GMRealTimeStore::default_instance_,
      GMRealTimeStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeStore));
  GMRealTimeStoreObject_descriptor_ = file->message_type(3);
  static const int GMRealTimeStoreObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreObject, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreObject, remaindercount_),
  };
  GMRealTimeStoreObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeStoreObject_descriptor_,
      GMRealTimeStoreObject::default_instance_,
      GMRealTimeStoreObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeStoreObject));
  GMRealTimeStoreReset_descriptor_ = file->message_type(4);
  static const int GMRealTimeStoreReset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreReset, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreReset, proof_),
  };
  GMRealTimeStoreReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeStoreReset_descriptor_,
      GMRealTimeStoreReset::default_instance_,
      GMRealTimeStoreReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeStoreReset));
  GMRealTimeStoreBuy_descriptor_ = file->message_type(5);
  static const int GMRealTimeStoreBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuy, objectid_),
  };
  GMRealTimeStoreBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeStoreBuy_descriptor_,
      GMRealTimeStoreBuy::default_instance_,
      GMRealTimeStoreBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeStoreBuy));
  GMRealTimeStoreBuyResult_descriptor_ = file->message_type(6);
  static const int GMRealTimeStoreBuyResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuyResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuyResult, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuyResult, proof_),
  };
  GMRealTimeStoreBuyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMRealTimeStoreBuyResult_descriptor_,
      GMRealTimeStoreBuyResult::default_instance_,
      GMRealTimeStoreBuyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMRealTimeStoreBuyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMRealTimeStoreBuyResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fightrealtime_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeOpen_descriptor_, &GMRealTimeOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeTimeZone_descriptor_, &GMRealTimeTimeZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeStore_descriptor_, &GMRealTimeStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeStoreObject_descriptor_, &GMRealTimeStoreObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeStoreReset_descriptor_, &GMRealTimeStoreReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeStoreBuy_descriptor_, &GMRealTimeStoreBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMRealTimeStoreBuyResult_descriptor_, &GMRealTimeStoreBuyResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fightrealtime_2etxt() {
  delete GMRealTimeOpen::default_instance_;
  delete GMRealTimeOpen_reflection_;
  delete GMRealTimeTimeZone::default_instance_;
  delete GMRealTimeTimeZone_reflection_;
  delete GMRealTimeStore::default_instance_;
  delete GMRealTimeStore_reflection_;
  delete GMRealTimeStoreObject::default_instance_;
  delete GMRealTimeStoreObject_reflection_;
  delete GMRealTimeStoreReset::default_instance_;
  delete GMRealTimeStoreReset_reflection_;
  delete GMRealTimeStoreBuy::default_instance_;
  delete GMRealTimeStoreBuy_reflection_;
  delete GMRealTimeStoreBuyResult::default_instance_;
  delete GMRealTimeStoreBuyResult_reflection_;
}

void protobuf_AddDesc_fightrealtime_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021fightrealtime.txt\"`\n\016GMRealTimeOpen\022\022\n"
    "\nfighttimes\030\001 \002(\005\022\027\n\017fighttotaltimes\030\002 \001"
    "(\005\022\016\n\006copyid\030\003 \001(\005\022\021\n\tmatchtime\030\004 \001(\005\"0\n"
    "\022GMRealTimeTimeZone\022\r\n\005start\030\001 \002(\005\022\013\n\003en"
    "d\030\002 \002(\005\"Y\n\017GMRealTimeStore\022\r\n\005proof\030\001 \002("
    "\005\022$\n\004data\030\002 \003(\0132\026.GMRealTimeStoreObject\022"
    "\021\n\tresetcost\030\003 \001(\005\"A\n\025GMRealTimeStoreObj"
    "ect\022\020\n\010objectid\030\001 \002(\005\022\026\n\016remaindercount\030"
    "\002 \002(\005\"5\n\024GMRealTimeStoreReset\022\016\n\006result\030"
    "\001 \002(\005\022\r\n\005proof\030\002 \002(\005\"&\n\022GMRealTimeStoreB"
    "uy\022\020\n\010objectid\030\001 \002(\005\"K\n\030GMRealTimeStoreB"
    "uyResult\022\016\n\006result\030\001 \002(\005\022\020\n\010objectid\030\002 \002"
    "(\005\022\r\n\005proof\030\003 \002(\005", 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fightrealtime.txt", &protobuf_RegisterTypes);
  GMRealTimeOpen::default_instance_ = new GMRealTimeOpen();
  GMRealTimeTimeZone::default_instance_ = new GMRealTimeTimeZone();
  GMRealTimeStore::default_instance_ = new GMRealTimeStore();
  GMRealTimeStoreObject::default_instance_ = new GMRealTimeStoreObject();
  GMRealTimeStoreReset::default_instance_ = new GMRealTimeStoreReset();
  GMRealTimeStoreBuy::default_instance_ = new GMRealTimeStoreBuy();
  GMRealTimeStoreBuyResult::default_instance_ = new GMRealTimeStoreBuyResult();
  GMRealTimeOpen::default_instance_->InitAsDefaultInstance();
  GMRealTimeTimeZone::default_instance_->InitAsDefaultInstance();
  GMRealTimeStore::default_instance_->InitAsDefaultInstance();
  GMRealTimeStoreObject::default_instance_->InitAsDefaultInstance();
  GMRealTimeStoreReset::default_instance_->InitAsDefaultInstance();
  GMRealTimeStoreBuy::default_instance_->InitAsDefaultInstance();
  GMRealTimeStoreBuyResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fightrealtime_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fightrealtime_2etxt {
  StaticDescriptorInitializer_fightrealtime_2etxt() {
    protobuf_AddDesc_fightrealtime_2etxt();
  }
} static_descriptor_initializer_fightrealtime_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeOpen::kFighttimesFieldNumber;
const int GMRealTimeOpen::kFighttotaltimesFieldNumber;
const int GMRealTimeOpen::kCopyidFieldNumber;
const int GMRealTimeOpen::kMatchtimeFieldNumber;
#endif  // !_MSC_VER

GMRealTimeOpen::GMRealTimeOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeOpen::InitAsDefaultInstance() {
}

GMRealTimeOpen::GMRealTimeOpen(const GMRealTimeOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeOpen::SharedCtor() {
  _cached_size_ = 0;
  fighttimes_ = 0;
  fighttotaltimes_ = 0;
  copyid_ = 0;
  matchtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeOpen::~GMRealTimeOpen() {
  SharedDtor();
}

void GMRealTimeOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeOpen_descriptor_;
}

const GMRealTimeOpen& GMRealTimeOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeOpen* GMRealTimeOpen::default_instance_ = NULL;

GMRealTimeOpen* GMRealTimeOpen::New() const {
  return new GMRealTimeOpen;
}

void GMRealTimeOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fighttimes_ = 0;
    fighttotaltimes_ = 0;
    copyid_ = 0;
    matchtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fighttimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttimes_)));
          set_has_fighttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fighttotaltimes;
        break;
      }

      // optional int32 fighttotaltimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighttotaltimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttotaltimes_)));
          set_has_fighttotaltimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copyid;
        break;
      }

      // optional int32 copyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchtime;
        break;
      }

      // optional int32 matchtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtime_)));
          set_has_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fighttimes = 1;
  if (has_fighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fighttimes(), output);
  }

  // optional int32 fighttotaltimes = 2;
  if (has_fighttotaltimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fighttotaltimes(), output);
  }

  // optional int32 copyid = 3;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->copyid(), output);
  }

  // optional int32 matchtime = 4;
  if (has_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matchtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fighttimes = 1;
  if (has_fighttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fighttimes(), target);
  }

  // optional int32 fighttotaltimes = 2;
  if (has_fighttotaltimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fighttotaltimes(), target);
  }

  // optional int32 copyid = 3;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->copyid(), target);
  }

  // optional int32 matchtime = 4;
  if (has_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matchtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fighttimes = 1;
    if (has_fighttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttimes());
    }

    // optional int32 fighttotaltimes = 2;
    if (has_fighttotaltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttotaltimes());
    }

    // optional int32 copyid = 3;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // optional int32 matchtime = 4;
    if (has_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeOpen::MergeFrom(const GMRealTimeOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fighttimes()) {
      set_fighttimes(from.fighttimes());
    }
    if (from.has_fighttotaltimes()) {
      set_fighttotaltimes(from.fighttotaltimes());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_matchtime()) {
      set_matchtime(from.matchtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeOpen::CopyFrom(const GMRealTimeOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMRealTimeOpen::Swap(GMRealTimeOpen* other) {
  if (other != this) {
    std::swap(fighttimes_, other->fighttimes_);
    std::swap(fighttotaltimes_, other->fighttotaltimes_);
    std::swap(copyid_, other->copyid_);
    std::swap(matchtime_, other->matchtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeOpen_descriptor_;
  metadata.reflection = GMRealTimeOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeTimeZone::kStartFieldNumber;
const int GMRealTimeTimeZone::kEndFieldNumber;
#endif  // !_MSC_VER

GMRealTimeTimeZone::GMRealTimeTimeZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeTimeZone::InitAsDefaultInstance() {
}

GMRealTimeTimeZone::GMRealTimeTimeZone(const GMRealTimeTimeZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeTimeZone::SharedCtor() {
  _cached_size_ = 0;
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeTimeZone::~GMRealTimeTimeZone() {
  SharedDtor();
}

void GMRealTimeTimeZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeTimeZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeTimeZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeTimeZone_descriptor_;
}

const GMRealTimeTimeZone& GMRealTimeTimeZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeTimeZone* GMRealTimeTimeZone::default_instance_ = NULL;

GMRealTimeTimeZone* GMRealTimeTimeZone::New() const {
  return new GMRealTimeTimeZone;
}

void GMRealTimeTimeZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeTimeZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeTimeZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeTimeZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeTimeZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // required int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeTimeZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeTimeZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeTimeZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeTimeZone::MergeFrom(const GMRealTimeTimeZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeTimeZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeTimeZone::CopyFrom(const GMRealTimeTimeZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeTimeZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMRealTimeTimeZone::Swap(GMRealTimeTimeZone* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeTimeZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeTimeZone_descriptor_;
  metadata.reflection = GMRealTimeTimeZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeStore::kProofFieldNumber;
const int GMRealTimeStore::kDataFieldNumber;
const int GMRealTimeStore::kResetcostFieldNumber;
#endif  // !_MSC_VER

GMRealTimeStore::GMRealTimeStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeStore::InitAsDefaultInstance() {
}

GMRealTimeStore::GMRealTimeStore(const GMRealTimeStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeStore::SharedCtor() {
  _cached_size_ = 0;
  proof_ = 0;
  resetcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeStore::~GMRealTimeStore() {
  SharedDtor();
}

void GMRealTimeStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeStore_descriptor_;
}

const GMRealTimeStore& GMRealTimeStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeStore* GMRealTimeStore::default_instance_ = NULL;

GMRealTimeStore* GMRealTimeStore::New() const {
  return new GMRealTimeStore;
}

void GMRealTimeStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proof_ = 0;
    resetcost_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 proof = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GMRealTimeStoreObject data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_resetcost;
        break;
      }

      // optional int32 resetcost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetcost_)));
          set_has_resetcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 proof = 1;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proof(), output);
  }

  // repeated .GMRealTimeStoreObject data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional int32 resetcost = 3;
  if (has_resetcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resetcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 proof = 1;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proof(), target);
  }

  // repeated .GMRealTimeStoreObject data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // optional int32 resetcost = 3;
  if (has_resetcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resetcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 proof = 1;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

    // optional int32 resetcost = 3;
    if (has_resetcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetcost());
    }

  }
  // repeated .GMRealTimeStoreObject data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeStore::MergeFrom(const GMRealTimeStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proof()) {
      set_proof(from.proof());
    }
    if (from.has_resetcost()) {
      set_resetcost(from.resetcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeStore::CopyFrom(const GMRealTimeStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GMRealTimeStore::Swap(GMRealTimeStore* other) {
  if (other != this) {
    std::swap(proof_, other->proof_);
    data_.Swap(&other->data_);
    std::swap(resetcost_, other->resetcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeStore_descriptor_;
  metadata.reflection = GMRealTimeStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeStoreObject::kObjectidFieldNumber;
const int GMRealTimeStoreObject::kRemaindercountFieldNumber;
#endif  // !_MSC_VER

GMRealTimeStoreObject::GMRealTimeStoreObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeStoreObject::InitAsDefaultInstance() {
}

GMRealTimeStoreObject::GMRealTimeStoreObject(const GMRealTimeStoreObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeStoreObject::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  remaindercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeStoreObject::~GMRealTimeStoreObject() {
  SharedDtor();
}

void GMRealTimeStoreObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeStoreObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeStoreObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeStoreObject_descriptor_;
}

const GMRealTimeStoreObject& GMRealTimeStoreObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeStoreObject* GMRealTimeStoreObject::default_instance_ = NULL;

GMRealTimeStoreObject* GMRealTimeStoreObject::New() const {
  return new GMRealTimeStoreObject;
}

void GMRealTimeStoreObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    remaindercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeStoreObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remaindercount;
        break;
      }

      // required int32 remaindercount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaindercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindercount_)));
          set_has_remaindercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeStoreObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required int32 remaindercount = 2;
  if (has_remaindercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaindercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeStoreObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required int32 remaindercount = 2;
  if (has_remaindercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaindercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeStoreObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 remaindercount = 2;
    if (has_remaindercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeStoreObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeStoreObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeStoreObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeStoreObject::MergeFrom(const GMRealTimeStoreObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_remaindercount()) {
      set_remaindercount(from.remaindercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeStoreObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeStoreObject::CopyFrom(const GMRealTimeStoreObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeStoreObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMRealTimeStoreObject::Swap(GMRealTimeStoreObject* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(remaindercount_, other->remaindercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeStoreObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeStoreObject_descriptor_;
  metadata.reflection = GMRealTimeStoreObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeStoreReset::kResultFieldNumber;
const int GMRealTimeStoreReset::kProofFieldNumber;
#endif  // !_MSC_VER

GMRealTimeStoreReset::GMRealTimeStoreReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeStoreReset::InitAsDefaultInstance() {
}

GMRealTimeStoreReset::GMRealTimeStoreReset(const GMRealTimeStoreReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeStoreReset::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  proof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeStoreReset::~GMRealTimeStoreReset() {
  SharedDtor();
}

void GMRealTimeStoreReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeStoreReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeStoreReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeStoreReset_descriptor_;
}

const GMRealTimeStoreReset& GMRealTimeStoreReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeStoreReset* GMRealTimeStoreReset::default_instance_ = NULL;

GMRealTimeStoreReset* GMRealTimeStoreReset::New() const {
  return new GMRealTimeStoreReset;
}

void GMRealTimeStoreReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    proof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeStoreReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proof;
        break;
      }

      // required int32 proof = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeStoreReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 proof = 2;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeStoreReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 proof = 2;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeStoreReset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 proof = 2;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeStoreReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeStoreReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeStoreReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeStoreReset::MergeFrom(const GMRealTimeStoreReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_proof()) {
      set_proof(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeStoreReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeStoreReset::CopyFrom(const GMRealTimeStoreReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeStoreReset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMRealTimeStoreReset::Swap(GMRealTimeStoreReset* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeStoreReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeStoreReset_descriptor_;
  metadata.reflection = GMRealTimeStoreReset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeStoreBuy::kObjectidFieldNumber;
#endif  // !_MSC_VER

GMRealTimeStoreBuy::GMRealTimeStoreBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeStoreBuy::InitAsDefaultInstance() {
}

GMRealTimeStoreBuy::GMRealTimeStoreBuy(const GMRealTimeStoreBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeStoreBuy::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeStoreBuy::~GMRealTimeStoreBuy() {
  SharedDtor();
}

void GMRealTimeStoreBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeStoreBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeStoreBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeStoreBuy_descriptor_;
}

const GMRealTimeStoreBuy& GMRealTimeStoreBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeStoreBuy* GMRealTimeStoreBuy::default_instance_ = NULL;

GMRealTimeStoreBuy* GMRealTimeStoreBuy::New() const {
  return new GMRealTimeStoreBuy;
}

void GMRealTimeStoreBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeStoreBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeStoreBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeStoreBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeStoreBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeStoreBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeStoreBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeStoreBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeStoreBuy::MergeFrom(const GMRealTimeStoreBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeStoreBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeStoreBuy::CopyFrom(const GMRealTimeStoreBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeStoreBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMRealTimeStoreBuy::Swap(GMRealTimeStoreBuy* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeStoreBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeStoreBuy_descriptor_;
  metadata.reflection = GMRealTimeStoreBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMRealTimeStoreBuyResult::kResultFieldNumber;
const int GMRealTimeStoreBuyResult::kObjectidFieldNumber;
const int GMRealTimeStoreBuyResult::kProofFieldNumber;
#endif  // !_MSC_VER

GMRealTimeStoreBuyResult::GMRealTimeStoreBuyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMRealTimeStoreBuyResult::InitAsDefaultInstance() {
}

GMRealTimeStoreBuyResult::GMRealTimeStoreBuyResult(const GMRealTimeStoreBuyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMRealTimeStoreBuyResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  objectid_ = 0;
  proof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMRealTimeStoreBuyResult::~GMRealTimeStoreBuyResult() {
  SharedDtor();
}

void GMRealTimeStoreBuyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMRealTimeStoreBuyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMRealTimeStoreBuyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMRealTimeStoreBuyResult_descriptor_;
}

const GMRealTimeStoreBuyResult& GMRealTimeStoreBuyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightrealtime_2etxt();
  return *default_instance_;
}

GMRealTimeStoreBuyResult* GMRealTimeStoreBuyResult::default_instance_ = NULL;

GMRealTimeStoreBuyResult* GMRealTimeStoreBuyResult::New() const {
  return new GMRealTimeStoreBuyResult;
}

void GMRealTimeStoreBuyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    objectid_ = 0;
    proof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMRealTimeStoreBuyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proof;
        break;
      }

      // required int32 proof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMRealTimeStoreBuyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // required int32 proof = 3;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMRealTimeStoreBuyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // required int32 proof = 3;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMRealTimeStoreBuyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 proof = 3;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMRealTimeStoreBuyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMRealTimeStoreBuyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMRealTimeStoreBuyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMRealTimeStoreBuyResult::MergeFrom(const GMRealTimeStoreBuyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_proof()) {
      set_proof(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMRealTimeStoreBuyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMRealTimeStoreBuyResult::CopyFrom(const GMRealTimeStoreBuyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMRealTimeStoreBuyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMRealTimeStoreBuyResult::Swap(GMRealTimeStoreBuyResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(objectid_, other->objectid_);
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMRealTimeStoreBuyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMRealTimeStoreBuyResult_descriptor_;
  metadata.reflection = GMRealTimeStoreBuyResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
