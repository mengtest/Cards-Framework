// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_systemset.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_systemset.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_SystemSet_cdkey_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_SystemSet_cdkey_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_SystemSet_cdkey_subdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_SystemSet_cdkey_subdata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_SystemSet_cdkey_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_SystemSet_cdkey_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_SystemSet_data_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_SystemSet_data_request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fsystemset_2etxt() {
  protobuf_AddDesc_SP_5fsystemset_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_systemset.txt");
  GOOGLE_CHECK(file != NULL);
  SM_SystemSet_cdkey_request_descriptor_ = file->message_type(0);
  static const int SM_SystemSet_cdkey_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_request, m_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_request, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_request, m_cdkey_),
  };
  SM_SystemSet_cdkey_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_SystemSet_cdkey_request_descriptor_,
      SM_SystemSet_cdkey_request::default_instance_,
      SM_SystemSet_cdkey_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_SystemSet_cdkey_request));
  SM_SystemSet_cdkey_subdata_descriptor_ = file->message_type(1);
  static const int SM_SystemSet_cdkey_subdata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_subdata, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_subdata, m_objectnum_),
  };
  SM_SystemSet_cdkey_subdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_SystemSet_cdkey_subdata_descriptor_,
      SM_SystemSet_cdkey_subdata::default_instance_,
      SM_SystemSet_cdkey_subdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_subdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_subdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_SystemSet_cdkey_subdata));
  SM_SystemSet_cdkey_return_descriptor_ = file->message_type(2);
  static const int SM_SystemSet_cdkey_return_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, m_cdkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, m_cdtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, m_name_),
  };
  SM_SystemSet_cdkey_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_SystemSet_cdkey_return_descriptor_,
      SM_SystemSet_cdkey_return::default_instance_,
      SM_SystemSet_cdkey_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_cdkey_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_SystemSet_cdkey_return));
  SM_SystemSet_data_request_descriptor_ = file->message_type(3);
  static const int SM_SystemSet_data_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_data_request, m_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_data_request, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_data_request, m_roleid_),
  };
  SM_SystemSet_data_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_SystemSet_data_request_descriptor_,
      SM_SystemSet_data_request::default_instance_,
      SM_SystemSet_data_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_data_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_SystemSet_data_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_SystemSet_data_request));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fsystemset_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_SystemSet_cdkey_request_descriptor_, &SM_SystemSet_cdkey_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_SystemSet_cdkey_subdata_descriptor_, &SM_SystemSet_cdkey_subdata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_SystemSet_cdkey_return_descriptor_, &SM_SystemSet_cdkey_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_SystemSet_data_request_descriptor_, &SM_SystemSet_data_request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fsystemset_2etxt() {
  delete SM_SystemSet_cdkey_request::default_instance_;
  delete SM_SystemSet_cdkey_request_reflection_;
  delete SM_SystemSet_cdkey_subdata::default_instance_;
  delete SM_SystemSet_cdkey_subdata_reflection_;
  delete SM_SystemSet_cdkey_return::default_instance_;
  delete SM_SystemSet_cdkey_return_reflection_;
  delete SM_SystemSet_data_request::default_instance_;
  delete SM_SystemSet_data_request_reflection_;
}

void protobuf_AddDesc_SP_5fsystemset_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SP_systemset.txt\"S\n\032SM_SystemSet_cdkey"
    "_request\022\022\n\nm_serverid\030\001 \002(\005\022\020\n\010m_roleid"
    "\030\002 \002(\005\022\017\n\007m_cdkey\030\003 \002(\t\"E\n\032SM_SystemSet_"
    "cdkey_subdata\022\022\n\nm_objectid\030\001 \002(\005\022\023\n\013m_o"
    "bjectnum\030\002 \002(\005\"r\n\031SM_SystemSet_cdkey_ret"
    "urn\022\020\n\010m_result\030\001 \002(\005\022\020\n\010m_typeid\030\002 \001(\005\022"
    "\017\n\007m_cdkey\030\003 \001(\t\022\020\n\010m_cdtype\030\004 \001(\005\022\016\n\006m_"
    "name\030\005 \001(\t\"V\n\031SM_SystemSet_data_request\022"
    "\022\n\nm_serverid\030\001 \002(\005\022\023\n\013m_accountid\030\002 \002(\005"
    "\022\020\n\010m_roleid\030\003 \002(\005", 378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_systemset.txt", &protobuf_RegisterTypes);
  SM_SystemSet_cdkey_request::default_instance_ = new SM_SystemSet_cdkey_request();
  SM_SystemSet_cdkey_subdata::default_instance_ = new SM_SystemSet_cdkey_subdata();
  SM_SystemSet_cdkey_return::default_instance_ = new SM_SystemSet_cdkey_return();
  SM_SystemSet_data_request::default_instance_ = new SM_SystemSet_data_request();
  SM_SystemSet_cdkey_request::default_instance_->InitAsDefaultInstance();
  SM_SystemSet_cdkey_subdata::default_instance_->InitAsDefaultInstance();
  SM_SystemSet_cdkey_return::default_instance_->InitAsDefaultInstance();
  SM_SystemSet_data_request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fsystemset_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fsystemset_2etxt {
  StaticDescriptorInitializer_SP_5fsystemset_2etxt() {
    protobuf_AddDesc_SP_5fsystemset_2etxt();
  }
} static_descriptor_initializer_SP_5fsystemset_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_SystemSet_cdkey_request::kMServeridFieldNumber;
const int SM_SystemSet_cdkey_request::kMRoleidFieldNumber;
const int SM_SystemSet_cdkey_request::kMCdkeyFieldNumber;
#endif  // !_MSC_VER

SM_SystemSet_cdkey_request::SM_SystemSet_cdkey_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_SystemSet_cdkey_request::InitAsDefaultInstance() {
}

SM_SystemSet_cdkey_request::SM_SystemSet_cdkey_request(const SM_SystemSet_cdkey_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_SystemSet_cdkey_request::SharedCtor() {
  _cached_size_ = 0;
  m_serverid_ = 0;
  m_roleid_ = 0;
  m_cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_SystemSet_cdkey_request::~SM_SystemSet_cdkey_request() {
  SharedDtor();
}

void SM_SystemSet_cdkey_request::SharedDtor() {
  if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_cdkey_;
  }
  if (this != default_instance_) {
  }
}

void SM_SystemSet_cdkey_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_SystemSet_cdkey_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_SystemSet_cdkey_request_descriptor_;
}

const SM_SystemSet_cdkey_request& SM_SystemSet_cdkey_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fsystemset_2etxt();
  return *default_instance_;
}

SM_SystemSet_cdkey_request* SM_SystemSet_cdkey_request::default_instance_ = NULL;

SM_SystemSet_cdkey_request* SM_SystemSet_cdkey_request::New() const {
  return new SM_SystemSet_cdkey_request;
}

void SM_SystemSet_cdkey_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_serverid_ = 0;
    m_roleid_ = 0;
    if (has_m_cdkey()) {
      if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
        m_cdkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_SystemSet_cdkey_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverid_)));
          set_has_m_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleid;
        break;
      }

      // required int32 m_roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_cdkey;
        break;
      }

      // required string m_cdkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cdkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_cdkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_cdkey().data(), this->m_cdkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_SystemSet_cdkey_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_serverid = 1;
  if (has_m_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_serverid(), output);
  }

  // required int32 m_roleid = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // required string m_cdkey = 3;
  if (has_m_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_cdkey().data(), this->m_cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_cdkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_SystemSet_cdkey_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_serverid = 1;
  if (has_m_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_serverid(), target);
  }

  // required int32 m_roleid = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // required string m_cdkey = 3;
  if (has_m_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_cdkey().data(), this->m_cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_cdkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_SystemSet_cdkey_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_serverid = 1;
    if (has_m_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverid());
    }

    // required int32 m_roleid = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required string m_cdkey = 3;
    if (has_m_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_cdkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_SystemSet_cdkey_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_SystemSet_cdkey_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_SystemSet_cdkey_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_SystemSet_cdkey_request::MergeFrom(const SM_SystemSet_cdkey_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_serverid()) {
      set_m_serverid(from.m_serverid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_cdkey()) {
      set_m_cdkey(from.m_cdkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_SystemSet_cdkey_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_SystemSet_cdkey_request::CopyFrom(const SM_SystemSet_cdkey_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_SystemSet_cdkey_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_SystemSet_cdkey_request::Swap(SM_SystemSet_cdkey_request* other) {
  if (other != this) {
    std::swap(m_serverid_, other->m_serverid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_cdkey_, other->m_cdkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_SystemSet_cdkey_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_SystemSet_cdkey_request_descriptor_;
  metadata.reflection = SM_SystemSet_cdkey_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_SystemSet_cdkey_subdata::kMObjectidFieldNumber;
const int SM_SystemSet_cdkey_subdata::kMObjectnumFieldNumber;
#endif  // !_MSC_VER

SM_SystemSet_cdkey_subdata::SM_SystemSet_cdkey_subdata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_SystemSet_cdkey_subdata::InitAsDefaultInstance() {
}

SM_SystemSet_cdkey_subdata::SM_SystemSet_cdkey_subdata(const SM_SystemSet_cdkey_subdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_SystemSet_cdkey_subdata::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_SystemSet_cdkey_subdata::~SM_SystemSet_cdkey_subdata() {
  SharedDtor();
}

void SM_SystemSet_cdkey_subdata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_SystemSet_cdkey_subdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_SystemSet_cdkey_subdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_SystemSet_cdkey_subdata_descriptor_;
}

const SM_SystemSet_cdkey_subdata& SM_SystemSet_cdkey_subdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fsystemset_2etxt();
  return *default_instance_;
}

SM_SystemSet_cdkey_subdata* SM_SystemSet_cdkey_subdata::default_instance_ = NULL;

SM_SystemSet_cdkey_subdata* SM_SystemSet_cdkey_subdata::New() const {
  return new SM_SystemSet_cdkey_subdata;
}

void SM_SystemSet_cdkey_subdata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_SystemSet_cdkey_subdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objectnum;
        break;
      }

      // required int32 m_objectnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectnum_)));
          set_has_m_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_SystemSet_cdkey_subdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // required int32 m_objectnum = 2;
  if (has_m_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_SystemSet_cdkey_subdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // required int32 m_objectnum = 2;
  if (has_m_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_SystemSet_cdkey_subdata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // required int32 m_objectnum = 2;
    if (has_m_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_SystemSet_cdkey_subdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_SystemSet_cdkey_subdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_SystemSet_cdkey_subdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_SystemSet_cdkey_subdata::MergeFrom(const SM_SystemSet_cdkey_subdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_objectnum()) {
      set_m_objectnum(from.m_objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_SystemSet_cdkey_subdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_SystemSet_cdkey_subdata::CopyFrom(const SM_SystemSet_cdkey_subdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_SystemSet_cdkey_subdata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SM_SystemSet_cdkey_subdata::Swap(SM_SystemSet_cdkey_subdata* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_objectnum_, other->m_objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_SystemSet_cdkey_subdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_SystemSet_cdkey_subdata_descriptor_;
  metadata.reflection = SM_SystemSet_cdkey_subdata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_SystemSet_cdkey_return::kMResultFieldNumber;
const int SM_SystemSet_cdkey_return::kMTypeidFieldNumber;
const int SM_SystemSet_cdkey_return::kMCdkeyFieldNumber;
const int SM_SystemSet_cdkey_return::kMCdtypeFieldNumber;
const int SM_SystemSet_cdkey_return::kMNameFieldNumber;
#endif  // !_MSC_VER

SM_SystemSet_cdkey_return::SM_SystemSet_cdkey_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_SystemSet_cdkey_return::InitAsDefaultInstance() {
}

SM_SystemSet_cdkey_return::SM_SystemSet_cdkey_return(const SM_SystemSet_cdkey_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_SystemSet_cdkey_return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_typeid_ = 0;
  m_cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_cdtype_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_SystemSet_cdkey_return::~SM_SystemSet_cdkey_return() {
  SharedDtor();
}

void SM_SystemSet_cdkey_return::SharedDtor() {
  if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_cdkey_;
  }
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void SM_SystemSet_cdkey_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_SystemSet_cdkey_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_SystemSet_cdkey_return_descriptor_;
}

const SM_SystemSet_cdkey_return& SM_SystemSet_cdkey_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fsystemset_2etxt();
  return *default_instance_;
}

SM_SystemSet_cdkey_return* SM_SystemSet_cdkey_return::default_instance_ = NULL;

SM_SystemSet_cdkey_return* SM_SystemSet_cdkey_return::New() const {
  return new SM_SystemSet_cdkey_return;
}

void SM_SystemSet_cdkey_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_typeid_ = 0;
    if (has_m_cdkey()) {
      if (m_cdkey_ != &::google::protobuf::internal::kEmptyString) {
        m_cdkey_->clear();
      }
    }
    m_cdtype_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_SystemSet_cdkey_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_typeid;
        break;
      }

      // optional int32 m_typeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_cdkey;
        break;
      }

      // optional string m_cdkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cdkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_cdkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_cdkey().data(), this->m_cdkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cdtype;
        break;
      }

      // optional int32 m_cdtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cdtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cdtype_)));
          set_has_m_cdtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_name;
        break;
      }

      // optional string m_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_SystemSet_cdkey_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_typeid = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_typeid(), output);
  }

  // optional string m_cdkey = 3;
  if (has_m_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_cdkey().data(), this->m_cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_cdkey(), output);
  }

  // optional int32 m_cdtype = 4;
  if (has_m_cdtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cdtype(), output);
  }

  // optional string m_name = 5;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_SystemSet_cdkey_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_typeid = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_typeid(), target);
  }

  // optional string m_cdkey = 3;
  if (has_m_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_cdkey().data(), this->m_cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_cdkey(), target);
  }

  // optional int32 m_cdtype = 4;
  if (has_m_cdtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cdtype(), target);
  }

  // optional string m_name = 5;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_SystemSet_cdkey_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_typeid = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional string m_cdkey = 3;
    if (has_m_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_cdkey());
    }

    // optional int32 m_cdtype = 4;
    if (has_m_cdtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cdtype());
    }

    // optional string m_name = 5;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_SystemSet_cdkey_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_SystemSet_cdkey_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_SystemSet_cdkey_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_SystemSet_cdkey_return::MergeFrom(const SM_SystemSet_cdkey_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_cdkey()) {
      set_m_cdkey(from.m_cdkey());
    }
    if (from.has_m_cdtype()) {
      set_m_cdtype(from.m_cdtype());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_SystemSet_cdkey_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_SystemSet_cdkey_return::CopyFrom(const SM_SystemSet_cdkey_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_SystemSet_cdkey_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_SystemSet_cdkey_return::Swap(SM_SystemSet_cdkey_return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_cdkey_, other->m_cdkey_);
    std::swap(m_cdtype_, other->m_cdtype_);
    std::swap(m_name_, other->m_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_SystemSet_cdkey_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_SystemSet_cdkey_return_descriptor_;
  metadata.reflection = SM_SystemSet_cdkey_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_SystemSet_data_request::kMServeridFieldNumber;
const int SM_SystemSet_data_request::kMAccountidFieldNumber;
const int SM_SystemSet_data_request::kMRoleidFieldNumber;
#endif  // !_MSC_VER

SM_SystemSet_data_request::SM_SystemSet_data_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_SystemSet_data_request::InitAsDefaultInstance() {
}

SM_SystemSet_data_request::SM_SystemSet_data_request(const SM_SystemSet_data_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_SystemSet_data_request::SharedCtor() {
  _cached_size_ = 0;
  m_serverid_ = 0;
  m_accountid_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_SystemSet_data_request::~SM_SystemSet_data_request() {
  SharedDtor();
}

void SM_SystemSet_data_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_SystemSet_data_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_SystemSet_data_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_SystemSet_data_request_descriptor_;
}

const SM_SystemSet_data_request& SM_SystemSet_data_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fsystemset_2etxt();
  return *default_instance_;
}

SM_SystemSet_data_request* SM_SystemSet_data_request::default_instance_ = NULL;

SM_SystemSet_data_request* SM_SystemSet_data_request::New() const {
  return new SM_SystemSet_data_request;
}

void SM_SystemSet_data_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_serverid_ = 0;
    m_accountid_ = 0;
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_SystemSet_data_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverid_)));
          set_has_m_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_accountid;
        break;
      }

      // required int32 m_accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_roleid;
        break;
      }

      // required int32 m_roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_SystemSet_data_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_serverid = 1;
  if (has_m_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_serverid(), output);
  }

  // required int32 m_accountid = 2;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_accountid(), output);
  }

  // required int32 m_roleid = 3;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_SystemSet_data_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_serverid = 1;
  if (has_m_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_serverid(), target);
  }

  // required int32 m_accountid = 2;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_accountid(), target);
  }

  // required int32 m_roleid = 3;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_SystemSet_data_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_serverid = 1;
    if (has_m_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverid());
    }

    // required int32 m_accountid = 2;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // required int32 m_roleid = 3;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_SystemSet_data_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_SystemSet_data_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_SystemSet_data_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_SystemSet_data_request::MergeFrom(const SM_SystemSet_data_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_serverid()) {
      set_m_serverid(from.m_serverid());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_SystemSet_data_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_SystemSet_data_request::CopyFrom(const SM_SystemSet_data_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_SystemSet_data_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SM_SystemSet_data_request::Swap(SM_SystemSet_data_request* other) {
  if (other != this) {
    std::swap(m_serverid_, other->m_serverid_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_SystemSet_data_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_SystemSet_data_request_descriptor_;
  metadata.reflection = SM_SystemSet_data_request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
