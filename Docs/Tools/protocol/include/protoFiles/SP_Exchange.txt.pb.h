// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Exchange.txt

#ifndef PROTOBUF_SP_5fExchange_2etxt__INCLUDED
#define PROTOBUF_SP_5fExchange_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fExchange_2etxt();
void protobuf_AssignDesc_SP_5fExchange_2etxt();
void protobuf_ShutdownFile_SP_5fExchange_2etxt();

class SM_Exchange;
class SM_Exchange_return;
class SM_exchange_requrest;
class SM_Relief_DB_return;
class SM_Exchange_info;
class SM_Exchange_info_db;
class SM_Exchange_phone;
class SM_Exchange_phone_info;

// ===================================================================

class SM_Exchange : public ::google::protobuf::Message {
 public:
  SM_Exchange();
  virtual ~SM_Exchange();

  SM_Exchange(const SM_Exchange& from);

  inline SM_Exchange& operator=(const SM_Exchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Exchange& default_instance();

  void Swap(SM_Exchange* other);

  // implements Message ----------------------------------------------

  SM_Exchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Exchange& from);
  void MergeFrom(const SM_Exchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 objectid = 3;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 3;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 createtime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 5;
  inline ::google::protobuf::int32 createtime() const;
  inline void set_createtime(::google::protobuf::int32 value);

  // optional int32 tag = 6;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 6;
  inline ::google::protobuf::int32 tag() const;
  inline void set_tag(::google::protobuf::int32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string phone = 8;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 8;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string address = 9;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 9;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string phonecharge = 10;
  inline bool has_phonecharge() const;
  inline void clear_phonecharge();
  static const int kPhonechargeFieldNumber = 10;
  inline const ::std::string& phonecharge() const;
  inline void set_phonecharge(const ::std::string& value);
  inline void set_phonecharge(const char* value);
  inline void set_phonecharge(const char* value, size_t size);
  inline ::std::string* mutable_phonecharge();
  inline ::std::string* release_phonecharge();
  inline void set_allocated_phonecharge(::std::string* phonecharge);

  // optional int32 id = 11;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 11;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Exchange)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_phonecharge();
  inline void clear_has_phonecharge();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 tag_;
  ::std::string* name_;
  ::std::string* phone_;
  ::std::string* address_;
  ::std::string* phonecharge_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Exchange* default_instance_;
};
// -------------------------------------------------------------------

class SM_Exchange_return : public ::google::protobuf::Message {
 public:
  SM_Exchange_return();
  virtual ~SM_Exchange_return();

  SM_Exchange_return(const SM_Exchange_return& from);

  inline SM_Exchange_return& operator=(const SM_Exchange_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Exchange_return& default_instance();

  void Swap(SM_Exchange_return* other);

  // implements Message ----------------------------------------------

  SM_Exchange_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Exchange_return& from);
  void MergeFrom(const SM_Exchange_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rolieid = 1;
  inline bool has_rolieid() const;
  inline void clear_rolieid();
  static const int kRolieidFieldNumber = 1;
  inline ::google::protobuf::int32 rolieid() const;
  inline void set_rolieid(::google::protobuf::int32 value);

  // repeated .SM_Exchange data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Exchange& data(int index) const;
  inline ::SM_Exchange* mutable_data(int index);
  inline ::SM_Exchange* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Exchange >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Exchange >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Exchange_return)
 private:
  inline void set_has_rolieid();
  inline void clear_has_rolieid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Exchange > data_;
  ::google::protobuf::int32 rolieid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Exchange_return* default_instance_;
};
// -------------------------------------------------------------------

class SM_exchange_requrest : public ::google::protobuf::Message {
 public:
  SM_exchange_requrest();
  virtual ~SM_exchange_requrest();

  SM_exchange_requrest(const SM_exchange_requrest& from);

  inline SM_exchange_requrest& operator=(const SM_exchange_requrest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_exchange_requrest& default_instance();

  void Swap(SM_exchange_requrest* other);

  // implements Message ----------------------------------------------

  SM_exchange_requrest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_exchange_requrest& from);
  void MergeFrom(const SM_exchange_requrest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_exchange_requrest)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_exchange_requrest* default_instance_;
};
// -------------------------------------------------------------------

class SM_Relief_DB_return : public ::google::protobuf::Message {
 public:
  SM_Relief_DB_return();
  virtual ~SM_Relief_DB_return();

  SM_Relief_DB_return(const SM_Relief_DB_return& from);

  inline SM_Relief_DB_return& operator=(const SM_Relief_DB_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Relief_DB_return& default_instance();

  void Swap(SM_Relief_DB_return* other);

  // implements Message ----------------------------------------------

  SM_Relief_DB_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Relief_DB_return& from);
  void MergeFrom(const SM_Relief_DB_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 vip = 2;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 2;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Relief_DB_return)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Relief_DB_return* default_instance_;
};
// -------------------------------------------------------------------

class SM_Exchange_info : public ::google::protobuf::Message {
 public:
  SM_Exchange_info();
  virtual ~SM_Exchange_info();

  SM_Exchange_info(const SM_Exchange_info& from);

  inline SM_Exchange_info& operator=(const SM_Exchange_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Exchange_info& default_instance();

  void Swap(SM_Exchange_info* other);

  // implements Message ----------------------------------------------

  SM_Exchange_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Exchange_info& from);
  void MergeFrom(const SM_Exchange_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .SM_Exchange_info_db data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Exchange_info_db& data(int index) const;
  inline ::SM_Exchange_info_db* mutable_data(int index);
  inline ::SM_Exchange_info_db* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Exchange_info_db >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Exchange_info_db >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Exchange_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Exchange_info_db > data_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Exchange_info* default_instance_;
};
// -------------------------------------------------------------------

class SM_Exchange_info_db : public ::google::protobuf::Message {
 public:
  SM_Exchange_info_db();
  virtual ~SM_Exchange_info_db();

  SM_Exchange_info_db(const SM_Exchange_info_db& from);

  inline SM_Exchange_info_db& operator=(const SM_Exchange_info_db& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Exchange_info_db& default_instance();

  void Swap(SM_Exchange_info_db* other);

  // implements Message ----------------------------------------------

  SM_Exchange_info_db* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Exchange_info_db& from);
  void MergeFrom(const SM_Exchange_info_db& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 qq = 3;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 3;
  inline ::google::protobuf::int64 qq() const;
  inline void set_qq(::google::protobuf::int64 value);

  // optional string invite = 4;
  inline bool has_invite() const;
  inline void clear_invite();
  static const int kInviteFieldNumber = 4;
  inline const ::std::string& invite() const;
  inline void set_invite(const ::std::string& value);
  inline void set_invite(const char* value);
  inline void set_invite(const char* value, size_t size);
  inline ::std::string* mutable_invite();
  inline ::std::string* release_invite();
  inline void set_allocated_invite(::std::string* invite);

  // optional string address = 5;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 5;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string phone = 6;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 6;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional int32 createtime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 7;
  inline ::google::protobuf::int32 createtime() const;
  inline void set_createtime(::google::protobuf::int32 value);

  // optional int32 usetime = 8;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUsetimeFieldNumber = 8;
  inline ::google::protobuf::int32 usetime() const;
  inline void set_usetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Exchange_info_db)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_invite();
  inline void clear_has_invite();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 qq_;
  ::std::string* invite_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 createtime_;
  ::std::string* address_;
  ::std::string* phone_;
  ::google::protobuf::int32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Exchange_info_db* default_instance_;
};
// -------------------------------------------------------------------

class SM_Exchange_phone : public ::google::protobuf::Message {
 public:
  SM_Exchange_phone();
  virtual ~SM_Exchange_phone();

  SM_Exchange_phone(const SM_Exchange_phone& from);

  inline SM_Exchange_phone& operator=(const SM_Exchange_phone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Exchange_phone& default_instance();

  void Swap(SM_Exchange_phone* other);

  // implements Message ----------------------------------------------

  SM_Exchange_phone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Exchange_phone& from);
  void MergeFrom(const SM_Exchange_phone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .SM_Exchange_phone_info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_Exchange_phone_info& data(int index) const;
  inline ::SM_Exchange_phone_info* mutable_data(int index);
  inline ::SM_Exchange_phone_info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_Exchange_phone_info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_Exchange_phone_info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_Exchange_phone)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_Exchange_phone_info > data_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Exchange_phone* default_instance_;
};
// -------------------------------------------------------------------

class SM_Exchange_phone_info : public ::google::protobuf::Message {
 public:
  SM_Exchange_phone_info();
  virtual ~SM_Exchange_phone_info();

  SM_Exchange_phone_info(const SM_Exchange_phone_info& from);

  inline SM_Exchange_phone_info& operator=(const SM_Exchange_phone_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Exchange_phone_info& default_instance();

  void Swap(SM_Exchange_phone_info* other);

  // implements Message ----------------------------------------------

  SM_Exchange_phone_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Exchange_phone_info& from);
  void MergeFrom(const SM_Exchange_phone_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 usetime = 2;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUsetimeFieldNumber = 2;
  inline ::google::protobuf::int32 usetime() const;
  inline void set_usetime(::google::protobuf::int32 value);

  // optional int32 createtime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 3;
  inline ::google::protobuf::int32 createtime() const;
  inline void set_createtime(::google::protobuf::int32 value);

  // optional string phone = 4;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:SM_Exchange_phone_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_usetime();
  inline void clear_has_usetime();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_phone();
  inline void clear_has_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 usetime_;
  ::std::string* phone_;
  ::google::protobuf::int32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fExchange_2etxt();
  friend void protobuf_AssignDesc_SP_5fExchange_2etxt();
  friend void protobuf_ShutdownFile_SP_5fExchange_2etxt();

  void InitAsDefaultInstance();
  static SM_Exchange_phone_info* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_Exchange

// required int32 roleid = 1;
inline bool SM_Exchange::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Exchange::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Exchange::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Exchange::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Exchange::roleid() const {
  return roleid_;
}
inline void SM_Exchange::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 state = 2;
inline bool SM_Exchange::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Exchange::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Exchange::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Exchange::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SM_Exchange::state() const {
  return state_;
}
inline void SM_Exchange::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 objectid = 3;
inline bool SM_Exchange::has_objectid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Exchange::set_has_objectid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Exchange::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Exchange::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 SM_Exchange::objectid() const {
  return objectid_;
}
inline void SM_Exchange::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// optional int32 num = 4;
inline bool SM_Exchange::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Exchange::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Exchange::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Exchange::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SM_Exchange::num() const {
  return num_;
}
inline void SM_Exchange::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 createtime = 5;
inline bool SM_Exchange::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_Exchange::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_Exchange::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_Exchange::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 SM_Exchange::createtime() const {
  return createtime_;
}
inline void SM_Exchange::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int32 tag = 6;
inline bool SM_Exchange::has_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_Exchange::set_has_tag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_Exchange::clear_has_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_Exchange::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::google::protobuf::int32 SM_Exchange::tag() const {
  return tag_;
}
inline void SM_Exchange::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
}

// optional string name = 7;
inline bool SM_Exchange::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_Exchange::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_Exchange::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_Exchange::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SM_Exchange::name() const {
  return *name_;
}
inline void SM_Exchange::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SM_Exchange::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SM_Exchange::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SM_Exchange::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone = 8;
inline bool SM_Exchange::has_phone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_Exchange::set_has_phone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_Exchange::clear_has_phone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_Exchange::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& SM_Exchange::phone() const {
  return *phone_;
}
inline void SM_Exchange::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SM_Exchange::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SM_Exchange::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* SM_Exchange::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 9;
inline bool SM_Exchange::has_address() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SM_Exchange::set_has_address() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SM_Exchange::clear_has_address() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SM_Exchange::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& SM_Exchange::address() const {
  return *address_;
}
inline void SM_Exchange::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void SM_Exchange::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void SM_Exchange::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* SM_Exchange::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phonecharge = 10;
inline bool SM_Exchange::has_phonecharge() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SM_Exchange::set_has_phonecharge() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SM_Exchange::clear_has_phonecharge() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SM_Exchange::clear_phonecharge() {
  if (phonecharge_ != &::google::protobuf::internal::kEmptyString) {
    phonecharge_->clear();
  }
  clear_has_phonecharge();
}
inline const ::std::string& SM_Exchange::phonecharge() const {
  return *phonecharge_;
}
inline void SM_Exchange::set_phonecharge(const ::std::string& value) {
  set_has_phonecharge();
  if (phonecharge_ == &::google::protobuf::internal::kEmptyString) {
    phonecharge_ = new ::std::string;
  }
  phonecharge_->assign(value);
}
inline void SM_Exchange::set_phonecharge(const char* value) {
  set_has_phonecharge();
  if (phonecharge_ == &::google::protobuf::internal::kEmptyString) {
    phonecharge_ = new ::std::string;
  }
  phonecharge_->assign(value);
}
inline void SM_Exchange::set_phonecharge(const char* value, size_t size) {
  set_has_phonecharge();
  if (phonecharge_ == &::google::protobuf::internal::kEmptyString) {
    phonecharge_ = new ::std::string;
  }
  phonecharge_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange::mutable_phonecharge() {
  set_has_phonecharge();
  if (phonecharge_ == &::google::protobuf::internal::kEmptyString) {
    phonecharge_ = new ::std::string;
  }
  return phonecharge_;
}
inline ::std::string* SM_Exchange::release_phonecharge() {
  clear_has_phonecharge();
  if (phonecharge_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonecharge_;
    phonecharge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange::set_allocated_phonecharge(::std::string* phonecharge) {
  if (phonecharge_ != &::google::protobuf::internal::kEmptyString) {
    delete phonecharge_;
  }
  if (phonecharge) {
    set_has_phonecharge();
    phonecharge_ = phonecharge;
  } else {
    clear_has_phonecharge();
    phonecharge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 11;
inline bool SM_Exchange::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SM_Exchange::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SM_Exchange::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SM_Exchange::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SM_Exchange::id() const {
  return id_;
}
inline void SM_Exchange::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// SM_Exchange_return

// required int32 rolieid = 1;
inline bool SM_Exchange_return::has_rolieid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Exchange_return::set_has_rolieid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Exchange_return::clear_has_rolieid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Exchange_return::clear_rolieid() {
  rolieid_ = 0;
  clear_has_rolieid();
}
inline ::google::protobuf::int32 SM_Exchange_return::rolieid() const {
  return rolieid_;
}
inline void SM_Exchange_return::set_rolieid(::google::protobuf::int32 value) {
  set_has_rolieid();
  rolieid_ = value;
}

// repeated .SM_Exchange data = 2;
inline int SM_Exchange_return::data_size() const {
  return data_.size();
}
inline void SM_Exchange_return::clear_data() {
  data_.Clear();
}
inline const ::SM_Exchange& SM_Exchange_return::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Exchange* SM_Exchange_return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Exchange* SM_Exchange_return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Exchange >&
SM_Exchange_return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Exchange >*
SM_Exchange_return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_exchange_requrest

// required int32 roleid = 1;
inline bool SM_exchange_requrest::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_exchange_requrest::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_exchange_requrest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_exchange_requrest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_exchange_requrest::roleid() const {
  return roleid_;
}
inline void SM_exchange_requrest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// SM_Relief_DB_return

// required int32 roleid = 1;
inline bool SM_Relief_DB_return::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Relief_DB_return::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Relief_DB_return::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Relief_DB_return::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Relief_DB_return::roleid() const {
  return roleid_;
}
inline void SM_Relief_DB_return::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 vip = 2;
inline bool SM_Relief_DB_return::has_vip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Relief_DB_return::set_has_vip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Relief_DB_return::clear_has_vip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Relief_DB_return::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 SM_Relief_DB_return::vip() const {
  return vip_;
}
inline void SM_Relief_DB_return::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 times = 3;
inline bool SM_Relief_DB_return::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Relief_DB_return::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Relief_DB_return::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Relief_DB_return::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 SM_Relief_DB_return::times() const {
  return times_;
}
inline void SM_Relief_DB_return::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// SM_Exchange_info

// required int32 roleid = 1;
inline bool SM_Exchange_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Exchange_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Exchange_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Exchange_info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Exchange_info::roleid() const {
  return roleid_;
}
inline void SM_Exchange_info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .SM_Exchange_info_db data = 2;
inline int SM_Exchange_info::data_size() const {
  return data_.size();
}
inline void SM_Exchange_info::clear_data() {
  data_.Clear();
}
inline const ::SM_Exchange_info_db& SM_Exchange_info::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Exchange_info_db* SM_Exchange_info::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Exchange_info_db* SM_Exchange_info::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Exchange_info_db >&
SM_Exchange_info::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Exchange_info_db >*
SM_Exchange_info::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_Exchange_info_db

// required int32 roleid = 1;
inline bool SM_Exchange_info_db::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Exchange_info_db::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Exchange_info_db::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Exchange_info_db::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Exchange_info_db::roleid() const {
  return roleid_;
}
inline void SM_Exchange_info_db::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string name = 2;
inline bool SM_Exchange_info_db::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Exchange_info_db::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Exchange_info_db::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Exchange_info_db::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SM_Exchange_info_db::name() const {
  return *name_;
}
inline void SM_Exchange_info_db::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SM_Exchange_info_db::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SM_Exchange_info_db::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange_info_db::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SM_Exchange_info_db::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange_info_db::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 qq = 3;
inline bool SM_Exchange_info_db::has_qq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Exchange_info_db::set_has_qq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Exchange_info_db::clear_has_qq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Exchange_info_db::clear_qq() {
  qq_ = GOOGLE_LONGLONG(0);
  clear_has_qq();
}
inline ::google::protobuf::int64 SM_Exchange_info_db::qq() const {
  return qq_;
}
inline void SM_Exchange_info_db::set_qq(::google::protobuf::int64 value) {
  set_has_qq();
  qq_ = value;
}

// optional string invite = 4;
inline bool SM_Exchange_info_db::has_invite() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Exchange_info_db::set_has_invite() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Exchange_info_db::clear_has_invite() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Exchange_info_db::clear_invite() {
  if (invite_ != &::google::protobuf::internal::kEmptyString) {
    invite_->clear();
  }
  clear_has_invite();
}
inline const ::std::string& SM_Exchange_info_db::invite() const {
  return *invite_;
}
inline void SM_Exchange_info_db::set_invite(const ::std::string& value) {
  set_has_invite();
  if (invite_ == &::google::protobuf::internal::kEmptyString) {
    invite_ = new ::std::string;
  }
  invite_->assign(value);
}
inline void SM_Exchange_info_db::set_invite(const char* value) {
  set_has_invite();
  if (invite_ == &::google::protobuf::internal::kEmptyString) {
    invite_ = new ::std::string;
  }
  invite_->assign(value);
}
inline void SM_Exchange_info_db::set_invite(const char* value, size_t size) {
  set_has_invite();
  if (invite_ == &::google::protobuf::internal::kEmptyString) {
    invite_ = new ::std::string;
  }
  invite_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange_info_db::mutable_invite() {
  set_has_invite();
  if (invite_ == &::google::protobuf::internal::kEmptyString) {
    invite_ = new ::std::string;
  }
  return invite_;
}
inline ::std::string* SM_Exchange_info_db::release_invite() {
  clear_has_invite();
  if (invite_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invite_;
    invite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange_info_db::set_allocated_invite(::std::string* invite) {
  if (invite_ != &::google::protobuf::internal::kEmptyString) {
    delete invite_;
  }
  if (invite) {
    set_has_invite();
    invite_ = invite;
  } else {
    clear_has_invite();
    invite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 5;
inline bool SM_Exchange_info_db::has_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_Exchange_info_db::set_has_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_Exchange_info_db::clear_has_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_Exchange_info_db::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& SM_Exchange_info_db::address() const {
  return *address_;
}
inline void SM_Exchange_info_db::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void SM_Exchange_info_db::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void SM_Exchange_info_db::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange_info_db::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* SM_Exchange_info_db::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange_info_db::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone = 6;
inline bool SM_Exchange_info_db::has_phone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_Exchange_info_db::set_has_phone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_Exchange_info_db::clear_has_phone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_Exchange_info_db::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& SM_Exchange_info_db::phone() const {
  return *phone_;
}
inline void SM_Exchange_info_db::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SM_Exchange_info_db::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SM_Exchange_info_db::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange_info_db::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* SM_Exchange_info_db::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange_info_db::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 createtime = 7;
inline bool SM_Exchange_info_db::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_Exchange_info_db::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_Exchange_info_db::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_Exchange_info_db::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 SM_Exchange_info_db::createtime() const {
  return createtime_;
}
inline void SM_Exchange_info_db::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int32 usetime = 8;
inline bool SM_Exchange_info_db::has_usetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_Exchange_info_db::set_has_usetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_Exchange_info_db::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_Exchange_info_db::clear_usetime() {
  usetime_ = 0;
  clear_has_usetime();
}
inline ::google::protobuf::int32 SM_Exchange_info_db::usetime() const {
  return usetime_;
}
inline void SM_Exchange_info_db::set_usetime(::google::protobuf::int32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// SM_Exchange_phone

// required int32 roleid = 1;
inline bool SM_Exchange_phone::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Exchange_phone::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Exchange_phone::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Exchange_phone::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Exchange_phone::roleid() const {
  return roleid_;
}
inline void SM_Exchange_phone::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .SM_Exchange_phone_info data = 2;
inline int SM_Exchange_phone::data_size() const {
  return data_.size();
}
inline void SM_Exchange_phone::clear_data() {
  data_.Clear();
}
inline const ::SM_Exchange_phone_info& SM_Exchange_phone::data(int index) const {
  return data_.Get(index);
}
inline ::SM_Exchange_phone_info* SM_Exchange_phone::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_Exchange_phone_info* SM_Exchange_phone::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_Exchange_phone_info >&
SM_Exchange_phone::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_Exchange_phone_info >*
SM_Exchange_phone::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_Exchange_phone_info

// required int32 roleid = 1;
inline bool SM_Exchange_phone_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Exchange_phone_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Exchange_phone_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Exchange_phone_info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Exchange_phone_info::roleid() const {
  return roleid_;
}
inline void SM_Exchange_phone_info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 usetime = 2;
inline bool SM_Exchange_phone_info::has_usetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_Exchange_phone_info::set_has_usetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_Exchange_phone_info::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_Exchange_phone_info::clear_usetime() {
  usetime_ = 0;
  clear_has_usetime();
}
inline ::google::protobuf::int32 SM_Exchange_phone_info::usetime() const {
  return usetime_;
}
inline void SM_Exchange_phone_info::set_usetime(::google::protobuf::int32 value) {
  set_has_usetime();
  usetime_ = value;
}

// optional int32 createtime = 3;
inline bool SM_Exchange_phone_info::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_Exchange_phone_info::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_Exchange_phone_info::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_Exchange_phone_info::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 SM_Exchange_phone_info::createtime() const {
  return createtime_;
}
inline void SM_Exchange_phone_info::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional string phone = 4;
inline bool SM_Exchange_phone_info::has_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_Exchange_phone_info::set_has_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_Exchange_phone_info::clear_has_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_Exchange_phone_info::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& SM_Exchange_phone_info::phone() const {
  return *phone_;
}
inline void SM_Exchange_phone_info::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SM_Exchange_phone_info::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SM_Exchange_phone_info::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_Exchange_phone_info::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* SM_Exchange_phone_info::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_Exchange_phone_info::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fExchange_2etxt__INCLUDED
