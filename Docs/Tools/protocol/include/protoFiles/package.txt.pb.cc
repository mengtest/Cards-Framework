// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "package.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMPackObjectList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPackObjectList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUserPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUserPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPackageAllGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPackageAllGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPackTidy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPackTidy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPackTidyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPackTidyResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPackSplit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPackSplit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMPackSplitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMPackSplitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UnlockGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UnlockGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UnlockGridReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UnlockGridReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PackageGridNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PackageGridNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMStoreObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMStoreObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMStoreObjectResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMStoreObjectResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RestoreObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RestoreObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RestoreObjectResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RestoreObjectResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PickUpTempPackageResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PickUpTempPackageResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_package_2etxt() {
  protobuf_AddDesc_package_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "package.txt");
  GOOGLE_CHECK(file != NULL);
  GMPackObjectList_descriptor_ = file->message_type(0);
  static const int GMPackObjectList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackObjectList, m_packages_),
  };
  GMPackObjectList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPackObjectList_descriptor_,
      GMPackObjectList::default_instance_,
      GMPackObjectList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackObjectList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackObjectList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPackObjectList));
  GMUserPackage_descriptor_ = file->message_type(1);
  static const int GMUserPackage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUserPackage, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUserPackage, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUserPackage, m_object_),
  };
  GMUserPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUserPackage_descriptor_,
      GMUserPackage::default_instance_,
      GMUserPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUserPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUserPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUserPackage));
  GMObject_descriptor_ = file->message_type(2);
  static const int GMObject_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_seal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_indate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, m_way_),
  };
  GMObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMObject_descriptor_,
      GMObject::default_instance_,
      GMObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMObject));
  GMPackageAllGrid_descriptor_ = file->message_type(3);
  static const int GMPackageAllGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackageAllGrid, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackageAllGrid, m_grids_),
  };
  GMPackageAllGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPackageAllGrid_descriptor_,
      GMPackageAllGrid::default_instance_,
      GMPackageAllGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackageAllGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackageAllGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPackageAllGrid));
  GMPackTidy_descriptor_ = file->message_type(4);
  static const int GMPackTidy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidy, m_packid_),
  };
  GMPackTidy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPackTidy_descriptor_,
      GMPackTidy::default_instance_,
      GMPackTidy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPackTidy));
  GMPackTidyResult_descriptor_ = file->message_type(5);
  static const int GMPackTidyResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidyResult, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidyResult, m_resutl_),
  };
  GMPackTidyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPackTidyResult_descriptor_,
      GMPackTidyResult::default_instance_,
      GMPackTidyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackTidyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPackTidyResult));
  GMPackSplit_descriptor_ = file->message_type(6);
  static const int GMPackSplit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplit, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplit, m_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplit, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplit, m_gmid_),
  };
  GMPackSplit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPackSplit_descriptor_,
      GMPackSplit::default_instance_,
      GMPackSplit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPackSplit));
  GMPackSplitResult_descriptor_ = file->message_type(7);
  static const int GMPackSplitResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_newgrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, m_newgmid_),
  };
  GMPackSplitResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMPackSplitResult_descriptor_,
      GMPackSplitResult::default_instance_,
      GMPackSplitResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMPackSplitResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMPackSplitResult));
  GM_UnlockGrid_descriptor_ = file->message_type(8);
  static const int GM_UnlockGrid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGrid, packid_),
  };
  GM_UnlockGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UnlockGrid_descriptor_,
      GM_UnlockGrid::default_instance_,
      GM_UnlockGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UnlockGrid));
  GM_UnlockGridReturn_descriptor_ = file->message_type(9);
  static const int GM_UnlockGridReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGridReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGridReturn, packid_),
  };
  GM_UnlockGridReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UnlockGridReturn_descriptor_,
      GM_UnlockGridReturn::default_instance_,
      GM_UnlockGridReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGridReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockGridReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UnlockGridReturn));
  GM_PackageGridNotify_descriptor_ = file->message_type(10);
  static const int GM_PackageGridNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PackageGridNotify, packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PackageGridNotify, validcount_),
  };
  GM_PackageGridNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PackageGridNotify_descriptor_,
      GM_PackageGridNotify::default_instance_,
      GM_PackageGridNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PackageGridNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PackageGridNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PackageGridNotify));
  GMStoreObject_descriptor_ = file->message_type(11);
  static const int GMStoreObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObject, gmid_),
  };
  GMStoreObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMStoreObject_descriptor_,
      GMStoreObject::default_instance_,
      GMStoreObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMStoreObject));
  GMStoreObjectResult_descriptor_ = file->message_type(12);
  static const int GMStoreObjectResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObjectResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObjectResult, gmid_),
  };
  GMStoreObjectResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMStoreObjectResult_descriptor_,
      GMStoreObjectResult::default_instance_,
      GMStoreObjectResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObjectResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStoreObjectResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMStoreObjectResult));
  GM_RestoreObject_descriptor_ = file->message_type(13);
  static const int GM_RestoreObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObject, gmid_),
  };
  GM_RestoreObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RestoreObject_descriptor_,
      GM_RestoreObject::default_instance_,
      GM_RestoreObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RestoreObject));
  GM_RestoreObjectResult_descriptor_ = file->message_type(14);
  static const int GM_RestoreObjectResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObjectResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObjectResult, gmid_),
  };
  GM_RestoreObjectResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RestoreObjectResult_descriptor_,
      GM_RestoreObjectResult::default_instance_,
      GM_RestoreObjectResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObjectResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RestoreObjectResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RestoreObjectResult));
  GM_PickUpTempPackageResult_descriptor_ = file->message_type(15);
  static const int GM_PickUpTempPackageResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PickUpTempPackageResult, result_),
  };
  GM_PickUpTempPackageResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PickUpTempPackageResult_descriptor_,
      GM_PickUpTempPackageResult::default_instance_,
      GM_PickUpTempPackageResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PickUpTempPackageResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PickUpTempPackageResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PickUpTempPackageResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_package_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPackObjectList_descriptor_, &GMPackObjectList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUserPackage_descriptor_, &GMUserPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMObject_descriptor_, &GMObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPackageAllGrid_descriptor_, &GMPackageAllGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPackTidy_descriptor_, &GMPackTidy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPackTidyResult_descriptor_, &GMPackTidyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPackSplit_descriptor_, &GMPackSplit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMPackSplitResult_descriptor_, &GMPackSplitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UnlockGrid_descriptor_, &GM_UnlockGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UnlockGridReturn_descriptor_, &GM_UnlockGridReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PackageGridNotify_descriptor_, &GM_PackageGridNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMStoreObject_descriptor_, &GMStoreObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMStoreObjectResult_descriptor_, &GMStoreObjectResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RestoreObject_descriptor_, &GM_RestoreObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RestoreObjectResult_descriptor_, &GM_RestoreObjectResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PickUpTempPackageResult_descriptor_, &GM_PickUpTempPackageResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_package_2etxt() {
  delete GMPackObjectList::default_instance_;
  delete GMPackObjectList_reflection_;
  delete GMUserPackage::default_instance_;
  delete GMUserPackage_reflection_;
  delete GMObject::default_instance_;
  delete GMObject_reflection_;
  delete GMPackageAllGrid::default_instance_;
  delete GMPackageAllGrid_reflection_;
  delete GMPackTidy::default_instance_;
  delete GMPackTidy_reflection_;
  delete GMPackTidyResult::default_instance_;
  delete GMPackTidyResult_reflection_;
  delete GMPackSplit::default_instance_;
  delete GMPackSplit_reflection_;
  delete GMPackSplitResult::default_instance_;
  delete GMPackSplitResult_reflection_;
  delete GM_UnlockGrid::default_instance_;
  delete GM_UnlockGrid_reflection_;
  delete GM_UnlockGridReturn::default_instance_;
  delete GM_UnlockGridReturn_reflection_;
  delete GM_PackageGridNotify::default_instance_;
  delete GM_PackageGridNotify_reflection_;
  delete GMStoreObject::default_instance_;
  delete GMStoreObject_reflection_;
  delete GMStoreObjectResult::default_instance_;
  delete GMStoreObjectResult_reflection_;
  delete GM_RestoreObject::default_instance_;
  delete GM_RestoreObject_reflection_;
  delete GM_RestoreObjectResult::default_instance_;
  delete GM_RestoreObjectResult_reflection_;
  delete GM_PickUpTempPackageResult::default_instance_;
  delete GM_PickUpTempPackageResult_reflection_;
}

void protobuf_AddDesc_package_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013package.txt\"6\n\020GMPackObjectList\022\"\n\nm_P"
    "ackages\030\001 \003(\0132\016.GMUserPackage\"O\n\rGMUserP"
    "ackage\022\020\n\010m_PackID\030\001 \002(\005\022\017\n\007m_Count\030\002 \002("
    "\005\022\033\n\010m_Object\030\003 \003(\0132\t.GMObject\"\240\001\n\010GMObj"
    "ect\022\016\n\006m_GMID\030\001 \002(\003\022\020\n\010m_TypeID\030\002 \002(\005\022\020\n"
    "\010m_PackID\030\003 \002(\005\022\016\n\006m_Grid\030\004 \002(\005\022\017\n\007m_Cou"
    "nt\030\005 \002(\005\022\016\n\006m_Bind\030\006 \002(\005\022\016\n\006m_Seal\030\007 \002(\005"
    "\022\020\n\010m_Indate\030\010 \002(\005\022\r\n\005m_way\030\t \001(\005\"@\n\020GMP"
    "ackageAllGrid\022\020\n\010m_PackID\030\001 \002(\005\022\032\n\007m_Gri"
    "ds\030\002 \003(\0132\t.GMObject\"\036\n\nGMPackTidy\022\020\n\010m_P"
    "ackID\030\001 \002(\005\"6\n\020GMPackTidyResult\022\020\n\010m_Pac"
    "kID\030\001 \002(\005\022\020\n\010m_Resutl\030\002 \002(\005\"P\n\013GMPackSpl"
    "it\022\020\n\010m_PackID\030\001 \002(\005\022\016\n\006m_Grid\030\002 \002(\005\022\017\n\007"
    "m_Count\030\003 \002(\005\022\016\n\006m_GMID\030\004 \002(\003\"\216\001\n\021GMPack"
    "SplitResult\022\020\n\010m_PackID\030\001 \002(\005\022\016\n\006m_Grid\030"
    "\002 \002(\005\022\017\n\007m_Count\030\003 \002(\005\022\016\n\006m_GMID\030\004 \002(\003\022\020"
    "\n\010m_Result\030\005 \002(\005\022\021\n\tm_NewGrid\030\006 \002(\005\022\021\n\tm"
    "_NewGMID\030\007 \002(\003\"\037\n\rGM_UnlockGrid\022\016\n\006PackI"
    "D\030\001 \002(\005\"5\n\023GM_UnlockGridReturn\022\016\n\006Result"
    "\030\001 \002(\005\022\016\n\006PackID\030\002 \002(\005\":\n\024GM_PackageGrid"
    "Notify\022\016\n\006PackID\030\001 \002(\005\022\022\n\nValidCount\030\002 \002"
    "(\005\"\035\n\rGMStoreObject\022\014\n\004gmid\030\001 \002(\003\"3\n\023GMS"
    "toreObjectResult\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid"
    "\030\002 \002(\003\" \n\020GM_RestoreObject\022\014\n\004gmid\030\001 \002(\003"
    "\"6\n\026GM_RestoreObjectResult\022\016\n\006result\030\001 \002"
    "(\005\022\014\n\004gmid\030\002 \002(\003\",\n\032GM_PickUpTempPackage"
    "Result\022\016\n\006result\030\001 \002(\005", 1062);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "package.txt", &protobuf_RegisterTypes);
  GMPackObjectList::default_instance_ = new GMPackObjectList();
  GMUserPackage::default_instance_ = new GMUserPackage();
  GMObject::default_instance_ = new GMObject();
  GMPackageAllGrid::default_instance_ = new GMPackageAllGrid();
  GMPackTidy::default_instance_ = new GMPackTidy();
  GMPackTidyResult::default_instance_ = new GMPackTidyResult();
  GMPackSplit::default_instance_ = new GMPackSplit();
  GMPackSplitResult::default_instance_ = new GMPackSplitResult();
  GM_UnlockGrid::default_instance_ = new GM_UnlockGrid();
  GM_UnlockGridReturn::default_instance_ = new GM_UnlockGridReturn();
  GM_PackageGridNotify::default_instance_ = new GM_PackageGridNotify();
  GMStoreObject::default_instance_ = new GMStoreObject();
  GMStoreObjectResult::default_instance_ = new GMStoreObjectResult();
  GM_RestoreObject::default_instance_ = new GM_RestoreObject();
  GM_RestoreObjectResult::default_instance_ = new GM_RestoreObjectResult();
  GM_PickUpTempPackageResult::default_instance_ = new GM_PickUpTempPackageResult();
  GMPackObjectList::default_instance_->InitAsDefaultInstance();
  GMUserPackage::default_instance_->InitAsDefaultInstance();
  GMObject::default_instance_->InitAsDefaultInstance();
  GMPackageAllGrid::default_instance_->InitAsDefaultInstance();
  GMPackTidy::default_instance_->InitAsDefaultInstance();
  GMPackTidyResult::default_instance_->InitAsDefaultInstance();
  GMPackSplit::default_instance_->InitAsDefaultInstance();
  GMPackSplitResult::default_instance_->InitAsDefaultInstance();
  GM_UnlockGrid::default_instance_->InitAsDefaultInstance();
  GM_UnlockGridReturn::default_instance_->InitAsDefaultInstance();
  GM_PackageGridNotify::default_instance_->InitAsDefaultInstance();
  GMStoreObject::default_instance_->InitAsDefaultInstance();
  GMStoreObjectResult::default_instance_->InitAsDefaultInstance();
  GM_RestoreObject::default_instance_->InitAsDefaultInstance();
  GM_RestoreObjectResult::default_instance_->InitAsDefaultInstance();
  GM_PickUpTempPackageResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_package_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_package_2etxt {
  StaticDescriptorInitializer_package_2etxt() {
    protobuf_AddDesc_package_2etxt();
  }
} static_descriptor_initializer_package_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMPackObjectList::kMPackagesFieldNumber;
#endif  // !_MSC_VER

GMPackObjectList::GMPackObjectList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPackObjectList::InitAsDefaultInstance() {
}

GMPackObjectList::GMPackObjectList(const GMPackObjectList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPackObjectList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPackObjectList::~GMPackObjectList() {
  SharedDtor();
}

void GMPackObjectList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPackObjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPackObjectList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPackObjectList_descriptor_;
}

const GMPackObjectList& GMPackObjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMPackObjectList* GMPackObjectList::default_instance_ = NULL;

GMPackObjectList* GMPackObjectList::New() const {
  return new GMPackObjectList;
}

void GMPackObjectList::Clear() {
  m_packages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPackObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GMUserPackage m_Packages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_packages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_Packages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPackObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GMUserPackage m_Packages = 1;
  for (int i = 0; i < this->m_packages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_packages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPackObjectList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GMUserPackage m_Packages = 1;
  for (int i = 0; i < this->m_packages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_packages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPackObjectList::ByteSize() const {
  int total_size = 0;

  // repeated .GMUserPackage m_Packages = 1;
  total_size += 1 * this->m_packages_size();
  for (int i = 0; i < this->m_packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_packages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPackObjectList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPackObjectList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPackObjectList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPackObjectList::MergeFrom(const GMPackObjectList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_packages_.MergeFrom(from.m_packages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPackObjectList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPackObjectList::CopyFrom(const GMPackObjectList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPackObjectList::IsInitialized() const {

  for (int i = 0; i < m_packages_size(); i++) {
    if (!this->m_packages(i).IsInitialized()) return false;
  }
  return true;
}

void GMPackObjectList::Swap(GMPackObjectList* other) {
  if (other != this) {
    m_packages_.Swap(&other->m_packages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPackObjectList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPackObjectList_descriptor_;
  metadata.reflection = GMPackObjectList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUserPackage::kMPackIDFieldNumber;
const int GMUserPackage::kMCountFieldNumber;
const int GMUserPackage::kMObjectFieldNumber;
#endif  // !_MSC_VER

GMUserPackage::GMUserPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUserPackage::InitAsDefaultInstance() {
}

GMUserPackage::GMUserPackage(const GMUserPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUserPackage::SharedCtor() {
  _cached_size_ = 0;
  m_packid_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUserPackage::~GMUserPackage() {
  SharedDtor();
}

void GMUserPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUserPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUserPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUserPackage_descriptor_;
}

const GMUserPackage& GMUserPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMUserPackage* GMUserPackage::default_instance_ = NULL;

GMUserPackage* GMUserPackage::New() const {
  return new GMUserPackage;
}

void GMUserPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_packid_ = 0;
    m_count_ = 0;
  }
  m_object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUserPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Object;
        break;
      }

      // repeated .GMObject m_Object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_Object;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUserPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_packid(), output);
  }

  // required int32 m_Count = 2;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_count(), output);
  }

  // repeated .GMObject m_Object = 3;
  for (int i = 0; i < this->m_object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_object(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUserPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_packid(), target);
  }

  // required int32 m_Count = 2;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_count(), target);
  }

  // repeated .GMObject m_Object = 3;
  for (int i = 0; i < this->m_object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_object(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUserPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PackID = 1;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

    // required int32 m_Count = 2;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GMObject m_Object = 3;
  total_size += 1 * this->m_object_size();
  for (int i = 0; i < this->m_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_object(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUserPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUserPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUserPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUserPackage::MergeFrom(const GMUserPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_object_.MergeFrom(from.m_object_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUserPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUserPackage::CopyFrom(const GMUserPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUserPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < m_object_size(); i++) {
    if (!this->m_object(i).IsInitialized()) return false;
  }
  return true;
}

void GMUserPackage::Swap(GMUserPackage* other) {
  if (other != this) {
    std::swap(m_packid_, other->m_packid_);
    std::swap(m_count_, other->m_count_);
    m_object_.Swap(&other->m_object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUserPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUserPackage_descriptor_;
  metadata.reflection = GMUserPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMObject::kMGMIDFieldNumber;
const int GMObject::kMTypeIDFieldNumber;
const int GMObject::kMPackIDFieldNumber;
const int GMObject::kMGridFieldNumber;
const int GMObject::kMCountFieldNumber;
const int GMObject::kMBindFieldNumber;
const int GMObject::kMSealFieldNumber;
const int GMObject::kMIndateFieldNumber;
const int GMObject::kMWayFieldNumber;
#endif  // !_MSC_VER

GMObject::GMObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMObject::InitAsDefaultInstance() {
}

GMObject::GMObject(const GMObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMObject::SharedCtor() {
  _cached_size_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_typeid_ = 0;
  m_packid_ = 0;
  m_grid_ = 0;
  m_count_ = 0;
  m_bind_ = 0;
  m_seal_ = 0;
  m_indate_ = 0;
  m_way_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMObject::~GMObject() {
  SharedDtor();
}

void GMObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMObject_descriptor_;
}

const GMObject& GMObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMObject* GMObject::default_instance_ = NULL;

GMObject* GMObject::New() const {
  return new GMObject;
}

void GMObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_typeid_ = 0;
    m_packid_ = 0;
    m_grid_ = 0;
    m_count_ = 0;
    m_bind_ = 0;
    m_seal_ = 0;
    m_indate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_way_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_GMID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_TypeID;
        break;
      }

      // required int32 m_TypeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_PackID;
        break;
      }

      // required int32 m_PackID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_Grid;
        break;
      }

      // required int32 m_Grid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grid_)));
          set_has_m_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_Bind;
        break;
      }

      // required int32 m_Bind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bind_)));
          set_has_m_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_Seal;
        break;
      }

      // required int32 m_Seal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Seal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seal_)));
          set_has_m_seal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_Indate;
        break;
      }

      // required int32 m_Indate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Indate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_indate_)));
          set_has_m_indate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_way;
        break;
      }

      // optional int32 m_way = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_way_)));
          set_has_m_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_GMID = 1;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_gmid(), output);
  }

  // required int32 m_TypeID = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_typeid(), output);
  }

  // required int32 m_PackID = 3;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_packid(), output);
  }

  // required int32 m_Grid = 4;
  if (has_m_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_grid(), output);
  }

  // required int32 m_Count = 5;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_count(), output);
  }

  // required int32 m_Bind = 6;
  if (has_m_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_bind(), output);
  }

  // required int32 m_Seal = 7;
  if (has_m_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_seal(), output);
  }

  // required int32 m_Indate = 8;
  if (has_m_indate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_indate(), output);
  }

  // optional int32 m_way = 9;
  if (has_m_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_way(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_GMID = 1;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_gmid(), target);
  }

  // required int32 m_TypeID = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_typeid(), target);
  }

  // required int32 m_PackID = 3;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_packid(), target);
  }

  // required int32 m_Grid = 4;
  if (has_m_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_grid(), target);
  }

  // required int32 m_Count = 5;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_count(), target);
  }

  // required int32 m_Bind = 6;
  if (has_m_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_bind(), target);
  }

  // required int32 m_Seal = 7;
  if (has_m_seal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_seal(), target);
  }

  // required int32 m_Indate = 8;
  if (has_m_indate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_indate(), target);
  }

  // optional int32 m_way = 9;
  if (has_m_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_way(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_GMID = 1;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_TypeID = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // required int32 m_PackID = 3;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

    // required int32 m_Grid = 4;
    if (has_m_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grid());
    }

    // required int32 m_Count = 5;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // required int32 m_Bind = 6;
    if (has_m_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bind());
    }

    // required int32 m_Seal = 7;
    if (has_m_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seal());
    }

    // required int32 m_Indate = 8;
    if (has_m_indate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_indate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_way = 9;
    if (has_m_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_way());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMObject::MergeFrom(const GMObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
    if (from.has_m_grid()) {
      set_m_grid(from.m_grid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_bind()) {
      set_m_bind(from.m_bind());
    }
    if (from.has_m_seal()) {
      set_m_seal(from.m_seal());
    }
    if (from.has_m_indate()) {
      set_m_indate(from.m_indate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_way()) {
      set_m_way(from.m_way());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMObject::CopyFrom(const GMObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GMObject::Swap(GMObject* other) {
  if (other != this) {
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_packid_, other->m_packid_);
    std::swap(m_grid_, other->m_grid_);
    std::swap(m_count_, other->m_count_);
    std::swap(m_bind_, other->m_bind_);
    std::swap(m_seal_, other->m_seal_);
    std::swap(m_indate_, other->m_indate_);
    std::swap(m_way_, other->m_way_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMObject_descriptor_;
  metadata.reflection = GMObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPackageAllGrid::kMPackIDFieldNumber;
const int GMPackageAllGrid::kMGridsFieldNumber;
#endif  // !_MSC_VER

GMPackageAllGrid::GMPackageAllGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPackageAllGrid::InitAsDefaultInstance() {
}

GMPackageAllGrid::GMPackageAllGrid(const GMPackageAllGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPackageAllGrid::SharedCtor() {
  _cached_size_ = 0;
  m_packid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPackageAllGrid::~GMPackageAllGrid() {
  SharedDtor();
}

void GMPackageAllGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPackageAllGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPackageAllGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPackageAllGrid_descriptor_;
}

const GMPackageAllGrid& GMPackageAllGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMPackageAllGrid* GMPackageAllGrid::default_instance_ = NULL;

GMPackageAllGrid* GMPackageAllGrid::New() const {
  return new GMPackageAllGrid;
}

void GMPackageAllGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_packid_ = 0;
  }
  m_grids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPackageAllGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Grids;
        break;
      }

      // repeated .GMObject m_Grids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Grids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_grids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Grids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPackageAllGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_packid(), output);
  }

  // repeated .GMObject m_Grids = 2;
  for (int i = 0; i < this->m_grids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_grids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPackageAllGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_packid(), target);
  }

  // repeated .GMObject m_Grids = 2;
  for (int i = 0; i < this->m_grids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_grids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPackageAllGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PackID = 1;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

  }
  // repeated .GMObject m_Grids = 2;
  total_size += 1 * this->m_grids_size();
  for (int i = 0; i < this->m_grids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_grids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPackageAllGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPackageAllGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPackageAllGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPackageAllGrid::MergeFrom(const GMPackageAllGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_grids_.MergeFrom(from.m_grids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPackageAllGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPackageAllGrid::CopyFrom(const GMPackageAllGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPackageAllGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_grids_size(); i++) {
    if (!this->m_grids(i).IsInitialized()) return false;
  }
  return true;
}

void GMPackageAllGrid::Swap(GMPackageAllGrid* other) {
  if (other != this) {
    std::swap(m_packid_, other->m_packid_);
    m_grids_.Swap(&other->m_grids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPackageAllGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPackageAllGrid_descriptor_;
  metadata.reflection = GMPackageAllGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPackTidy::kMPackIDFieldNumber;
#endif  // !_MSC_VER

GMPackTidy::GMPackTidy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPackTidy::InitAsDefaultInstance() {
}

GMPackTidy::GMPackTidy(const GMPackTidy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPackTidy::SharedCtor() {
  _cached_size_ = 0;
  m_packid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPackTidy::~GMPackTidy() {
  SharedDtor();
}

void GMPackTidy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPackTidy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPackTidy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPackTidy_descriptor_;
}

const GMPackTidy& GMPackTidy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMPackTidy* GMPackTidy::default_instance_ = NULL;

GMPackTidy* GMPackTidy::New() const {
  return new GMPackTidy;
}

void GMPackTidy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_packid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPackTidy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPackTidy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_packid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPackTidy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_packid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPackTidy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PackID = 1;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPackTidy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPackTidy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPackTidy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPackTidy::MergeFrom(const GMPackTidy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPackTidy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPackTidy::CopyFrom(const GMPackTidy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPackTidy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMPackTidy::Swap(GMPackTidy* other) {
  if (other != this) {
    std::swap(m_packid_, other->m_packid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPackTidy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPackTidy_descriptor_;
  metadata.reflection = GMPackTidy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPackTidyResult::kMPackIDFieldNumber;
const int GMPackTidyResult::kMResutlFieldNumber;
#endif  // !_MSC_VER

GMPackTidyResult::GMPackTidyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPackTidyResult::InitAsDefaultInstance() {
}

GMPackTidyResult::GMPackTidyResult(const GMPackTidyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPackTidyResult::SharedCtor() {
  _cached_size_ = 0;
  m_packid_ = 0;
  m_resutl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPackTidyResult::~GMPackTidyResult() {
  SharedDtor();
}

void GMPackTidyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPackTidyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPackTidyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPackTidyResult_descriptor_;
}

const GMPackTidyResult& GMPackTidyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMPackTidyResult* GMPackTidyResult::default_instance_ = NULL;

GMPackTidyResult* GMPackTidyResult::New() const {
  return new GMPackTidyResult;
}

void GMPackTidyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_packid_ = 0;
    m_resutl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPackTidyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Resutl;
        break;
      }

      // required int32 m_Resutl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Resutl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resutl_)));
          set_has_m_resutl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPackTidyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_packid(), output);
  }

  // required int32 m_Resutl = 2;
  if (has_m_resutl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_resutl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPackTidyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_packid(), target);
  }

  // required int32 m_Resutl = 2;
  if (has_m_resutl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_resutl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPackTidyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PackID = 1;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

    // required int32 m_Resutl = 2;
    if (has_m_resutl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resutl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPackTidyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPackTidyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPackTidyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPackTidyResult::MergeFrom(const GMPackTidyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
    if (from.has_m_resutl()) {
      set_m_resutl(from.m_resutl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPackTidyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPackTidyResult::CopyFrom(const GMPackTidyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPackTidyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMPackTidyResult::Swap(GMPackTidyResult* other) {
  if (other != this) {
    std::swap(m_packid_, other->m_packid_);
    std::swap(m_resutl_, other->m_resutl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPackTidyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPackTidyResult_descriptor_;
  metadata.reflection = GMPackTidyResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPackSplit::kMPackIDFieldNumber;
const int GMPackSplit::kMGridFieldNumber;
const int GMPackSplit::kMCountFieldNumber;
const int GMPackSplit::kMGMIDFieldNumber;
#endif  // !_MSC_VER

GMPackSplit::GMPackSplit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPackSplit::InitAsDefaultInstance() {
}

GMPackSplit::GMPackSplit(const GMPackSplit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPackSplit::SharedCtor() {
  _cached_size_ = 0;
  m_packid_ = 0;
  m_grid_ = 0;
  m_count_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPackSplit::~GMPackSplit() {
  SharedDtor();
}

void GMPackSplit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPackSplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPackSplit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPackSplit_descriptor_;
}

const GMPackSplit& GMPackSplit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMPackSplit* GMPackSplit::default_instance_ = NULL;

GMPackSplit* GMPackSplit::New() const {
  return new GMPackSplit;
}

void GMPackSplit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_packid_ = 0;
    m_grid_ = 0;
    m_count_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPackSplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Grid;
        break;
      }

      // required int32 m_Grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grid_)));
          set_has_m_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_GMID;
        break;
      }

      // required int64 m_GMID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPackSplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_packid(), output);
  }

  // required int32 m_Grid = 2;
  if (has_m_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_grid(), output);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_count(), output);
  }

  // required int64 m_GMID = 4;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPackSplit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_packid(), target);
  }

  // required int32 m_Grid = 2;
  if (has_m_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_grid(), target);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_count(), target);
  }

  // required int64 m_GMID = 4;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPackSplit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PackID = 1;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

    // required int32 m_Grid = 2;
    if (has_m_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grid());
    }

    // required int32 m_Count = 3;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // required int64 m_GMID = 4;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPackSplit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPackSplit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPackSplit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPackSplit::MergeFrom(const GMPackSplit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
    if (from.has_m_grid()) {
      set_m_grid(from.m_grid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPackSplit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPackSplit::CopyFrom(const GMPackSplit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPackSplit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GMPackSplit::Swap(GMPackSplit* other) {
  if (other != this) {
    std::swap(m_packid_, other->m_packid_);
    std::swap(m_grid_, other->m_grid_);
    std::swap(m_count_, other->m_count_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPackSplit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPackSplit_descriptor_;
  metadata.reflection = GMPackSplit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMPackSplitResult::kMPackIDFieldNumber;
const int GMPackSplitResult::kMGridFieldNumber;
const int GMPackSplitResult::kMCountFieldNumber;
const int GMPackSplitResult::kMGMIDFieldNumber;
const int GMPackSplitResult::kMResultFieldNumber;
const int GMPackSplitResult::kMNewGridFieldNumber;
const int GMPackSplitResult::kMNewGMIDFieldNumber;
#endif  // !_MSC_VER

GMPackSplitResult::GMPackSplitResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMPackSplitResult::InitAsDefaultInstance() {
}

GMPackSplitResult::GMPackSplitResult(const GMPackSplitResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMPackSplitResult::SharedCtor() {
  _cached_size_ = 0;
  m_packid_ = 0;
  m_grid_ = 0;
  m_count_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_result_ = 0;
  m_newgrid_ = 0;
  m_newgmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMPackSplitResult::~GMPackSplitResult() {
  SharedDtor();
}

void GMPackSplitResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMPackSplitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMPackSplitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMPackSplitResult_descriptor_;
}

const GMPackSplitResult& GMPackSplitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMPackSplitResult* GMPackSplitResult::default_instance_ = NULL;

GMPackSplitResult* GMPackSplitResult::New() const {
  return new GMPackSplitResult;
}

void GMPackSplitResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_packid_ = 0;
    m_grid_ = 0;
    m_count_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_result_ = 0;
    m_newgrid_ = 0;
    m_newgmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMPackSplitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Grid;
        break;
      }

      // required int32 m_Grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grid_)));
          set_has_m_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_GMID;
        break;
      }

      // required int64 m_GMID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Result;
        break;
      }

      // required int32 m_Result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_NewGrid;
        break;
      }

      // required int32 m_NewGrid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_NewGrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_newgrid_)));
          set_has_m_newgrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_NewGMID;
        break;
      }

      // required int64 m_NewGMID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_NewGMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_newgmid_)));
          set_has_m_newgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMPackSplitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_packid(), output);
  }

  // required int32 m_Grid = 2;
  if (has_m_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_grid(), output);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_count(), output);
  }

  // required int64 m_GMID = 4;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_gmid(), output);
  }

  // required int32 m_Result = 5;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_result(), output);
  }

  // required int32 m_NewGrid = 6;
  if (has_m_newgrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_newgrid(), output);
  }

  // required int64 m_NewGMID = 7;
  if (has_m_newgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_newgmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMPackSplitResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PackID = 1;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_packid(), target);
  }

  // required int32 m_Grid = 2;
  if (has_m_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_grid(), target);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_count(), target);
  }

  // required int64 m_GMID = 4;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_gmid(), target);
  }

  // required int32 m_Result = 5;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_result(), target);
  }

  // required int32 m_NewGrid = 6;
  if (has_m_newgrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_newgrid(), target);
  }

  // required int64 m_NewGMID = 7;
  if (has_m_newgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->m_newgmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMPackSplitResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PackID = 1;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

    // required int32 m_Grid = 2;
    if (has_m_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grid());
    }

    // required int32 m_Count = 3;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // required int64 m_GMID = 4;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_Result = 5;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_NewGrid = 6;
    if (has_m_newgrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_newgrid());
    }

    // required int64 m_NewGMID = 7;
    if (has_m_newgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_newgmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMPackSplitResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMPackSplitResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMPackSplitResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMPackSplitResult::MergeFrom(const GMPackSplitResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
    if (from.has_m_grid()) {
      set_m_grid(from.m_grid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_newgrid()) {
      set_m_newgrid(from.m_newgrid());
    }
    if (from.has_m_newgmid()) {
      set_m_newgmid(from.m_newgmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMPackSplitResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMPackSplitResult::CopyFrom(const GMPackSplitResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMPackSplitResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GMPackSplitResult::Swap(GMPackSplitResult* other) {
  if (other != this) {
    std::swap(m_packid_, other->m_packid_);
    std::swap(m_grid_, other->m_grid_);
    std::swap(m_count_, other->m_count_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_result_, other->m_result_);
    std::swap(m_newgrid_, other->m_newgrid_);
    std::swap(m_newgmid_, other->m_newgmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMPackSplitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMPackSplitResult_descriptor_;
  metadata.reflection = GMPackSplitResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UnlockGrid::kPackIDFieldNumber;
#endif  // !_MSC_VER

GM_UnlockGrid::GM_UnlockGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UnlockGrid::InitAsDefaultInstance() {
}

GM_UnlockGrid::GM_UnlockGrid(const GM_UnlockGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UnlockGrid::SharedCtor() {
  _cached_size_ = 0;
  packid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UnlockGrid::~GM_UnlockGrid() {
  SharedDtor();
}

void GM_UnlockGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UnlockGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UnlockGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UnlockGrid_descriptor_;
}

const GM_UnlockGrid& GM_UnlockGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GM_UnlockGrid* GM_UnlockGrid::default_instance_ = NULL;

GM_UnlockGrid* GM_UnlockGrid::New() const {
  return new GM_UnlockGrid;
}

void GM_UnlockGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UnlockGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packid_)));
          set_has_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UnlockGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PackID = 1;
  if (has_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UnlockGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PackID = 1;
  if (has_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UnlockGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PackID = 1;
    if (has_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UnlockGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UnlockGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UnlockGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UnlockGrid::MergeFrom(const GM_UnlockGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packid()) {
      set_packid(from.packid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UnlockGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UnlockGrid::CopyFrom(const GM_UnlockGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UnlockGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_UnlockGrid::Swap(GM_UnlockGrid* other) {
  if (other != this) {
    std::swap(packid_, other->packid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UnlockGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UnlockGrid_descriptor_;
  metadata.reflection = GM_UnlockGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UnlockGridReturn::kResultFieldNumber;
const int GM_UnlockGridReturn::kPackIDFieldNumber;
#endif  // !_MSC_VER

GM_UnlockGridReturn::GM_UnlockGridReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UnlockGridReturn::InitAsDefaultInstance() {
}

GM_UnlockGridReturn::GM_UnlockGridReturn(const GM_UnlockGridReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UnlockGridReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  packid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UnlockGridReturn::~GM_UnlockGridReturn() {
  SharedDtor();
}

void GM_UnlockGridReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UnlockGridReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UnlockGridReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UnlockGridReturn_descriptor_;
}

const GM_UnlockGridReturn& GM_UnlockGridReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GM_UnlockGridReturn* GM_UnlockGridReturn::default_instance_ = NULL;

GM_UnlockGridReturn* GM_UnlockGridReturn::New() const {
  return new GM_UnlockGridReturn;
}

void GM_UnlockGridReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    packid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UnlockGridReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PackID;
        break;
      }

      // required int32 PackID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packid_)));
          set_has_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UnlockGridReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 PackID = 2;
  if (has_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UnlockGridReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 PackID = 2;
  if (has_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UnlockGridReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 PackID = 2;
    if (has_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UnlockGridReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UnlockGridReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UnlockGridReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UnlockGridReturn::MergeFrom(const GM_UnlockGridReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_packid()) {
      set_packid(from.packid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UnlockGridReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UnlockGridReturn::CopyFrom(const GM_UnlockGridReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UnlockGridReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_UnlockGridReturn::Swap(GM_UnlockGridReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(packid_, other->packid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UnlockGridReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UnlockGridReturn_descriptor_;
  metadata.reflection = GM_UnlockGridReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PackageGridNotify::kPackIDFieldNumber;
const int GM_PackageGridNotify::kValidCountFieldNumber;
#endif  // !_MSC_VER

GM_PackageGridNotify::GM_PackageGridNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PackageGridNotify::InitAsDefaultInstance() {
}

GM_PackageGridNotify::GM_PackageGridNotify(const GM_PackageGridNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PackageGridNotify::SharedCtor() {
  _cached_size_ = 0;
  packid_ = 0;
  validcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PackageGridNotify::~GM_PackageGridNotify() {
  SharedDtor();
}

void GM_PackageGridNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PackageGridNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PackageGridNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PackageGridNotify_descriptor_;
}

const GM_PackageGridNotify& GM_PackageGridNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GM_PackageGridNotify* GM_PackageGridNotify::default_instance_ = NULL;

GM_PackageGridNotify* GM_PackageGridNotify::New() const {
  return new GM_PackageGridNotify;
}

void GM_PackageGridNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packid_ = 0;
    validcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PackageGridNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PackID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packid_)));
          set_has_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ValidCount;
        break;
      }

      // required int32 ValidCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValidCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validcount_)));
          set_has_validcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PackageGridNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PackID = 1;
  if (has_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packid(), output);
  }

  // required int32 ValidCount = 2;
  if (has_validcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->validcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PackageGridNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PackID = 1;
  if (has_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packid(), target);
  }

  // required int32 ValidCount = 2;
  if (has_validcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->validcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PackageGridNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PackID = 1;
    if (has_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packid());
    }

    // required int32 ValidCount = 2;
    if (has_validcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PackageGridNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PackageGridNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PackageGridNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PackageGridNotify::MergeFrom(const GM_PackageGridNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packid()) {
      set_packid(from.packid());
    }
    if (from.has_validcount()) {
      set_validcount(from.validcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PackageGridNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PackageGridNotify::CopyFrom(const GM_PackageGridNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PackageGridNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_PackageGridNotify::Swap(GM_PackageGridNotify* other) {
  if (other != this) {
    std::swap(packid_, other->packid_);
    std::swap(validcount_, other->validcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PackageGridNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PackageGridNotify_descriptor_;
  metadata.reflection = GM_PackageGridNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMStoreObject::kGmidFieldNumber;
#endif  // !_MSC_VER

GMStoreObject::GMStoreObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMStoreObject::InitAsDefaultInstance() {
}

GMStoreObject::GMStoreObject(const GMStoreObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMStoreObject::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMStoreObject::~GMStoreObject() {
  SharedDtor();
}

void GMStoreObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMStoreObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMStoreObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMStoreObject_descriptor_;
}

const GMStoreObject& GMStoreObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMStoreObject* GMStoreObject::default_instance_ = NULL;

GMStoreObject* GMStoreObject::New() const {
  return new GMStoreObject;
}

void GMStoreObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMStoreObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMStoreObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMStoreObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMStoreObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMStoreObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMStoreObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMStoreObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMStoreObject::MergeFrom(const GMStoreObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMStoreObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMStoreObject::CopyFrom(const GMStoreObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMStoreObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMStoreObject::Swap(GMStoreObject* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMStoreObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMStoreObject_descriptor_;
  metadata.reflection = GMStoreObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMStoreObjectResult::kResultFieldNumber;
const int GMStoreObjectResult::kGmidFieldNumber;
#endif  // !_MSC_VER

GMStoreObjectResult::GMStoreObjectResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMStoreObjectResult::InitAsDefaultInstance() {
}

GMStoreObjectResult::GMStoreObjectResult(const GMStoreObjectResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMStoreObjectResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMStoreObjectResult::~GMStoreObjectResult() {
  SharedDtor();
}

void GMStoreObjectResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMStoreObjectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMStoreObjectResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMStoreObjectResult_descriptor_;
}

const GMStoreObjectResult& GMStoreObjectResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GMStoreObjectResult* GMStoreObjectResult::default_instance_ = NULL;

GMStoreObjectResult* GMStoreObjectResult::New() const {
  return new GMStoreObjectResult;
}

void GMStoreObjectResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMStoreObjectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // required int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMStoreObjectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMStoreObjectResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMStoreObjectResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMStoreObjectResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMStoreObjectResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMStoreObjectResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMStoreObjectResult::MergeFrom(const GMStoreObjectResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMStoreObjectResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMStoreObjectResult::CopyFrom(const GMStoreObjectResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMStoreObjectResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMStoreObjectResult::Swap(GMStoreObjectResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMStoreObjectResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMStoreObjectResult_descriptor_;
  metadata.reflection = GMStoreObjectResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RestoreObject::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_RestoreObject::GM_RestoreObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RestoreObject::InitAsDefaultInstance() {
}

GM_RestoreObject::GM_RestoreObject(const GM_RestoreObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RestoreObject::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RestoreObject::~GM_RestoreObject() {
  SharedDtor();
}

void GM_RestoreObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RestoreObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RestoreObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RestoreObject_descriptor_;
}

const GM_RestoreObject& GM_RestoreObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GM_RestoreObject* GM_RestoreObject::default_instance_ = NULL;

GM_RestoreObject* GM_RestoreObject::New() const {
  return new GM_RestoreObject;
}

void GM_RestoreObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RestoreObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RestoreObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RestoreObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RestoreObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RestoreObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RestoreObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RestoreObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RestoreObject::MergeFrom(const GM_RestoreObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RestoreObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RestoreObject::CopyFrom(const GM_RestoreObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RestoreObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RestoreObject::Swap(GM_RestoreObject* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RestoreObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RestoreObject_descriptor_;
  metadata.reflection = GM_RestoreObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RestoreObjectResult::kResultFieldNumber;
const int GM_RestoreObjectResult::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_RestoreObjectResult::GM_RestoreObjectResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RestoreObjectResult::InitAsDefaultInstance() {
}

GM_RestoreObjectResult::GM_RestoreObjectResult(const GM_RestoreObjectResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RestoreObjectResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RestoreObjectResult::~GM_RestoreObjectResult() {
  SharedDtor();
}

void GM_RestoreObjectResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RestoreObjectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RestoreObjectResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RestoreObjectResult_descriptor_;
}

const GM_RestoreObjectResult& GM_RestoreObjectResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GM_RestoreObjectResult* GM_RestoreObjectResult::default_instance_ = NULL;

GM_RestoreObjectResult* GM_RestoreObjectResult::New() const {
  return new GM_RestoreObjectResult;
}

void GM_RestoreObjectResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RestoreObjectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // required int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RestoreObjectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RestoreObjectResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RestoreObjectResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RestoreObjectResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RestoreObjectResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RestoreObjectResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RestoreObjectResult::MergeFrom(const GM_RestoreObjectResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RestoreObjectResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RestoreObjectResult::CopyFrom(const GM_RestoreObjectResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RestoreObjectResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_RestoreObjectResult::Swap(GM_RestoreObjectResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RestoreObjectResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RestoreObjectResult_descriptor_;
  metadata.reflection = GM_RestoreObjectResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PickUpTempPackageResult::kResultFieldNumber;
#endif  // !_MSC_VER

GM_PickUpTempPackageResult::GM_PickUpTempPackageResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PickUpTempPackageResult::InitAsDefaultInstance() {
}

GM_PickUpTempPackageResult::GM_PickUpTempPackageResult(const GM_PickUpTempPackageResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PickUpTempPackageResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PickUpTempPackageResult::~GM_PickUpTempPackageResult() {
  SharedDtor();
}

void GM_PickUpTempPackageResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PickUpTempPackageResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PickUpTempPackageResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PickUpTempPackageResult_descriptor_;
}

const GM_PickUpTempPackageResult& GM_PickUpTempPackageResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_package_2etxt();
  return *default_instance_;
}

GM_PickUpTempPackageResult* GM_PickUpTempPackageResult::default_instance_ = NULL;

GM_PickUpTempPackageResult* GM_PickUpTempPackageResult::New() const {
  return new GM_PickUpTempPackageResult;
}

void GM_PickUpTempPackageResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PickUpTempPackageResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PickUpTempPackageResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PickUpTempPackageResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PickUpTempPackageResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PickUpTempPackageResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PickUpTempPackageResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PickUpTempPackageResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PickUpTempPackageResult::MergeFrom(const GM_PickUpTempPackageResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PickUpTempPackageResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PickUpTempPackageResult::CopyFrom(const GM_PickUpTempPackageResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PickUpTempPackageResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PickUpTempPackageResult::Swap(GM_PickUpTempPackageResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PickUpTempPackageResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PickUpTempPackageResult_descriptor_;
  metadata.reflection = GM_PickUpTempPackageResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
