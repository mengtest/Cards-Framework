// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fightSanHuang.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fightSanHuang.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMBraveStoreObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBraveStoreObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMBraveStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBraveStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMBraveStoreReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBraveStoreReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMBraveStoreBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBraveStoreBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMBraveStoreBuyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBraveStoreBuyResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fightSanHuang_2etxt() {
  protobuf_AddDesc_fightSanHuang_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fightSanHuang.txt");
  GOOGLE_CHECK(file != NULL);
  GMBraveStoreObject_descriptor_ = file->message_type(0);
  static const int GMBraveStoreObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreObject, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreObject, m_remaindercount_),
  };
  GMBraveStoreObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBraveStoreObject_descriptor_,
      GMBraveStoreObject::default_instance_,
      GMBraveStoreObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBraveStoreObject));
  GMBraveStore_descriptor_ = file->message_type(1);
  static const int GMBraveStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStore, m_sanhuangling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStore, m_storeobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStore, resetcost_),
  };
  GMBraveStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBraveStore_descriptor_,
      GMBraveStore::default_instance_,
      GMBraveStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBraveStore));
  GMBraveStoreReset_descriptor_ = file->message_type(2);
  static const int GMBraveStoreReset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreReset, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreReset, m_sanhuangling_),
  };
  GMBraveStoreReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBraveStoreReset_descriptor_,
      GMBraveStoreReset::default_instance_,
      GMBraveStoreReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBraveStoreReset));
  GMBraveStoreBuy_descriptor_ = file->message_type(3);
  static const int GMBraveStoreBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuy, m_objectid_),
  };
  GMBraveStoreBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBraveStoreBuy_descriptor_,
      GMBraveStoreBuy::default_instance_,
      GMBraveStoreBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBraveStoreBuy));
  GMBraveStoreBuyResult_descriptor_ = file->message_type(4);
  static const int GMBraveStoreBuyResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuyResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuyResult, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuyResult, m_sanhuangling_),
  };
  GMBraveStoreBuyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBraveStoreBuyResult_descriptor_,
      GMBraveStoreBuyResult::default_instance_,
      GMBraveStoreBuyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBraveStoreBuyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBraveStoreBuyResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fightSanHuang_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBraveStoreObject_descriptor_, &GMBraveStoreObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBraveStore_descriptor_, &GMBraveStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBraveStoreReset_descriptor_, &GMBraveStoreReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBraveStoreBuy_descriptor_, &GMBraveStoreBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBraveStoreBuyResult_descriptor_, &GMBraveStoreBuyResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fightSanHuang_2etxt() {
  delete GMBraveStoreObject::default_instance_;
  delete GMBraveStoreObject_reflection_;
  delete GMBraveStore::default_instance_;
  delete GMBraveStore_reflection_;
  delete GMBraveStoreReset::default_instance_;
  delete GMBraveStoreReset_reflection_;
  delete GMBraveStoreBuy::default_instance_;
  delete GMBraveStoreBuy_reflection_;
  delete GMBraveStoreBuyResult::default_instance_;
  delete GMBraveStoreBuyResult_reflection_;
}

void protobuf_AddDesc_fightSanHuang_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021fightSanHuang.txt\"B\n\022GMBraveStoreObjec"
    "t\022\022\n\nm_objectid\030\001 \002(\005\022\030\n\020m_remaindercoun"
    "t\030\002 \002(\005\"f\n\014GMBraveStore\022\026\n\016m_sanhuanglin"
    "g\030\001 \002(\005\022+\n\016m_storeobjects\030\002 \003(\0132\023.GMBrav"
    "eStoreObject\022\021\n\tresetcost\030\003 \001(\005\"=\n\021GMBra"
    "veStoreReset\022\020\n\010m_result\030\001 \002(\005\022\026\n\016m_sanh"
    "uangling\030\002 \002(\005\"%\n\017GMBraveStoreBuy\022\022\n\nm_o"
    "bjectid\030\001 \002(\005\"U\n\025GMBraveStoreBuyResult\022\020"
    "\n\010m_result\030\001 \002(\005\022\022\n\nm_objectid\030\002 \002(\005\022\026\n\016"
    "m_sanhuangling\030\003 \002(\005", 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fightSanHuang.txt", &protobuf_RegisterTypes);
  GMBraveStoreObject::default_instance_ = new GMBraveStoreObject();
  GMBraveStore::default_instance_ = new GMBraveStore();
  GMBraveStoreReset::default_instance_ = new GMBraveStoreReset();
  GMBraveStoreBuy::default_instance_ = new GMBraveStoreBuy();
  GMBraveStoreBuyResult::default_instance_ = new GMBraveStoreBuyResult();
  GMBraveStoreObject::default_instance_->InitAsDefaultInstance();
  GMBraveStore::default_instance_->InitAsDefaultInstance();
  GMBraveStoreReset::default_instance_->InitAsDefaultInstance();
  GMBraveStoreBuy::default_instance_->InitAsDefaultInstance();
  GMBraveStoreBuyResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fightSanHuang_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fightSanHuang_2etxt {
  StaticDescriptorInitializer_fightSanHuang_2etxt() {
    protobuf_AddDesc_fightSanHuang_2etxt();
  }
} static_descriptor_initializer_fightSanHuang_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMBraveStoreObject::kMObjectidFieldNumber;
const int GMBraveStoreObject::kMRemaindercountFieldNumber;
#endif  // !_MSC_VER

GMBraveStoreObject::GMBraveStoreObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBraveStoreObject::InitAsDefaultInstance() {
}

GMBraveStoreObject::GMBraveStoreObject(const GMBraveStoreObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBraveStoreObject::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_remaindercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBraveStoreObject::~GMBraveStoreObject() {
  SharedDtor();
}

void GMBraveStoreObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMBraveStoreObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBraveStoreObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBraveStoreObject_descriptor_;
}

const GMBraveStoreObject& GMBraveStoreObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightSanHuang_2etxt();
  return *default_instance_;
}

GMBraveStoreObject* GMBraveStoreObject::default_instance_ = NULL;

GMBraveStoreObject* GMBraveStoreObject::New() const {
  return new GMBraveStoreObject;
}

void GMBraveStoreObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_remaindercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBraveStoreObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_remaindercount;
        break;
      }

      // required int32 m_remaindercount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_remaindercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_remaindercount_)));
          set_has_m_remaindercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBraveStoreObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // required int32 m_remaindercount = 2;
  if (has_m_remaindercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_remaindercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBraveStoreObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // required int32 m_remaindercount = 2;
  if (has_m_remaindercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_remaindercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBraveStoreObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // required int32 m_remaindercount = 2;
    if (has_m_remaindercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_remaindercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBraveStoreObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBraveStoreObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBraveStoreObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBraveStoreObject::MergeFrom(const GMBraveStoreObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_remaindercount()) {
      set_m_remaindercount(from.m_remaindercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBraveStoreObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBraveStoreObject::CopyFrom(const GMBraveStoreObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBraveStoreObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMBraveStoreObject::Swap(GMBraveStoreObject* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_remaindercount_, other->m_remaindercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBraveStoreObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBraveStoreObject_descriptor_;
  metadata.reflection = GMBraveStoreObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBraveStore::kMSanhuanglingFieldNumber;
const int GMBraveStore::kMStoreobjectsFieldNumber;
const int GMBraveStore::kResetcostFieldNumber;
#endif  // !_MSC_VER

GMBraveStore::GMBraveStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBraveStore::InitAsDefaultInstance() {
}

GMBraveStore::GMBraveStore(const GMBraveStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBraveStore::SharedCtor() {
  _cached_size_ = 0;
  m_sanhuangling_ = 0;
  resetcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBraveStore::~GMBraveStore() {
  SharedDtor();
}

void GMBraveStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMBraveStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBraveStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBraveStore_descriptor_;
}

const GMBraveStore& GMBraveStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightSanHuang_2etxt();
  return *default_instance_;
}

GMBraveStore* GMBraveStore::default_instance_ = NULL;

GMBraveStore* GMBraveStore::New() const {
  return new GMBraveStore;
}

void GMBraveStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_sanhuangling_ = 0;
    resetcost_ = 0;
  }
  m_storeobjects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBraveStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_sanhuangling = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sanhuangling_)));
          set_has_m_sanhuangling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_storeobjects;
        break;
      }

      // repeated .GMBraveStoreObject m_storeobjects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_storeobjects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_storeobjects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_storeobjects;
        if (input->ExpectTag(24)) goto parse_resetcost;
        break;
      }

      // optional int32 resetcost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetcost_)));
          set_has_resetcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBraveStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_sanhuangling = 1;
  if (has_m_sanhuangling()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_sanhuangling(), output);
  }

  // repeated .GMBraveStoreObject m_storeobjects = 2;
  for (int i = 0; i < this->m_storeobjects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_storeobjects(i), output);
  }

  // optional int32 resetcost = 3;
  if (has_resetcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resetcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBraveStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_sanhuangling = 1;
  if (has_m_sanhuangling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_sanhuangling(), target);
  }

  // repeated .GMBraveStoreObject m_storeobjects = 2;
  for (int i = 0; i < this->m_storeobjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_storeobjects(i), target);
  }

  // optional int32 resetcost = 3;
  if (has_resetcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resetcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBraveStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_sanhuangling = 1;
    if (has_m_sanhuangling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sanhuangling());
    }

    // optional int32 resetcost = 3;
    if (has_resetcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetcost());
    }

  }
  // repeated .GMBraveStoreObject m_storeobjects = 2;
  total_size += 1 * this->m_storeobjects_size();
  for (int i = 0; i < this->m_storeobjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_storeobjects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBraveStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBraveStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBraveStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBraveStore::MergeFrom(const GMBraveStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_storeobjects_.MergeFrom(from.m_storeobjects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sanhuangling()) {
      set_m_sanhuangling(from.m_sanhuangling());
    }
    if (from.has_resetcost()) {
      set_resetcost(from.resetcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBraveStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBraveStore::CopyFrom(const GMBraveStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBraveStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_storeobjects_size(); i++) {
    if (!this->m_storeobjects(i).IsInitialized()) return false;
  }
  return true;
}

void GMBraveStore::Swap(GMBraveStore* other) {
  if (other != this) {
    std::swap(m_sanhuangling_, other->m_sanhuangling_);
    m_storeobjects_.Swap(&other->m_storeobjects_);
    std::swap(resetcost_, other->resetcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBraveStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBraveStore_descriptor_;
  metadata.reflection = GMBraveStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBraveStoreReset::kMResultFieldNumber;
const int GMBraveStoreReset::kMSanhuanglingFieldNumber;
#endif  // !_MSC_VER

GMBraveStoreReset::GMBraveStoreReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBraveStoreReset::InitAsDefaultInstance() {
}

GMBraveStoreReset::GMBraveStoreReset(const GMBraveStoreReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBraveStoreReset::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_sanhuangling_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBraveStoreReset::~GMBraveStoreReset() {
  SharedDtor();
}

void GMBraveStoreReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMBraveStoreReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBraveStoreReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBraveStoreReset_descriptor_;
}

const GMBraveStoreReset& GMBraveStoreReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightSanHuang_2etxt();
  return *default_instance_;
}

GMBraveStoreReset* GMBraveStoreReset::default_instance_ = NULL;

GMBraveStoreReset* GMBraveStoreReset::New() const {
  return new GMBraveStoreReset;
}

void GMBraveStoreReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_sanhuangling_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBraveStoreReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_sanhuangling;
        break;
      }

      // required int32 m_sanhuangling = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sanhuangling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sanhuangling_)));
          set_has_m_sanhuangling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBraveStoreReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_sanhuangling = 2;
  if (has_m_sanhuangling()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_sanhuangling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBraveStoreReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_sanhuangling = 2;
  if (has_m_sanhuangling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_sanhuangling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBraveStoreReset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_sanhuangling = 2;
    if (has_m_sanhuangling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sanhuangling());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBraveStoreReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBraveStoreReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBraveStoreReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBraveStoreReset::MergeFrom(const GMBraveStoreReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_sanhuangling()) {
      set_m_sanhuangling(from.m_sanhuangling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBraveStoreReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBraveStoreReset::CopyFrom(const GMBraveStoreReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBraveStoreReset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMBraveStoreReset::Swap(GMBraveStoreReset* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_sanhuangling_, other->m_sanhuangling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBraveStoreReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBraveStoreReset_descriptor_;
  metadata.reflection = GMBraveStoreReset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBraveStoreBuy::kMObjectidFieldNumber;
#endif  // !_MSC_VER

GMBraveStoreBuy::GMBraveStoreBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBraveStoreBuy::InitAsDefaultInstance() {
}

GMBraveStoreBuy::GMBraveStoreBuy(const GMBraveStoreBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBraveStoreBuy::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBraveStoreBuy::~GMBraveStoreBuy() {
  SharedDtor();
}

void GMBraveStoreBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMBraveStoreBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBraveStoreBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBraveStoreBuy_descriptor_;
}

const GMBraveStoreBuy& GMBraveStoreBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightSanHuang_2etxt();
  return *default_instance_;
}

GMBraveStoreBuy* GMBraveStoreBuy::default_instance_ = NULL;

GMBraveStoreBuy* GMBraveStoreBuy::New() const {
  return new GMBraveStoreBuy;
}

void GMBraveStoreBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBraveStoreBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBraveStoreBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBraveStoreBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBraveStoreBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBraveStoreBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBraveStoreBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBraveStoreBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBraveStoreBuy::MergeFrom(const GMBraveStoreBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBraveStoreBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBraveStoreBuy::CopyFrom(const GMBraveStoreBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBraveStoreBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMBraveStoreBuy::Swap(GMBraveStoreBuy* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBraveStoreBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBraveStoreBuy_descriptor_;
  metadata.reflection = GMBraveStoreBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBraveStoreBuyResult::kMResultFieldNumber;
const int GMBraveStoreBuyResult::kMObjectidFieldNumber;
const int GMBraveStoreBuyResult::kMSanhuanglingFieldNumber;
#endif  // !_MSC_VER

GMBraveStoreBuyResult::GMBraveStoreBuyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBraveStoreBuyResult::InitAsDefaultInstance() {
}

GMBraveStoreBuyResult::GMBraveStoreBuyResult(const GMBraveStoreBuyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBraveStoreBuyResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_objectid_ = 0;
  m_sanhuangling_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBraveStoreBuyResult::~GMBraveStoreBuyResult() {
  SharedDtor();
}

void GMBraveStoreBuyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMBraveStoreBuyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBraveStoreBuyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBraveStoreBuyResult_descriptor_;
}

const GMBraveStoreBuyResult& GMBraveStoreBuyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightSanHuang_2etxt();
  return *default_instance_;
}

GMBraveStoreBuyResult* GMBraveStoreBuyResult::default_instance_ = NULL;

GMBraveStoreBuyResult* GMBraveStoreBuyResult::New() const {
  return new GMBraveStoreBuyResult;
}

void GMBraveStoreBuyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_objectid_ = 0;
    m_sanhuangling_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBraveStoreBuyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_objectid;
        break;
      }

      // required int32 m_objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sanhuangling;
        break;
      }

      // required int32 m_sanhuangling = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sanhuangling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sanhuangling_)));
          set_has_m_sanhuangling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBraveStoreBuyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_objectid = 2;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_objectid(), output);
  }

  // required int32 m_sanhuangling = 3;
  if (has_m_sanhuangling()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sanhuangling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBraveStoreBuyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_objectid = 2;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_objectid(), target);
  }

  // required int32 m_sanhuangling = 3;
  if (has_m_sanhuangling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sanhuangling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBraveStoreBuyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_objectid = 2;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // required int32 m_sanhuangling = 3;
    if (has_m_sanhuangling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sanhuangling());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBraveStoreBuyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBraveStoreBuyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBraveStoreBuyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBraveStoreBuyResult::MergeFrom(const GMBraveStoreBuyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_sanhuangling()) {
      set_m_sanhuangling(from.m_sanhuangling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBraveStoreBuyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBraveStoreBuyResult::CopyFrom(const GMBraveStoreBuyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBraveStoreBuyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMBraveStoreBuyResult::Swap(GMBraveStoreBuyResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_sanhuangling_, other->m_sanhuangling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBraveStoreBuyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBraveStoreBuyResult_descriptor_;
  metadata.reflection = GMBraveStoreBuyResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
