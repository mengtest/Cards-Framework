// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity_time.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "activity_time.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_ActivityDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ActivityDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TimeLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TimeLimit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_activity_5ftime_2etxt() {
  protobuf_AddDesc_activity_5ftime_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "activity_time.txt");
  GOOGLE_CHECK(file != NULL);
  GM_ActivityDataList_descriptor_ = file->message_type(0);
  static const int GM_ActivityDataList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityDataList, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityDataList, data_),
  };
  GM_ActivityDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ActivityDataList_descriptor_,
      GM_ActivityDataList::default_instance_,
      GM_ActivityDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ActivityDataList));
  GM_ActivityData_descriptor_ = file->message_type(1);
  static const int GM_ActivityData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, isactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, strtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, isever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, jointimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, buttontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, addtimes_),
  };
  GM_ActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ActivityData_descriptor_,
      GM_ActivityData::default_instance_,
      GM_ActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ActivityData));
  GM_TimeLimit_descriptor_ = file->message_type(2);
  static const int GM_TimeLimit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeLimit, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeLimit, endtime_),
  };
  GM_TimeLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TimeLimit_descriptor_,
      GM_TimeLimit::default_instance_,
      GM_TimeLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TimeLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TimeLimit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_activity_5ftime_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ActivityDataList_descriptor_, &GM_ActivityDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ActivityData_descriptor_, &GM_ActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TimeLimit_descriptor_, &GM_TimeLimit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_activity_5ftime_2etxt() {
  delete GM_ActivityDataList::default_instance_;
  delete GM_ActivityDataList_reflection_;
  delete GM_ActivityData::default_instance_;
  delete GM_ActivityData_reflection_;
  delete GM_TimeLimit::default_instance_;
  delete GM_TimeLimit_reflection_;
}

void protobuf_AddDesc_activity_5ftime_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021activity_time.txt\"D\n\023GM_ActivityDataLi"
    "st\022\r\n\005count\030\001 \002(\005\022\036\n\004data\030\002 \003(\0132\020.GM_Act"
    "ivityData\"\247\002\n\017GM_ActivityData\022\022\n\nactivit"
    "yid\030\001 \002(\005\022\014\n\004name\030\t \002(\t\022\022\n\nisactivity\030\002 "
    "\002(\005\022\025\n\ractivity_type\030\003 \002(\005\022\017\n\007strtime\030\n "
    "\002(\t\022\016\n\006isEver\030\013 \002(\005\022\r\n\005level\030\004 \002(\005\022\r\n\005ru"
    "les\030\005 \002(\t\022\020\n\010describe\030\006 \002(\t\022\r\n\005times\030\007 \002"
    "(\005\022\021\n\tjointimes\030\010 \002(\005\022\022\n\nbuttontype\030\r \002("
    "\005\022\037\n\010timelist\030\014 \003(\0132\r.GM_TimeLimit\022\r\n\005is"
    "add\030\016 \001(\010\022\020\n\010addtimes\030\017 \001(\005\"2\n\014GM_TimeLi"
    "mit\022\021\n\tstarttime\030\001 \002(\005\022\017\n\007endtime\030\002 \002(\005", 439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "activity_time.txt", &protobuf_RegisterTypes);
  GM_ActivityDataList::default_instance_ = new GM_ActivityDataList();
  GM_ActivityData::default_instance_ = new GM_ActivityData();
  GM_TimeLimit::default_instance_ = new GM_TimeLimit();
  GM_ActivityDataList::default_instance_->InitAsDefaultInstance();
  GM_ActivityData::default_instance_->InitAsDefaultInstance();
  GM_TimeLimit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_activity_5ftime_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_activity_5ftime_2etxt {
  StaticDescriptorInitializer_activity_5ftime_2etxt() {
    protobuf_AddDesc_activity_5ftime_2etxt();
  }
} static_descriptor_initializer_activity_5ftime_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_ActivityDataList::kCountFieldNumber;
const int GM_ActivityDataList::kDataFieldNumber;
#endif  // !_MSC_VER

GM_ActivityDataList::GM_ActivityDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ActivityDataList::InitAsDefaultInstance() {
}

GM_ActivityDataList::GM_ActivityDataList(const GM_ActivityDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ActivityDataList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ActivityDataList::~GM_ActivityDataList() {
  SharedDtor();
}

void GM_ActivityDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ActivityDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ActivityDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ActivityDataList_descriptor_;
}

const GM_ActivityDataList& GM_ActivityDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_5ftime_2etxt();
  return *default_instance_;
}

GM_ActivityDataList* GM_ActivityDataList::default_instance_ = NULL;

GM_ActivityDataList* GM_ActivityDataList::New() const {
  return new GM_ActivityDataList;
}

void GM_ActivityDataList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ActivityDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_ActivityData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ActivityDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_ActivityData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ActivityDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_ActivityData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ActivityDataList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_ActivityData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ActivityDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ActivityDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ActivityDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ActivityDataList::MergeFrom(const GM_ActivityDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ActivityDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ActivityDataList::CopyFrom(const GM_ActivityDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ActivityDataList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ActivityDataList::Swap(GM_ActivityDataList* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ActivityDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ActivityDataList_descriptor_;
  metadata.reflection = GM_ActivityDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ActivityData::kActivityidFieldNumber;
const int GM_ActivityData::kNameFieldNumber;
const int GM_ActivityData::kIsactivityFieldNumber;
const int GM_ActivityData::kActivityTypeFieldNumber;
const int GM_ActivityData::kStrtimeFieldNumber;
const int GM_ActivityData::kIsEverFieldNumber;
const int GM_ActivityData::kLevelFieldNumber;
const int GM_ActivityData::kRulesFieldNumber;
const int GM_ActivityData::kDescribeFieldNumber;
const int GM_ActivityData::kTimesFieldNumber;
const int GM_ActivityData::kJointimesFieldNumber;
const int GM_ActivityData::kButtontypeFieldNumber;
const int GM_ActivityData::kTimelistFieldNumber;
const int GM_ActivityData::kIsaddFieldNumber;
const int GM_ActivityData::kAddtimesFieldNumber;
#endif  // !_MSC_VER

GM_ActivityData::GM_ActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ActivityData::InitAsDefaultInstance() {
}

GM_ActivityData::GM_ActivityData(const GM_ActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ActivityData::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isactivity_ = 0;
  activity_type_ = 0;
  strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isever_ = 0;
  level_ = 0;
  rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  times_ = 0;
  jointimes_ = 0;
  buttontype_ = 0;
  isadd_ = false;
  addtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ActivityData::~GM_ActivityData() {
  SharedDtor();
}

void GM_ActivityData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (strtime_ != &::google::protobuf::internal::kEmptyString) {
    delete strtime_;
  }
  if (rules_ != &::google::protobuf::internal::kEmptyString) {
    delete rules_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void GM_ActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ActivityData_descriptor_;
}

const GM_ActivityData& GM_ActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_5ftime_2etxt();
  return *default_instance_;
}

GM_ActivityData* GM_ActivityData::default_instance_ = NULL;

GM_ActivityData* GM_ActivityData::New() const {
  return new GM_ActivityData;
}

void GM_ActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    isactivity_ = 0;
    activity_type_ = 0;
    if (has_strtime()) {
      if (strtime_ != &::google::protobuf::internal::kEmptyString) {
        strtime_->clear();
      }
    }
    isever_ = 0;
    level_ = 0;
    if (has_rules()) {
      if (rules_ != &::google::protobuf::internal::kEmptyString) {
        rules_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    times_ = 0;
    jointimes_ = 0;
    buttontype_ = 0;
    isadd_ = false;
    addtimes_ = 0;
  }
  timelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isactivity;
        break;
      }

      // required int32 isactivity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isactivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactivity_)));
          set_has_isactivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_type;
        break;
      }

      // required int32 activity_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rules;
        break;
      }

      // required string rules = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rules()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rules().data(), this->rules().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_describe;
        break;
      }

      // required string describe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // required int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jointimes;
        break;
      }

      // required int32 jointimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jointimes_)));
          set_has_jointimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // required string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_strtime;
        break;
      }

      // required string strtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strtime().data(), this->strtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isEver;
        break;
      }

      // required int32 isEver = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isever_)));
          set_has_isever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_timelist;
        break;
      }

      // repeated .GM_TimeLimit timelist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_timelist;
        if (input->ExpectTag(104)) goto parse_buttontype;
        break;
      }

      // required int32 buttontype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buttontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttontype_)));
          set_has_buttontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isadd;
        break;
      }

      // optional bool isadd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_addtimes;
        break;
      }

      // optional int32 addtimes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtimes_)));
          set_has_addtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }

  // required int32 isactivity = 2;
  if (has_isactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isactivity(), output);
  }

  // required int32 activity_type = 3;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activity_type(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required string rules = 5;
  if (has_rules()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rules().data(), this->rules().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rules(), output);
  }

  // required string describe = 6;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->describe(), output);
  }

  // required int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  // required int32 jointimes = 8;
  if (has_jointimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->jointimes(), output);
  }

  // required string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }

  // required string strtime = 10;
  if (has_strtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strtime().data(), this->strtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->strtime(), output);
  }

  // required int32 isEver = 11;
  if (has_isever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isever(), output);
  }

  // repeated .GM_TimeLimit timelist = 12;
  for (int i = 0; i < this->timelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->timelist(i), output);
  }

  // required int32 buttontype = 13;
  if (has_buttontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->buttontype(), output);
  }

  // optional bool isadd = 14;
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isadd(), output);
  }

  // optional int32 addtimes = 15;
  if (has_addtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->addtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }

  // required int32 isactivity = 2;
  if (has_isactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isactivity(), target);
  }

  // required int32 activity_type = 3;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activity_type(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required string rules = 5;
  if (has_rules()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rules().data(), this->rules().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rules(), target);
  }

  // required string describe = 6;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->describe(), target);
  }

  // required int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  // required int32 jointimes = 8;
  if (has_jointimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->jointimes(), target);
  }

  // required string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // required string strtime = 10;
  if (has_strtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strtime().data(), this->strtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->strtime(), target);
  }

  // required int32 isEver = 11;
  if (has_isever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isever(), target);
  }

  // repeated .GM_TimeLimit timelist = 12;
  for (int i = 0; i < this->timelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->timelist(i), target);
  }

  // required int32 buttontype = 13;
  if (has_buttontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->buttontype(), target);
  }

  // optional bool isadd = 14;
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isadd(), target);
  }

  // optional int32 addtimes = 15;
  if (has_addtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->addtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

    // required string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 isactivity = 2;
    if (has_isactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isactivity());
    }

    // required int32 activity_type = 3;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_type());
    }

    // required string strtime = 10;
    if (has_strtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strtime());
    }

    // required int32 isEver = 11;
    if (has_isever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isever());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string rules = 5;
    if (has_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rules());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string describe = 6;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // required int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required int32 jointimes = 8;
    if (has_jointimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jointimes());
    }

    // required int32 buttontype = 13;
    if (has_buttontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buttontype());
    }

    // optional bool isadd = 14;
    if (has_isadd()) {
      total_size += 1 + 1;
    }

    // optional int32 addtimes = 15;
    if (has_addtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtimes());
    }

  }
  // repeated .GM_TimeLimit timelist = 12;
  total_size += 1 * this->timelist_size();
  for (int i = 0; i < this->timelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ActivityData::MergeFrom(const GM_ActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  timelist_.MergeFrom(from.timelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isactivity()) {
      set_isactivity(from.isactivity());
    }
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_strtime()) {
      set_strtime(from.strtime());
    }
    if (from.has_isever()) {
      set_isever(from.isever());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rules()) {
      set_rules(from.rules());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_jointimes()) {
      set_jointimes(from.jointimes());
    }
    if (from.has_buttontype()) {
      set_buttontype(from.buttontype());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
    if (from.has_addtimes()) {
      set_addtimes(from.addtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ActivityData::CopyFrom(const GM_ActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ActivityData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  for (int i = 0; i < timelist_size(); i++) {
    if (!this->timelist(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ActivityData::Swap(GM_ActivityData* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(name_, other->name_);
    std::swap(isactivity_, other->isactivity_);
    std::swap(activity_type_, other->activity_type_);
    std::swap(strtime_, other->strtime_);
    std::swap(isever_, other->isever_);
    std::swap(level_, other->level_);
    std::swap(rules_, other->rules_);
    std::swap(describe_, other->describe_);
    std::swap(times_, other->times_);
    std::swap(jointimes_, other->jointimes_);
    std::swap(buttontype_, other->buttontype_);
    timelist_.Swap(&other->timelist_);
    std::swap(isadd_, other->isadd_);
    std::swap(addtimes_, other->addtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ActivityData_descriptor_;
  metadata.reflection = GM_ActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TimeLimit::kStarttimeFieldNumber;
const int GM_TimeLimit::kEndtimeFieldNumber;
#endif  // !_MSC_VER

GM_TimeLimit::GM_TimeLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TimeLimit::InitAsDefaultInstance() {
}

GM_TimeLimit::GM_TimeLimit(const GM_TimeLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TimeLimit::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TimeLimit::~GM_TimeLimit() {
  SharedDtor();
}

void GM_TimeLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TimeLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TimeLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TimeLimit_descriptor_;
}

const GM_TimeLimit& GM_TimeLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_5ftime_2etxt();
  return *default_instance_;
}

GM_TimeLimit* GM_TimeLimit::default_instance_ = NULL;

GM_TimeLimit* GM_TimeLimit::New() const {
  return new GM_TimeLimit;
}

void GM_TimeLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TimeLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // required int32 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TimeLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }

  // required int32 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TimeLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 starttime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }

  // required int32 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TimeLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // required int32 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TimeLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TimeLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TimeLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TimeLimit::MergeFrom(const GM_TimeLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TimeLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TimeLimit::CopyFrom(const GM_TimeLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TimeLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_TimeLimit::Swap(GM_TimeLimit* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TimeLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TimeLimit_descriptor_;
  metadata.reflection = GM_TimeLimit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
