// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Team.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Team.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_CS_MatchReuslt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_CS_MatchReuslt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_CS_CancelMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_CS_CancelMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_TeamFB_InFB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_TeamFB_InFB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_TeamFight_FirstBlood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_TeamFight_FirstBlood_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_FirstBlood_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_FirstBlood_Member_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fTeam_2etxt() {
  protobuf_AddDesc_SP_5fTeam_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Team.txt");
  GOOGLE_CHECK(file != NULL);
  SM_CS_MatchReuslt_descriptor_ = file->message_type(0);
  static const int SM_CS_MatchReuslt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_MatchReuslt, m_nresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_MatchReuslt, m_nleaderid_),
  };
  SM_CS_MatchReuslt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_CS_MatchReuslt_descriptor_,
      SM_CS_MatchReuslt::default_instance_,
      SM_CS_MatchReuslt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_MatchReuslt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_MatchReuslt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_CS_MatchReuslt));
  SM_CS_CancelMatch_descriptor_ = file->message_type(1);
  static const int SM_CS_CancelMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_CancelMatch, m_nroleid_),
  };
  SM_CS_CancelMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_CS_CancelMatch_descriptor_,
      SM_CS_CancelMatch::default_instance_,
      SM_CS_CancelMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_CancelMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_CS_CancelMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_CS_CancelMatch));
  SM_TeamFB_InFB_descriptor_ = file->message_type(2);
  static const int SM_TeamFB_InFB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFB_InFB, m_nleaderid_),
  };
  SM_TeamFB_InFB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_TeamFB_InFB_descriptor_,
      SM_TeamFB_InFB::default_instance_,
      SM_TeamFB_InFB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFB_InFB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFB_InFB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_TeamFB_InFB));
  SM_TeamFight_FirstBlood_descriptor_ = file->message_type(3);
  static const int SM_TeamFight_FirstBlood_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFight_FirstBlood, m_nleaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFight_FirstBlood, m_nfbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFight_FirstBlood, m_nfighttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFight_FirstBlood, m_member_),
  };
  SM_TeamFight_FirstBlood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_TeamFight_FirstBlood_descriptor_,
      SM_TeamFight_FirstBlood::default_instance_,
      SM_TeamFight_FirstBlood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFight_FirstBlood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_TeamFight_FirstBlood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_TeamFight_FirstBlood));
  SM_FirstBlood_Member_descriptor_ = file->message_type(4);
  static const int SM_FirstBlood_Member_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FirstBlood_Member, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FirstBlood_Member, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FirstBlood_Member, m_rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FirstBlood_Member, m_fightpow_),
  };
  SM_FirstBlood_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_FirstBlood_Member_descriptor_,
      SM_FirstBlood_Member::default_instance_,
      SM_FirstBlood_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FirstBlood_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_FirstBlood_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_FirstBlood_Member));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fTeam_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_CS_MatchReuslt_descriptor_, &SM_CS_MatchReuslt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_CS_CancelMatch_descriptor_, &SM_CS_CancelMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_TeamFB_InFB_descriptor_, &SM_TeamFB_InFB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_TeamFight_FirstBlood_descriptor_, &SM_TeamFight_FirstBlood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_FirstBlood_Member_descriptor_, &SM_FirstBlood_Member::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fTeam_2etxt() {
  delete SM_CS_MatchReuslt::default_instance_;
  delete SM_CS_MatchReuslt_reflection_;
  delete SM_CS_CancelMatch::default_instance_;
  delete SM_CS_CancelMatch_reflection_;
  delete SM_TeamFB_InFB::default_instance_;
  delete SM_TeamFB_InFB_reflection_;
  delete SM_TeamFight_FirstBlood::default_instance_;
  delete SM_TeamFight_FirstBlood_reflection_;
  delete SM_FirstBlood_Member::default_instance_;
  delete SM_FirstBlood_Member_reflection_;
}

void protobuf_AddDesc_SP_5fTeam_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SP_Team.txt\";\n\021SM_CS_MatchReuslt\022\021\n\tm_"
    "nresult\030\001 \002(\005\022\023\n\013m_nleaderid\030\002 \002(\005\"&\n\021SM"
    "_CS_CancelMatch\022\021\n\tm_nroleid\030\001 \002(\005\"%\n\016SM"
    "_TeamFB_InFB\022\023\n\013m_nleaderid\030\001 \002(\005\"\202\001\n\027SM"
    "_TeamFight_FirstBlood\022\023\n\013m_nleaderid\030\001 \002"
    "(\005\022\023\n\013m_nfbtypeid\030\002 \002(\005\022\024\n\014m_nfighttime\030"
    "\003 \002(\003\022\'\n\010m_member\030\n \003(\0132\025.SM_FirstBlood_"
    "Member\"^\n\024SM_FirstBlood_Member\022\020\n\010m_role"
    "id\030\001 \002(\005\022\016\n\006m_name\030\002 \001(\t\022\020\n\010m_rolelv\030\003 \001"
    "(\005\022\022\n\nm_fightpow\030\004 \001(\005", 382);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Team.txt", &protobuf_RegisterTypes);
  SM_CS_MatchReuslt::default_instance_ = new SM_CS_MatchReuslt();
  SM_CS_CancelMatch::default_instance_ = new SM_CS_CancelMatch();
  SM_TeamFB_InFB::default_instance_ = new SM_TeamFB_InFB();
  SM_TeamFight_FirstBlood::default_instance_ = new SM_TeamFight_FirstBlood();
  SM_FirstBlood_Member::default_instance_ = new SM_FirstBlood_Member();
  SM_CS_MatchReuslt::default_instance_->InitAsDefaultInstance();
  SM_CS_CancelMatch::default_instance_->InitAsDefaultInstance();
  SM_TeamFB_InFB::default_instance_->InitAsDefaultInstance();
  SM_TeamFight_FirstBlood::default_instance_->InitAsDefaultInstance();
  SM_FirstBlood_Member::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fTeam_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fTeam_2etxt {
  StaticDescriptorInitializer_SP_5fTeam_2etxt() {
    protobuf_AddDesc_SP_5fTeam_2etxt();
  }
} static_descriptor_initializer_SP_5fTeam_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_CS_MatchReuslt::kMNresultFieldNumber;
const int SM_CS_MatchReuslt::kMNleaderidFieldNumber;
#endif  // !_MSC_VER

SM_CS_MatchReuslt::SM_CS_MatchReuslt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_CS_MatchReuslt::InitAsDefaultInstance() {
}

SM_CS_MatchReuslt::SM_CS_MatchReuslt(const SM_CS_MatchReuslt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_CS_MatchReuslt::SharedCtor() {
  _cached_size_ = 0;
  m_nresult_ = 0;
  m_nleaderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_CS_MatchReuslt::~SM_CS_MatchReuslt() {
  SharedDtor();
}

void SM_CS_MatchReuslt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_CS_MatchReuslt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_CS_MatchReuslt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_CS_MatchReuslt_descriptor_;
}

const SM_CS_MatchReuslt& SM_CS_MatchReuslt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTeam_2etxt();
  return *default_instance_;
}

SM_CS_MatchReuslt* SM_CS_MatchReuslt::default_instance_ = NULL;

SM_CS_MatchReuslt* SM_CS_MatchReuslt::New() const {
  return new SM_CS_MatchReuslt;
}

void SM_CS_MatchReuslt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nresult_ = 0;
    m_nleaderid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_CS_MatchReuslt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nresult_)));
          set_has_m_nresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nleaderid;
        break;
      }

      // required int32 m_nleaderid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nleaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nleaderid_)));
          set_has_m_nleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_CS_MatchReuslt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nresult = 1;
  if (has_m_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nresult(), output);
  }

  // required int32 m_nleaderid = 2;
  if (has_m_nleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nleaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_CS_MatchReuslt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nresult = 1;
  if (has_m_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nresult(), target);
  }

  // required int32 m_nleaderid = 2;
  if (has_m_nleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nleaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_CS_MatchReuslt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nresult = 1;
    if (has_m_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nresult());
    }

    // required int32 m_nleaderid = 2;
    if (has_m_nleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nleaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_CS_MatchReuslt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_CS_MatchReuslt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_CS_MatchReuslt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_CS_MatchReuslt::MergeFrom(const SM_CS_MatchReuslt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nresult()) {
      set_m_nresult(from.m_nresult());
    }
    if (from.has_m_nleaderid()) {
      set_m_nleaderid(from.m_nleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_CS_MatchReuslt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_CS_MatchReuslt::CopyFrom(const SM_CS_MatchReuslt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_CS_MatchReuslt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SM_CS_MatchReuslt::Swap(SM_CS_MatchReuslt* other) {
  if (other != this) {
    std::swap(m_nresult_, other->m_nresult_);
    std::swap(m_nleaderid_, other->m_nleaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_CS_MatchReuslt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_CS_MatchReuslt_descriptor_;
  metadata.reflection = SM_CS_MatchReuslt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_CS_CancelMatch::kMNroleidFieldNumber;
#endif  // !_MSC_VER

SM_CS_CancelMatch::SM_CS_CancelMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_CS_CancelMatch::InitAsDefaultInstance() {
}

SM_CS_CancelMatch::SM_CS_CancelMatch(const SM_CS_CancelMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_CS_CancelMatch::SharedCtor() {
  _cached_size_ = 0;
  m_nroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_CS_CancelMatch::~SM_CS_CancelMatch() {
  SharedDtor();
}

void SM_CS_CancelMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_CS_CancelMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_CS_CancelMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_CS_CancelMatch_descriptor_;
}

const SM_CS_CancelMatch& SM_CS_CancelMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTeam_2etxt();
  return *default_instance_;
}

SM_CS_CancelMatch* SM_CS_CancelMatch::default_instance_ = NULL;

SM_CS_CancelMatch* SM_CS_CancelMatch::New() const {
  return new SM_CS_CancelMatch;
}

void SM_CS_CancelMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nroleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_CS_CancelMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nroleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroleid_)));
          set_has_m_nroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_CS_CancelMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nroleid = 1;
  if (has_m_nroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_CS_CancelMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nroleid = 1;
  if (has_m_nroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_CS_CancelMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nroleid = 1;
    if (has_m_nroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_CS_CancelMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_CS_CancelMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_CS_CancelMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_CS_CancelMatch::MergeFrom(const SM_CS_CancelMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nroleid()) {
      set_m_nroleid(from.m_nroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_CS_CancelMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_CS_CancelMatch::CopyFrom(const SM_CS_CancelMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_CS_CancelMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_CS_CancelMatch::Swap(SM_CS_CancelMatch* other) {
  if (other != this) {
    std::swap(m_nroleid_, other->m_nroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_CS_CancelMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_CS_CancelMatch_descriptor_;
  metadata.reflection = SM_CS_CancelMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_TeamFB_InFB::kMNleaderidFieldNumber;
#endif  // !_MSC_VER

SM_TeamFB_InFB::SM_TeamFB_InFB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_TeamFB_InFB::InitAsDefaultInstance() {
}

SM_TeamFB_InFB::SM_TeamFB_InFB(const SM_TeamFB_InFB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_TeamFB_InFB::SharedCtor() {
  _cached_size_ = 0;
  m_nleaderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_TeamFB_InFB::~SM_TeamFB_InFB() {
  SharedDtor();
}

void SM_TeamFB_InFB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_TeamFB_InFB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_TeamFB_InFB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_TeamFB_InFB_descriptor_;
}

const SM_TeamFB_InFB& SM_TeamFB_InFB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTeam_2etxt();
  return *default_instance_;
}

SM_TeamFB_InFB* SM_TeamFB_InFB::default_instance_ = NULL;

SM_TeamFB_InFB* SM_TeamFB_InFB::New() const {
  return new SM_TeamFB_InFB;
}

void SM_TeamFB_InFB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nleaderid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_TeamFB_InFB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nleaderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nleaderid_)));
          set_has_m_nleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_TeamFB_InFB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nleaderid = 1;
  if (has_m_nleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nleaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_TeamFB_InFB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nleaderid = 1;
  if (has_m_nleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nleaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_TeamFB_InFB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nleaderid = 1;
    if (has_m_nleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nleaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_TeamFB_InFB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_TeamFB_InFB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_TeamFB_InFB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_TeamFB_InFB::MergeFrom(const SM_TeamFB_InFB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nleaderid()) {
      set_m_nleaderid(from.m_nleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_TeamFB_InFB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_TeamFB_InFB::CopyFrom(const SM_TeamFB_InFB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_TeamFB_InFB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_TeamFB_InFB::Swap(SM_TeamFB_InFB* other) {
  if (other != this) {
    std::swap(m_nleaderid_, other->m_nleaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_TeamFB_InFB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_TeamFB_InFB_descriptor_;
  metadata.reflection = SM_TeamFB_InFB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_TeamFight_FirstBlood::kMNleaderidFieldNumber;
const int SM_TeamFight_FirstBlood::kMNfbtypeidFieldNumber;
const int SM_TeamFight_FirstBlood::kMNfighttimeFieldNumber;
const int SM_TeamFight_FirstBlood::kMMemberFieldNumber;
#endif  // !_MSC_VER

SM_TeamFight_FirstBlood::SM_TeamFight_FirstBlood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_TeamFight_FirstBlood::InitAsDefaultInstance() {
}

SM_TeamFight_FirstBlood::SM_TeamFight_FirstBlood(const SM_TeamFight_FirstBlood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_TeamFight_FirstBlood::SharedCtor() {
  _cached_size_ = 0;
  m_nleaderid_ = 0;
  m_nfbtypeid_ = 0;
  m_nfighttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_TeamFight_FirstBlood::~SM_TeamFight_FirstBlood() {
  SharedDtor();
}

void SM_TeamFight_FirstBlood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_TeamFight_FirstBlood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_TeamFight_FirstBlood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_TeamFight_FirstBlood_descriptor_;
}

const SM_TeamFight_FirstBlood& SM_TeamFight_FirstBlood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTeam_2etxt();
  return *default_instance_;
}

SM_TeamFight_FirstBlood* SM_TeamFight_FirstBlood::default_instance_ = NULL;

SM_TeamFight_FirstBlood* SM_TeamFight_FirstBlood::New() const {
  return new SM_TeamFight_FirstBlood;
}

void SM_TeamFight_FirstBlood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nleaderid_ = 0;
    m_nfbtypeid_ = 0;
    m_nfighttime_ = GOOGLE_LONGLONG(0);
  }
  m_member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_TeamFight_FirstBlood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nleaderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nleaderid_)));
          set_has_m_nleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nfbtypeid;
        break;
      }

      // required int32 m_nfbtypeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nfbtypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nfbtypeid_)));
          set_has_m_nfbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nfighttime;
        break;
      }

      // required int64 m_nfighttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nfighttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_nfighttime_)));
          set_has_m_nfighttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_member;
        break;
      }

      // repeated .SM_FirstBlood_Member m_member = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_TeamFight_FirstBlood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nleaderid = 1;
  if (has_m_nleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nleaderid(), output);
  }

  // required int32 m_nfbtypeid = 2;
  if (has_m_nfbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nfbtypeid(), output);
  }

  // required int64 m_nfighttime = 3;
  if (has_m_nfighttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_nfighttime(), output);
  }

  // repeated .SM_FirstBlood_Member m_member = 10;
  for (int i = 0; i < this->m_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_TeamFight_FirstBlood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nleaderid = 1;
  if (has_m_nleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nleaderid(), target);
  }

  // required int32 m_nfbtypeid = 2;
  if (has_m_nfbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nfbtypeid(), target);
  }

  // required int64 m_nfighttime = 3;
  if (has_m_nfighttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_nfighttime(), target);
  }

  // repeated .SM_FirstBlood_Member m_member = 10;
  for (int i = 0; i < this->m_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_TeamFight_FirstBlood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nleaderid = 1;
    if (has_m_nleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nleaderid());
    }

    // required int32 m_nfbtypeid = 2;
    if (has_m_nfbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nfbtypeid());
    }

    // required int64 m_nfighttime = 3;
    if (has_m_nfighttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_nfighttime());
    }

  }
  // repeated .SM_FirstBlood_Member m_member = 10;
  total_size += 1 * this->m_member_size();
  for (int i = 0; i < this->m_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_TeamFight_FirstBlood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_TeamFight_FirstBlood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_TeamFight_FirstBlood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_TeamFight_FirstBlood::MergeFrom(const SM_TeamFight_FirstBlood& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_member_.MergeFrom(from.m_member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nleaderid()) {
      set_m_nleaderid(from.m_nleaderid());
    }
    if (from.has_m_nfbtypeid()) {
      set_m_nfbtypeid(from.m_nfbtypeid());
    }
    if (from.has_m_nfighttime()) {
      set_m_nfighttime(from.m_nfighttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_TeamFight_FirstBlood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_TeamFight_FirstBlood::CopyFrom(const SM_TeamFight_FirstBlood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_TeamFight_FirstBlood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < m_member_size(); i++) {
    if (!this->m_member(i).IsInitialized()) return false;
  }
  return true;
}

void SM_TeamFight_FirstBlood::Swap(SM_TeamFight_FirstBlood* other) {
  if (other != this) {
    std::swap(m_nleaderid_, other->m_nleaderid_);
    std::swap(m_nfbtypeid_, other->m_nfbtypeid_);
    std::swap(m_nfighttime_, other->m_nfighttime_);
    m_member_.Swap(&other->m_member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_TeamFight_FirstBlood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_TeamFight_FirstBlood_descriptor_;
  metadata.reflection = SM_TeamFight_FirstBlood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_FirstBlood_Member::kMRoleidFieldNumber;
const int SM_FirstBlood_Member::kMNameFieldNumber;
const int SM_FirstBlood_Member::kMRolelvFieldNumber;
const int SM_FirstBlood_Member::kMFightpowFieldNumber;
#endif  // !_MSC_VER

SM_FirstBlood_Member::SM_FirstBlood_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_FirstBlood_Member::InitAsDefaultInstance() {
}

SM_FirstBlood_Member::SM_FirstBlood_Member(const SM_FirstBlood_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_FirstBlood_Member::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rolelv_ = 0;
  m_fightpow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_FirstBlood_Member::~SM_FirstBlood_Member() {
  SharedDtor();
}

void SM_FirstBlood_Member::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void SM_FirstBlood_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_FirstBlood_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_FirstBlood_Member_descriptor_;
}

const SM_FirstBlood_Member& SM_FirstBlood_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fTeam_2etxt();
  return *default_instance_;
}

SM_FirstBlood_Member* SM_FirstBlood_Member::default_instance_ = NULL;

SM_FirstBlood_Member* SM_FirstBlood_Member::New() const {
  return new SM_FirstBlood_Member;
}

void SM_FirstBlood_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_rolelv_ = 0;
    m_fightpow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_FirstBlood_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rolelv;
        break;
      }

      // optional int32 m_rolelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelv_)));
          set_has_m_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_fightpow;
        break;
      }

      // optional int32 m_fightpow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fightpow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightpow_)));
          set_has_m_fightpow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_FirstBlood_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_rolelv = 3;
  if (has_m_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rolelv(), output);
  }

  // optional int32 m_fightpow = 4;
  if (has_m_fightpow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_fightpow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_FirstBlood_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_rolelv = 3;
  if (has_m_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rolelv(), target);
  }

  // optional int32 m_fightpow = 4;
  if (has_m_fightpow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_fightpow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_FirstBlood_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_rolelv = 3;
    if (has_m_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelv());
    }

    // optional int32 m_fightpow = 4;
    if (has_m_fightpow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightpow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_FirstBlood_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_FirstBlood_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_FirstBlood_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_FirstBlood_Member::MergeFrom(const SM_FirstBlood_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_rolelv()) {
      set_m_rolelv(from.m_rolelv());
    }
    if (from.has_m_fightpow()) {
      set_m_fightpow(from.m_fightpow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_FirstBlood_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_FirstBlood_Member::CopyFrom(const SM_FirstBlood_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_FirstBlood_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_FirstBlood_Member::Swap(SM_FirstBlood_Member* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_rolelv_, other->m_rolelv_);
    std::swap(m_fightpow_, other->m_fightpow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_FirstBlood_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_FirstBlood_Member_descriptor_;
  metadata.reflection = SM_FirstBlood_Member_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
