// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_EquipUplv.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_EquipUplv.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_RequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_RequestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EquipUplvReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EquipUplvReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EquipUplv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EquipUplv_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EquipAwakenReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EquipAwakenReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EquipAwakenEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EquipAwakenEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_EquipAwakenInfoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_EquipAwakenInfoReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fEquipUplv_2etxt() {
  protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_EquipUplv.txt");
  GOOGLE_CHECK(file != NULL);
  DB_RequestData_descriptor_ = file->message_type(0);
  static const int DB_RequestData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RequestData, m_roleid_),
  };
  DB_RequestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_RequestData_descriptor_,
      DB_RequestData::default_instance_,
      DB_RequestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RequestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_RequestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_RequestData));
  DB_EquipUplvReturn_descriptor_ = file->message_type(1);
  static const int DB_EquipUplvReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplvReturn, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplvReturn, m_equiplvdatas_),
  };
  DB_EquipUplvReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EquipUplvReturn_descriptor_,
      DB_EquipUplvReturn::default_instance_,
      DB_EquipUplvReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplvReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplvReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EquipUplvReturn));
  DB_EquipUplv_descriptor_ = file->message_type(2);
  static const int DB_EquipUplv_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_refinlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_forgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_forgeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, m_awakenlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, packageunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, winglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, isdelete_),
  };
  DB_EquipUplv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EquipUplv_descriptor_,
      DB_EquipUplv::default_instance_,
      DB_EquipUplv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipUplv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EquipUplv));
  DB_EquipAwakenReturn_descriptor_ = file->message_type(3);
  static const int DB_EquipAwakenReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenReturn, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenReturn, data_),
  };
  DB_EquipAwakenReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EquipAwakenReturn_descriptor_,
      DB_EquipAwakenReturn::default_instance_,
      DB_EquipAwakenReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EquipAwakenReturn));
  DB_EquipAwakenEntry_descriptor_ = file->message_type(4);
  static const int DB_EquipAwakenEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, awakenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, awakenlevel_),
  };
  DB_EquipAwakenEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EquipAwakenEntry_descriptor_,
      DB_EquipAwakenEntry::default_instance_,
      DB_EquipAwakenEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EquipAwakenEntry));
  DB_EquipAwakenInfoReturn_descriptor_ = file->message_type(5);
  static const int DB_EquipAwakenInfoReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenInfoReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenInfoReturn, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenInfoReturn, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenInfoReturn, count_),
  };
  DB_EquipAwakenInfoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_EquipAwakenInfoReturn_descriptor_,
      DB_EquipAwakenInfoReturn::default_instance_,
      DB_EquipAwakenInfoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenInfoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_EquipAwakenInfoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_EquipAwakenInfoReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fEquipUplv_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_RequestData_descriptor_, &DB_RequestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EquipUplvReturn_descriptor_, &DB_EquipUplvReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EquipUplv_descriptor_, &DB_EquipUplv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EquipAwakenReturn_descriptor_, &DB_EquipAwakenReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EquipAwakenEntry_descriptor_, &DB_EquipAwakenEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_EquipAwakenInfoReturn_descriptor_, &DB_EquipAwakenInfoReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fEquipUplv_2etxt() {
  delete DB_RequestData::default_instance_;
  delete DB_RequestData_reflection_;
  delete DB_EquipUplvReturn::default_instance_;
  delete DB_EquipUplvReturn_reflection_;
  delete DB_EquipUplv::default_instance_;
  delete DB_EquipUplv_reflection_;
  delete DB_EquipAwakenReturn::default_instance_;
  delete DB_EquipAwakenReturn_reflection_;
  delete DB_EquipAwakenEntry::default_instance_;
  delete DB_EquipAwakenEntry_reflection_;
  delete DB_EquipAwakenInfoReturn::default_instance_;
  delete DB_EquipAwakenInfoReturn_reflection_;
}

void protobuf_AddDesc_SP_5fEquipUplv_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SP_EquipUplv.txt\"\"\n\016DB_RequestData\022\020\n\010"
    "m_roleid\030\001 \002(\005\"M\n\022DB_EquipUplvReturn\022\020\n\010"
    "m_roleid\030\001 \002(\005\022%\n\016m_equiplvdatas\030\002 \003(\0132\r"
    ".DB_EquipUplv\"\326\001\n\014DB_EquipUplv\022\020\n\010m_role"
    "id\030\001 \002(\005\022\016\n\006m_gmid\030\002 \002(\003\022\021\n\tm_equipid\030\003 "
    "\002(\005\022\024\n\014m_refinlevel\030\004 \002(\005\022\024\n\014m_forgeleve"
    "l\030\005 \002(\005\022\022\n\nm_forgeexp\030\006 \002(\005\022\025\n\rm_awakenl"
    "evel\030\007 \002(\005\022\025\n\rpackageunlock\030\010 \001(\005\022\021\n\twin"
    "glevel\030\t \001(\005\022\020\n\010isdelete\030\n \002(\005\"I\n\024DB_Equ"
    "ipAwakenReturn\022\r\n\005count\030\001 \002(\005\022\"\n\004data\030\002 "
    "\003(\0132\024.DB_EquipAwakenEntry\"k\n\023DB_EquipAwa"
    "kenEntry\022\014\n\004gmid\030\001 \002(\003\022\016\n\006roleid\030\002 \001(\005\022\017"
    "\n\007holenum\030\003 \001(\005\022\020\n\010awakenid\030\004 \001(\005\022\023\n\013awa"
    "kenlevel\030\005 \001(\005\"]\n\030DB_EquipAwakenInfoRetu"
    "rn\022\016\n\006result\030\001 \002(\005\022\016\n\006roleid\030\002 \001(\005\022\022\n\nex"
    "perience\030\003 \001(\003\022\r\n\005count\030\004 \001(\005", 629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_EquipUplv.txt", &protobuf_RegisterTypes);
  DB_RequestData::default_instance_ = new DB_RequestData();
  DB_EquipUplvReturn::default_instance_ = new DB_EquipUplvReturn();
  DB_EquipUplv::default_instance_ = new DB_EquipUplv();
  DB_EquipAwakenReturn::default_instance_ = new DB_EquipAwakenReturn();
  DB_EquipAwakenEntry::default_instance_ = new DB_EquipAwakenEntry();
  DB_EquipAwakenInfoReturn::default_instance_ = new DB_EquipAwakenInfoReturn();
  DB_RequestData::default_instance_->InitAsDefaultInstance();
  DB_EquipUplvReturn::default_instance_->InitAsDefaultInstance();
  DB_EquipUplv::default_instance_->InitAsDefaultInstance();
  DB_EquipAwakenReturn::default_instance_->InitAsDefaultInstance();
  DB_EquipAwakenEntry::default_instance_->InitAsDefaultInstance();
  DB_EquipAwakenInfoReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fEquipUplv_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fEquipUplv_2etxt {
  StaticDescriptorInitializer_SP_5fEquipUplv_2etxt() {
    protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  }
} static_descriptor_initializer_SP_5fEquipUplv_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int DB_RequestData::kMRoleidFieldNumber;
#endif  // !_MSC_VER

DB_RequestData::DB_RequestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_RequestData::InitAsDefaultInstance() {
}

DB_RequestData::DB_RequestData(const DB_RequestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_RequestData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_RequestData::~DB_RequestData() {
  SharedDtor();
}

void DB_RequestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_RequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_RequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_RequestData_descriptor_;
}

const DB_RequestData& DB_RequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  return *default_instance_;
}

DB_RequestData* DB_RequestData::default_instance_ = NULL;

DB_RequestData* DB_RequestData::New() const {
  return new DB_RequestData;
}

void DB_RequestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_RequestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_RequestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_RequestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_RequestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_RequestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_RequestData::MergeFrom(const DB_RequestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_RequestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_RequestData::CopyFrom(const DB_RequestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_RequestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_RequestData::Swap(DB_RequestData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_RequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_RequestData_descriptor_;
  metadata.reflection = DB_RequestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EquipUplvReturn::kMRoleidFieldNumber;
const int DB_EquipUplvReturn::kMEquiplvdatasFieldNumber;
#endif  // !_MSC_VER

DB_EquipUplvReturn::DB_EquipUplvReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_EquipUplvReturn::InitAsDefaultInstance() {
}

DB_EquipUplvReturn::DB_EquipUplvReturn(const DB_EquipUplvReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_EquipUplvReturn::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EquipUplvReturn::~DB_EquipUplvReturn() {
  SharedDtor();
}

void DB_EquipUplvReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EquipUplvReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EquipUplvReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EquipUplvReturn_descriptor_;
}

const DB_EquipUplvReturn& DB_EquipUplvReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  return *default_instance_;
}

DB_EquipUplvReturn* DB_EquipUplvReturn::default_instance_ = NULL;

DB_EquipUplvReturn* DB_EquipUplvReturn::New() const {
  return new DB_EquipUplvReturn;
}

void DB_EquipUplvReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_equiplvdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EquipUplvReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_equiplvdatas;
        break;
      }

      // repeated .DB_EquipUplv m_equiplvdatas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_equiplvdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_equiplvdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_equiplvdatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EquipUplvReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .DB_EquipUplv m_equiplvdatas = 2;
  for (int i = 0; i < this->m_equiplvdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_equiplvdatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EquipUplvReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .DB_EquipUplv m_equiplvdatas = 2;
  for (int i = 0; i < this->m_equiplvdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_equiplvdatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EquipUplvReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .DB_EquipUplv m_equiplvdatas = 2;
  total_size += 1 * this->m_equiplvdatas_size();
  for (int i = 0; i < this->m_equiplvdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_equiplvdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EquipUplvReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EquipUplvReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EquipUplvReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EquipUplvReturn::MergeFrom(const DB_EquipUplvReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_equiplvdatas_.MergeFrom(from.m_equiplvdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EquipUplvReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EquipUplvReturn::CopyFrom(const DB_EquipUplvReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EquipUplvReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_equiplvdatas_size(); i++) {
    if (!this->m_equiplvdatas(i).IsInitialized()) return false;
  }
  return true;
}

void DB_EquipUplvReturn::Swap(DB_EquipUplvReturn* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_equiplvdatas_.Swap(&other->m_equiplvdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EquipUplvReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EquipUplvReturn_descriptor_;
  metadata.reflection = DB_EquipUplvReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EquipUplv::kMRoleidFieldNumber;
const int DB_EquipUplv::kMGmidFieldNumber;
const int DB_EquipUplv::kMEquipidFieldNumber;
const int DB_EquipUplv::kMRefinlevelFieldNumber;
const int DB_EquipUplv::kMForgelevelFieldNumber;
const int DB_EquipUplv::kMForgeexpFieldNumber;
const int DB_EquipUplv::kMAwakenlevelFieldNumber;
const int DB_EquipUplv::kPackageunlockFieldNumber;
const int DB_EquipUplv::kWinglevelFieldNumber;
const int DB_EquipUplv::kIsdeleteFieldNumber;
#endif  // !_MSC_VER

DB_EquipUplv::DB_EquipUplv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_EquipUplv::InitAsDefaultInstance() {
}

DB_EquipUplv::DB_EquipUplv(const DB_EquipUplv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_EquipUplv::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_equipid_ = 0;
  m_refinlevel_ = 0;
  m_forgelevel_ = 0;
  m_forgeexp_ = 0;
  m_awakenlevel_ = 0;
  packageunlock_ = 0;
  winglevel_ = 0;
  isdelete_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EquipUplv::~DB_EquipUplv() {
  SharedDtor();
}

void DB_EquipUplv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EquipUplv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EquipUplv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EquipUplv_descriptor_;
}

const DB_EquipUplv& DB_EquipUplv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  return *default_instance_;
}

DB_EquipUplv* DB_EquipUplv::default_instance_ = NULL;

DB_EquipUplv* DB_EquipUplv::New() const {
  return new DB_EquipUplv;
}

void DB_EquipUplv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_equipid_ = 0;
    m_refinlevel_ = 0;
    m_forgelevel_ = 0;
    m_forgeexp_ = 0;
    m_awakenlevel_ = 0;
    packageunlock_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    winglevel_ = 0;
    isdelete_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EquipUplv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gmid;
        break;
      }

      // required int64 m_gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_equipid;
        break;
      }

      // required int32 m_equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipid_)));
          set_has_m_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_refinlevel;
        break;
      }

      // required int32 m_refinlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refinlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refinlevel_)));
          set_has_m_refinlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_forgelevel;
        break;
      }

      // required int32 m_forgelevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_forgelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_forgelevel_)));
          set_has_m_forgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_forgeexp;
        break;
      }

      // required int32 m_forgeexp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_forgeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_forgeexp_)));
          set_has_m_forgeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_awakenlevel;
        break;
      }

      // required int32 m_awakenlevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_awakenlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_awakenlevel_)));
          set_has_m_awakenlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_packageunlock;
        break;
      }

      // optional int32 packageunlock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageunlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packageunlock_)));
          set_has_packageunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_winglevel;
        break;
      }

      // optional int32 winglevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winglevel_)));
          set_has_winglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isdelete;
        break;
      }

      // required int32 isdelete = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EquipUplv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // required int64 m_gmid = 2;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gmid(), output);
  }

  // required int32 m_equipid = 3;
  if (has_m_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_equipid(), output);
  }

  // required int32 m_refinlevel = 4;
  if (has_m_refinlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_refinlevel(), output);
  }

  // required int32 m_forgelevel = 5;
  if (has_m_forgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_forgelevel(), output);
  }

  // required int32 m_forgeexp = 6;
  if (has_m_forgeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_forgeexp(), output);
  }

  // required int32 m_awakenlevel = 7;
  if (has_m_awakenlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_awakenlevel(), output);
  }

  // optional int32 packageunlock = 8;
  if (has_packageunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->packageunlock(), output);
  }

  // optional int32 winglevel = 9;
  if (has_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->winglevel(), output);
  }

  // required int32 isdelete = 10;
  if (has_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isdelete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EquipUplv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // required int64 m_gmid = 2;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gmid(), target);
  }

  // required int32 m_equipid = 3;
  if (has_m_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_equipid(), target);
  }

  // required int32 m_refinlevel = 4;
  if (has_m_refinlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_refinlevel(), target);
  }

  // required int32 m_forgelevel = 5;
  if (has_m_forgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_forgelevel(), target);
  }

  // required int32 m_forgeexp = 6;
  if (has_m_forgeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_forgeexp(), target);
  }

  // required int32 m_awakenlevel = 7;
  if (has_m_awakenlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_awakenlevel(), target);
  }

  // optional int32 packageunlock = 8;
  if (has_packageunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->packageunlock(), target);
  }

  // optional int32 winglevel = 9;
  if (has_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->winglevel(), target);
  }

  // required int32 isdelete = 10;
  if (has_isdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isdelete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EquipUplv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int64 m_gmid = 2;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_equipid = 3;
    if (has_m_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipid());
    }

    // required int32 m_refinlevel = 4;
    if (has_m_refinlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refinlevel());
    }

    // required int32 m_forgelevel = 5;
    if (has_m_forgelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_forgelevel());
    }

    // required int32 m_forgeexp = 6;
    if (has_m_forgeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_forgeexp());
    }

    // required int32 m_awakenlevel = 7;
    if (has_m_awakenlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_awakenlevel());
    }

    // optional int32 packageunlock = 8;
    if (has_packageunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packageunlock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 winglevel = 9;
    if (has_winglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winglevel());
    }

    // required int32 isdelete = 10;
    if (has_isdelete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdelete());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EquipUplv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EquipUplv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EquipUplv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EquipUplv::MergeFrom(const DB_EquipUplv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_equipid()) {
      set_m_equipid(from.m_equipid());
    }
    if (from.has_m_refinlevel()) {
      set_m_refinlevel(from.m_refinlevel());
    }
    if (from.has_m_forgelevel()) {
      set_m_forgelevel(from.m_forgelevel());
    }
    if (from.has_m_forgeexp()) {
      set_m_forgeexp(from.m_forgeexp());
    }
    if (from.has_m_awakenlevel()) {
      set_m_awakenlevel(from.m_awakenlevel());
    }
    if (from.has_packageunlock()) {
      set_packageunlock(from.packageunlock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_winglevel()) {
      set_winglevel(from.winglevel());
    }
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EquipUplv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EquipUplv::CopyFrom(const DB_EquipUplv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EquipUplv::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027f) != 0x0000027f) return false;

  return true;
}

void DB_EquipUplv::Swap(DB_EquipUplv* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_equipid_, other->m_equipid_);
    std::swap(m_refinlevel_, other->m_refinlevel_);
    std::swap(m_forgelevel_, other->m_forgelevel_);
    std::swap(m_forgeexp_, other->m_forgeexp_);
    std::swap(m_awakenlevel_, other->m_awakenlevel_);
    std::swap(packageunlock_, other->packageunlock_);
    std::swap(winglevel_, other->winglevel_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EquipUplv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EquipUplv_descriptor_;
  metadata.reflection = DB_EquipUplv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EquipAwakenReturn::kCountFieldNumber;
const int DB_EquipAwakenReturn::kDataFieldNumber;
#endif  // !_MSC_VER

DB_EquipAwakenReturn::DB_EquipAwakenReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_EquipAwakenReturn::InitAsDefaultInstance() {
}

DB_EquipAwakenReturn::DB_EquipAwakenReturn(const DB_EquipAwakenReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_EquipAwakenReturn::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EquipAwakenReturn::~DB_EquipAwakenReturn() {
  SharedDtor();
}

void DB_EquipAwakenReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EquipAwakenReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EquipAwakenReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EquipAwakenReturn_descriptor_;
}

const DB_EquipAwakenReturn& DB_EquipAwakenReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  return *default_instance_;
}

DB_EquipAwakenReturn* DB_EquipAwakenReturn::default_instance_ = NULL;

DB_EquipAwakenReturn* DB_EquipAwakenReturn::New() const {
  return new DB_EquipAwakenReturn;
}

void DB_EquipAwakenReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EquipAwakenReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .DB_EquipAwakenEntry data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EquipAwakenReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .DB_EquipAwakenEntry data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EquipAwakenReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .DB_EquipAwakenEntry data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EquipAwakenReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .DB_EquipAwakenEntry data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EquipAwakenReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EquipAwakenReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EquipAwakenReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EquipAwakenReturn::MergeFrom(const DB_EquipAwakenReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EquipAwakenReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EquipAwakenReturn::CopyFrom(const DB_EquipAwakenReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EquipAwakenReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void DB_EquipAwakenReturn::Swap(DB_EquipAwakenReturn* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EquipAwakenReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EquipAwakenReturn_descriptor_;
  metadata.reflection = DB_EquipAwakenReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EquipAwakenEntry::kGmidFieldNumber;
const int DB_EquipAwakenEntry::kRoleidFieldNumber;
const int DB_EquipAwakenEntry::kHolenumFieldNumber;
const int DB_EquipAwakenEntry::kAwakenidFieldNumber;
const int DB_EquipAwakenEntry::kAwakenlevelFieldNumber;
#endif  // !_MSC_VER

DB_EquipAwakenEntry::DB_EquipAwakenEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_EquipAwakenEntry::InitAsDefaultInstance() {
}

DB_EquipAwakenEntry::DB_EquipAwakenEntry(const DB_EquipAwakenEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_EquipAwakenEntry::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  roleid_ = 0;
  holenum_ = 0;
  awakenid_ = 0;
  awakenlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EquipAwakenEntry::~DB_EquipAwakenEntry() {
  SharedDtor();
}

void DB_EquipAwakenEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EquipAwakenEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EquipAwakenEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EquipAwakenEntry_descriptor_;
}

const DB_EquipAwakenEntry& DB_EquipAwakenEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  return *default_instance_;
}

DB_EquipAwakenEntry* DB_EquipAwakenEntry::default_instance_ = NULL;

DB_EquipAwakenEntry* DB_EquipAwakenEntry::New() const {
  return new DB_EquipAwakenEntry;
}

void DB_EquipAwakenEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    roleid_ = 0;
    holenum_ = 0;
    awakenid_ = 0;
    awakenlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EquipAwakenEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awakenid;
        break;
      }

      // optional int32 awakenid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenid_)));
          set_has_awakenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_awakenlevel;
        break;
      }

      // optional int32 awakenlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenlevel_)));
          set_has_awakenlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EquipAwakenEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 awakenid = 4;
  if (has_awakenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awakenid(), output);
  }

  // optional int32 awakenlevel = 5;
  if (has_awakenlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->awakenlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EquipAwakenEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 awakenid = 4;
  if (has_awakenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->awakenid(), target);
  }

  // optional int32 awakenlevel = 5;
  if (has_awakenlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->awakenlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EquipAwakenEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 awakenid = 4;
    if (has_awakenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenid());
    }

    // optional int32 awakenlevel = 5;
    if (has_awakenlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EquipAwakenEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EquipAwakenEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EquipAwakenEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EquipAwakenEntry::MergeFrom(const DB_EquipAwakenEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_awakenid()) {
      set_awakenid(from.awakenid());
    }
    if (from.has_awakenlevel()) {
      set_awakenlevel(from.awakenlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EquipAwakenEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EquipAwakenEntry::CopyFrom(const DB_EquipAwakenEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EquipAwakenEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_EquipAwakenEntry::Swap(DB_EquipAwakenEntry* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(roleid_, other->roleid_);
    std::swap(holenum_, other->holenum_);
    std::swap(awakenid_, other->awakenid_);
    std::swap(awakenlevel_, other->awakenlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EquipAwakenEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EquipAwakenEntry_descriptor_;
  metadata.reflection = DB_EquipAwakenEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_EquipAwakenInfoReturn::kResultFieldNumber;
const int DB_EquipAwakenInfoReturn::kRoleidFieldNumber;
const int DB_EquipAwakenInfoReturn::kExperienceFieldNumber;
const int DB_EquipAwakenInfoReturn::kCountFieldNumber;
#endif  // !_MSC_VER

DB_EquipAwakenInfoReturn::DB_EquipAwakenInfoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_EquipAwakenInfoReturn::InitAsDefaultInstance() {
}

DB_EquipAwakenInfoReturn::DB_EquipAwakenInfoReturn(const DB_EquipAwakenInfoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_EquipAwakenInfoReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roleid_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_EquipAwakenInfoReturn::~DB_EquipAwakenInfoReturn() {
  SharedDtor();
}

void DB_EquipAwakenInfoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_EquipAwakenInfoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_EquipAwakenInfoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_EquipAwakenInfoReturn_descriptor_;
}

const DB_EquipAwakenInfoReturn& DB_EquipAwakenInfoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fEquipUplv_2etxt();
  return *default_instance_;
}

DB_EquipAwakenInfoReturn* DB_EquipAwakenInfoReturn::default_instance_ = NULL;

DB_EquipAwakenInfoReturn* DB_EquipAwakenInfoReturn::New() const {
  return new DB_EquipAwakenInfoReturn;
}

void DB_EquipAwakenInfoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    roleid_ = 0;
    experience_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_EquipAwakenInfoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // optional int64 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_EquipAwakenInfoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int64 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->experience(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_EquipAwakenInfoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional int64 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->experience(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_EquipAwakenInfoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int64 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_EquipAwakenInfoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_EquipAwakenInfoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_EquipAwakenInfoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_EquipAwakenInfoReturn::MergeFrom(const DB_EquipAwakenInfoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_EquipAwakenInfoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_EquipAwakenInfoReturn::CopyFrom(const DB_EquipAwakenInfoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_EquipAwakenInfoReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_EquipAwakenInfoReturn::Swap(DB_EquipAwakenInfoReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(experience_, other->experience_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_EquipAwakenInfoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_EquipAwakenInfoReturn_descriptor_;
  metadata.reflection = DB_EquipAwakenInfoReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
