// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_sealAccount.txt

#ifndef PROTOBUF_SP_5fsealAccount_2etxt__INCLUDED
#define PROTOBUF_SP_5fsealAccount_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fsealAccount_2etxt();
void protobuf_AssignDesc_SP_5fsealAccount_2etxt();
void protobuf_ShutdownFile_SP_5fsealAccount_2etxt();

class SP_SealAccount;
class SP_SealAccountReturn;

// ===================================================================

class SP_SealAccount : public ::google::protobuf::Message {
 public:
  SP_SealAccount();
  virtual ~SP_SealAccount();

  SP_SealAccount(const SP_SealAccount& from);

  inline SP_SealAccount& operator=(const SP_SealAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SP_SealAccount& default_instance();

  void Swap(SP_SealAccount* other);

  // implements Message ----------------------------------------------

  SP_SealAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SP_SealAccount& from);
  void MergeFrom(const SP_SealAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // required string sealTime = 2;
  inline bool has_sealtime() const;
  inline void clear_sealtime();
  static const int kSealTimeFieldNumber = 2;
  inline const ::std::string& sealtime() const;
  inline void set_sealtime(const ::std::string& value);
  inline void set_sealtime(const char* value);
  inline void set_sealtime(const char* value, size_t size);
  inline ::std::string* mutable_sealtime();
  inline ::std::string* release_sealtime();
  inline void set_allocated_sealtime(::std::string* sealtime);

  // @@protoc_insertion_point(class_scope:SP_SealAccount)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_sealtime();
  inline void clear_has_sealtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sealtime_;
  ::google::protobuf::int32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fsealAccount_2etxt();
  friend void protobuf_AssignDesc_SP_5fsealAccount_2etxt();
  friend void protobuf_ShutdownFile_SP_5fsealAccount_2etxt();

  void InitAsDefaultInstance();
  static SP_SealAccount* default_instance_;
};
// -------------------------------------------------------------------

class SP_SealAccountReturn : public ::google::protobuf::Message {
 public:
  SP_SealAccountReturn();
  virtual ~SP_SealAccountReturn();

  SP_SealAccountReturn(const SP_SealAccountReturn& from);

  inline SP_SealAccountReturn& operator=(const SP_SealAccountReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SP_SealAccountReturn& default_instance();

  void Swap(SP_SealAccountReturn* other);

  // implements Message ----------------------------------------------

  SP_SealAccountReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SP_SealAccountReturn& from);
  void MergeFrom(const SP_SealAccountReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SP_SealAccount sealAccount = 1;
  inline int sealaccount_size() const;
  inline void clear_sealaccount();
  static const int kSealAccountFieldNumber = 1;
  inline const ::SP_SealAccount& sealaccount(int index) const;
  inline ::SP_SealAccount* mutable_sealaccount(int index);
  inline ::SP_SealAccount* add_sealaccount();
  inline const ::google::protobuf::RepeatedPtrField< ::SP_SealAccount >&
      sealaccount() const;
  inline ::google::protobuf::RepeatedPtrField< ::SP_SealAccount >*
      mutable_sealaccount();

  // @@protoc_insertion_point(class_scope:SP_SealAccountReturn)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SP_SealAccount > sealaccount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fsealAccount_2etxt();
  friend void protobuf_AssignDesc_SP_5fsealAccount_2etxt();
  friend void protobuf_ShutdownFile_SP_5fsealAccount_2etxt();

  void InitAsDefaultInstance();
  static SP_SealAccountReturn* default_instance_;
};
// ===================================================================


// ===================================================================

// SP_SealAccount

// required int32 accountid = 1;
inline bool SP_SealAccount::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SP_SealAccount::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SP_SealAccount::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SP_SealAccount::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 SP_SealAccount::accountid() const {
  return accountid_;
}
inline void SP_SealAccount::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required string sealTime = 2;
inline bool SP_SealAccount::has_sealtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SP_SealAccount::set_has_sealtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SP_SealAccount::clear_has_sealtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SP_SealAccount::clear_sealtime() {
  if (sealtime_ != &::google::protobuf::internal::kEmptyString) {
    sealtime_->clear();
  }
  clear_has_sealtime();
}
inline const ::std::string& SP_SealAccount::sealtime() const {
  return *sealtime_;
}
inline void SP_SealAccount::set_sealtime(const ::std::string& value) {
  set_has_sealtime();
  if (sealtime_ == &::google::protobuf::internal::kEmptyString) {
    sealtime_ = new ::std::string;
  }
  sealtime_->assign(value);
}
inline void SP_SealAccount::set_sealtime(const char* value) {
  set_has_sealtime();
  if (sealtime_ == &::google::protobuf::internal::kEmptyString) {
    sealtime_ = new ::std::string;
  }
  sealtime_->assign(value);
}
inline void SP_SealAccount::set_sealtime(const char* value, size_t size) {
  set_has_sealtime();
  if (sealtime_ == &::google::protobuf::internal::kEmptyString) {
    sealtime_ = new ::std::string;
  }
  sealtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SP_SealAccount::mutable_sealtime() {
  set_has_sealtime();
  if (sealtime_ == &::google::protobuf::internal::kEmptyString) {
    sealtime_ = new ::std::string;
  }
  return sealtime_;
}
inline ::std::string* SP_SealAccount::release_sealtime() {
  clear_has_sealtime();
  if (sealtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sealtime_;
    sealtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SP_SealAccount::set_allocated_sealtime(::std::string* sealtime) {
  if (sealtime_ != &::google::protobuf::internal::kEmptyString) {
    delete sealtime_;
  }
  if (sealtime) {
    set_has_sealtime();
    sealtime_ = sealtime;
  } else {
    clear_has_sealtime();
    sealtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SP_SealAccountReturn

// repeated .SP_SealAccount sealAccount = 1;
inline int SP_SealAccountReturn::sealaccount_size() const {
  return sealaccount_.size();
}
inline void SP_SealAccountReturn::clear_sealaccount() {
  sealaccount_.Clear();
}
inline const ::SP_SealAccount& SP_SealAccountReturn::sealaccount(int index) const {
  return sealaccount_.Get(index);
}
inline ::SP_SealAccount* SP_SealAccountReturn::mutable_sealaccount(int index) {
  return sealaccount_.Mutable(index);
}
inline ::SP_SealAccount* SP_SealAccountReturn::add_sealaccount() {
  return sealaccount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SP_SealAccount >&
SP_SealAccountReturn::sealaccount() const {
  return sealaccount_;
}
inline ::google::protobuf::RepeatedPtrField< ::SP_SealAccount >*
SP_SealAccountReturn::mutable_sealaccount() {
  return &sealaccount_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fsealAccount_2etxt__INCLUDED
