// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "match.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_match_UI_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_UI_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_reward_all_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_reward_all_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_selfJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_selfJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_UI_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_UI_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_peoplenum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_peoplenum_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_peoplenum_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_peoplenum_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_peoplenum_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_peoplenum_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Match_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Match_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_apply_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_apply_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_apply_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_apply_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_join_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_join_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_join_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_join_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_quit_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_quit_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_quit_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_quit_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_rank_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_rank_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_rank_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_rank_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_rank_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_rank_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Match_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Match_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_match_object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_match_object_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Match_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Match_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Match_time_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Match_time_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Match_rate_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Match_rate_return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_match_2etxt() {
  protobuf_AddDesc_match_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "match.txt");
  GOOGLE_CHECK(file != NULL);
  GM_match_UI_info_descriptor_ = file->message_type(0);
  static const int GM_match_UI_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, starttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, matchname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, circletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, peoplenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, icon_),
  };
  GM_match_UI_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_UI_info_descriptor_,
      GM_match_UI_info::default_instance_,
      GM_match_UI_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_UI_info));
  GM_match_reward_descriptor_ = file->message_type(1);
  static const int GM_match_reward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, minrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, num_),
  };
  GM_match_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_reward_descriptor_,
      GM_match_reward::default_instance_,
      GM_match_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_reward));
  GM_match_reward_all_descriptor_ = file->message_type(2);
  static const int GM_match_reward_all_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward_all, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward_all, data_),
  };
  GM_match_reward_all_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_reward_all_descriptor_,
      GM_match_reward_all::default_instance_,
      GM_match_reward_all_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward_all, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_reward_all, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_reward_all));
  GM_match_selfJoin_descriptor_ = file->message_type(3);
  static const int GM_match_selfJoin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_selfJoin, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_selfJoin, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_selfJoin, id_),
  };
  GM_match_selfJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_selfJoin_descriptor_,
      GM_match_selfJoin::default_instance_,
      GM_match_selfJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_selfJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_selfJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_selfJoin));
  GM_match_UI_return_descriptor_ = file->message_type(4);
  static const int GM_match_UI_return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_return, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_return, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_return, reward_),
  };
  GM_match_UI_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_UI_return_descriptor_,
      GM_match_UI_return::default_instance_,
      GM_match_UI_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_UI_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_UI_return));
  GM_match_peoplenum_descriptor_ = file->message_type(5);
  static const int GM_match_peoplenum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum, peoplenum_),
  };
  GM_match_peoplenum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_peoplenum_descriptor_,
      GM_match_peoplenum::default_instance_,
      GM_match_peoplenum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_peoplenum));
  GM_match_peoplenum_request_descriptor_ = file->message_type(6);
  static const int GM_match_peoplenum_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_request, id_),
  };
  GM_match_peoplenum_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_peoplenum_request_descriptor_,
      GM_match_peoplenum_request::default_instance_,
      GM_match_peoplenum_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_peoplenum_request));
  GM_match_peoplenum_return_descriptor_ = file->message_type(7);
  static const int GM_match_peoplenum_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_return, data_),
  };
  GM_match_peoplenum_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_peoplenum_return_descriptor_,
      GM_match_peoplenum_return::default_instance_,
      GM_match_peoplenum_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_peoplenum_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_peoplenum_return));
  GM_Match_notify_descriptor_ = file->message_type(8);
  static const int GM_Match_notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_notify, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_notify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_notify, id_),
  };
  GM_Match_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Match_notify_descriptor_,
      GM_Match_notify::default_instance_,
      GM_Match_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Match_notify));
  GM_match_apply_request_descriptor_ = file->message_type(9);
  static const int GM_match_apply_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_request, matchid_),
  };
  GM_match_apply_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_apply_request_descriptor_,
      GM_match_apply_request::default_instance_,
      GM_match_apply_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_apply_request));
  GM_match_apply_return_descriptor_ = file->message_type(10);
  static const int GM_match_apply_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_return, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_return, id_),
  };
  GM_match_apply_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_apply_return_descriptor_,
      GM_match_apply_return::default_instance_,
      GM_match_apply_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_apply_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_apply_return));
  GM_match_join_request_descriptor_ = file->message_type(11);
  static const int GM_match_join_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_request, matchid_),
  };
  GM_match_join_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_join_request_descriptor_,
      GM_match_join_request::default_instance_,
      GM_match_join_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_join_request));
  GM_match_join_return_descriptor_ = file->message_type(12);
  static const int GM_match_join_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_return, id_),
  };
  GM_match_join_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_join_return_descriptor_,
      GM_match_join_return::default_instance_,
      GM_match_join_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_join_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_join_return));
  GM_match_quit_request_descriptor_ = file->message_type(13);
  static const int GM_match_quit_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_request, id_),
  };
  GM_match_quit_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_quit_request_descriptor_,
      GM_match_quit_request::default_instance_,
      GM_match_quit_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_quit_request));
  GM_match_quit_return_descriptor_ = file->message_type(14);
  static const int GM_match_quit_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_return, matchid_),
  };
  GM_match_quit_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_quit_return_descriptor_,
      GM_match_quit_return::default_instance_,
      GM_match_quit_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_quit_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_quit_return));
  GM_match_rank_role_descriptor_ = file->message_type(15);
  static const int GM_match_rank_role_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_role, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_role, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_role, data_),
  };
  GM_match_rank_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_rank_role_descriptor_,
      GM_match_rank_role::default_instance_,
      GM_match_rank_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_rank_role));
  GM_match_rank_return_descriptor_ = file->message_type(16);
  static const int GM_match_rank_return_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, reward_),
  };
  GM_match_rank_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_rank_return_descriptor_,
      GM_match_rank_return::default_instance_,
      GM_match_rank_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_rank_return));
  GM_match_rank_request_descriptor_ = file->message_type(17);
  static const int GM_match_rank_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_request, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_request, id_),
  };
  GM_match_rank_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_rank_request_descriptor_,
      GM_match_rank_request::default_instance_,
      GM_match_rank_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_rank_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_rank_request));
  GM_Match_team_descriptor_ = file->message_type(18);
  static const int GM_Match_team_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_team, time_),
  };
  GM_Match_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Match_team_descriptor_,
      GM_Match_team::default_instance_,
      GM_Match_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Match_team));
  GM_match_object_descriptor_ = file->message_type(19);
  static const int GM_match_object_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_object, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_object, num_),
  };
  GM_match_object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_match_object_descriptor_,
      GM_match_object::default_instance_,
      GM_match_object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_match_object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_match_object));
  GM_Match_result_descriptor_ = file->message_type(20);
  static const int GM_Match_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, isover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, lastnum_),
  };
  GM_Match_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Match_result_descriptor_,
      GM_Match_result::default_instance_,
      GM_Match_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Match_result));
  GM_Match_time_return_descriptor_ = file->message_type(21);
  static const int GM_Match_time_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_time_return, begintime_),
  };
  GM_Match_time_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Match_time_return_descriptor_,
      GM_Match_time_return::default_instance_,
      GM_Match_time_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_time_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_time_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Match_time_return));
  GM_Match_rate_return_descriptor_ = file->message_type(22);
  static const int GM_Match_rate_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_rate_return, rate_),
  };
  GM_Match_rate_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Match_rate_return_descriptor_,
      GM_Match_rate_return::default_instance_,
      GM_Match_rate_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_rate_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Match_rate_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Match_rate_return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_match_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_UI_info_descriptor_, &GM_match_UI_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_reward_descriptor_, &GM_match_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_reward_all_descriptor_, &GM_match_reward_all::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_selfJoin_descriptor_, &GM_match_selfJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_UI_return_descriptor_, &GM_match_UI_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_peoplenum_descriptor_, &GM_match_peoplenum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_peoplenum_request_descriptor_, &GM_match_peoplenum_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_peoplenum_return_descriptor_, &GM_match_peoplenum_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Match_notify_descriptor_, &GM_Match_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_apply_request_descriptor_, &GM_match_apply_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_apply_return_descriptor_, &GM_match_apply_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_join_request_descriptor_, &GM_match_join_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_join_return_descriptor_, &GM_match_join_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_quit_request_descriptor_, &GM_match_quit_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_quit_return_descriptor_, &GM_match_quit_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_rank_role_descriptor_, &GM_match_rank_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_rank_return_descriptor_, &GM_match_rank_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_rank_request_descriptor_, &GM_match_rank_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Match_team_descriptor_, &GM_Match_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_match_object_descriptor_, &GM_match_object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Match_result_descriptor_, &GM_Match_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Match_time_return_descriptor_, &GM_Match_time_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Match_rate_return_descriptor_, &GM_Match_rate_return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_match_2etxt() {
  delete GM_match_UI_info::default_instance_;
  delete GM_match_UI_info_reflection_;
  delete GM_match_reward::default_instance_;
  delete GM_match_reward_reflection_;
  delete GM_match_reward_all::default_instance_;
  delete GM_match_reward_all_reflection_;
  delete GM_match_selfJoin::default_instance_;
  delete GM_match_selfJoin_reflection_;
  delete GM_match_UI_return::default_instance_;
  delete GM_match_UI_return_reflection_;
  delete GM_match_peoplenum::default_instance_;
  delete GM_match_peoplenum_reflection_;
  delete GM_match_peoplenum_request::default_instance_;
  delete GM_match_peoplenum_request_reflection_;
  delete GM_match_peoplenum_return::default_instance_;
  delete GM_match_peoplenum_return_reflection_;
  delete GM_Match_notify::default_instance_;
  delete GM_Match_notify_reflection_;
  delete GM_match_apply_request::default_instance_;
  delete GM_match_apply_request_reflection_;
  delete GM_match_apply_return::default_instance_;
  delete GM_match_apply_return_reflection_;
  delete GM_match_join_request::default_instance_;
  delete GM_match_join_request_reflection_;
  delete GM_match_join_return::default_instance_;
  delete GM_match_join_return_reflection_;
  delete GM_match_quit_request::default_instance_;
  delete GM_match_quit_request_reflection_;
  delete GM_match_quit_return::default_instance_;
  delete GM_match_quit_return_reflection_;
  delete GM_match_rank_role::default_instance_;
  delete GM_match_rank_role_reflection_;
  delete GM_match_rank_return::default_instance_;
  delete GM_match_rank_return_reflection_;
  delete GM_match_rank_request::default_instance_;
  delete GM_match_rank_request_reflection_;
  delete GM_Match_team::default_instance_;
  delete GM_Match_team_reflection_;
  delete GM_match_object::default_instance_;
  delete GM_match_object_reflection_;
  delete GM_Match_result::default_instance_;
  delete GM_Match_result_reflection_;
  delete GM_Match_time_return::default_instance_;
  delete GM_Match_time_return_reflection_;
  delete GM_Match_rate_return::default_instance_;
  delete GM_Match_rate_return_reflection_;
}

void protobuf_AddDesc_match_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmatch.txt\"\256\002\n\020GM_match_UI_info\022\n\n\002ID\030\001"
    " \002(\005\022\017\n\007matchid\030\002 \001(\005\022\022\n\nbattletype\030\003 \001("
    "\005\022\021\n\tstarttype\030\004 \001(\005\022\014\n\004rank\030\005 \001(\005\022\021\n\tst"
    "arttime\030\006 \001(\005\022\017\n\007endtime\030\007 \001(\005\022\016\n\006remark"
    "\030\010 \001(\t\022\021\n\tmatchname\030\t \001(\t\022\022\n\ncircletime\030"
    "\n \001(\005\022\021\n\tpeoplenum\030\013 \001(\005\022\016\n\006costid\030\r \001(\005"
    "\022\014\n\004cost\030\016 \001(\005\022\017\n\007picture\030\017 \001(\005\022\r\n\005state"
    "\030\020 \001(\005\022\016\n\006isopen\030\021 \001(\005\022\014\n\004icon\030\022 \001(\t\"o\n\017"
    "GM_match_reward\022\n\n\002ID\030\001 \002(\005\022\017\n\007matchid\030\002"
    " \001(\005\022\017\n\007maxrank\030\003 \001(\005\022\017\n\007minrank\030\004 \001(\005\022\020"
    "\n\010objectid\030\005 \001(\005\022\013\n\003num\030\006 \001(\005\"F\n\023GM_matc"
    "h_reward_all\022\017\n\007matchid\030\001 \002(\005\022\036\n\004data\030\002 "
    "\003(\0132\020.GM_match_reward\"D\n\021GM_match_selfJo"
    "in\022\017\n\007matchid\030\001 \002(\005\022\022\n\ncreatetime\030\002 \001(\005\022"
    "\n\n\002id\030\003 \001(\005\"\214\001\n\022GM_match_UI_return\022\n\n\002id"
    "\030\001 \002(\005\022\037\n\004data\030\002 \003(\0132\021.GM_match_UI_info\022"
    "#\n\007matchid\030\003 \003(\0132\022.GM_match_selfJoin\022$\n\006"
    "reward\030\004 \003(\0132\024.GM_match_reward_all\"D\n\022GM"
    "_match_peoplenum\022\n\n\002id\030\001 \002(\005\022\017\n\007matchid\030"
    "\002 \001(\005\022\021\n\tpeoplenum\030\003 \001(\005\"(\n\032GM_match_peo"
    "plenum_request\022\n\n\002id\030\001 \002(\005\"N\n\031GM_match_p"
    "eoplenum_return\022\016\n\006roleid\030\001 \002(\005\022!\n\004data\030"
    "\002 \003(\0132\023.GM_match_peoplenum\"<\n\017GM_Match_n"
    "otify\022\017\n\007matchid\030\001 \002(\005\022\014\n\004time\030\002 \001(\005\022\n\n\002"
    "id\030\003 \001(\005\")\n\026GM_match_apply_request\022\017\n\007ma"
    "tchid\030\001 \002(\005\"H\n\025GM_match_apply_return\022\017\n\007"
    "errorid\030\001 \002(\005\022\022\n\ncreatetime\030\002 \001(\005\022\n\n\002id\030"
    "\003 \001(\005\"(\n\025GM_match_join_request\022\017\n\007matchi"
    "d\030\001 \002(\005\"3\n\024GM_match_join_return\022\017\n\007error"
    "id\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\"#\n\025GM_match_quit_re"
    "quest\022\n\n\002id\030\001 \002(\005\"D\n\024GM_match_quit_retur"
    "n\022\017\n\007errorid\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022\017\n\007matchi"
    "d\030\003 \001(\005\"_\n\022GM_match_rank_role\022\014\n\004rank\030\001 "
    "\002(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005score\030\003 \001(\005\022\036\n\004data"
    "\030\004 \003(\0132\020.GM_match_object\"\221\001\n\024GM_match_ra"
    "nk_return\022\014\n\004rank\030\001 \002(\005\022\r\n\005score\030\002 \001(\005\022\n"
    "\n\002id\030\003 \001(\005\022!\n\004data\030\004 \003(\0132\023.GM_match_rank"
    "_role\022\013\n\003num\030\005 \001(\005\022 \n\006reward\030\006 \003(\0132\020.GM_"
    "match_object\"1\n\025GM_match_rank_request\022\014\n"
    "\004page\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\"\035\n\rGM_Match_team"
    "\022\014\n\004time\030\001 \002(\005\"0\n\017GM_match_object\022\020\n\010obj"
    "ectid\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\"o\n\017GM_Match_res"
    "ult\022\014\n\004rank\030\001 \002(\005\022\016\n\006isover\030\002 \001(\005\022\r\n\005sco"
    "re\030\003 \001(\005\022\036\n\004data\030\004 \003(\0132\020.GM_match_object"
    "\022\017\n\007lastnum\030\005 \001(\005\")\n\024GM_Match_time_retur"
    "n\022\021\n\tbegintime\030\001 \003(\005\"$\n\024GM_Match_rate_re"
    "turn\022\014\n\004rate\030\001 \002(\005", 1858);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "match.txt", &protobuf_RegisterTypes);
  GM_match_UI_info::default_instance_ = new GM_match_UI_info();
  GM_match_reward::default_instance_ = new GM_match_reward();
  GM_match_reward_all::default_instance_ = new GM_match_reward_all();
  GM_match_selfJoin::default_instance_ = new GM_match_selfJoin();
  GM_match_UI_return::default_instance_ = new GM_match_UI_return();
  GM_match_peoplenum::default_instance_ = new GM_match_peoplenum();
  GM_match_peoplenum_request::default_instance_ = new GM_match_peoplenum_request();
  GM_match_peoplenum_return::default_instance_ = new GM_match_peoplenum_return();
  GM_Match_notify::default_instance_ = new GM_Match_notify();
  GM_match_apply_request::default_instance_ = new GM_match_apply_request();
  GM_match_apply_return::default_instance_ = new GM_match_apply_return();
  GM_match_join_request::default_instance_ = new GM_match_join_request();
  GM_match_join_return::default_instance_ = new GM_match_join_return();
  GM_match_quit_request::default_instance_ = new GM_match_quit_request();
  GM_match_quit_return::default_instance_ = new GM_match_quit_return();
  GM_match_rank_role::default_instance_ = new GM_match_rank_role();
  GM_match_rank_return::default_instance_ = new GM_match_rank_return();
  GM_match_rank_request::default_instance_ = new GM_match_rank_request();
  GM_Match_team::default_instance_ = new GM_Match_team();
  GM_match_object::default_instance_ = new GM_match_object();
  GM_Match_result::default_instance_ = new GM_Match_result();
  GM_Match_time_return::default_instance_ = new GM_Match_time_return();
  GM_Match_rate_return::default_instance_ = new GM_Match_rate_return();
  GM_match_UI_info::default_instance_->InitAsDefaultInstance();
  GM_match_reward::default_instance_->InitAsDefaultInstance();
  GM_match_reward_all::default_instance_->InitAsDefaultInstance();
  GM_match_selfJoin::default_instance_->InitAsDefaultInstance();
  GM_match_UI_return::default_instance_->InitAsDefaultInstance();
  GM_match_peoplenum::default_instance_->InitAsDefaultInstance();
  GM_match_peoplenum_request::default_instance_->InitAsDefaultInstance();
  GM_match_peoplenum_return::default_instance_->InitAsDefaultInstance();
  GM_Match_notify::default_instance_->InitAsDefaultInstance();
  GM_match_apply_request::default_instance_->InitAsDefaultInstance();
  GM_match_apply_return::default_instance_->InitAsDefaultInstance();
  GM_match_join_request::default_instance_->InitAsDefaultInstance();
  GM_match_join_return::default_instance_->InitAsDefaultInstance();
  GM_match_quit_request::default_instance_->InitAsDefaultInstance();
  GM_match_quit_return::default_instance_->InitAsDefaultInstance();
  GM_match_rank_role::default_instance_->InitAsDefaultInstance();
  GM_match_rank_return::default_instance_->InitAsDefaultInstance();
  GM_match_rank_request::default_instance_->InitAsDefaultInstance();
  GM_Match_team::default_instance_->InitAsDefaultInstance();
  GM_match_object::default_instance_->InitAsDefaultInstance();
  GM_Match_result::default_instance_->InitAsDefaultInstance();
  GM_Match_time_return::default_instance_->InitAsDefaultInstance();
  GM_Match_rate_return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_match_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_match_2etxt {
  StaticDescriptorInitializer_match_2etxt() {
    protobuf_AddDesc_match_2etxt();
  }
} static_descriptor_initializer_match_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_match_UI_info::kIDFieldNumber;
const int GM_match_UI_info::kMatchidFieldNumber;
const int GM_match_UI_info::kBattletypeFieldNumber;
const int GM_match_UI_info::kStarttypeFieldNumber;
const int GM_match_UI_info::kRankFieldNumber;
const int GM_match_UI_info::kStarttimeFieldNumber;
const int GM_match_UI_info::kEndtimeFieldNumber;
const int GM_match_UI_info::kRemarkFieldNumber;
const int GM_match_UI_info::kMatchnameFieldNumber;
const int GM_match_UI_info::kCircletimeFieldNumber;
const int GM_match_UI_info::kPeoplenumFieldNumber;
const int GM_match_UI_info::kCostidFieldNumber;
const int GM_match_UI_info::kCostFieldNumber;
const int GM_match_UI_info::kPictureFieldNumber;
const int GM_match_UI_info::kStateFieldNumber;
const int GM_match_UI_info::kIsopenFieldNumber;
const int GM_match_UI_info::kIconFieldNumber;
#endif  // !_MSC_VER

GM_match_UI_info::GM_match_UI_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_UI_info::InitAsDefaultInstance() {
}

GM_match_UI_info::GM_match_UI_info(const GM_match_UI_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_UI_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  matchid_ = 0;
  battletype_ = 0;
  starttype_ = 0;
  rank_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  circletime_ = 0;
  peoplenum_ = 0;
  costid_ = 0;
  cost_ = 0;
  picture_ = 0;
  state_ = 0;
  isopen_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_UI_info::~GM_match_UI_info() {
  SharedDtor();
}

void GM_match_UI_info::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (matchname_ != &::google::protobuf::internal::kEmptyString) {
    delete matchname_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void GM_match_UI_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_UI_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_UI_info_descriptor_;
}

const GM_match_UI_info& GM_match_UI_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_UI_info* GM_match_UI_info::default_instance_ = NULL;

GM_match_UI_info* GM_match_UI_info::New() const {
  return new GM_match_UI_info;
}

void GM_match_UI_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    matchid_ = 0;
    battletype_ = 0;
    starttype_ = 0;
    rank_ = 0;
    starttime_ = 0;
    endtime_ = 0;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_matchname()) {
      if (matchname_ != &::google::protobuf::internal::kEmptyString) {
        matchname_->clear();
      }
    }
    circletime_ = 0;
    peoplenum_ = 0;
    costid_ = 0;
    cost_ = 0;
    picture_ = 0;
    state_ = 0;
    isopen_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_UI_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional int32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battletype;
        break;
      }

      // optional int32 battletype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starttype;
        break;
      }

      // optional int32 starttype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttype_)));
          set_has_starttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional int32 starttime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_remark;
        break;
      }

      // optional string remark = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_matchname;
        break;
      }

      // optional string matchname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matchname().data(), this->matchname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_circletime;
        break;
      }

      // optional int32 circletime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_circletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circletime_)));
          set_has_circletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_peoplenum;
        break;
      }

      // optional int32 peoplenum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peoplenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peoplenum_)));
          set_has_peoplenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_costid;
        break;
      }

      // optional int32 costid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costid_)));
          set_has_costid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cost;
        break;
      }

      // optional int32 cost = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_picture;
        break;
      }

      // optional int32 picture = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_)));
          set_has_picture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_state;
        break;
      }

      // optional int32 state = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isopen;
        break;
      }

      // optional int32 isopen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_icon;
        break;
      }

      // optional string icon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_UI_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matchid(), output);
  }

  // optional int32 battletype = 3;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battletype(), output);
  }

  // optional int32 starttype = 4;
  if (has_starttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starttype(), output);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // optional int32 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starttime(), output);
  }

  // optional int32 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->endtime(), output);
  }

  // optional string remark = 8;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->remark(), output);
  }

  // optional string matchname = 9;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchname().data(), this->matchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->matchname(), output);
  }

  // optional int32 circletime = 10;
  if (has_circletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->circletime(), output);
  }

  // optional int32 peoplenum = 11;
  if (has_peoplenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->peoplenum(), output);
  }

  // optional int32 costid = 13;
  if (has_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->costid(), output);
  }

  // optional int32 cost = 14;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cost(), output);
  }

  // optional int32 picture = 15;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->picture(), output);
  }

  // optional int32 state = 16;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->state(), output);
  }

  // optional int32 isopen = 17;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isopen(), output);
  }

  // optional string icon = 18;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_UI_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matchid(), target);
  }

  // optional int32 battletype = 3;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battletype(), target);
  }

  // optional int32 starttype = 4;
  if (has_starttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starttype(), target);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  // optional int32 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starttime(), target);
  }

  // optional int32 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->endtime(), target);
  }

  // optional string remark = 8;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->remark(), target);
  }

  // optional string matchname = 9;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchname().data(), this->matchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->matchname(), target);
  }

  // optional int32 circletime = 10;
  if (has_circletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->circletime(), target);
  }

  // optional int32 peoplenum = 11;
  if (has_peoplenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->peoplenum(), target);
  }

  // optional int32 costid = 13;
  if (has_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->costid(), target);
  }

  // optional int32 cost = 14;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cost(), target);
  }

  // optional int32 picture = 15;
  if (has_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->picture(), target);
  }

  // optional int32 state = 16;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->state(), target);
  }

  // optional int32 isopen = 17;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isopen(), target);
  }

  // optional string icon = 18;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_UI_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // optional int32 battletype = 3;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }

    // optional int32 starttype = 4;
    if (has_starttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttype());
    }

    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional string remark = 8;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string matchname = 9;
    if (has_matchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchname());
    }

    // optional int32 circletime = 10;
    if (has_circletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circletime());
    }

    // optional int32 peoplenum = 11;
    if (has_peoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peoplenum());
    }

    // optional int32 costid = 13;
    if (has_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costid());
    }

    // optional int32 cost = 14;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 picture = 15;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->picture());
    }

    // optional int32 state = 16;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 isopen = 17;
    if (has_isopen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopen());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string icon = 18;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_UI_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_UI_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_UI_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_UI_info::MergeFrom(const GM_match_UI_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_starttype()) {
      set_starttype(from.starttype());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matchname()) {
      set_matchname(from.matchname());
    }
    if (from.has_circletime()) {
      set_circletime(from.circletime());
    }
    if (from.has_peoplenum()) {
      set_peoplenum(from.peoplenum());
    }
    if (from.has_costid()) {
      set_costid(from.costid());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_UI_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_UI_info::CopyFrom(const GM_match_UI_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_UI_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_UI_info::Swap(GM_match_UI_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(matchid_, other->matchid_);
    std::swap(battletype_, other->battletype_);
    std::swap(starttype_, other->starttype_);
    std::swap(rank_, other->rank_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(remark_, other->remark_);
    std::swap(matchname_, other->matchname_);
    std::swap(circletime_, other->circletime_);
    std::swap(peoplenum_, other->peoplenum_);
    std::swap(costid_, other->costid_);
    std::swap(cost_, other->cost_);
    std::swap(picture_, other->picture_);
    std::swap(state_, other->state_);
    std::swap(isopen_, other->isopen_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_UI_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_UI_info_descriptor_;
  metadata.reflection = GM_match_UI_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_reward::kIDFieldNumber;
const int GM_match_reward::kMatchidFieldNumber;
const int GM_match_reward::kMaxrankFieldNumber;
const int GM_match_reward::kMinrankFieldNumber;
const int GM_match_reward::kObjectidFieldNumber;
const int GM_match_reward::kNumFieldNumber;
#endif  // !_MSC_VER

GM_match_reward::GM_match_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_reward::InitAsDefaultInstance() {
}

GM_match_reward::GM_match_reward(const GM_match_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  matchid_ = 0;
  maxrank_ = 0;
  minrank_ = 0;
  objectid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_reward::~GM_match_reward() {
  SharedDtor();
}

void GM_match_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_reward_descriptor_;
}

const GM_match_reward& GM_match_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_reward* GM_match_reward::default_instance_ = NULL;

GM_match_reward* GM_match_reward::New() const {
  return new GM_match_reward;
}

void GM_match_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    matchid_ = 0;
    maxrank_ = 0;
    minrank_ = 0;
    objectid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional int32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxrank;
        break;
      }

      // optional int32 maxrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrank_)));
          set_has_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minrank;
        break;
      }

      // optional int32 minrank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minrank_)));
          set_has_minrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_objectid;
        break;
      }

      // optional int32 objectid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matchid(), output);
  }

  // optional int32 maxrank = 3;
  if (has_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxrank(), output);
  }

  // optional int32 minrank = 4;
  if (has_minrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minrank(), output);
  }

  // optional int32 objectid = 5;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->objectid(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matchid(), target);
  }

  // optional int32 maxrank = 3;
  if (has_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxrank(), target);
  }

  // optional int32 minrank = 4;
  if (has_minrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minrank(), target);
  }

  // optional int32 objectid = 5;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->objectid(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // optional int32 maxrank = 3;
    if (has_maxrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrank());
    }

    // optional int32 minrank = 4;
    if (has_minrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minrank());
    }

    // optional int32 objectid = 5;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_reward::MergeFrom(const GM_match_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_maxrank()) {
      set_maxrank(from.maxrank());
    }
    if (from.has_minrank()) {
      set_minrank(from.minrank());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_reward::CopyFrom(const GM_match_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_reward::Swap(GM_match_reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(matchid_, other->matchid_);
    std::swap(maxrank_, other->maxrank_);
    std::swap(minrank_, other->minrank_);
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_reward_descriptor_;
  metadata.reflection = GM_match_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_reward_all::kMatchidFieldNumber;
const int GM_match_reward_all::kDataFieldNumber;
#endif  // !_MSC_VER

GM_match_reward_all::GM_match_reward_all()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_reward_all::InitAsDefaultInstance() {
}

GM_match_reward_all::GM_match_reward_all(const GM_match_reward_all& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_reward_all::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_reward_all::~GM_match_reward_all() {
  SharedDtor();
}

void GM_match_reward_all::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_reward_all::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_reward_all::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_reward_all_descriptor_;
}

const GM_match_reward_all& GM_match_reward_all::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_reward_all* GM_match_reward_all::default_instance_ = NULL;

GM_match_reward_all* GM_match_reward_all::New() const {
  return new GM_match_reward_all;
}

void GM_match_reward_all::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_reward_all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_match_reward data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_reward_all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  // repeated .GM_match_reward data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_reward_all::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  // repeated .GM_match_reward data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_reward_all::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

  }
  // repeated .GM_match_reward data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_reward_all::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_reward_all* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_reward_all*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_reward_all::MergeFrom(const GM_match_reward_all& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_reward_all::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_reward_all::CopyFrom(const GM_match_reward_all& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_reward_all::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_match_reward_all::Swap(GM_match_reward_all* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_reward_all::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_reward_all_descriptor_;
  metadata.reflection = GM_match_reward_all_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_selfJoin::kMatchidFieldNumber;
const int GM_match_selfJoin::kCreatetimeFieldNumber;
const int GM_match_selfJoin::kIdFieldNumber;
#endif  // !_MSC_VER

GM_match_selfJoin::GM_match_selfJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_selfJoin::InitAsDefaultInstance() {
}

GM_match_selfJoin::GM_match_selfJoin(const GM_match_selfJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_selfJoin::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  createtime_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_selfJoin::~GM_match_selfJoin() {
  SharedDtor();
}

void GM_match_selfJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_selfJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_selfJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_selfJoin_descriptor_;
}

const GM_match_selfJoin& GM_match_selfJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_selfJoin* GM_match_selfJoin::default_instance_ = NULL;

GM_match_selfJoin* GM_match_selfJoin::New() const {
  return new GM_match_selfJoin;
}

void GM_match_selfJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    createtime_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_selfJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createtime;
        break;
      }

      // optional int32 createtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_selfJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  // optional int32 createtime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->createtime(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_selfJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  // optional int32 createtime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->createtime(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_selfJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // optional int32 createtime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_selfJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_selfJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_selfJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_selfJoin::MergeFrom(const GM_match_selfJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_selfJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_selfJoin::CopyFrom(const GM_match_selfJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_selfJoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_selfJoin::Swap(GM_match_selfJoin* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(createtime_, other->createtime_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_selfJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_selfJoin_descriptor_;
  metadata.reflection = GM_match_selfJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_UI_return::kIdFieldNumber;
const int GM_match_UI_return::kDataFieldNumber;
const int GM_match_UI_return::kMatchidFieldNumber;
const int GM_match_UI_return::kRewardFieldNumber;
#endif  // !_MSC_VER

GM_match_UI_return::GM_match_UI_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_UI_return::InitAsDefaultInstance() {
}

GM_match_UI_return::GM_match_UI_return(const GM_match_UI_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_UI_return::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_UI_return::~GM_match_UI_return() {
  SharedDtor();
}

void GM_match_UI_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_UI_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_UI_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_UI_return_descriptor_;
}

const GM_match_UI_return& GM_match_UI_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_UI_return* GM_match_UI_return::default_instance_ = NULL;

GM_match_UI_return* GM_match_UI_return::New() const {
  return new GM_match_UI_return;
}

void GM_match_UI_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  data_.Clear();
  matchid_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_UI_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_match_UI_info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(26)) goto parse_matchid;
        break;
      }

      // repeated .GM_match_selfJoin matchid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matchid;
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .GM_match_reward_all reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_UI_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .GM_match_UI_info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // repeated .GM_match_selfJoin matchid = 3;
  for (int i = 0; i < this->matchid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matchid(i), output);
  }

  // repeated .GM_match_reward_all reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_UI_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .GM_match_UI_info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // repeated .GM_match_selfJoin matchid = 3;
  for (int i = 0; i < this->matchid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->matchid(i), target);
  }

  // repeated .GM_match_reward_all reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_UI_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .GM_match_UI_info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .GM_match_selfJoin matchid = 3;
  total_size += 1 * this->matchid_size();
  for (int i = 0; i < this->matchid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchid(i));
  }

  // repeated .GM_match_reward_all reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_UI_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_UI_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_UI_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_UI_return::MergeFrom(const GM_match_UI_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  matchid_.MergeFrom(from.matchid_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_UI_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_UI_return::CopyFrom(const GM_match_UI_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_UI_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchid_size(); i++) {
    if (!this->matchid(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GM_match_UI_return::Swap(GM_match_UI_return* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    data_.Swap(&other->data_);
    matchid_.Swap(&other->matchid_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_UI_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_UI_return_descriptor_;
  metadata.reflection = GM_match_UI_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_peoplenum::kIdFieldNumber;
const int GM_match_peoplenum::kMatchidFieldNumber;
const int GM_match_peoplenum::kPeoplenumFieldNumber;
#endif  // !_MSC_VER

GM_match_peoplenum::GM_match_peoplenum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_peoplenum::InitAsDefaultInstance() {
}

GM_match_peoplenum::GM_match_peoplenum(const GM_match_peoplenum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_peoplenum::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  matchid_ = 0;
  peoplenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_peoplenum::~GM_match_peoplenum() {
  SharedDtor();
}

void GM_match_peoplenum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_peoplenum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_peoplenum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_peoplenum_descriptor_;
}

const GM_match_peoplenum& GM_match_peoplenum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_peoplenum* GM_match_peoplenum::default_instance_ = NULL;

GM_match_peoplenum* GM_match_peoplenum::New() const {
  return new GM_match_peoplenum;
}

void GM_match_peoplenum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    matchid_ = 0;
    peoplenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_peoplenum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // optional int32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peoplenum;
        break;
      }

      // optional int32 peoplenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peoplenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peoplenum_)));
          set_has_peoplenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_peoplenum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matchid(), output);
  }

  // optional int32 peoplenum = 3;
  if (has_peoplenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peoplenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_peoplenum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matchid(), target);
  }

  // optional int32 peoplenum = 3;
  if (has_peoplenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peoplenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_peoplenum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // optional int32 peoplenum = 3;
    if (has_peoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peoplenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_peoplenum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_peoplenum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_peoplenum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_peoplenum::MergeFrom(const GM_match_peoplenum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_peoplenum()) {
      set_peoplenum(from.peoplenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_peoplenum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_peoplenum::CopyFrom(const GM_match_peoplenum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_peoplenum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_peoplenum::Swap(GM_match_peoplenum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(matchid_, other->matchid_);
    std::swap(peoplenum_, other->peoplenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_peoplenum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_peoplenum_descriptor_;
  metadata.reflection = GM_match_peoplenum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_peoplenum_request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_match_peoplenum_request::GM_match_peoplenum_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_peoplenum_request::InitAsDefaultInstance() {
}

GM_match_peoplenum_request::GM_match_peoplenum_request(const GM_match_peoplenum_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_peoplenum_request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_peoplenum_request::~GM_match_peoplenum_request() {
  SharedDtor();
}

void GM_match_peoplenum_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_peoplenum_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_peoplenum_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_peoplenum_request_descriptor_;
}

const GM_match_peoplenum_request& GM_match_peoplenum_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_peoplenum_request* GM_match_peoplenum_request::default_instance_ = NULL;

GM_match_peoplenum_request* GM_match_peoplenum_request::New() const {
  return new GM_match_peoplenum_request;
}

void GM_match_peoplenum_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_peoplenum_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_peoplenum_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_peoplenum_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_peoplenum_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_peoplenum_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_peoplenum_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_peoplenum_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_peoplenum_request::MergeFrom(const GM_match_peoplenum_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_peoplenum_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_peoplenum_request::CopyFrom(const GM_match_peoplenum_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_peoplenum_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_peoplenum_request::Swap(GM_match_peoplenum_request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_peoplenum_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_peoplenum_request_descriptor_;
  metadata.reflection = GM_match_peoplenum_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_peoplenum_return::kRoleidFieldNumber;
const int GM_match_peoplenum_return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_match_peoplenum_return::GM_match_peoplenum_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_peoplenum_return::InitAsDefaultInstance() {
}

GM_match_peoplenum_return::GM_match_peoplenum_return(const GM_match_peoplenum_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_peoplenum_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_peoplenum_return::~GM_match_peoplenum_return() {
  SharedDtor();
}

void GM_match_peoplenum_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_peoplenum_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_peoplenum_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_peoplenum_return_descriptor_;
}

const GM_match_peoplenum_return& GM_match_peoplenum_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_peoplenum_return* GM_match_peoplenum_return::default_instance_ = NULL;

GM_match_peoplenum_return* GM_match_peoplenum_return::New() const {
  return new GM_match_peoplenum_return;
}

void GM_match_peoplenum_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_peoplenum_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_match_peoplenum data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_peoplenum_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .GM_match_peoplenum data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_peoplenum_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .GM_match_peoplenum data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_peoplenum_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .GM_match_peoplenum data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_peoplenum_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_peoplenum_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_peoplenum_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_peoplenum_return::MergeFrom(const GM_match_peoplenum_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_peoplenum_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_peoplenum_return::CopyFrom(const GM_match_peoplenum_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_peoplenum_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_match_peoplenum_return::Swap(GM_match_peoplenum_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_peoplenum_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_peoplenum_return_descriptor_;
  metadata.reflection = GM_match_peoplenum_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Match_notify::kMatchidFieldNumber;
const int GM_Match_notify::kTimeFieldNumber;
const int GM_Match_notify::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Match_notify::GM_Match_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Match_notify::InitAsDefaultInstance() {
}

GM_Match_notify::GM_Match_notify(const GM_Match_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Match_notify::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  time_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Match_notify::~GM_Match_notify() {
  SharedDtor();
}

void GM_Match_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Match_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Match_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Match_notify_descriptor_;
}

const GM_Match_notify& GM_Match_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_Match_notify* GM_Match_notify::default_instance_ = NULL;

GM_Match_notify* GM_Match_notify::New() const {
  return new GM_Match_notify;
}

void GM_Match_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    time_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Match_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Match_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Match_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Match_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Match_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Match_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Match_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Match_notify::MergeFrom(const GM_Match_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Match_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Match_notify::CopyFrom(const GM_Match_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Match_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Match_notify::Swap(GM_Match_notify* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Match_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Match_notify_descriptor_;
  metadata.reflection = GM_Match_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_apply_request::kMatchidFieldNumber;
#endif  // !_MSC_VER

GM_match_apply_request::GM_match_apply_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_apply_request::InitAsDefaultInstance() {
}

GM_match_apply_request::GM_match_apply_request(const GM_match_apply_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_apply_request::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_apply_request::~GM_match_apply_request() {
  SharedDtor();
}

void GM_match_apply_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_apply_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_apply_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_apply_request_descriptor_;
}

const GM_match_apply_request& GM_match_apply_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_apply_request* GM_match_apply_request::default_instance_ = NULL;

GM_match_apply_request* GM_match_apply_request::New() const {
  return new GM_match_apply_request;
}

void GM_match_apply_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_apply_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_apply_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_apply_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_apply_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_apply_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_apply_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_apply_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_apply_request::MergeFrom(const GM_match_apply_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_apply_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_apply_request::CopyFrom(const GM_match_apply_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_apply_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_apply_request::Swap(GM_match_apply_request* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_apply_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_apply_request_descriptor_;
  metadata.reflection = GM_match_apply_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_apply_return::kErroridFieldNumber;
const int GM_match_apply_return::kCreatetimeFieldNumber;
const int GM_match_apply_return::kIdFieldNumber;
#endif  // !_MSC_VER

GM_match_apply_return::GM_match_apply_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_apply_return::InitAsDefaultInstance() {
}

GM_match_apply_return::GM_match_apply_return(const GM_match_apply_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_apply_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  createtime_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_apply_return::~GM_match_apply_return() {
  SharedDtor();
}

void GM_match_apply_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_apply_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_apply_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_apply_return_descriptor_;
}

const GM_match_apply_return& GM_match_apply_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_apply_return* GM_match_apply_return::default_instance_ = NULL;

GM_match_apply_return* GM_match_apply_return::New() const {
  return new GM_match_apply_return;
}

void GM_match_apply_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    createtime_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_apply_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createtime;
        break;
      }

      // optional int32 createtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_apply_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 createtime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->createtime(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_apply_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 createtime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->createtime(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_apply_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 createtime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_apply_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_apply_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_apply_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_apply_return::MergeFrom(const GM_match_apply_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_apply_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_apply_return::CopyFrom(const GM_match_apply_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_apply_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_apply_return::Swap(GM_match_apply_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(createtime_, other->createtime_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_apply_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_apply_return_descriptor_;
  metadata.reflection = GM_match_apply_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_join_request::kMatchidFieldNumber;
#endif  // !_MSC_VER

GM_match_join_request::GM_match_join_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_join_request::InitAsDefaultInstance() {
}

GM_match_join_request::GM_match_join_request(const GM_match_join_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_join_request::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_join_request::~GM_match_join_request() {
  SharedDtor();
}

void GM_match_join_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_join_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_join_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_join_request_descriptor_;
}

const GM_match_join_request& GM_match_join_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_join_request* GM_match_join_request::default_instance_ = NULL;

GM_match_join_request* GM_match_join_request::New() const {
  return new GM_match_join_request;
}

void GM_match_join_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_join_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_join_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_join_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_join_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_join_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_join_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_join_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_join_request::MergeFrom(const GM_match_join_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_join_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_join_request::CopyFrom(const GM_match_join_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_join_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_join_request::Swap(GM_match_join_request* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_join_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_join_request_descriptor_;
  metadata.reflection = GM_match_join_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_join_return::kErroridFieldNumber;
const int GM_match_join_return::kIdFieldNumber;
#endif  // !_MSC_VER

GM_match_join_return::GM_match_join_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_join_return::InitAsDefaultInstance() {
}

GM_match_join_return::GM_match_join_return(const GM_match_join_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_join_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_join_return::~GM_match_join_return() {
  SharedDtor();
}

void GM_match_join_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_join_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_join_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_join_return_descriptor_;
}

const GM_match_join_return& GM_match_join_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_join_return* GM_match_join_return::default_instance_ = NULL;

GM_match_join_return* GM_match_join_return::New() const {
  return new GM_match_join_return;
}

void GM_match_join_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_join_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_join_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_join_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_join_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_join_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_join_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_join_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_join_return::MergeFrom(const GM_match_join_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_join_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_join_return::CopyFrom(const GM_match_join_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_join_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_join_return::Swap(GM_match_join_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_join_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_join_return_descriptor_;
  metadata.reflection = GM_match_join_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_quit_request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_match_quit_request::GM_match_quit_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_quit_request::InitAsDefaultInstance() {
}

GM_match_quit_request::GM_match_quit_request(const GM_match_quit_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_quit_request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_quit_request::~GM_match_quit_request() {
  SharedDtor();
}

void GM_match_quit_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_quit_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_quit_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_quit_request_descriptor_;
}

const GM_match_quit_request& GM_match_quit_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_quit_request* GM_match_quit_request::default_instance_ = NULL;

GM_match_quit_request* GM_match_quit_request::New() const {
  return new GM_match_quit_request;
}

void GM_match_quit_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_quit_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_quit_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_quit_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_quit_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_quit_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_quit_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_quit_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_quit_request::MergeFrom(const GM_match_quit_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_quit_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_quit_request::CopyFrom(const GM_match_quit_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_quit_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_quit_request::Swap(GM_match_quit_request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_quit_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_quit_request_descriptor_;
  metadata.reflection = GM_match_quit_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_quit_return::kErroridFieldNumber;
const int GM_match_quit_return::kIdFieldNumber;
const int GM_match_quit_return::kMatchidFieldNumber;
#endif  // !_MSC_VER

GM_match_quit_return::GM_match_quit_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_quit_return::InitAsDefaultInstance() {
}

GM_match_quit_return::GM_match_quit_return(const GM_match_quit_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_quit_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  id_ = 0;
  matchid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_quit_return::~GM_match_quit_return() {
  SharedDtor();
}

void GM_match_quit_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_quit_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_quit_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_quit_return_descriptor_;
}

const GM_match_quit_return& GM_match_quit_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_quit_return* GM_match_quit_return::default_instance_ = NULL;

GM_match_quit_return* GM_match_quit_return::New() const {
  return new GM_match_quit_return;
}

void GM_match_quit_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    id_ = 0;
    matchid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_quit_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_matchid;
        break;
      }

      // optional int32 matchid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_quit_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 matchid = 3;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_quit_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 matchid = 3;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_quit_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 matchid = 3;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_quit_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_quit_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_quit_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_quit_return::MergeFrom(const GM_match_quit_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_quit_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_quit_return::CopyFrom(const GM_match_quit_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_quit_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_quit_return::Swap(GM_match_quit_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(id_, other->id_);
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_quit_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_quit_return_descriptor_;
  metadata.reflection = GM_match_quit_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_rank_role::kRankFieldNumber;
const int GM_match_rank_role::kNameFieldNumber;
const int GM_match_rank_role::kScoreFieldNumber;
const int GM_match_rank_role::kDataFieldNumber;
#endif  // !_MSC_VER

GM_match_rank_role::GM_match_rank_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_rank_role::InitAsDefaultInstance() {
}

GM_match_rank_role::GM_match_rank_role(const GM_match_rank_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_rank_role::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_rank_role::~GM_match_rank_role() {
  SharedDtor();
}

void GM_match_rank_role::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_match_rank_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_rank_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_rank_role_descriptor_;
}

const GM_match_rank_role& GM_match_rank_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_rank_role* GM_match_rank_role::default_instance_ = NULL;

GM_match_rank_role* GM_match_rank_role::New() const {
  return new GM_match_rank_role;
}

void GM_match_rank_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_rank_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .GM_match_object data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_rank_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // repeated .GM_match_object data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_rank_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // repeated .GM_match_object data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_rank_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .GM_match_object data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_rank_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_rank_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_rank_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_rank_role::MergeFrom(const GM_match_rank_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_rank_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_rank_role::CopyFrom(const GM_match_rank_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_rank_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_match_rank_role::Swap(GM_match_rank_role* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_rank_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_rank_role_descriptor_;
  metadata.reflection = GM_match_rank_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_rank_return::kRankFieldNumber;
const int GM_match_rank_return::kScoreFieldNumber;
const int GM_match_rank_return::kIdFieldNumber;
const int GM_match_rank_return::kDataFieldNumber;
const int GM_match_rank_return::kNumFieldNumber;
const int GM_match_rank_return::kRewardFieldNumber;
#endif  // !_MSC_VER

GM_match_rank_return::GM_match_rank_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_rank_return::InitAsDefaultInstance() {
}

GM_match_rank_return::GM_match_rank_return(const GM_match_rank_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_rank_return::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  score_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_rank_return::~GM_match_rank_return() {
  SharedDtor();
}

void GM_match_rank_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_rank_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_rank_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_rank_return_descriptor_;
}

const GM_match_rank_return& GM_match_rank_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_rank_return* GM_match_rank_return::default_instance_ = NULL;

GM_match_rank_return* GM_match_rank_return::New() const {
  return new GM_match_rank_return;
}

void GM_match_rank_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    score_ = 0;
    id_ = 0;
    num_ = 0;
  }
  data_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_rank_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .GM_match_rank_role data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional int32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // repeated .GM_match_object reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_rank_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // repeated .GM_match_rank_role data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  // repeated .GM_match_object reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_rank_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // repeated .GM_match_rank_role data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  // repeated .GM_match_object reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_rank_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated .GM_match_rank_role data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .GM_match_object reward = 6;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_rank_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_rank_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_rank_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_rank_return::MergeFrom(const GM_match_rank_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_rank_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_rank_return::CopyFrom(const GM_match_rank_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_rank_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void GM_match_rank_return::Swap(GM_match_rank_return* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(id_, other->id_);
    data_.Swap(&other->data_);
    std::swap(num_, other->num_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_rank_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_rank_return_descriptor_;
  metadata.reflection = GM_match_rank_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_rank_request::kPageFieldNumber;
const int GM_match_rank_request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_match_rank_request::GM_match_rank_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_rank_request::InitAsDefaultInstance() {
}

GM_match_rank_request::GM_match_rank_request(const GM_match_rank_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_rank_request::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_rank_request::~GM_match_rank_request() {
  SharedDtor();
}

void GM_match_rank_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_rank_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_rank_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_rank_request_descriptor_;
}

const GM_match_rank_request& GM_match_rank_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_rank_request* GM_match_rank_request::default_instance_ = NULL;

GM_match_rank_request* GM_match_rank_request::New() const {
  return new GM_match_rank_request;
}

void GM_match_rank_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_rank_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_rank_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_rank_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_rank_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_rank_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_rank_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_rank_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_rank_request::MergeFrom(const GM_match_rank_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_rank_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_rank_request::CopyFrom(const GM_match_rank_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_rank_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_rank_request::Swap(GM_match_rank_request* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_rank_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_rank_request_descriptor_;
  metadata.reflection = GM_match_rank_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Match_team::kTimeFieldNumber;
#endif  // !_MSC_VER

GM_Match_team::GM_Match_team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Match_team::InitAsDefaultInstance() {
}

GM_Match_team::GM_Match_team(const GM_Match_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Match_team::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Match_team::~GM_Match_team() {
  SharedDtor();
}

void GM_Match_team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Match_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Match_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Match_team_descriptor_;
}

const GM_Match_team& GM_Match_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_Match_team* GM_Match_team::default_instance_ = NULL;

GM_Match_team* GM_Match_team::New() const {
  return new GM_Match_team;
}

void GM_Match_team::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Match_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Match_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Match_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Match_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Match_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Match_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Match_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Match_team::MergeFrom(const GM_Match_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Match_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Match_team::CopyFrom(const GM_Match_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Match_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Match_team::Swap(GM_Match_team* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Match_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Match_team_descriptor_;
  metadata.reflection = GM_Match_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_match_object::kObjectidFieldNumber;
const int GM_match_object::kNumFieldNumber;
#endif  // !_MSC_VER

GM_match_object::GM_match_object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_match_object::InitAsDefaultInstance() {
}

GM_match_object::GM_match_object(const GM_match_object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_match_object::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_match_object::~GM_match_object() {
  SharedDtor();
}

void GM_match_object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_match_object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_match_object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_match_object_descriptor_;
}

const GM_match_object& GM_match_object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_match_object* GM_match_object::default_instance_ = NULL;

GM_match_object* GM_match_object::New() const {
  return new GM_match_object;
}

void GM_match_object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_match_object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_match_object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_match_object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_match_object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_match_object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_match_object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_match_object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_match_object::MergeFrom(const GM_match_object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_match_object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_match_object::CopyFrom(const GM_match_object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_match_object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_match_object::Swap(GM_match_object* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_match_object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_match_object_descriptor_;
  metadata.reflection = GM_match_object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Match_result::kRankFieldNumber;
const int GM_Match_result::kIsoverFieldNumber;
const int GM_Match_result::kScoreFieldNumber;
const int GM_Match_result::kDataFieldNumber;
const int GM_Match_result::kLastnumFieldNumber;
#endif  // !_MSC_VER

GM_Match_result::GM_Match_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Match_result::InitAsDefaultInstance() {
}

GM_Match_result::GM_Match_result(const GM_Match_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Match_result::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  isover_ = 0;
  score_ = 0;
  lastnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Match_result::~GM_Match_result() {
  SharedDtor();
}

void GM_Match_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Match_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Match_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Match_result_descriptor_;
}

const GM_Match_result& GM_Match_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_Match_result* GM_Match_result::default_instance_ = NULL;

GM_Match_result* GM_Match_result::New() const {
  return new GM_Match_result;
}

void GM_Match_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    isover_ = 0;
    score_ = 0;
    lastnum_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Match_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isover;
        break;
      }

      // optional int32 isover = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isover_)));
          set_has_isover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .GM_match_object data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_lastnum;
        break;
      }

      // optional int32 lastnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastnum_)));
          set_has_lastnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Match_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 isover = 2;
  if (has_isover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isover(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // repeated .GM_match_object data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional int32 lastnum = 5;
  if (has_lastnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Match_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 isover = 2;
  if (has_isover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isover(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // repeated .GM_match_object data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional int32 lastnum = 5;
  if (has_lastnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Match_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 isover = 2;
    if (has_isover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isover());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 lastnum = 5;
    if (has_lastnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastnum());
    }

  }
  // repeated .GM_match_object data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Match_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Match_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Match_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Match_result::MergeFrom(const GM_Match_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_isover()) {
      set_isover(from.isover());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_lastnum()) {
      set_lastnum(from.lastnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Match_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Match_result::CopyFrom(const GM_Match_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Match_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Match_result::Swap(GM_Match_result* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(isover_, other->isover_);
    std::swap(score_, other->score_);
    data_.Swap(&other->data_);
    std::swap(lastnum_, other->lastnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Match_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Match_result_descriptor_;
  metadata.reflection = GM_Match_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Match_time_return::kBegintimeFieldNumber;
#endif  // !_MSC_VER

GM_Match_time_return::GM_Match_time_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Match_time_return::InitAsDefaultInstance() {
}

GM_Match_time_return::GM_Match_time_return(const GM_Match_time_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Match_time_return::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Match_time_return::~GM_Match_time_return() {
  SharedDtor();
}

void GM_Match_time_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Match_time_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Match_time_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Match_time_return_descriptor_;
}

const GM_Match_time_return& GM_Match_time_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_Match_time_return* GM_Match_time_return::default_instance_ = NULL;

GM_Match_time_return* GM_Match_time_return::New() const {
  return new GM_Match_time_return;
}

void GM_Match_time_return::Clear() {
  begintime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Match_time_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 begintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_begintime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_begintime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_begintime;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Match_time_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 begintime = 1;
  for (int i = 0; i < this->begintime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->begintime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Match_time_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 begintime = 1;
  for (int i = 0; i < this->begintime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->begintime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Match_time_return::ByteSize() const {
  int total_size = 0;

  // repeated int32 begintime = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->begintime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->begintime(i));
    }
    total_size += 1 * this->begintime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Match_time_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Match_time_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Match_time_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Match_time_return::MergeFrom(const GM_Match_time_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  begintime_.MergeFrom(from.begintime_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Match_time_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Match_time_return::CopyFrom(const GM_Match_time_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Match_time_return::IsInitialized() const {

  return true;
}

void GM_Match_time_return::Swap(GM_Match_time_return* other) {
  if (other != this) {
    begintime_.Swap(&other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Match_time_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Match_time_return_descriptor_;
  metadata.reflection = GM_Match_time_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Match_rate_return::kRateFieldNumber;
#endif  // !_MSC_VER

GM_Match_rate_return::GM_Match_rate_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Match_rate_return::InitAsDefaultInstance() {
}

GM_Match_rate_return::GM_Match_rate_return(const GM_Match_rate_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Match_rate_return::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Match_rate_return::~GM_Match_rate_return() {
  SharedDtor();
}

void GM_Match_rate_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Match_rate_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Match_rate_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Match_rate_return_descriptor_;
}

const GM_Match_rate_return& GM_Match_rate_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_match_2etxt();
  return *default_instance_;
}

GM_Match_rate_return* GM_Match_rate_return::default_instance_ = NULL;

GM_Match_rate_return* GM_Match_rate_return::New() const {
  return new GM_Match_rate_return;
}

void GM_Match_rate_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Match_rate_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Match_rate_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rate = 1;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Match_rate_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rate = 1;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Match_rate_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Match_rate_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Match_rate_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Match_rate_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Match_rate_return::MergeFrom(const GM_Match_rate_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Match_rate_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Match_rate_return::CopyFrom(const GM_Match_rate_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Match_rate_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Match_rate_return::Swap(GM_Match_rate_return* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Match_rate_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Match_rate_return_descriptor_;
  metadata.reflection = GM_Match_rate_return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
