// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.txt

#ifndef PROTOBUF_battle_2etxt__INCLUDED
#define PROTOBUF_battle_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_battle_2etxt();
void protobuf_AssignDesc_battle_2etxt();
void protobuf_ShutdownFile_battle_2etxt();

class GM_BattleFBServerInfo;
class GM_LoginFBServer;
class GM_LoginFBServerResult;
class GM_BattleEntryInfo;
class GM_ItemDrop;
class GM_SkillInfo;
class GM_RoleBaseInfo;
class GM_Buff;
class GM_ClientBuffs;
class GM_ClientAllBuffs;
class GM_EntryInfo_Single;
class GM_EnterSceneInfo;
class GM_FullRoleInfo;
class GM_SendReady;
class GM_NotifyBattleEndTime;
class GM_ActiveBigWave;
class GM_ActiveMonster;
class GM_ClientNotifyDied;
class GM_BattleInfo_Result;
class GM_BattleResult;
class SM_BattleRequest;
class GM_WhiteListInfo;
class GM_DrawCardRequest;
class GM_ReplacePet;
class GM_DrawCardReturn;
class GM_Damage;
class GM_NotifyHPMPChange;
class GM_LeaveBattle;
class GM_RoleLeave;
class SM_BattleInfo;
class SM_BattleResult;
class SyncMovement;
class GM_FBSweepRequest;
class GM_FBSweepReturn;
class GM_PetBattleInfo;
class GM_AllPetBattleInfo;
class GM_RealTime_SendPoint;
class GM_NotifyBuff;
class GM_ClientHpNotify;
class GM_ClientMpNotify;
class GM_Notify_Specialskill;
class GM_CenterBattle;
class SM_TeamMatchData;
class GM_ClientRelive;
class SM_majiang_role_battleresult;
class SM_majiang_battleResult;

// ===================================================================

class GM_BattleFBServerInfo : public ::google::protobuf::Message {
 public:
  GM_BattleFBServerInfo();
  virtual ~GM_BattleFBServerInfo();

  GM_BattleFBServerInfo(const GM_BattleFBServerInfo& from);

  inline GM_BattleFBServerInfo& operator=(const GM_BattleFBServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_BattleFBServerInfo& default_instance();

  void Swap(GM_BattleFBServerInfo* other);

  // implements Message ----------------------------------------------

  GM_BattleFBServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_BattleFBServerInfo& from);
  void MergeFrom(const GM_BattleFBServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 m_FBID = 2;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional int32 m_FBServerID = 3;
  inline bool has_m_fbserverid() const;
  inline void clear_m_fbserverid();
  static const int kMFBServerIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_fbserverid() const;
  inline void set_m_fbserverid(::google::protobuf::int32 value);

  // optional int32 m_FBTypeID = 4;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFBTypeIDFieldNumber = 4;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 m_increidmatch = 5;
  inline bool has_m_increidmatch() const;
  inline void clear_m_increidmatch();
  static const int kMIncreidmatchFieldNumber = 5;
  inline ::google::protobuf::int32 m_increidmatch() const;
  inline void set_m_increidmatch(::google::protobuf::int32 value);

  // optional string m_playWay = 6;
  inline bool has_m_playway() const;
  inline void clear_m_playway();
  static const int kMPlayWayFieldNumber = 6;
  inline const ::std::string& m_playway() const;
  inline void set_m_playway(const ::std::string& value);
  inline void set_m_playway(const char* value);
  inline void set_m_playway(const char* value, size_t size);
  inline ::std::string* mutable_m_playway();
  inline ::std::string* release_m_playway();
  inline void set_allocated_m_playway(::std::string* m_playway);

  // optional int32 m_playerCount = 7;
  inline bool has_m_playercount() const;
  inline void clear_m_playercount();
  static const int kMPlayerCountFieldNumber = 7;
  inline ::google::protobuf::int32 m_playercount() const;
  inline void set_m_playercount(::google::protobuf::int32 value);

  // optional int32 m_gameCount = 8;
  inline bool has_m_gamecount() const;
  inline void clear_m_gamecount();
  static const int kMGameCountFieldNumber = 8;
  inline ::google::protobuf::int32 m_gamecount() const;
  inline void set_m_gamecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_BattleFBServerInfo)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_fbserverid();
  inline void clear_has_m_fbserverid();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_increidmatch();
  inline void clear_has_m_increidmatch();
  inline void set_has_m_playway();
  inline void clear_has_m_playway();
  inline void set_has_m_playercount();
  inline void clear_has_m_playercount();
  inline void set_has_m_gamecount();
  inline void clear_has_m_gamecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_fbid_;
  ::google::protobuf::int32 m_fbserverid_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::std::string* m_playway_;
  ::google::protobuf::int32 m_increidmatch_;
  ::google::protobuf::int32 m_playercount_;
  ::google::protobuf::int32 m_gamecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_BattleFBServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_LoginFBServer : public ::google::protobuf::Message {
 public:
  GM_LoginFBServer();
  virtual ~GM_LoginFBServer();

  GM_LoginFBServer(const GM_LoginFBServer& from);

  inline GM_LoginFBServer& operator=(const GM_LoginFBServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_LoginFBServer& default_instance();

  void Swap(GM_LoginFBServer* other);

  // implements Message ----------------------------------------------

  GM_LoginFBServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_LoginFBServer& from);
  void MergeFrom(const GM_LoginFBServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_RoleID = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_FBID = 2;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional double m_Longitude = 3;
  inline bool has_m_longitude() const;
  inline void clear_m_longitude();
  static const int kMLongitudeFieldNumber = 3;
  inline double m_longitude() const;
  inline void set_m_longitude(double value);

  // optional double m_Latitude = 4;
  inline bool has_m_latitude() const;
  inline void clear_m_latitude();
  static const int kMLatitudeFieldNumber = 4;
  inline double m_latitude() const;
  inline void set_m_latitude(double value);

  // optional string m_reallyPos = 5;
  inline bool has_m_reallypos() const;
  inline void clear_m_reallypos();
  static const int kMReallyPosFieldNumber = 5;
  inline const ::std::string& m_reallypos() const;
  inline void set_m_reallypos(const ::std::string& value);
  inline void set_m_reallypos(const char* value);
  inline void set_m_reallypos(const char* value, size_t size);
  inline ::std::string* mutable_m_reallypos();
  inline ::std::string* release_m_reallypos();
  inline void set_allocated_m_reallypos(::std::string* m_reallypos);

  // @@protoc_insertion_point(class_scope:GM_LoginFBServer)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_longitude();
  inline void clear_has_m_longitude();
  inline void set_has_m_latitude();
  inline void clear_has_m_latitude();
  inline void set_has_m_reallypos();
  inline void clear_has_m_reallypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_fbid_;
  double m_longitude_;
  double m_latitude_;
  ::std::string* m_reallypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_LoginFBServer* default_instance_;
};
// -------------------------------------------------------------------

class GM_LoginFBServerResult : public ::google::protobuf::Message {
 public:
  GM_LoginFBServerResult();
  virtual ~GM_LoginFBServerResult();

  GM_LoginFBServerResult(const GM_LoginFBServerResult& from);

  inline GM_LoginFBServerResult& operator=(const GM_LoginFBServerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_LoginFBServerResult& default_instance();

  void Swap(GM_LoginFBServerResult* other);

  // implements Message ----------------------------------------------

  GM_LoginFBServerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_LoginFBServerResult& from);
  void MergeFrom(const GM_LoginFBServerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 m_battletype = 2;
  inline bool has_m_battletype() const;
  inline void clear_m_battletype();
  static const int kMBattletypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_battletype() const;
  inline void set_m_battletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_LoginFBServerResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_m_battletype();
  inline void clear_has_m_battletype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 m_battletype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_LoginFBServerResult* default_instance_;
};
// -------------------------------------------------------------------

class GM_BattleEntryInfo : public ::google::protobuf::Message {
 public:
  GM_BattleEntryInfo();
  virtual ~GM_BattleEntryInfo();

  GM_BattleEntryInfo(const GM_BattleEntryInfo& from);

  inline GM_BattleEntryInfo& operator=(const GM_BattleEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_BattleEntryInfo& default_instance();

  void Swap(GM_BattleEntryInfo* other);

  // implements Message ----------------------------------------------

  GM_BattleEntryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_BattleEntryInfo& from);
  void MergeFrom(const GM_BattleEntryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool m_isSelf = 1;
  inline bool has_m_isself() const;
  inline void clear_m_isself();
  static const int kMIsSelfFieldNumber = 1;
  inline bool m_isself() const;
  inline void set_m_isself(bool value);

  // optional int32 m_RoomMasterID = 2;
  inline bool has_m_roommasterid() const;
  inline void clear_m_roommasterid();
  static const int kMRoomMasterIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_roommasterid() const;
  inline void set_m_roommasterid(::google::protobuf::int32 value);

  // repeated .GM_EntryInfo_Single m_Character = 3;
  inline int m_character_size() const;
  inline void clear_m_character();
  static const int kMCharacterFieldNumber = 3;
  inline const ::GM_EntryInfo_Single& m_character(int index) const;
  inline ::GM_EntryInfo_Single* mutable_m_character(int index);
  inline ::GM_EntryInfo_Single* add_m_character();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >&
      m_character() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >*
      mutable_m_character();

  // @@protoc_insertion_point(class_scope:GM_BattleEntryInfo)
 private:
  inline void set_has_m_isself();
  inline void clear_has_m_isself();
  inline void set_has_m_roommasterid();
  inline void clear_has_m_roommasterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool m_isself_;
  ::google::protobuf::int32 m_roommasterid_;
  ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single > m_character_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_BattleEntryInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_ItemDrop : public ::google::protobuf::Message {
 public:
  GM_ItemDrop();
  virtual ~GM_ItemDrop();

  GM_ItemDrop(const GM_ItemDrop& from);

  inline GM_ItemDrop& operator=(const GM_ItemDrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ItemDrop& default_instance();

  void Swap(GM_ItemDrop* other);

  // implements Message ----------------------------------------------

  GM_ItemDrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ItemDrop& from);
  void MergeFrom(const GM_ItemDrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_ObjectID = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // optional int32 m_Count = 2;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 2;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ItemDrop)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ItemDrop* default_instance_;
};
// -------------------------------------------------------------------

class GM_SkillInfo : public ::google::protobuf::Message {
 public:
  GM_SkillInfo();
  virtual ~GM_SkillInfo();

  GM_SkillInfo(const GM_SkillInfo& from);

  inline GM_SkillInfo& operator=(const GM_SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_SkillInfo& default_instance();

  void Swap(GM_SkillInfo* other);

  // implements Message ----------------------------------------------

  GM_SkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_SkillInfo& from);
  void MergeFrom(const GM_SkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_SkillID = 1;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_skillid() const;
  inline void set_m_skillid(::google::protobuf::int32 value);

  // optional int32 m_SkillLv = 2;
  inline bool has_m_skilllv() const;
  inline void clear_m_skilllv();
  static const int kMSkillLvFieldNumber = 2;
  inline ::google::protobuf::int32 m_skilllv() const;
  inline void set_m_skilllv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_SkillInfo)
 private:
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();
  inline void set_has_m_skilllv();
  inline void clear_has_m_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_skillid_;
  ::google::protobuf::int32 m_skilllv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_SkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_RoleBaseInfo : public ::google::protobuf::Message {
 public:
  GM_RoleBaseInfo();
  virtual ~GM_RoleBaseInfo();

  GM_RoleBaseInfo(const GM_RoleBaseInfo& from);

  inline GM_RoleBaseInfo& operator=(const GM_RoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_RoleBaseInfo& default_instance();

  void Swap(GM_RoleBaseInfo* other);

  // implements Message ----------------------------------------------

  GM_RoleBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_RoleBaseInfo& from);
  void MergeFrom(const GM_RoleBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int64 m_Gold = 2;
  inline bool has_m_gold() const;
  inline void clear_m_gold();
  static const int kMGoldFieldNumber = 2;
  inline ::google::protobuf::int64 m_gold() const;
  inline void set_m_gold(::google::protobuf::int64 value);

  // optional int32 m_HeadPhoto = 3;
  inline bool has_m_headphoto() const;
  inline void clear_m_headphoto();
  static const int kMHeadPhotoFieldNumber = 3;
  inline ::google::protobuf::int32 m_headphoto() const;
  inline void set_m_headphoto(::google::protobuf::int32 value);

  // optional int32 m_CataterType = 4;
  inline bool has_m_catatertype() const;
  inline void clear_m_catatertype();
  static const int kMCataterTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_catatertype() const;
  inline void set_m_catatertype(::google::protobuf::int32 value);

  // optional int32 m_Postion = 5;
  inline bool has_m_postion() const;
  inline void clear_m_postion();
  static const int kMPostionFieldNumber = 5;
  inline ::google::protobuf::int32 m_postion() const;
  inline void set_m_postion(::google::protobuf::int32 value);

  // optional string m_Name = 6;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 6;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_Sex = 7;
  inline bool has_m_sex() const;
  inline void clear_m_sex();
  static const int kMSexFieldNumber = 7;
  inline ::google::protobuf::int32 m_sex() const;
  inline void set_m_sex(::google::protobuf::int32 value);

  // optional int32 m_viplevel = 8;
  inline bool has_m_viplevel() const;
  inline void clear_m_viplevel();
  static const int kMViplevelFieldNumber = 8;
  inline ::google::protobuf::int32 m_viplevel() const;
  inline void set_m_viplevel(::google::protobuf::int32 value);

  // optional int32 m_HeadFrame = 9;
  inline bool has_m_headframe() const;
  inline void clear_m_headframe();
  static const int kMHeadFrameFieldNumber = 9;
  inline ::google::protobuf::int32 m_headframe() const;
  inline void set_m_headframe(::google::protobuf::int32 value);

  // optional string m_NickName = 10;
  inline bool has_m_nickname() const;
  inline void clear_m_nickname();
  static const int kMNickNameFieldNumber = 10;
  inline const ::std::string& m_nickname() const;
  inline void set_m_nickname(const ::std::string& value);
  inline void set_m_nickname(const char* value);
  inline void set_m_nickname(const char* value, size_t size);
  inline ::std::string* mutable_m_nickname();
  inline ::std::string* release_m_nickname();
  inline void set_allocated_m_nickname(::std::string* m_nickname);

  // optional string m_HeadPhotoUrl = 11;
  inline bool has_m_headphotourl() const;
  inline void clear_m_headphotourl();
  static const int kMHeadPhotoUrlFieldNumber = 11;
  inline const ::std::string& m_headphotourl() const;
  inline void set_m_headphotourl(const ::std::string& value);
  inline void set_m_headphotourl(const char* value);
  inline void set_m_headphotourl(const char* value, size_t size);
  inline ::std::string* mutable_m_headphotourl();
  inline ::std::string* release_m_headphotourl();
  inline void set_allocated_m_headphotourl(::std::string* m_headphotourl);

  // @@protoc_insertion_point(class_scope:GM_RoleBaseInfo)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_gold();
  inline void clear_has_m_gold();
  inline void set_has_m_headphoto();
  inline void clear_has_m_headphoto();
  inline void set_has_m_catatertype();
  inline void clear_has_m_catatertype();
  inline void set_has_m_postion();
  inline void clear_has_m_postion();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_sex();
  inline void clear_has_m_sex();
  inline void set_has_m_viplevel();
  inline void clear_has_m_viplevel();
  inline void set_has_m_headframe();
  inline void clear_has_m_headframe();
  inline void set_has_m_nickname();
  inline void clear_has_m_nickname();
  inline void set_has_m_headphotourl();
  inline void clear_has_m_headphotourl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_gold_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_headphoto_;
  ::google::protobuf::int32 m_catatertype_;
  ::google::protobuf::int32 m_postion_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_sex_;
  ::google::protobuf::int32 m_viplevel_;
  ::std::string* m_nickname_;
  ::std::string* m_headphotourl_;
  ::google::protobuf::int32 m_headframe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_RoleBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_Buff : public ::google::protobuf::Message {
 public:
  GM_Buff();
  virtual ~GM_Buff();

  GM_Buff(const GM_Buff& from);

  inline GM_Buff& operator=(const GM_Buff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Buff& default_instance();

  void Swap(GM_Buff* other);

  // implements Message ----------------------------------------------

  GM_Buff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Buff& from);
  void MergeFrom(const GM_Buff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 buffid = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 1;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 fromid = 2;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 2;
  inline ::google::protobuf::int32 fromid() const;
  inline void set_fromid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Buff)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_fromid();
  inline void clear_has_fromid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 fromid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_Buff* default_instance_;
};
// -------------------------------------------------------------------

class GM_ClientBuffs : public ::google::protobuf::Message {
 public:
  GM_ClientBuffs();
  virtual ~GM_ClientBuffs();

  GM_ClientBuffs(const GM_ClientBuffs& from);

  inline GM_ClientBuffs& operator=(const GM_ClientBuffs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ClientBuffs& default_instance();

  void Swap(GM_ClientBuffs* other);

  // implements Message ----------------------------------------------

  GM_ClientBuffs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ClientBuffs& from);
  void MergeFrom(const GM_ClientBuffs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ownerid = 1;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 1;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // repeated .GM_Buff m_Buffs = 10;
  inline int m_buffs_size() const;
  inline void clear_m_buffs();
  static const int kMBuffsFieldNumber = 10;
  inline const ::GM_Buff& m_buffs(int index) const;
  inline ::GM_Buff* mutable_m_buffs(int index);
  inline ::GM_Buff* add_m_buffs();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Buff >&
      m_buffs() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Buff >*
      mutable_m_buffs();

  // @@protoc_insertion_point(class_scope:GM_ClientBuffs)
 private:
  inline void set_has_ownerid();
  inline void clear_has_ownerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Buff > m_buffs_;
  ::google::protobuf::int32 ownerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ClientBuffs* default_instance_;
};
// -------------------------------------------------------------------

class GM_ClientAllBuffs : public ::google::protobuf::Message {
 public:
  GM_ClientAllBuffs();
  virtual ~GM_ClientAllBuffs();

  GM_ClientAllBuffs(const GM_ClientAllBuffs& from);

  inline GM_ClientAllBuffs& operator=(const GM_ClientAllBuffs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ClientAllBuffs& default_instance();

  void Swap(GM_ClientAllBuffs* other);

  // implements Message ----------------------------------------------

  GM_ClientAllBuffs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ClientAllBuffs& from);
  void MergeFrom(const GM_ClientAllBuffs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 needClear = 2;
  inline bool has_needclear() const;
  inline void clear_needclear();
  static const int kNeedClearFieldNumber = 2;
  inline ::google::protobuf::int32 needclear() const;
  inline void set_needclear(::google::protobuf::int32 value);

  // repeated .GM_ClientBuffs m_RoleBuff = 10;
  inline int m_rolebuff_size() const;
  inline void clear_m_rolebuff();
  static const int kMRoleBuffFieldNumber = 10;
  inline const ::GM_ClientBuffs& m_rolebuff(int index) const;
  inline ::GM_ClientBuffs* mutable_m_rolebuff(int index);
  inline ::GM_ClientBuffs* add_m_rolebuff();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ClientBuffs >&
      m_rolebuff() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ClientBuffs >*
      mutable_m_rolebuff();

  // @@protoc_insertion_point(class_scope:GM_ClientAllBuffs)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_needclear();
  inline void clear_has_needclear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 needclear_;
  ::google::protobuf::RepeatedPtrField< ::GM_ClientBuffs > m_rolebuff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ClientAllBuffs* default_instance_;
};
// -------------------------------------------------------------------

class GM_EntryInfo_Single : public ::google::protobuf::Message {
 public:
  GM_EntryInfo_Single();
  virtual ~GM_EntryInfo_Single();

  GM_EntryInfo_Single(const GM_EntryInfo_Single& from);

  inline GM_EntryInfo_Single& operator=(const GM_EntryInfo_Single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_EntryInfo_Single& default_instance();

  void Swap(GM_EntryInfo_Single* other);

  // implements Message ----------------------------------------------

  GM_EntryInfo_Single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_EntryInfo_Single& from);
  void MergeFrom(const GM_EntryInfo_Single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GM_RoleBaseInfo m_RoleData = 1;
  inline bool has_m_roledata() const;
  inline void clear_m_roledata();
  static const int kMRoleDataFieldNumber = 1;
  inline const ::GM_RoleBaseInfo& m_roledata() const;
  inline ::GM_RoleBaseInfo* mutable_m_roledata();
  inline ::GM_RoleBaseInfo* release_m_roledata();
  inline void set_allocated_m_roledata(::GM_RoleBaseInfo* m_roledata);

  // optional int32 m_isReady = 2;
  inline bool has_m_isready() const;
  inline void clear_m_isready();
  static const int kMIsReadyFieldNumber = 2;
  inline ::google::protobuf::int32 m_isready() const;
  inline void set_m_isready(::google::protobuf::int32 value);

  // optional int32 m_totalScore = 3;
  inline bool has_m_totalscore() const;
  inline void clear_m_totalscore();
  static const int kMTotalScoreFieldNumber = 3;
  inline ::google::protobuf::int32 m_totalscore() const;
  inline void set_m_totalscore(::google::protobuf::int32 value);

  // optional double m_Longitude = 4;
  inline bool has_m_longitude() const;
  inline void clear_m_longitude();
  static const int kMLongitudeFieldNumber = 4;
  inline double m_longitude() const;
  inline void set_m_longitude(double value);

  // optional double m_Latitude = 5;
  inline bool has_m_latitude() const;
  inline void clear_m_latitude();
  static const int kMLatitudeFieldNumber = 5;
  inline double m_latitude() const;
  inline void set_m_latitude(double value);

  // optional string m_reallyPos = 6;
  inline bool has_m_reallypos() const;
  inline void clear_m_reallypos();
  static const int kMReallyPosFieldNumber = 6;
  inline const ::std::string& m_reallypos() const;
  inline void set_m_reallypos(const ::std::string& value);
  inline void set_m_reallypos(const char* value);
  inline void set_m_reallypos(const char* value, size_t size);
  inline ::std::string* mutable_m_reallypos();
  inline ::std::string* release_m_reallypos();
  inline void set_allocated_m_reallypos(::std::string* m_reallypos);

  // @@protoc_insertion_point(class_scope:GM_EntryInfo_Single)
 private:
  inline void set_has_m_roledata();
  inline void clear_has_m_roledata();
  inline void set_has_m_isready();
  inline void clear_has_m_isready();
  inline void set_has_m_totalscore();
  inline void clear_has_m_totalscore();
  inline void set_has_m_longitude();
  inline void clear_has_m_longitude();
  inline void set_has_m_latitude();
  inline void clear_has_m_latitude();
  inline void set_has_m_reallypos();
  inline void clear_has_m_reallypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GM_RoleBaseInfo* m_roledata_;
  ::google::protobuf::int32 m_isready_;
  ::google::protobuf::int32 m_totalscore_;
  double m_longitude_;
  double m_latitude_;
  ::std::string* m_reallypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_EntryInfo_Single* default_instance_;
};
// -------------------------------------------------------------------

class GM_EnterSceneInfo : public ::google::protobuf::Message {
 public:
  GM_EnterSceneInfo();
  virtual ~GM_EnterSceneInfo();

  GM_EnterSceneInfo(const GM_EnterSceneInfo& from);

  inline GM_EnterSceneInfo& operator=(const GM_EnterSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_EnterSceneInfo& default_instance();

  void Swap(GM_EnterSceneInfo* other);

  // implements Message ----------------------------------------------

  GM_EnterSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_EnterSceneInfo& from);
  void MergeFrom(const GM_EnterSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_EntryInfo_Single entryInfo = 1;
  inline int entryinfo_size() const;
  inline void clear_entryinfo();
  static const int kEntryInfoFieldNumber = 1;
  inline const ::GM_EntryInfo_Single& entryinfo(int index) const;
  inline ::GM_EntryInfo_Single* mutable_entryinfo(int index);
  inline ::GM_EntryInfo_Single* add_entryinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >&
      entryinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >*
      mutable_entryinfo();

  // @@protoc_insertion_point(class_scope:GM_EnterSceneInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single > entryinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_EnterSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_FullRoleInfo : public ::google::protobuf::Message {
 public:
  GM_FullRoleInfo();
  virtual ~GM_FullRoleInfo();

  GM_FullRoleInfo(const GM_FullRoleInfo& from);

  inline GM_FullRoleInfo& operator=(const GM_FullRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_FullRoleInfo& default_instance();

  void Swap(GM_FullRoleInfo* other);

  // implements Message ----------------------------------------------

  GM_FullRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_FullRoleInfo& from);
  void MergeFrom(const GM_FullRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional int32 headpotot = 7;
  inline bool has_headpotot() const;
  inline void clear_headpotot();
  static const int kHeadpototFieldNumber = 7;
  inline ::google::protobuf::int32 headpotot() const;
  inline void set_headpotot(::google::protobuf::int32 value);

  // optional int32 viplv = 9;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 9;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // optional int64 gold = 10;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 10;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 diamond = 11;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 11;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 roomcard = 12;
  inline bool has_roomcard() const;
  inline void clear_roomcard();
  static const int kRoomcardFieldNumber = 12;
  inline ::google::protobuf::int64 roomcard() const;
  inline void set_roomcard(::google::protobuf::int64 value);

  // optional int32 mjAllNum = 13;
  inline bool has_mjallnum() const;
  inline void clear_mjallnum();
  static const int kMjAllNumFieldNumber = 13;
  inline ::google::protobuf::int32 mjallnum() const;
  inline void set_mjallnum(::google::protobuf::int32 value);

  // optional int32 mjWinNum = 14;
  inline bool has_mjwinnum() const;
  inline void clear_mjwinnum();
  static const int kMjWinNumFieldNumber = 14;
  inline ::google::protobuf::int32 mjwinnum() const;
  inline void set_mjwinnum(::google::protobuf::int32 value);

  // optional int32 zjhAllNum = 15;
  inline bool has_zjhallnum() const;
  inline void clear_zjhallnum();
  static const int kZjhAllNumFieldNumber = 15;
  inline ::google::protobuf::int32 zjhallnum() const;
  inline void set_zjhallnum(::google::protobuf::int32 value);

  // optional int32 zjhWinNum = 16;
  inline bool has_zjhwinnum() const;
  inline void clear_zjhwinnum();
  static const int kZjhWinNumFieldNumber = 16;
  inline ::google::protobuf::int32 zjhwinnum() const;
  inline void set_zjhwinnum(::google::protobuf::int32 value);

  // optional int64 fishGet = 17;
  inline bool has_fishget() const;
  inline void clear_fishget();
  static const int kFishGetFieldNumber = 17;
  inline ::google::protobuf::int64 fishget() const;
  inline void set_fishget(::google::protobuf::int64 value);

  // optional int64 fruitGet = 18;
  inline bool has_fruitget() const;
  inline void clear_fruitget();
  static const int kFruitGetFieldNumber = 18;
  inline ::google::protobuf::int64 fruitget() const;
  inline void set_fruitget(::google::protobuf::int64 value);

  // optional int32 headframe = 19;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadframeFieldNumber = 19;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);

  // optional string nickName = 20;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 20;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string headPhotoUrl = 21;
  inline bool has_headphotourl() const;
  inline void clear_headphotourl();
  static const int kHeadPhotoUrlFieldNumber = 21;
  inline const ::std::string& headphotourl() const;
  inline void set_headphotourl(const ::std::string& value);
  inline void set_headphotourl(const char* value);
  inline void set_headphotourl(const char* value, size_t size);
  inline ::std::string* mutable_headphotourl();
  inline ::std::string* release_headphotourl();
  inline void set_allocated_headphotourl(::std::string* headphotourl);

  // @@protoc_insertion_point(class_scope:GM_FullRoleInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_headpotot();
  inline void clear_has_headpotot();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_roomcard();
  inline void clear_has_roomcard();
  inline void set_has_mjallnum();
  inline void clear_has_mjallnum();
  inline void set_has_mjwinnum();
  inline void clear_has_mjwinnum();
  inline void set_has_zjhallnum();
  inline void clear_has_zjhallnum();
  inline void set_has_zjhwinnum();
  inline void clear_has_zjhwinnum();
  inline void set_has_fishget();
  inline void clear_has_fishget();
  inline void set_has_fruitget();
  inline void clear_has_fruitget();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_headphotourl();
  inline void clear_has_headphotourl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 accountid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 level_;
  ::std::string* sign_;
  ::google::protobuf::int32 headpotot_;
  ::google::protobuf::int32 viplv_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 roomcard_;
  ::google::protobuf::int32 mjallnum_;
  ::google::protobuf::int32 mjwinnum_;
  ::google::protobuf::int32 zjhallnum_;
  ::google::protobuf::int32 zjhwinnum_;
  ::google::protobuf::int64 fishget_;
  ::google::protobuf::int64 fruitget_;
  ::std::string* nickname_;
  ::std::string* headphotourl_;
  ::google::protobuf::int32 headframe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_FullRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_SendReady : public ::google::protobuf::Message {
 public:
  GM_SendReady();
  virtual ~GM_SendReady();

  GM_SendReady(const GM_SendReady& from);

  inline GM_SendReady& operator=(const GM_SendReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_SendReady& default_instance();

  void Swap(GM_SendReady* other);

  // implements Message ----------------------------------------------

  GM_SendReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_SendReady& from);
  void MergeFrom(const GM_SendReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Resutl = 1;
  inline bool has_m_resutl() const;
  inline void clear_m_resutl();
  static const int kMResutlFieldNumber = 1;
  inline ::google::protobuf::int32 m_resutl() const;
  inline void set_m_resutl(::google::protobuf::int32 value);

  // optional int32 m_RoleID = 2;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_FBID = 3;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_SendReady)
 private:
  inline void set_has_m_resutl();
  inline void clear_has_m_resutl();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_resutl_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_SendReady* default_instance_;
};
// -------------------------------------------------------------------

class GM_NotifyBattleEndTime : public ::google::protobuf::Message {
 public:
  GM_NotifyBattleEndTime();
  virtual ~GM_NotifyBattleEndTime();

  GM_NotifyBattleEndTime(const GM_NotifyBattleEndTime& from);

  inline GM_NotifyBattleEndTime& operator=(const GM_NotifyBattleEndTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_NotifyBattleEndTime& default_instance();

  void Swap(GM_NotifyBattleEndTime* other);

  // implements Message ----------------------------------------------

  GM_NotifyBattleEndTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_NotifyBattleEndTime& from);
  void MergeFrom(const GM_NotifyBattleEndTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_EndTime = 1;
  inline bool has_m_endtime() const;
  inline void clear_m_endtime();
  static const int kMEndTimeFieldNumber = 1;
  inline ::google::protobuf::int32 m_endtime() const;
  inline void set_m_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_NotifyBattleEndTime)
 private:
  inline void set_has_m_endtime();
  inline void clear_has_m_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_NotifyBattleEndTime* default_instance_;
};
// -------------------------------------------------------------------

class GM_ActiveBigWave : public ::google::protobuf::Message {
 public:
  GM_ActiveBigWave();
  virtual ~GM_ActiveBigWave();

  GM_ActiveBigWave(const GM_ActiveBigWave& from);

  inline GM_ActiveBigWave& operator=(const GM_ActiveBigWave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ActiveBigWave& default_instance();

  void Swap(GM_ActiveBigWave* other);

  // implements Message ----------------------------------------------

  GM_ActiveBigWave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ActiveBigWave& from);
  void MergeFrom(const GM_ActiveBigWave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_FBID = 1;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional int32 m_BigWave = 2;
  inline bool has_m_bigwave() const;
  inline void clear_m_bigwave();
  static const int kMBigWaveFieldNumber = 2;
  inline ::google::protobuf::int32 m_bigwave() const;
  inline void set_m_bigwave(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ActiveBigWave)
 private:
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_bigwave();
  inline void clear_has_m_bigwave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fbid_;
  ::google::protobuf::int32 m_bigwave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ActiveBigWave* default_instance_;
};
// -------------------------------------------------------------------

class GM_ActiveMonster : public ::google::protobuf::Message {
 public:
  GM_ActiveMonster();
  virtual ~GM_ActiveMonster();

  GM_ActiveMonster(const GM_ActiveMonster& from);

  inline GM_ActiveMonster& operator=(const GM_ActiveMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ActiveMonster& default_instance();

  void Swap(GM_ActiveMonster* other);

  // implements Message ----------------------------------------------

  GM_ActiveMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ActiveMonster& from);
  void MergeFrom(const GM_ActiveMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_resutl = 1;
  inline bool has_m_resutl() const;
  inline void clear_m_resutl();
  static const int kMResutlFieldNumber = 1;
  inline ::google::protobuf::int32 m_resutl() const;
  inline void set_m_resutl(::google::protobuf::int32 value);

  // repeated int32 monsterID = 2;
  inline int monsterid_size() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 2;
  inline ::google::protobuf::int32 monsterid(int index) const;
  inline void set_monsterid(int index, ::google::protobuf::int32 value);
  inline void add_monsterid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monsterid();

  // @@protoc_insertion_point(class_scope:GM_ActiveMonster)
 private:
  inline void set_has_m_resutl();
  inline void clear_has_m_resutl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monsterid_;
  ::google::protobuf::int32 m_resutl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ActiveMonster* default_instance_;
};
// -------------------------------------------------------------------

class GM_ClientNotifyDied : public ::google::protobuf::Message {
 public:
  GM_ClientNotifyDied();
  virtual ~GM_ClientNotifyDied();

  GM_ClientNotifyDied(const GM_ClientNotifyDied& from);

  inline GM_ClientNotifyDied& operator=(const GM_ClientNotifyDied& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ClientNotifyDied& default_instance();

  void Swap(GM_ClientNotifyDied* other);

  // implements Message ----------------------------------------------

  GM_ClientNotifyDied* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ClientNotifyDied& from);
  void MergeFrom(const GM_ClientNotifyDied& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_BattleObjectID = 1;
  inline bool has_m_battleobjectid() const;
  inline void clear_m_battleobjectid();
  static const int kMBattleObjectIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_battleobjectid() const;
  inline void set_m_battleobjectid(::google::protobuf::int32 value);

  // optional int32 m_AttackObjectID = 2;
  inline bool has_m_attackobjectid() const;
  inline void clear_m_attackobjectid();
  static const int kMAttackObjectIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_attackobjectid() const;
  inline void set_m_attackobjectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ClientNotifyDied)
 private:
  inline void set_has_m_battleobjectid();
  inline void clear_has_m_battleobjectid();
  inline void set_has_m_attackobjectid();
  inline void clear_has_m_attackobjectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_battleobjectid_;
  ::google::protobuf::int32 m_attackobjectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ClientNotifyDied* default_instance_;
};
// -------------------------------------------------------------------

class GM_BattleInfo_Result : public ::google::protobuf::Message {
 public:
  GM_BattleInfo_Result();
  virtual ~GM_BattleInfo_Result();

  GM_BattleInfo_Result(const GM_BattleInfo_Result& from);

  inline GM_BattleInfo_Result& operator=(const GM_BattleInfo_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_BattleInfo_Result& default_instance();

  void Swap(GM_BattleInfo_Result* other);

  // implements Message ----------------------------------------------

  GM_BattleInfo_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_BattleInfo_Result& from);
  void MergeFrom(const GM_BattleInfo_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_level = 3;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_val = 4;
  inline bool has_m_val() const;
  inline void clear_m_val();
  static const int kMValFieldNumber = 4;
  inline ::google::protobuf::int32 m_val() const;
  inline void set_m_val(::google::protobuf::int32 value);

  // optional int32 m_killnum = 5;
  inline bool has_m_killnum() const;
  inline void clear_m_killnum();
  static const int kMKillnumFieldNumber = 5;
  inline ::google::protobuf::int32 m_killnum() const;
  inline void set_m_killnum(::google::protobuf::int32 value);

  // optional int32 m_deadnum = 6;
  inline bool has_m_deadnum() const;
  inline void clear_m_deadnum();
  static const int kMDeadnumFieldNumber = 6;
  inline ::google::protobuf::int32 m_deadnum() const;
  inline void set_m_deadnum(::google::protobuf::int32 value);

  // optional int32 m_hurt = 7;
  inline bool has_m_hurt() const;
  inline void clear_m_hurt();
  static const int kMHurtFieldNumber = 7;
  inline ::google::protobuf::int32 m_hurt() const;
  inline void set_m_hurt(::google::protobuf::int32 value);

  // optional int32 m_RoleID = 8;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 8;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_point = 9;
  inline bool has_m_point() const;
  inline void clear_m_point();
  static const int kMPointFieldNumber = 9;
  inline ::google::protobuf::int32 m_point() const;
  inline void set_m_point(::google::protobuf::int32 value);

  // optional string m_parentName = 10;
  inline bool has_m_parentname() const;
  inline void clear_m_parentname();
  static const int kMParentNameFieldNumber = 10;
  inline const ::std::string& m_parentname() const;
  inline void set_m_parentname(const ::std::string& value);
  inline void set_m_parentname(const char* value);
  inline void set_m_parentname(const char* value, size_t size);
  inline ::std::string* mutable_m_parentname();
  inline ::std::string* release_m_parentname();
  inline void set_allocated_m_parentname(::std::string* m_parentname);

  // optional int32 m_toprank = 11;
  inline bool has_m_toprank() const;
  inline void clear_m_toprank();
  static const int kMToprankFieldNumber = 11;
  inline ::google::protobuf::int32 m_toprank() const;
  inline void set_m_toprank(::google::protobuf::int32 value);

  // optional int32 m_areanid = 12;
  inline bool has_m_areanid() const;
  inline void clear_m_areanid();
  static const int kMAreanidFieldNumber = 12;
  inline ::google::protobuf::int32 m_areanid() const;
  inline void set_m_areanid(::google::protobuf::int32 value);

  // optional int32 m_percentage = 13;
  inline bool has_m_percentage() const;
  inline void clear_m_percentage();
  static const int kMPercentageFieldNumber = 13;
  inline ::google::protobuf::int32 m_percentage() const;
  inline void set_m_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_BattleInfo_Result)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_val();
  inline void clear_has_m_val();
  inline void set_has_m_killnum();
  inline void clear_has_m_killnum();
  inline void set_has_m_deadnum();
  inline void clear_has_m_deadnum();
  inline void set_has_m_hurt();
  inline void clear_has_m_hurt();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_point();
  inline void clear_has_m_point();
  inline void set_has_m_parentname();
  inline void clear_has_m_parentname();
  inline void set_has_m_toprank();
  inline void clear_has_m_toprank();
  inline void set_has_m_areanid();
  inline void clear_has_m_areanid();
  inline void set_has_m_percentage();
  inline void clear_has_m_percentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_val_;
  ::google::protobuf::int32 m_killnum_;
  ::google::protobuf::int32 m_deadnum_;
  ::google::protobuf::int32 m_hurt_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_point_;
  ::std::string* m_parentname_;
  ::google::protobuf::int32 m_toprank_;
  ::google::protobuf::int32 m_areanid_;
  ::google::protobuf::int32 m_percentage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_BattleInfo_Result* default_instance_;
};
// -------------------------------------------------------------------

class GM_BattleResult : public ::google::protobuf::Message {
 public:
  GM_BattleResult();
  virtual ~GM_BattleResult();

  GM_BattleResult(const GM_BattleResult& from);

  inline GM_BattleResult& operator=(const GM_BattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_BattleResult& default_instance();

  void Swap(GM_BattleResult* other);

  // implements Message ----------------------------------------------

  GM_BattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_BattleResult& from);
  void MergeFrom(const GM_BattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 m_BattleType = 2;
  inline bool has_m_battletype() const;
  inline void clear_m_battletype();
  static const int kMBattleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_battletype() const;
  inline void set_m_battletype(::google::protobuf::int32 value);

  // optional int32 m_FBTypeID = 3;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFBTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 m_UseTime = 4;
  inline bool has_m_usetime() const;
  inline void clear_m_usetime();
  static const int kMUseTimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_usetime() const;
  inline void set_m_usetime(::google::protobuf::int32 value);

  // optional int32 m_StarNum = 5;
  inline bool has_m_starnum() const;
  inline void clear_m_starnum();
  static const int kMStarNumFieldNumber = 5;
  inline ::google::protobuf::int32 m_starnum() const;
  inline void set_m_starnum(::google::protobuf::int32 value);

  // optional int32 m_laterRank = 7;
  inline bool has_m_laterrank() const;
  inline void clear_m_laterrank();
  static const int kMLaterRankFieldNumber = 7;
  inline ::google::protobuf::int32 m_laterrank() const;
  inline void set_m_laterrank(::google::protobuf::int32 value);

  // optional int32 m_arenaPres = 8;
  inline bool has_m_arenapres() const;
  inline void clear_m_arenapres();
  static const int kMArenaPresFieldNumber = 8;
  inline ::google::protobuf::int32 m_arenapres() const;
  inline void set_m_arenapres(::google::protobuf::int32 value);

  // optional int32 m_topscore = 10;
  inline bool has_m_topscore() const;
  inline void clear_m_topscore();
  static const int kMTopscoreFieldNumber = 10;
  inline ::google::protobuf::int32 m_topscore() const;
  inline void set_m_topscore(::google::protobuf::int32 value);

  // optional int32 m_errorcode = 11;
  inline bool has_m_errorcode() const;
  inline void clear_m_errorcode();
  static const int kMErrorcodeFieldNumber = 11;
  inline ::google::protobuf::int32 m_errorcode() const;
  inline void set_m_errorcode(::google::protobuf::int32 value);

  // optional bool m_isDoubleActivity = 12;
  inline bool has_m_isdoubleactivity() const;
  inline void clear_m_isdoubleactivity();
  static const int kMIsDoubleActivityFieldNumber = 12;
  inline bool m_isdoubleactivity() const;
  inline void set_m_isdoubleactivity(bool value);

  // repeated .GM_BattleInfo_Result m_BattleData = 9;
  inline int m_battledata_size() const;
  inline void clear_m_battledata();
  static const int kMBattleDataFieldNumber = 9;
  inline const ::GM_BattleInfo_Result& m_battledata(int index) const;
  inline ::GM_BattleInfo_Result* mutable_m_battledata(int index);
  inline ::GM_BattleInfo_Result* add_m_battledata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_BattleInfo_Result >&
      m_battledata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_BattleInfo_Result >*
      mutable_m_battledata();

  // repeated .GM_ItemDrop m_DropData = 6;
  inline int m_dropdata_size() const;
  inline void clear_m_dropdata();
  static const int kMDropDataFieldNumber = 6;
  inline const ::GM_ItemDrop& m_dropdata(int index) const;
  inline ::GM_ItemDrop* mutable_m_dropdata(int index);
  inline ::GM_ItemDrop* add_m_dropdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
      m_dropdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
      mutable_m_dropdata();

  // @@protoc_insertion_point(class_scope:GM_BattleResult)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_battletype();
  inline void clear_has_m_battletype();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_usetime();
  inline void clear_has_m_usetime();
  inline void set_has_m_starnum();
  inline void clear_has_m_starnum();
  inline void set_has_m_laterrank();
  inline void clear_has_m_laterrank();
  inline void set_has_m_arenapres();
  inline void clear_has_m_arenapres();
  inline void set_has_m_topscore();
  inline void clear_has_m_topscore();
  inline void set_has_m_errorcode();
  inline void clear_has_m_errorcode();
  inline void set_has_m_isdoubleactivity();
  inline void clear_has_m_isdoubleactivity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_battletype_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 m_usetime_;
  ::google::protobuf::int32 m_starnum_;
  ::google::protobuf::int32 m_laterrank_;
  ::google::protobuf::int32 m_arenapres_;
  ::google::protobuf::int32 m_topscore_;
  ::google::protobuf::int32 m_errorcode_;
  bool m_isdoubleactivity_;
  ::google::protobuf::RepeatedPtrField< ::GM_BattleInfo_Result > m_battledata_;
  ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop > m_dropdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_BattleResult* default_instance_;
};
// -------------------------------------------------------------------

class SM_BattleRequest : public ::google::protobuf::Message {
 public:
  SM_BattleRequest();
  virtual ~SM_BattleRequest();

  SM_BattleRequest(const SM_BattleRequest& from);

  inline SM_BattleRequest& operator=(const SM_BattleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_BattleRequest& default_instance();

  void Swap(SM_BattleRequest* other);

  // implements Message ----------------------------------------------

  SM_BattleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_BattleRequest& from);
  void MergeFrom(const SM_BattleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_FBID = 1;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional int32 m_FBTypeID = 2;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFBTypeIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional int32 m_increMatchid = 4;
  inline bool has_m_incrematchid() const;
  inline void clear_m_incrematchid();
  static const int kMIncreMatchidFieldNumber = 4;
  inline ::google::protobuf::int32 m_incrematchid() const;
  inline void set_m_incrematchid(::google::protobuf::int32 value);

  // optional int32 m_copyAILevel = 5;
  inline bool has_m_copyailevel() const;
  inline void clear_m_copyailevel();
  static const int kMCopyAILevelFieldNumber = 5;
  inline ::google::protobuf::int32 m_copyailevel() const;
  inline void set_m_copyailevel(::google::protobuf::int32 value);

  // optional string m_FBPlayWay = 6;
  inline bool has_m_fbplayway() const;
  inline void clear_m_fbplayway();
  static const int kMFBPlayWayFieldNumber = 6;
  inline const ::std::string& m_fbplayway() const;
  inline void set_m_fbplayway(const ::std::string& value);
  inline void set_m_fbplayway(const char* value);
  inline void set_m_fbplayway(const char* value, size_t size);
  inline ::std::string* mutable_m_fbplayway();
  inline ::std::string* release_m_fbplayway();
  inline void set_allocated_m_fbplayway(::std::string* m_fbplayway);

  // optional int32 m_RoomCount = 7;
  inline bool has_m_roomcount() const;
  inline void clear_m_roomcount();
  static const int kMRoomCountFieldNumber = 7;
  inline ::google::protobuf::int32 m_roomcount() const;
  inline void set_m_roomcount(::google::protobuf::int32 value);

  // optional int32 m_PlayerCount = 8;
  inline bool has_m_playercount() const;
  inline void clear_m_playercount();
  static const int kMPlayerCountFieldNumber = 8;
  inline ::google::protobuf::int32 m_playercount() const;
  inline void set_m_playercount(::google::protobuf::int32 value);

  // repeated .GM_EntryInfo_Single m_PlayerData = 10;
  inline int m_playerdata_size() const;
  inline void clear_m_playerdata();
  static const int kMPlayerDataFieldNumber = 10;
  inline const ::GM_EntryInfo_Single& m_playerdata(int index) const;
  inline ::GM_EntryInfo_Single* mutable_m_playerdata(int index);
  inline ::GM_EntryInfo_Single* add_m_playerdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >&
      m_playerdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >*
      mutable_m_playerdata();

  // repeated .GM_WhiteListInfo m_WhiteListInfo = 11;
  inline int m_whitelistinfo_size() const;
  inline void clear_m_whitelistinfo();
  static const int kMWhiteListInfoFieldNumber = 11;
  inline const ::GM_WhiteListInfo& m_whitelistinfo(int index) const;
  inline ::GM_WhiteListInfo* mutable_m_whitelistinfo(int index);
  inline ::GM_WhiteListInfo* add_m_whitelistinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_WhiteListInfo >&
      m_whitelistinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_WhiteListInfo >*
      mutable_m_whitelistinfo();

  // @@protoc_insertion_point(class_scope:SM_BattleRequest)
 private:
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_m_incrematchid();
  inline void clear_has_m_incrematchid();
  inline void set_has_m_copyailevel();
  inline void clear_has_m_copyailevel();
  inline void set_has_m_fbplayway();
  inline void clear_has_m_fbplayway();
  inline void set_has_m_roomcount();
  inline void clear_has_m_roomcount();
  inline void set_has_m_playercount();
  inline void clear_has_m_playercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fbid_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 rate_;
  ::google::protobuf::int32 m_incrematchid_;
  ::std::string* m_fbplayway_;
  ::google::protobuf::int32 m_copyailevel_;
  ::google::protobuf::int32 m_roomcount_;
  ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single > m_playerdata_;
  ::google::protobuf::RepeatedPtrField< ::GM_WhiteListInfo > m_whitelistinfo_;
  ::google::protobuf::int32 m_playercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SM_BattleRequest* default_instance_;
};
// -------------------------------------------------------------------

class GM_WhiteListInfo : public ::google::protobuf::Message {
 public:
  GM_WhiteListInfo();
  virtual ~GM_WhiteListInfo();

  GM_WhiteListInfo(const GM_WhiteListInfo& from);

  inline GM_WhiteListInfo& operator=(const GM_WhiteListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_WhiteListInfo& default_instance();

  void Swap(GM_WhiteListInfo* other);

  // implements Message ----------------------------------------------

  GM_WhiteListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_WhiteListInfo& from);
  void MergeFrom(const GM_WhiteListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 isSelf = 2;
  inline bool has_isself() const;
  inline void clear_isself();
  static const int kIsSelfFieldNumber = 2;
  inline ::google::protobuf::int32 isself() const;
  inline void set_isself(::google::protobuf::int32 value);

  // optional int32 szMinCount = 3;
  inline bool has_szmincount() const;
  inline void clear_szmincount();
  static const int kSzMinCountFieldNumber = 3;
  inline ::google::protobuf::int32 szmincount() const;
  inline void set_szmincount(::google::protobuf::int32 value);

  // optional int32 szMaxCount = 4;
  inline bool has_szmaxcount() const;
  inline void clear_szmaxcount();
  static const int kSzMaxCountFieldNumber = 4;
  inline ::google::protobuf::int32 szmaxcount() const;
  inline void set_szmaxcount(::google::protobuf::int32 value);

  // optional int32 sfMinCount = 5;
  inline bool has_sfmincount() const;
  inline void clear_sfmincount();
  static const int kSfMinCountFieldNumber = 5;
  inline ::google::protobuf::int32 sfmincount() const;
  inline void set_sfmincount(::google::protobuf::int32 value);

  // optional int32 sfMaxCount = 6;
  inline bool has_sfmaxcount() const;
  inline void clear_sfmaxcount();
  static const int kSfMaxCountFieldNumber = 6;
  inline ::google::protobuf::int32 sfmaxcount() const;
  inline void set_sfmaxcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_WhiteListInfo)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_isself();
  inline void clear_has_isself();
  inline void set_has_szmincount();
  inline void clear_has_szmincount();
  inline void set_has_szmaxcount();
  inline void clear_has_szmaxcount();
  inline void set_has_sfmincount();
  inline void clear_has_sfmincount();
  inline void set_has_sfmaxcount();
  inline void clear_has_sfmaxcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 isself_;
  ::google::protobuf::int32 szmincount_;
  ::google::protobuf::int32 szmaxcount_;
  ::google::protobuf::int32 sfmincount_;
  ::google::protobuf::int32 sfmaxcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_WhiteListInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_DrawCardRequest : public ::google::protobuf::Message {
 public:
  GM_DrawCardRequest();
  virtual ~GM_DrawCardRequest();

  GM_DrawCardRequest(const GM_DrawCardRequest& from);

  inline GM_DrawCardRequest& operator=(const GM_DrawCardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DrawCardRequest& default_instance();

  void Swap(GM_DrawCardRequest* other);

  // implements Message ----------------------------------------------

  GM_DrawCardRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DrawCardRequest& from);
  void MergeFrom(const GM_DrawCardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_CardID = 1;
  inline bool has_m_cardid() const;
  inline void clear_m_cardid();
  static const int kMCardIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_cardid() const;
  inline void set_m_cardid(::google::protobuf::int32 value);

  // optional int32 m_FBID = 2;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_DrawCardRequest)
 private:
  inline void set_has_m_cardid();
  inline void clear_has_m_cardid();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_cardid_;
  ::google::protobuf::int32 m_fbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_DrawCardRequest* default_instance_;
};
// -------------------------------------------------------------------

class GM_ReplacePet : public ::google::protobuf::Message {
 public:
  GM_ReplacePet();
  virtual ~GM_ReplacePet();

  GM_ReplacePet(const GM_ReplacePet& from);

  inline GM_ReplacePet& operator=(const GM_ReplacePet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ReplacePet& default_instance();

  void Swap(GM_ReplacePet* other);

  // implements Message ----------------------------------------------

  GM_ReplacePet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ReplacePet& from);
  void MergeFrom(const GM_ReplacePet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_FBID = 2;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFBIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional int32 m_TeamID = 3;
  inline bool has_m_teamid() const;
  inline void clear_m_teamid();
  static const int kMTeamIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_teamid() const;
  inline void set_m_teamid(::google::protobuf::int32 value);

  // repeated int32 m_petid = 4;
  inline int m_petid_size() const;
  inline void clear_m_petid();
  static const int kMPetidFieldNumber = 4;
  inline ::google::protobuf::int32 m_petid(int index) const;
  inline void set_m_petid(int index, ::google::protobuf::int32 value);
  inline void add_m_petid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_petid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_petid();

  // repeated int32 m_hp = 5;
  inline int m_hp_size() const;
  inline void clear_m_hp();
  static const int kMHpFieldNumber = 5;
  inline ::google::protobuf::int32 m_hp(int index) const;
  inline void set_m_hp(int index, ::google::protobuf::int32 value);
  inline void add_m_hp(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_hp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_hp();

  // @@protoc_insertion_point(class_scope:GM_ReplacePet)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_teamid();
  inline void clear_has_m_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_fbid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_petid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_hp_;
  ::google::protobuf::int32 m_teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ReplacePet* default_instance_;
};
// -------------------------------------------------------------------

class GM_DrawCardReturn : public ::google::protobuf::Message {
 public:
  GM_DrawCardReturn();
  virtual ~GM_DrawCardReturn();

  GM_DrawCardReturn(const GM_DrawCardReturn& from);

  inline GM_DrawCardReturn& operator=(const GM_DrawCardReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DrawCardReturn& default_instance();

  void Swap(GM_DrawCardReturn* other);

  // implements Message ----------------------------------------------

  GM_DrawCardReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DrawCardReturn& from);
  void MergeFrom(const GM_DrawCardReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Resul = 1;
  inline bool has_m_resul() const;
  inline void clear_m_resul();
  static const int kMResulFieldNumber = 1;
  inline ::google::protobuf::int32 m_resul() const;
  inline void set_m_resul(::google::protobuf::int32 value);

  // repeated .GM_ItemDrop m_DropData = 2;
  inline int m_dropdata_size() const;
  inline void clear_m_dropdata();
  static const int kMDropDataFieldNumber = 2;
  inline const ::GM_ItemDrop& m_dropdata(int index) const;
  inline ::GM_ItemDrop* mutable_m_dropdata(int index);
  inline ::GM_ItemDrop* add_m_dropdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
      m_dropdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
      mutable_m_dropdata();

  // @@protoc_insertion_point(class_scope:GM_DrawCardReturn)
 private:
  inline void set_has_m_resul();
  inline void clear_has_m_resul();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop > m_dropdata_;
  ::google::protobuf::int32 m_resul_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_DrawCardReturn* default_instance_;
};
// -------------------------------------------------------------------

class GM_Damage : public ::google::protobuf::Message {
 public:
  GM_Damage();
  virtual ~GM_Damage();

  GM_Damage(const GM_Damage& from);

  inline GM_Damage& operator=(const GM_Damage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Damage& default_instance();

  void Swap(GM_Damage* other);

  // implements Message ----------------------------------------------

  GM_Damage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Damage& from);
  void MergeFrom(const GM_Damage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbid = 1;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbidFieldNumber = 1;
  inline ::google::protobuf::int32 fbid() const;
  inline void set_fbid(::google::protobuf::int32 value);

  // optional int32 damagerId = 2;
  inline bool has_damagerid() const;
  inline void clear_damagerid();
  static const int kDamagerIdFieldNumber = 2;
  inline ::google::protobuf::int32 damagerid() const;
  inline void set_damagerid(::google::protobuf::int32 value);

  // optional int32 attackerId = 3;
  inline bool has_attackerid() const;
  inline void clear_attackerid();
  static const int kAttackerIdFieldNumber = 3;
  inline ::google::protobuf::int32 attackerid() const;
  inline void set_attackerid(::google::protobuf::int32 value);

  // optional int32 damageVal = 4;
  inline bool has_damageval() const;
  inline void clear_damageval();
  static const int kDamageValFieldNumber = 4;
  inline ::google::protobuf::int32 damageval() const;
  inline void set_damageval(::google::protobuf::int32 value);

  // optional float vecX = 5;
  inline bool has_vecx() const;
  inline void clear_vecx();
  static const int kVecXFieldNumber = 5;
  inline float vecx() const;
  inline void set_vecx(float value);

  // optional float vecY = 6;
  inline bool has_vecy() const;
  inline void clear_vecy();
  static const int kVecYFieldNumber = 6;
  inline float vecy() const;
  inline void set_vecy(float value);

  // optional float vecZ = 7;
  inline bool has_vecz() const;
  inline void clear_vecz();
  static const int kVecZFieldNumber = 7;
  inline float vecz() const;
  inline void set_vecz(float value);

  // optional int32 damageType = 8;
  inline bool has_damagetype() const;
  inline void clear_damagetype();
  static const int kDamageTypeFieldNumber = 8;
  inline ::google::protobuf::int32 damagetype() const;
  inline void set_damagetype(::google::protobuf::int32 value);

  // optional bool isDodge = 9;
  inline bool has_isdodge() const;
  inline void clear_isdodge();
  static const int kIsDodgeFieldNumber = 9;
  inline bool isdodge() const;
  inline void set_isdodge(bool value);

  // optional bool isBlock = 10;
  inline bool has_isblock() const;
  inline void clear_isblock();
  static const int kIsBlockFieldNumber = 10;
  inline bool isblock() const;
  inline void set_isblock(bool value);

  // optional bool isCritical = 11;
  inline bool has_iscritical() const;
  inline void clear_iscritical();
  static const int kIsCriticalFieldNumber = 11;
  inline bool iscritical() const;
  inline void set_iscritical(bool value);

  // optional int32 nowtime = 12;
  inline bool has_nowtime() const;
  inline void clear_nowtime();
  static const int kNowtimeFieldNumber = 12;
  inline ::google::protobuf::int32 nowtime() const;
  inline void set_nowtime(::google::protobuf::int32 value);

  // optional int32 attackBreakDefense = 13;
  inline bool has_attackbreakdefense() const;
  inline void clear_attackbreakdefense();
  static const int kAttackBreakDefenseFieldNumber = 13;
  inline ::google::protobuf::int32 attackbreakdefense() const;
  inline void set_attackbreakdefense(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Damage)
 private:
  inline void set_has_fbid();
  inline void clear_has_fbid();
  inline void set_has_damagerid();
  inline void clear_has_damagerid();
  inline void set_has_attackerid();
  inline void clear_has_attackerid();
  inline void set_has_damageval();
  inline void clear_has_damageval();
  inline void set_has_vecx();
  inline void clear_has_vecx();
  inline void set_has_vecy();
  inline void clear_has_vecy();
  inline void set_has_vecz();
  inline void clear_has_vecz();
  inline void set_has_damagetype();
  inline void clear_has_damagetype();
  inline void set_has_isdodge();
  inline void clear_has_isdodge();
  inline void set_has_isblock();
  inline void clear_has_isblock();
  inline void set_has_iscritical();
  inline void clear_has_iscritical();
  inline void set_has_nowtime();
  inline void clear_has_nowtime();
  inline void set_has_attackbreakdefense();
  inline void clear_has_attackbreakdefense();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbid_;
  ::google::protobuf::int32 damagerid_;
  ::google::protobuf::int32 attackerid_;
  ::google::protobuf::int32 damageval_;
  float vecx_;
  float vecy_;
  float vecz_;
  ::google::protobuf::int32 damagetype_;
  bool isdodge_;
  bool isblock_;
  bool iscritical_;
  ::google::protobuf::int32 nowtime_;
  ::google::protobuf::int32 attackbreakdefense_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_Damage* default_instance_;
};
// -------------------------------------------------------------------

class GM_NotifyHPMPChange : public ::google::protobuf::Message {
 public:
  GM_NotifyHPMPChange();
  virtual ~GM_NotifyHPMPChange();

  GM_NotifyHPMPChange(const GM_NotifyHPMPChange& from);

  inline GM_NotifyHPMPChange& operator=(const GM_NotifyHPMPChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_NotifyHPMPChange& default_instance();

  void Swap(GM_NotifyHPMPChange* other);

  // implements Message ----------------------------------------------

  GM_NotifyHPMPChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_NotifyHPMPChange& from);
  void MergeFrom(const GM_NotifyHPMPChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_NotifyHPMPChange)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_NotifyHPMPChange* default_instance_;
};
// -------------------------------------------------------------------

class GM_LeaveBattle : public ::google::protobuf::Message {
 public:
  GM_LeaveBattle();
  virtual ~GM_LeaveBattle();

  GM_LeaveBattle(const GM_LeaveBattle& from);

  inline GM_LeaveBattle& operator=(const GM_LeaveBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_LeaveBattle& default_instance();

  void Swap(GM_LeaveBattle* other);

  // implements Message ----------------------------------------------

  GM_LeaveBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_LeaveBattle& from);
  void MergeFrom(const GM_LeaveBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleID = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_LeaveBattle)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_LeaveBattle* default_instance_;
};
// -------------------------------------------------------------------

class GM_RoleLeave : public ::google::protobuf::Message {
 public:
  GM_RoleLeave();
  virtual ~GM_RoleLeave();

  GM_RoleLeave(const GM_RoleLeave& from);

  inline GM_RoleLeave& operator=(const GM_RoleLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_RoleLeave& default_instance();

  void Swap(GM_RoleLeave* other);

  // implements Message ----------------------------------------------

  GM_RoleLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_RoleLeave& from);
  void MergeFrom(const GM_RoleLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_LeaveBattle leaveInfo = 1;
  inline int leaveinfo_size() const;
  inline void clear_leaveinfo();
  static const int kLeaveInfoFieldNumber = 1;
  inline const ::GM_LeaveBattle& leaveinfo(int index) const;
  inline ::GM_LeaveBattle* mutable_leaveinfo(int index);
  inline ::GM_LeaveBattle* add_leaveinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_LeaveBattle >&
      leaveinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_LeaveBattle >*
      mutable_leaveinfo();

  // @@protoc_insertion_point(class_scope:GM_RoleLeave)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_LeaveBattle > leaveinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_RoleLeave* default_instance_;
};
// -------------------------------------------------------------------

class SM_BattleInfo : public ::google::protobuf::Message {
 public:
  SM_BattleInfo();
  virtual ~SM_BattleInfo();

  SM_BattleInfo(const SM_BattleInfo& from);

  inline SM_BattleInfo& operator=(const SM_BattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_BattleInfo& default_instance();

  void Swap(SM_BattleInfo* other);

  // implements Message ----------------------------------------------

  SM_BattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_BattleInfo& from);
  void MergeFrom(const SM_BattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_RoleID = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_Camp = 2;
  inline bool has_m_camp() const;
  inline void clear_m_camp();
  static const int kMCampFieldNumber = 2;
  inline ::google::protobuf::int32 m_camp() const;
  inline void set_m_camp(::google::protobuf::int32 value);

  // optional int32 m_RemainHP = 3;
  inline bool has_m_remainhp() const;
  inline void clear_m_remainhp();
  static const int kMRemainHPFieldNumber = 3;
  inline ::google::protobuf::int32 m_remainhp() const;
  inline void set_m_remainhp(::google::protobuf::int32 value);

  // optional int32 m_HurtVal = 4;
  inline bool has_m_hurtval() const;
  inline void clear_m_hurtval();
  static const int kMHurtValFieldNumber = 4;
  inline ::google::protobuf::int32 m_hurtval() const;
  inline void set_m_hurtval(::google::protobuf::int32 value);

  // optional int32 m_killNum = 5;
  inline bool has_m_killnum() const;
  inline void clear_m_killnum();
  static const int kMKillNumFieldNumber = 5;
  inline ::google::protobuf::int32 m_killnum() const;
  inline void set_m_killnum(::google::protobuf::int32 value);

  // optional int32 m_dieNum = 6;
  inline bool has_m_dienum() const;
  inline void clear_m_dienum();
  static const int kMDieNumFieldNumber = 6;
  inline ::google::protobuf::int32 m_dienum() const;
  inline void set_m_dienum(::google::protobuf::int32 value);

  // optional string m_name = 7;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 7;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_level = 8;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 8;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_fightval = 9;
  inline bool has_m_fightval() const;
  inline void clear_m_fightval();
  static const int kMFightvalFieldNumber = 9;
  inline ::google::protobuf::int32 m_fightval() const;
  inline void set_m_fightval(::google::protobuf::int32 value);

  // optional int32 m_point = 10;
  inline bool has_m_point() const;
  inline void clear_m_point();
  static const int kMPointFieldNumber = 10;
  inline ::google::protobuf::int32 m_point() const;
  inline void set_m_point(::google::protobuf::int32 value);

  // optional int32 m_CharacterType = 11;
  inline bool has_m_charactertype() const;
  inline void clear_m_charactertype();
  static const int kMCharacterTypeFieldNumber = 11;
  inline ::google::protobuf::int32 m_charactertype() const;
  inline void set_m_charactertype(::google::protobuf::int32 value);

  // optional int32 m_parentID = 12;
  inline bool has_m_parentid() const;
  inline void clear_m_parentid();
  static const int kMParentIDFieldNumber = 12;
  inline ::google::protobuf::int32 m_parentid() const;
  inline void set_m_parentid(::google::protobuf::int32 value);

  // optional int32 m_exitType = 13;
  inline bool has_m_exittype() const;
  inline void clear_m_exittype();
  static const int kMExitTypeFieldNumber = 13;
  inline ::google::protobuf::int32 m_exittype() const;
  inline void set_m_exittype(::google::protobuf::int32 value);

  // optional string m_parentName = 14;
  inline bool has_m_parentname() const;
  inline void clear_m_parentname();
  static const int kMParentNameFieldNumber = 14;
  inline const ::std::string& m_parentname() const;
  inline void set_m_parentname(const ::std::string& value);
  inline void set_m_parentname(const char* value);
  inline void set_m_parentname(const char* value, size_t size);
  inline ::std::string* mutable_m_parentname();
  inline ::std::string* release_m_parentname();
  inline void set_allocated_m_parentname(::std::string* m_parentname);

  // optional int32 m_topgrade = 15;
  inline bool has_m_topgrade() const;
  inline void clear_m_topgrade();
  static const int kMTopgradeFieldNumber = 15;
  inline ::google::protobuf::int32 m_topgrade() const;
  inline void set_m_topgrade(::google::protobuf::int32 value);

  // optional int32 m_serverid = 16;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServeridFieldNumber = 16;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // optional int32 m_topsocre = 17;
  inline bool has_m_topsocre() const;
  inline void clear_m_topsocre();
  static const int kMTopsocreFieldNumber = 17;
  inline ::google::protobuf::int32 m_topsocre() const;
  inline void set_m_topsocre(::google::protobuf::int32 value);

  // optional int32 m_bosspercentage = 18;
  inline bool has_m_bosspercentage() const;
  inline void clear_m_bosspercentage();
  static const int kMBosspercentageFieldNumber = 18;
  inline ::google::protobuf::int32 m_bosspercentage() const;
  inline void set_m_bosspercentage(::google::protobuf::int32 value);

  // repeated .GM_ItemDrop m_DropData = 20;
  inline int m_dropdata_size() const;
  inline void clear_m_dropdata();
  static const int kMDropDataFieldNumber = 20;
  inline const ::GM_ItemDrop& m_dropdata(int index) const;
  inline ::GM_ItemDrop* mutable_m_dropdata(int index);
  inline ::GM_ItemDrop* add_m_dropdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
      m_dropdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
      mutable_m_dropdata();

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  inline int m_killmonsterdata_size() const;
  inline void clear_m_killmonsterdata();
  static const int kMKillMonsterDataFieldNumber = 21;
  inline const ::GM_ItemDrop& m_killmonsterdata(int index) const;
  inline ::GM_ItemDrop* mutable_m_killmonsterdata(int index);
  inline ::GM_ItemDrop* add_m_killmonsterdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
      m_killmonsterdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
      mutable_m_killmonsterdata();

  // @@protoc_insertion_point(class_scope:SM_BattleInfo)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_camp();
  inline void clear_has_m_camp();
  inline void set_has_m_remainhp();
  inline void clear_has_m_remainhp();
  inline void set_has_m_hurtval();
  inline void clear_has_m_hurtval();
  inline void set_has_m_killnum();
  inline void clear_has_m_killnum();
  inline void set_has_m_dienum();
  inline void clear_has_m_dienum();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_fightval();
  inline void clear_has_m_fightval();
  inline void set_has_m_point();
  inline void clear_has_m_point();
  inline void set_has_m_charactertype();
  inline void clear_has_m_charactertype();
  inline void set_has_m_parentid();
  inline void clear_has_m_parentid();
  inline void set_has_m_exittype();
  inline void clear_has_m_exittype();
  inline void set_has_m_parentname();
  inline void clear_has_m_parentname();
  inline void set_has_m_topgrade();
  inline void clear_has_m_topgrade();
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();
  inline void set_has_m_topsocre();
  inline void clear_has_m_topsocre();
  inline void set_has_m_bosspercentage();
  inline void clear_has_m_bosspercentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_camp_;
  ::google::protobuf::int32 m_remainhp_;
  ::google::protobuf::int32 m_hurtval_;
  ::google::protobuf::int32 m_killnum_;
  ::google::protobuf::int32 m_dienum_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_fightval_;
  ::google::protobuf::int32 m_point_;
  ::google::protobuf::int32 m_charactertype_;
  ::google::protobuf::int32 m_parentid_;
  ::google::protobuf::int32 m_exittype_;
  ::std::string* m_parentname_;
  ::google::protobuf::int32 m_topgrade_;
  ::google::protobuf::int32 m_serverid_;
  ::google::protobuf::int32 m_topsocre_;
  ::google::protobuf::int32 m_bosspercentage_;
  ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop > m_dropdata_;
  ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop > m_killmonsterdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SM_BattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class SM_BattleResult : public ::google::protobuf::Message {
 public:
  SM_BattleResult();
  virtual ~SM_BattleResult();

  SM_BattleResult(const SM_BattleResult& from);

  inline SM_BattleResult& operator=(const SM_BattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_BattleResult& default_instance();

  void Swap(SM_BattleResult* other);

  // implements Message ----------------------------------------------

  SM_BattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_BattleResult& from);
  void MergeFrom(const SM_BattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_WinCamp = 1;
  inline bool has_m_wincamp() const;
  inline void clear_m_wincamp();
  static const int kMWinCampFieldNumber = 1;
  inline ::google::protobuf::int32 m_wincamp() const;
  inline void set_m_wincamp(::google::protobuf::int32 value);

  // optional int32 m_BattleType = 2;
  inline bool has_m_battletype() const;
  inline void clear_m_battletype();
  static const int kMBattleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_battletype() const;
  inline void set_m_battletype(::google::protobuf::int32 value);

  // optional int32 m_FBTypeID = 3;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFBTypeIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 m_UseTime = 4;
  inline bool has_m_usetime() const;
  inline void clear_m_usetime();
  static const int kMUseTimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_usetime() const;
  inline void set_m_usetime(::google::protobuf::int32 value);

  // optional int32 m_BossHP = 5;
  inline bool has_m_bosshp() const;
  inline void clear_m_bosshp();
  static const int kMBossHPFieldNumber = 5;
  inline ::google::protobuf::int32 m_bosshp() const;
  inline void set_m_bosshp(::google::protobuf::int32 value);

  // repeated .SM_BattleInfo m_PlayerData = 6;
  inline int m_playerdata_size() const;
  inline void clear_m_playerdata();
  static const int kMPlayerDataFieldNumber = 6;
  inline const ::SM_BattleInfo& m_playerdata(int index) const;
  inline ::SM_BattleInfo* mutable_m_playerdata(int index);
  inline ::SM_BattleInfo* add_m_playerdata();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_BattleInfo >&
      m_playerdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_BattleInfo >*
      mutable_m_playerdata();

  // @@protoc_insertion_point(class_scope:SM_BattleResult)
 private:
  inline void set_has_m_wincamp();
  inline void clear_has_m_wincamp();
  inline void set_has_m_battletype();
  inline void clear_has_m_battletype();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_usetime();
  inline void clear_has_m_usetime();
  inline void set_has_m_bosshp();
  inline void clear_has_m_bosshp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_wincamp_;
  ::google::protobuf::int32 m_battletype_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 m_usetime_;
  ::google::protobuf::RepeatedPtrField< ::SM_BattleInfo > m_playerdata_;
  ::google::protobuf::int32 m_bosshp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SM_BattleResult* default_instance_;
};
// -------------------------------------------------------------------

class SyncMovement : public ::google::protobuf::Message {
 public:
  SyncMovement();
  virtual ~SyncMovement();

  SyncMovement(const SyncMovement& from);

  inline SyncMovement& operator=(const SyncMovement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMovement& default_instance();

  void Swap(SyncMovement* other);

  // implements Message ----------------------------------------------

  SyncMovement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMovement& from);
  void MergeFrom(const SyncMovement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional float m_PosX = 2;
  inline bool has_m_posx() const;
  inline void clear_m_posx();
  static const int kMPosXFieldNumber = 2;
  inline float m_posx() const;
  inline void set_m_posx(float value);

  // optional float m_PosZ = 3;
  inline bool has_m_posz() const;
  inline void clear_m_posz();
  static const int kMPosZFieldNumber = 3;
  inline float m_posz() const;
  inline void set_m_posz(float value);

  // optional float m_VecX = 4;
  inline bool has_m_vecx() const;
  inline void clear_m_vecx();
  static const int kMVecXFieldNumber = 4;
  inline float m_vecx() const;
  inline void set_m_vecx(float value);

  // optional float m_VecZ = 5;
  inline bool has_m_vecz() const;
  inline void clear_m_vecz();
  static const int kMVecZFieldNumber = 5;
  inline float m_vecz() const;
  inline void set_m_vecz(float value);

  // @@protoc_insertion_point(class_scope:SyncMovement)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_posx();
  inline void clear_has_m_posx();
  inline void set_has_m_posz();
  inline void clear_has_m_posz();
  inline void set_has_m_vecx();
  inline void clear_has_m_vecx();
  inline void set_has_m_vecz();
  inline void clear_has_m_vecz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  float m_posx_;
  float m_posz_;
  float m_vecx_;
  float m_vecz_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SyncMovement* default_instance_;
};
// -------------------------------------------------------------------

class GM_FBSweepRequest : public ::google::protobuf::Message {
 public:
  GM_FBSweepRequest();
  virtual ~GM_FBSweepRequest();

  GM_FBSweepRequest(const GM_FBSweepRequest& from);

  inline GM_FBSweepRequest& operator=(const GM_FBSweepRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_FBSweepRequest& default_instance();

  void Swap(GM_FBSweepRequest* other);

  // implements Message ----------------------------------------------

  GM_FBSweepRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_FBSweepRequest& from);
  void MergeFrom(const GM_FBSweepRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_fbtypeid = 1;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFbtypeidFieldNumber = 1;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 m_fbid = 2;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFbidFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional int32 m_repeat = 3;
  inline bool has_m_repeat() const;
  inline void clear_m_repeat();
  static const int kMRepeatFieldNumber = 3;
  inline ::google::protobuf::int32 m_repeat() const;
  inline void set_m_repeat(::google::protobuf::int32 value);

  // optional int32 m_profession = 4;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 m_profession() const;
  inline void set_m_profession(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_FBSweepRequest)
 private:
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_repeat();
  inline void clear_has_m_repeat();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 m_fbid_;
  ::google::protobuf::int32 m_repeat_;
  ::google::protobuf::int32 m_profession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_FBSweepRequest* default_instance_;
};
// -------------------------------------------------------------------

class GM_FBSweepReturn : public ::google::protobuf::Message {
 public:
  GM_FBSweepReturn();
  virtual ~GM_FBSweepReturn();

  GM_FBSweepReturn(const GM_FBSweepReturn& from);

  inline GM_FBSweepReturn& operator=(const GM_FBSweepReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_FBSweepReturn& default_instance();

  void Swap(GM_FBSweepReturn* other);

  // implements Message ----------------------------------------------

  GM_FBSweepReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_FBSweepReturn& from);
  void MergeFrom(const GM_FBSweepReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_fbtypeid = 1;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFbtypeidFieldNumber = 1;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 m_sweepcount = 2;
  inline bool has_m_sweepcount() const;
  inline void clear_m_sweepcount();
  static const int kMSweepcountFieldNumber = 2;
  inline ::google::protobuf::int32 m_sweepcount() const;
  inline void set_m_sweepcount(::google::protobuf::int32 value);

  // repeated .GM_ItemDrop m_DropData = 3;
  inline int m_dropdata_size() const;
  inline void clear_m_dropdata();
  static const int kMDropDataFieldNumber = 3;
  inline const ::GM_ItemDrop& m_dropdata(int index) const;
  inline ::GM_ItemDrop* mutable_m_dropdata(int index);
  inline ::GM_ItemDrop* add_m_dropdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
      m_dropdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
      mutable_m_dropdata();

  // repeated .GM_ItemDrop m_KillMonsterData = 21;
  inline int m_killmonsterdata_size() const;
  inline void clear_m_killmonsterdata();
  static const int kMKillMonsterDataFieldNumber = 21;
  inline const ::GM_ItemDrop& m_killmonsterdata(int index) const;
  inline ::GM_ItemDrop* mutable_m_killmonsterdata(int index);
  inline ::GM_ItemDrop* add_m_killmonsterdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
      m_killmonsterdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
      mutable_m_killmonsterdata();

  // @@protoc_insertion_point(class_scope:GM_FBSweepReturn)
 private:
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_sweepcount();
  inline void clear_has_m_sweepcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 m_sweepcount_;
  ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop > m_dropdata_;
  ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop > m_killmonsterdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_FBSweepReturn* default_instance_;
};
// -------------------------------------------------------------------

class GM_PetBattleInfo : public ::google::protobuf::Message {
 public:
  GM_PetBattleInfo();
  virtual ~GM_PetBattleInfo();

  GM_PetBattleInfo(const GM_PetBattleInfo& from);

  inline GM_PetBattleInfo& operator=(const GM_PetBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_PetBattleInfo& default_instance();

  void Swap(GM_PetBattleInfo* other);

  // implements Message ----------------------------------------------

  GM_PetBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_PetBattleInfo& from);
  void MergeFrom(const GM_PetBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleID = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_typeID = 2;
  inline bool has_m_typeid() const;
  inline void clear_m_typeid();
  static const int kMTypeIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_typeid() const;
  inline void set_m_typeid(::google::protobuf::int32 value);

  // optional int32 m_position = 3;
  inline bool has_m_position() const;
  inline void clear_m_position();
  static const int kMPositionFieldNumber = 3;
  inline ::google::protobuf::int32 m_position() const;
  inline void set_m_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_PetBattleInfo)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_typeid();
  inline void clear_has_m_typeid();
  inline void set_has_m_position();
  inline void clear_has_m_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_typeid_;
  ::google::protobuf::int32 m_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_PetBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_AllPetBattleInfo : public ::google::protobuf::Message {
 public:
  GM_AllPetBattleInfo();
  virtual ~GM_AllPetBattleInfo();

  GM_AllPetBattleInfo(const GM_AllPetBattleInfo& from);

  inline GM_AllPetBattleInfo& operator=(const GM_AllPetBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_AllPetBattleInfo& default_instance();

  void Swap(GM_AllPetBattleInfo* other);

  // implements Message ----------------------------------------------

  GM_AllPetBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_AllPetBattleInfo& from);
  void MergeFrom(const GM_AllPetBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_count = 1;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 1;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // repeated .GM_PetBattleInfo m_Data = 2;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::GM_PetBattleInfo& m_data(int index) const;
  inline ::GM_PetBattleInfo* mutable_m_data(int index);
  inline ::GM_PetBattleInfo* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_PetBattleInfo >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_PetBattleInfo >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:GM_AllPetBattleInfo)
 private:
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_PetBattleInfo > m_data_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_AllPetBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM_RealTime_SendPoint : public ::google::protobuf::Message {
 public:
  GM_RealTime_SendPoint();
  virtual ~GM_RealTime_SendPoint();

  GM_RealTime_SendPoint(const GM_RealTime_SendPoint& from);

  inline GM_RealTime_SendPoint& operator=(const GM_RealTime_SendPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_RealTime_SendPoint& default_instance();

  void Swap(GM_RealTime_SendPoint* other);

  // implements Message ----------------------------------------------

  GM_RealTime_SendPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_RealTime_SendPoint& from);
  void MergeFrom(const GM_RealTime_SendPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_point = 1;
  inline bool has_m_point() const;
  inline void clear_m_point();
  static const int kMPointFieldNumber = 1;
  inline ::google::protobuf::int32 m_point() const;
  inline void set_m_point(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_serialkill = 3;
  inline bool has_m_serialkill() const;
  inline void clear_m_serialkill();
  static const int kMSerialkillFieldNumber = 3;
  inline ::google::protobuf::int32 m_serialkill() const;
  inline void set_m_serialkill(::google::protobuf::int32 value);

  // optional string m_attackname = 4;
  inline bool has_m_attackname() const;
  inline void clear_m_attackname();
  static const int kMAttacknameFieldNumber = 4;
  inline const ::std::string& m_attackname() const;
  inline void set_m_attackname(const ::std::string& value);
  inline void set_m_attackname(const char* value);
  inline void set_m_attackname(const char* value, size_t size);
  inline ::std::string* mutable_m_attackname();
  inline ::std::string* release_m_attackname();
  inline void set_allocated_m_attackname(::std::string* m_attackname);

  // optional string m_diename = 5;
  inline bool has_m_diename() const;
  inline void clear_m_diename();
  static const int kMDienameFieldNumber = 5;
  inline const ::std::string& m_diename() const;
  inline void set_m_diename(const ::std::string& value);
  inline void set_m_diename(const char* value);
  inline void set_m_diename(const char* value, size_t size);
  inline ::std::string* mutable_m_diename();
  inline ::std::string* release_m_diename();
  inline void set_allocated_m_diename(::std::string* m_diename);

  // optional int32 m_bekilledid = 6;
  inline bool has_m_bekilledid() const;
  inline void clear_m_bekilledid();
  static const int kMBekilledidFieldNumber = 6;
  inline ::google::protobuf::int32 m_bekilledid() const;
  inline void set_m_bekilledid(::google::protobuf::int32 value);

  // optional int32 m_attackpoint = 7;
  inline bool has_m_attackpoint() const;
  inline void clear_m_attackpoint();
  static const int kMAttackpointFieldNumber = 7;
  inline ::google::protobuf::int32 m_attackpoint() const;
  inline void set_m_attackpoint(::google::protobuf::int32 value);

  // optional int32 m_battlepoint = 8;
  inline bool has_m_battlepoint() const;
  inline void clear_m_battlepoint();
  static const int kMBattlepointFieldNumber = 8;
  inline ::google::protobuf::int32 m_battlepoint() const;
  inline void set_m_battlepoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_RealTime_SendPoint)
 private:
  inline void set_has_m_point();
  inline void clear_has_m_point();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_serialkill();
  inline void clear_has_m_serialkill();
  inline void set_has_m_attackname();
  inline void clear_has_m_attackname();
  inline void set_has_m_diename();
  inline void clear_has_m_diename();
  inline void set_has_m_bekilledid();
  inline void clear_has_m_bekilledid();
  inline void set_has_m_attackpoint();
  inline void clear_has_m_attackpoint();
  inline void set_has_m_battlepoint();
  inline void clear_has_m_battlepoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_point_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_attackname_;
  ::google::protobuf::int32 m_serialkill_;
  ::google::protobuf::int32 m_bekilledid_;
  ::std::string* m_diename_;
  ::google::protobuf::int32 m_attackpoint_;
  ::google::protobuf::int32 m_battlepoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_RealTime_SendPoint* default_instance_;
};
// -------------------------------------------------------------------

class GM_NotifyBuff : public ::google::protobuf::Message {
 public:
  GM_NotifyBuff();
  virtual ~GM_NotifyBuff();

  GM_NotifyBuff(const GM_NotifyBuff& from);

  inline GM_NotifyBuff& operator=(const GM_NotifyBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_NotifyBuff& default_instance();

  void Swap(GM_NotifyBuff* other);

  // implements Message ----------------------------------------------

  GM_NotifyBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_NotifyBuff& from);
  void MergeFrom(const GM_NotifyBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_attackid = 2;
  inline bool has_m_attackid() const;
  inline void clear_m_attackid();
  static const int kMAttackidFieldNumber = 2;
  inline ::google::protobuf::int32 m_attackid() const;
  inline void set_m_attackid(::google::protobuf::int32 value);

  // optional int32 m_buffid = 3;
  inline bool has_m_buffid() const;
  inline void clear_m_buffid();
  static const int kMBuffidFieldNumber = 3;
  inline ::google::protobuf::int32 m_buffid() const;
  inline void set_m_buffid(::google::protobuf::int32 value);

  // optional float m_time = 4;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 4;
  inline float m_time() const;
  inline void set_m_time(float value);

  // optional int32 m_extend = 5;
  inline bool has_m_extend() const;
  inline void clear_m_extend();
  static const int kMExtendFieldNumber = 5;
  inline ::google::protobuf::int32 m_extend() const;
  inline void set_m_extend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_NotifyBuff)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_attackid();
  inline void clear_has_m_attackid();
  inline void set_has_m_buffid();
  inline void clear_has_m_buffid();
  inline void set_has_m_time();
  inline void clear_has_m_time();
  inline void set_has_m_extend();
  inline void clear_has_m_extend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_attackid_;
  ::google::protobuf::int32 m_buffid_;
  float m_time_;
  ::google::protobuf::int32 m_extend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_NotifyBuff* default_instance_;
};
// -------------------------------------------------------------------

class GM_ClientHpNotify : public ::google::protobuf::Message {
 public:
  GM_ClientHpNotify();
  virtual ~GM_ClientHpNotify();

  GM_ClientHpNotify(const GM_ClientHpNotify& from);

  inline GM_ClientHpNotify& operator=(const GM_ClientHpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ClientHpNotify& default_instance();

  void Swap(GM_ClientHpNotify* other);

  // implements Message ----------------------------------------------

  GM_ClientHpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ClientHpNotify& from);
  void MergeFrom(const GM_ClientHpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_attackID = 1;
  inline bool has_m_attackid() const;
  inline void clear_m_attackid();
  static const int kMAttackIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_attackid() const;
  inline void set_m_attackid(::google::protobuf::int32 value);

  // optional int32 m_beAttackID = 2;
  inline bool has_m_beattackid() const;
  inline void clear_m_beattackid();
  static const int kMBeAttackIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_beattackid() const;
  inline void set_m_beattackid(::google::protobuf::int32 value);

  // optional int32 m_hurtVal = 3;
  inline bool has_m_hurtval() const;
  inline void clear_m_hurtval();
  static const int kMHurtValFieldNumber = 3;
  inline ::google::protobuf::int32 m_hurtval() const;
  inline void set_m_hurtval(::google::protobuf::int32 value);

  // optional int32 m_hurtType = 4;
  inline bool has_m_hurttype() const;
  inline void clear_m_hurttype();
  static const int kMHurtTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_hurttype() const;
  inline void set_m_hurttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ClientHpNotify)
 private:
  inline void set_has_m_attackid();
  inline void clear_has_m_attackid();
  inline void set_has_m_beattackid();
  inline void clear_has_m_beattackid();
  inline void set_has_m_hurtval();
  inline void clear_has_m_hurtval();
  inline void set_has_m_hurttype();
  inline void clear_has_m_hurttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_attackid_;
  ::google::protobuf::int32 m_beattackid_;
  ::google::protobuf::int32 m_hurtval_;
  ::google::protobuf::int32 m_hurttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ClientHpNotify* default_instance_;
};
// -------------------------------------------------------------------

class GM_ClientMpNotify : public ::google::protobuf::Message {
 public:
  GM_ClientMpNotify();
  virtual ~GM_ClientMpNotify();

  GM_ClientMpNotify(const GM_ClientMpNotify& from);

  inline GM_ClientMpNotify& operator=(const GM_ClientMpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ClientMpNotify& default_instance();

  void Swap(GM_ClientMpNotify* other);

  // implements Message ----------------------------------------------

  GM_ClientMpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ClientMpNotify& from);
  void MergeFrom(const GM_ClientMpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_value = 2;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ClientMpNotify)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_value();
  inline void clear_has_m_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ClientMpNotify* default_instance_;
};
// -------------------------------------------------------------------

class GM_Notify_Specialskill : public ::google::protobuf::Message {
 public:
  GM_Notify_Specialskill();
  virtual ~GM_Notify_Specialskill();

  GM_Notify_Specialskill(const GM_Notify_Specialskill& from);

  inline GM_Notify_Specialskill& operator=(const GM_Notify_Specialskill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Notify_Specialskill& default_instance();

  void Swap(GM_Notify_Specialskill* other);

  // implements Message ----------------------------------------------

  GM_Notify_Specialskill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Notify_Specialskill& from);
  void MergeFrom(const GM_Notify_Specialskill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Notify_Specialskill)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_Notify_Specialskill* default_instance_;
};
// -------------------------------------------------------------------

class GM_CenterBattle : public ::google::protobuf::Message {
 public:
  GM_CenterBattle();
  virtual ~GM_CenterBattle();

  GM_CenterBattle(const GM_CenterBattle& from);

  inline GM_CenterBattle& operator=(const GM_CenterBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_CenterBattle& default_instance();

  void Swap(GM_CenterBattle* other);

  // implements Message ----------------------------------------------

  GM_CenterBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_CenterBattle& from);
  void MergeFrom(const GM_CenterBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_fbIp = 1;
  inline bool has_m_fbip() const;
  inline void clear_m_fbip();
  static const int kMFbIpFieldNumber = 1;
  inline const ::std::string& m_fbip() const;
  inline void set_m_fbip(const ::std::string& value);
  inline void set_m_fbip(const char* value);
  inline void set_m_fbip(const char* value, size_t size);
  inline ::std::string* mutable_m_fbip();
  inline ::std::string* release_m_fbip();
  inline void set_allocated_m_fbip(::std::string* m_fbip);

  // optional int32 m_rolegmid = 2;
  inline bool has_m_rolegmid() const;
  inline void clear_m_rolegmid();
  static const int kMRolegmidFieldNumber = 2;
  inline ::google::protobuf::int32 m_rolegmid() const;
  inline void set_m_rolegmid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_CenterBattle)
 private:
  inline void set_has_m_fbip();
  inline void clear_has_m_fbip();
  inline void set_has_m_rolegmid();
  inline void clear_has_m_rolegmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_fbip_;
  ::google::protobuf::int32 m_rolegmid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_CenterBattle* default_instance_;
};
// -------------------------------------------------------------------

class SM_TeamMatchData : public ::google::protobuf::Message {
 public:
  SM_TeamMatchData();
  virtual ~SM_TeamMatchData();

  SM_TeamMatchData(const SM_TeamMatchData& from);

  inline SM_TeamMatchData& operator=(const SM_TeamMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_TeamMatchData& default_instance();

  void Swap(SM_TeamMatchData* other);

  // implements Message ----------------------------------------------

  SM_TeamMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_TeamMatchData& from);
  void MergeFrom(const SM_TeamMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_areanID = 1;
  inline bool has_m_areanid() const;
  inline void clear_m_areanid();
  static const int kMAreanIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_areanid() const;
  inline void set_m_areanid(::google::protobuf::int32 value);

  // optional int32 m_nleaderid = 3;
  inline bool has_m_nleaderid() const;
  inline void clear_m_nleaderid();
  static const int kMNleaderidFieldNumber = 3;
  inline ::google::protobuf::int32 m_nleaderid() const;
  inline void set_m_nleaderid(::google::protobuf::int32 value);

  // optional int32 m_nfbtypeid = 4;
  inline bool has_m_nfbtypeid() const;
  inline void clear_m_nfbtypeid();
  static const int kMNfbtypeidFieldNumber = 4;
  inline ::google::protobuf::int32 m_nfbtypeid() const;
  inline void set_m_nfbtypeid(::google::protobuf::int32 value);

  // optional int32 m_nmembernum = 5;
  inline bool has_m_nmembernum() const;
  inline void clear_m_nmembernum();
  static const int kMNmembernumFieldNumber = 5;
  inline ::google::protobuf::int32 m_nmembernum() const;
  inline void set_m_nmembernum(::google::protobuf::int32 value);

  // repeated .SM_BattleRequest m_member = 20;
  inline int m_member_size() const;
  inline void clear_m_member();
  static const int kMMemberFieldNumber = 20;
  inline const ::SM_BattleRequest& m_member(int index) const;
  inline ::SM_BattleRequest* mutable_m_member(int index);
  inline ::SM_BattleRequest* add_m_member();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_BattleRequest >&
      m_member() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_BattleRequest >*
      mutable_m_member();

  // @@protoc_insertion_point(class_scope:SM_TeamMatchData)
 private:
  inline void set_has_m_areanid();
  inline void clear_has_m_areanid();
  inline void set_has_m_nleaderid();
  inline void clear_has_m_nleaderid();
  inline void set_has_m_nfbtypeid();
  inline void clear_has_m_nfbtypeid();
  inline void set_has_m_nmembernum();
  inline void clear_has_m_nmembernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_areanid_;
  ::google::protobuf::int32 m_nleaderid_;
  ::google::protobuf::int32 m_nfbtypeid_;
  ::google::protobuf::int32 m_nmembernum_;
  ::google::protobuf::RepeatedPtrField< ::SM_BattleRequest > m_member_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SM_TeamMatchData* default_instance_;
};
// -------------------------------------------------------------------

class GM_ClientRelive : public ::google::protobuf::Message {
 public:
  GM_ClientRelive();
  virtual ~GM_ClientRelive();

  GM_ClientRelive(const GM_ClientRelive& from);

  inline GM_ClientRelive& operator=(const GM_ClientRelive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ClientRelive& default_instance();

  void Swap(GM_ClientRelive* other);

  // implements Message ----------------------------------------------

  GM_ClientRelive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ClientRelive& from);
  void MergeFrom(const GM_ClientRelive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_fbid = 2;
  inline bool has_m_fbid() const;
  inline void clear_m_fbid();
  static const int kMFbidFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbid() const;
  inline void set_m_fbid(::google::protobuf::int32 value);

  // optional int32 m_hpPercent = 3;
  inline bool has_m_hppercent() const;
  inline void clear_m_hppercent();
  static const int kMHpPercentFieldNumber = 3;
  inline ::google::protobuf::int32 m_hppercent() const;
  inline void set_m_hppercent(::google::protobuf::int32 value);

  // optional int32 m_attackPercent = 4;
  inline bool has_m_attackpercent() const;
  inline void clear_m_attackpercent();
  static const int kMAttackPercentFieldNumber = 4;
  inline ::google::protobuf::int32 m_attackpercent() const;
  inline void set_m_attackpercent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ClientRelive)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_fbid();
  inline void clear_has_m_fbid();
  inline void set_has_m_hppercent();
  inline void clear_has_m_hppercent();
  inline void set_has_m_attackpercent();
  inline void clear_has_m_attackpercent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_fbid_;
  ::google::protobuf::int32 m_hppercent_;
  ::google::protobuf::int32 m_attackpercent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static GM_ClientRelive* default_instance_;
};
// -------------------------------------------------------------------

class SM_majiang_role_battleresult : public ::google::protobuf::Message {
 public:
  SM_majiang_role_battleresult();
  virtual ~SM_majiang_role_battleresult();

  SM_majiang_role_battleresult(const SM_majiang_role_battleresult& from);

  inline SM_majiang_role_battleresult& operator=(const SM_majiang_role_battleresult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_majiang_role_battleresult& default_instance();

  void Swap(SM_majiang_role_battleresult* other);

  // implements Message ----------------------------------------------

  SM_majiang_role_battleresult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_majiang_role_battleresult& from);
  void MergeFrom(const SM_majiang_role_battleresult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleid = 1;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int64 m_allGold = 2;
  inline bool has_m_allgold() const;
  inline void clear_m_allgold();
  static const int kMAllGoldFieldNumber = 2;
  inline ::google::protobuf::int64 m_allgold() const;
  inline void set_m_allgold(::google::protobuf::int64 value);

  // optional int64 m_winGold = 3;
  inline bool has_m_wingold() const;
  inline void clear_m_wingold();
  static const int kMWinGoldFieldNumber = 3;
  inline ::google::protobuf::int64 m_wingold() const;
  inline void set_m_wingold(::google::protobuf::int64 value);

  // optional int32 m_character = 4;
  inline bool has_m_character() const;
  inline void clear_m_character();
  static const int kMCharacterFieldNumber = 4;
  inline ::google::protobuf::int32 m_character() const;
  inline void set_m_character(::google::protobuf::int32 value);

  // optional string m_winType = 5;
  inline bool has_m_wintype() const;
  inline void clear_m_wintype();
  static const int kMWinTypeFieldNumber = 5;
  inline const ::std::string& m_wintype() const;
  inline void set_m_wintype(const ::std::string& value);
  inline void set_m_wintype(const char* value);
  inline void set_m_wintype(const char* value, size_t size);
  inline ::std::string* mutable_m_wintype();
  inline ::std::string* release_m_wintype();
  inline void set_allocated_m_wintype(::std::string* m_wintype);

  // optional int32 m_sjChongGuan = 6;
  inline bool has_m_sjchongguan() const;
  inline void clear_m_sjchongguan();
  static const int kMSjChongGuanFieldNumber = 6;
  inline ::google::protobuf::int32 m_sjchongguan() const;
  inline void set_m_sjchongguan(::google::protobuf::int32 value);

  // optional int32 m_sjBaWang = 7;
  inline bool has_m_sjbawang() const;
  inline void clear_m_sjbawang();
  static const int kMSjBaWangFieldNumber = 7;
  inline ::google::protobuf::int32 m_sjbawang() const;
  inline void set_m_sjbawang(::google::protobuf::int32 value);

  // optional int32 m_xjChongGuan = 8;
  inline bool has_m_xjchongguan() const;
  inline void clear_m_xjchongguan();
  static const int kMXjChongGuanFieldNumber = 8;
  inline ::google::protobuf::int32 m_xjchongguan() const;
  inline void set_m_xjchongguan(::google::protobuf::int32 value);

  // optional int32 m_xjBaWang = 9;
  inline bool has_m_xjbawang() const;
  inline void clear_m_xjbawang();
  static const int kMXjBaWangFieldNumber = 9;
  inline ::google::protobuf::int32 m_xjbawang() const;
  inline void set_m_xjbawang(::google::protobuf::int32 value);

  // optional int32 m_cartype = 10;
  inline bool has_m_cartype() const;
  inline void clear_m_cartype();
  static const int kMCartypeFieldNumber = 10;
  inline ::google::protobuf::int32 m_cartype() const;
  inline void set_m_cartype(::google::protobuf::int32 value);

  // optional int32 m_room_id = 11;
  inline bool has_m_room_id() const;
  inline void clear_m_room_id();
  static const int kMRoomIdFieldNumber = 11;
  inline ::google::protobuf::int32 m_room_id() const;
  inline void set_m_room_id(::google::protobuf::int32 value);

  // optional int32 m_room_bnote = 12;
  inline bool has_m_room_bnote() const;
  inline void clear_m_room_bnote();
  static const int kMRoomBnoteFieldNumber = 12;
  inline ::google::protobuf::int32 m_room_bnote() const;
  inline void set_m_room_bnote(::google::protobuf::int32 value);

  // optional int32 m_win_type = 13;
  inline bool has_m_win_type() const;
  inline void clear_m_win_type();
  static const int kMWinTypeFieldNumber_13 = 13;
  inline ::google::protobuf::int32 m_win_type() const;
  inline void set_m_win_type(::google::protobuf::int32 value);

  // optional int32 m_is_blasting = 14;
  inline bool has_m_is_blasting() const;
  inline void clear_m_is_blasting();
  static const int kMIsBlastingFieldNumber = 14;
  inline ::google::protobuf::int32 m_is_blasting() const;
  inline void set_m_is_blasting(::google::protobuf::int32 value);

  // optional int32 m_is_washedoff = 15;
  inline bool has_m_is_washedoff() const;
  inline void clear_m_is_washedoff();
  static const int kMIsWashedoffFieldNumber = 15;
  inline ::google::protobuf::int32 m_is_washedoff() const;
  inline void set_m_is_washedoff(::google::protobuf::int32 value);

  // optional int32 m_left_card = 16;
  inline bool has_m_left_card() const;
  inline void clear_m_left_card();
  static const int kMLeftCardFieldNumber = 16;
  inline ::google::protobuf::int32 m_left_card() const;
  inline void set_m_left_card(::google::protobuf::int32 value);

  // optional int32 m_chow = 17;
  inline bool has_m_chow() const;
  inline void clear_m_chow();
  static const int kMChowFieldNumber = 17;
  inline ::google::protobuf::int32 m_chow() const;
  inline void set_m_chow(::google::protobuf::int32 value);

  // optional int32 m_pong = 18;
  inline bool has_m_pong() const;
  inline void clear_m_pong();
  static const int kMPongFieldNumber = 18;
  inline ::google::protobuf::int32 m_pong() const;
  inline void set_m_pong(::google::protobuf::int32 value);

  // optional int32 m_exposed = 19;
  inline bool has_m_exposed() const;
  inline void clear_m_exposed();
  static const int kMExposedFieldNumber = 19;
  inline ::google::protobuf::int32 m_exposed() const;
  inline void set_m_exposed(::google::protobuf::int32 value);

  // optional int32 m_concealed_kong = 20;
  inline bool has_m_concealed_kong() const;
  inline void clear_m_concealed_kong();
  static const int kMConcealedKongFieldNumber = 20;
  inline ::google::protobuf::int32 m_concealed_kong() const;
  inline void set_m_concealed_kong(::google::protobuf::int32 value);

  // optional int32 m_patch = 21;
  inline bool has_m_patch() const;
  inline void clear_m_patch();
  static const int kMPatchFieldNumber = 21;
  inline ::google::protobuf::int32 m_patch() const;
  inline void set_m_patch(::google::protobuf::int32 value);

  // optional int32 m_up_score = 22;
  inline bool has_m_up_score() const;
  inline void clear_m_up_score();
  static const int kMUpScoreFieldNumber = 22;
  inline ::google::protobuf::int32 m_up_score() const;
  inline void set_m_up_score(::google::protobuf::int32 value);

  // optional int32 m_down_score = 23;
  inline bool has_m_down_score() const;
  inline void clear_m_down_score();
  static const int kMDownScoreFieldNumber = 23;
  inline ::google::protobuf::int32 m_down_score() const;
  inline void set_m_down_score(::google::protobuf::int32 value);

  // optional int32 m_result = 24;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 24;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 m_Exposed_score = 25;
  inline bool has_m_exposed_score() const;
  inline void clear_m_exposed_score();
  static const int kMExposedScoreFieldNumber = 25;
  inline ::google::protobuf::int32 m_exposed_score() const;
  inline void set_m_exposed_score(::google::protobuf::int32 value);

  // optional int32 m_smile_score = 26;
  inline bool has_m_smile_score() const;
  inline void clear_m_smile_score();
  static const int kMSmileScoreFieldNumber = 26;
  inline ::google::protobuf::int32 m_smile_score() const;
  inline void set_m_smile_score(::google::protobuf::int32 value);

  // optional int32 m_mines_score = 27;
  inline bool has_m_mines_score() const;
  inline void clear_m_mines_score();
  static const int kMMinesScoreFieldNumber = 27;
  inline ::google::protobuf::int32 m_mines_score() const;
  inline void set_m_mines_score(::google::protobuf::int32 value);

  // optional int32 m_song_score = 28;
  inline bool has_m_song_score() const;
  inline void clear_m_song_score();
  static const int kMSongScoreFieldNumber = 28;
  inline ::google::protobuf::int32 m_song_score() const;
  inline void set_m_song_score(::google::protobuf::int32 value);

  // optional int32 m_hu_score = 29;
  inline bool has_m_hu_score() const;
  inline void clear_m_hu_score();
  static const int kMHuScoreFieldNumber = 29;
  inline ::google::protobuf::int32 m_hu_score() const;
  inline void set_m_hu_score(::google::protobuf::int32 value);

  // optional int32 g_card_type = 30;
  inline bool has_g_card_type() const;
  inline void clear_g_card_type();
  static const int kGCardTypeFieldNumber = 30;
  inline ::google::protobuf::int32 g_card_type() const;
  inline void set_g_card_type(::google::protobuf::int32 value);

  // optional int32 g_player_num = 31;
  inline bool has_g_player_num() const;
  inline void clear_g_player_num();
  static const int kGPlayerNumFieldNumber = 31;
  inline ::google::protobuf::int32 g_player_num() const;
  inline void set_g_player_num(::google::protobuf::int32 value);

  // optional int32 g_rolecard_type = 32;
  inline bool has_g_rolecard_type() const;
  inline void clear_g_rolecard_type();
  static const int kGRolecardTypeFieldNumber = 32;
  inline ::google::protobuf::int32 g_rolecard_type() const;
  inline void set_g_rolecard_type(::google::protobuf::int32 value);

  // optional int32 g_is_win = 33;
  inline bool has_g_is_win() const;
  inline void clear_g_is_win();
  static const int kGIsWinFieldNumber = 33;
  inline ::google::protobuf::int32 g_is_win() const;
  inline void set_g_is_win(::google::protobuf::int32 value);

  // optional int32 g_is_dealer = 34;
  inline bool has_g_is_dealer() const;
  inline void clear_g_is_dealer();
  static const int kGIsDealerFieldNumber = 34;
  inline ::google::protobuf::int32 g_is_dealer() const;
  inline void set_g_is_dealer(::google::protobuf::int32 value);

  // optional int32 g_is_discard = 35;
  inline bool has_g_is_discard() const;
  inline void clear_g_is_discard();
  static const int kGIsDiscardFieldNumber = 35;
  inline ::google::protobuf::int32 g_is_discard() const;
  inline void set_g_is_discard(::google::protobuf::int32 value);

  // optional int32 g_fill_counts = 36;
  inline bool has_g_fill_counts() const;
  inline void clear_g_fill_counts();
  static const int kGFillCountsFieldNumber = 36;
  inline ::google::protobuf::int32 g_fill_counts() const;
  inline void set_g_fill_counts(::google::protobuf::int32 value);

  // optional int32 g_compare_counts = 37;
  inline bool has_g_compare_counts() const;
  inline void clear_g_compare_counts();
  static const int kGCompareCountsFieldNumber = 37;
  inline ::google::protobuf::int32 g_compare_counts() const;
  inline void set_g_compare_counts(::google::protobuf::int32 value);

  // optional int32 g_look_counts = 38;
  inline bool has_g_look_counts() const;
  inline void clear_g_look_counts();
  static const int kGLookCountsFieldNumber = 38;
  inline ::google::protobuf::int32 g_look_counts() const;
  inline void set_g_look_counts(::google::protobuf::int32 value);

  // optional int32 g_call_counts = 39;
  inline bool has_g_call_counts() const;
  inline void clear_g_call_counts();
  static const int kGCallCountsFieldNumber = 39;
  inline ::google::protobuf::int32 g_call_counts() const;
  inline void set_g_call_counts(::google::protobuf::int32 value);

  // optional int32 g_role_counts = 40;
  inline bool has_g_role_counts() const;
  inline void clear_g_role_counts();
  static const int kGRoleCountsFieldNumber = 40;
  inline ::google::protobuf::int32 g_role_counts() const;
  inline void set_g_role_counts(::google::protobuf::int32 value);

  // optional int32 g_total_counts = 41;
  inline bool has_g_total_counts() const;
  inline void clear_g_total_counts();
  static const int kGTotalCountsFieldNumber = 41;
  inline ::google::protobuf::int32 g_total_counts() const;
  inline void set_g_total_counts(::google::protobuf::int32 value);

  // optional int32 g_exit_type = 42;
  inline bool has_g_exit_type() const;
  inline void clear_g_exit_type();
  static const int kGExitTypeFieldNumber = 42;
  inline ::google::protobuf::int32 g_exit_type() const;
  inline void set_g_exit_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_majiang_role_battleresult)
 private:
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_allgold();
  inline void clear_has_m_allgold();
  inline void set_has_m_wingold();
  inline void clear_has_m_wingold();
  inline void set_has_m_character();
  inline void clear_has_m_character();
  inline void set_has_m_wintype();
  inline void clear_has_m_wintype();
  inline void set_has_m_sjchongguan();
  inline void clear_has_m_sjchongguan();
  inline void set_has_m_sjbawang();
  inline void clear_has_m_sjbawang();
  inline void set_has_m_xjchongguan();
  inline void clear_has_m_xjchongguan();
  inline void set_has_m_xjbawang();
  inline void clear_has_m_xjbawang();
  inline void set_has_m_cartype();
  inline void clear_has_m_cartype();
  inline void set_has_m_room_id();
  inline void clear_has_m_room_id();
  inline void set_has_m_room_bnote();
  inline void clear_has_m_room_bnote();
  inline void set_has_m_win_type();
  inline void clear_has_m_win_type();
  inline void set_has_m_is_blasting();
  inline void clear_has_m_is_blasting();
  inline void set_has_m_is_washedoff();
  inline void clear_has_m_is_washedoff();
  inline void set_has_m_left_card();
  inline void clear_has_m_left_card();
  inline void set_has_m_chow();
  inline void clear_has_m_chow();
  inline void set_has_m_pong();
  inline void clear_has_m_pong();
  inline void set_has_m_exposed();
  inline void clear_has_m_exposed();
  inline void set_has_m_concealed_kong();
  inline void clear_has_m_concealed_kong();
  inline void set_has_m_patch();
  inline void clear_has_m_patch();
  inline void set_has_m_up_score();
  inline void clear_has_m_up_score();
  inline void set_has_m_down_score();
  inline void clear_has_m_down_score();
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_exposed_score();
  inline void clear_has_m_exposed_score();
  inline void set_has_m_smile_score();
  inline void clear_has_m_smile_score();
  inline void set_has_m_mines_score();
  inline void clear_has_m_mines_score();
  inline void set_has_m_song_score();
  inline void clear_has_m_song_score();
  inline void set_has_m_hu_score();
  inline void clear_has_m_hu_score();
  inline void set_has_g_card_type();
  inline void clear_has_g_card_type();
  inline void set_has_g_player_num();
  inline void clear_has_g_player_num();
  inline void set_has_g_rolecard_type();
  inline void clear_has_g_rolecard_type();
  inline void set_has_g_is_win();
  inline void clear_has_g_is_win();
  inline void set_has_g_is_dealer();
  inline void clear_has_g_is_dealer();
  inline void set_has_g_is_discard();
  inline void clear_has_g_is_discard();
  inline void set_has_g_fill_counts();
  inline void clear_has_g_fill_counts();
  inline void set_has_g_compare_counts();
  inline void clear_has_g_compare_counts();
  inline void set_has_g_look_counts();
  inline void clear_has_g_look_counts();
  inline void set_has_g_call_counts();
  inline void clear_has_g_call_counts();
  inline void set_has_g_role_counts();
  inline void clear_has_g_role_counts();
  inline void set_has_g_total_counts();
  inline void clear_has_g_total_counts();
  inline void set_has_g_exit_type();
  inline void clear_has_g_exit_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_allgold_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_character_;
  ::google::protobuf::int64 m_wingold_;
  ::std::string* m_wintype_;
  ::google::protobuf::int32 m_sjchongguan_;
  ::google::protobuf::int32 m_sjbawang_;
  ::google::protobuf::int32 m_xjchongguan_;
  ::google::protobuf::int32 m_xjbawang_;
  ::google::protobuf::int32 m_cartype_;
  ::google::protobuf::int32 m_room_id_;
  ::google::protobuf::int32 m_room_bnote_;
  ::google::protobuf::int32 m_win_type_;
  ::google::protobuf::int32 m_is_blasting_;
  ::google::protobuf::int32 m_is_washedoff_;
  ::google::protobuf::int32 m_left_card_;
  ::google::protobuf::int32 m_chow_;
  ::google::protobuf::int32 m_pong_;
  ::google::protobuf::int32 m_exposed_;
  ::google::protobuf::int32 m_concealed_kong_;
  ::google::protobuf::int32 m_patch_;
  ::google::protobuf::int32 m_up_score_;
  ::google::protobuf::int32 m_down_score_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_exposed_score_;
  ::google::protobuf::int32 m_smile_score_;
  ::google::protobuf::int32 m_mines_score_;
  ::google::protobuf::int32 m_song_score_;
  ::google::protobuf::int32 m_hu_score_;
  ::google::protobuf::int32 g_card_type_;
  ::google::protobuf::int32 g_player_num_;
  ::google::protobuf::int32 g_rolecard_type_;
  ::google::protobuf::int32 g_is_win_;
  ::google::protobuf::int32 g_is_dealer_;
  ::google::protobuf::int32 g_is_discard_;
  ::google::protobuf::int32 g_fill_counts_;
  ::google::protobuf::int32 g_compare_counts_;
  ::google::protobuf::int32 g_look_counts_;
  ::google::protobuf::int32 g_call_counts_;
  ::google::protobuf::int32 g_role_counts_;
  ::google::protobuf::int32 g_total_counts_;
  ::google::protobuf::int32 g_exit_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(42 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SM_majiang_role_battleresult* default_instance_;
};
// -------------------------------------------------------------------

class SM_majiang_battleResult : public ::google::protobuf::Message {
 public:
  SM_majiang_battleResult();
  virtual ~SM_majiang_battleResult();

  SM_majiang_battleResult(const SM_majiang_battleResult& from);

  inline SM_majiang_battleResult& operator=(const SM_majiang_battleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_majiang_battleResult& default_instance();

  void Swap(SM_majiang_battleResult* other);

  // implements Message ----------------------------------------------

  SM_majiang_battleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_majiang_battleResult& from);
  void MergeFrom(const SM_majiang_battleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_BattleType = 1;
  inline bool has_m_battletype() const;
  inline void clear_m_battletype();
  static const int kMBattleTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_battletype() const;
  inline void set_m_battletype(::google::protobuf::int32 value);

  // optional int32 m_FBTypeID = 2;
  inline bool has_m_fbtypeid() const;
  inline void clear_m_fbtypeid();
  static const int kMFBTypeIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_fbtypeid() const;
  inline void set_m_fbtypeid(::google::protobuf::int32 value);

  // optional int32 m_increMatchid = 3;
  inline bool has_m_incrematchid() const;
  inline void clear_m_incrematchid();
  static const int kMIncreMatchidFieldNumber = 3;
  inline ::google::protobuf::int32 m_incrematchid() const;
  inline void set_m_incrematchid(::google::protobuf::int32 value);

  // optional int32 m_isMatchOverGolden = 4;
  inline bool has_m_ismatchovergolden() const;
  inline void clear_m_ismatchovergolden();
  static const int kMIsMatchOverGoldenFieldNumber = 4;
  inline ::google::protobuf::int32 m_ismatchovergolden() const;
  inline void set_m_ismatchovergolden(::google::protobuf::int32 value);

  // optional int32 m_isReallyResult = 5;
  inline bool has_m_isreallyresult() const;
  inline void clear_m_isreallyresult();
  static const int kMIsReallyResultFieldNumber = 5;
  inline ::google::protobuf::int32 m_isreallyresult() const;
  inline void set_m_isreallyresult(::google::protobuf::int32 value);

  // optional int32 m_playcount = 6;
  inline bool has_m_playcount() const;
  inline void clear_m_playcount();
  static const int kMPlaycountFieldNumber = 6;
  inline ::google::protobuf::int32 m_playcount() const;
  inline void set_m_playcount(::google::protobuf::int32 value);

  // optional int32 m_monsterid = 7;
  inline bool has_m_monsterid() const;
  inline void clear_m_monsterid();
  static const int kMMonsteridFieldNumber = 7;
  inline ::google::protobuf::int32 m_monsterid() const;
  inline void set_m_monsterid(::google::protobuf::int32 value);

  // optional int32 m_roomcount = 8;
  inline bool has_m_roomcount() const;
  inline void clear_m_roomcount();
  static const int kMRoomcountFieldNumber = 8;
  inline ::google::protobuf::int32 m_roomcount() const;
  inline void set_m_roomcount(::google::protobuf::int32 value);

  // repeated .SM_majiang_role_battleresult m_roleresult = 9;
  inline int m_roleresult_size() const;
  inline void clear_m_roleresult();
  static const int kMRoleresultFieldNumber = 9;
  inline const ::SM_majiang_role_battleresult& m_roleresult(int index) const;
  inline ::SM_majiang_role_battleresult* mutable_m_roleresult(int index);
  inline ::SM_majiang_role_battleresult* add_m_roleresult();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_majiang_role_battleresult >&
      m_roleresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_majiang_role_battleresult >*
      mutable_m_roleresult();

  // optional int32 m_is_dealer = 10;
  inline bool has_m_is_dealer() const;
  inline void clear_m_is_dealer();
  static const int kMIsDealerFieldNumber = 10;
  inline ::google::protobuf::int32 m_is_dealer() const;
  inline void set_m_is_dealer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_majiang_battleResult)
 private:
  inline void set_has_m_battletype();
  inline void clear_has_m_battletype();
  inline void set_has_m_fbtypeid();
  inline void clear_has_m_fbtypeid();
  inline void set_has_m_incrematchid();
  inline void clear_has_m_incrematchid();
  inline void set_has_m_ismatchovergolden();
  inline void clear_has_m_ismatchovergolden();
  inline void set_has_m_isreallyresult();
  inline void clear_has_m_isreallyresult();
  inline void set_has_m_playcount();
  inline void clear_has_m_playcount();
  inline void set_has_m_monsterid();
  inline void clear_has_m_monsterid();
  inline void set_has_m_roomcount();
  inline void clear_has_m_roomcount();
  inline void set_has_m_is_dealer();
  inline void clear_has_m_is_dealer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_battletype_;
  ::google::protobuf::int32 m_fbtypeid_;
  ::google::protobuf::int32 m_incrematchid_;
  ::google::protobuf::int32 m_ismatchovergolden_;
  ::google::protobuf::int32 m_isreallyresult_;
  ::google::protobuf::int32 m_playcount_;
  ::google::protobuf::int32 m_monsterid_;
  ::google::protobuf::int32 m_roomcount_;
  ::google::protobuf::RepeatedPtrField< ::SM_majiang_role_battleresult > m_roleresult_;
  ::google::protobuf::int32 m_is_dealer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2etxt();
  friend void protobuf_AssignDesc_battle_2etxt();
  friend void protobuf_ShutdownFile_battle_2etxt();

  void InitAsDefaultInstance();
  static SM_majiang_battleResult* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_BattleFBServerInfo

// required int32 m_Result = 1;
inline bool GM_BattleFBServerInfo::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_BattleFBServerInfo::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_BattleFBServerInfo::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_result() const {
  return m_result_;
}
inline void GM_BattleFBServerInfo::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 m_FBID = 2;
inline bool GM_BattleFBServerInfo::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_BattleFBServerInfo::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_BattleFBServerInfo::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_fbid() const {
  return m_fbid_;
}
inline void GM_BattleFBServerInfo::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional int32 m_FBServerID = 3;
inline bool GM_BattleFBServerInfo::has_m_fbserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_fbserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_BattleFBServerInfo::clear_has_m_fbserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_BattleFBServerInfo::clear_m_fbserverid() {
  m_fbserverid_ = 0;
  clear_has_m_fbserverid();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_fbserverid() const {
  return m_fbserverid_;
}
inline void GM_BattleFBServerInfo::set_m_fbserverid(::google::protobuf::int32 value) {
  set_has_m_fbserverid();
  m_fbserverid_ = value;
}

// optional int32 m_FBTypeID = 4;
inline bool GM_BattleFBServerInfo::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_BattleFBServerInfo::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_BattleFBServerInfo::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void GM_BattleFBServerInfo::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 m_increidmatch = 5;
inline bool GM_BattleFBServerInfo::has_m_increidmatch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_increidmatch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_BattleFBServerInfo::clear_has_m_increidmatch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_BattleFBServerInfo::clear_m_increidmatch() {
  m_increidmatch_ = 0;
  clear_has_m_increidmatch();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_increidmatch() const {
  return m_increidmatch_;
}
inline void GM_BattleFBServerInfo::set_m_increidmatch(::google::protobuf::int32 value) {
  set_has_m_increidmatch();
  m_increidmatch_ = value;
}

// optional string m_playWay = 6;
inline bool GM_BattleFBServerInfo::has_m_playway() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_playway() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_BattleFBServerInfo::clear_has_m_playway() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_BattleFBServerInfo::clear_m_playway() {
  if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
    m_playway_->clear();
  }
  clear_has_m_playway();
}
inline const ::std::string& GM_BattleFBServerInfo::m_playway() const {
  return *m_playway_;
}
inline void GM_BattleFBServerInfo::set_m_playway(const ::std::string& value) {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  m_playway_->assign(value);
}
inline void GM_BattleFBServerInfo::set_m_playway(const char* value) {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  m_playway_->assign(value);
}
inline void GM_BattleFBServerInfo::set_m_playway(const char* value, size_t size) {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  m_playway_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_BattleFBServerInfo::mutable_m_playway() {
  set_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    m_playway_ = new ::std::string;
  }
  return m_playway_;
}
inline ::std::string* GM_BattleFBServerInfo::release_m_playway() {
  clear_has_m_playway();
  if (m_playway_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_playway_;
    m_playway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_BattleFBServerInfo::set_allocated_m_playway(::std::string* m_playway) {
  if (m_playway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playway_;
  }
  if (m_playway) {
    set_has_m_playway();
    m_playway_ = m_playway;
  } else {
    clear_has_m_playway();
    m_playway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_playerCount = 7;
inline bool GM_BattleFBServerInfo::has_m_playercount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_playercount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_BattleFBServerInfo::clear_has_m_playercount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_BattleFBServerInfo::clear_m_playercount() {
  m_playercount_ = 0;
  clear_has_m_playercount();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_playercount() const {
  return m_playercount_;
}
inline void GM_BattleFBServerInfo::set_m_playercount(::google::protobuf::int32 value) {
  set_has_m_playercount();
  m_playercount_ = value;
}

// optional int32 m_gameCount = 8;
inline bool GM_BattleFBServerInfo::has_m_gamecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_BattleFBServerInfo::set_has_m_gamecount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_BattleFBServerInfo::clear_has_m_gamecount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_BattleFBServerInfo::clear_m_gamecount() {
  m_gamecount_ = 0;
  clear_has_m_gamecount();
}
inline ::google::protobuf::int32 GM_BattleFBServerInfo::m_gamecount() const {
  return m_gamecount_;
}
inline void GM_BattleFBServerInfo::set_m_gamecount(::google::protobuf::int32 value) {
  set_has_m_gamecount();
  m_gamecount_ = value;
}

// -------------------------------------------------------------------

// GM_LoginFBServer

// required int32 m_RoleID = 1;
inline bool GM_LoginFBServer::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_LoginFBServer::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_LoginFBServer::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_LoginFBServer::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_LoginFBServer::m_roleid() const {
  return m_roleid_;
}
inline void GM_LoginFBServer::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_FBID = 2;
inline bool GM_LoginFBServer::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_LoginFBServer::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_LoginFBServer::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_LoginFBServer::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_LoginFBServer::m_fbid() const {
  return m_fbid_;
}
inline void GM_LoginFBServer::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional double m_Longitude = 3;
inline bool GM_LoginFBServer::has_m_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_LoginFBServer::set_has_m_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_LoginFBServer::clear_has_m_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_LoginFBServer::clear_m_longitude() {
  m_longitude_ = 0;
  clear_has_m_longitude();
}
inline double GM_LoginFBServer::m_longitude() const {
  return m_longitude_;
}
inline void GM_LoginFBServer::set_m_longitude(double value) {
  set_has_m_longitude();
  m_longitude_ = value;
}

// optional double m_Latitude = 4;
inline bool GM_LoginFBServer::has_m_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_LoginFBServer::set_has_m_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_LoginFBServer::clear_has_m_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_LoginFBServer::clear_m_latitude() {
  m_latitude_ = 0;
  clear_has_m_latitude();
}
inline double GM_LoginFBServer::m_latitude() const {
  return m_latitude_;
}
inline void GM_LoginFBServer::set_m_latitude(double value) {
  set_has_m_latitude();
  m_latitude_ = value;
}

// optional string m_reallyPos = 5;
inline bool GM_LoginFBServer::has_m_reallypos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_LoginFBServer::set_has_m_reallypos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_LoginFBServer::clear_has_m_reallypos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_LoginFBServer::clear_m_reallypos() {
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    m_reallypos_->clear();
  }
  clear_has_m_reallypos();
}
inline const ::std::string& GM_LoginFBServer::m_reallypos() const {
  return *m_reallypos_;
}
inline void GM_LoginFBServer::set_m_reallypos(const ::std::string& value) {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  m_reallypos_->assign(value);
}
inline void GM_LoginFBServer::set_m_reallypos(const char* value) {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  m_reallypos_->assign(value);
}
inline void GM_LoginFBServer::set_m_reallypos(const char* value, size_t size) {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  m_reallypos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_LoginFBServer::mutable_m_reallypos() {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  return m_reallypos_;
}
inline ::std::string* GM_LoginFBServer::release_m_reallypos() {
  clear_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_reallypos_;
    m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_LoginFBServer::set_allocated_m_reallypos(::std::string* m_reallypos) {
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reallypos_;
  }
  if (m_reallypos) {
    set_has_m_reallypos();
    m_reallypos_ = m_reallypos;
  } else {
    clear_has_m_reallypos();
    m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_LoginFBServerResult

// required int32 result = 1;
inline bool GM_LoginFBServerResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_LoginFBServerResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_LoginFBServerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_LoginFBServerResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_LoginFBServerResult::result() const {
  return result_;
}
inline void GM_LoginFBServerResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 m_battletype = 2;
inline bool GM_LoginFBServerResult::has_m_battletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_LoginFBServerResult::set_has_m_battletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_LoginFBServerResult::clear_has_m_battletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_LoginFBServerResult::clear_m_battletype() {
  m_battletype_ = 0;
  clear_has_m_battletype();
}
inline ::google::protobuf::int32 GM_LoginFBServerResult::m_battletype() const {
  return m_battletype_;
}
inline void GM_LoginFBServerResult::set_m_battletype(::google::protobuf::int32 value) {
  set_has_m_battletype();
  m_battletype_ = value;
}

// -------------------------------------------------------------------

// GM_BattleEntryInfo

// required bool m_isSelf = 1;
inline bool GM_BattleEntryInfo::has_m_isself() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_BattleEntryInfo::set_has_m_isself() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_BattleEntryInfo::clear_has_m_isself() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_BattleEntryInfo::clear_m_isself() {
  m_isself_ = false;
  clear_has_m_isself();
}
inline bool GM_BattleEntryInfo::m_isself() const {
  return m_isself_;
}
inline void GM_BattleEntryInfo::set_m_isself(bool value) {
  set_has_m_isself();
  m_isself_ = value;
}

// optional int32 m_RoomMasterID = 2;
inline bool GM_BattleEntryInfo::has_m_roommasterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_BattleEntryInfo::set_has_m_roommasterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_BattleEntryInfo::clear_has_m_roommasterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_BattleEntryInfo::clear_m_roommasterid() {
  m_roommasterid_ = 0;
  clear_has_m_roommasterid();
}
inline ::google::protobuf::int32 GM_BattleEntryInfo::m_roommasterid() const {
  return m_roommasterid_;
}
inline void GM_BattleEntryInfo::set_m_roommasterid(::google::protobuf::int32 value) {
  set_has_m_roommasterid();
  m_roommasterid_ = value;
}

// repeated .GM_EntryInfo_Single m_Character = 3;
inline int GM_BattleEntryInfo::m_character_size() const {
  return m_character_.size();
}
inline void GM_BattleEntryInfo::clear_m_character() {
  m_character_.Clear();
}
inline const ::GM_EntryInfo_Single& GM_BattleEntryInfo::m_character(int index) const {
  return m_character_.Get(index);
}
inline ::GM_EntryInfo_Single* GM_BattleEntryInfo::mutable_m_character(int index) {
  return m_character_.Mutable(index);
}
inline ::GM_EntryInfo_Single* GM_BattleEntryInfo::add_m_character() {
  return m_character_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >&
GM_BattleEntryInfo::m_character() const {
  return m_character_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >*
GM_BattleEntryInfo::mutable_m_character() {
  return &m_character_;
}

// -------------------------------------------------------------------

// GM_ItemDrop

// required int32 m_ObjectID = 1;
inline bool GM_ItemDrop::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ItemDrop::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ItemDrop::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ItemDrop::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_ItemDrop::m_objectid() const {
  return m_objectid_;
}
inline void GM_ItemDrop::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// optional int32 m_Count = 2;
inline bool GM_ItemDrop::has_m_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ItemDrop::set_has_m_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ItemDrop::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ItemDrop::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 GM_ItemDrop::m_count() const {
  return m_count_;
}
inline void GM_ItemDrop::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// -------------------------------------------------------------------

// GM_SkillInfo

// required int32 m_SkillID = 1;
inline bool GM_SkillInfo::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_SkillInfo::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_SkillInfo::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_SkillInfo::clear_m_skillid() {
  m_skillid_ = 0;
  clear_has_m_skillid();
}
inline ::google::protobuf::int32 GM_SkillInfo::m_skillid() const {
  return m_skillid_;
}
inline void GM_SkillInfo::set_m_skillid(::google::protobuf::int32 value) {
  set_has_m_skillid();
  m_skillid_ = value;
}

// optional int32 m_SkillLv = 2;
inline bool GM_SkillInfo::has_m_skilllv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_SkillInfo::set_has_m_skilllv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_SkillInfo::clear_has_m_skilllv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_SkillInfo::clear_m_skilllv() {
  m_skilllv_ = 0;
  clear_has_m_skilllv();
}
inline ::google::protobuf::int32 GM_SkillInfo::m_skilllv() const {
  return m_skilllv_;
}
inline void GM_SkillInfo::set_m_skilllv(::google::protobuf::int32 value) {
  set_has_m_skilllv();
  m_skilllv_ = value;
}

// -------------------------------------------------------------------

// GM_RoleBaseInfo

// required int32 m_Roleid = 1;
inline bool GM_RoleBaseInfo::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_RoleBaseInfo::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_RoleBaseInfo::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_roleid() const {
  return m_roleid_;
}
inline void GM_RoleBaseInfo::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int64 m_Gold = 2;
inline bool GM_RoleBaseInfo::has_m_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_RoleBaseInfo::clear_has_m_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_RoleBaseInfo::clear_m_gold() {
  m_gold_ = GOOGLE_LONGLONG(0);
  clear_has_m_gold();
}
inline ::google::protobuf::int64 GM_RoleBaseInfo::m_gold() const {
  return m_gold_;
}
inline void GM_RoleBaseInfo::set_m_gold(::google::protobuf::int64 value) {
  set_has_m_gold();
  m_gold_ = value;
}

// optional int32 m_HeadPhoto = 3;
inline bool GM_RoleBaseInfo::has_m_headphoto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_headphoto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_RoleBaseInfo::clear_has_m_headphoto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_RoleBaseInfo::clear_m_headphoto() {
  m_headphoto_ = 0;
  clear_has_m_headphoto();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_headphoto() const {
  return m_headphoto_;
}
inline void GM_RoleBaseInfo::set_m_headphoto(::google::protobuf::int32 value) {
  set_has_m_headphoto();
  m_headphoto_ = value;
}

// optional int32 m_CataterType = 4;
inline bool GM_RoleBaseInfo::has_m_catatertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_catatertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_RoleBaseInfo::clear_has_m_catatertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_RoleBaseInfo::clear_m_catatertype() {
  m_catatertype_ = 0;
  clear_has_m_catatertype();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_catatertype() const {
  return m_catatertype_;
}
inline void GM_RoleBaseInfo::set_m_catatertype(::google::protobuf::int32 value) {
  set_has_m_catatertype();
  m_catatertype_ = value;
}

// optional int32 m_Postion = 5;
inline bool GM_RoleBaseInfo::has_m_postion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_postion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_RoleBaseInfo::clear_has_m_postion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_RoleBaseInfo::clear_m_postion() {
  m_postion_ = 0;
  clear_has_m_postion();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_postion() const {
  return m_postion_;
}
inline void GM_RoleBaseInfo::set_m_postion(::google::protobuf::int32 value) {
  set_has_m_postion();
  m_postion_ = value;
}

// optional string m_Name = 6;
inline bool GM_RoleBaseInfo::has_m_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_RoleBaseInfo::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_RoleBaseInfo::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& GM_RoleBaseInfo::m_name() const {
  return *m_name_;
}
inline void GM_RoleBaseInfo::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GM_RoleBaseInfo::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GM_RoleBaseInfo::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_RoleBaseInfo::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* GM_RoleBaseInfo::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_RoleBaseInfo::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_Sex = 7;
inline bool GM_RoleBaseInfo::has_m_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_RoleBaseInfo::clear_has_m_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_RoleBaseInfo::clear_m_sex() {
  m_sex_ = 0;
  clear_has_m_sex();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_sex() const {
  return m_sex_;
}
inline void GM_RoleBaseInfo::set_m_sex(::google::protobuf::int32 value) {
  set_has_m_sex();
  m_sex_ = value;
}

// optional int32 m_viplevel = 8;
inline bool GM_RoleBaseInfo::has_m_viplevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_viplevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_RoleBaseInfo::clear_has_m_viplevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_RoleBaseInfo::clear_m_viplevel() {
  m_viplevel_ = 0;
  clear_has_m_viplevel();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_viplevel() const {
  return m_viplevel_;
}
inline void GM_RoleBaseInfo::set_m_viplevel(::google::protobuf::int32 value) {
  set_has_m_viplevel();
  m_viplevel_ = value;
}

// optional int32 m_HeadFrame = 9;
inline bool GM_RoleBaseInfo::has_m_headframe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_headframe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_RoleBaseInfo::clear_has_m_headframe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_RoleBaseInfo::clear_m_headframe() {
  m_headframe_ = 0;
  clear_has_m_headframe();
}
inline ::google::protobuf::int32 GM_RoleBaseInfo::m_headframe() const {
  return m_headframe_;
}
inline void GM_RoleBaseInfo::set_m_headframe(::google::protobuf::int32 value) {
  set_has_m_headframe();
  m_headframe_ = value;
}

// optional string m_NickName = 10;
inline bool GM_RoleBaseInfo::has_m_nickname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_nickname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_RoleBaseInfo::clear_has_m_nickname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_RoleBaseInfo::clear_m_nickname() {
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    m_nickname_->clear();
  }
  clear_has_m_nickname();
}
inline const ::std::string& GM_RoleBaseInfo::m_nickname() const {
  return *m_nickname_;
}
inline void GM_RoleBaseInfo::set_m_nickname(const ::std::string& value) {
  set_has_m_nickname();
  if (m_nickname_ == &::google::protobuf::internal::kEmptyString) {
    m_nickname_ = new ::std::string;
  }
  m_nickname_->assign(value);
}
inline void GM_RoleBaseInfo::set_m_nickname(const char* value) {
  set_has_m_nickname();
  if (m_nickname_ == &::google::protobuf::internal::kEmptyString) {
    m_nickname_ = new ::std::string;
  }
  m_nickname_->assign(value);
}
inline void GM_RoleBaseInfo::set_m_nickname(const char* value, size_t size) {
  set_has_m_nickname();
  if (m_nickname_ == &::google::protobuf::internal::kEmptyString) {
    m_nickname_ = new ::std::string;
  }
  m_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_RoleBaseInfo::mutable_m_nickname() {
  set_has_m_nickname();
  if (m_nickname_ == &::google::protobuf::internal::kEmptyString) {
    m_nickname_ = new ::std::string;
  }
  return m_nickname_;
}
inline ::std::string* GM_RoleBaseInfo::release_m_nickname() {
  clear_has_m_nickname();
  if (m_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_nickname_;
    m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_RoleBaseInfo::set_allocated_m_nickname(::std::string* m_nickname) {
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_nickname) {
    set_has_m_nickname();
    m_nickname_ = m_nickname;
  } else {
    clear_has_m_nickname();
    m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_HeadPhotoUrl = 11;
inline bool GM_RoleBaseInfo::has_m_headphotourl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_RoleBaseInfo::set_has_m_headphotourl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_RoleBaseInfo::clear_has_m_headphotourl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_RoleBaseInfo::clear_m_headphotourl() {
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    m_headphotourl_->clear();
  }
  clear_has_m_headphotourl();
}
inline const ::std::string& GM_RoleBaseInfo::m_headphotourl() const {
  return *m_headphotourl_;
}
inline void GM_RoleBaseInfo::set_m_headphotourl(const ::std::string& value) {
  set_has_m_headphotourl();
  if (m_headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    m_headphotourl_ = new ::std::string;
  }
  m_headphotourl_->assign(value);
}
inline void GM_RoleBaseInfo::set_m_headphotourl(const char* value) {
  set_has_m_headphotourl();
  if (m_headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    m_headphotourl_ = new ::std::string;
  }
  m_headphotourl_->assign(value);
}
inline void GM_RoleBaseInfo::set_m_headphotourl(const char* value, size_t size) {
  set_has_m_headphotourl();
  if (m_headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    m_headphotourl_ = new ::std::string;
  }
  m_headphotourl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_RoleBaseInfo::mutable_m_headphotourl() {
  set_has_m_headphotourl();
  if (m_headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    m_headphotourl_ = new ::std::string;
  }
  return m_headphotourl_;
}
inline ::std::string* GM_RoleBaseInfo::release_m_headphotourl() {
  clear_has_m_headphotourl();
  if (m_headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_headphotourl_;
    m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_RoleBaseInfo::set_allocated_m_headphotourl(::std::string* m_headphotourl) {
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (m_headphotourl) {
    set_has_m_headphotourl();
    m_headphotourl_ = m_headphotourl;
  } else {
    clear_has_m_headphotourl();
    m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Buff

// required int32 buffid = 1;
inline bool GM_Buff::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Buff::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Buff::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Buff::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 GM_Buff::buffid() const {
  return buffid_;
}
inline void GM_Buff::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional int32 fromid = 2;
inline bool GM_Buff::has_fromid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Buff::set_has_fromid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Buff::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Buff::clear_fromid() {
  fromid_ = 0;
  clear_has_fromid();
}
inline ::google::protobuf::int32 GM_Buff::fromid() const {
  return fromid_;
}
inline void GM_Buff::set_fromid(::google::protobuf::int32 value) {
  set_has_fromid();
  fromid_ = value;
}

// -------------------------------------------------------------------

// GM_ClientBuffs

// required int32 ownerid = 1;
inline bool GM_ClientBuffs::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ClientBuffs::set_has_ownerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ClientBuffs::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ClientBuffs::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 GM_ClientBuffs::ownerid() const {
  return ownerid_;
}
inline void GM_ClientBuffs::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// repeated .GM_Buff m_Buffs = 10;
inline int GM_ClientBuffs::m_buffs_size() const {
  return m_buffs_.size();
}
inline void GM_ClientBuffs::clear_m_buffs() {
  m_buffs_.Clear();
}
inline const ::GM_Buff& GM_ClientBuffs::m_buffs(int index) const {
  return m_buffs_.Get(index);
}
inline ::GM_Buff* GM_ClientBuffs::mutable_m_buffs(int index) {
  return m_buffs_.Mutable(index);
}
inline ::GM_Buff* GM_ClientBuffs::add_m_buffs() {
  return m_buffs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Buff >&
GM_ClientBuffs::m_buffs() const {
  return m_buffs_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Buff >*
GM_ClientBuffs::mutable_m_buffs() {
  return &m_buffs_;
}

// -------------------------------------------------------------------

// GM_ClientAllBuffs

// required int32 count = 1;
inline bool GM_ClientAllBuffs::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ClientAllBuffs::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ClientAllBuffs::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ClientAllBuffs::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_ClientAllBuffs::count() const {
  return count_;
}
inline void GM_ClientAllBuffs::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 needClear = 2;
inline bool GM_ClientAllBuffs::has_needclear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ClientAllBuffs::set_has_needclear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ClientAllBuffs::clear_has_needclear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ClientAllBuffs::clear_needclear() {
  needclear_ = 0;
  clear_has_needclear();
}
inline ::google::protobuf::int32 GM_ClientAllBuffs::needclear() const {
  return needclear_;
}
inline void GM_ClientAllBuffs::set_needclear(::google::protobuf::int32 value) {
  set_has_needclear();
  needclear_ = value;
}

// repeated .GM_ClientBuffs m_RoleBuff = 10;
inline int GM_ClientAllBuffs::m_rolebuff_size() const {
  return m_rolebuff_.size();
}
inline void GM_ClientAllBuffs::clear_m_rolebuff() {
  m_rolebuff_.Clear();
}
inline const ::GM_ClientBuffs& GM_ClientAllBuffs::m_rolebuff(int index) const {
  return m_rolebuff_.Get(index);
}
inline ::GM_ClientBuffs* GM_ClientAllBuffs::mutable_m_rolebuff(int index) {
  return m_rolebuff_.Mutable(index);
}
inline ::GM_ClientBuffs* GM_ClientAllBuffs::add_m_rolebuff() {
  return m_rolebuff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ClientBuffs >&
GM_ClientAllBuffs::m_rolebuff() const {
  return m_rolebuff_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ClientBuffs >*
GM_ClientAllBuffs::mutable_m_rolebuff() {
  return &m_rolebuff_;
}

// -------------------------------------------------------------------

// GM_EntryInfo_Single

// required .GM_RoleBaseInfo m_RoleData = 1;
inline bool GM_EntryInfo_Single::has_m_roledata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_EntryInfo_Single::set_has_m_roledata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_EntryInfo_Single::clear_has_m_roledata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_EntryInfo_Single::clear_m_roledata() {
  if (m_roledata_ != NULL) m_roledata_->::GM_RoleBaseInfo::Clear();
  clear_has_m_roledata();
}
inline const ::GM_RoleBaseInfo& GM_EntryInfo_Single::m_roledata() const {
  return m_roledata_ != NULL ? *m_roledata_ : *default_instance_->m_roledata_;
}
inline ::GM_RoleBaseInfo* GM_EntryInfo_Single::mutable_m_roledata() {
  set_has_m_roledata();
  if (m_roledata_ == NULL) m_roledata_ = new ::GM_RoleBaseInfo;
  return m_roledata_;
}
inline ::GM_RoleBaseInfo* GM_EntryInfo_Single::release_m_roledata() {
  clear_has_m_roledata();
  ::GM_RoleBaseInfo* temp = m_roledata_;
  m_roledata_ = NULL;
  return temp;
}
inline void GM_EntryInfo_Single::set_allocated_m_roledata(::GM_RoleBaseInfo* m_roledata) {
  delete m_roledata_;
  m_roledata_ = m_roledata;
  if (m_roledata) {
    set_has_m_roledata();
  } else {
    clear_has_m_roledata();
  }
}

// optional int32 m_isReady = 2;
inline bool GM_EntryInfo_Single::has_m_isready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_EntryInfo_Single::set_has_m_isready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_EntryInfo_Single::clear_has_m_isready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_EntryInfo_Single::clear_m_isready() {
  m_isready_ = 0;
  clear_has_m_isready();
}
inline ::google::protobuf::int32 GM_EntryInfo_Single::m_isready() const {
  return m_isready_;
}
inline void GM_EntryInfo_Single::set_m_isready(::google::protobuf::int32 value) {
  set_has_m_isready();
  m_isready_ = value;
}

// optional int32 m_totalScore = 3;
inline bool GM_EntryInfo_Single::has_m_totalscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_EntryInfo_Single::set_has_m_totalscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_EntryInfo_Single::clear_has_m_totalscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_EntryInfo_Single::clear_m_totalscore() {
  m_totalscore_ = 0;
  clear_has_m_totalscore();
}
inline ::google::protobuf::int32 GM_EntryInfo_Single::m_totalscore() const {
  return m_totalscore_;
}
inline void GM_EntryInfo_Single::set_m_totalscore(::google::protobuf::int32 value) {
  set_has_m_totalscore();
  m_totalscore_ = value;
}

// optional double m_Longitude = 4;
inline bool GM_EntryInfo_Single::has_m_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_EntryInfo_Single::set_has_m_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_EntryInfo_Single::clear_has_m_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_EntryInfo_Single::clear_m_longitude() {
  m_longitude_ = 0;
  clear_has_m_longitude();
}
inline double GM_EntryInfo_Single::m_longitude() const {
  return m_longitude_;
}
inline void GM_EntryInfo_Single::set_m_longitude(double value) {
  set_has_m_longitude();
  m_longitude_ = value;
}

// optional double m_Latitude = 5;
inline bool GM_EntryInfo_Single::has_m_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_EntryInfo_Single::set_has_m_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_EntryInfo_Single::clear_has_m_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_EntryInfo_Single::clear_m_latitude() {
  m_latitude_ = 0;
  clear_has_m_latitude();
}
inline double GM_EntryInfo_Single::m_latitude() const {
  return m_latitude_;
}
inline void GM_EntryInfo_Single::set_m_latitude(double value) {
  set_has_m_latitude();
  m_latitude_ = value;
}

// optional string m_reallyPos = 6;
inline bool GM_EntryInfo_Single::has_m_reallypos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_EntryInfo_Single::set_has_m_reallypos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_EntryInfo_Single::clear_has_m_reallypos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_EntryInfo_Single::clear_m_reallypos() {
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    m_reallypos_->clear();
  }
  clear_has_m_reallypos();
}
inline const ::std::string& GM_EntryInfo_Single::m_reallypos() const {
  return *m_reallypos_;
}
inline void GM_EntryInfo_Single::set_m_reallypos(const ::std::string& value) {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  m_reallypos_->assign(value);
}
inline void GM_EntryInfo_Single::set_m_reallypos(const char* value) {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  m_reallypos_->assign(value);
}
inline void GM_EntryInfo_Single::set_m_reallypos(const char* value, size_t size) {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  m_reallypos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_EntryInfo_Single::mutable_m_reallypos() {
  set_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    m_reallypos_ = new ::std::string;
  }
  return m_reallypos_;
}
inline ::std::string* GM_EntryInfo_Single::release_m_reallypos() {
  clear_has_m_reallypos();
  if (m_reallypos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_reallypos_;
    m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_EntryInfo_Single::set_allocated_m_reallypos(::std::string* m_reallypos) {
  if (m_reallypos_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reallypos_;
  }
  if (m_reallypos) {
    set_has_m_reallypos();
    m_reallypos_ = m_reallypos;
  } else {
    clear_has_m_reallypos();
    m_reallypos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_EnterSceneInfo

// repeated .GM_EntryInfo_Single entryInfo = 1;
inline int GM_EnterSceneInfo::entryinfo_size() const {
  return entryinfo_.size();
}
inline void GM_EnterSceneInfo::clear_entryinfo() {
  entryinfo_.Clear();
}
inline const ::GM_EntryInfo_Single& GM_EnterSceneInfo::entryinfo(int index) const {
  return entryinfo_.Get(index);
}
inline ::GM_EntryInfo_Single* GM_EnterSceneInfo::mutable_entryinfo(int index) {
  return entryinfo_.Mutable(index);
}
inline ::GM_EntryInfo_Single* GM_EnterSceneInfo::add_entryinfo() {
  return entryinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >&
GM_EnterSceneInfo::entryinfo() const {
  return entryinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >*
GM_EnterSceneInfo::mutable_entryinfo() {
  return &entryinfo_;
}

// -------------------------------------------------------------------

// GM_FullRoleInfo

// required int32 id = 1;
inline bool GM_FullRoleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_FullRoleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_FullRoleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_FullRoleInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::id() const {
  return id_;
}
inline void GM_FullRoleInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool GM_FullRoleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_FullRoleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_FullRoleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_FullRoleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_FullRoleInfo::name() const {
  return *name_;
}
inline void GM_FullRoleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_FullRoleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_FullRoleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_FullRoleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_FullRoleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_FullRoleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 accountid = 3;
inline bool GM_FullRoleInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_FullRoleInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_FullRoleInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_FullRoleInfo::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::accountid() const {
  return accountid_;
}
inline void GM_FullRoleInfo::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional int32 sex = 4;
inline bool GM_FullRoleInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_FullRoleInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_FullRoleInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_FullRoleInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::sex() const {
  return sex_;
}
inline void GM_FullRoleInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 level = 5;
inline bool GM_FullRoleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_FullRoleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_FullRoleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_FullRoleInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::level() const {
  return level_;
}
inline void GM_FullRoleInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string sign = 6;
inline bool GM_FullRoleInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_FullRoleInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_FullRoleInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_FullRoleInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& GM_FullRoleInfo::sign() const {
  return *sign_;
}
inline void GM_FullRoleInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void GM_FullRoleInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void GM_FullRoleInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_FullRoleInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* GM_FullRoleInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_FullRoleInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 headpotot = 7;
inline bool GM_FullRoleInfo::has_headpotot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_FullRoleInfo::set_has_headpotot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_FullRoleInfo::clear_has_headpotot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_FullRoleInfo::clear_headpotot() {
  headpotot_ = 0;
  clear_has_headpotot();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::headpotot() const {
  return headpotot_;
}
inline void GM_FullRoleInfo::set_headpotot(::google::protobuf::int32 value) {
  set_has_headpotot();
  headpotot_ = value;
}

// optional int32 viplv = 9;
inline bool GM_FullRoleInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_FullRoleInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_FullRoleInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_FullRoleInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::viplv() const {
  return viplv_;
}
inline void GM_FullRoleInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional int64 gold = 10;
inline bool GM_FullRoleInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_FullRoleInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_FullRoleInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_FullRoleInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 GM_FullRoleInfo::gold() const {
  return gold_;
}
inline void GM_FullRoleInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 diamond = 11;
inline bool GM_FullRoleInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_FullRoleInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_FullRoleInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_FullRoleInfo::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 GM_FullRoleInfo::diamond() const {
  return diamond_;
}
inline void GM_FullRoleInfo::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 roomcard = 12;
inline bool GM_FullRoleInfo::has_roomcard() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_FullRoleInfo::set_has_roomcard() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_FullRoleInfo::clear_has_roomcard() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_FullRoleInfo::clear_roomcard() {
  roomcard_ = GOOGLE_LONGLONG(0);
  clear_has_roomcard();
}
inline ::google::protobuf::int64 GM_FullRoleInfo::roomcard() const {
  return roomcard_;
}
inline void GM_FullRoleInfo::set_roomcard(::google::protobuf::int64 value) {
  set_has_roomcard();
  roomcard_ = value;
}

// optional int32 mjAllNum = 13;
inline bool GM_FullRoleInfo::has_mjallnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_FullRoleInfo::set_has_mjallnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_FullRoleInfo::clear_has_mjallnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_FullRoleInfo::clear_mjallnum() {
  mjallnum_ = 0;
  clear_has_mjallnum();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::mjallnum() const {
  return mjallnum_;
}
inline void GM_FullRoleInfo::set_mjallnum(::google::protobuf::int32 value) {
  set_has_mjallnum();
  mjallnum_ = value;
}

// optional int32 mjWinNum = 14;
inline bool GM_FullRoleInfo::has_mjwinnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GM_FullRoleInfo::set_has_mjwinnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GM_FullRoleInfo::clear_has_mjwinnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GM_FullRoleInfo::clear_mjwinnum() {
  mjwinnum_ = 0;
  clear_has_mjwinnum();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::mjwinnum() const {
  return mjwinnum_;
}
inline void GM_FullRoleInfo::set_mjwinnum(::google::protobuf::int32 value) {
  set_has_mjwinnum();
  mjwinnum_ = value;
}

// optional int32 zjhAllNum = 15;
inline bool GM_FullRoleInfo::has_zjhallnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GM_FullRoleInfo::set_has_zjhallnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GM_FullRoleInfo::clear_has_zjhallnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GM_FullRoleInfo::clear_zjhallnum() {
  zjhallnum_ = 0;
  clear_has_zjhallnum();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::zjhallnum() const {
  return zjhallnum_;
}
inline void GM_FullRoleInfo::set_zjhallnum(::google::protobuf::int32 value) {
  set_has_zjhallnum();
  zjhallnum_ = value;
}

// optional int32 zjhWinNum = 16;
inline bool GM_FullRoleInfo::has_zjhwinnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GM_FullRoleInfo::set_has_zjhwinnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GM_FullRoleInfo::clear_has_zjhwinnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GM_FullRoleInfo::clear_zjhwinnum() {
  zjhwinnum_ = 0;
  clear_has_zjhwinnum();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::zjhwinnum() const {
  return zjhwinnum_;
}
inline void GM_FullRoleInfo::set_zjhwinnum(::google::protobuf::int32 value) {
  set_has_zjhwinnum();
  zjhwinnum_ = value;
}

// optional int64 fishGet = 17;
inline bool GM_FullRoleInfo::has_fishget() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GM_FullRoleInfo::set_has_fishget() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GM_FullRoleInfo::clear_has_fishget() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GM_FullRoleInfo::clear_fishget() {
  fishget_ = GOOGLE_LONGLONG(0);
  clear_has_fishget();
}
inline ::google::protobuf::int64 GM_FullRoleInfo::fishget() const {
  return fishget_;
}
inline void GM_FullRoleInfo::set_fishget(::google::protobuf::int64 value) {
  set_has_fishget();
  fishget_ = value;
}

// optional int64 fruitGet = 18;
inline bool GM_FullRoleInfo::has_fruitget() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GM_FullRoleInfo::set_has_fruitget() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GM_FullRoleInfo::clear_has_fruitget() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GM_FullRoleInfo::clear_fruitget() {
  fruitget_ = GOOGLE_LONGLONG(0);
  clear_has_fruitget();
}
inline ::google::protobuf::int64 GM_FullRoleInfo::fruitget() const {
  return fruitget_;
}
inline void GM_FullRoleInfo::set_fruitget(::google::protobuf::int64 value) {
  set_has_fruitget();
  fruitget_ = value;
}

// optional int32 headframe = 19;
inline bool GM_FullRoleInfo::has_headframe() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GM_FullRoleInfo::set_has_headframe() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GM_FullRoleInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GM_FullRoleInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 GM_FullRoleInfo::headframe() const {
  return headframe_;
}
inline void GM_FullRoleInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional string nickName = 20;
inline bool GM_FullRoleInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GM_FullRoleInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GM_FullRoleInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GM_FullRoleInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& GM_FullRoleInfo::nickname() const {
  return *nickname_;
}
inline void GM_FullRoleInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GM_FullRoleInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GM_FullRoleInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_FullRoleInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* GM_FullRoleInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_FullRoleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string headPhotoUrl = 21;
inline bool GM_FullRoleInfo::has_headphotourl() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GM_FullRoleInfo::set_has_headphotourl() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GM_FullRoleInfo::clear_has_headphotourl() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GM_FullRoleInfo::clear_headphotourl() {
  if (headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    headphotourl_->clear();
  }
  clear_has_headphotourl();
}
inline const ::std::string& GM_FullRoleInfo::headphotourl() const {
  return *headphotourl_;
}
inline void GM_FullRoleInfo::set_headphotourl(const ::std::string& value) {
  set_has_headphotourl();
  if (headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    headphotourl_ = new ::std::string;
  }
  headphotourl_->assign(value);
}
inline void GM_FullRoleInfo::set_headphotourl(const char* value) {
  set_has_headphotourl();
  if (headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    headphotourl_ = new ::std::string;
  }
  headphotourl_->assign(value);
}
inline void GM_FullRoleInfo::set_headphotourl(const char* value, size_t size) {
  set_has_headphotourl();
  if (headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    headphotourl_ = new ::std::string;
  }
  headphotourl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_FullRoleInfo::mutable_headphotourl() {
  set_has_headphotourl();
  if (headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    headphotourl_ = new ::std::string;
  }
  return headphotourl_;
}
inline ::std::string* GM_FullRoleInfo::release_headphotourl() {
  clear_has_headphotourl();
  if (headphotourl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headphotourl_;
    headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_FullRoleInfo::set_allocated_headphotourl(::std::string* headphotourl) {
  if (headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete headphotourl_;
  }
  if (headphotourl) {
    set_has_headphotourl();
    headphotourl_ = headphotourl;
  } else {
    clear_has_headphotourl();
    headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_SendReady

// required int32 m_Resutl = 1;
inline bool GM_SendReady::has_m_resutl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_SendReady::set_has_m_resutl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_SendReady::clear_has_m_resutl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_SendReady::clear_m_resutl() {
  m_resutl_ = 0;
  clear_has_m_resutl();
}
inline ::google::protobuf::int32 GM_SendReady::m_resutl() const {
  return m_resutl_;
}
inline void GM_SendReady::set_m_resutl(::google::protobuf::int32 value) {
  set_has_m_resutl();
  m_resutl_ = value;
}

// optional int32 m_RoleID = 2;
inline bool GM_SendReady::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_SendReady::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_SendReady::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_SendReady::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_SendReady::m_roleid() const {
  return m_roleid_;
}
inline void GM_SendReady::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_FBID = 3;
inline bool GM_SendReady::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_SendReady::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_SendReady::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_SendReady::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_SendReady::m_fbid() const {
  return m_fbid_;
}
inline void GM_SendReady::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// -------------------------------------------------------------------

// GM_NotifyBattleEndTime

// required int32 m_EndTime = 1;
inline bool GM_NotifyBattleEndTime::has_m_endtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_NotifyBattleEndTime::set_has_m_endtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_NotifyBattleEndTime::clear_has_m_endtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_NotifyBattleEndTime::clear_m_endtime() {
  m_endtime_ = 0;
  clear_has_m_endtime();
}
inline ::google::protobuf::int32 GM_NotifyBattleEndTime::m_endtime() const {
  return m_endtime_;
}
inline void GM_NotifyBattleEndTime::set_m_endtime(::google::protobuf::int32 value) {
  set_has_m_endtime();
  m_endtime_ = value;
}

// -------------------------------------------------------------------

// GM_ActiveBigWave

// required int32 m_FBID = 1;
inline bool GM_ActiveBigWave::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ActiveBigWave::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ActiveBigWave::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ActiveBigWave::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_ActiveBigWave::m_fbid() const {
  return m_fbid_;
}
inline void GM_ActiveBigWave::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional int32 m_BigWave = 2;
inline bool GM_ActiveBigWave::has_m_bigwave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ActiveBigWave::set_has_m_bigwave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ActiveBigWave::clear_has_m_bigwave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ActiveBigWave::clear_m_bigwave() {
  m_bigwave_ = 0;
  clear_has_m_bigwave();
}
inline ::google::protobuf::int32 GM_ActiveBigWave::m_bigwave() const {
  return m_bigwave_;
}
inline void GM_ActiveBigWave::set_m_bigwave(::google::protobuf::int32 value) {
  set_has_m_bigwave();
  m_bigwave_ = value;
}

// -------------------------------------------------------------------

// GM_ActiveMonster

// required int32 m_resutl = 1;
inline bool GM_ActiveMonster::has_m_resutl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ActiveMonster::set_has_m_resutl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ActiveMonster::clear_has_m_resutl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ActiveMonster::clear_m_resutl() {
  m_resutl_ = 0;
  clear_has_m_resutl();
}
inline ::google::protobuf::int32 GM_ActiveMonster::m_resutl() const {
  return m_resutl_;
}
inline void GM_ActiveMonster::set_m_resutl(::google::protobuf::int32 value) {
  set_has_m_resutl();
  m_resutl_ = value;
}

// repeated int32 monsterID = 2;
inline int GM_ActiveMonster::monsterid_size() const {
  return monsterid_.size();
}
inline void GM_ActiveMonster::clear_monsterid() {
  monsterid_.Clear();
}
inline ::google::protobuf::int32 GM_ActiveMonster::monsterid(int index) const {
  return monsterid_.Get(index);
}
inline void GM_ActiveMonster::set_monsterid(int index, ::google::protobuf::int32 value) {
  monsterid_.Set(index, value);
}
inline void GM_ActiveMonster::add_monsterid(::google::protobuf::int32 value) {
  monsterid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GM_ActiveMonster::monsterid() const {
  return monsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GM_ActiveMonster::mutable_monsterid() {
  return &monsterid_;
}

// -------------------------------------------------------------------

// GM_ClientNotifyDied

// required int32 m_BattleObjectID = 1;
inline bool GM_ClientNotifyDied::has_m_battleobjectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ClientNotifyDied::set_has_m_battleobjectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ClientNotifyDied::clear_has_m_battleobjectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ClientNotifyDied::clear_m_battleobjectid() {
  m_battleobjectid_ = 0;
  clear_has_m_battleobjectid();
}
inline ::google::protobuf::int32 GM_ClientNotifyDied::m_battleobjectid() const {
  return m_battleobjectid_;
}
inline void GM_ClientNotifyDied::set_m_battleobjectid(::google::protobuf::int32 value) {
  set_has_m_battleobjectid();
  m_battleobjectid_ = value;
}

// optional int32 m_AttackObjectID = 2;
inline bool GM_ClientNotifyDied::has_m_attackobjectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ClientNotifyDied::set_has_m_attackobjectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ClientNotifyDied::clear_has_m_attackobjectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ClientNotifyDied::clear_m_attackobjectid() {
  m_attackobjectid_ = 0;
  clear_has_m_attackobjectid();
}
inline ::google::protobuf::int32 GM_ClientNotifyDied::m_attackobjectid() const {
  return m_attackobjectid_;
}
inline void GM_ClientNotifyDied::set_m_attackobjectid(::google::protobuf::int32 value) {
  set_has_m_attackobjectid();
  m_attackobjectid_ = value;
}

// -------------------------------------------------------------------

// GM_BattleInfo_Result

// required int32 m_Result = 1;
inline bool GM_BattleInfo_Result::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_BattleInfo_Result::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_BattleInfo_Result::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_result() const {
  return m_result_;
}
inline void GM_BattleInfo_Result::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional string m_name = 2;
inline bool GM_BattleInfo_Result::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_BattleInfo_Result::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_BattleInfo_Result::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& GM_BattleInfo_Result::m_name() const {
  return *m_name_;
}
inline void GM_BattleInfo_Result::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GM_BattleInfo_Result::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void GM_BattleInfo_Result::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_BattleInfo_Result::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* GM_BattleInfo_Result::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_BattleInfo_Result::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_level = 3;
inline bool GM_BattleInfo_Result::has_m_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_BattleInfo_Result::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_BattleInfo_Result::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_level() const {
  return m_level_;
}
inline void GM_BattleInfo_Result::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_val = 4;
inline bool GM_BattleInfo_Result::has_m_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_BattleInfo_Result::clear_has_m_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_BattleInfo_Result::clear_m_val() {
  m_val_ = 0;
  clear_has_m_val();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_val() const {
  return m_val_;
}
inline void GM_BattleInfo_Result::set_m_val(::google::protobuf::int32 value) {
  set_has_m_val();
  m_val_ = value;
}

// optional int32 m_killnum = 5;
inline bool GM_BattleInfo_Result::has_m_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_BattleInfo_Result::clear_has_m_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_BattleInfo_Result::clear_m_killnum() {
  m_killnum_ = 0;
  clear_has_m_killnum();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_killnum() const {
  return m_killnum_;
}
inline void GM_BattleInfo_Result::set_m_killnum(::google::protobuf::int32 value) {
  set_has_m_killnum();
  m_killnum_ = value;
}

// optional int32 m_deadnum = 6;
inline bool GM_BattleInfo_Result::has_m_deadnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_deadnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_BattleInfo_Result::clear_has_m_deadnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_BattleInfo_Result::clear_m_deadnum() {
  m_deadnum_ = 0;
  clear_has_m_deadnum();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_deadnum() const {
  return m_deadnum_;
}
inline void GM_BattleInfo_Result::set_m_deadnum(::google::protobuf::int32 value) {
  set_has_m_deadnum();
  m_deadnum_ = value;
}

// optional int32 m_hurt = 7;
inline bool GM_BattleInfo_Result::has_m_hurt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_hurt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_BattleInfo_Result::clear_has_m_hurt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_BattleInfo_Result::clear_m_hurt() {
  m_hurt_ = 0;
  clear_has_m_hurt();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_hurt() const {
  return m_hurt_;
}
inline void GM_BattleInfo_Result::set_m_hurt(::google::protobuf::int32 value) {
  set_has_m_hurt();
  m_hurt_ = value;
}

// optional int32 m_RoleID = 8;
inline bool GM_BattleInfo_Result::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_BattleInfo_Result::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_BattleInfo_Result::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_roleid() const {
  return m_roleid_;
}
inline void GM_BattleInfo_Result::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_point = 9;
inline bool GM_BattleInfo_Result::has_m_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_BattleInfo_Result::clear_has_m_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_BattleInfo_Result::clear_m_point() {
  m_point_ = 0;
  clear_has_m_point();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_point() const {
  return m_point_;
}
inline void GM_BattleInfo_Result::set_m_point(::google::protobuf::int32 value) {
  set_has_m_point();
  m_point_ = value;
}

// optional string m_parentName = 10;
inline bool GM_BattleInfo_Result::has_m_parentname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_parentname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_BattleInfo_Result::clear_has_m_parentname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_BattleInfo_Result::clear_m_parentname() {
  if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
    m_parentname_->clear();
  }
  clear_has_m_parentname();
}
inline const ::std::string& GM_BattleInfo_Result::m_parentname() const {
  return *m_parentname_;
}
inline void GM_BattleInfo_Result::set_m_parentname(const ::std::string& value) {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  m_parentname_->assign(value);
}
inline void GM_BattleInfo_Result::set_m_parentname(const char* value) {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  m_parentname_->assign(value);
}
inline void GM_BattleInfo_Result::set_m_parentname(const char* value, size_t size) {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  m_parentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_BattleInfo_Result::mutable_m_parentname() {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  return m_parentname_;
}
inline ::std::string* GM_BattleInfo_Result::release_m_parentname() {
  clear_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_parentname_;
    m_parentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_BattleInfo_Result::set_allocated_m_parentname(::std::string* m_parentname) {
  if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parentname_;
  }
  if (m_parentname) {
    set_has_m_parentname();
    m_parentname_ = m_parentname;
  } else {
    clear_has_m_parentname();
    m_parentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_toprank = 11;
inline bool GM_BattleInfo_Result::has_m_toprank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_toprank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_BattleInfo_Result::clear_has_m_toprank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_BattleInfo_Result::clear_m_toprank() {
  m_toprank_ = 0;
  clear_has_m_toprank();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_toprank() const {
  return m_toprank_;
}
inline void GM_BattleInfo_Result::set_m_toprank(::google::protobuf::int32 value) {
  set_has_m_toprank();
  m_toprank_ = value;
}

// optional int32 m_areanid = 12;
inline bool GM_BattleInfo_Result::has_m_areanid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_areanid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_BattleInfo_Result::clear_has_m_areanid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_BattleInfo_Result::clear_m_areanid() {
  m_areanid_ = 0;
  clear_has_m_areanid();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_areanid() const {
  return m_areanid_;
}
inline void GM_BattleInfo_Result::set_m_areanid(::google::protobuf::int32 value) {
  set_has_m_areanid();
  m_areanid_ = value;
}

// optional int32 m_percentage = 13;
inline bool GM_BattleInfo_Result::has_m_percentage() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GM_BattleInfo_Result::set_has_m_percentage() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GM_BattleInfo_Result::clear_has_m_percentage() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GM_BattleInfo_Result::clear_m_percentage() {
  m_percentage_ = 0;
  clear_has_m_percentage();
}
inline ::google::protobuf::int32 GM_BattleInfo_Result::m_percentage() const {
  return m_percentage_;
}
inline void GM_BattleInfo_Result::set_m_percentage(::google::protobuf::int32 value) {
  set_has_m_percentage();
  m_percentage_ = value;
}

// -------------------------------------------------------------------

// GM_BattleResult

// required int32 m_Result = 1;
inline bool GM_BattleResult::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_BattleResult::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_BattleResult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_BattleResult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_BattleResult::m_result() const {
  return m_result_;
}
inline void GM_BattleResult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 m_BattleType = 2;
inline bool GM_BattleResult::has_m_battletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_BattleResult::set_has_m_battletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_BattleResult::clear_has_m_battletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_BattleResult::clear_m_battletype() {
  m_battletype_ = 0;
  clear_has_m_battletype();
}
inline ::google::protobuf::int32 GM_BattleResult::m_battletype() const {
  return m_battletype_;
}
inline void GM_BattleResult::set_m_battletype(::google::protobuf::int32 value) {
  set_has_m_battletype();
  m_battletype_ = value;
}

// optional int32 m_FBTypeID = 3;
inline bool GM_BattleResult::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_BattleResult::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_BattleResult::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_BattleResult::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 GM_BattleResult::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void GM_BattleResult::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 m_UseTime = 4;
inline bool GM_BattleResult::has_m_usetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_BattleResult::set_has_m_usetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_BattleResult::clear_has_m_usetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_BattleResult::clear_m_usetime() {
  m_usetime_ = 0;
  clear_has_m_usetime();
}
inline ::google::protobuf::int32 GM_BattleResult::m_usetime() const {
  return m_usetime_;
}
inline void GM_BattleResult::set_m_usetime(::google::protobuf::int32 value) {
  set_has_m_usetime();
  m_usetime_ = value;
}

// optional int32 m_StarNum = 5;
inline bool GM_BattleResult::has_m_starnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_BattleResult::set_has_m_starnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_BattleResult::clear_has_m_starnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_BattleResult::clear_m_starnum() {
  m_starnum_ = 0;
  clear_has_m_starnum();
}
inline ::google::protobuf::int32 GM_BattleResult::m_starnum() const {
  return m_starnum_;
}
inline void GM_BattleResult::set_m_starnum(::google::protobuf::int32 value) {
  set_has_m_starnum();
  m_starnum_ = value;
}

// optional int32 m_laterRank = 7;
inline bool GM_BattleResult::has_m_laterrank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_BattleResult::set_has_m_laterrank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_BattleResult::clear_has_m_laterrank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_BattleResult::clear_m_laterrank() {
  m_laterrank_ = 0;
  clear_has_m_laterrank();
}
inline ::google::protobuf::int32 GM_BattleResult::m_laterrank() const {
  return m_laterrank_;
}
inline void GM_BattleResult::set_m_laterrank(::google::protobuf::int32 value) {
  set_has_m_laterrank();
  m_laterrank_ = value;
}

// optional int32 m_arenaPres = 8;
inline bool GM_BattleResult::has_m_arenapres() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_BattleResult::set_has_m_arenapres() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_BattleResult::clear_has_m_arenapres() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_BattleResult::clear_m_arenapres() {
  m_arenapres_ = 0;
  clear_has_m_arenapres();
}
inline ::google::protobuf::int32 GM_BattleResult::m_arenapres() const {
  return m_arenapres_;
}
inline void GM_BattleResult::set_m_arenapres(::google::protobuf::int32 value) {
  set_has_m_arenapres();
  m_arenapres_ = value;
}

// optional int32 m_topscore = 10;
inline bool GM_BattleResult::has_m_topscore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_BattleResult::set_has_m_topscore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_BattleResult::clear_has_m_topscore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_BattleResult::clear_m_topscore() {
  m_topscore_ = 0;
  clear_has_m_topscore();
}
inline ::google::protobuf::int32 GM_BattleResult::m_topscore() const {
  return m_topscore_;
}
inline void GM_BattleResult::set_m_topscore(::google::protobuf::int32 value) {
  set_has_m_topscore();
  m_topscore_ = value;
}

// optional int32 m_errorcode = 11;
inline bool GM_BattleResult::has_m_errorcode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_BattleResult::set_has_m_errorcode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_BattleResult::clear_has_m_errorcode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_BattleResult::clear_m_errorcode() {
  m_errorcode_ = 0;
  clear_has_m_errorcode();
}
inline ::google::protobuf::int32 GM_BattleResult::m_errorcode() const {
  return m_errorcode_;
}
inline void GM_BattleResult::set_m_errorcode(::google::protobuf::int32 value) {
  set_has_m_errorcode();
  m_errorcode_ = value;
}

// optional bool m_isDoubleActivity = 12;
inline bool GM_BattleResult::has_m_isdoubleactivity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_BattleResult::set_has_m_isdoubleactivity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_BattleResult::clear_has_m_isdoubleactivity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_BattleResult::clear_m_isdoubleactivity() {
  m_isdoubleactivity_ = false;
  clear_has_m_isdoubleactivity();
}
inline bool GM_BattleResult::m_isdoubleactivity() const {
  return m_isdoubleactivity_;
}
inline void GM_BattleResult::set_m_isdoubleactivity(bool value) {
  set_has_m_isdoubleactivity();
  m_isdoubleactivity_ = value;
}

// repeated .GM_BattleInfo_Result m_BattleData = 9;
inline int GM_BattleResult::m_battledata_size() const {
  return m_battledata_.size();
}
inline void GM_BattleResult::clear_m_battledata() {
  m_battledata_.Clear();
}
inline const ::GM_BattleInfo_Result& GM_BattleResult::m_battledata(int index) const {
  return m_battledata_.Get(index);
}
inline ::GM_BattleInfo_Result* GM_BattleResult::mutable_m_battledata(int index) {
  return m_battledata_.Mutable(index);
}
inline ::GM_BattleInfo_Result* GM_BattleResult::add_m_battledata() {
  return m_battledata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_BattleInfo_Result >&
GM_BattleResult::m_battledata() const {
  return m_battledata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_BattleInfo_Result >*
GM_BattleResult::mutable_m_battledata() {
  return &m_battledata_;
}

// repeated .GM_ItemDrop m_DropData = 6;
inline int GM_BattleResult::m_dropdata_size() const {
  return m_dropdata_.size();
}
inline void GM_BattleResult::clear_m_dropdata() {
  m_dropdata_.Clear();
}
inline const ::GM_ItemDrop& GM_BattleResult::m_dropdata(int index) const {
  return m_dropdata_.Get(index);
}
inline ::GM_ItemDrop* GM_BattleResult::mutable_m_dropdata(int index) {
  return m_dropdata_.Mutable(index);
}
inline ::GM_ItemDrop* GM_BattleResult::add_m_dropdata() {
  return m_dropdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
GM_BattleResult::m_dropdata() const {
  return m_dropdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
GM_BattleResult::mutable_m_dropdata() {
  return &m_dropdata_;
}

// -------------------------------------------------------------------

// SM_BattleRequest

// required int32 m_FBID = 1;
inline bool SM_BattleRequest::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_BattleRequest::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_BattleRequest::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_BattleRequest::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 SM_BattleRequest::m_fbid() const {
  return m_fbid_;
}
inline void SM_BattleRequest::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional int32 m_FBTypeID = 2;
inline bool SM_BattleRequest::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_BattleRequest::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_BattleRequest::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_BattleRequest::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 SM_BattleRequest::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void SM_BattleRequest::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 rate = 3;
inline bool SM_BattleRequest::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_BattleRequest::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_BattleRequest::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_BattleRequest::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 SM_BattleRequest::rate() const {
  return rate_;
}
inline void SM_BattleRequest::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional int32 m_increMatchid = 4;
inline bool SM_BattleRequest::has_m_incrematchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_BattleRequest::set_has_m_incrematchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_BattleRequest::clear_has_m_incrematchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_BattleRequest::clear_m_incrematchid() {
  m_incrematchid_ = 0;
  clear_has_m_incrematchid();
}
inline ::google::protobuf::int32 SM_BattleRequest::m_incrematchid() const {
  return m_incrematchid_;
}
inline void SM_BattleRequest::set_m_incrematchid(::google::protobuf::int32 value) {
  set_has_m_incrematchid();
  m_incrematchid_ = value;
}

// optional int32 m_copyAILevel = 5;
inline bool SM_BattleRequest::has_m_copyailevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_BattleRequest::set_has_m_copyailevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_BattleRequest::clear_has_m_copyailevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_BattleRequest::clear_m_copyailevel() {
  m_copyailevel_ = 0;
  clear_has_m_copyailevel();
}
inline ::google::protobuf::int32 SM_BattleRequest::m_copyailevel() const {
  return m_copyailevel_;
}
inline void SM_BattleRequest::set_m_copyailevel(::google::protobuf::int32 value) {
  set_has_m_copyailevel();
  m_copyailevel_ = value;
}

// optional string m_FBPlayWay = 6;
inline bool SM_BattleRequest::has_m_fbplayway() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_BattleRequest::set_has_m_fbplayway() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_BattleRequest::clear_has_m_fbplayway() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_BattleRequest::clear_m_fbplayway() {
  if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
    m_fbplayway_->clear();
  }
  clear_has_m_fbplayway();
}
inline const ::std::string& SM_BattleRequest::m_fbplayway() const {
  return *m_fbplayway_;
}
inline void SM_BattleRequest::set_m_fbplayway(const ::std::string& value) {
  set_has_m_fbplayway();
  if (m_fbplayway_ == &::google::protobuf::internal::kEmptyString) {
    m_fbplayway_ = new ::std::string;
  }
  m_fbplayway_->assign(value);
}
inline void SM_BattleRequest::set_m_fbplayway(const char* value) {
  set_has_m_fbplayway();
  if (m_fbplayway_ == &::google::protobuf::internal::kEmptyString) {
    m_fbplayway_ = new ::std::string;
  }
  m_fbplayway_->assign(value);
}
inline void SM_BattleRequest::set_m_fbplayway(const char* value, size_t size) {
  set_has_m_fbplayway();
  if (m_fbplayway_ == &::google::protobuf::internal::kEmptyString) {
    m_fbplayway_ = new ::std::string;
  }
  m_fbplayway_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_BattleRequest::mutable_m_fbplayway() {
  set_has_m_fbplayway();
  if (m_fbplayway_ == &::google::protobuf::internal::kEmptyString) {
    m_fbplayway_ = new ::std::string;
  }
  return m_fbplayway_;
}
inline ::std::string* SM_BattleRequest::release_m_fbplayway() {
  clear_has_m_fbplayway();
  if (m_fbplayway_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_fbplayway_;
    m_fbplayway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_BattleRequest::set_allocated_m_fbplayway(::std::string* m_fbplayway) {
  if (m_fbplayway_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbplayway_;
  }
  if (m_fbplayway) {
    set_has_m_fbplayway();
    m_fbplayway_ = m_fbplayway;
  } else {
    clear_has_m_fbplayway();
    m_fbplayway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_RoomCount = 7;
inline bool SM_BattleRequest::has_m_roomcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_BattleRequest::set_has_m_roomcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_BattleRequest::clear_has_m_roomcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_BattleRequest::clear_m_roomcount() {
  m_roomcount_ = 0;
  clear_has_m_roomcount();
}
inline ::google::protobuf::int32 SM_BattleRequest::m_roomcount() const {
  return m_roomcount_;
}
inline void SM_BattleRequest::set_m_roomcount(::google::protobuf::int32 value) {
  set_has_m_roomcount();
  m_roomcount_ = value;
}

// optional int32 m_PlayerCount = 8;
inline bool SM_BattleRequest::has_m_playercount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_BattleRequest::set_has_m_playercount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_BattleRequest::clear_has_m_playercount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_BattleRequest::clear_m_playercount() {
  m_playercount_ = 0;
  clear_has_m_playercount();
}
inline ::google::protobuf::int32 SM_BattleRequest::m_playercount() const {
  return m_playercount_;
}
inline void SM_BattleRequest::set_m_playercount(::google::protobuf::int32 value) {
  set_has_m_playercount();
  m_playercount_ = value;
}

// repeated .GM_EntryInfo_Single m_PlayerData = 10;
inline int SM_BattleRequest::m_playerdata_size() const {
  return m_playerdata_.size();
}
inline void SM_BattleRequest::clear_m_playerdata() {
  m_playerdata_.Clear();
}
inline const ::GM_EntryInfo_Single& SM_BattleRequest::m_playerdata(int index) const {
  return m_playerdata_.Get(index);
}
inline ::GM_EntryInfo_Single* SM_BattleRequest::mutable_m_playerdata(int index) {
  return m_playerdata_.Mutable(index);
}
inline ::GM_EntryInfo_Single* SM_BattleRequest::add_m_playerdata() {
  return m_playerdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >&
SM_BattleRequest::m_playerdata() const {
  return m_playerdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_EntryInfo_Single >*
SM_BattleRequest::mutable_m_playerdata() {
  return &m_playerdata_;
}

// repeated .GM_WhiteListInfo m_WhiteListInfo = 11;
inline int SM_BattleRequest::m_whitelistinfo_size() const {
  return m_whitelistinfo_.size();
}
inline void SM_BattleRequest::clear_m_whitelistinfo() {
  m_whitelistinfo_.Clear();
}
inline const ::GM_WhiteListInfo& SM_BattleRequest::m_whitelistinfo(int index) const {
  return m_whitelistinfo_.Get(index);
}
inline ::GM_WhiteListInfo* SM_BattleRequest::mutable_m_whitelistinfo(int index) {
  return m_whitelistinfo_.Mutable(index);
}
inline ::GM_WhiteListInfo* SM_BattleRequest::add_m_whitelistinfo() {
  return m_whitelistinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_WhiteListInfo >&
SM_BattleRequest::m_whitelistinfo() const {
  return m_whitelistinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_WhiteListInfo >*
SM_BattleRequest::mutable_m_whitelistinfo() {
  return &m_whitelistinfo_;
}

// -------------------------------------------------------------------

// GM_WhiteListInfo

// required int32 roleid = 1;
inline bool GM_WhiteListInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_WhiteListInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_WhiteListInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_WhiteListInfo::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_WhiteListInfo::roleid() const {
  return roleid_;
}
inline void GM_WhiteListInfo::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 isSelf = 2;
inline bool GM_WhiteListInfo::has_isself() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_WhiteListInfo::set_has_isself() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_WhiteListInfo::clear_has_isself() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_WhiteListInfo::clear_isself() {
  isself_ = 0;
  clear_has_isself();
}
inline ::google::protobuf::int32 GM_WhiteListInfo::isself() const {
  return isself_;
}
inline void GM_WhiteListInfo::set_isself(::google::protobuf::int32 value) {
  set_has_isself();
  isself_ = value;
}

// optional int32 szMinCount = 3;
inline bool GM_WhiteListInfo::has_szmincount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_WhiteListInfo::set_has_szmincount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_WhiteListInfo::clear_has_szmincount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_WhiteListInfo::clear_szmincount() {
  szmincount_ = 0;
  clear_has_szmincount();
}
inline ::google::protobuf::int32 GM_WhiteListInfo::szmincount() const {
  return szmincount_;
}
inline void GM_WhiteListInfo::set_szmincount(::google::protobuf::int32 value) {
  set_has_szmincount();
  szmincount_ = value;
}

// optional int32 szMaxCount = 4;
inline bool GM_WhiteListInfo::has_szmaxcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_WhiteListInfo::set_has_szmaxcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_WhiteListInfo::clear_has_szmaxcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_WhiteListInfo::clear_szmaxcount() {
  szmaxcount_ = 0;
  clear_has_szmaxcount();
}
inline ::google::protobuf::int32 GM_WhiteListInfo::szmaxcount() const {
  return szmaxcount_;
}
inline void GM_WhiteListInfo::set_szmaxcount(::google::protobuf::int32 value) {
  set_has_szmaxcount();
  szmaxcount_ = value;
}

// optional int32 sfMinCount = 5;
inline bool GM_WhiteListInfo::has_sfmincount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_WhiteListInfo::set_has_sfmincount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_WhiteListInfo::clear_has_sfmincount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_WhiteListInfo::clear_sfmincount() {
  sfmincount_ = 0;
  clear_has_sfmincount();
}
inline ::google::protobuf::int32 GM_WhiteListInfo::sfmincount() const {
  return sfmincount_;
}
inline void GM_WhiteListInfo::set_sfmincount(::google::protobuf::int32 value) {
  set_has_sfmincount();
  sfmincount_ = value;
}

// optional int32 sfMaxCount = 6;
inline bool GM_WhiteListInfo::has_sfmaxcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_WhiteListInfo::set_has_sfmaxcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_WhiteListInfo::clear_has_sfmaxcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_WhiteListInfo::clear_sfmaxcount() {
  sfmaxcount_ = 0;
  clear_has_sfmaxcount();
}
inline ::google::protobuf::int32 GM_WhiteListInfo::sfmaxcount() const {
  return sfmaxcount_;
}
inline void GM_WhiteListInfo::set_sfmaxcount(::google::protobuf::int32 value) {
  set_has_sfmaxcount();
  sfmaxcount_ = value;
}

// -------------------------------------------------------------------

// GM_DrawCardRequest

// required int32 m_CardID = 1;
inline bool GM_DrawCardRequest::has_m_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DrawCardRequest::set_has_m_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DrawCardRequest::clear_has_m_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DrawCardRequest::clear_m_cardid() {
  m_cardid_ = 0;
  clear_has_m_cardid();
}
inline ::google::protobuf::int32 GM_DrawCardRequest::m_cardid() const {
  return m_cardid_;
}
inline void GM_DrawCardRequest::set_m_cardid(::google::protobuf::int32 value) {
  set_has_m_cardid();
  m_cardid_ = value;
}

// optional int32 m_FBID = 2;
inline bool GM_DrawCardRequest::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_DrawCardRequest::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_DrawCardRequest::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_DrawCardRequest::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_DrawCardRequest::m_fbid() const {
  return m_fbid_;
}
inline void GM_DrawCardRequest::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// -------------------------------------------------------------------

// GM_ReplacePet

// required int32 m_roleid = 1;
inline bool GM_ReplacePet::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ReplacePet::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ReplacePet::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ReplacePet::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_ReplacePet::m_roleid() const {
  return m_roleid_;
}
inline void GM_ReplacePet::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_FBID = 2;
inline bool GM_ReplacePet::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ReplacePet::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ReplacePet::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ReplacePet::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_ReplacePet::m_fbid() const {
  return m_fbid_;
}
inline void GM_ReplacePet::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional int32 m_TeamID = 3;
inline bool GM_ReplacePet::has_m_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ReplacePet::set_has_m_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ReplacePet::clear_has_m_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ReplacePet::clear_m_teamid() {
  m_teamid_ = 0;
  clear_has_m_teamid();
}
inline ::google::protobuf::int32 GM_ReplacePet::m_teamid() const {
  return m_teamid_;
}
inline void GM_ReplacePet::set_m_teamid(::google::protobuf::int32 value) {
  set_has_m_teamid();
  m_teamid_ = value;
}

// repeated int32 m_petid = 4;
inline int GM_ReplacePet::m_petid_size() const {
  return m_petid_.size();
}
inline void GM_ReplacePet::clear_m_petid() {
  m_petid_.Clear();
}
inline ::google::protobuf::int32 GM_ReplacePet::m_petid(int index) const {
  return m_petid_.Get(index);
}
inline void GM_ReplacePet::set_m_petid(int index, ::google::protobuf::int32 value) {
  m_petid_.Set(index, value);
}
inline void GM_ReplacePet::add_m_petid(::google::protobuf::int32 value) {
  m_petid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GM_ReplacePet::m_petid() const {
  return m_petid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GM_ReplacePet::mutable_m_petid() {
  return &m_petid_;
}

// repeated int32 m_hp = 5;
inline int GM_ReplacePet::m_hp_size() const {
  return m_hp_.size();
}
inline void GM_ReplacePet::clear_m_hp() {
  m_hp_.Clear();
}
inline ::google::protobuf::int32 GM_ReplacePet::m_hp(int index) const {
  return m_hp_.Get(index);
}
inline void GM_ReplacePet::set_m_hp(int index, ::google::protobuf::int32 value) {
  m_hp_.Set(index, value);
}
inline void GM_ReplacePet::add_m_hp(::google::protobuf::int32 value) {
  m_hp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GM_ReplacePet::m_hp() const {
  return m_hp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GM_ReplacePet::mutable_m_hp() {
  return &m_hp_;
}

// -------------------------------------------------------------------

// GM_DrawCardReturn

// required int32 m_Resul = 1;
inline bool GM_DrawCardReturn::has_m_resul() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DrawCardReturn::set_has_m_resul() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DrawCardReturn::clear_has_m_resul() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DrawCardReturn::clear_m_resul() {
  m_resul_ = 0;
  clear_has_m_resul();
}
inline ::google::protobuf::int32 GM_DrawCardReturn::m_resul() const {
  return m_resul_;
}
inline void GM_DrawCardReturn::set_m_resul(::google::protobuf::int32 value) {
  set_has_m_resul();
  m_resul_ = value;
}

// repeated .GM_ItemDrop m_DropData = 2;
inline int GM_DrawCardReturn::m_dropdata_size() const {
  return m_dropdata_.size();
}
inline void GM_DrawCardReturn::clear_m_dropdata() {
  m_dropdata_.Clear();
}
inline const ::GM_ItemDrop& GM_DrawCardReturn::m_dropdata(int index) const {
  return m_dropdata_.Get(index);
}
inline ::GM_ItemDrop* GM_DrawCardReturn::mutable_m_dropdata(int index) {
  return m_dropdata_.Mutable(index);
}
inline ::GM_ItemDrop* GM_DrawCardReturn::add_m_dropdata() {
  return m_dropdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
GM_DrawCardReturn::m_dropdata() const {
  return m_dropdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
GM_DrawCardReturn::mutable_m_dropdata() {
  return &m_dropdata_;
}

// -------------------------------------------------------------------

// GM_Damage

// required int32 fbid = 1;
inline bool GM_Damage::has_fbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Damage::set_has_fbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Damage::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Damage::clear_fbid() {
  fbid_ = 0;
  clear_has_fbid();
}
inline ::google::protobuf::int32 GM_Damage::fbid() const {
  return fbid_;
}
inline void GM_Damage::set_fbid(::google::protobuf::int32 value) {
  set_has_fbid();
  fbid_ = value;
}

// optional int32 damagerId = 2;
inline bool GM_Damage::has_damagerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Damage::set_has_damagerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Damage::clear_has_damagerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Damage::clear_damagerid() {
  damagerid_ = 0;
  clear_has_damagerid();
}
inline ::google::protobuf::int32 GM_Damage::damagerid() const {
  return damagerid_;
}
inline void GM_Damage::set_damagerid(::google::protobuf::int32 value) {
  set_has_damagerid();
  damagerid_ = value;
}

// optional int32 attackerId = 3;
inline bool GM_Damage::has_attackerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Damage::set_has_attackerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Damage::clear_has_attackerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Damage::clear_attackerid() {
  attackerid_ = 0;
  clear_has_attackerid();
}
inline ::google::protobuf::int32 GM_Damage::attackerid() const {
  return attackerid_;
}
inline void GM_Damage::set_attackerid(::google::protobuf::int32 value) {
  set_has_attackerid();
  attackerid_ = value;
}

// optional int32 damageVal = 4;
inline bool GM_Damage::has_damageval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Damage::set_has_damageval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Damage::clear_has_damageval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Damage::clear_damageval() {
  damageval_ = 0;
  clear_has_damageval();
}
inline ::google::protobuf::int32 GM_Damage::damageval() const {
  return damageval_;
}
inline void GM_Damage::set_damageval(::google::protobuf::int32 value) {
  set_has_damageval();
  damageval_ = value;
}

// optional float vecX = 5;
inline bool GM_Damage::has_vecx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Damage::set_has_vecx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Damage::clear_has_vecx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Damage::clear_vecx() {
  vecx_ = 0;
  clear_has_vecx();
}
inline float GM_Damage::vecx() const {
  return vecx_;
}
inline void GM_Damage::set_vecx(float value) {
  set_has_vecx();
  vecx_ = value;
}

// optional float vecY = 6;
inline bool GM_Damage::has_vecy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Damage::set_has_vecy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Damage::clear_has_vecy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Damage::clear_vecy() {
  vecy_ = 0;
  clear_has_vecy();
}
inline float GM_Damage::vecy() const {
  return vecy_;
}
inline void GM_Damage::set_vecy(float value) {
  set_has_vecy();
  vecy_ = value;
}

// optional float vecZ = 7;
inline bool GM_Damage::has_vecz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Damage::set_has_vecz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Damage::clear_has_vecz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Damage::clear_vecz() {
  vecz_ = 0;
  clear_has_vecz();
}
inline float GM_Damage::vecz() const {
  return vecz_;
}
inline void GM_Damage::set_vecz(float value) {
  set_has_vecz();
  vecz_ = value;
}

// optional int32 damageType = 8;
inline bool GM_Damage::has_damagetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_Damage::set_has_damagetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_Damage::clear_has_damagetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_Damage::clear_damagetype() {
  damagetype_ = 0;
  clear_has_damagetype();
}
inline ::google::protobuf::int32 GM_Damage::damagetype() const {
  return damagetype_;
}
inline void GM_Damage::set_damagetype(::google::protobuf::int32 value) {
  set_has_damagetype();
  damagetype_ = value;
}

// optional bool isDodge = 9;
inline bool GM_Damage::has_isdodge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_Damage::set_has_isdodge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_Damage::clear_has_isdodge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_Damage::clear_isdodge() {
  isdodge_ = false;
  clear_has_isdodge();
}
inline bool GM_Damage::isdodge() const {
  return isdodge_;
}
inline void GM_Damage::set_isdodge(bool value) {
  set_has_isdodge();
  isdodge_ = value;
}

// optional bool isBlock = 10;
inline bool GM_Damage::has_isblock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_Damage::set_has_isblock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_Damage::clear_has_isblock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_Damage::clear_isblock() {
  isblock_ = false;
  clear_has_isblock();
}
inline bool GM_Damage::isblock() const {
  return isblock_;
}
inline void GM_Damage::set_isblock(bool value) {
  set_has_isblock();
  isblock_ = value;
}

// optional bool isCritical = 11;
inline bool GM_Damage::has_iscritical() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_Damage::set_has_iscritical() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_Damage::clear_has_iscritical() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_Damage::clear_iscritical() {
  iscritical_ = false;
  clear_has_iscritical();
}
inline bool GM_Damage::iscritical() const {
  return iscritical_;
}
inline void GM_Damage::set_iscritical(bool value) {
  set_has_iscritical();
  iscritical_ = value;
}

// optional int32 nowtime = 12;
inline bool GM_Damage::has_nowtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_Damage::set_has_nowtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_Damage::clear_has_nowtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_Damage::clear_nowtime() {
  nowtime_ = 0;
  clear_has_nowtime();
}
inline ::google::protobuf::int32 GM_Damage::nowtime() const {
  return nowtime_;
}
inline void GM_Damage::set_nowtime(::google::protobuf::int32 value) {
  set_has_nowtime();
  nowtime_ = value;
}

// optional int32 attackBreakDefense = 13;
inline bool GM_Damage::has_attackbreakdefense() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GM_Damage::set_has_attackbreakdefense() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GM_Damage::clear_has_attackbreakdefense() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GM_Damage::clear_attackbreakdefense() {
  attackbreakdefense_ = 0;
  clear_has_attackbreakdefense();
}
inline ::google::protobuf::int32 GM_Damage::attackbreakdefense() const {
  return attackbreakdefense_;
}
inline void GM_Damage::set_attackbreakdefense(::google::protobuf::int32 value) {
  set_has_attackbreakdefense();
  attackbreakdefense_ = value;
}

// -------------------------------------------------------------------

// GM_NotifyHPMPChange

// required int32 type = 1;
inline bool GM_NotifyHPMPChange::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_NotifyHPMPChange::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_NotifyHPMPChange::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_NotifyHPMPChange::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GM_NotifyHPMPChange::type() const {
  return type_;
}
inline void GM_NotifyHPMPChange::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool GM_NotifyHPMPChange::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_NotifyHPMPChange::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_NotifyHPMPChange::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_NotifyHPMPChange::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 GM_NotifyHPMPChange::value() const {
  return value_;
}
inline void GM_NotifyHPMPChange::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 roleid = 3;
inline bool GM_NotifyHPMPChange::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_NotifyHPMPChange::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_NotifyHPMPChange::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_NotifyHPMPChange::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_NotifyHPMPChange::roleid() const {
  return roleid_;
}
inline void GM_NotifyHPMPChange::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// GM_LeaveBattle

// required int32 roleID = 2;
inline bool GM_LeaveBattle::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_LeaveBattle::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_LeaveBattle::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_LeaveBattle::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_LeaveBattle::roleid() const {
  return roleid_;
}
inline void GM_LeaveBattle::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// GM_RoleLeave

// repeated .GM_LeaveBattle leaveInfo = 1;
inline int GM_RoleLeave::leaveinfo_size() const {
  return leaveinfo_.size();
}
inline void GM_RoleLeave::clear_leaveinfo() {
  leaveinfo_.Clear();
}
inline const ::GM_LeaveBattle& GM_RoleLeave::leaveinfo(int index) const {
  return leaveinfo_.Get(index);
}
inline ::GM_LeaveBattle* GM_RoleLeave::mutable_leaveinfo(int index) {
  return leaveinfo_.Mutable(index);
}
inline ::GM_LeaveBattle* GM_RoleLeave::add_leaveinfo() {
  return leaveinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_LeaveBattle >&
GM_RoleLeave::leaveinfo() const {
  return leaveinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_LeaveBattle >*
GM_RoleLeave::mutable_leaveinfo() {
  return &leaveinfo_;
}

// -------------------------------------------------------------------

// SM_BattleInfo

// required int32 m_RoleID = 1;
inline bool SM_BattleInfo::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_BattleInfo::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_BattleInfo::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_BattleInfo::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_roleid() const {
  return m_roleid_;
}
inline void SM_BattleInfo::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_Camp = 2;
inline bool SM_BattleInfo::has_m_camp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_BattleInfo::set_has_m_camp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_BattleInfo::clear_has_m_camp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_BattleInfo::clear_m_camp() {
  m_camp_ = 0;
  clear_has_m_camp();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_camp() const {
  return m_camp_;
}
inline void SM_BattleInfo::set_m_camp(::google::protobuf::int32 value) {
  set_has_m_camp();
  m_camp_ = value;
}

// optional int32 m_RemainHP = 3;
inline bool SM_BattleInfo::has_m_remainhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_BattleInfo::set_has_m_remainhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_BattleInfo::clear_has_m_remainhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_BattleInfo::clear_m_remainhp() {
  m_remainhp_ = 0;
  clear_has_m_remainhp();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_remainhp() const {
  return m_remainhp_;
}
inline void SM_BattleInfo::set_m_remainhp(::google::protobuf::int32 value) {
  set_has_m_remainhp();
  m_remainhp_ = value;
}

// optional int32 m_HurtVal = 4;
inline bool SM_BattleInfo::has_m_hurtval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_BattleInfo::set_has_m_hurtval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_BattleInfo::clear_has_m_hurtval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_BattleInfo::clear_m_hurtval() {
  m_hurtval_ = 0;
  clear_has_m_hurtval();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_hurtval() const {
  return m_hurtval_;
}
inline void SM_BattleInfo::set_m_hurtval(::google::protobuf::int32 value) {
  set_has_m_hurtval();
  m_hurtval_ = value;
}

// optional int32 m_killNum = 5;
inline bool SM_BattleInfo::has_m_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_BattleInfo::set_has_m_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_BattleInfo::clear_has_m_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_BattleInfo::clear_m_killnum() {
  m_killnum_ = 0;
  clear_has_m_killnum();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_killnum() const {
  return m_killnum_;
}
inline void SM_BattleInfo::set_m_killnum(::google::protobuf::int32 value) {
  set_has_m_killnum();
  m_killnum_ = value;
}

// optional int32 m_dieNum = 6;
inline bool SM_BattleInfo::has_m_dienum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_BattleInfo::set_has_m_dienum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_BattleInfo::clear_has_m_dienum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_BattleInfo::clear_m_dienum() {
  m_dienum_ = 0;
  clear_has_m_dienum();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_dienum() const {
  return m_dienum_;
}
inline void SM_BattleInfo::set_m_dienum(::google::protobuf::int32 value) {
  set_has_m_dienum();
  m_dienum_ = value;
}

// optional string m_name = 7;
inline bool SM_BattleInfo::has_m_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_BattleInfo::set_has_m_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_BattleInfo::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_BattleInfo::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& SM_BattleInfo::m_name() const {
  return *m_name_;
}
inline void SM_BattleInfo::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void SM_BattleInfo::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void SM_BattleInfo::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_BattleInfo::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* SM_BattleInfo::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_BattleInfo::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_level = 8;
inline bool SM_BattleInfo::has_m_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_BattleInfo::set_has_m_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_BattleInfo::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_BattleInfo::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_level() const {
  return m_level_;
}
inline void SM_BattleInfo::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_fightval = 9;
inline bool SM_BattleInfo::has_m_fightval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SM_BattleInfo::set_has_m_fightval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SM_BattleInfo::clear_has_m_fightval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SM_BattleInfo::clear_m_fightval() {
  m_fightval_ = 0;
  clear_has_m_fightval();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_fightval() const {
  return m_fightval_;
}
inline void SM_BattleInfo::set_m_fightval(::google::protobuf::int32 value) {
  set_has_m_fightval();
  m_fightval_ = value;
}

// optional int32 m_point = 10;
inline bool SM_BattleInfo::has_m_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SM_BattleInfo::set_has_m_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SM_BattleInfo::clear_has_m_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SM_BattleInfo::clear_m_point() {
  m_point_ = 0;
  clear_has_m_point();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_point() const {
  return m_point_;
}
inline void SM_BattleInfo::set_m_point(::google::protobuf::int32 value) {
  set_has_m_point();
  m_point_ = value;
}

// optional int32 m_CharacterType = 11;
inline bool SM_BattleInfo::has_m_charactertype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SM_BattleInfo::set_has_m_charactertype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SM_BattleInfo::clear_has_m_charactertype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SM_BattleInfo::clear_m_charactertype() {
  m_charactertype_ = 0;
  clear_has_m_charactertype();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_charactertype() const {
  return m_charactertype_;
}
inline void SM_BattleInfo::set_m_charactertype(::google::protobuf::int32 value) {
  set_has_m_charactertype();
  m_charactertype_ = value;
}

// optional int32 m_parentID = 12;
inline bool SM_BattleInfo::has_m_parentid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SM_BattleInfo::set_has_m_parentid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SM_BattleInfo::clear_has_m_parentid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SM_BattleInfo::clear_m_parentid() {
  m_parentid_ = 0;
  clear_has_m_parentid();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_parentid() const {
  return m_parentid_;
}
inline void SM_BattleInfo::set_m_parentid(::google::protobuf::int32 value) {
  set_has_m_parentid();
  m_parentid_ = value;
}

// optional int32 m_exitType = 13;
inline bool SM_BattleInfo::has_m_exittype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SM_BattleInfo::set_has_m_exittype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SM_BattleInfo::clear_has_m_exittype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SM_BattleInfo::clear_m_exittype() {
  m_exittype_ = 0;
  clear_has_m_exittype();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_exittype() const {
  return m_exittype_;
}
inline void SM_BattleInfo::set_m_exittype(::google::protobuf::int32 value) {
  set_has_m_exittype();
  m_exittype_ = value;
}

// optional string m_parentName = 14;
inline bool SM_BattleInfo::has_m_parentname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SM_BattleInfo::set_has_m_parentname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SM_BattleInfo::clear_has_m_parentname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SM_BattleInfo::clear_m_parentname() {
  if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
    m_parentname_->clear();
  }
  clear_has_m_parentname();
}
inline const ::std::string& SM_BattleInfo::m_parentname() const {
  return *m_parentname_;
}
inline void SM_BattleInfo::set_m_parentname(const ::std::string& value) {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  m_parentname_->assign(value);
}
inline void SM_BattleInfo::set_m_parentname(const char* value) {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  m_parentname_->assign(value);
}
inline void SM_BattleInfo::set_m_parentname(const char* value, size_t size) {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  m_parentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_BattleInfo::mutable_m_parentname() {
  set_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    m_parentname_ = new ::std::string;
  }
  return m_parentname_;
}
inline ::std::string* SM_BattleInfo::release_m_parentname() {
  clear_has_m_parentname();
  if (m_parentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_parentname_;
    m_parentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_BattleInfo::set_allocated_m_parentname(::std::string* m_parentname) {
  if (m_parentname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parentname_;
  }
  if (m_parentname) {
    set_has_m_parentname();
    m_parentname_ = m_parentname;
  } else {
    clear_has_m_parentname();
    m_parentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_topgrade = 15;
inline bool SM_BattleInfo::has_m_topgrade() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SM_BattleInfo::set_has_m_topgrade() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SM_BattleInfo::clear_has_m_topgrade() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SM_BattleInfo::clear_m_topgrade() {
  m_topgrade_ = 0;
  clear_has_m_topgrade();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_topgrade() const {
  return m_topgrade_;
}
inline void SM_BattleInfo::set_m_topgrade(::google::protobuf::int32 value) {
  set_has_m_topgrade();
  m_topgrade_ = value;
}

// optional int32 m_serverid = 16;
inline bool SM_BattleInfo::has_m_serverid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SM_BattleInfo::set_has_m_serverid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SM_BattleInfo::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SM_BattleInfo::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_serverid() const {
  return m_serverid_;
}
inline void SM_BattleInfo::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// optional int32 m_topsocre = 17;
inline bool SM_BattleInfo::has_m_topsocre() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SM_BattleInfo::set_has_m_topsocre() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SM_BattleInfo::clear_has_m_topsocre() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SM_BattleInfo::clear_m_topsocre() {
  m_topsocre_ = 0;
  clear_has_m_topsocre();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_topsocre() const {
  return m_topsocre_;
}
inline void SM_BattleInfo::set_m_topsocre(::google::protobuf::int32 value) {
  set_has_m_topsocre();
  m_topsocre_ = value;
}

// optional int32 m_bosspercentage = 18;
inline bool SM_BattleInfo::has_m_bosspercentage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SM_BattleInfo::set_has_m_bosspercentage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SM_BattleInfo::clear_has_m_bosspercentage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SM_BattleInfo::clear_m_bosspercentage() {
  m_bosspercentage_ = 0;
  clear_has_m_bosspercentage();
}
inline ::google::protobuf::int32 SM_BattleInfo::m_bosspercentage() const {
  return m_bosspercentage_;
}
inline void SM_BattleInfo::set_m_bosspercentage(::google::protobuf::int32 value) {
  set_has_m_bosspercentage();
  m_bosspercentage_ = value;
}

// repeated .GM_ItemDrop m_DropData = 20;
inline int SM_BattleInfo::m_dropdata_size() const {
  return m_dropdata_.size();
}
inline void SM_BattleInfo::clear_m_dropdata() {
  m_dropdata_.Clear();
}
inline const ::GM_ItemDrop& SM_BattleInfo::m_dropdata(int index) const {
  return m_dropdata_.Get(index);
}
inline ::GM_ItemDrop* SM_BattleInfo::mutable_m_dropdata(int index) {
  return m_dropdata_.Mutable(index);
}
inline ::GM_ItemDrop* SM_BattleInfo::add_m_dropdata() {
  return m_dropdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
SM_BattleInfo::m_dropdata() const {
  return m_dropdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
SM_BattleInfo::mutable_m_dropdata() {
  return &m_dropdata_;
}

// repeated .GM_ItemDrop m_KillMonsterData = 21;
inline int SM_BattleInfo::m_killmonsterdata_size() const {
  return m_killmonsterdata_.size();
}
inline void SM_BattleInfo::clear_m_killmonsterdata() {
  m_killmonsterdata_.Clear();
}
inline const ::GM_ItemDrop& SM_BattleInfo::m_killmonsterdata(int index) const {
  return m_killmonsterdata_.Get(index);
}
inline ::GM_ItemDrop* SM_BattleInfo::mutable_m_killmonsterdata(int index) {
  return m_killmonsterdata_.Mutable(index);
}
inline ::GM_ItemDrop* SM_BattleInfo::add_m_killmonsterdata() {
  return m_killmonsterdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
SM_BattleInfo::m_killmonsterdata() const {
  return m_killmonsterdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
SM_BattleInfo::mutable_m_killmonsterdata() {
  return &m_killmonsterdata_;
}

// -------------------------------------------------------------------

// SM_BattleResult

// required int32 m_WinCamp = 1;
inline bool SM_BattleResult::has_m_wincamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_BattleResult::set_has_m_wincamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_BattleResult::clear_has_m_wincamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_BattleResult::clear_m_wincamp() {
  m_wincamp_ = 0;
  clear_has_m_wincamp();
}
inline ::google::protobuf::int32 SM_BattleResult::m_wincamp() const {
  return m_wincamp_;
}
inline void SM_BattleResult::set_m_wincamp(::google::protobuf::int32 value) {
  set_has_m_wincamp();
  m_wincamp_ = value;
}

// optional int32 m_BattleType = 2;
inline bool SM_BattleResult::has_m_battletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_BattleResult::set_has_m_battletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_BattleResult::clear_has_m_battletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_BattleResult::clear_m_battletype() {
  m_battletype_ = 0;
  clear_has_m_battletype();
}
inline ::google::protobuf::int32 SM_BattleResult::m_battletype() const {
  return m_battletype_;
}
inline void SM_BattleResult::set_m_battletype(::google::protobuf::int32 value) {
  set_has_m_battletype();
  m_battletype_ = value;
}

// optional int32 m_FBTypeID = 3;
inline bool SM_BattleResult::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_BattleResult::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_BattleResult::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_BattleResult::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 SM_BattleResult::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void SM_BattleResult::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 m_UseTime = 4;
inline bool SM_BattleResult::has_m_usetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_BattleResult::set_has_m_usetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_BattleResult::clear_has_m_usetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_BattleResult::clear_m_usetime() {
  m_usetime_ = 0;
  clear_has_m_usetime();
}
inline ::google::protobuf::int32 SM_BattleResult::m_usetime() const {
  return m_usetime_;
}
inline void SM_BattleResult::set_m_usetime(::google::protobuf::int32 value) {
  set_has_m_usetime();
  m_usetime_ = value;
}

// optional int32 m_BossHP = 5;
inline bool SM_BattleResult::has_m_bosshp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_BattleResult::set_has_m_bosshp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_BattleResult::clear_has_m_bosshp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_BattleResult::clear_m_bosshp() {
  m_bosshp_ = 0;
  clear_has_m_bosshp();
}
inline ::google::protobuf::int32 SM_BattleResult::m_bosshp() const {
  return m_bosshp_;
}
inline void SM_BattleResult::set_m_bosshp(::google::protobuf::int32 value) {
  set_has_m_bosshp();
  m_bosshp_ = value;
}

// repeated .SM_BattleInfo m_PlayerData = 6;
inline int SM_BattleResult::m_playerdata_size() const {
  return m_playerdata_.size();
}
inline void SM_BattleResult::clear_m_playerdata() {
  m_playerdata_.Clear();
}
inline const ::SM_BattleInfo& SM_BattleResult::m_playerdata(int index) const {
  return m_playerdata_.Get(index);
}
inline ::SM_BattleInfo* SM_BattleResult::mutable_m_playerdata(int index) {
  return m_playerdata_.Mutable(index);
}
inline ::SM_BattleInfo* SM_BattleResult::add_m_playerdata() {
  return m_playerdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_BattleInfo >&
SM_BattleResult::m_playerdata() const {
  return m_playerdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_BattleInfo >*
SM_BattleResult::mutable_m_playerdata() {
  return &m_playerdata_;
}

// -------------------------------------------------------------------

// SyncMovement

// required int32 m_roleid = 1;
inline bool SyncMovement::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMovement::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMovement::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMovement::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 SyncMovement::m_roleid() const {
  return m_roleid_;
}
inline void SyncMovement::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional float m_PosX = 2;
inline bool SyncMovement::has_m_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMovement::set_has_m_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMovement::clear_has_m_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMovement::clear_m_posx() {
  m_posx_ = 0;
  clear_has_m_posx();
}
inline float SyncMovement::m_posx() const {
  return m_posx_;
}
inline void SyncMovement::set_m_posx(float value) {
  set_has_m_posx();
  m_posx_ = value;
}

// optional float m_PosZ = 3;
inline bool SyncMovement::has_m_posz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncMovement::set_has_m_posz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncMovement::clear_has_m_posz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncMovement::clear_m_posz() {
  m_posz_ = 0;
  clear_has_m_posz();
}
inline float SyncMovement::m_posz() const {
  return m_posz_;
}
inline void SyncMovement::set_m_posz(float value) {
  set_has_m_posz();
  m_posz_ = value;
}

// optional float m_VecX = 4;
inline bool SyncMovement::has_m_vecx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncMovement::set_has_m_vecx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncMovement::clear_has_m_vecx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncMovement::clear_m_vecx() {
  m_vecx_ = 0;
  clear_has_m_vecx();
}
inline float SyncMovement::m_vecx() const {
  return m_vecx_;
}
inline void SyncMovement::set_m_vecx(float value) {
  set_has_m_vecx();
  m_vecx_ = value;
}

// optional float m_VecZ = 5;
inline bool SyncMovement::has_m_vecz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncMovement::set_has_m_vecz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncMovement::clear_has_m_vecz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncMovement::clear_m_vecz() {
  m_vecz_ = 0;
  clear_has_m_vecz();
}
inline float SyncMovement::m_vecz() const {
  return m_vecz_;
}
inline void SyncMovement::set_m_vecz(float value) {
  set_has_m_vecz();
  m_vecz_ = value;
}

// -------------------------------------------------------------------

// GM_FBSweepRequest

// required int32 m_fbtypeid = 1;
inline bool GM_FBSweepRequest::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_FBSweepRequest::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_FBSweepRequest::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_FBSweepRequest::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 GM_FBSweepRequest::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void GM_FBSweepRequest::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 m_fbid = 2;
inline bool GM_FBSweepRequest::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_FBSweepRequest::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_FBSweepRequest::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_FBSweepRequest::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_FBSweepRequest::m_fbid() const {
  return m_fbid_;
}
inline void GM_FBSweepRequest::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional int32 m_repeat = 3;
inline bool GM_FBSweepRequest::has_m_repeat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_FBSweepRequest::set_has_m_repeat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_FBSweepRequest::clear_has_m_repeat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_FBSweepRequest::clear_m_repeat() {
  m_repeat_ = 0;
  clear_has_m_repeat();
}
inline ::google::protobuf::int32 GM_FBSweepRequest::m_repeat() const {
  return m_repeat_;
}
inline void GM_FBSweepRequest::set_m_repeat(::google::protobuf::int32 value) {
  set_has_m_repeat();
  m_repeat_ = value;
}

// optional int32 m_profession = 4;
inline bool GM_FBSweepRequest::has_m_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_FBSweepRequest::set_has_m_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_FBSweepRequest::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_FBSweepRequest::clear_m_profession() {
  m_profession_ = 0;
  clear_has_m_profession();
}
inline ::google::protobuf::int32 GM_FBSweepRequest::m_profession() const {
  return m_profession_;
}
inline void GM_FBSweepRequest::set_m_profession(::google::protobuf::int32 value) {
  set_has_m_profession();
  m_profession_ = value;
}

// -------------------------------------------------------------------

// GM_FBSweepReturn

// required int32 m_fbtypeid = 1;
inline bool GM_FBSweepReturn::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_FBSweepReturn::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_FBSweepReturn::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_FBSweepReturn::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 GM_FBSweepReturn::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void GM_FBSweepReturn::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 m_sweepcount = 2;
inline bool GM_FBSweepReturn::has_m_sweepcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_FBSweepReturn::set_has_m_sweepcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_FBSweepReturn::clear_has_m_sweepcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_FBSweepReturn::clear_m_sweepcount() {
  m_sweepcount_ = 0;
  clear_has_m_sweepcount();
}
inline ::google::protobuf::int32 GM_FBSweepReturn::m_sweepcount() const {
  return m_sweepcount_;
}
inline void GM_FBSweepReturn::set_m_sweepcount(::google::protobuf::int32 value) {
  set_has_m_sweepcount();
  m_sweepcount_ = value;
}

// repeated .GM_ItemDrop m_DropData = 3;
inline int GM_FBSweepReturn::m_dropdata_size() const {
  return m_dropdata_.size();
}
inline void GM_FBSweepReturn::clear_m_dropdata() {
  m_dropdata_.Clear();
}
inline const ::GM_ItemDrop& GM_FBSweepReturn::m_dropdata(int index) const {
  return m_dropdata_.Get(index);
}
inline ::GM_ItemDrop* GM_FBSweepReturn::mutable_m_dropdata(int index) {
  return m_dropdata_.Mutable(index);
}
inline ::GM_ItemDrop* GM_FBSweepReturn::add_m_dropdata() {
  return m_dropdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
GM_FBSweepReturn::m_dropdata() const {
  return m_dropdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
GM_FBSweepReturn::mutable_m_dropdata() {
  return &m_dropdata_;
}

// repeated .GM_ItemDrop m_KillMonsterData = 21;
inline int GM_FBSweepReturn::m_killmonsterdata_size() const {
  return m_killmonsterdata_.size();
}
inline void GM_FBSweepReturn::clear_m_killmonsterdata() {
  m_killmonsterdata_.Clear();
}
inline const ::GM_ItemDrop& GM_FBSweepReturn::m_killmonsterdata(int index) const {
  return m_killmonsterdata_.Get(index);
}
inline ::GM_ItemDrop* GM_FBSweepReturn::mutable_m_killmonsterdata(int index) {
  return m_killmonsterdata_.Mutable(index);
}
inline ::GM_ItemDrop* GM_FBSweepReturn::add_m_killmonsterdata() {
  return m_killmonsterdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >&
GM_FBSweepReturn::m_killmonsterdata() const {
  return m_killmonsterdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ItemDrop >*
GM_FBSweepReturn::mutable_m_killmonsterdata() {
  return &m_killmonsterdata_;
}

// -------------------------------------------------------------------

// GM_PetBattleInfo

// required int32 m_roleID = 1;
inline bool GM_PetBattleInfo::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_PetBattleInfo::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_PetBattleInfo::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_PetBattleInfo::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_PetBattleInfo::m_roleid() const {
  return m_roleid_;
}
inline void GM_PetBattleInfo::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_typeID = 2;
inline bool GM_PetBattleInfo::has_m_typeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_PetBattleInfo::set_has_m_typeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_PetBattleInfo::clear_has_m_typeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_PetBattleInfo::clear_m_typeid() {
  m_typeid_ = 0;
  clear_has_m_typeid();
}
inline ::google::protobuf::int32 GM_PetBattleInfo::m_typeid() const {
  return m_typeid_;
}
inline void GM_PetBattleInfo::set_m_typeid(::google::protobuf::int32 value) {
  set_has_m_typeid();
  m_typeid_ = value;
}

// optional int32 m_position = 3;
inline bool GM_PetBattleInfo::has_m_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_PetBattleInfo::set_has_m_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_PetBattleInfo::clear_has_m_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_PetBattleInfo::clear_m_position() {
  m_position_ = 0;
  clear_has_m_position();
}
inline ::google::protobuf::int32 GM_PetBattleInfo::m_position() const {
  return m_position_;
}
inline void GM_PetBattleInfo::set_m_position(::google::protobuf::int32 value) {
  set_has_m_position();
  m_position_ = value;
}

// -------------------------------------------------------------------

// GM_AllPetBattleInfo

// required int32 m_count = 1;
inline bool GM_AllPetBattleInfo::has_m_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_AllPetBattleInfo::set_has_m_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_AllPetBattleInfo::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_AllPetBattleInfo::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 GM_AllPetBattleInfo::m_count() const {
  return m_count_;
}
inline void GM_AllPetBattleInfo::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// repeated .GM_PetBattleInfo m_Data = 2;
inline int GM_AllPetBattleInfo::m_data_size() const {
  return m_data_.size();
}
inline void GM_AllPetBattleInfo::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_PetBattleInfo& GM_AllPetBattleInfo::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_PetBattleInfo* GM_AllPetBattleInfo::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_PetBattleInfo* GM_AllPetBattleInfo::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_PetBattleInfo >&
GM_AllPetBattleInfo::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_PetBattleInfo >*
GM_AllPetBattleInfo::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// GM_RealTime_SendPoint

// required int32 m_point = 1;
inline bool GM_RealTime_SendPoint::has_m_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_RealTime_SendPoint::clear_has_m_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_RealTime_SendPoint::clear_m_point() {
  m_point_ = 0;
  clear_has_m_point();
}
inline ::google::protobuf::int32 GM_RealTime_SendPoint::m_point() const {
  return m_point_;
}
inline void GM_RealTime_SendPoint::set_m_point(::google::protobuf::int32 value) {
  set_has_m_point();
  m_point_ = value;
}

// optional int32 m_type = 2;
inline bool GM_RealTime_SendPoint::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_RealTime_SendPoint::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_RealTime_SendPoint::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 GM_RealTime_SendPoint::m_type() const {
  return m_type_;
}
inline void GM_RealTime_SendPoint::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_serialkill = 3;
inline bool GM_RealTime_SendPoint::has_m_serialkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_serialkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_RealTime_SendPoint::clear_has_m_serialkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_RealTime_SendPoint::clear_m_serialkill() {
  m_serialkill_ = 0;
  clear_has_m_serialkill();
}
inline ::google::protobuf::int32 GM_RealTime_SendPoint::m_serialkill() const {
  return m_serialkill_;
}
inline void GM_RealTime_SendPoint::set_m_serialkill(::google::protobuf::int32 value) {
  set_has_m_serialkill();
  m_serialkill_ = value;
}

// optional string m_attackname = 4;
inline bool GM_RealTime_SendPoint::has_m_attackname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_attackname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_RealTime_SendPoint::clear_has_m_attackname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_RealTime_SendPoint::clear_m_attackname() {
  if (m_attackname_ != &::google::protobuf::internal::kEmptyString) {
    m_attackname_->clear();
  }
  clear_has_m_attackname();
}
inline const ::std::string& GM_RealTime_SendPoint::m_attackname() const {
  return *m_attackname_;
}
inline void GM_RealTime_SendPoint::set_m_attackname(const ::std::string& value) {
  set_has_m_attackname();
  if (m_attackname_ == &::google::protobuf::internal::kEmptyString) {
    m_attackname_ = new ::std::string;
  }
  m_attackname_->assign(value);
}
inline void GM_RealTime_SendPoint::set_m_attackname(const char* value) {
  set_has_m_attackname();
  if (m_attackname_ == &::google::protobuf::internal::kEmptyString) {
    m_attackname_ = new ::std::string;
  }
  m_attackname_->assign(value);
}
inline void GM_RealTime_SendPoint::set_m_attackname(const char* value, size_t size) {
  set_has_m_attackname();
  if (m_attackname_ == &::google::protobuf::internal::kEmptyString) {
    m_attackname_ = new ::std::string;
  }
  m_attackname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_RealTime_SendPoint::mutable_m_attackname() {
  set_has_m_attackname();
  if (m_attackname_ == &::google::protobuf::internal::kEmptyString) {
    m_attackname_ = new ::std::string;
  }
  return m_attackname_;
}
inline ::std::string* GM_RealTime_SendPoint::release_m_attackname() {
  clear_has_m_attackname();
  if (m_attackname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_attackname_;
    m_attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_RealTime_SendPoint::set_allocated_m_attackname(::std::string* m_attackname) {
  if (m_attackname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_attackname_;
  }
  if (m_attackname) {
    set_has_m_attackname();
    m_attackname_ = m_attackname;
  } else {
    clear_has_m_attackname();
    m_attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_diename = 5;
inline bool GM_RealTime_SendPoint::has_m_diename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_diename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_RealTime_SendPoint::clear_has_m_diename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_RealTime_SendPoint::clear_m_diename() {
  if (m_diename_ != &::google::protobuf::internal::kEmptyString) {
    m_diename_->clear();
  }
  clear_has_m_diename();
}
inline const ::std::string& GM_RealTime_SendPoint::m_diename() const {
  return *m_diename_;
}
inline void GM_RealTime_SendPoint::set_m_diename(const ::std::string& value) {
  set_has_m_diename();
  if (m_diename_ == &::google::protobuf::internal::kEmptyString) {
    m_diename_ = new ::std::string;
  }
  m_diename_->assign(value);
}
inline void GM_RealTime_SendPoint::set_m_diename(const char* value) {
  set_has_m_diename();
  if (m_diename_ == &::google::protobuf::internal::kEmptyString) {
    m_diename_ = new ::std::string;
  }
  m_diename_->assign(value);
}
inline void GM_RealTime_SendPoint::set_m_diename(const char* value, size_t size) {
  set_has_m_diename();
  if (m_diename_ == &::google::protobuf::internal::kEmptyString) {
    m_diename_ = new ::std::string;
  }
  m_diename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_RealTime_SendPoint::mutable_m_diename() {
  set_has_m_diename();
  if (m_diename_ == &::google::protobuf::internal::kEmptyString) {
    m_diename_ = new ::std::string;
  }
  return m_diename_;
}
inline ::std::string* GM_RealTime_SendPoint::release_m_diename() {
  clear_has_m_diename();
  if (m_diename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_diename_;
    m_diename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_RealTime_SendPoint::set_allocated_m_diename(::std::string* m_diename) {
  if (m_diename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_diename_;
  }
  if (m_diename) {
    set_has_m_diename();
    m_diename_ = m_diename;
  } else {
    clear_has_m_diename();
    m_diename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_bekilledid = 6;
inline bool GM_RealTime_SendPoint::has_m_bekilledid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_bekilledid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_RealTime_SendPoint::clear_has_m_bekilledid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_RealTime_SendPoint::clear_m_bekilledid() {
  m_bekilledid_ = 0;
  clear_has_m_bekilledid();
}
inline ::google::protobuf::int32 GM_RealTime_SendPoint::m_bekilledid() const {
  return m_bekilledid_;
}
inline void GM_RealTime_SendPoint::set_m_bekilledid(::google::protobuf::int32 value) {
  set_has_m_bekilledid();
  m_bekilledid_ = value;
}

// optional int32 m_attackpoint = 7;
inline bool GM_RealTime_SendPoint::has_m_attackpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_attackpoint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_RealTime_SendPoint::clear_has_m_attackpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_RealTime_SendPoint::clear_m_attackpoint() {
  m_attackpoint_ = 0;
  clear_has_m_attackpoint();
}
inline ::google::protobuf::int32 GM_RealTime_SendPoint::m_attackpoint() const {
  return m_attackpoint_;
}
inline void GM_RealTime_SendPoint::set_m_attackpoint(::google::protobuf::int32 value) {
  set_has_m_attackpoint();
  m_attackpoint_ = value;
}

// optional int32 m_battlepoint = 8;
inline bool GM_RealTime_SendPoint::has_m_battlepoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_RealTime_SendPoint::set_has_m_battlepoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_RealTime_SendPoint::clear_has_m_battlepoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_RealTime_SendPoint::clear_m_battlepoint() {
  m_battlepoint_ = 0;
  clear_has_m_battlepoint();
}
inline ::google::protobuf::int32 GM_RealTime_SendPoint::m_battlepoint() const {
  return m_battlepoint_;
}
inline void GM_RealTime_SendPoint::set_m_battlepoint(::google::protobuf::int32 value) {
  set_has_m_battlepoint();
  m_battlepoint_ = value;
}

// -------------------------------------------------------------------

// GM_NotifyBuff

// required int32 m_roleid = 1;
inline bool GM_NotifyBuff::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_NotifyBuff::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_NotifyBuff::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_NotifyBuff::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_NotifyBuff::m_roleid() const {
  return m_roleid_;
}
inline void GM_NotifyBuff::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_attackid = 2;
inline bool GM_NotifyBuff::has_m_attackid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_NotifyBuff::set_has_m_attackid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_NotifyBuff::clear_has_m_attackid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_NotifyBuff::clear_m_attackid() {
  m_attackid_ = 0;
  clear_has_m_attackid();
}
inline ::google::protobuf::int32 GM_NotifyBuff::m_attackid() const {
  return m_attackid_;
}
inline void GM_NotifyBuff::set_m_attackid(::google::protobuf::int32 value) {
  set_has_m_attackid();
  m_attackid_ = value;
}

// optional int32 m_buffid = 3;
inline bool GM_NotifyBuff::has_m_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_NotifyBuff::set_has_m_buffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_NotifyBuff::clear_has_m_buffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_NotifyBuff::clear_m_buffid() {
  m_buffid_ = 0;
  clear_has_m_buffid();
}
inline ::google::protobuf::int32 GM_NotifyBuff::m_buffid() const {
  return m_buffid_;
}
inline void GM_NotifyBuff::set_m_buffid(::google::protobuf::int32 value) {
  set_has_m_buffid();
  m_buffid_ = value;
}

// optional float m_time = 4;
inline bool GM_NotifyBuff::has_m_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_NotifyBuff::set_has_m_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_NotifyBuff::clear_has_m_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_NotifyBuff::clear_m_time() {
  m_time_ = 0;
  clear_has_m_time();
}
inline float GM_NotifyBuff::m_time() const {
  return m_time_;
}
inline void GM_NotifyBuff::set_m_time(float value) {
  set_has_m_time();
  m_time_ = value;
}

// optional int32 m_extend = 5;
inline bool GM_NotifyBuff::has_m_extend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_NotifyBuff::set_has_m_extend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_NotifyBuff::clear_has_m_extend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_NotifyBuff::clear_m_extend() {
  m_extend_ = 0;
  clear_has_m_extend();
}
inline ::google::protobuf::int32 GM_NotifyBuff::m_extend() const {
  return m_extend_;
}
inline void GM_NotifyBuff::set_m_extend(::google::protobuf::int32 value) {
  set_has_m_extend();
  m_extend_ = value;
}

// -------------------------------------------------------------------

// GM_ClientHpNotify

// required int32 m_attackID = 1;
inline bool GM_ClientHpNotify::has_m_attackid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ClientHpNotify::set_has_m_attackid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ClientHpNotify::clear_has_m_attackid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ClientHpNotify::clear_m_attackid() {
  m_attackid_ = 0;
  clear_has_m_attackid();
}
inline ::google::protobuf::int32 GM_ClientHpNotify::m_attackid() const {
  return m_attackid_;
}
inline void GM_ClientHpNotify::set_m_attackid(::google::protobuf::int32 value) {
  set_has_m_attackid();
  m_attackid_ = value;
}

// optional int32 m_beAttackID = 2;
inline bool GM_ClientHpNotify::has_m_beattackid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ClientHpNotify::set_has_m_beattackid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ClientHpNotify::clear_has_m_beattackid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ClientHpNotify::clear_m_beattackid() {
  m_beattackid_ = 0;
  clear_has_m_beattackid();
}
inline ::google::protobuf::int32 GM_ClientHpNotify::m_beattackid() const {
  return m_beattackid_;
}
inline void GM_ClientHpNotify::set_m_beattackid(::google::protobuf::int32 value) {
  set_has_m_beattackid();
  m_beattackid_ = value;
}

// optional int32 m_hurtVal = 3;
inline bool GM_ClientHpNotify::has_m_hurtval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ClientHpNotify::set_has_m_hurtval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ClientHpNotify::clear_has_m_hurtval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ClientHpNotify::clear_m_hurtval() {
  m_hurtval_ = 0;
  clear_has_m_hurtval();
}
inline ::google::protobuf::int32 GM_ClientHpNotify::m_hurtval() const {
  return m_hurtval_;
}
inline void GM_ClientHpNotify::set_m_hurtval(::google::protobuf::int32 value) {
  set_has_m_hurtval();
  m_hurtval_ = value;
}

// optional int32 m_hurtType = 4;
inline bool GM_ClientHpNotify::has_m_hurttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_ClientHpNotify::set_has_m_hurttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_ClientHpNotify::clear_has_m_hurttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_ClientHpNotify::clear_m_hurttype() {
  m_hurttype_ = 0;
  clear_has_m_hurttype();
}
inline ::google::protobuf::int32 GM_ClientHpNotify::m_hurttype() const {
  return m_hurttype_;
}
inline void GM_ClientHpNotify::set_m_hurttype(::google::protobuf::int32 value) {
  set_has_m_hurttype();
  m_hurttype_ = value;
}

// -------------------------------------------------------------------

// GM_ClientMpNotify

// required int32 m_roleid = 1;
inline bool GM_ClientMpNotify::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ClientMpNotify::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ClientMpNotify::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ClientMpNotify::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_ClientMpNotify::m_roleid() const {
  return m_roleid_;
}
inline void GM_ClientMpNotify::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_value = 2;
inline bool GM_ClientMpNotify::has_m_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ClientMpNotify::set_has_m_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ClientMpNotify::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ClientMpNotify::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 GM_ClientMpNotify::m_value() const {
  return m_value_;
}
inline void GM_ClientMpNotify::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// -------------------------------------------------------------------

// GM_Notify_Specialskill

// required int32 m_roleid = 1;
inline bool GM_Notify_Specialskill::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Notify_Specialskill::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Notify_Specialskill::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Notify_Specialskill::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_Notify_Specialskill::m_roleid() const {
  return m_roleid_;
}
inline void GM_Notify_Specialskill::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_type = 2;
inline bool GM_Notify_Specialskill::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Notify_Specialskill::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Notify_Specialskill::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Notify_Specialskill::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 GM_Notify_Specialskill::m_type() const {
  return m_type_;
}
inline void GM_Notify_Specialskill::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// GM_CenterBattle

// required string m_fbIp = 1;
inline bool GM_CenterBattle::has_m_fbip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_CenterBattle::set_has_m_fbip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_CenterBattle::clear_has_m_fbip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_CenterBattle::clear_m_fbip() {
  if (m_fbip_ != &::google::protobuf::internal::kEmptyString) {
    m_fbip_->clear();
  }
  clear_has_m_fbip();
}
inline const ::std::string& GM_CenterBattle::m_fbip() const {
  return *m_fbip_;
}
inline void GM_CenterBattle::set_m_fbip(const ::std::string& value) {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  m_fbip_->assign(value);
}
inline void GM_CenterBattle::set_m_fbip(const char* value) {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  m_fbip_->assign(value);
}
inline void GM_CenterBattle::set_m_fbip(const char* value, size_t size) {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  m_fbip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_CenterBattle::mutable_m_fbip() {
  set_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    m_fbip_ = new ::std::string;
  }
  return m_fbip_;
}
inline ::std::string* GM_CenterBattle::release_m_fbip() {
  clear_has_m_fbip();
  if (m_fbip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_fbip_;
    m_fbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_CenterBattle::set_allocated_m_fbip(::std::string* m_fbip) {
  if (m_fbip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fbip_;
  }
  if (m_fbip) {
    set_has_m_fbip();
    m_fbip_ = m_fbip;
  } else {
    clear_has_m_fbip();
    m_fbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rolegmid = 2;
inline bool GM_CenterBattle::has_m_rolegmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_CenterBattle::set_has_m_rolegmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_CenterBattle::clear_has_m_rolegmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_CenterBattle::clear_m_rolegmid() {
  m_rolegmid_ = 0;
  clear_has_m_rolegmid();
}
inline ::google::protobuf::int32 GM_CenterBattle::m_rolegmid() const {
  return m_rolegmid_;
}
inline void GM_CenterBattle::set_m_rolegmid(::google::protobuf::int32 value) {
  set_has_m_rolegmid();
  m_rolegmid_ = value;
}

// -------------------------------------------------------------------

// SM_TeamMatchData

// required int32 m_areanID = 1;
inline bool SM_TeamMatchData::has_m_areanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_TeamMatchData::set_has_m_areanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_TeamMatchData::clear_has_m_areanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_TeamMatchData::clear_m_areanid() {
  m_areanid_ = 0;
  clear_has_m_areanid();
}
inline ::google::protobuf::int32 SM_TeamMatchData::m_areanid() const {
  return m_areanid_;
}
inline void SM_TeamMatchData::set_m_areanid(::google::protobuf::int32 value) {
  set_has_m_areanid();
  m_areanid_ = value;
}

// optional int32 m_nleaderid = 3;
inline bool SM_TeamMatchData::has_m_nleaderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_TeamMatchData::set_has_m_nleaderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_TeamMatchData::clear_has_m_nleaderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_TeamMatchData::clear_m_nleaderid() {
  m_nleaderid_ = 0;
  clear_has_m_nleaderid();
}
inline ::google::protobuf::int32 SM_TeamMatchData::m_nleaderid() const {
  return m_nleaderid_;
}
inline void SM_TeamMatchData::set_m_nleaderid(::google::protobuf::int32 value) {
  set_has_m_nleaderid();
  m_nleaderid_ = value;
}

// optional int32 m_nfbtypeid = 4;
inline bool SM_TeamMatchData::has_m_nfbtypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_TeamMatchData::set_has_m_nfbtypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_TeamMatchData::clear_has_m_nfbtypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_TeamMatchData::clear_m_nfbtypeid() {
  m_nfbtypeid_ = 0;
  clear_has_m_nfbtypeid();
}
inline ::google::protobuf::int32 SM_TeamMatchData::m_nfbtypeid() const {
  return m_nfbtypeid_;
}
inline void SM_TeamMatchData::set_m_nfbtypeid(::google::protobuf::int32 value) {
  set_has_m_nfbtypeid();
  m_nfbtypeid_ = value;
}

// optional int32 m_nmembernum = 5;
inline bool SM_TeamMatchData::has_m_nmembernum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_TeamMatchData::set_has_m_nmembernum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_TeamMatchData::clear_has_m_nmembernum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_TeamMatchData::clear_m_nmembernum() {
  m_nmembernum_ = 0;
  clear_has_m_nmembernum();
}
inline ::google::protobuf::int32 SM_TeamMatchData::m_nmembernum() const {
  return m_nmembernum_;
}
inline void SM_TeamMatchData::set_m_nmembernum(::google::protobuf::int32 value) {
  set_has_m_nmembernum();
  m_nmembernum_ = value;
}

// repeated .SM_BattleRequest m_member = 20;
inline int SM_TeamMatchData::m_member_size() const {
  return m_member_.size();
}
inline void SM_TeamMatchData::clear_m_member() {
  m_member_.Clear();
}
inline const ::SM_BattleRequest& SM_TeamMatchData::m_member(int index) const {
  return m_member_.Get(index);
}
inline ::SM_BattleRequest* SM_TeamMatchData::mutable_m_member(int index) {
  return m_member_.Mutable(index);
}
inline ::SM_BattleRequest* SM_TeamMatchData::add_m_member() {
  return m_member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_BattleRequest >&
SM_TeamMatchData::m_member() const {
  return m_member_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_BattleRequest >*
SM_TeamMatchData::mutable_m_member() {
  return &m_member_;
}

// -------------------------------------------------------------------

// GM_ClientRelive

// required int32 m_roleid = 1;
inline bool GM_ClientRelive::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ClientRelive::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ClientRelive::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ClientRelive::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_ClientRelive::m_roleid() const {
  return m_roleid_;
}
inline void GM_ClientRelive::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_fbid = 2;
inline bool GM_ClientRelive::has_m_fbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ClientRelive::set_has_m_fbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ClientRelive::clear_has_m_fbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ClientRelive::clear_m_fbid() {
  m_fbid_ = 0;
  clear_has_m_fbid();
}
inline ::google::protobuf::int32 GM_ClientRelive::m_fbid() const {
  return m_fbid_;
}
inline void GM_ClientRelive::set_m_fbid(::google::protobuf::int32 value) {
  set_has_m_fbid();
  m_fbid_ = value;
}

// optional int32 m_hpPercent = 3;
inline bool GM_ClientRelive::has_m_hppercent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ClientRelive::set_has_m_hppercent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ClientRelive::clear_has_m_hppercent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ClientRelive::clear_m_hppercent() {
  m_hppercent_ = 0;
  clear_has_m_hppercent();
}
inline ::google::protobuf::int32 GM_ClientRelive::m_hppercent() const {
  return m_hppercent_;
}
inline void GM_ClientRelive::set_m_hppercent(::google::protobuf::int32 value) {
  set_has_m_hppercent();
  m_hppercent_ = value;
}

// optional int32 m_attackPercent = 4;
inline bool GM_ClientRelive::has_m_attackpercent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_ClientRelive::set_has_m_attackpercent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_ClientRelive::clear_has_m_attackpercent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_ClientRelive::clear_m_attackpercent() {
  m_attackpercent_ = 0;
  clear_has_m_attackpercent();
}
inline ::google::protobuf::int32 GM_ClientRelive::m_attackpercent() const {
  return m_attackpercent_;
}
inline void GM_ClientRelive::set_m_attackpercent(::google::protobuf::int32 value) {
  set_has_m_attackpercent();
  m_attackpercent_ = value;
}

// -------------------------------------------------------------------

// SM_majiang_role_battleresult

// required int32 m_roleid = 1;
inline bool SM_majiang_role_battleresult::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_majiang_role_battleresult::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_majiang_role_battleresult::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_roleid() const {
  return m_roleid_;
}
inline void SM_majiang_role_battleresult::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int64 m_allGold = 2;
inline bool SM_majiang_role_battleresult::has_m_allgold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_allgold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_majiang_role_battleresult::clear_has_m_allgold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_majiang_role_battleresult::clear_m_allgold() {
  m_allgold_ = GOOGLE_LONGLONG(0);
  clear_has_m_allgold();
}
inline ::google::protobuf::int64 SM_majiang_role_battleresult::m_allgold() const {
  return m_allgold_;
}
inline void SM_majiang_role_battleresult::set_m_allgold(::google::protobuf::int64 value) {
  set_has_m_allgold();
  m_allgold_ = value;
}

// optional int64 m_winGold = 3;
inline bool SM_majiang_role_battleresult::has_m_wingold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_wingold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_majiang_role_battleresult::clear_has_m_wingold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_majiang_role_battleresult::clear_m_wingold() {
  m_wingold_ = GOOGLE_LONGLONG(0);
  clear_has_m_wingold();
}
inline ::google::protobuf::int64 SM_majiang_role_battleresult::m_wingold() const {
  return m_wingold_;
}
inline void SM_majiang_role_battleresult::set_m_wingold(::google::protobuf::int64 value) {
  set_has_m_wingold();
  m_wingold_ = value;
}

// optional int32 m_character = 4;
inline bool SM_majiang_role_battleresult::has_m_character() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_character() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_majiang_role_battleresult::clear_has_m_character() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_majiang_role_battleresult::clear_m_character() {
  m_character_ = 0;
  clear_has_m_character();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_character() const {
  return m_character_;
}
inline void SM_majiang_role_battleresult::set_m_character(::google::protobuf::int32 value) {
  set_has_m_character();
  m_character_ = value;
}

// optional string m_winType = 5;
inline bool SM_majiang_role_battleresult::has_m_wintype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_wintype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_majiang_role_battleresult::clear_has_m_wintype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_majiang_role_battleresult::clear_m_wintype() {
  if (m_wintype_ != &::google::protobuf::internal::kEmptyString) {
    m_wintype_->clear();
  }
  clear_has_m_wintype();
}
inline const ::std::string& SM_majiang_role_battleresult::m_wintype() const {
  return *m_wintype_;
}
inline void SM_majiang_role_battleresult::set_m_wintype(const ::std::string& value) {
  set_has_m_wintype();
  if (m_wintype_ == &::google::protobuf::internal::kEmptyString) {
    m_wintype_ = new ::std::string;
  }
  m_wintype_->assign(value);
}
inline void SM_majiang_role_battleresult::set_m_wintype(const char* value) {
  set_has_m_wintype();
  if (m_wintype_ == &::google::protobuf::internal::kEmptyString) {
    m_wintype_ = new ::std::string;
  }
  m_wintype_->assign(value);
}
inline void SM_majiang_role_battleresult::set_m_wintype(const char* value, size_t size) {
  set_has_m_wintype();
  if (m_wintype_ == &::google::protobuf::internal::kEmptyString) {
    m_wintype_ = new ::std::string;
  }
  m_wintype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_majiang_role_battleresult::mutable_m_wintype() {
  set_has_m_wintype();
  if (m_wintype_ == &::google::protobuf::internal::kEmptyString) {
    m_wintype_ = new ::std::string;
  }
  return m_wintype_;
}
inline ::std::string* SM_majiang_role_battleresult::release_m_wintype() {
  clear_has_m_wintype();
  if (m_wintype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_wintype_;
    m_wintype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_majiang_role_battleresult::set_allocated_m_wintype(::std::string* m_wintype) {
  if (m_wintype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_wintype_;
  }
  if (m_wintype) {
    set_has_m_wintype();
    m_wintype_ = m_wintype;
  } else {
    clear_has_m_wintype();
    m_wintype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_sjChongGuan = 6;
inline bool SM_majiang_role_battleresult::has_m_sjchongguan() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_sjchongguan() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_majiang_role_battleresult::clear_has_m_sjchongguan() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_majiang_role_battleresult::clear_m_sjchongguan() {
  m_sjchongguan_ = 0;
  clear_has_m_sjchongguan();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_sjchongguan() const {
  return m_sjchongguan_;
}
inline void SM_majiang_role_battleresult::set_m_sjchongguan(::google::protobuf::int32 value) {
  set_has_m_sjchongguan();
  m_sjchongguan_ = value;
}

// optional int32 m_sjBaWang = 7;
inline bool SM_majiang_role_battleresult::has_m_sjbawang() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_sjbawang() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_majiang_role_battleresult::clear_has_m_sjbawang() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_majiang_role_battleresult::clear_m_sjbawang() {
  m_sjbawang_ = 0;
  clear_has_m_sjbawang();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_sjbawang() const {
  return m_sjbawang_;
}
inline void SM_majiang_role_battleresult::set_m_sjbawang(::google::protobuf::int32 value) {
  set_has_m_sjbawang();
  m_sjbawang_ = value;
}

// optional int32 m_xjChongGuan = 8;
inline bool SM_majiang_role_battleresult::has_m_xjchongguan() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_xjchongguan() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_majiang_role_battleresult::clear_has_m_xjchongguan() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_majiang_role_battleresult::clear_m_xjchongguan() {
  m_xjchongguan_ = 0;
  clear_has_m_xjchongguan();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_xjchongguan() const {
  return m_xjchongguan_;
}
inline void SM_majiang_role_battleresult::set_m_xjchongguan(::google::protobuf::int32 value) {
  set_has_m_xjchongguan();
  m_xjchongguan_ = value;
}

// optional int32 m_xjBaWang = 9;
inline bool SM_majiang_role_battleresult::has_m_xjbawang() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_xjbawang() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SM_majiang_role_battleresult::clear_has_m_xjbawang() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SM_majiang_role_battleresult::clear_m_xjbawang() {
  m_xjbawang_ = 0;
  clear_has_m_xjbawang();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_xjbawang() const {
  return m_xjbawang_;
}
inline void SM_majiang_role_battleresult::set_m_xjbawang(::google::protobuf::int32 value) {
  set_has_m_xjbawang();
  m_xjbawang_ = value;
}

// optional int32 m_cartype = 10;
inline bool SM_majiang_role_battleresult::has_m_cartype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_cartype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SM_majiang_role_battleresult::clear_has_m_cartype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SM_majiang_role_battleresult::clear_m_cartype() {
  m_cartype_ = 0;
  clear_has_m_cartype();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_cartype() const {
  return m_cartype_;
}
inline void SM_majiang_role_battleresult::set_m_cartype(::google::protobuf::int32 value) {
  set_has_m_cartype();
  m_cartype_ = value;
}

// optional int32 m_room_id = 11;
inline bool SM_majiang_role_battleresult::has_m_room_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_room_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SM_majiang_role_battleresult::clear_has_m_room_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SM_majiang_role_battleresult::clear_m_room_id() {
  m_room_id_ = 0;
  clear_has_m_room_id();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_room_id() const {
  return m_room_id_;
}
inline void SM_majiang_role_battleresult::set_m_room_id(::google::protobuf::int32 value) {
  set_has_m_room_id();
  m_room_id_ = value;
}

// optional int32 m_room_bnote = 12;
inline bool SM_majiang_role_battleresult::has_m_room_bnote() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_room_bnote() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SM_majiang_role_battleresult::clear_has_m_room_bnote() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SM_majiang_role_battleresult::clear_m_room_bnote() {
  m_room_bnote_ = 0;
  clear_has_m_room_bnote();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_room_bnote() const {
  return m_room_bnote_;
}
inline void SM_majiang_role_battleresult::set_m_room_bnote(::google::protobuf::int32 value) {
  set_has_m_room_bnote();
  m_room_bnote_ = value;
}

// optional int32 m_win_type = 13;
inline bool SM_majiang_role_battleresult::has_m_win_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_win_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_win_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SM_majiang_role_battleresult::clear_m_win_type() {
  m_win_type_ = 0;
  clear_has_m_win_type();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_win_type() const {
  return m_win_type_;
}
inline void SM_majiang_role_battleresult::set_m_win_type(::google::protobuf::int32 value) {
  set_has_m_win_type();
  m_win_type_ = value;
}

// optional int32 m_is_blasting = 14;
inline bool SM_majiang_role_battleresult::has_m_is_blasting() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_is_blasting() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_is_blasting() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SM_majiang_role_battleresult::clear_m_is_blasting() {
  m_is_blasting_ = 0;
  clear_has_m_is_blasting();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_is_blasting() const {
  return m_is_blasting_;
}
inline void SM_majiang_role_battleresult::set_m_is_blasting(::google::protobuf::int32 value) {
  set_has_m_is_blasting();
  m_is_blasting_ = value;
}

// optional int32 m_is_washedoff = 15;
inline bool SM_majiang_role_battleresult::has_m_is_washedoff() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_is_washedoff() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_is_washedoff() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SM_majiang_role_battleresult::clear_m_is_washedoff() {
  m_is_washedoff_ = 0;
  clear_has_m_is_washedoff();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_is_washedoff() const {
  return m_is_washedoff_;
}
inline void SM_majiang_role_battleresult::set_m_is_washedoff(::google::protobuf::int32 value) {
  set_has_m_is_washedoff();
  m_is_washedoff_ = value;
}

// optional int32 m_left_card = 16;
inline bool SM_majiang_role_battleresult::has_m_left_card() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_left_card() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_left_card() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SM_majiang_role_battleresult::clear_m_left_card() {
  m_left_card_ = 0;
  clear_has_m_left_card();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_left_card() const {
  return m_left_card_;
}
inline void SM_majiang_role_battleresult::set_m_left_card(::google::protobuf::int32 value) {
  set_has_m_left_card();
  m_left_card_ = value;
}

// optional int32 m_chow = 17;
inline bool SM_majiang_role_battleresult::has_m_chow() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_chow() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_chow() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SM_majiang_role_battleresult::clear_m_chow() {
  m_chow_ = 0;
  clear_has_m_chow();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_chow() const {
  return m_chow_;
}
inline void SM_majiang_role_battleresult::set_m_chow(::google::protobuf::int32 value) {
  set_has_m_chow();
  m_chow_ = value;
}

// optional int32 m_pong = 18;
inline bool SM_majiang_role_battleresult::has_m_pong() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_pong() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_pong() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SM_majiang_role_battleresult::clear_m_pong() {
  m_pong_ = 0;
  clear_has_m_pong();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_pong() const {
  return m_pong_;
}
inline void SM_majiang_role_battleresult::set_m_pong(::google::protobuf::int32 value) {
  set_has_m_pong();
  m_pong_ = value;
}

// optional int32 m_exposed = 19;
inline bool SM_majiang_role_battleresult::has_m_exposed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_exposed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_exposed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SM_majiang_role_battleresult::clear_m_exposed() {
  m_exposed_ = 0;
  clear_has_m_exposed();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_exposed() const {
  return m_exposed_;
}
inline void SM_majiang_role_battleresult::set_m_exposed(::google::protobuf::int32 value) {
  set_has_m_exposed();
  m_exposed_ = value;
}

// optional int32 m_concealed_kong = 20;
inline bool SM_majiang_role_battleresult::has_m_concealed_kong() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_concealed_kong() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_concealed_kong() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SM_majiang_role_battleresult::clear_m_concealed_kong() {
  m_concealed_kong_ = 0;
  clear_has_m_concealed_kong();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_concealed_kong() const {
  return m_concealed_kong_;
}
inline void SM_majiang_role_battleresult::set_m_concealed_kong(::google::protobuf::int32 value) {
  set_has_m_concealed_kong();
  m_concealed_kong_ = value;
}

// optional int32 m_patch = 21;
inline bool SM_majiang_role_battleresult::has_m_patch() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_patch() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_patch() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SM_majiang_role_battleresult::clear_m_patch() {
  m_patch_ = 0;
  clear_has_m_patch();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_patch() const {
  return m_patch_;
}
inline void SM_majiang_role_battleresult::set_m_patch(::google::protobuf::int32 value) {
  set_has_m_patch();
  m_patch_ = value;
}

// optional int32 m_up_score = 22;
inline bool SM_majiang_role_battleresult::has_m_up_score() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_up_score() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_up_score() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SM_majiang_role_battleresult::clear_m_up_score() {
  m_up_score_ = 0;
  clear_has_m_up_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_up_score() const {
  return m_up_score_;
}
inline void SM_majiang_role_battleresult::set_m_up_score(::google::protobuf::int32 value) {
  set_has_m_up_score();
  m_up_score_ = value;
}

// optional int32 m_down_score = 23;
inline bool SM_majiang_role_battleresult::has_m_down_score() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_down_score() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_down_score() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SM_majiang_role_battleresult::clear_m_down_score() {
  m_down_score_ = 0;
  clear_has_m_down_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_down_score() const {
  return m_down_score_;
}
inline void SM_majiang_role_battleresult::set_m_down_score(::google::protobuf::int32 value) {
  set_has_m_down_score();
  m_down_score_ = value;
}

// optional int32 m_result = 24;
inline bool SM_majiang_role_battleresult::has_m_result() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_result() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_result() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SM_majiang_role_battleresult::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_result() const {
  return m_result_;
}
inline void SM_majiang_role_battleresult::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 m_Exposed_score = 25;
inline bool SM_majiang_role_battleresult::has_m_exposed_score() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_exposed_score() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_exposed_score() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SM_majiang_role_battleresult::clear_m_exposed_score() {
  m_exposed_score_ = 0;
  clear_has_m_exposed_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_exposed_score() const {
  return m_exposed_score_;
}
inline void SM_majiang_role_battleresult::set_m_exposed_score(::google::protobuf::int32 value) {
  set_has_m_exposed_score();
  m_exposed_score_ = value;
}

// optional int32 m_smile_score = 26;
inline bool SM_majiang_role_battleresult::has_m_smile_score() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_smile_score() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_smile_score() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SM_majiang_role_battleresult::clear_m_smile_score() {
  m_smile_score_ = 0;
  clear_has_m_smile_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_smile_score() const {
  return m_smile_score_;
}
inline void SM_majiang_role_battleresult::set_m_smile_score(::google::protobuf::int32 value) {
  set_has_m_smile_score();
  m_smile_score_ = value;
}

// optional int32 m_mines_score = 27;
inline bool SM_majiang_role_battleresult::has_m_mines_score() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_mines_score() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_mines_score() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SM_majiang_role_battleresult::clear_m_mines_score() {
  m_mines_score_ = 0;
  clear_has_m_mines_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_mines_score() const {
  return m_mines_score_;
}
inline void SM_majiang_role_battleresult::set_m_mines_score(::google::protobuf::int32 value) {
  set_has_m_mines_score();
  m_mines_score_ = value;
}

// optional int32 m_song_score = 28;
inline bool SM_majiang_role_battleresult::has_m_song_score() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_song_score() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_song_score() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SM_majiang_role_battleresult::clear_m_song_score() {
  m_song_score_ = 0;
  clear_has_m_song_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_song_score() const {
  return m_song_score_;
}
inline void SM_majiang_role_battleresult::set_m_song_score(::google::protobuf::int32 value) {
  set_has_m_song_score();
  m_song_score_ = value;
}

// optional int32 m_hu_score = 29;
inline bool SM_majiang_role_battleresult::has_m_hu_score() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_m_hu_score() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SM_majiang_role_battleresult::clear_has_m_hu_score() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SM_majiang_role_battleresult::clear_m_hu_score() {
  m_hu_score_ = 0;
  clear_has_m_hu_score();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::m_hu_score() const {
  return m_hu_score_;
}
inline void SM_majiang_role_battleresult::set_m_hu_score(::google::protobuf::int32 value) {
  set_has_m_hu_score();
  m_hu_score_ = value;
}

// optional int32 g_card_type = 30;
inline bool SM_majiang_role_battleresult::has_g_card_type() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_card_type() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SM_majiang_role_battleresult::clear_has_g_card_type() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SM_majiang_role_battleresult::clear_g_card_type() {
  g_card_type_ = 0;
  clear_has_g_card_type();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_card_type() const {
  return g_card_type_;
}
inline void SM_majiang_role_battleresult::set_g_card_type(::google::protobuf::int32 value) {
  set_has_g_card_type();
  g_card_type_ = value;
}

// optional int32 g_player_num = 31;
inline bool SM_majiang_role_battleresult::has_g_player_num() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_player_num() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SM_majiang_role_battleresult::clear_has_g_player_num() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SM_majiang_role_battleresult::clear_g_player_num() {
  g_player_num_ = 0;
  clear_has_g_player_num();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_player_num() const {
  return g_player_num_;
}
inline void SM_majiang_role_battleresult::set_g_player_num(::google::protobuf::int32 value) {
  set_has_g_player_num();
  g_player_num_ = value;
}

// optional int32 g_rolecard_type = 32;
inline bool SM_majiang_role_battleresult::has_g_rolecard_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_rolecard_type() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SM_majiang_role_battleresult::clear_has_g_rolecard_type() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SM_majiang_role_battleresult::clear_g_rolecard_type() {
  g_rolecard_type_ = 0;
  clear_has_g_rolecard_type();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_rolecard_type() const {
  return g_rolecard_type_;
}
inline void SM_majiang_role_battleresult::set_g_rolecard_type(::google::protobuf::int32 value) {
  set_has_g_rolecard_type();
  g_rolecard_type_ = value;
}

// optional int32 g_is_win = 33;
inline bool SM_majiang_role_battleresult::has_g_is_win() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_is_win() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SM_majiang_role_battleresult::clear_has_g_is_win() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SM_majiang_role_battleresult::clear_g_is_win() {
  g_is_win_ = 0;
  clear_has_g_is_win();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_is_win() const {
  return g_is_win_;
}
inline void SM_majiang_role_battleresult::set_g_is_win(::google::protobuf::int32 value) {
  set_has_g_is_win();
  g_is_win_ = value;
}

// optional int32 g_is_dealer = 34;
inline bool SM_majiang_role_battleresult::has_g_is_dealer() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_is_dealer() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SM_majiang_role_battleresult::clear_has_g_is_dealer() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SM_majiang_role_battleresult::clear_g_is_dealer() {
  g_is_dealer_ = 0;
  clear_has_g_is_dealer();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_is_dealer() const {
  return g_is_dealer_;
}
inline void SM_majiang_role_battleresult::set_g_is_dealer(::google::protobuf::int32 value) {
  set_has_g_is_dealer();
  g_is_dealer_ = value;
}

// optional int32 g_is_discard = 35;
inline bool SM_majiang_role_battleresult::has_g_is_discard() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_is_discard() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SM_majiang_role_battleresult::clear_has_g_is_discard() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SM_majiang_role_battleresult::clear_g_is_discard() {
  g_is_discard_ = 0;
  clear_has_g_is_discard();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_is_discard() const {
  return g_is_discard_;
}
inline void SM_majiang_role_battleresult::set_g_is_discard(::google::protobuf::int32 value) {
  set_has_g_is_discard();
  g_is_discard_ = value;
}

// optional int32 g_fill_counts = 36;
inline bool SM_majiang_role_battleresult::has_g_fill_counts() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_fill_counts() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SM_majiang_role_battleresult::clear_has_g_fill_counts() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SM_majiang_role_battleresult::clear_g_fill_counts() {
  g_fill_counts_ = 0;
  clear_has_g_fill_counts();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_fill_counts() const {
  return g_fill_counts_;
}
inline void SM_majiang_role_battleresult::set_g_fill_counts(::google::protobuf::int32 value) {
  set_has_g_fill_counts();
  g_fill_counts_ = value;
}

// optional int32 g_compare_counts = 37;
inline bool SM_majiang_role_battleresult::has_g_compare_counts() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_compare_counts() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SM_majiang_role_battleresult::clear_has_g_compare_counts() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SM_majiang_role_battleresult::clear_g_compare_counts() {
  g_compare_counts_ = 0;
  clear_has_g_compare_counts();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_compare_counts() const {
  return g_compare_counts_;
}
inline void SM_majiang_role_battleresult::set_g_compare_counts(::google::protobuf::int32 value) {
  set_has_g_compare_counts();
  g_compare_counts_ = value;
}

// optional int32 g_look_counts = 38;
inline bool SM_majiang_role_battleresult::has_g_look_counts() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_look_counts() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SM_majiang_role_battleresult::clear_has_g_look_counts() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SM_majiang_role_battleresult::clear_g_look_counts() {
  g_look_counts_ = 0;
  clear_has_g_look_counts();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_look_counts() const {
  return g_look_counts_;
}
inline void SM_majiang_role_battleresult::set_g_look_counts(::google::protobuf::int32 value) {
  set_has_g_look_counts();
  g_look_counts_ = value;
}

// optional int32 g_call_counts = 39;
inline bool SM_majiang_role_battleresult::has_g_call_counts() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_call_counts() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SM_majiang_role_battleresult::clear_has_g_call_counts() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SM_majiang_role_battleresult::clear_g_call_counts() {
  g_call_counts_ = 0;
  clear_has_g_call_counts();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_call_counts() const {
  return g_call_counts_;
}
inline void SM_majiang_role_battleresult::set_g_call_counts(::google::protobuf::int32 value) {
  set_has_g_call_counts();
  g_call_counts_ = value;
}

// optional int32 g_role_counts = 40;
inline bool SM_majiang_role_battleresult::has_g_role_counts() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_role_counts() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SM_majiang_role_battleresult::clear_has_g_role_counts() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SM_majiang_role_battleresult::clear_g_role_counts() {
  g_role_counts_ = 0;
  clear_has_g_role_counts();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_role_counts() const {
  return g_role_counts_;
}
inline void SM_majiang_role_battleresult::set_g_role_counts(::google::protobuf::int32 value) {
  set_has_g_role_counts();
  g_role_counts_ = value;
}

// optional int32 g_total_counts = 41;
inline bool SM_majiang_role_battleresult::has_g_total_counts() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_total_counts() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SM_majiang_role_battleresult::clear_has_g_total_counts() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SM_majiang_role_battleresult::clear_g_total_counts() {
  g_total_counts_ = 0;
  clear_has_g_total_counts();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_total_counts() const {
  return g_total_counts_;
}
inline void SM_majiang_role_battleresult::set_g_total_counts(::google::protobuf::int32 value) {
  set_has_g_total_counts();
  g_total_counts_ = value;
}

// optional int32 g_exit_type = 42;
inline bool SM_majiang_role_battleresult::has_g_exit_type() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SM_majiang_role_battleresult::set_has_g_exit_type() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SM_majiang_role_battleresult::clear_has_g_exit_type() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SM_majiang_role_battleresult::clear_g_exit_type() {
  g_exit_type_ = 0;
  clear_has_g_exit_type();
}
inline ::google::protobuf::int32 SM_majiang_role_battleresult::g_exit_type() const {
  return g_exit_type_;
}
inline void SM_majiang_role_battleresult::set_g_exit_type(::google::protobuf::int32 value) {
  set_has_g_exit_type();
  g_exit_type_ = value;
}

// -------------------------------------------------------------------

// SM_majiang_battleResult

// required int32 m_BattleType = 1;
inline bool SM_majiang_battleResult::has_m_battletype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_battletype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_majiang_battleResult::clear_has_m_battletype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_majiang_battleResult::clear_m_battletype() {
  m_battletype_ = 0;
  clear_has_m_battletype();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_battletype() const {
  return m_battletype_;
}
inline void SM_majiang_battleResult::set_m_battletype(::google::protobuf::int32 value) {
  set_has_m_battletype();
  m_battletype_ = value;
}

// optional int32 m_FBTypeID = 2;
inline bool SM_majiang_battleResult::has_m_fbtypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_fbtypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_majiang_battleResult::clear_has_m_fbtypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_majiang_battleResult::clear_m_fbtypeid() {
  m_fbtypeid_ = 0;
  clear_has_m_fbtypeid();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_fbtypeid() const {
  return m_fbtypeid_;
}
inline void SM_majiang_battleResult::set_m_fbtypeid(::google::protobuf::int32 value) {
  set_has_m_fbtypeid();
  m_fbtypeid_ = value;
}

// optional int32 m_increMatchid = 3;
inline bool SM_majiang_battleResult::has_m_incrematchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_incrematchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_majiang_battleResult::clear_has_m_incrematchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_majiang_battleResult::clear_m_incrematchid() {
  m_incrematchid_ = 0;
  clear_has_m_incrematchid();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_incrematchid() const {
  return m_incrematchid_;
}
inline void SM_majiang_battleResult::set_m_incrematchid(::google::protobuf::int32 value) {
  set_has_m_incrematchid();
  m_incrematchid_ = value;
}

// optional int32 m_isMatchOverGolden = 4;
inline bool SM_majiang_battleResult::has_m_ismatchovergolden() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_ismatchovergolden() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_majiang_battleResult::clear_has_m_ismatchovergolden() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_majiang_battleResult::clear_m_ismatchovergolden() {
  m_ismatchovergolden_ = 0;
  clear_has_m_ismatchovergolden();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_ismatchovergolden() const {
  return m_ismatchovergolden_;
}
inline void SM_majiang_battleResult::set_m_ismatchovergolden(::google::protobuf::int32 value) {
  set_has_m_ismatchovergolden();
  m_ismatchovergolden_ = value;
}

// optional int32 m_isReallyResult = 5;
inline bool SM_majiang_battleResult::has_m_isreallyresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_isreallyresult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_majiang_battleResult::clear_has_m_isreallyresult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_majiang_battleResult::clear_m_isreallyresult() {
  m_isreallyresult_ = 0;
  clear_has_m_isreallyresult();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_isreallyresult() const {
  return m_isreallyresult_;
}
inline void SM_majiang_battleResult::set_m_isreallyresult(::google::protobuf::int32 value) {
  set_has_m_isreallyresult();
  m_isreallyresult_ = value;
}

// optional int32 m_playcount = 6;
inline bool SM_majiang_battleResult::has_m_playcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_playcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_majiang_battleResult::clear_has_m_playcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_majiang_battleResult::clear_m_playcount() {
  m_playcount_ = 0;
  clear_has_m_playcount();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_playcount() const {
  return m_playcount_;
}
inline void SM_majiang_battleResult::set_m_playcount(::google::protobuf::int32 value) {
  set_has_m_playcount();
  m_playcount_ = value;
}

// optional int32 m_monsterid = 7;
inline bool SM_majiang_battleResult::has_m_monsterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_monsterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_majiang_battleResult::clear_has_m_monsterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_majiang_battleResult::clear_m_monsterid() {
  m_monsterid_ = 0;
  clear_has_m_monsterid();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_monsterid() const {
  return m_monsterid_;
}
inline void SM_majiang_battleResult::set_m_monsterid(::google::protobuf::int32 value) {
  set_has_m_monsterid();
  m_monsterid_ = value;
}

// optional int32 m_roomcount = 8;
inline bool SM_majiang_battleResult::has_m_roomcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_roomcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_majiang_battleResult::clear_has_m_roomcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_majiang_battleResult::clear_m_roomcount() {
  m_roomcount_ = 0;
  clear_has_m_roomcount();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_roomcount() const {
  return m_roomcount_;
}
inline void SM_majiang_battleResult::set_m_roomcount(::google::protobuf::int32 value) {
  set_has_m_roomcount();
  m_roomcount_ = value;
}

// repeated .SM_majiang_role_battleresult m_roleresult = 9;
inline int SM_majiang_battleResult::m_roleresult_size() const {
  return m_roleresult_.size();
}
inline void SM_majiang_battleResult::clear_m_roleresult() {
  m_roleresult_.Clear();
}
inline const ::SM_majiang_role_battleresult& SM_majiang_battleResult::m_roleresult(int index) const {
  return m_roleresult_.Get(index);
}
inline ::SM_majiang_role_battleresult* SM_majiang_battleResult::mutable_m_roleresult(int index) {
  return m_roleresult_.Mutable(index);
}
inline ::SM_majiang_role_battleresult* SM_majiang_battleResult::add_m_roleresult() {
  return m_roleresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_majiang_role_battleresult >&
SM_majiang_battleResult::m_roleresult() const {
  return m_roleresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_majiang_role_battleresult >*
SM_majiang_battleResult::mutable_m_roleresult() {
  return &m_roleresult_;
}

// optional int32 m_is_dealer = 10;
inline bool SM_majiang_battleResult::has_m_is_dealer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SM_majiang_battleResult::set_has_m_is_dealer() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SM_majiang_battleResult::clear_has_m_is_dealer() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SM_majiang_battleResult::clear_m_is_dealer() {
  m_is_dealer_ = 0;
  clear_has_m_is_dealer();
}
inline ::google::protobuf::int32 SM_majiang_battleResult::m_is_dealer() const {
  return m_is_dealer_;
}
inline void SM_majiang_battleResult::set_m_is_dealer(::google::protobuf::int32 value) {
  set_has_m_is_dealer();
  m_is_dealer_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_battle_2etxt__INCLUDED
