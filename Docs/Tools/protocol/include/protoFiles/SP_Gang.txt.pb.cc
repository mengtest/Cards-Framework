// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Gang.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Gang.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_GangBuyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangBuyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangOreOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangOreOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MiningRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MiningRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MarchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MarchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRaceSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRaceSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRaceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRaceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRace_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRacePare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRacePare_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ReturnGangFightJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ReturnGangFightJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_NewReadyPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_NewReadyPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PlayerQuitReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PlayerQuitReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangRaceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangRaceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFightTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFightTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFightResultMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFightResultMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFightPeopleCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFightPeopleCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangFightPeople_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangFightPeople_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DBGangActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DBGangActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DBAllGangSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DBAllGangSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DBGangSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DBGangSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_DBGangExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_DBGangExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllGangInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllGangInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GangDataChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GangDataChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_tAllGangData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_tAllGangData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_tGangData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_tGangData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_LifeTreeRoleInfo_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_LifeTreeRoleInfo_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fGang_2etxt() {
  protobuf_AddDesc_SP_5fGang_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Gang.txt");
  GOOGLE_CHECK(file != NULL);
  GM_GangBuyRequest_descriptor_ = file->message_type(0);
  static const int GM_GangBuyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangBuyRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangBuyRequest, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangBuyRequest, count_),
  };
  GM_GangBuyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangBuyRequest_descriptor_,
      GM_GangBuyRequest::default_instance_,
      GM_GangBuyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangBuyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangBuyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangBuyRequest));
  GM_GangOreOperate_descriptor_ = file->message_type(1);
  static const int GM_GangOreOperate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangOreOperate, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangOreOperate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangOreOperate, num_),
  };
  GM_GangOreOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangOreOperate_descriptor_,
      GM_GangOreOperate::default_instance_,
      GM_GangOreOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangOreOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangOreOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangOreOperate));
  GM_MiningRequest_descriptor_ = file->message_type(2);
  static const int GM_MiningRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MiningRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MiningRequest, mineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MiningRequest, pickaxeid_),
  };
  GM_MiningRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MiningRequest_descriptor_,
      GM_MiningRequest::default_instance_,
      GM_MiningRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MiningRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MiningRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MiningRequest));
  GM_GangSimpleInfo_descriptor_ = file->message_type(3);
  static const int GM_GangSimpleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangSimpleInfo, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangSimpleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangSimpleInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangSimpleInfo, power_),
  };
  GM_GangSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangSimpleInfo_descriptor_,
      GM_GangSimpleInfo::default_instance_,
      GM_GangSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangSimpleInfo));
  GM_GangApplyInfo_descriptor_ = file->message_type(4);
  static const int GM_GangApplyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangApplyInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangApplyInfo, gangsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangApplyInfo, myganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangApplyInfo, totalapply_),
  };
  GM_GangApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangApplyInfo_descriptor_,
      GM_GangApplyInfo::default_instance_,
      GM_GangApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangApplyInfo));
  GM_MarchInfo_descriptor_ = file->message_type(5);
  static const int GM_MarchInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarchInfo, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarchInfo, weekstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarchInfo, starttime_),
  };
  GM_MarchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MarchInfo_descriptor_,
      GM_MarchInfo::default_instance_,
      GM_MarchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MarchInfo));
  GM_GangRaceSimpleInfo_descriptor_ = file->message_type(6);
  static const int GM_GangRaceSimpleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, fashioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, ganggmid_),
  };
  GM_GangRaceSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRaceSimpleInfo_descriptor_,
      GM_GangRaceSimpleInfo::default_instance_,
      GM_GangRaceSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRaceSimpleInfo));
  GM_GangRaceData_descriptor_ = file->message_type(7);
  static const int GM_GangRaceData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, marchinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, joinedpeople_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, yourgangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, yourgangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, othergangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, othergangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, readytime_),
  };
  GM_GangRaceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRaceData_descriptor_,
      GM_GangRaceData::default_instance_,
      GM_GangRaceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRaceData));
  GM_GangRace_descriptor_ = file->message_type(8);
  static const int GM_GangRace_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, targetgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, people_),
  };
  GM_GangRace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRace_descriptor_,
      GM_GangRace::default_instance_,
      GM_GangRace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRace));
  GM_GangRacePare_descriptor_ = file->message_type(9);
  static const int GM_GangRacePare_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRacePare, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRacePare, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRacePare, racelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRacePare, timelast_),
  };
  GM_GangRacePare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRacePare_descriptor_,
      GM_GangRacePare::default_instance_,
      GM_GangRacePare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRacePare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRacePare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRacePare));
  GM_PlayerReady_descriptor_ = file->message_type(10);
  static const int GM_PlayerReady_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerReady, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerReady, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerReady, ganggmid_),
  };
  GM_PlayerReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerReady_descriptor_,
      GM_PlayerReady::default_instance_,
      GM_PlayerReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerReady));
  GM_ReturnGangFightJoin_descriptor_ = file->message_type(11);
  static const int GM_ReturnGangFightJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnGangFightJoin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnGangFightJoin, playerlist_),
  };
  GM_ReturnGangFightJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ReturnGangFightJoin_descriptor_,
      GM_ReturnGangFightJoin::default_instance_,
      GM_ReturnGangFightJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnGangFightJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ReturnGangFightJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ReturnGangFightJoin));
  GM_NewReadyPlayer_descriptor_ = file->message_type(12);
  static const int GM_NewReadyPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NewReadyPlayer, newplayer_),
  };
  GM_NewReadyPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_NewReadyPlayer_descriptor_,
      GM_NewReadyPlayer::default_instance_,
      GM_NewReadyPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NewReadyPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_NewReadyPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_NewReadyPlayer));
  GM_PlayerQuitReady_descriptor_ = file->message_type(13);
  static const int GM_PlayerQuitReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerQuitReady, quitplayer_),
  };
  GM_PlayerQuitReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PlayerQuitReady_descriptor_,
      GM_PlayerQuitReady::default_instance_,
      GM_PlayerQuitReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerQuitReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PlayerQuitReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PlayerQuitReady));
  GM_GangRaceResult_descriptor_ = file->message_type(14);
  static const int GM_GangRaceResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceResult, result_),
  };
  GM_GangRaceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangRaceResult_descriptor_,
      GM_GangRaceResult::default_instance_,
      GM_GangRaceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangRaceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangRaceResult));
  GM_GangFightTime_descriptor_ = file->message_type(15);
  static const int GM_GangFightTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightTime, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightTime, race_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightTime, race_state_),
  };
  GM_GangFightTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFightTime_descriptor_,
      GM_GangFightTime::default_instance_,
      GM_GangFightTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFightTime));
  GM_GangFightResultMember_descriptor_ = file->message_type(16);
  static const int GM_GangFightResultMember_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, die_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, persent_),
  };
  GM_GangFightResultMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFightResultMember_descriptor_,
      GM_GangFightResultMember::default_instance_,
      GM_GangFightResultMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResultMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFightResultMember));
  GM_GangFightResult_descriptor_ = file->message_type(17);
  static const int GM_GangFightResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, ourteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, usetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, ourpeople_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, ourname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, otherpeople_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, othername_),
  };
  GM_GangFightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFightResult_descriptor_,
      GM_GangFightResult::default_instance_,
      GM_GangFightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFightResult));
  GM_GangFightPeopleCount_descriptor_ = file->message_type(18);
  static const int GM_GangFightPeopleCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeopleCount, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeopleCount, people_),
  };
  GM_GangFightPeopleCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFightPeopleCount_descriptor_,
      GM_GangFightPeopleCount::default_instance_,
      GM_GangFightPeopleCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeopleCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeopleCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFightPeopleCount));
  GM_GangFightPeople_descriptor_ = file->message_type(19);
  static const int GM_GangFightPeople_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeople, peopledata_),
  };
  GM_GangFightPeople_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangFightPeople_descriptor_,
      GM_GangFightPeople::default_instance_,
      GM_GangFightPeople_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeople, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangFightPeople, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangFightPeople));
  GM_DBGangActive_descriptor_ = file->message_type(20);
  static const int GM_DBGangActive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangActive, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangActive, lucknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangActive, lucktime_),
  };
  GM_DBGangActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DBGangActive_descriptor_,
      GM_DBGangActive::default_instance_,
      GM_DBGangActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DBGangActive));
  GM_DBAllGangSkill_descriptor_ = file->message_type(21);
  static const int GM_DBAllGangSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBAllGangSkill, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBAllGangSkill, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBAllGangSkill, skills_),
  };
  GM_DBAllGangSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DBAllGangSkill_descriptor_,
      GM_DBAllGangSkill::default_instance_,
      GM_DBAllGangSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBAllGangSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBAllGangSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DBAllGangSkill));
  GM_DBGangSkill_descriptor_ = file->message_type(22);
  static const int GM_DBGangSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangSkill, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangSkill, skilllv_),
  };
  GM_DBGangSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DBGangSkill_descriptor_,
      GM_DBGangSkill::default_instance_,
      GM_DBGangSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DBGangSkill));
  GM_DBGangExit_descriptor_ = file->message_type(23);
  static const int GM_DBGangExit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangExit, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangExit, exittime_),
  };
  GM_DBGangExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_DBGangExit_descriptor_,
      GM_DBGangExit::default_instance_,
      GM_DBGangExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_DBGangExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_DBGangExit));
  GM_AllGangInvite_descriptor_ = file->message_type(24);
  static const int GM_AllGangInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInvite, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInvite, invites_),
  };
  GM_AllGangInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllGangInvite_descriptor_,
      GM_AllGangInvite::default_instance_,
      GM_AllGangInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllGangInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllGangInvite));
  GM_GangInvite_descriptor_ = file->message_type(25);
  static const int GM_GangInvite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, ganggmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, operid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, opername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, flag_),
  };
  GM_GangInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangInvite_descriptor_,
      GM_GangInvite::default_instance_,
      GM_GangInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangInvite));
  GM_GangDataChange_descriptor_ = file->message_type(26);
  static const int GM_GangDataChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangDataChange, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangDataChange, signflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangDataChange, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangDataChange, gangcontribute_),
  };
  GM_GangDataChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GangDataChange_descriptor_,
      GM_GangDataChange::default_instance_,
      GM_GangDataChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangDataChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GangDataChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GangDataChange));
  DB_tAllGangData_descriptor_ = file->message_type(27);
  static const int DB_tAllGangData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tAllGangData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tAllGangData, gangdata_),
  };
  DB_tAllGangData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_tAllGangData_descriptor_,
      DB_tAllGangData::default_instance_,
      DB_tAllGangData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tAllGangData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tAllGangData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_tAllGangData));
  DB_tGangData_descriptor_ = file->message_type(28);
  static const int DB_tGangData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, templv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, shoplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, pronoce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, uplvtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, blesscnt_),
  };
  DB_tGangData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_tGangData_descriptor_,
      DB_tGangData::default_instance_,
      DB_tGangData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_tGangData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_tGangData));
  DB_LifeTreeRoleInfo_Return_descriptor_ = file->message_type(29);
  static const int DB_LifeTreeRoleInfo_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LifeTreeRoleInfo_Return, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LifeTreeRoleInfo_Return, m_lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LifeTreeRoleInfo_Return, m_count_),
  };
  DB_LifeTreeRoleInfo_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_LifeTreeRoleInfo_Return_descriptor_,
      DB_LifeTreeRoleInfo_Return::default_instance_,
      DB_LifeTreeRoleInfo_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LifeTreeRoleInfo_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_LifeTreeRoleInfo_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_LifeTreeRoleInfo_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fGang_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangBuyRequest_descriptor_, &GM_GangBuyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangOreOperate_descriptor_, &GM_GangOreOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MiningRequest_descriptor_, &GM_MiningRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangSimpleInfo_descriptor_, &GM_GangSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangApplyInfo_descriptor_, &GM_GangApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MarchInfo_descriptor_, &GM_MarchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRaceSimpleInfo_descriptor_, &GM_GangRaceSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRaceData_descriptor_, &GM_GangRaceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRace_descriptor_, &GM_GangRace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRacePare_descriptor_, &GM_GangRacePare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerReady_descriptor_, &GM_PlayerReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ReturnGangFightJoin_descriptor_, &GM_ReturnGangFightJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_NewReadyPlayer_descriptor_, &GM_NewReadyPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PlayerQuitReady_descriptor_, &GM_PlayerQuitReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangRaceResult_descriptor_, &GM_GangRaceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFightTime_descriptor_, &GM_GangFightTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFightResultMember_descriptor_, &GM_GangFightResultMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFightResult_descriptor_, &GM_GangFightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFightPeopleCount_descriptor_, &GM_GangFightPeopleCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangFightPeople_descriptor_, &GM_GangFightPeople::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DBGangActive_descriptor_, &GM_DBGangActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DBAllGangSkill_descriptor_, &GM_DBAllGangSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DBGangSkill_descriptor_, &GM_DBGangSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_DBGangExit_descriptor_, &GM_DBGangExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllGangInvite_descriptor_, &GM_AllGangInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangInvite_descriptor_, &GM_GangInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GangDataChange_descriptor_, &GM_GangDataChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_tAllGangData_descriptor_, &DB_tAllGangData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_tGangData_descriptor_, &DB_tGangData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_LifeTreeRoleInfo_Return_descriptor_, &DB_LifeTreeRoleInfo_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fGang_2etxt() {
  delete GM_GangBuyRequest::default_instance_;
  delete GM_GangBuyRequest_reflection_;
  delete GM_GangOreOperate::default_instance_;
  delete GM_GangOreOperate_reflection_;
  delete GM_MiningRequest::default_instance_;
  delete GM_MiningRequest_reflection_;
  delete GM_GangSimpleInfo::default_instance_;
  delete GM_GangSimpleInfo_reflection_;
  delete GM_GangApplyInfo::default_instance_;
  delete GM_GangApplyInfo_reflection_;
  delete GM_MarchInfo::default_instance_;
  delete GM_MarchInfo_reflection_;
  delete GM_GangRaceSimpleInfo::default_instance_;
  delete GM_GangRaceSimpleInfo_reflection_;
  delete GM_GangRaceData::default_instance_;
  delete GM_GangRaceData_reflection_;
  delete GM_GangRace::default_instance_;
  delete GM_GangRace_reflection_;
  delete GM_GangRacePare::default_instance_;
  delete GM_GangRacePare_reflection_;
  delete GM_PlayerReady::default_instance_;
  delete GM_PlayerReady_reflection_;
  delete GM_ReturnGangFightJoin::default_instance_;
  delete GM_ReturnGangFightJoin_reflection_;
  delete GM_NewReadyPlayer::default_instance_;
  delete GM_NewReadyPlayer_reflection_;
  delete GM_PlayerQuitReady::default_instance_;
  delete GM_PlayerQuitReady_reflection_;
  delete GM_GangRaceResult::default_instance_;
  delete GM_GangRaceResult_reflection_;
  delete GM_GangFightTime::default_instance_;
  delete GM_GangFightTime_reflection_;
  delete GM_GangFightResultMember::default_instance_;
  delete GM_GangFightResultMember_reflection_;
  delete GM_GangFightResult::default_instance_;
  delete GM_GangFightResult_reflection_;
  delete GM_GangFightPeopleCount::default_instance_;
  delete GM_GangFightPeopleCount_reflection_;
  delete GM_GangFightPeople::default_instance_;
  delete GM_GangFightPeople_reflection_;
  delete GM_DBGangActive::default_instance_;
  delete GM_DBGangActive_reflection_;
  delete GM_DBAllGangSkill::default_instance_;
  delete GM_DBAllGangSkill_reflection_;
  delete GM_DBGangSkill::default_instance_;
  delete GM_DBGangSkill_reflection_;
  delete GM_DBGangExit::default_instance_;
  delete GM_DBGangExit_reflection_;
  delete GM_AllGangInvite::default_instance_;
  delete GM_AllGangInvite_reflection_;
  delete GM_GangInvite::default_instance_;
  delete GM_GangInvite_reflection_;
  delete GM_GangDataChange::default_instance_;
  delete GM_GangDataChange_reflection_;
  delete DB_tAllGangData::default_instance_;
  delete DB_tAllGangData_reflection_;
  delete DB_tGangData::default_instance_;
  delete DB_tGangData_reflection_;
  delete DB_LifeTreeRoleInfo_Return::default_instance_;
  delete DB_LifeTreeRoleInfo_Return_reflection_;
}

void protobuf_AddDesc_SP_5fGang_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SP_Gang.txt\"B\n\021GM_GangBuyRequest\022\016\n\006ro"
    "leId\030\001 \002(\005\022\016\n\006itemId\030\002 \002(\005\022\r\n\005count\030\003 \002("
    "\005\">\n\021GM_GangOreOperate\022\016\n\006roleId\030\001 \002(\005\022\014"
    "\n\004type\030\002 \002(\005\022\013\n\003num\030\003 \002(\005\"E\n\020GM_MiningRe"
    "quest\022\016\n\006roleId\030\001 \002(\005\022\016\n\006mineId\030\002 \002(\005\022\021\n"
    "\tpickaxeId\030\003 \002(\003\"L\n\021GM_GangSimpleInfo\022\014\n"
    "\004gmid\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\014\n\004rank\030\003 \002(\005\022"
    "\r\n\005power\030\004 \002(\005\"\205\001\n\020GM_GangApplyInfo\022\016\n\006r"
    "esult\030\001 \002(\005\022%\n\tgangsinfo\030\002 \003(\0132\022.GM_Gang"
    "SimpleInfo\022&\n\nmyganginfo\030\003 \003(\0132\022.GM_Gang"
    "SimpleInfo\022\022\n\ntotalapply\030\004 \001(\005\"C\n\014GM_Mar"
    "chInfo\022\r\n\005round\030\001 \002(\005\022\021\n\tweekstart\030\002 \002(\005"
    "\022\021\n\tstarttime\030\003 \002(\005\"s\n\025GM_GangRaceSimple"
    "Info\022\016\n\006roleid\030\001 \002(\005\022\017\n\007equipId\030\003 \002(\005\022\023\n"
    "\013fashionInfo\030\004 \003(\005\022\022\n\nprofession\030\002 \002(\005\022\020"
    "\n\010ganggmid\030\005 \002(\003\"\320\001\n\017GM_GangRaceData\022\016\n\006"
    "result\030\003 \002(\005\022\014\n\004race\030\002 \002(\005\022 \n\tmarchinfo\030"
    "\004 \003(\0132\r.GM_MarchInfo\022\024\n\014joinedpeople\030\005 \002"
    "(\005\022\022\n\nyourgangid\030\007 \002(\003\022\024\n\014yourgangname\030\t"
    " \002(\t\022\023\n\013othergangid\030\n \001(\003\022\025\n\rothergangna"
    "me\030\013 \001(\t\022\021\n\treadyTime\030\010 \001(\005\"k\n\013GM_GangRa"
    "ce\022\014\n\004gmid\030\001 \002(\003\022\022\n\ntargetgmid\030\003 \001(\003\022\r\n\005"
    "level\030\002 \001(\005\022\014\n\004name\030\004 \001(\t\022\r\n\005power\030\005 \001(\005"
    "\022\016\n\006people\030\006 \001(\005\"a\n\017GM_GangRacePare\022\016\n\006r"
    "esult\030\002 \002(\005\022\014\n\004race\030\003 \002(\005\022\036\n\010racelist\030\001 "
    "\003(\0132\014.GM_GangRace\022\020\n\010timelast\030\007 \001(\005\"@\n\016G"
    "M_PlayerReady\022\016\n\006roleID\030\001 \002(\r\022\014\n\004name\030\002 "
    "\002(\t\022\020\n\010ganggmid\030\003 \002(\003\"M\n\026GM_ReturnGangFi"
    "ghtJoin\022\016\n\006result\030\001 \002(\005\022#\n\nplayerList\030\002 "
    "\003(\0132\017.GM_PlayerReady\"7\n\021GM_NewReadyPlaye"
    "r\022\"\n\tnewplayer\030\001 \002(\0132\017.GM_PlayerReady\"(\n"
    "\022GM_PlayerQuitReady\022\022\n\nquitplayer\030\001 \002(\r\""
    "#\n\021GM_GangRaceResult\022\016\n\006result\030\001 \002(\005\"M\n\020"
    "GM_GangFightTime\022\022\n\napply_time\030\001 \002(\005\022\021\n\t"
    "race_time\030\002 \003(\005\022\022\n\nrace_state\030\003 \002(\005\"c\n\030G"
    "M_GangFightResultMember\022\014\n\004name\030\001 \002(\t\022\014\n"
    "\004kill\030\002 \002(\005\022\013\n\003die\030\003 \002(\005\022\r\n\005honor\030\004 \002(\005\022"
    "\017\n\007persent\030\005 \002(\005\"\255\001\n\022GM_GangFightResult\022"
    "*\n\007ourteam\030\001 \003(\0132\031.GM_GangFightResultMem"
    "ber\022\017\n\007usetime\030\003 \002(\005\022\016\n\006result\030\004 \002(\005\022\021\n\t"
    "ourpeople\030\005 \002(\005\022\017\n\007ourname\030\006 \002(\t\022\023\n\013othe"
    "rpeople\030\007 \002(\005\022\021\n\tothername\030\010 \002(\t\"7\n\027GM_G"
    "angFightPeopleCount\022\014\n\004camp\030\001 \002(\005\022\016\n\006peo"
    "ple\030\002 \002(\005\"B\n\022GM_GangFightPeople\022,\n\npeopl"
    "edata\030\001 \003(\0132\030.GM_GangFightPeopleCount\"D\n"
    "\017GM_DBGangActive\022\016\n\006roleId\030\001 \002(\005\022\017\n\007luck"
    "Num\030\002 \002(\005\022\020\n\010luckTime\030\003 \002(\005\"S\n\021GM_DBAllG"
    "angSkill\022\016\n\006roleId\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\022"
    "\037\n\006skills\030\003 \003(\0132\017.GM_DBGangSkill\"B\n\016GM_D"
    "BGangSkill\022\016\n\006roleId\030\001 \002(\005\022\017\n\007skillId\030\002 "
    "\002(\005\022\017\n\007skillLv\030\003 \002(\005\"1\n\rGM_DBGangExit\022\016\n"
    "\006roleId\030\001 \002(\005\022\020\n\010exitTime\030\002 \002(\005\"B\n\020GM_Al"
    "lGangInvite\022\r\n\005count\030\001 \002(\005\022\037\n\007invites\030\002 "
    "\003(\0132\016.GM_GangInvite\"s\n\rGM_GangInvite\022\016\n\006"
    "roleId\030\001 \002(\005\022\020\n\010roleName\030\002 \001(\t\022\020\n\010gangGm"
    "id\030\003 \002(\003\022\016\n\006operId\030\004 \002(\005\022\020\n\010operName\030\005 \001"
    "(\t\022\014\n\004flag\030\006 \001(\005\"a\n\021GM_GangDataChange\022\016\n"
    "\006roleId\030\001 \002(\005\022\020\n\010signFlag\030\002 \001(\005\022\022\n\nskill"
    "Level\030\003 \001(\005\022\026\n\016gangContribute\030\004 \001(\005\"A\n\017D"
    "B_tAllGangData\022\r\n\005count\030\001 \002(\005\022\037\n\010gangdat"
    "a\030\002 \003(\0132\r.DB_tGangData\"\250\001\n\014DB_tGangData\022"
    "\014\n\004gmid\030\001 \002(\003\022\014\n\004name\030\002 \001(\t\022\013\n\003exp\030\003 \001(\005"
    "\022\n\n\002lv\030\004 \001(\005\022\016\n\006templv\030\005 \001(\005\022\016\n\006shoplv\030\006"
    " \001(\005\022\016\n\006notice\030\007 \001(\t\022\017\n\007pronoce\030\010 \001(\t\022\020\n"
    "\010uplvtime\030\t \001(\005\022\020\n\010blesscnt\030\n \001(\005\"S\n\032DB_"
    "LifeTreeRoleInfo_Return\022\020\n\010m_RoleId\030\001 \002("
    "\005\022\022\n\nm_LastTime\030\002 \002(\005\022\017\n\007m_Count\030\003 \002(\005", 2678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Gang.txt", &protobuf_RegisterTypes);
  GM_GangBuyRequest::default_instance_ = new GM_GangBuyRequest();
  GM_GangOreOperate::default_instance_ = new GM_GangOreOperate();
  GM_MiningRequest::default_instance_ = new GM_MiningRequest();
  GM_GangSimpleInfo::default_instance_ = new GM_GangSimpleInfo();
  GM_GangApplyInfo::default_instance_ = new GM_GangApplyInfo();
  GM_MarchInfo::default_instance_ = new GM_MarchInfo();
  GM_GangRaceSimpleInfo::default_instance_ = new GM_GangRaceSimpleInfo();
  GM_GangRaceData::default_instance_ = new GM_GangRaceData();
  GM_GangRace::default_instance_ = new GM_GangRace();
  GM_GangRacePare::default_instance_ = new GM_GangRacePare();
  GM_PlayerReady::default_instance_ = new GM_PlayerReady();
  GM_ReturnGangFightJoin::default_instance_ = new GM_ReturnGangFightJoin();
  GM_NewReadyPlayer::default_instance_ = new GM_NewReadyPlayer();
  GM_PlayerQuitReady::default_instance_ = new GM_PlayerQuitReady();
  GM_GangRaceResult::default_instance_ = new GM_GangRaceResult();
  GM_GangFightTime::default_instance_ = new GM_GangFightTime();
  GM_GangFightResultMember::default_instance_ = new GM_GangFightResultMember();
  GM_GangFightResult::default_instance_ = new GM_GangFightResult();
  GM_GangFightPeopleCount::default_instance_ = new GM_GangFightPeopleCount();
  GM_GangFightPeople::default_instance_ = new GM_GangFightPeople();
  GM_DBGangActive::default_instance_ = new GM_DBGangActive();
  GM_DBAllGangSkill::default_instance_ = new GM_DBAllGangSkill();
  GM_DBGangSkill::default_instance_ = new GM_DBGangSkill();
  GM_DBGangExit::default_instance_ = new GM_DBGangExit();
  GM_AllGangInvite::default_instance_ = new GM_AllGangInvite();
  GM_GangInvite::default_instance_ = new GM_GangInvite();
  GM_GangDataChange::default_instance_ = new GM_GangDataChange();
  DB_tAllGangData::default_instance_ = new DB_tAllGangData();
  DB_tGangData::default_instance_ = new DB_tGangData();
  DB_LifeTreeRoleInfo_Return::default_instance_ = new DB_LifeTreeRoleInfo_Return();
  GM_GangBuyRequest::default_instance_->InitAsDefaultInstance();
  GM_GangOreOperate::default_instance_->InitAsDefaultInstance();
  GM_MiningRequest::default_instance_->InitAsDefaultInstance();
  GM_GangSimpleInfo::default_instance_->InitAsDefaultInstance();
  GM_GangApplyInfo::default_instance_->InitAsDefaultInstance();
  GM_MarchInfo::default_instance_->InitAsDefaultInstance();
  GM_GangRaceSimpleInfo::default_instance_->InitAsDefaultInstance();
  GM_GangRaceData::default_instance_->InitAsDefaultInstance();
  GM_GangRace::default_instance_->InitAsDefaultInstance();
  GM_GangRacePare::default_instance_->InitAsDefaultInstance();
  GM_PlayerReady::default_instance_->InitAsDefaultInstance();
  GM_ReturnGangFightJoin::default_instance_->InitAsDefaultInstance();
  GM_NewReadyPlayer::default_instance_->InitAsDefaultInstance();
  GM_PlayerQuitReady::default_instance_->InitAsDefaultInstance();
  GM_GangRaceResult::default_instance_->InitAsDefaultInstance();
  GM_GangFightTime::default_instance_->InitAsDefaultInstance();
  GM_GangFightResultMember::default_instance_->InitAsDefaultInstance();
  GM_GangFightResult::default_instance_->InitAsDefaultInstance();
  GM_GangFightPeopleCount::default_instance_->InitAsDefaultInstance();
  GM_GangFightPeople::default_instance_->InitAsDefaultInstance();
  GM_DBGangActive::default_instance_->InitAsDefaultInstance();
  GM_DBAllGangSkill::default_instance_->InitAsDefaultInstance();
  GM_DBGangSkill::default_instance_->InitAsDefaultInstance();
  GM_DBGangExit::default_instance_->InitAsDefaultInstance();
  GM_AllGangInvite::default_instance_->InitAsDefaultInstance();
  GM_GangInvite::default_instance_->InitAsDefaultInstance();
  GM_GangDataChange::default_instance_->InitAsDefaultInstance();
  DB_tAllGangData::default_instance_->InitAsDefaultInstance();
  DB_tGangData::default_instance_->InitAsDefaultInstance();
  DB_LifeTreeRoleInfo_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fGang_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fGang_2etxt {
  StaticDescriptorInitializer_SP_5fGang_2etxt() {
    protobuf_AddDesc_SP_5fGang_2etxt();
  }
} static_descriptor_initializer_SP_5fGang_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_GangBuyRequest::kRoleIdFieldNumber;
const int GM_GangBuyRequest::kItemIdFieldNumber;
const int GM_GangBuyRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GM_GangBuyRequest::GM_GangBuyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangBuyRequest::InitAsDefaultInstance() {
}

GM_GangBuyRequest::GM_GangBuyRequest(const GM_GangBuyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangBuyRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  itemid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangBuyRequest::~GM_GangBuyRequest() {
  SharedDtor();
}

void GM_GangBuyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangBuyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangBuyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangBuyRequest_descriptor_;
}

const GM_GangBuyRequest& GM_GangBuyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangBuyRequest* GM_GangBuyRequest::default_instance_ = NULL;

GM_GangBuyRequest* GM_GangBuyRequest::New() const {
  return new GM_GangBuyRequest;
}

void GM_GangBuyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    itemid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangBuyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangBuyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangBuyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangBuyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangBuyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangBuyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangBuyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangBuyRequest::MergeFrom(const GM_GangBuyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangBuyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangBuyRequest::CopyFrom(const GM_GangBuyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangBuyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_GangBuyRequest::Swap(GM_GangBuyRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangBuyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangBuyRequest_descriptor_;
  metadata.reflection = GM_GangBuyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangOreOperate::kRoleIdFieldNumber;
const int GM_GangOreOperate::kTypeFieldNumber;
const int GM_GangOreOperate::kNumFieldNumber;
#endif  // !_MSC_VER

GM_GangOreOperate::GM_GangOreOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangOreOperate::InitAsDefaultInstance() {
}

GM_GangOreOperate::GM_GangOreOperate(const GM_GangOreOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangOreOperate::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangOreOperate::~GM_GangOreOperate() {
  SharedDtor();
}

void GM_GangOreOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangOreOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangOreOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangOreOperate_descriptor_;
}

const GM_GangOreOperate& GM_GangOreOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangOreOperate* GM_GangOreOperate::default_instance_ = NULL;

GM_GangOreOperate* GM_GangOreOperate::New() const {
  return new GM_GangOreOperate;
}

void GM_GangOreOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    type_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangOreOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangOreOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangOreOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangOreOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangOreOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangOreOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangOreOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangOreOperate::MergeFrom(const GM_GangOreOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangOreOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangOreOperate::CopyFrom(const GM_GangOreOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangOreOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_GangOreOperate::Swap(GM_GangOreOperate* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangOreOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangOreOperate_descriptor_;
  metadata.reflection = GM_GangOreOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MiningRequest::kRoleIdFieldNumber;
const int GM_MiningRequest::kMineIdFieldNumber;
const int GM_MiningRequest::kPickaxeIdFieldNumber;
#endif  // !_MSC_VER

GM_MiningRequest::GM_MiningRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MiningRequest::InitAsDefaultInstance() {
}

GM_MiningRequest::GM_MiningRequest(const GM_MiningRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MiningRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  mineid_ = 0;
  pickaxeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MiningRequest::~GM_MiningRequest() {
  SharedDtor();
}

void GM_MiningRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MiningRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MiningRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MiningRequest_descriptor_;
}

const GM_MiningRequest& GM_MiningRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_MiningRequest* GM_MiningRequest::default_instance_ = NULL;

GM_MiningRequest* GM_MiningRequest::New() const {
  return new GM_MiningRequest;
}

void GM_MiningRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    mineid_ = 0;
    pickaxeid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MiningRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mineId;
        break;
      }

      // required int32 mineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mineid_)));
          set_has_mineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pickaxeId;
        break;
      }

      // required int64 pickaxeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pickaxeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pickaxeid_)));
          set_has_pickaxeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MiningRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 mineId = 2;
  if (has_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mineid(), output);
  }

  // required int64 pickaxeId = 3;
  if (has_pickaxeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pickaxeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MiningRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 mineId = 2;
  if (has_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mineid(), target);
  }

  // required int64 pickaxeId = 3;
  if (has_pickaxeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pickaxeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MiningRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 mineId = 2;
    if (has_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mineid());
    }

    // required int64 pickaxeId = 3;
    if (has_pickaxeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pickaxeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MiningRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MiningRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MiningRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MiningRequest::MergeFrom(const GM_MiningRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_mineid()) {
      set_mineid(from.mineid());
    }
    if (from.has_pickaxeid()) {
      set_pickaxeid(from.pickaxeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MiningRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MiningRequest::CopyFrom(const GM_MiningRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MiningRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_MiningRequest::Swap(GM_MiningRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(mineid_, other->mineid_);
    std::swap(pickaxeid_, other->pickaxeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MiningRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MiningRequest_descriptor_;
  metadata.reflection = GM_MiningRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangSimpleInfo::kGmidFieldNumber;
const int GM_GangSimpleInfo::kNameFieldNumber;
const int GM_GangSimpleInfo::kRankFieldNumber;
const int GM_GangSimpleInfo::kPowerFieldNumber;
#endif  // !_MSC_VER

GM_GangSimpleInfo::GM_GangSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangSimpleInfo::InitAsDefaultInstance() {
}

GM_GangSimpleInfo::GM_GangSimpleInfo(const GM_GangSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangSimpleInfo::~GM_GangSimpleInfo() {
  SharedDtor();
}

void GM_GangSimpleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangSimpleInfo_descriptor_;
}

const GM_GangSimpleInfo& GM_GangSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangSimpleInfo* GM_GangSimpleInfo::default_instance_ = NULL;

GM_GangSimpleInfo* GM_GangSimpleInfo::New() const {
  return new GM_GangSimpleInfo;
}

void GM_GangSimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }

      // required int32 power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // required int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // required int32 power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangSimpleInfo::MergeFrom(const GM_GangSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangSimpleInfo::CopyFrom(const GM_GangSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangSimpleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_GangSimpleInfo::Swap(GM_GangSimpleInfo* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangSimpleInfo_descriptor_;
  metadata.reflection = GM_GangSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangApplyInfo::kResultFieldNumber;
const int GM_GangApplyInfo::kGangsinfoFieldNumber;
const int GM_GangApplyInfo::kMyganginfoFieldNumber;
const int GM_GangApplyInfo::kTotalapplyFieldNumber;
#endif  // !_MSC_VER

GM_GangApplyInfo::GM_GangApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangApplyInfo::InitAsDefaultInstance() {
}

GM_GangApplyInfo::GM_GangApplyInfo(const GM_GangApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  totalapply_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangApplyInfo::~GM_GangApplyInfo() {
  SharedDtor();
}

void GM_GangApplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangApplyInfo_descriptor_;
}

const GM_GangApplyInfo& GM_GangApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangApplyInfo* GM_GangApplyInfo::default_instance_ = NULL;

GM_GangApplyInfo* GM_GangApplyInfo::New() const {
  return new GM_GangApplyInfo;
}

void GM_GangApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    totalapply_ = 0;
  }
  gangsinfo_.Clear();
  myganginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangsinfo;
        break;
      }

      // repeated .GM_GangSimpleInfo gangsinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangsinfo;
        if (input->ExpectTag(26)) goto parse_myganginfo;
        break;
      }

      // repeated .GM_GangSimpleInfo myganginfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myganginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myganginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_myganginfo;
        if (input->ExpectTag(32)) goto parse_totalapply;
        break;
      }

      // optional int32 totalapply = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalapply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalapply_)));
          set_has_totalapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_GangSimpleInfo gangsinfo = 2;
  for (int i = 0; i < this->gangsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gangsinfo(i), output);
  }

  // repeated .GM_GangSimpleInfo myganginfo = 3;
  for (int i = 0; i < this->myganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->myganginfo(i), output);
  }

  // optional int32 totalapply = 4;
  if (has_totalapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalapply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_GangSimpleInfo gangsinfo = 2;
  for (int i = 0; i < this->gangsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gangsinfo(i), target);
  }

  // repeated .GM_GangSimpleInfo myganginfo = 3;
  for (int i = 0; i < this->myganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->myganginfo(i), target);
  }

  // optional int32 totalapply = 4;
  if (has_totalapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalapply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 totalapply = 4;
    if (has_totalapply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalapply());
    }

  }
  // repeated .GM_GangSimpleInfo gangsinfo = 2;
  total_size += 1 * this->gangsinfo_size();
  for (int i = 0; i < this->gangsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangsinfo(i));
  }

  // repeated .GM_GangSimpleInfo myganginfo = 3;
  total_size += 1 * this->myganginfo_size();
  for (int i = 0; i < this->myganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myganginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangApplyInfo::MergeFrom(const GM_GangApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangsinfo_.MergeFrom(from.gangsinfo_);
  myganginfo_.MergeFrom(from.myganginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_totalapply()) {
      set_totalapply(from.totalapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangApplyInfo::CopyFrom(const GM_GangApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangApplyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gangsinfo_size(); i++) {
    if (!this->gangsinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < myganginfo_size(); i++) {
    if (!this->myganginfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangApplyInfo::Swap(GM_GangApplyInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    gangsinfo_.Swap(&other->gangsinfo_);
    myganginfo_.Swap(&other->myganginfo_);
    std::swap(totalapply_, other->totalapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangApplyInfo_descriptor_;
  metadata.reflection = GM_GangApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MarchInfo::kRoundFieldNumber;
const int GM_MarchInfo::kWeekstartFieldNumber;
const int GM_MarchInfo::kStarttimeFieldNumber;
#endif  // !_MSC_VER

GM_MarchInfo::GM_MarchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MarchInfo::InitAsDefaultInstance() {
}

GM_MarchInfo::GM_MarchInfo(const GM_MarchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MarchInfo::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  weekstart_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MarchInfo::~GM_MarchInfo() {
  SharedDtor();
}

void GM_MarchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MarchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MarchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MarchInfo_descriptor_;
}

const GM_MarchInfo& GM_MarchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_MarchInfo* GM_MarchInfo::default_instance_ = NULL;

GM_MarchInfo* GM_MarchInfo::New() const {
  return new GM_MarchInfo;
}

void GM_MarchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    weekstart_ = 0;
    starttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MarchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weekstart;
        break;
      }

      // required int32 weekstart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekstart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekstart_)));
          set_has_weekstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // required int32 starttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MarchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // required int32 weekstart = 2;
  if (has_weekstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weekstart(), output);
  }

  // required int32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MarchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // required int32 weekstart = 2;
  if (has_weekstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weekstart(), target);
  }

  // required int32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MarchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // required int32 weekstart = 2;
    if (has_weekstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekstart());
    }

    // required int32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MarchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MarchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MarchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MarchInfo::MergeFrom(const GM_MarchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_weekstart()) {
      set_weekstart(from.weekstart());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MarchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MarchInfo::CopyFrom(const GM_MarchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MarchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_MarchInfo::Swap(GM_MarchInfo* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(weekstart_, other->weekstart_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MarchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MarchInfo_descriptor_;
  metadata.reflection = GM_MarchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRaceSimpleInfo::kRoleidFieldNumber;
const int GM_GangRaceSimpleInfo::kEquipIdFieldNumber;
const int GM_GangRaceSimpleInfo::kFashionInfoFieldNumber;
const int GM_GangRaceSimpleInfo::kProfessionFieldNumber;
const int GM_GangRaceSimpleInfo::kGanggmidFieldNumber;
#endif  // !_MSC_VER

GM_GangRaceSimpleInfo::GM_GangRaceSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRaceSimpleInfo::InitAsDefaultInstance() {
}

GM_GangRaceSimpleInfo::GM_GangRaceSimpleInfo(const GM_GangRaceSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRaceSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  equipid_ = 0;
  profession_ = 0;
  ganggmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRaceSimpleInfo::~GM_GangRaceSimpleInfo() {
  SharedDtor();
}

void GM_GangRaceSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangRaceSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRaceSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRaceSimpleInfo_descriptor_;
}

const GM_GangRaceSimpleInfo& GM_GangRaceSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangRaceSimpleInfo* GM_GangRaceSimpleInfo::default_instance_ = NULL;

GM_GangRaceSimpleInfo* GM_GangRaceSimpleInfo::New() const {
  return new GM_GangRaceSimpleInfo;
}

void GM_GangRaceSimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    equipid_ = 0;
    profession_ = 0;
    ganggmid_ = GOOGLE_LONGLONG(0);
  }
  fashioninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRaceSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // required int32 profession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipId;
        break;
      }

      // required int32 equipId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fashionInfo;
        break;
      }

      // repeated int32 fashionInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fashioninfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fashioninfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fashionInfo;
        if (input->ExpectTag(40)) goto parse_ganggmid;
        break;
      }

      // required int64 ganggmid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ganggmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ganggmid_)));
          set_has_ganggmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRaceSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->profession(), output);
  }

  // required int32 equipId = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }

  // repeated int32 fashionInfo = 4;
  for (int i = 0; i < this->fashioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fashioninfo(i), output);
  }

  // required int64 ganggmid = 5;
  if (has_ganggmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ganggmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRaceSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->profession(), target);
  }

  // required int32 equipId = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }

  // repeated int32 fashionInfo = 4;
  for (int i = 0; i < this->fashioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fashioninfo(i), target);
  }

  // required int64 ganggmid = 5;
  if (has_ganggmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ganggmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRaceSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 equipId = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }

    // required int32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int64 ganggmid = 5;
    if (has_ganggmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ganggmid());
    }

  }
  // repeated int32 fashionInfo = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fashioninfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fashioninfo(i));
    }
    total_size += 1 * this->fashioninfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRaceSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRaceSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRaceSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRaceSimpleInfo::MergeFrom(const GM_GangRaceSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashioninfo_.MergeFrom(from.fashioninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_ganggmid()) {
      set_ganggmid(from.ganggmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRaceSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRaceSimpleInfo::CopyFrom(const GM_GangRaceSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRaceSimpleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void GM_GangRaceSimpleInfo::Swap(GM_GangRaceSimpleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(equipid_, other->equipid_);
    fashioninfo_.Swap(&other->fashioninfo_);
    std::swap(profession_, other->profession_);
    std::swap(ganggmid_, other->ganggmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRaceSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRaceSimpleInfo_descriptor_;
  metadata.reflection = GM_GangRaceSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRaceData::kResultFieldNumber;
const int GM_GangRaceData::kRaceFieldNumber;
const int GM_GangRaceData::kMarchinfoFieldNumber;
const int GM_GangRaceData::kJoinedpeopleFieldNumber;
const int GM_GangRaceData::kYourgangidFieldNumber;
const int GM_GangRaceData::kYourgangnameFieldNumber;
const int GM_GangRaceData::kOthergangidFieldNumber;
const int GM_GangRaceData::kOthergangnameFieldNumber;
const int GM_GangRaceData::kReadyTimeFieldNumber;
#endif  // !_MSC_VER

GM_GangRaceData::GM_GangRaceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRaceData::InitAsDefaultInstance() {
}

GM_GangRaceData::GM_GangRaceData(const GM_GangRaceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRaceData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  race_ = 0;
  joinedpeople_ = 0;
  yourgangid_ = GOOGLE_LONGLONG(0);
  yourgangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  othergangid_ = GOOGLE_LONGLONG(0);
  othergangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRaceData::~GM_GangRaceData() {
  SharedDtor();
}

void GM_GangRaceData::SharedDtor() {
  if (yourgangname_ != &::google::protobuf::internal::kEmptyString) {
    delete yourgangname_;
  }
  if (othergangname_ != &::google::protobuf::internal::kEmptyString) {
    delete othergangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangRaceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRaceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRaceData_descriptor_;
}

const GM_GangRaceData& GM_GangRaceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangRaceData* GM_GangRaceData::default_instance_ = NULL;

GM_GangRaceData* GM_GangRaceData::New() const {
  return new GM_GangRaceData;
}

void GM_GangRaceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    race_ = 0;
    joinedpeople_ = 0;
    yourgangid_ = GOOGLE_LONGLONG(0);
    if (has_yourgangname()) {
      if (yourgangname_ != &::google::protobuf::internal::kEmptyString) {
        yourgangname_->clear();
      }
    }
    othergangid_ = GOOGLE_LONGLONG(0);
    if (has_othergangname()) {
      if (othergangname_ != &::google::protobuf::internal::kEmptyString) {
        othergangname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    readytime_ = 0;
  }
  marchinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRaceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 race = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_marchinfo;
        break;
      }

      // repeated .GM_MarchInfo marchinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marchinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_marchinfo;
        if (input->ExpectTag(40)) goto parse_joinedpeople;
        break;
      }

      // required int32 joinedpeople = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinedpeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joinedpeople_)));
          set_has_joinedpeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_yourgangid;
        break;
      }

      // required int64 yourgangid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yourgangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yourgangid_)));
          set_has_yourgangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_readyTime;
        break;
      }

      // optional int32 readyTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readytime_)));
          set_has_readytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_yourgangname;
        break;
      }

      // required string yourgangname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yourgangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yourgangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yourgangname().data(), this->yourgangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_othergangid;
        break;
      }

      // optional int64 othergangid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othergangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &othergangid_)));
          set_has_othergangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_othergangname;
        break;
      }

      // optional string othergangname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_othergangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othergangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->othergangname().data(), this->othergangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRaceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 race = 2;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->race(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // repeated .GM_MarchInfo marchinfo = 4;
  for (int i = 0; i < this->marchinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->marchinfo(i), output);
  }

  // required int32 joinedpeople = 5;
  if (has_joinedpeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->joinedpeople(), output);
  }

  // required int64 yourgangid = 7;
  if (has_yourgangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->yourgangid(), output);
  }

  // optional int32 readyTime = 8;
  if (has_readytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->readytime(), output);
  }

  // required string yourgangname = 9;
  if (has_yourgangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yourgangname().data(), this->yourgangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->yourgangname(), output);
  }

  // optional int64 othergangid = 10;
  if (has_othergangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->othergangid(), output);
  }

  // optional string othergangname = 11;
  if (has_othergangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othergangname().data(), this->othergangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->othergangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRaceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 race = 2;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->race(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // repeated .GM_MarchInfo marchinfo = 4;
  for (int i = 0; i < this->marchinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->marchinfo(i), target);
  }

  // required int32 joinedpeople = 5;
  if (has_joinedpeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->joinedpeople(), target);
  }

  // required int64 yourgangid = 7;
  if (has_yourgangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->yourgangid(), target);
  }

  // optional int32 readyTime = 8;
  if (has_readytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->readytime(), target);
  }

  // required string yourgangname = 9;
  if (has_yourgangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yourgangname().data(), this->yourgangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->yourgangname(), target);
  }

  // optional int64 othergangid = 10;
  if (has_othergangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->othergangid(), target);
  }

  // optional string othergangname = 11;
  if (has_othergangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othergangname().data(), this->othergangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->othergangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRaceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // required int32 joinedpeople = 5;
    if (has_joinedpeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joinedpeople());
    }

    // required int64 yourgangid = 7;
    if (has_yourgangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yourgangid());
    }

    // required string yourgangname = 9;
    if (has_yourgangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yourgangname());
    }

    // optional int64 othergangid = 10;
    if (has_othergangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->othergangid());
    }

    // optional string othergangname = 11;
    if (has_othergangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othergangname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 readyTime = 8;
    if (has_readytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readytime());
    }

  }
  // repeated .GM_MarchInfo marchinfo = 4;
  total_size += 1 * this->marchinfo_size();
  for (int i = 0; i < this->marchinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marchinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRaceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRaceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRaceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRaceData::MergeFrom(const GM_GangRaceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  marchinfo_.MergeFrom(from.marchinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_joinedpeople()) {
      set_joinedpeople(from.joinedpeople());
    }
    if (from.has_yourgangid()) {
      set_yourgangid(from.yourgangid());
    }
    if (from.has_yourgangname()) {
      set_yourgangname(from.yourgangname());
    }
    if (from.has_othergangid()) {
      set_othergangid(from.othergangid());
    }
    if (from.has_othergangname()) {
      set_othergangname(from.othergangname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_readytime()) {
      set_readytime(from.readytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRaceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRaceData::CopyFrom(const GM_GangRaceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRaceData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  for (int i = 0; i < marchinfo_size(); i++) {
    if (!this->marchinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangRaceData::Swap(GM_GangRaceData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(race_, other->race_);
    marchinfo_.Swap(&other->marchinfo_);
    std::swap(joinedpeople_, other->joinedpeople_);
    std::swap(yourgangid_, other->yourgangid_);
    std::swap(yourgangname_, other->yourgangname_);
    std::swap(othergangid_, other->othergangid_);
    std::swap(othergangname_, other->othergangname_);
    std::swap(readytime_, other->readytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRaceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRaceData_descriptor_;
  metadata.reflection = GM_GangRaceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRace::kGmidFieldNumber;
const int GM_GangRace::kTargetgmidFieldNumber;
const int GM_GangRace::kLevelFieldNumber;
const int GM_GangRace::kNameFieldNumber;
const int GM_GangRace::kPowerFieldNumber;
const int GM_GangRace::kPeopleFieldNumber;
#endif  // !_MSC_VER

GM_GangRace::GM_GangRace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRace::InitAsDefaultInstance() {
}

GM_GangRace::GM_GangRace(const GM_GangRace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRace::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  targetgmid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  people_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRace::~GM_GangRace() {
  SharedDtor();
}

void GM_GangRace::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangRace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRace_descriptor_;
}

const GM_GangRace& GM_GangRace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangRace* GM_GangRace::default_instance_ = NULL;

GM_GangRace* GM_GangRace::New() const {
  return new GM_GangRace;
}

void GM_GangRace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    targetgmid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    power_ = 0;
    people_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetgmid;
        break;
      }

      // optional int64 targetgmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetgmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetgmid_)));
          set_has_targetgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_people;
        break;
      }

      // optional int32 people = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &people_)));
          set_has_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int64 targetgmid = 3;
  if (has_targetgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->targetgmid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // optional int32 people = 6;
  if (has_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->people(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int64 targetgmid = 3;
  if (has_targetgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->targetgmid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }

  // optional int32 people = 6;
  if (has_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->people(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int64 targetgmid = 3;
    if (has_targetgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetgmid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 people = 6;
    if (has_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->people());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRace::MergeFrom(const GM_GangRace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_targetgmid()) {
      set_targetgmid(from.targetgmid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_people()) {
      set_people(from.people());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRace::CopyFrom(const GM_GangRace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangRace::Swap(GM_GangRace* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(targetgmid_, other->targetgmid_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(power_, other->power_);
    std::swap(people_, other->people_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRace_descriptor_;
  metadata.reflection = GM_GangRace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRacePare::kResultFieldNumber;
const int GM_GangRacePare::kRaceFieldNumber;
const int GM_GangRacePare::kRacelistFieldNumber;
const int GM_GangRacePare::kTimelastFieldNumber;
#endif  // !_MSC_VER

GM_GangRacePare::GM_GangRacePare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRacePare::InitAsDefaultInstance() {
}

GM_GangRacePare::GM_GangRacePare(const GM_GangRacePare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRacePare::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  race_ = 0;
  timelast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRacePare::~GM_GangRacePare() {
  SharedDtor();
}

void GM_GangRacePare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangRacePare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRacePare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRacePare_descriptor_;
}

const GM_GangRacePare& GM_GangRacePare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangRacePare* GM_GangRacePare::default_instance_ = NULL;

GM_GangRacePare* GM_GangRacePare::New() const {
  return new GM_GangRacePare;
}

void GM_GangRacePare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    race_ = 0;
    timelast_ = 0;
  }
  racelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRacePare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_GangRace racelist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_racelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_racelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_racelist;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // required int32 race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timelast;
        break;
      }

      // optional int32 timelast = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timelast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelast_)));
          set_has_timelast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRacePare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_GangRace racelist = 1;
  for (int i = 0; i < this->racelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->racelist(i), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // optional int32 timelast = 7;
  if (has_timelast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timelast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRacePare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_GangRace racelist = 1;
  for (int i = 0; i < this->racelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->racelist(i), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int32 race = 3;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->race(), target);
  }

  // optional int32 timelast = 7;
  if (has_timelast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timelast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRacePare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 timelast = 7;
    if (has_timelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timelast());
    }

  }
  // repeated .GM_GangRace racelist = 1;
  total_size += 1 * this->racelist_size();
  for (int i = 0; i < this->racelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->racelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRacePare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRacePare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRacePare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRacePare::MergeFrom(const GM_GangRacePare& from) {
  GOOGLE_CHECK_NE(&from, this);
  racelist_.MergeFrom(from.racelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_timelast()) {
      set_timelast(from.timelast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRacePare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRacePare::CopyFrom(const GM_GangRacePare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRacePare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < racelist_size(); i++) {
    if (!this->racelist(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangRacePare::Swap(GM_GangRacePare* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(race_, other->race_);
    racelist_.Swap(&other->racelist_);
    std::swap(timelast_, other->timelast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRacePare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRacePare_descriptor_;
  metadata.reflection = GM_GangRacePare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerReady::kRoleIDFieldNumber;
const int GM_PlayerReady::kNameFieldNumber;
const int GM_PlayerReady::kGanggmidFieldNumber;
#endif  // !_MSC_VER

GM_PlayerReady::GM_PlayerReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerReady::InitAsDefaultInstance() {
}

GM_PlayerReady::GM_PlayerReady(const GM_PlayerReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerReady::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ganggmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerReady::~GM_PlayerReady() {
  SharedDtor();
}

void GM_PlayerReady::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_PlayerReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerReady_descriptor_;
}

const GM_PlayerReady& GM_PlayerReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_PlayerReady* GM_PlayerReady::default_instance_ = NULL;

GM_PlayerReady* GM_PlayerReady::New() const {
  return new GM_PlayerReady;
}

void GM_PlayerReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ganggmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ganggmid;
        break;
      }

      // required int64 ganggmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ganggmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ganggmid_)));
          set_has_ganggmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int64 ganggmid = 3;
  if (has_ganggmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ganggmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int64 ganggmid = 3;
  if (has_ganggmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ganggmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 ganggmid = 3;
    if (has_ganggmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ganggmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerReady::MergeFrom(const GM_PlayerReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ganggmid()) {
      set_ganggmid(from.ganggmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerReady::CopyFrom(const GM_PlayerReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_PlayerReady::Swap(GM_PlayerReady* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(ganggmid_, other->ganggmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerReady_descriptor_;
  metadata.reflection = GM_PlayerReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ReturnGangFightJoin::kResultFieldNumber;
const int GM_ReturnGangFightJoin::kPlayerListFieldNumber;
#endif  // !_MSC_VER

GM_ReturnGangFightJoin::GM_ReturnGangFightJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ReturnGangFightJoin::InitAsDefaultInstance() {
}

GM_ReturnGangFightJoin::GM_ReturnGangFightJoin(const GM_ReturnGangFightJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ReturnGangFightJoin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ReturnGangFightJoin::~GM_ReturnGangFightJoin() {
  SharedDtor();
}

void GM_ReturnGangFightJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ReturnGangFightJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ReturnGangFightJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ReturnGangFightJoin_descriptor_;
}

const GM_ReturnGangFightJoin& GM_ReturnGangFightJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_ReturnGangFightJoin* GM_ReturnGangFightJoin::default_instance_ = NULL;

GM_ReturnGangFightJoin* GM_ReturnGangFightJoin::New() const {
  return new GM_ReturnGangFightJoin;
}

void GM_ReturnGangFightJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ReturnGangFightJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerList;
        break;
      }

      // repeated .GM_PlayerReady playerList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ReturnGangFightJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_PlayerReady playerList = 2;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ReturnGangFightJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_PlayerReady playerList = 2;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ReturnGangFightJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_PlayerReady playerList = 2;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ReturnGangFightJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ReturnGangFightJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ReturnGangFightJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ReturnGangFightJoin::MergeFrom(const GM_ReturnGangFightJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ReturnGangFightJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ReturnGangFightJoin::CopyFrom(const GM_ReturnGangFightJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ReturnGangFightJoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerlist_size(); i++) {
    if (!this->playerlist(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ReturnGangFightJoin::Swap(GM_ReturnGangFightJoin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ReturnGangFightJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ReturnGangFightJoin_descriptor_;
  metadata.reflection = GM_ReturnGangFightJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_NewReadyPlayer::kNewplayerFieldNumber;
#endif  // !_MSC_VER

GM_NewReadyPlayer::GM_NewReadyPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_NewReadyPlayer::InitAsDefaultInstance() {
  newplayer_ = const_cast< ::GM_PlayerReady*>(&::GM_PlayerReady::default_instance());
}

GM_NewReadyPlayer::GM_NewReadyPlayer(const GM_NewReadyPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_NewReadyPlayer::SharedCtor() {
  _cached_size_ = 0;
  newplayer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_NewReadyPlayer::~GM_NewReadyPlayer() {
  SharedDtor();
}

void GM_NewReadyPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete newplayer_;
  }
}

void GM_NewReadyPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_NewReadyPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_NewReadyPlayer_descriptor_;
}

const GM_NewReadyPlayer& GM_NewReadyPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_NewReadyPlayer* GM_NewReadyPlayer::default_instance_ = NULL;

GM_NewReadyPlayer* GM_NewReadyPlayer::New() const {
  return new GM_NewReadyPlayer;
}

void GM_NewReadyPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newplayer()) {
      if (newplayer_ != NULL) newplayer_->::GM_PlayerReady::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_NewReadyPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GM_PlayerReady newplayer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_NewReadyPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GM_PlayerReady newplayer = 1;
  if (has_newplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_NewReadyPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GM_PlayerReady newplayer = 1;
  if (has_newplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_NewReadyPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GM_PlayerReady newplayer = 1;
    if (has_newplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newplayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_NewReadyPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_NewReadyPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_NewReadyPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_NewReadyPlayer::MergeFrom(const GM_NewReadyPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newplayer()) {
      mutable_newplayer()->::GM_PlayerReady::MergeFrom(from.newplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_NewReadyPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_NewReadyPlayer::CopyFrom(const GM_NewReadyPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_NewReadyPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_newplayer()) {
    if (!this->newplayer().IsInitialized()) return false;
  }
  return true;
}

void GM_NewReadyPlayer::Swap(GM_NewReadyPlayer* other) {
  if (other != this) {
    std::swap(newplayer_, other->newplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_NewReadyPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_NewReadyPlayer_descriptor_;
  metadata.reflection = GM_NewReadyPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PlayerQuitReady::kQuitplayerFieldNumber;
#endif  // !_MSC_VER

GM_PlayerQuitReady::GM_PlayerQuitReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PlayerQuitReady::InitAsDefaultInstance() {
}

GM_PlayerQuitReady::GM_PlayerQuitReady(const GM_PlayerQuitReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PlayerQuitReady::SharedCtor() {
  _cached_size_ = 0;
  quitplayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PlayerQuitReady::~GM_PlayerQuitReady() {
  SharedDtor();
}

void GM_PlayerQuitReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PlayerQuitReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PlayerQuitReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PlayerQuitReady_descriptor_;
}

const GM_PlayerQuitReady& GM_PlayerQuitReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_PlayerQuitReady* GM_PlayerQuitReady::default_instance_ = NULL;

GM_PlayerQuitReady* GM_PlayerQuitReady::New() const {
  return new GM_PlayerQuitReady;
}

void GM_PlayerQuitReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quitplayer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PlayerQuitReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quitplayer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quitplayer_)));
          set_has_quitplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PlayerQuitReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 quitplayer = 1;
  if (has_quitplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quitplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PlayerQuitReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 quitplayer = 1;
  if (has_quitplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quitplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PlayerQuitReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quitplayer = 1;
    if (has_quitplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quitplayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PlayerQuitReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PlayerQuitReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PlayerQuitReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PlayerQuitReady::MergeFrom(const GM_PlayerQuitReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quitplayer()) {
      set_quitplayer(from.quitplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PlayerQuitReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PlayerQuitReady::CopyFrom(const GM_PlayerQuitReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PlayerQuitReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PlayerQuitReady::Swap(GM_PlayerQuitReady* other) {
  if (other != this) {
    std::swap(quitplayer_, other->quitplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PlayerQuitReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PlayerQuitReady_descriptor_;
  metadata.reflection = GM_PlayerQuitReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangRaceResult::kResultFieldNumber;
#endif  // !_MSC_VER

GM_GangRaceResult::GM_GangRaceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangRaceResult::InitAsDefaultInstance() {
}

GM_GangRaceResult::GM_GangRaceResult(const GM_GangRaceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangRaceResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangRaceResult::~GM_GangRaceResult() {
  SharedDtor();
}

void GM_GangRaceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangRaceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangRaceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangRaceResult_descriptor_;
}

const GM_GangRaceResult& GM_GangRaceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangRaceResult* GM_GangRaceResult::default_instance_ = NULL;

GM_GangRaceResult* GM_GangRaceResult::New() const {
  return new GM_GangRaceResult;
}

void GM_GangRaceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangRaceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangRaceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangRaceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangRaceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangRaceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangRaceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangRaceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangRaceResult::MergeFrom(const GM_GangRaceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangRaceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangRaceResult::CopyFrom(const GM_GangRaceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangRaceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangRaceResult::Swap(GM_GangRaceResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangRaceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangRaceResult_descriptor_;
  metadata.reflection = GM_GangRaceResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFightTime::kApplyTimeFieldNumber;
const int GM_GangFightTime::kRaceTimeFieldNumber;
const int GM_GangFightTime::kRaceStateFieldNumber;
#endif  // !_MSC_VER

GM_GangFightTime::GM_GangFightTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFightTime::InitAsDefaultInstance() {
}

GM_GangFightTime::GM_GangFightTime(const GM_GangFightTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFightTime::SharedCtor() {
  _cached_size_ = 0;
  apply_time_ = 0;
  race_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFightTime::~GM_GangFightTime() {
  SharedDtor();
}

void GM_GangFightTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFightTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFightTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFightTime_descriptor_;
}

const GM_GangFightTime& GM_GangFightTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangFightTime* GM_GangFightTime::default_instance_ = NULL;

GM_GangFightTime* GM_GangFightTime::New() const {
  return new GM_GangFightTime;
}

void GM_GangFightTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_time_ = 0;
    race_state_ = 0;
  }
  race_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFightTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 apply_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_race_time;
        break;
      }

      // repeated int32 race_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_race_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_race_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_race_time;
        if (input->ExpectTag(24)) goto parse_race_state;
        break;
      }

      // required int32 race_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_state_)));
          set_has_race_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFightTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 apply_time = 1;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->apply_time(), output);
  }

  // repeated int32 race_time = 2;
  for (int i = 0; i < this->race_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->race_time(i), output);
  }

  // required int32 race_state = 3;
  if (has_race_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFightTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 apply_time = 1;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->apply_time(), target);
  }

  // repeated int32 race_time = 2;
  for (int i = 0; i < this->race_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->race_time(i), target);
  }

  // required int32 race_state = 3;
  if (has_race_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->race_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFightTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 apply_time = 1;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_time());
    }

    // required int32 race_state = 3;
    if (has_race_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race_state());
    }

  }
  // repeated int32 race_time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->race_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->race_time(i));
    }
    total_size += 1 * this->race_time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFightTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFightTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFightTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFightTime::MergeFrom(const GM_GangFightTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  race_time_.MergeFrom(from.race_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_race_state()) {
      set_race_state(from.race_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFightTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFightTime::CopyFrom(const GM_GangFightTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFightTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void GM_GangFightTime::Swap(GM_GangFightTime* other) {
  if (other != this) {
    std::swap(apply_time_, other->apply_time_);
    race_time_.Swap(&other->race_time_);
    std::swap(race_state_, other->race_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFightTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFightTime_descriptor_;
  metadata.reflection = GM_GangFightTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFightResultMember::kNameFieldNumber;
const int GM_GangFightResultMember::kKillFieldNumber;
const int GM_GangFightResultMember::kDieFieldNumber;
const int GM_GangFightResultMember::kHonorFieldNumber;
const int GM_GangFightResultMember::kPersentFieldNumber;
#endif  // !_MSC_VER

GM_GangFightResultMember::GM_GangFightResultMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFightResultMember::InitAsDefaultInstance() {
}

GM_GangFightResultMember::GM_GangFightResultMember(const GM_GangFightResultMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFightResultMember::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_ = 0;
  die_ = 0;
  honor_ = 0;
  persent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFightResultMember::~GM_GangFightResultMember() {
  SharedDtor();
}

void GM_GangFightResultMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangFightResultMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFightResultMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFightResultMember_descriptor_;
}

const GM_GangFightResultMember& GM_GangFightResultMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangFightResultMember* GM_GangFightResultMember::default_instance_ = NULL;

GM_GangFightResultMember* GM_GangFightResultMember::New() const {
  return new GM_GangFightResultMember;
}

void GM_GangFightResultMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    kill_ = 0;
    die_ = 0;
    honor_ = 0;
    persent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFightResultMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill;
        break;
      }

      // required int32 kill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_die;
        break;
      }

      // required int32 die = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_)));
          set_has_die();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_honor;
        break;
      }

      // required int32 honor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_persent;
        break;
      }

      // required int32 persent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &persent_)));
          set_has_persent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFightResultMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 kill = 2;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill(), output);
  }

  // required int32 die = 3;
  if (has_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->die(), output);
  }

  // required int32 honor = 4;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->honor(), output);
  }

  // required int32 persent = 5;
  if (has_persent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->persent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFightResultMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 kill = 2;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill(), target);
  }

  // required int32 die = 3;
  if (has_die()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->die(), target);
  }

  // required int32 honor = 4;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->honor(), target);
  }

  // required int32 persent = 5;
  if (has_persent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->persent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFightResultMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 kill = 2;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // required int32 die = 3;
    if (has_die()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die());
    }

    // required int32 honor = 4;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required int32 persent = 5;
    if (has_persent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->persent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFightResultMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFightResultMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFightResultMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFightResultMember::MergeFrom(const GM_GangFightResultMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_die()) {
      set_die(from.die());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_persent()) {
      set_persent(from.persent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFightResultMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFightResultMember::CopyFrom(const GM_GangFightResultMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFightResultMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GM_GangFightResultMember::Swap(GM_GangFightResultMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(kill_, other->kill_);
    std::swap(die_, other->die_);
    std::swap(honor_, other->honor_);
    std::swap(persent_, other->persent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFightResultMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFightResultMember_descriptor_;
  metadata.reflection = GM_GangFightResultMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFightResult::kOurteamFieldNumber;
const int GM_GangFightResult::kUsetimeFieldNumber;
const int GM_GangFightResult::kResultFieldNumber;
const int GM_GangFightResult::kOurpeopleFieldNumber;
const int GM_GangFightResult::kOurnameFieldNumber;
const int GM_GangFightResult::kOtherpeopleFieldNumber;
const int GM_GangFightResult::kOthernameFieldNumber;
#endif  // !_MSC_VER

GM_GangFightResult::GM_GangFightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFightResult::InitAsDefaultInstance() {
}

GM_GangFightResult::GM_GangFightResult(const GM_GangFightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFightResult::SharedCtor() {
  _cached_size_ = 0;
  usetime_ = 0;
  result_ = 0;
  ourpeople_ = 0;
  ourname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otherpeople_ = 0;
  othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFightResult::~GM_GangFightResult() {
  SharedDtor();
}

void GM_GangFightResult::SharedDtor() {
  if (ourname_ != &::google::protobuf::internal::kEmptyString) {
    delete ourname_;
  }
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    delete othername_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangFightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFightResult_descriptor_;
}

const GM_GangFightResult& GM_GangFightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangFightResult* GM_GangFightResult::default_instance_ = NULL;

GM_GangFightResult* GM_GangFightResult::New() const {
  return new GM_GangFightResult;
}

void GM_GangFightResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    usetime_ = 0;
    result_ = 0;
    ourpeople_ = 0;
    if (has_ourname()) {
      if (ourname_ != &::google::protobuf::internal::kEmptyString) {
        ourname_->clear();
      }
    }
    otherpeople_ = 0;
    if (has_othername()) {
      if (othername_ != &::google::protobuf::internal::kEmptyString) {
        othername_->clear();
      }
    }
  }
  ourteam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_GangFightResultMember ourteam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ourteam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ourteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ourteam;
        if (input->ExpectTag(24)) goto parse_usetime;
        break;
      }

      // required int32 usetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ourpeople;
        break;
      }

      // required int32 ourpeople = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ourpeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ourpeople_)));
          set_has_ourpeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ourname;
        break;
      }

      // required string ourname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ourname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ourname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ourname().data(), this->ourname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_otherpeople;
        break;
      }

      // required int32 otherpeople = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherpeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherpeople_)));
          set_has_otherpeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_othername;
        break;
      }

      // required string othername = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_othername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->othername().data(), this->othername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_GangFightResultMember ourteam = 1;
  for (int i = 0; i < this->ourteam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ourteam(i), output);
  }

  // required int32 usetime = 3;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usetime(), output);
  }

  // required int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  // required int32 ourpeople = 5;
  if (has_ourpeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ourpeople(), output);
  }

  // required string ourname = 6;
  if (has_ourname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ourname().data(), this->ourname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ourname(), output);
  }

  // required int32 otherpeople = 7;
  if (has_otherpeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->otherpeople(), output);
  }

  // required string othername = 8;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->othername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_GangFightResultMember ourteam = 1;
  for (int i = 0; i < this->ourteam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ourteam(i), target);
  }

  // required int32 usetime = 3;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usetime(), target);
  }

  // required int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  // required int32 ourpeople = 5;
  if (has_ourpeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ourpeople(), target);
  }

  // required string ourname = 6;
  if (has_ourname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ourname().data(), this->ourname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ourname(), target);
  }

  // required int32 otherpeople = 7;
  if (has_otherpeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->otherpeople(), target);
  }

  // required string othername = 8;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->othername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFightResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 usetime = 3;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetime());
    }

    // required int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 ourpeople = 5;
    if (has_ourpeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ourpeople());
    }

    // required string ourname = 6;
    if (has_ourname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ourname());
    }

    // required int32 otherpeople = 7;
    if (has_otherpeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherpeople());
    }

    // required string othername = 8;
    if (has_othername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othername());
    }

  }
  // repeated .GM_GangFightResultMember ourteam = 1;
  total_size += 1 * this->ourteam_size();
  for (int i = 0; i < this->ourteam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ourteam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFightResult::MergeFrom(const GM_GangFightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  ourteam_.MergeFrom(from.ourteam_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ourpeople()) {
      set_ourpeople(from.ourpeople());
    }
    if (from.has_ourname()) {
      set_ourname(from.ourname());
    }
    if (from.has_otherpeople()) {
      set_otherpeople(from.otherpeople());
    }
    if (from.has_othername()) {
      set_othername(from.othername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFightResult::CopyFrom(const GM_GangFightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFightResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  for (int i = 0; i < ourteam_size(); i++) {
    if (!this->ourteam(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangFightResult::Swap(GM_GangFightResult* other) {
  if (other != this) {
    ourteam_.Swap(&other->ourteam_);
    std::swap(usetime_, other->usetime_);
    std::swap(result_, other->result_);
    std::swap(ourpeople_, other->ourpeople_);
    std::swap(ourname_, other->ourname_);
    std::swap(otherpeople_, other->otherpeople_);
    std::swap(othername_, other->othername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFightResult_descriptor_;
  metadata.reflection = GM_GangFightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFightPeopleCount::kCampFieldNumber;
const int GM_GangFightPeopleCount::kPeopleFieldNumber;
#endif  // !_MSC_VER

GM_GangFightPeopleCount::GM_GangFightPeopleCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFightPeopleCount::InitAsDefaultInstance() {
}

GM_GangFightPeopleCount::GM_GangFightPeopleCount(const GM_GangFightPeopleCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFightPeopleCount::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0;
  people_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFightPeopleCount::~GM_GangFightPeopleCount() {
  SharedDtor();
}

void GM_GangFightPeopleCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFightPeopleCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFightPeopleCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFightPeopleCount_descriptor_;
}

const GM_GangFightPeopleCount& GM_GangFightPeopleCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangFightPeopleCount* GM_GangFightPeopleCount::default_instance_ = NULL;

GM_GangFightPeopleCount* GM_GangFightPeopleCount::New() const {
  return new GM_GangFightPeopleCount;
}

void GM_GangFightPeopleCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0;
    people_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFightPeopleCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_people;
        break;
      }

      // required int32 people = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &people_)));
          set_has_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFightPeopleCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }

  // required int32 people = 2;
  if (has_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->people(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFightPeopleCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }

  // required int32 people = 2;
  if (has_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->people(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFightPeopleCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // required int32 people = 2;
    if (has_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->people());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFightPeopleCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFightPeopleCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFightPeopleCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFightPeopleCount::MergeFrom(const GM_GangFightPeopleCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_people()) {
      set_people(from.people());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFightPeopleCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFightPeopleCount::CopyFrom(const GM_GangFightPeopleCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFightPeopleCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_GangFightPeopleCount::Swap(GM_GangFightPeopleCount* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(people_, other->people_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFightPeopleCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFightPeopleCount_descriptor_;
  metadata.reflection = GM_GangFightPeopleCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangFightPeople::kPeopledataFieldNumber;
#endif  // !_MSC_VER

GM_GangFightPeople::GM_GangFightPeople()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangFightPeople::InitAsDefaultInstance() {
}

GM_GangFightPeople::GM_GangFightPeople(const GM_GangFightPeople& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangFightPeople::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangFightPeople::~GM_GangFightPeople() {
  SharedDtor();
}

void GM_GangFightPeople::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangFightPeople::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangFightPeople::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangFightPeople_descriptor_;
}

const GM_GangFightPeople& GM_GangFightPeople::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangFightPeople* GM_GangFightPeople::default_instance_ = NULL;

GM_GangFightPeople* GM_GangFightPeople::New() const {
  return new GM_GangFightPeople;
}

void GM_GangFightPeople::Clear() {
  peopledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangFightPeople::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_GangFightPeopleCount peopledata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peopledata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peopledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_peopledata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangFightPeople::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_GangFightPeopleCount peopledata = 1;
  for (int i = 0; i < this->peopledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peopledata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangFightPeople::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_GangFightPeopleCount peopledata = 1;
  for (int i = 0; i < this->peopledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peopledata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangFightPeople::ByteSize() const {
  int total_size = 0;

  // repeated .GM_GangFightPeopleCount peopledata = 1;
  total_size += 1 * this->peopledata_size();
  for (int i = 0; i < this->peopledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peopledata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangFightPeople::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangFightPeople* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangFightPeople*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangFightPeople::MergeFrom(const GM_GangFightPeople& from) {
  GOOGLE_CHECK_NE(&from, this);
  peopledata_.MergeFrom(from.peopledata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangFightPeople::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangFightPeople::CopyFrom(const GM_GangFightPeople& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangFightPeople::IsInitialized() const {

  for (int i = 0; i < peopledata_size(); i++) {
    if (!this->peopledata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_GangFightPeople::Swap(GM_GangFightPeople* other) {
  if (other != this) {
    peopledata_.Swap(&other->peopledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangFightPeople::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangFightPeople_descriptor_;
  metadata.reflection = GM_GangFightPeople_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DBGangActive::kRoleIdFieldNumber;
const int GM_DBGangActive::kLuckNumFieldNumber;
const int GM_DBGangActive::kLuckTimeFieldNumber;
#endif  // !_MSC_VER

GM_DBGangActive::GM_DBGangActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DBGangActive::InitAsDefaultInstance() {
}

GM_DBGangActive::GM_DBGangActive(const GM_DBGangActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DBGangActive::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  lucknum_ = 0;
  lucktime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DBGangActive::~GM_DBGangActive() {
  SharedDtor();
}

void GM_DBGangActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DBGangActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DBGangActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DBGangActive_descriptor_;
}

const GM_DBGangActive& GM_DBGangActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_DBGangActive* GM_DBGangActive::default_instance_ = NULL;

GM_DBGangActive* GM_DBGangActive::New() const {
  return new GM_DBGangActive;
}

void GM_DBGangActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    lucknum_ = 0;
    lucktime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DBGangActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_luckNum;
        break;
      }

      // required int32 luckNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucknum_)));
          set_has_lucknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_luckTime;
        break;
      }

      // required int32 luckTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucktime_)));
          set_has_lucktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DBGangActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 luckNum = 2;
  if (has_lucknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lucknum(), output);
  }

  // required int32 luckTime = 3;
  if (has_lucktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lucktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DBGangActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 luckNum = 2;
  if (has_lucknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lucknum(), target);
  }

  // required int32 luckTime = 3;
  if (has_lucktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lucktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DBGangActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 luckNum = 2;
    if (has_lucknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucknum());
    }

    // required int32 luckTime = 3;
    if (has_lucktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DBGangActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DBGangActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DBGangActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DBGangActive::MergeFrom(const GM_DBGangActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_lucknum()) {
      set_lucknum(from.lucknum());
    }
    if (from.has_lucktime()) {
      set_lucktime(from.lucktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DBGangActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DBGangActive::CopyFrom(const GM_DBGangActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DBGangActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_DBGangActive::Swap(GM_DBGangActive* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(lucknum_, other->lucknum_);
    std::swap(lucktime_, other->lucktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DBGangActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DBGangActive_descriptor_;
  metadata.reflection = GM_DBGangActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DBAllGangSkill::kRoleIdFieldNumber;
const int GM_DBAllGangSkill::kCountFieldNumber;
const int GM_DBAllGangSkill::kSkillsFieldNumber;
#endif  // !_MSC_VER

GM_DBAllGangSkill::GM_DBAllGangSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DBAllGangSkill::InitAsDefaultInstance() {
}

GM_DBAllGangSkill::GM_DBAllGangSkill(const GM_DBAllGangSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DBAllGangSkill::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DBAllGangSkill::~GM_DBAllGangSkill() {
  SharedDtor();
}

void GM_DBAllGangSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DBAllGangSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DBAllGangSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DBAllGangSkill_descriptor_;
}

const GM_DBAllGangSkill& GM_DBAllGangSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_DBAllGangSkill* GM_DBAllGangSkill::default_instance_ = NULL;

GM_DBAllGangSkill* GM_DBAllGangSkill::New() const {
  return new GM_DBAllGangSkill;
}

void GM_DBAllGangSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    count_ = 0;
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DBAllGangSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skills;
        break;
      }

      // repeated .GM_DBGangSkill skills = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DBAllGangSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .GM_DBGangSkill skills = 3;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DBAllGangSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .GM_DBGangSkill skills = 3;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DBAllGangSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_DBGangSkill skills = 3;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DBAllGangSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DBAllGangSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DBAllGangSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DBAllGangSkill::MergeFrom(const GM_DBAllGangSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DBAllGangSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DBAllGangSkill::CopyFrom(const GM_DBAllGangSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DBAllGangSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void GM_DBAllGangSkill::Swap(GM_DBAllGangSkill* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DBAllGangSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DBAllGangSkill_descriptor_;
  metadata.reflection = GM_DBAllGangSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DBGangSkill::kRoleIdFieldNumber;
const int GM_DBGangSkill::kSkillIdFieldNumber;
const int GM_DBGangSkill::kSkillLvFieldNumber;
#endif  // !_MSC_VER

GM_DBGangSkill::GM_DBGangSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DBGangSkill::InitAsDefaultInstance() {
}

GM_DBGangSkill::GM_DBGangSkill(const GM_DBGangSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DBGangSkill::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  skillid_ = 0;
  skilllv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DBGangSkill::~GM_DBGangSkill() {
  SharedDtor();
}

void GM_DBGangSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DBGangSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DBGangSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DBGangSkill_descriptor_;
}

const GM_DBGangSkill& GM_DBGangSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_DBGangSkill* GM_DBGangSkill::default_instance_ = NULL;

GM_DBGangSkill* GM_DBGangSkill::New() const {
  return new GM_DBGangSkill;
}

void GM_DBGangSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    skillid_ = 0;
    skilllv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DBGangSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // required int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLv;
        break;
      }

      // required int32 skillLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllv_)));
          set_has_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DBGangSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required int32 skillLv = 3;
  if (has_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skilllv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DBGangSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required int32 skillLv = 3;
  if (has_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skilllv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DBGangSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 skillLv = 3;
    if (has_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DBGangSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DBGangSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DBGangSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DBGangSkill::MergeFrom(const GM_DBGangSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllv()) {
      set_skilllv(from.skilllv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DBGangSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DBGangSkill::CopyFrom(const GM_DBGangSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DBGangSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_DBGangSkill::Swap(GM_DBGangSkill* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllv_, other->skilllv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DBGangSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DBGangSkill_descriptor_;
  metadata.reflection = GM_DBGangSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_DBGangExit::kRoleIdFieldNumber;
const int GM_DBGangExit::kExitTimeFieldNumber;
#endif  // !_MSC_VER

GM_DBGangExit::GM_DBGangExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_DBGangExit::InitAsDefaultInstance() {
}

GM_DBGangExit::GM_DBGangExit(const GM_DBGangExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_DBGangExit::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  exittime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_DBGangExit::~GM_DBGangExit() {
  SharedDtor();
}

void GM_DBGangExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_DBGangExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_DBGangExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_DBGangExit_descriptor_;
}

const GM_DBGangExit& GM_DBGangExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_DBGangExit* GM_DBGangExit::default_instance_ = NULL;

GM_DBGangExit* GM_DBGangExit::New() const {
  return new GM_DBGangExit;
}

void GM_DBGangExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    exittime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_DBGangExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exitTime;
        break;
      }

      // required int32 exitTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exittime_)));
          set_has_exittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_DBGangExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 exitTime = 2;
  if (has_exittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_DBGangExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 exitTime = 2;
  if (has_exittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_DBGangExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 exitTime = 2;
    if (has_exittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_DBGangExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_DBGangExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_DBGangExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_DBGangExit::MergeFrom(const GM_DBGangExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_exittime()) {
      set_exittime(from.exittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_DBGangExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_DBGangExit::CopyFrom(const GM_DBGangExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_DBGangExit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_DBGangExit::Swap(GM_DBGangExit* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(exittime_, other->exittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_DBGangExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_DBGangExit_descriptor_;
  metadata.reflection = GM_DBGangExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllGangInvite::kCountFieldNumber;
const int GM_AllGangInvite::kInvitesFieldNumber;
#endif  // !_MSC_VER

GM_AllGangInvite::GM_AllGangInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllGangInvite::InitAsDefaultInstance() {
}

GM_AllGangInvite::GM_AllGangInvite(const GM_AllGangInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllGangInvite::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllGangInvite::~GM_AllGangInvite() {
  SharedDtor();
}

void GM_AllGangInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllGangInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllGangInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllGangInvite_descriptor_;
}

const GM_AllGangInvite& GM_AllGangInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_AllGangInvite* GM_AllGangInvite::default_instance_ = NULL;

GM_AllGangInvite* GM_AllGangInvite::New() const {
  return new GM_AllGangInvite;
}

void GM_AllGangInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  invites_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllGangInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invites;
        break;
      }

      // repeated .GM_GangInvite invites = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invites()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invites;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllGangInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_GangInvite invites = 2;
  for (int i = 0; i < this->invites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invites(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllGangInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_GangInvite invites = 2;
  for (int i = 0; i < this->invites_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invites(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllGangInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_GangInvite invites = 2;
  total_size += 1 * this->invites_size();
  for (int i = 0; i < this->invites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invites(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllGangInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllGangInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllGangInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllGangInvite::MergeFrom(const GM_AllGangInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  invites_.MergeFrom(from.invites_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllGangInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllGangInvite::CopyFrom(const GM_AllGangInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllGangInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < invites_size(); i++) {
    if (!this->invites(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllGangInvite::Swap(GM_AllGangInvite* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    invites_.Swap(&other->invites_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllGangInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllGangInvite_descriptor_;
  metadata.reflection = GM_AllGangInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangInvite::kRoleIdFieldNumber;
const int GM_GangInvite::kRoleNameFieldNumber;
const int GM_GangInvite::kGangGmidFieldNumber;
const int GM_GangInvite::kOperIdFieldNumber;
const int GM_GangInvite::kOperNameFieldNumber;
const int GM_GangInvite::kFlagFieldNumber;
#endif  // !_MSC_VER

GM_GangInvite::GM_GangInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangInvite::InitAsDefaultInstance() {
}

GM_GangInvite::GM_GangInvite(const GM_GangInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangInvite::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ganggmid_ = GOOGLE_LONGLONG(0);
  operid_ = 0;
  opername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangInvite::~GM_GangInvite() {
  SharedDtor();
}

void GM_GangInvite::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (opername_ != &::google::protobuf::internal::kEmptyString) {
    delete opername_;
  }
  if (this != default_instance_) {
  }
}

void GM_GangInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangInvite_descriptor_;
}

const GM_GangInvite& GM_GangInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangInvite* GM_GangInvite::default_instance_ = NULL;

GM_GangInvite* GM_GangInvite::New() const {
  return new GM_GangInvite;
}

void GM_GangInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    ganggmid_ = GOOGLE_LONGLONG(0);
    operid_ = 0;
    if (has_opername()) {
      if (opername_ != &::google::protobuf::internal::kEmptyString) {
        opername_->clear();
      }
    }
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gangGmid;
        break;
      }

      // required int64 gangGmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ganggmid_)));
          set_has_ganggmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operId;
        break;
      }

      // required int32 operId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operid_)));
          set_has_operid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_operName;
        break;
      }

      // optional string operName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opername().data(), this->opername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flag;
        break;
      }

      // optional int32 flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // required int64 gangGmid = 3;
  if (has_ganggmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ganggmid(), output);
  }

  // required int32 operId = 4;
  if (has_operid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operid(), output);
  }

  // optional string operName = 5;
  if (has_opername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opername().data(), this->opername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->opername(), output);
  }

  // optional int32 flag = 6;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // required int64 gangGmid = 3;
  if (has_ganggmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ganggmid(), target);
  }

  // required int32 operId = 4;
  if (has_operid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operid(), target);
  }

  // optional string operName = 5;
  if (has_opername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opername().data(), this->opername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->opername(), target);
  }

  // optional int32 flag = 6;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int64 gangGmid = 3;
    if (has_ganggmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ganggmid());
    }

    // required int32 operId = 4;
    if (has_operid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operid());
    }

    // optional string operName = 5;
    if (has_opername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opername());
    }

    // optional int32 flag = 6;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangInvite::MergeFrom(const GM_GangInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_ganggmid()) {
      set_ganggmid(from.ganggmid());
    }
    if (from.has_operid()) {
      set_operid(from.operid());
    }
    if (from.has_opername()) {
      set_opername(from.opername());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangInvite::CopyFrom(const GM_GangInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void GM_GangInvite::Swap(GM_GangInvite* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(ganggmid_, other->ganggmid_);
    std::swap(operid_, other->operid_);
    std::swap(opername_, other->opername_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangInvite_descriptor_;
  metadata.reflection = GM_GangInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GangDataChange::kRoleIdFieldNumber;
const int GM_GangDataChange::kSignFlagFieldNumber;
const int GM_GangDataChange::kSkillLevelFieldNumber;
const int GM_GangDataChange::kGangContributeFieldNumber;
#endif  // !_MSC_VER

GM_GangDataChange::GM_GangDataChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GangDataChange::InitAsDefaultInstance() {
}

GM_GangDataChange::GM_GangDataChange(const GM_GangDataChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GangDataChange::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  signflag_ = 0;
  skilllevel_ = 0;
  gangcontribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GangDataChange::~GM_GangDataChange() {
  SharedDtor();
}

void GM_GangDataChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GangDataChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GangDataChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GangDataChange_descriptor_;
}

const GM_GangDataChange& GM_GangDataChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

GM_GangDataChange* GM_GangDataChange::default_instance_ = NULL;

GM_GangDataChange* GM_GangDataChange::New() const {
  return new GM_GangDataChange;
}

void GM_GangDataChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    signflag_ = 0;
    skilllevel_ = 0;
    gangcontribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GangDataChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signFlag;
        break;
      }

      // optional int32 signFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signflag_)));
          set_has_signflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLevel;
        break;
      }

      // optional int32 skillLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gangContribute;
        break;
      }

      // optional int32 gangContribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangcontribute_)));
          set_has_gangcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GangDataChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 signFlag = 2;
  if (has_signflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signflag(), output);
  }

  // optional int32 skillLevel = 3;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skilllevel(), output);
  }

  // optional int32 gangContribute = 4;
  if (has_gangcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gangcontribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GangDataChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 signFlag = 2;
  if (has_signflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signflag(), target);
  }

  // optional int32 skillLevel = 3;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skilllevel(), target);
  }

  // optional int32 gangContribute = 4;
  if (has_gangcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gangcontribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GangDataChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 signFlag = 2;
    if (has_signflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signflag());
    }

    // optional int32 skillLevel = 3;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional int32 gangContribute = 4;
    if (has_gangcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangcontribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GangDataChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GangDataChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GangDataChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GangDataChange::MergeFrom(const GM_GangDataChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_signflag()) {
      set_signflag(from.signflag());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_gangcontribute()) {
      set_gangcontribute(from.gangcontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GangDataChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GangDataChange::CopyFrom(const GM_GangDataChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GangDataChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GangDataChange::Swap(GM_GangDataChange* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(signflag_, other->signflag_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(gangcontribute_, other->gangcontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GangDataChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GangDataChange_descriptor_;
  metadata.reflection = GM_GangDataChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_tAllGangData::kCountFieldNumber;
const int DB_tAllGangData::kGangdataFieldNumber;
#endif  // !_MSC_VER

DB_tAllGangData::DB_tAllGangData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_tAllGangData::InitAsDefaultInstance() {
}

DB_tAllGangData::DB_tAllGangData(const DB_tAllGangData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_tAllGangData::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_tAllGangData::~DB_tAllGangData() {
  SharedDtor();
}

void DB_tAllGangData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_tAllGangData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_tAllGangData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_tAllGangData_descriptor_;
}

const DB_tAllGangData& DB_tAllGangData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

DB_tAllGangData* DB_tAllGangData::default_instance_ = NULL;

DB_tAllGangData* DB_tAllGangData::New() const {
  return new DB_tAllGangData;
}

void DB_tAllGangData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  gangdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_tAllGangData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangdata;
        break;
      }

      // repeated .DB_tGangData gangdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gangdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_tAllGangData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .DB_tGangData gangdata = 2;
  for (int i = 0; i < this->gangdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gangdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_tAllGangData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .DB_tGangData gangdata = 2;
  for (int i = 0; i < this->gangdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gangdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_tAllGangData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .DB_tGangData gangdata = 2;
  total_size += 1 * this->gangdata_size();
  for (int i = 0; i < this->gangdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_tAllGangData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_tAllGangData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_tAllGangData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_tAllGangData::MergeFrom(const DB_tAllGangData& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangdata_.MergeFrom(from.gangdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_tAllGangData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_tAllGangData::CopyFrom(const DB_tAllGangData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_tAllGangData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gangdata_size(); i++) {
    if (!this->gangdata(i).IsInitialized()) return false;
  }
  return true;
}

void DB_tAllGangData::Swap(DB_tAllGangData* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    gangdata_.Swap(&other->gangdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_tAllGangData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_tAllGangData_descriptor_;
  metadata.reflection = DB_tAllGangData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_tGangData::kGmidFieldNumber;
const int DB_tGangData::kNameFieldNumber;
const int DB_tGangData::kExpFieldNumber;
const int DB_tGangData::kLvFieldNumber;
const int DB_tGangData::kTemplvFieldNumber;
const int DB_tGangData::kShoplvFieldNumber;
const int DB_tGangData::kNoticeFieldNumber;
const int DB_tGangData::kPronoceFieldNumber;
const int DB_tGangData::kUplvtimeFieldNumber;
const int DB_tGangData::kBlesscntFieldNumber;
#endif  // !_MSC_VER

DB_tGangData::DB_tGangData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_tGangData::InitAsDefaultInstance() {
}

DB_tGangData::DB_tGangData(const DB_tGangData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_tGangData::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  lv_ = 0;
  templv_ = 0;
  shoplv_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pronoce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uplvtime_ = 0;
  blesscnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_tGangData::~DB_tGangData() {
  SharedDtor();
}

void DB_tGangData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
    delete pronoce_;
  }
  if (this != default_instance_) {
  }
}

void DB_tGangData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_tGangData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_tGangData_descriptor_;
}

const DB_tGangData& DB_tGangData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

DB_tGangData* DB_tGangData::default_instance_ = NULL;

DB_tGangData* DB_tGangData::New() const {
  return new DB_tGangData;
}

void DB_tGangData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    exp_ = 0;
    lv_ = 0;
    templv_ = 0;
    shoplv_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_pronoce()) {
      if (pronoce_ != &::google::protobuf::internal::kEmptyString) {
        pronoce_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uplvtime_ = 0;
    blesscnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_tGangData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_templv;
        break;
      }

      // optional int32 templv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templv_)));
          set_has_templv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shoplv;
        break;
      }

      // optional int32 shoplv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoplv_)));
          set_has_shoplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notice;
        break;
      }

      // optional string notice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pronoce;
        break;
      }

      // optional string pronoce = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pronoce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pronoce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pronoce().data(), this->pronoce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uplvtime;
        break;
      }

      // optional int32 uplvtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uplvtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uplvtime_)));
          set_has_uplvtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blesscnt;
        break;
      }

      // optional int32 blesscnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blesscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blesscnt_)));
          set_has_blesscnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_tGangData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 templv = 5;
  if (has_templv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->templv(), output);
  }

  // optional int32 shoplv = 6;
  if (has_shoplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shoplv(), output);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->notice(), output);
  }

  // optional string pronoce = 8;
  if (has_pronoce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pronoce().data(), this->pronoce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pronoce(), output);
  }

  // optional int32 uplvtime = 9;
  if (has_uplvtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->uplvtime(), output);
  }

  // optional int32 blesscnt = 10;
  if (has_blesscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->blesscnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_tGangData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 templv = 5;
  if (has_templv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->templv(), target);
  }

  // optional int32 shoplv = 6;
  if (has_shoplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shoplv(), target);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notice(), target);
  }

  // optional string pronoce = 8;
  if (has_pronoce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pronoce().data(), this->pronoce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pronoce(), target);
  }

  // optional int32 uplvtime = 9;
  if (has_uplvtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->uplvtime(), target);
  }

  // optional int32 blesscnt = 10;
  if (has_blesscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->blesscnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_tGangData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 templv = 5;
    if (has_templv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templv());
    }

    // optional int32 shoplv = 6;
    if (has_shoplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoplv());
    }

    // optional string notice = 7;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional string pronoce = 8;
    if (has_pronoce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pronoce());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 uplvtime = 9;
    if (has_uplvtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uplvtime());
    }

    // optional int32 blesscnt = 10;
    if (has_blesscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blesscnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_tGangData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_tGangData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_tGangData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_tGangData::MergeFrom(const DB_tGangData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_templv()) {
      set_templv(from.templv());
    }
    if (from.has_shoplv()) {
      set_shoplv(from.shoplv());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_pronoce()) {
      set_pronoce(from.pronoce());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uplvtime()) {
      set_uplvtime(from.uplvtime());
    }
    if (from.has_blesscnt()) {
      set_blesscnt(from.blesscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_tGangData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_tGangData::CopyFrom(const DB_tGangData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_tGangData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_tGangData::Swap(DB_tGangData* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(name_, other->name_);
    std::swap(exp_, other->exp_);
    std::swap(lv_, other->lv_);
    std::swap(templv_, other->templv_);
    std::swap(shoplv_, other->shoplv_);
    std::swap(notice_, other->notice_);
    std::swap(pronoce_, other->pronoce_);
    std::swap(uplvtime_, other->uplvtime_);
    std::swap(blesscnt_, other->blesscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_tGangData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_tGangData_descriptor_;
  metadata.reflection = DB_tGangData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_LifeTreeRoleInfo_Return::kMRoleIdFieldNumber;
const int DB_LifeTreeRoleInfo_Return::kMLastTimeFieldNumber;
const int DB_LifeTreeRoleInfo_Return::kMCountFieldNumber;
#endif  // !_MSC_VER

DB_LifeTreeRoleInfo_Return::DB_LifeTreeRoleInfo_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_LifeTreeRoleInfo_Return::InitAsDefaultInstance() {
}

DB_LifeTreeRoleInfo_Return::DB_LifeTreeRoleInfo_Return(const DB_LifeTreeRoleInfo_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_LifeTreeRoleInfo_Return::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_lasttime_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_LifeTreeRoleInfo_Return::~DB_LifeTreeRoleInfo_Return() {
  SharedDtor();
}

void DB_LifeTreeRoleInfo_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_LifeTreeRoleInfo_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_LifeTreeRoleInfo_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_LifeTreeRoleInfo_Return_descriptor_;
}

const DB_LifeTreeRoleInfo_Return& DB_LifeTreeRoleInfo_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGang_2etxt();
  return *default_instance_;
}

DB_LifeTreeRoleInfo_Return* DB_LifeTreeRoleInfo_Return::default_instance_ = NULL;

DB_LifeTreeRoleInfo_Return* DB_LifeTreeRoleInfo_Return::New() const {
  return new DB_LifeTreeRoleInfo_Return;
}

void DB_LifeTreeRoleInfo_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_lasttime_ = 0;
    m_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_LifeTreeRoleInfo_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_LastTime;
        break;
      }

      // required int32 m_LastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lasttime_)));
          set_has_m_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_LifeTreeRoleInfo_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // required int32 m_LastTime = 2;
  if (has_m_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lasttime(), output);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_LifeTreeRoleInfo_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // required int32 m_LastTime = 2;
  if (has_m_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lasttime(), target);
  }

  // required int32 m_Count = 3;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_LifeTreeRoleInfo_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int32 m_LastTime = 2;
    if (has_m_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lasttime());
    }

    // required int32 m_Count = 3;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_LifeTreeRoleInfo_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_LifeTreeRoleInfo_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_LifeTreeRoleInfo_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_LifeTreeRoleInfo_Return::MergeFrom(const DB_LifeTreeRoleInfo_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_lasttime()) {
      set_m_lasttime(from.m_lasttime());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_LifeTreeRoleInfo_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_LifeTreeRoleInfo_Return::CopyFrom(const DB_LifeTreeRoleInfo_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_LifeTreeRoleInfo_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DB_LifeTreeRoleInfo_Return::Swap(DB_LifeTreeRoleInfo_Return* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_lasttime_, other->m_lasttime_);
    std::swap(m_count_, other->m_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_LifeTreeRoleInfo_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_LifeTreeRoleInfo_Return_descriptor_;
  metadata.reflection = DB_LifeTreeRoleInfo_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
