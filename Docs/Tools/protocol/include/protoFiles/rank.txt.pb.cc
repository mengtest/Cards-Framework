// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RankPageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RankPageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RankListReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RankListReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllRankListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllRankListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AllRankTypeListReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AllRankTypeListReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rank_2etxt() {
  protobuf_AddDesc_rank_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rank.txt");
  GOOGLE_CHECK(file != NULL);
  GM_RankInfo_descriptor_ = file->message_type(0);
  static const int GM_RankInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_qqhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, m_nickname_),
  };
  GM_RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RankInfo_descriptor_,
      GM_RankInfo::default_instance_,
      GM_RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RankInfo));
  GM_RankPageRequest_descriptor_ = file->message_type(1);
  static const int GM_RankPageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankPageRequest, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankPageRequest, m_ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankPageRequest, m_pagenum_),
  };
  GM_RankPageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RankPageRequest_descriptor_,
      GM_RankPageRequest::default_instance_,
      GM_RankPageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankPageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankPageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RankPageRequest));
  GM_RankListReturn_descriptor_ = file->message_type(2);
  static const int GM_RankListReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankListReturn, m_ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankListReturn, m_selfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankListReturn, m_rankinfo_),
  };
  GM_RankListReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RankListReturn_descriptor_,
      GM_RankListReturn::default_instance_,
      GM_RankListReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankListReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankListReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RankListReturn));
  GM_AllRankListRequest_descriptor_ = file->message_type(3);
  static const int GM_AllRankListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankListRequest, m_roleid_),
  };
  GM_AllRankListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllRankListRequest_descriptor_,
      GM_AllRankListRequest::default_instance_,
      GM_AllRankListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllRankListRequest));
  GM_AllRankTypeListReturn_descriptor_ = file->message_type(4);
  static const int GM_AllRankTypeListReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankTypeListReturn, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankTypeListReturn, ranklist_),
  };
  GM_AllRankTypeListReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AllRankTypeListReturn_descriptor_,
      GM_AllRankTypeListReturn::default_instance_,
      GM_AllRankTypeListReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankTypeListReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AllRankTypeListReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AllRankTypeListReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rank_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RankInfo_descriptor_, &GM_RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RankPageRequest_descriptor_, &GM_RankPageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RankListReturn_descriptor_, &GM_RankListReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllRankListRequest_descriptor_, &GM_AllRankListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AllRankTypeListReturn_descriptor_, &GM_AllRankTypeListReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rank_2etxt() {
  delete GM_RankInfo::default_instance_;
  delete GM_RankInfo_reflection_;
  delete GM_RankPageRequest::default_instance_;
  delete GM_RankPageRequest_reflection_;
  delete GM_RankListReturn::default_instance_;
  delete GM_RankListReturn_reflection_;
  delete GM_AllRankListRequest::default_instance_;
  delete GM_AllRankListRequest_reflection_;
  delete GM_AllRankTypeListReturn::default_instance_;
  delete GM_AllRankTypeListReturn_reflection_;
}

void protobuf_AddDesc_rank_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010rank.txt\"\264\001\n\013GM_RankInfo\022\017\n\007m_place\030\001 "
    "\002(\005\022\020\n\010m_roleID\030\002 \001(\005\022\022\n\nm_roleName\030\003 \001("
    "\t\022\r\n\005m_vip\030\004 \001(\005\022\017\n\007m_value\030\005 \001(\005\022\023\n\013m_h"
    "eadphoto\030\006 \001(\005\022\023\n\013m_headFrame\030\007 \001(\005\022\020\n\010m"
    "_qqhead\030\010 \001(\t\022\022\n\nm_nickname\030\t \001(\t\"M\n\022GM_"
    "RankPageRequest\022\020\n\010m_RoleID\030\001 \002(\005\022\022\n\nm_R"
    "ankType\030\002 \002(\005\022\021\n\tm_pagenum\030\003 \002(\005\"k\n\021GM_R"
    "ankListReturn\022\022\n\nm_RankType\030\001 \002(\005\022 \n\nm_S"
    "elfInfo\030\002 \001(\0132\014.GM_RankInfo\022 \n\nm_RankInf"
    "o\030\004 \003(\0132\014.GM_RankInfo\")\n\025GM_AllRankListR"
    "equest\022\020\n\010m_RoleID\030\001 \002(\005\"O\n\030GM_AllRankTy"
    "peListReturn\022\r\n\005count\030\001 \002(\005\022$\n\010ranklist\030"
    "\002 \003(\0132\022.GM_RankListReturn", 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rank.txt", &protobuf_RegisterTypes);
  GM_RankInfo::default_instance_ = new GM_RankInfo();
  GM_RankPageRequest::default_instance_ = new GM_RankPageRequest();
  GM_RankListReturn::default_instance_ = new GM_RankListReturn();
  GM_AllRankListRequest::default_instance_ = new GM_AllRankListRequest();
  GM_AllRankTypeListReturn::default_instance_ = new GM_AllRankTypeListReturn();
  GM_RankInfo::default_instance_->InitAsDefaultInstance();
  GM_RankPageRequest::default_instance_->InitAsDefaultInstance();
  GM_RankListReturn::default_instance_->InitAsDefaultInstance();
  GM_AllRankListRequest::default_instance_->InitAsDefaultInstance();
  GM_AllRankTypeListReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_2etxt {
  StaticDescriptorInitializer_rank_2etxt() {
    protobuf_AddDesc_rank_2etxt();
  }
} static_descriptor_initializer_rank_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_RankInfo::kMPlaceFieldNumber;
const int GM_RankInfo::kMRoleIDFieldNumber;
const int GM_RankInfo::kMRoleNameFieldNumber;
const int GM_RankInfo::kMVipFieldNumber;
const int GM_RankInfo::kMValueFieldNumber;
const int GM_RankInfo::kMHeadphotoFieldNumber;
const int GM_RankInfo::kMHeadFrameFieldNumber;
const int GM_RankInfo::kMQqheadFieldNumber;
const int GM_RankInfo::kMNicknameFieldNumber;
#endif  // !_MSC_VER

GM_RankInfo::GM_RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RankInfo::InitAsDefaultInstance() {
}

GM_RankInfo::GM_RankInfo(const GM_RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RankInfo::SharedCtor() {
  _cached_size_ = 0;
  m_place_ = 0;
  m_roleid_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_vip_ = 0;
  m_value_ = 0;
  m_headphoto_ = 0;
  m_headframe_ = 0;
  m_qqhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RankInfo::~GM_RankInfo() {
  SharedDtor();
}

void GM_RankInfo::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_qqhead_ != &::google::protobuf::internal::kEmptyString) {
    delete m_qqhead_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (this != default_instance_) {
  }
}

void GM_RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RankInfo_descriptor_;
}

const GM_RankInfo& GM_RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2etxt();
  return *default_instance_;
}

GM_RankInfo* GM_RankInfo::default_instance_ = NULL;

GM_RankInfo* GM_RankInfo::New() const {
  return new GM_RankInfo;
}

void GM_RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_place_ = 0;
    m_roleid_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_vip_ = 0;
    m_value_ = 0;
    m_headphoto_ = 0;
    m_headframe_ = 0;
    if (has_m_qqhead()) {
      if (m_qqhead_ != &::google::protobuf::internal::kEmptyString) {
        m_qqhead_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_place = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_place_)));
          set_has_m_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleID;
        break;
      }

      // optional int32 m_roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_roleName;
        break;
      }

      // optional string m_roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_vip;
        break;
      }

      // optional int32 m_vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_headphoto;
        break;
      }

      // optional int32 m_headphoto = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headphoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_headFrame;
        break;
      }

      // optional int32 m_headFrame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_qqhead;
        break;
      }

      // optional string m_qqhead = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_qqhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_qqhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_qqhead().data(), this->m_qqhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_nickname;
        break;
      }

      // optional string m_nickname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_place = 1;
  if (has_m_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_place(), output);
  }

  // optional int32 m_roleID = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // optional string m_roleName = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_rolename(), output);
  }

  // optional int32 m_vip = 4;
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_vip(), output);
  }

  // optional int32 m_value = 5;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_value(), output);
  }

  // optional int32 m_headphoto = 6;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_headphoto(), output);
  }

  // optional int32 m_headFrame = 7;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_headframe(), output);
  }

  // optional string m_qqhead = 8;
  if (has_m_qqhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_qqhead().data(), this->m_qqhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_qqhead(), output);
  }

  // optional string m_nickname = 9;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_place = 1;
  if (has_m_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_place(), target);
  }

  // optional int32 m_roleID = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // optional string m_roleName = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_rolename(), target);
  }

  // optional int32 m_vip = 4;
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_vip(), target);
  }

  // optional int32 m_value = 5;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_value(), target);
  }

  // optional int32 m_headphoto = 6;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_headphoto(), target);
  }

  // optional int32 m_headFrame = 7;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_headframe(), target);
  }

  // optional string m_qqhead = 8;
  if (has_m_qqhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_qqhead().data(), this->m_qqhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_qqhead(), target);
  }

  // optional string m_nickname = 9;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_place = 1;
    if (has_m_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_place());
    }

    // optional int32 m_roleID = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional string m_roleName = 3;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_vip = 4;
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip());
    }

    // optional int32 m_value = 5;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_headphoto = 6;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_headFrame = 7;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

    // optional string m_qqhead = 8;
    if (has_m_qqhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_qqhead());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_nickname = 9;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RankInfo::MergeFrom(const GM_RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_place()) {
      set_m_place(from.m_place());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
    if (from.has_m_qqhead()) {
      set_m_qqhead(from.m_qqhead());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RankInfo::CopyFrom(const GM_RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RankInfo::Swap(GM_RankInfo* other) {
  if (other != this) {
    std::swap(m_place_, other->m_place_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_vip_, other->m_vip_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_qqhead_, other->m_qqhead_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RankInfo_descriptor_;
  metadata.reflection = GM_RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RankPageRequest::kMRoleIDFieldNumber;
const int GM_RankPageRequest::kMRankTypeFieldNumber;
const int GM_RankPageRequest::kMPagenumFieldNumber;
#endif  // !_MSC_VER

GM_RankPageRequest::GM_RankPageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RankPageRequest::InitAsDefaultInstance() {
}

GM_RankPageRequest::GM_RankPageRequest(const GM_RankPageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RankPageRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_ranktype_ = 0;
  m_pagenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RankPageRequest::~GM_RankPageRequest() {
  SharedDtor();
}

void GM_RankPageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RankPageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RankPageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RankPageRequest_descriptor_;
}

const GM_RankPageRequest& GM_RankPageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2etxt();
  return *default_instance_;
}

GM_RankPageRequest* GM_RankPageRequest::default_instance_ = NULL;

GM_RankPageRequest* GM_RankPageRequest::New() const {
  return new GM_RankPageRequest;
}

void GM_RankPageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_ranktype_ = 0;
    m_pagenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RankPageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_RankType;
        break;
      }

      // required int32 m_RankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_RankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ranktype_)));
          set_has_m_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pagenum;
        break;
      }

      // required int32 m_pagenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pagenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pagenum_)));
          set_has_m_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RankPageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // required int32 m_RankType = 2;
  if (has_m_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ranktype(), output);
  }

  // required int32 m_pagenum = 3;
  if (has_m_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_pagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RankPageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // required int32 m_RankType = 2;
  if (has_m_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ranktype(), target);
  }

  // required int32 m_pagenum = 3;
  if (has_m_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_pagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RankPageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int32 m_RankType = 2;
    if (has_m_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ranktype());
    }

    // required int32 m_pagenum = 3;
    if (has_m_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RankPageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RankPageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RankPageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RankPageRequest::MergeFrom(const GM_RankPageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_ranktype()) {
      set_m_ranktype(from.m_ranktype());
    }
    if (from.has_m_pagenum()) {
      set_m_pagenum(from.m_pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RankPageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RankPageRequest::CopyFrom(const GM_RankPageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RankPageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_RankPageRequest::Swap(GM_RankPageRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_ranktype_, other->m_ranktype_);
    std::swap(m_pagenum_, other->m_pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RankPageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RankPageRequest_descriptor_;
  metadata.reflection = GM_RankPageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RankListReturn::kMRankTypeFieldNumber;
const int GM_RankListReturn::kMSelfInfoFieldNumber;
const int GM_RankListReturn::kMRankInfoFieldNumber;
#endif  // !_MSC_VER

GM_RankListReturn::GM_RankListReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RankListReturn::InitAsDefaultInstance() {
  m_selfinfo_ = const_cast< ::GM_RankInfo*>(&::GM_RankInfo::default_instance());
}

GM_RankListReturn::GM_RankListReturn(const GM_RankListReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RankListReturn::SharedCtor() {
  _cached_size_ = 0;
  m_ranktype_ = 0;
  m_selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RankListReturn::~GM_RankListReturn() {
  SharedDtor();
}

void GM_RankListReturn::SharedDtor() {
  if (this != default_instance_) {
    delete m_selfinfo_;
  }
}

void GM_RankListReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RankListReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RankListReturn_descriptor_;
}

const GM_RankListReturn& GM_RankListReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2etxt();
  return *default_instance_;
}

GM_RankListReturn* GM_RankListReturn::default_instance_ = NULL;

GM_RankListReturn* GM_RankListReturn::New() const {
  return new GM_RankListReturn;
}

void GM_RankListReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ranktype_ = 0;
    if (has_m_selfinfo()) {
      if (m_selfinfo_ != NULL) m_selfinfo_->::GM_RankInfo::Clear();
    }
  }
  m_rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RankListReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ranktype_)));
          set_has_m_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_SelfInfo;
        break;
      }

      // optional .GM_RankInfo m_SelfInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_SelfInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_selfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_RankInfo;
        break;
      }

      // repeated .GM_RankInfo m_RankInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_RankInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RankListReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RankType = 1;
  if (has_m_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ranktype(), output);
  }

  // optional .GM_RankInfo m_SelfInfo = 2;
  if (has_m_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_selfinfo(), output);
  }

  // repeated .GM_RankInfo m_RankInfo = 4;
  for (int i = 0; i < this->m_rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_rankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RankListReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RankType = 1;
  if (has_m_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ranktype(), target);
  }

  // optional .GM_RankInfo m_SelfInfo = 2;
  if (has_m_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_selfinfo(), target);
  }

  // repeated .GM_RankInfo m_RankInfo = 4;
  for (int i = 0; i < this->m_rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_rankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RankListReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RankType = 1;
    if (has_m_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ranktype());
    }

    // optional .GM_RankInfo m_SelfInfo = 2;
    if (has_m_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_selfinfo());
    }

  }
  // repeated .GM_RankInfo m_RankInfo = 4;
  total_size += 1 * this->m_rankinfo_size();
  for (int i = 0; i < this->m_rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RankListReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RankListReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RankListReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RankListReturn::MergeFrom(const GM_RankListReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_rankinfo_.MergeFrom(from.m_rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ranktype()) {
      set_m_ranktype(from.m_ranktype());
    }
    if (from.has_m_selfinfo()) {
      mutable_m_selfinfo()->::GM_RankInfo::MergeFrom(from.m_selfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RankListReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RankListReturn::CopyFrom(const GM_RankListReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RankListReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_selfinfo()) {
    if (!this->m_selfinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < m_rankinfo_size(); i++) {
    if (!this->m_rankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_RankListReturn::Swap(GM_RankListReturn* other) {
  if (other != this) {
    std::swap(m_ranktype_, other->m_ranktype_);
    std::swap(m_selfinfo_, other->m_selfinfo_);
    m_rankinfo_.Swap(&other->m_rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RankListReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RankListReturn_descriptor_;
  metadata.reflection = GM_RankListReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllRankListRequest::kMRoleIDFieldNumber;
#endif  // !_MSC_VER

GM_AllRankListRequest::GM_AllRankListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllRankListRequest::InitAsDefaultInstance() {
}

GM_AllRankListRequest::GM_AllRankListRequest(const GM_AllRankListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllRankListRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllRankListRequest::~GM_AllRankListRequest() {
  SharedDtor();
}

void GM_AllRankListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllRankListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllRankListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllRankListRequest_descriptor_;
}

const GM_AllRankListRequest& GM_AllRankListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2etxt();
  return *default_instance_;
}

GM_AllRankListRequest* GM_AllRankListRequest::default_instance_ = NULL;

GM_AllRankListRequest* GM_AllRankListRequest::New() const {
  return new GM_AllRankListRequest;
}

void GM_AllRankListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllRankListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllRankListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllRankListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllRankListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllRankListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllRankListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllRankListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllRankListRequest::MergeFrom(const GM_AllRankListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllRankListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllRankListRequest::CopyFrom(const GM_AllRankListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllRankListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AllRankListRequest::Swap(GM_AllRankListRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllRankListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllRankListRequest_descriptor_;
  metadata.reflection = GM_AllRankListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AllRankTypeListReturn::kCountFieldNumber;
const int GM_AllRankTypeListReturn::kRanklistFieldNumber;
#endif  // !_MSC_VER

GM_AllRankTypeListReturn::GM_AllRankTypeListReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AllRankTypeListReturn::InitAsDefaultInstance() {
}

GM_AllRankTypeListReturn::GM_AllRankTypeListReturn(const GM_AllRankTypeListReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AllRankTypeListReturn::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AllRankTypeListReturn::~GM_AllRankTypeListReturn() {
  SharedDtor();
}

void GM_AllRankTypeListReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AllRankTypeListReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AllRankTypeListReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AllRankTypeListReturn_descriptor_;
}

const GM_AllRankTypeListReturn& GM_AllRankTypeListReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2etxt();
  return *default_instance_;
}

GM_AllRankTypeListReturn* GM_AllRankTypeListReturn::default_instance_ = NULL;

GM_AllRankTypeListReturn* GM_AllRankTypeListReturn::New() const {
  return new GM_AllRankTypeListReturn;
}

void GM_AllRankTypeListReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AllRankTypeListReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranklist;
        break;
      }

      // repeated .GM_RankListReturn ranklist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AllRankTypeListReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .GM_RankListReturn ranklist = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AllRankTypeListReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .GM_RankListReturn ranklist = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AllRankTypeListReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_RankListReturn ranklist = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AllRankTypeListReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AllRankTypeListReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AllRankTypeListReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AllRankTypeListReturn::MergeFrom(const GM_AllRankTypeListReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AllRankTypeListReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AllRankTypeListReturn::CopyFrom(const GM_AllRankTypeListReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AllRankTypeListReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AllRankTypeListReturn::Swap(GM_AllRankTypeListReturn* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AllRankTypeListReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AllRankTypeListReturn_descriptor_;
  metadata.reflection = GM_AllRankTypeListReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
