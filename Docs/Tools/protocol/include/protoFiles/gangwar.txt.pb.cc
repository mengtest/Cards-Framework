// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gangwar.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gangwar.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Gangwar_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Open_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Open_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Rankings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Rankings_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Rankings_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Rankings_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Rankings_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Rankings_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Bidding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Bidding_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Bidding_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Bidding_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_WarOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_WarOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_CheckRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_CheckRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_CheckRoom_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_CheckRoom_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_CheckRoom_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_CheckRoom_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_EnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_EnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_EnterRoom_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_EnterRoom_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gangwar_Testing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gangwar_Testing_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gangwar_2etxt() {
  protobuf_AddDesc_gangwar_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gangwar.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Gangwar_Open_Return_descriptor_ = file->message_type(0);
  static const int GM_Gangwar_Open_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Return, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Return, m_second_),
  };
  GM_Gangwar_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Open_Return_descriptor_,
      GM_Gangwar_Open_Return::default_instance_,
      GM_Gangwar_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Open_Return));
  GM_Gangwar_Open_Data_descriptor_ = file->message_type(1);
  static const int GM_Gangwar_Open_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Data, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Data, m_mineralgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Data, m_gangid_),
  };
  GM_Gangwar_Open_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Open_Data_descriptor_,
      GM_Gangwar_Open_Data::default_instance_,
      GM_Gangwar_Open_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Open_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Open_Data));
  GM_Gangwar_Rankings_descriptor_ = file->message_type(2);
  static const int GM_Gangwar_Rankings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings, m_mineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings, m_gangid_),
  };
  GM_Gangwar_Rankings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Rankings_descriptor_,
      GM_Gangwar_Rankings::default_instance_,
      GM_Gangwar_Rankings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Rankings));
  GM_Gangwar_Rankings_Return_descriptor_ = file->message_type(3);
  static const int GM_Gangwar_Rankings_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Return, m_data_),
  };
  GM_Gangwar_Rankings_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Rankings_Return_descriptor_,
      GM_Gangwar_Rankings_Return::default_instance_,
      GM_Gangwar_Rankings_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Rankings_Return));
  GM_Gangwar_Rankings_Data_descriptor_ = file->message_type(4);
  static const int GM_Gangwar_Rankings_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Data, m_gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Data, mine_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Data, m_rank_),
  };
  GM_Gangwar_Rankings_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Rankings_Data_descriptor_,
      GM_Gangwar_Rankings_Data::default_instance_,
      GM_Gangwar_Rankings_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Rankings_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Rankings_Data));
  GM_Gangwar_Bidding_descriptor_ = file->message_type(5);
  static const int GM_Gangwar_Bidding_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Bidding, m_mineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Bidding, m_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Bidding, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Bidding, m_gangid_),
  };
  GM_Gangwar_Bidding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Bidding_descriptor_,
      GM_Gangwar_Bidding::default_instance_,
      GM_Gangwar_Bidding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Bidding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Bidding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Bidding));
  GM_Bidding_Result_descriptor_ = file->message_type(6);
  static const int GM_Bidding_Result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Bidding_Result, m_state_),
  };
  GM_Bidding_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Bidding_Result_descriptor_,
      GM_Bidding_Result::default_instance_,
      GM_Bidding_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Bidding_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Bidding_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Bidding_Result));
  GM_Gangwar_WarOpen_descriptor_ = file->message_type(7);
  static const int GM_Gangwar_WarOpen_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_othername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_roomdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_myscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_otherscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_minestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, m_second_),
  };
  GM_Gangwar_WarOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_WarOpen_descriptor_,
      GM_Gangwar_WarOpen::default_instance_,
      GM_Gangwar_WarOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_WarOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_WarOpen));
  GM_Gangwar_Data_descriptor_ = file->message_type(8);
  static const int GM_Gangwar_Data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, m_mynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, m_maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, m_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, m_wingangid_),
  };
  GM_Gangwar_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Data_descriptor_,
      GM_Gangwar_Data::default_instance_,
      GM_Gangwar_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Data));
  GM_Gangwar_CheckRoom_descriptor_ = file->message_type(9);
  static const int GM_Gangwar_CheckRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom, m_mineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom, m_gangid_),
  };
  GM_Gangwar_CheckRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_CheckRoom_descriptor_,
      GM_Gangwar_CheckRoom::default_instance_,
      GM_Gangwar_CheckRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_CheckRoom));
  GM_Gangwar_CheckRoom_Return_descriptor_ = file->message_type(10);
  static const int GM_Gangwar_CheckRoom_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Return, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Return, m_roomname_),
  };
  GM_Gangwar_CheckRoom_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_CheckRoom_Return_descriptor_,
      GM_Gangwar_CheckRoom_Return::default_instance_,
      GM_Gangwar_CheckRoom_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_CheckRoom_Return));
  GM_Gangwar_CheckRoom_Data_descriptor_ = file->message_type(11);
  static const int GM_Gangwar_CheckRoom_Data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, m_fightval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, m_entertime_),
  };
  GM_Gangwar_CheckRoom_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_CheckRoom_Data_descriptor_,
      GM_Gangwar_CheckRoom_Data::default_instance_,
      GM_Gangwar_CheckRoom_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_CheckRoom_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_CheckRoom_Data));
  GM_Gangwar_EnterRoom_descriptor_ = file->message_type(12);
  static const int GM_Gangwar_EnterRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom, m_mineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom, m_gangid_),
  };
  GM_Gangwar_EnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_EnterRoom_descriptor_,
      GM_Gangwar_EnterRoom::default_instance_,
      GM_Gangwar_EnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_EnterRoom));
  GM_Gangwar_EnterRoom_Return_descriptor_ = file->message_type(13);
  static const int GM_Gangwar_EnterRoom_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom_Return, m_data_),
  };
  GM_Gangwar_EnterRoom_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_EnterRoom_Return_descriptor_,
      GM_Gangwar_EnterRoom_Return::default_instance_,
      GM_Gangwar_EnterRoom_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_EnterRoom_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_EnterRoom_Return));
  GM_Gangwar_Testing_descriptor_ = file->message_type(14);
  static const int GM_Gangwar_Testing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Testing, m_state_),
  };
  GM_Gangwar_Testing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gangwar_Testing_descriptor_,
      GM_Gangwar_Testing::default_instance_,
      GM_Gangwar_Testing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Testing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gangwar_Testing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gangwar_Testing));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gangwar_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Open_Return_descriptor_, &GM_Gangwar_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Open_Data_descriptor_, &GM_Gangwar_Open_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Rankings_descriptor_, &GM_Gangwar_Rankings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Rankings_Return_descriptor_, &GM_Gangwar_Rankings_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Rankings_Data_descriptor_, &GM_Gangwar_Rankings_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Bidding_descriptor_, &GM_Gangwar_Bidding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Bidding_Result_descriptor_, &GM_Bidding_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_WarOpen_descriptor_, &GM_Gangwar_WarOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Data_descriptor_, &GM_Gangwar_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_CheckRoom_descriptor_, &GM_Gangwar_CheckRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_CheckRoom_Return_descriptor_, &GM_Gangwar_CheckRoom_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_CheckRoom_Data_descriptor_, &GM_Gangwar_CheckRoom_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_EnterRoom_descriptor_, &GM_Gangwar_EnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_EnterRoom_Return_descriptor_, &GM_Gangwar_EnterRoom_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gangwar_Testing_descriptor_, &GM_Gangwar_Testing::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gangwar_2etxt() {
  delete GM_Gangwar_Open_Return::default_instance_;
  delete GM_Gangwar_Open_Return_reflection_;
  delete GM_Gangwar_Open_Data::default_instance_;
  delete GM_Gangwar_Open_Data_reflection_;
  delete GM_Gangwar_Rankings::default_instance_;
  delete GM_Gangwar_Rankings_reflection_;
  delete GM_Gangwar_Rankings_Return::default_instance_;
  delete GM_Gangwar_Rankings_Return_reflection_;
  delete GM_Gangwar_Rankings_Data::default_instance_;
  delete GM_Gangwar_Rankings_Data_reflection_;
  delete GM_Gangwar_Bidding::default_instance_;
  delete GM_Gangwar_Bidding_reflection_;
  delete GM_Bidding_Result::default_instance_;
  delete GM_Bidding_Result_reflection_;
  delete GM_Gangwar_WarOpen::default_instance_;
  delete GM_Gangwar_WarOpen_reflection_;
  delete GM_Gangwar_Data::default_instance_;
  delete GM_Gangwar_Data_reflection_;
  delete GM_Gangwar_CheckRoom::default_instance_;
  delete GM_Gangwar_CheckRoom_reflection_;
  delete GM_Gangwar_CheckRoom_Return::default_instance_;
  delete GM_Gangwar_CheckRoom_Return_reflection_;
  delete GM_Gangwar_CheckRoom_Data::default_instance_;
  delete GM_Gangwar_CheckRoom_Data_reflection_;
  delete GM_Gangwar_EnterRoom::default_instance_;
  delete GM_Gangwar_EnterRoom_reflection_;
  delete GM_Gangwar_EnterRoom_Return::default_instance_;
  delete GM_Gangwar_EnterRoom_Return_reflection_;
  delete GM_Gangwar_Testing::default_instance_;
  delete GM_Gangwar_Testing_reflection_;
}

void protobuf_AddDesc_gangwar_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013gangwar.txt\"b\n\026GM_Gangwar_Open_Return\022"
    "%\n\006m_data\030\001 \003(\0132\025.GM_Gangwar_Open_Data\022\017"
    "\n\007m_state\030\002 \001(\005\022\020\n\010m_second\030\003 \001(\005\"M\n\024GM_"
    "Gangwar_Open_Data\022\014\n\004m_id\030\001 \001(\005\022\025\n\rm_min"
    "eralgang\030\002 \001(\t\022\020\n\010m_gangid\030\003 \001(\003\"9\n\023GM_G"
    "angwar_Rankings\022\020\n\010m_mineid\030\001 \001(\005\022\020\n\010m_g"
    "angid\030\002 \001(\003\"X\n\032GM_Gangwar_Rankings_Retur"
    "n\022\017\n\007m_count\030\001 \002(\005\022)\n\006m_data\030\002 \003(\0132\031.GM_"
    "Gangwar_Rankings_Data\"R\n\030GM_Gangwar_Rank"
    "ings_Data\022\022\n\nm_gangname\030\001 \001(\t\022\022\n\nmine_pr"
    "ice\030\002 \001(\005\022\016\n\006m_rank\030\003 \001(\005\"Z\n\022GM_Gangwar_"
    "Bidding\022\020\n\010m_mineid\030\001 \001(\005\022\016\n\006m_unit\030\002 \001("
    "\005\022\020\n\010m_roleid\030\003 \001(\005\022\020\n\010m_gangid\030\004 \001(\003\"$\n"
    "\021GM_Bidding_Result\022\017\n\007m_state\030\001 \001(\005\"\260\001\n\022"
    "GM_Gangwar_WarOpen\022\023\n\013m_othername\030\001 \001(\t\022"
    "$\n\nm_Roomdata\030\002 \003(\0132\020.GM_Gangwar_Data\022\017\n"
    "\007m_state\030\003 \001(\005\022\021\n\tm_myscore\030\004 \001(\005\022\024\n\014m_o"
    "therscore\030\005 \001(\005\022\023\n\013m_minestate\030\006 \001(\005\022\020\n\010"
    "m_second\030\007 \001(\005\"}\n\017GM_Gangwar_Data\022\017\n\007m_m"
    "ynum\030\001 \001(\005\022\020\n\010m_maxnum\030\002 \001(\005\022\017\n\007m_state\030"
    "\003 \001(\005\022\020\n\010m_roomid\030\004 \001(\005\022\017\n\007m_score\030\005 \001(\005"
    "\022\023\n\013m_wingangid\030\006 \001(\003\"L\n\024GM_Gangwar_Chec"
    "kRoom\022\020\n\010m_mineid\030\001 \001(\005\022\020\n\010m_roomid\030\002 \001("
    "\005\022\020\n\010m_gangid\030\003 \001(\003\"\177\n\033GM_Gangwar_CheckR"
    "oom_Return\022\017\n\007m_count\030\001 \002(\005\022*\n\006m_data\030\002 "
    "\003(\0132\032.GM_Gangwar_CheckRoom_Data\022\017\n\007m_sta"
    "te\030\003 \001(\005\022\022\n\nm_roomname\030\004 \001(\t\"\177\n\031GM_Gangw"
    "ar_CheckRoom_Data\022\022\n\nm_rolename\030\001 \001(\t\022\022\n"
    "\nm_fightval\030\002 \001(\005\022\017\n\007m_level\030\003 \001(\005\022\024\n\014m_"
    "profession\030\004 \001(\005\022\023\n\013m_entertime\030\005 \001(\005\"L\n"
    "\024GM_Gangwar_EnterRoom\022\020\n\010m_mineid\030\001 \001(\005\022"
    "\020\n\010m_roomid\030\002 \001(\005\022\020\n\010m_gangid\030\003 \001(\003\"Z\n\033G"
    "M_Gangwar_EnterRoom_Return\022\017\n\007m_state\030\001 "
    "\002(\005\022*\n\006m_data\030\002 \003(\0132\032.GM_Gangwar_CheckRo"
    "om_Data\"%\n\022GM_Gangwar_Testing\022\017\n\007m_state"
    "\030\001 \002(\005", 1406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gangwar.txt", &protobuf_RegisterTypes);
  GM_Gangwar_Open_Return::default_instance_ = new GM_Gangwar_Open_Return();
  GM_Gangwar_Open_Data::default_instance_ = new GM_Gangwar_Open_Data();
  GM_Gangwar_Rankings::default_instance_ = new GM_Gangwar_Rankings();
  GM_Gangwar_Rankings_Return::default_instance_ = new GM_Gangwar_Rankings_Return();
  GM_Gangwar_Rankings_Data::default_instance_ = new GM_Gangwar_Rankings_Data();
  GM_Gangwar_Bidding::default_instance_ = new GM_Gangwar_Bidding();
  GM_Bidding_Result::default_instance_ = new GM_Bidding_Result();
  GM_Gangwar_WarOpen::default_instance_ = new GM_Gangwar_WarOpen();
  GM_Gangwar_Data::default_instance_ = new GM_Gangwar_Data();
  GM_Gangwar_CheckRoom::default_instance_ = new GM_Gangwar_CheckRoom();
  GM_Gangwar_CheckRoom_Return::default_instance_ = new GM_Gangwar_CheckRoom_Return();
  GM_Gangwar_CheckRoom_Data::default_instance_ = new GM_Gangwar_CheckRoom_Data();
  GM_Gangwar_EnterRoom::default_instance_ = new GM_Gangwar_EnterRoom();
  GM_Gangwar_EnterRoom_Return::default_instance_ = new GM_Gangwar_EnterRoom_Return();
  GM_Gangwar_Testing::default_instance_ = new GM_Gangwar_Testing();
  GM_Gangwar_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Open_Data::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Rankings::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Rankings_Return::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Rankings_Data::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Bidding::default_instance_->InitAsDefaultInstance();
  GM_Bidding_Result::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_WarOpen::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Data::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_CheckRoom::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_CheckRoom_Return::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_CheckRoom_Data::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_EnterRoom::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_EnterRoom_Return::default_instance_->InitAsDefaultInstance();
  GM_Gangwar_Testing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gangwar_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gangwar_2etxt {
  StaticDescriptorInitializer_gangwar_2etxt() {
    protobuf_AddDesc_gangwar_2etxt();
  }
} static_descriptor_initializer_gangwar_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Open_Return::kMDataFieldNumber;
const int GM_Gangwar_Open_Return::kMStateFieldNumber;
const int GM_Gangwar_Open_Return::kMSecondFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Open_Return::GM_Gangwar_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Open_Return::InitAsDefaultInstance() {
}

GM_Gangwar_Open_Return::GM_Gangwar_Open_Return(const GM_Gangwar_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Open_Return::~GM_Gangwar_Open_Return() {
  SharedDtor();
}

void GM_Gangwar_Open_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Open_Return_descriptor_;
}

const GM_Gangwar_Open_Return& GM_Gangwar_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Open_Return* GM_Gangwar_Open_Return::default_instance_ = NULL;

GM_Gangwar_Open_Return* GM_Gangwar_Open_Return::New() const {
  return new GM_Gangwar_Open_Return;
}

void GM_Gangwar_Open_Return::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_state_ = 0;
    m_second_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_Gangwar_Open_Data m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectTag(16)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_second;
        break;
      }

      // optional int32 m_second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_second_)));
          set_has_m_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_Gangwar_Open_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_state(), output);
  }

  // optional int32 m_second = 3;
  if (has_m_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_Gangwar_Open_Data m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_state(), target);
  }

  // optional int32 m_second = 3;
  if (has_m_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 m_state = 2;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_second = 3;
    if (has_m_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_second());
    }

  }
  // repeated .GM_Gangwar_Open_Data m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Open_Return::MergeFrom(const GM_Gangwar_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_second()) {
      set_m_second(from.m_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Open_Return::CopyFrom(const GM_Gangwar_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Open_Return::IsInitialized() const {

  return true;
}

void GM_Gangwar_Open_Return::Swap(GM_Gangwar_Open_Return* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_second_, other->m_second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Open_Return_descriptor_;
  metadata.reflection = GM_Gangwar_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Open_Data::kMIdFieldNumber;
const int GM_Gangwar_Open_Data::kMMineralgangFieldNumber;
const int GM_Gangwar_Open_Data::kMGangidFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Open_Data::GM_Gangwar_Open_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Open_Data::InitAsDefaultInstance() {
}

GM_Gangwar_Open_Data::GM_Gangwar_Open_Data(const GM_Gangwar_Open_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Open_Data::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_mineralgang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Open_Data::~GM_Gangwar_Open_Data() {
  SharedDtor();
}

void GM_Gangwar_Open_Data::SharedDtor() {
  if (m_mineralgang_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mineralgang_;
  }
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Open_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Open_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Open_Data_descriptor_;
}

const GM_Gangwar_Open_Data& GM_Gangwar_Open_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Open_Data* GM_Gangwar_Open_Data::default_instance_ = NULL;

GM_Gangwar_Open_Data* GM_Gangwar_Open_Data::New() const {
  return new GM_Gangwar_Open_Data;
}

void GM_Gangwar_Open_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_mineralgang()) {
      if (m_mineralgang_ != &::google::protobuf::internal::kEmptyString) {
        m_mineralgang_->clear();
      }
    }
    m_gangid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Open_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_mineralgang;
        break;
      }

      // optional string m_mineralgang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mineralgang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_mineralgang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_mineralgang().data(), this->m_mineralgang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gangid;
        break;
      }

      // optional int64 m_gangid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gangid_)));
          set_has_m_gangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Open_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_mineralgang = 2;
  if (has_m_mineralgang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mineralgang().data(), this->m_mineralgang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_mineralgang(), output);
  }

  // optional int64 m_gangid = 3;
  if (has_m_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_gangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Open_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_mineralgang = 2;
  if (has_m_mineralgang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_mineralgang().data(), this->m_mineralgang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_mineralgang(), target);
  }

  // optional int64 m_gangid = 3;
  if (has_m_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_gangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Open_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_mineralgang = 2;
    if (has_m_mineralgang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_mineralgang());
    }

    // optional int64 m_gangid = 3;
    if (has_m_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Open_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Open_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Open_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Open_Data::MergeFrom(const GM_Gangwar_Open_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_mineralgang()) {
      set_m_mineralgang(from.m_mineralgang());
    }
    if (from.has_m_gangid()) {
      set_m_gangid(from.m_gangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Open_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Open_Data::CopyFrom(const GM_Gangwar_Open_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Open_Data::IsInitialized() const {

  return true;
}

void GM_Gangwar_Open_Data::Swap(GM_Gangwar_Open_Data* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_mineralgang_, other->m_mineralgang_);
    std::swap(m_gangid_, other->m_gangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Open_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Open_Data_descriptor_;
  metadata.reflection = GM_Gangwar_Open_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Rankings::kMMineidFieldNumber;
const int GM_Gangwar_Rankings::kMGangidFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Rankings::GM_Gangwar_Rankings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Rankings::InitAsDefaultInstance() {
}

GM_Gangwar_Rankings::GM_Gangwar_Rankings(const GM_Gangwar_Rankings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Rankings::SharedCtor() {
  _cached_size_ = 0;
  m_mineid_ = 0;
  m_gangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Rankings::~GM_Gangwar_Rankings() {
  SharedDtor();
}

void GM_Gangwar_Rankings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Rankings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Rankings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Rankings_descriptor_;
}

const GM_Gangwar_Rankings& GM_Gangwar_Rankings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Rankings* GM_Gangwar_Rankings::default_instance_ = NULL;

GM_Gangwar_Rankings* GM_Gangwar_Rankings::New() const {
  return new GM_Gangwar_Rankings;
}

void GM_Gangwar_Rankings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mineid_ = 0;
    m_gangid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Rankings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_mineid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mineid_)));
          set_has_m_mineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gangid;
        break;
      }

      // optional int64 m_gangid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gangid_)));
          set_has_m_gangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Rankings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mineid(), output);
  }

  // optional int64 m_gangid = 2;
  if (has_m_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Rankings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mineid(), target);
  }

  // optional int64 m_gangid = 2;
  if (has_m_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Rankings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_mineid = 1;
    if (has_m_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mineid());
    }

    // optional int64 m_gangid = 2;
    if (has_m_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Rankings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Rankings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Rankings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Rankings::MergeFrom(const GM_Gangwar_Rankings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mineid()) {
      set_m_mineid(from.m_mineid());
    }
    if (from.has_m_gangid()) {
      set_m_gangid(from.m_gangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Rankings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Rankings::CopyFrom(const GM_Gangwar_Rankings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Rankings::IsInitialized() const {

  return true;
}

void GM_Gangwar_Rankings::Swap(GM_Gangwar_Rankings* other) {
  if (other != this) {
    std::swap(m_mineid_, other->m_mineid_);
    std::swap(m_gangid_, other->m_gangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Rankings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Rankings_descriptor_;
  metadata.reflection = GM_Gangwar_Rankings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Rankings_Return::kMCountFieldNumber;
const int GM_Gangwar_Rankings_Return::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Rankings_Return::GM_Gangwar_Rankings_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Rankings_Return::InitAsDefaultInstance() {
}

GM_Gangwar_Rankings_Return::GM_Gangwar_Rankings_Return(const GM_Gangwar_Rankings_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Rankings_Return::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Rankings_Return::~GM_Gangwar_Rankings_Return() {
  SharedDtor();
}

void GM_Gangwar_Rankings_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Rankings_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Rankings_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Rankings_Return_descriptor_;
}

const GM_Gangwar_Rankings_Return& GM_Gangwar_Rankings_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Rankings_Return* GM_Gangwar_Rankings_Return::default_instance_ = NULL;

GM_Gangwar_Rankings_Return* GM_Gangwar_Rankings_Return::New() const {
  return new GM_Gangwar_Rankings_Return;
}

void GM_Gangwar_Rankings_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Rankings_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_Gangwar_Rankings_Data m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Rankings_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_Gangwar_Rankings_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Rankings_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_Gangwar_Rankings_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Rankings_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_Gangwar_Rankings_Data m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Rankings_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Rankings_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Rankings_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Rankings_Return::MergeFrom(const GM_Gangwar_Rankings_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Rankings_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Rankings_Return::CopyFrom(const GM_Gangwar_Rankings_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Rankings_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Gangwar_Rankings_Return::Swap(GM_Gangwar_Rankings_Return* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Rankings_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Rankings_Return_descriptor_;
  metadata.reflection = GM_Gangwar_Rankings_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Rankings_Data::kMGangnameFieldNumber;
const int GM_Gangwar_Rankings_Data::kMinePriceFieldNumber;
const int GM_Gangwar_Rankings_Data::kMRankFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Rankings_Data::GM_Gangwar_Rankings_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Rankings_Data::InitAsDefaultInstance() {
}

GM_Gangwar_Rankings_Data::GM_Gangwar_Rankings_Data(const GM_Gangwar_Rankings_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Rankings_Data::SharedCtor() {
  _cached_size_ = 0;
  m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mine_price_ = 0;
  m_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Rankings_Data::~GM_Gangwar_Rankings_Data() {
  SharedDtor();
}

void GM_Gangwar_Rankings_Data::SharedDtor() {
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Rankings_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Rankings_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Rankings_Data_descriptor_;
}

const GM_Gangwar_Rankings_Data& GM_Gangwar_Rankings_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Rankings_Data* GM_Gangwar_Rankings_Data::default_instance_ = NULL;

GM_Gangwar_Rankings_Data* GM_Gangwar_Rankings_Data::New() const {
  return new GM_Gangwar_Rankings_Data;
}

void GM_Gangwar_Rankings_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_gangname()) {
      if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
        m_gangname_->clear();
      }
    }
    mine_price_ = 0;
    m_rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Rankings_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_gangname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gangname().data(), this->m_gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mine_price;
        break;
      }

      // optional int32 mine_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mine_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mine_price_)));
          set_has_mine_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Rankings_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_gangname = 1;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_gangname(), output);
  }

  // optional int32 mine_price = 2;
  if (has_mine_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mine_price(), output);
  }

  // optional int32 m_rank = 3;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Rankings_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_gangname = 1;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_gangname(), target);
  }

  // optional int32 mine_price = 2;
  if (has_mine_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mine_price(), target);
  }

  // optional int32 m_rank = 3;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Rankings_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_gangname = 1;
    if (has_m_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gangname());
    }

    // optional int32 mine_price = 2;
    if (has_mine_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mine_price());
    }

    // optional int32 m_rank = 3;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Rankings_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Rankings_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Rankings_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Rankings_Data::MergeFrom(const GM_Gangwar_Rankings_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gangname()) {
      set_m_gangname(from.m_gangname());
    }
    if (from.has_mine_price()) {
      set_mine_price(from.mine_price());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Rankings_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Rankings_Data::CopyFrom(const GM_Gangwar_Rankings_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Rankings_Data::IsInitialized() const {

  return true;
}

void GM_Gangwar_Rankings_Data::Swap(GM_Gangwar_Rankings_Data* other) {
  if (other != this) {
    std::swap(m_gangname_, other->m_gangname_);
    std::swap(mine_price_, other->mine_price_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Rankings_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Rankings_Data_descriptor_;
  metadata.reflection = GM_Gangwar_Rankings_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Bidding::kMMineidFieldNumber;
const int GM_Gangwar_Bidding::kMUnitFieldNumber;
const int GM_Gangwar_Bidding::kMRoleidFieldNumber;
const int GM_Gangwar_Bidding::kMGangidFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Bidding::GM_Gangwar_Bidding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Bidding::InitAsDefaultInstance() {
}

GM_Gangwar_Bidding::GM_Gangwar_Bidding(const GM_Gangwar_Bidding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Bidding::SharedCtor() {
  _cached_size_ = 0;
  m_mineid_ = 0;
  m_unit_ = 0;
  m_roleid_ = 0;
  m_gangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Bidding::~GM_Gangwar_Bidding() {
  SharedDtor();
}

void GM_Gangwar_Bidding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Bidding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Bidding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Bidding_descriptor_;
}

const GM_Gangwar_Bidding& GM_Gangwar_Bidding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Bidding* GM_Gangwar_Bidding::default_instance_ = NULL;

GM_Gangwar_Bidding* GM_Gangwar_Bidding::New() const {
  return new GM_Gangwar_Bidding;
}

void GM_Gangwar_Bidding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mineid_ = 0;
    m_unit_ = 0;
    m_roleid_ = 0;
    m_gangid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Bidding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_mineid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mineid_)));
          set_has_m_mineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_unit;
        break;
      }

      // optional int32 m_unit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unit_)));
          set_has_m_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_roleid;
        break;
      }

      // optional int32 m_roleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_gangid;
        break;
      }

      // optional int64 m_gangid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gangid_)));
          set_has_m_gangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Bidding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mineid(), output);
  }

  // optional int32 m_unit = 2;
  if (has_m_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_unit(), output);
  }

  // optional int32 m_roleid = 3;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_roleid(), output);
  }

  // optional int64 m_gangid = 4;
  if (has_m_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_gangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Bidding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mineid(), target);
  }

  // optional int32 m_unit = 2;
  if (has_m_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_unit(), target);
  }

  // optional int32 m_roleid = 3;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_roleid(), target);
  }

  // optional int64 m_gangid = 4;
  if (has_m_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_gangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Bidding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_mineid = 1;
    if (has_m_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mineid());
    }

    // optional int32 m_unit = 2;
    if (has_m_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unit());
    }

    // optional int32 m_roleid = 3;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int64 m_gangid = 4;
    if (has_m_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Bidding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Bidding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Bidding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Bidding::MergeFrom(const GM_Gangwar_Bidding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mineid()) {
      set_m_mineid(from.m_mineid());
    }
    if (from.has_m_unit()) {
      set_m_unit(from.m_unit());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_gangid()) {
      set_m_gangid(from.m_gangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Bidding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Bidding::CopyFrom(const GM_Gangwar_Bidding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Bidding::IsInitialized() const {

  return true;
}

void GM_Gangwar_Bidding::Swap(GM_Gangwar_Bidding* other) {
  if (other != this) {
    std::swap(m_mineid_, other->m_mineid_);
    std::swap(m_unit_, other->m_unit_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_gangid_, other->m_gangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Bidding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Bidding_descriptor_;
  metadata.reflection = GM_Gangwar_Bidding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Bidding_Result::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Bidding_Result::GM_Bidding_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Bidding_Result::InitAsDefaultInstance() {
}

GM_Bidding_Result::GM_Bidding_Result(const GM_Bidding_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Bidding_Result::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Bidding_Result::~GM_Bidding_Result() {
  SharedDtor();
}

void GM_Bidding_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Bidding_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Bidding_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Bidding_Result_descriptor_;
}

const GM_Bidding_Result& GM_Bidding_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Bidding_Result* GM_Bidding_Result::default_instance_ = NULL;

GM_Bidding_Result* GM_Bidding_Result::New() const {
  return new GM_Bidding_Result;
}

void GM_Bidding_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Bidding_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Bidding_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Bidding_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Bidding_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Bidding_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Bidding_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Bidding_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Bidding_Result::MergeFrom(const GM_Bidding_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Bidding_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Bidding_Result::CopyFrom(const GM_Bidding_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Bidding_Result::IsInitialized() const {

  return true;
}

void GM_Bidding_Result::Swap(GM_Bidding_Result* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Bidding_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Bidding_Result_descriptor_;
  metadata.reflection = GM_Bidding_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_WarOpen::kMOthernameFieldNumber;
const int GM_Gangwar_WarOpen::kMRoomdataFieldNumber;
const int GM_Gangwar_WarOpen::kMStateFieldNumber;
const int GM_Gangwar_WarOpen::kMMyscoreFieldNumber;
const int GM_Gangwar_WarOpen::kMOtherscoreFieldNumber;
const int GM_Gangwar_WarOpen::kMMinestateFieldNumber;
const int GM_Gangwar_WarOpen::kMSecondFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_WarOpen::GM_Gangwar_WarOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_WarOpen::InitAsDefaultInstance() {
}

GM_Gangwar_WarOpen::GM_Gangwar_WarOpen(const GM_Gangwar_WarOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_WarOpen::SharedCtor() {
  _cached_size_ = 0;
  m_othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_state_ = 0;
  m_myscore_ = 0;
  m_otherscore_ = 0;
  m_minestate_ = 0;
  m_second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_WarOpen::~GM_Gangwar_WarOpen() {
  SharedDtor();
}

void GM_Gangwar_WarOpen::SharedDtor() {
  if (m_othername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_othername_;
  }
  if (this != default_instance_) {
  }
}

void GM_Gangwar_WarOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_WarOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_WarOpen_descriptor_;
}

const GM_Gangwar_WarOpen& GM_Gangwar_WarOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_WarOpen* GM_Gangwar_WarOpen::default_instance_ = NULL;

GM_Gangwar_WarOpen* GM_Gangwar_WarOpen::New() const {
  return new GM_Gangwar_WarOpen;
}

void GM_Gangwar_WarOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_othername()) {
      if (m_othername_ != &::google::protobuf::internal::kEmptyString) {
        m_othername_->clear();
      }
    }
    m_state_ = 0;
    m_myscore_ = 0;
    m_otherscore_ = 0;
    m_minestate_ = 0;
    m_second_ = 0;
  }
  m_roomdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_WarOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_othername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_othername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_othername().data(), this->m_othername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Roomdata;
        break;
      }

      // repeated .GM_Gangwar_Data m_Roomdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Roomdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_roomdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_Roomdata;
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_myscore;
        break;
      }

      // optional int32 m_myscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_myscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_myscore_)));
          set_has_m_myscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_otherscore;
        break;
      }

      // optional int32 m_otherscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_otherscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_otherscore_)));
          set_has_m_otherscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_minestate;
        break;
      }

      // optional int32 m_minestate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minestate_)));
          set_has_m_minestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_second;
        break;
      }

      // optional int32 m_second = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_second_)));
          set_has_m_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_WarOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_othername = 1;
  if (has_m_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_othername().data(), this->m_othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_othername(), output);
  }

  // repeated .GM_Gangwar_Data m_Roomdata = 2;
  for (int i = 0; i < this->m_roomdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_roomdata(i), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  // optional int32 m_myscore = 4;
  if (has_m_myscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_myscore(), output);
  }

  // optional int32 m_otherscore = 5;
  if (has_m_otherscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_otherscore(), output);
  }

  // optional int32 m_minestate = 6;
  if (has_m_minestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_minestate(), output);
  }

  // optional int32 m_second = 7;
  if (has_m_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_WarOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_othername = 1;
  if (has_m_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_othername().data(), this->m_othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_othername(), target);
  }

  // repeated .GM_Gangwar_Data m_Roomdata = 2;
  for (int i = 0; i < this->m_roomdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_roomdata(i), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  // optional int32 m_myscore = 4;
  if (has_m_myscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_myscore(), target);
  }

  // optional int32 m_otherscore = 5;
  if (has_m_otherscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_otherscore(), target);
  }

  // optional int32 m_minestate = 6;
  if (has_m_minestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_minestate(), target);
  }

  // optional int32 m_second = 7;
  if (has_m_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_WarOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_othername = 1;
    if (has_m_othername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_othername());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_myscore = 4;
    if (has_m_myscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_myscore());
    }

    // optional int32 m_otherscore = 5;
    if (has_m_otherscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_otherscore());
    }

    // optional int32 m_minestate = 6;
    if (has_m_minestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minestate());
    }

    // optional int32 m_second = 7;
    if (has_m_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_second());
    }

  }
  // repeated .GM_Gangwar_Data m_Roomdata = 2;
  total_size += 1 * this->m_roomdata_size();
  for (int i = 0; i < this->m_roomdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_roomdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_WarOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_WarOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_WarOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_WarOpen::MergeFrom(const GM_Gangwar_WarOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_roomdata_.MergeFrom(from.m_roomdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_othername()) {
      set_m_othername(from.m_othername());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_myscore()) {
      set_m_myscore(from.m_myscore());
    }
    if (from.has_m_otherscore()) {
      set_m_otherscore(from.m_otherscore());
    }
    if (from.has_m_minestate()) {
      set_m_minestate(from.m_minestate());
    }
    if (from.has_m_second()) {
      set_m_second(from.m_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_WarOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_WarOpen::CopyFrom(const GM_Gangwar_WarOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_WarOpen::IsInitialized() const {

  return true;
}

void GM_Gangwar_WarOpen::Swap(GM_Gangwar_WarOpen* other) {
  if (other != this) {
    std::swap(m_othername_, other->m_othername_);
    m_roomdata_.Swap(&other->m_roomdata_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_myscore_, other->m_myscore_);
    std::swap(m_otherscore_, other->m_otherscore_);
    std::swap(m_minestate_, other->m_minestate_);
    std::swap(m_second_, other->m_second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_WarOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_WarOpen_descriptor_;
  metadata.reflection = GM_Gangwar_WarOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Data::kMMynumFieldNumber;
const int GM_Gangwar_Data::kMMaxnumFieldNumber;
const int GM_Gangwar_Data::kMStateFieldNumber;
const int GM_Gangwar_Data::kMRoomidFieldNumber;
const int GM_Gangwar_Data::kMScoreFieldNumber;
const int GM_Gangwar_Data::kMWingangidFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Data::GM_Gangwar_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Data::InitAsDefaultInstance() {
}

GM_Gangwar_Data::GM_Gangwar_Data(const GM_Gangwar_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Data::SharedCtor() {
  _cached_size_ = 0;
  m_mynum_ = 0;
  m_maxnum_ = 0;
  m_state_ = 0;
  m_roomid_ = 0;
  m_score_ = 0;
  m_wingangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Data::~GM_Gangwar_Data() {
  SharedDtor();
}

void GM_Gangwar_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Data_descriptor_;
}

const GM_Gangwar_Data& GM_Gangwar_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Data* GM_Gangwar_Data::default_instance_ = NULL;

GM_Gangwar_Data* GM_Gangwar_Data::New() const {
  return new GM_Gangwar_Data;
}

void GM_Gangwar_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mynum_ = 0;
    m_maxnum_ = 0;
    m_state_ = 0;
    m_roomid_ = 0;
    m_score_ = 0;
    m_wingangid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_mynum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mynum_)));
          set_has_m_mynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_maxnum;
        break;
      }

      // optional int32 m_maxnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxnum_)));
          set_has_m_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_score;
        break;
      }

      // optional int32 m_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_score_)));
          set_has_m_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_wingangid;
        break;
      }

      // optional int64 m_wingangid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wingangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_wingangid_)));
          set_has_m_wingangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_mynum = 1;
  if (has_m_mynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mynum(), output);
  }

  // optional int32 m_maxnum = 2;
  if (has_m_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_maxnum(), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  // optional int32 m_roomid = 4;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_roomid(), output);
  }

  // optional int32 m_score = 5;
  if (has_m_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_score(), output);
  }

  // optional int64 m_wingangid = 6;
  if (has_m_wingangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_wingangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_mynum = 1;
  if (has_m_mynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mynum(), target);
  }

  // optional int32 m_maxnum = 2;
  if (has_m_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_maxnum(), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  // optional int32 m_roomid = 4;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_roomid(), target);
  }

  // optional int32 m_score = 5;
  if (has_m_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_score(), target);
  }

  // optional int64 m_wingangid = 6;
  if (has_m_wingangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_wingangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_mynum = 1;
    if (has_m_mynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mynum());
    }

    // optional int32 m_maxnum = 2;
    if (has_m_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxnum());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_roomid = 4;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int32 m_score = 5;
    if (has_m_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_score());
    }

    // optional int64 m_wingangid = 6;
    if (has_m_wingangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_wingangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Data::MergeFrom(const GM_Gangwar_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mynum()) {
      set_m_mynum(from.m_mynum());
    }
    if (from.has_m_maxnum()) {
      set_m_maxnum(from.m_maxnum());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_score()) {
      set_m_score(from.m_score());
    }
    if (from.has_m_wingangid()) {
      set_m_wingangid(from.m_wingangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Data::CopyFrom(const GM_Gangwar_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Data::IsInitialized() const {

  return true;
}

void GM_Gangwar_Data::Swap(GM_Gangwar_Data* other) {
  if (other != this) {
    std::swap(m_mynum_, other->m_mynum_);
    std::swap(m_maxnum_, other->m_maxnum_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_score_, other->m_score_);
    std::swap(m_wingangid_, other->m_wingangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Data_descriptor_;
  metadata.reflection = GM_Gangwar_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_CheckRoom::kMMineidFieldNumber;
const int GM_Gangwar_CheckRoom::kMRoomidFieldNumber;
const int GM_Gangwar_CheckRoom::kMGangidFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_CheckRoom::GM_Gangwar_CheckRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_CheckRoom::InitAsDefaultInstance() {
}

GM_Gangwar_CheckRoom::GM_Gangwar_CheckRoom(const GM_Gangwar_CheckRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_CheckRoom::SharedCtor() {
  _cached_size_ = 0;
  m_mineid_ = 0;
  m_roomid_ = 0;
  m_gangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_CheckRoom::~GM_Gangwar_CheckRoom() {
  SharedDtor();
}

void GM_Gangwar_CheckRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_CheckRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_CheckRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_CheckRoom_descriptor_;
}

const GM_Gangwar_CheckRoom& GM_Gangwar_CheckRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_CheckRoom* GM_Gangwar_CheckRoom::default_instance_ = NULL;

GM_Gangwar_CheckRoom* GM_Gangwar_CheckRoom::New() const {
  return new GM_Gangwar_CheckRoom;
}

void GM_Gangwar_CheckRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mineid_ = 0;
    m_roomid_ = 0;
    m_gangid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_CheckRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_mineid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mineid_)));
          set_has_m_mineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gangid;
        break;
      }

      // optional int64 m_gangid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gangid_)));
          set_has_m_gangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_CheckRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mineid(), output);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roomid(), output);
  }

  // optional int64 m_gangid = 3;
  if (has_m_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_gangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_CheckRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mineid(), target);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roomid(), target);
  }

  // optional int64 m_gangid = 3;
  if (has_m_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_gangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_CheckRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_mineid = 1;
    if (has_m_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mineid());
    }

    // optional int32 m_roomid = 2;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int64 m_gangid = 3;
    if (has_m_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_CheckRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_CheckRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_CheckRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_CheckRoom::MergeFrom(const GM_Gangwar_CheckRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mineid()) {
      set_m_mineid(from.m_mineid());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_gangid()) {
      set_m_gangid(from.m_gangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_CheckRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_CheckRoom::CopyFrom(const GM_Gangwar_CheckRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_CheckRoom::IsInitialized() const {

  return true;
}

void GM_Gangwar_CheckRoom::Swap(GM_Gangwar_CheckRoom* other) {
  if (other != this) {
    std::swap(m_mineid_, other->m_mineid_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_gangid_, other->m_gangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_CheckRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_CheckRoom_descriptor_;
  metadata.reflection = GM_Gangwar_CheckRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_CheckRoom_Return::kMCountFieldNumber;
const int GM_Gangwar_CheckRoom_Return::kMDataFieldNumber;
const int GM_Gangwar_CheckRoom_Return::kMStateFieldNumber;
const int GM_Gangwar_CheckRoom_Return::kMRoomnameFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_CheckRoom_Return::GM_Gangwar_CheckRoom_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_CheckRoom_Return::InitAsDefaultInstance() {
}

GM_Gangwar_CheckRoom_Return::GM_Gangwar_CheckRoom_Return(const GM_Gangwar_CheckRoom_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_CheckRoom_Return::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  m_state_ = 0;
  m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_CheckRoom_Return::~GM_Gangwar_CheckRoom_Return() {
  SharedDtor();
}

void GM_Gangwar_CheckRoom_Return::SharedDtor() {
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_roomname_;
  }
  if (this != default_instance_) {
  }
}

void GM_Gangwar_CheckRoom_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_CheckRoom_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_CheckRoom_Return_descriptor_;
}

const GM_Gangwar_CheckRoom_Return& GM_Gangwar_CheckRoom_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_CheckRoom_Return* GM_Gangwar_CheckRoom_Return::default_instance_ = NULL;

GM_Gangwar_CheckRoom_Return* GM_Gangwar_CheckRoom_Return::New() const {
  return new GM_Gangwar_CheckRoom_Return;
}

void GM_Gangwar_CheckRoom_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
    m_state_ = 0;
    if (has_m_roomname()) {
      if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
        m_roomname_->clear();
      }
    }
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_CheckRoom_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_roomname;
        break;
      }

      // optional string m_roomname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roomname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_roomname().data(), this->m_roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_CheckRoom_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  // optional string m_roomname = 4;
  if (has_m_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_roomname().data(), this->m_roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_roomname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_CheckRoom_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  // optional int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  // optional string m_roomname = 4;
  if (has_m_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_roomname().data(), this->m_roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_roomname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_CheckRoom_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // optional int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional string m_roomname = 4;
    if (has_m_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_roomname());
    }

  }
  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_CheckRoom_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_CheckRoom_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_CheckRoom_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_CheckRoom_Return::MergeFrom(const GM_Gangwar_CheckRoom_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_roomname()) {
      set_m_roomname(from.m_roomname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_CheckRoom_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_CheckRoom_Return::CopyFrom(const GM_Gangwar_CheckRoom_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_CheckRoom_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Gangwar_CheckRoom_Return::Swap(GM_Gangwar_CheckRoom_Return* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_data_.Swap(&other->m_data_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_roomname_, other->m_roomname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_CheckRoom_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_CheckRoom_Return_descriptor_;
  metadata.reflection = GM_Gangwar_CheckRoom_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_CheckRoom_Data::kMRolenameFieldNumber;
const int GM_Gangwar_CheckRoom_Data::kMFightvalFieldNumber;
const int GM_Gangwar_CheckRoom_Data::kMLevelFieldNumber;
const int GM_Gangwar_CheckRoom_Data::kMProfessionFieldNumber;
const int GM_Gangwar_CheckRoom_Data::kMEntertimeFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_CheckRoom_Data::GM_Gangwar_CheckRoom_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_CheckRoom_Data::InitAsDefaultInstance() {
}

GM_Gangwar_CheckRoom_Data::GM_Gangwar_CheckRoom_Data(const GM_Gangwar_CheckRoom_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_CheckRoom_Data::SharedCtor() {
  _cached_size_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_fightval_ = 0;
  m_level_ = 0;
  m_profession_ = 0;
  m_entertime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_CheckRoom_Data::~GM_Gangwar_CheckRoom_Data() {
  SharedDtor();
}

void GM_Gangwar_CheckRoom_Data::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_Gangwar_CheckRoom_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_CheckRoom_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_CheckRoom_Data_descriptor_;
}

const GM_Gangwar_CheckRoom_Data& GM_Gangwar_CheckRoom_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_CheckRoom_Data* GM_Gangwar_CheckRoom_Data::default_instance_ = NULL;

GM_Gangwar_CheckRoom_Data* GM_Gangwar_CheckRoom_Data::New() const {
  return new GM_Gangwar_CheckRoom_Data;
}

void GM_Gangwar_CheckRoom_Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_fightval_ = 0;
    m_level_ = 0;
    m_profession_ = 0;
    m_entertime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_CheckRoom_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fightval;
        break;
      }

      // optional int32 m_fightval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fightval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightval_)));
          set_has_m_fightval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_entertime;
        break;
      }

      // optional int32 m_entertime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_entertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_entertime_)));
          set_has_m_entertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_CheckRoom_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_rolename(), output);
  }

  // optional int32 m_fightval = 2;
  if (has_m_fightval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fightval(), output);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  // optional int32 m_entertime = 5;
  if (has_m_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_entertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_CheckRoom_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_rolename(), target);
  }

  // optional int32 m_fightval = 2;
  if (has_m_fightval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fightval(), target);
  }

  // optional int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  // optional int32 m_entertime = 5;
  if (has_m_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_entertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_CheckRoom_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_rolename = 1;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_fightval = 2;
    if (has_m_fightval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightval());
    }

    // optional int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional int32 m_entertime = 5;
    if (has_m_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_entertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_CheckRoom_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_CheckRoom_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_CheckRoom_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_CheckRoom_Data::MergeFrom(const GM_Gangwar_CheckRoom_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_fightval()) {
      set_m_fightval(from.m_fightval());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_entertime()) {
      set_m_entertime(from.m_entertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_CheckRoom_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_CheckRoom_Data::CopyFrom(const GM_Gangwar_CheckRoom_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_CheckRoom_Data::IsInitialized() const {

  return true;
}

void GM_Gangwar_CheckRoom_Data::Swap(GM_Gangwar_CheckRoom_Data* other) {
  if (other != this) {
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_fightval_, other->m_fightval_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_entertime_, other->m_entertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_CheckRoom_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_CheckRoom_Data_descriptor_;
  metadata.reflection = GM_Gangwar_CheckRoom_Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_EnterRoom::kMMineidFieldNumber;
const int GM_Gangwar_EnterRoom::kMRoomidFieldNumber;
const int GM_Gangwar_EnterRoom::kMGangidFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_EnterRoom::GM_Gangwar_EnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_EnterRoom::InitAsDefaultInstance() {
}

GM_Gangwar_EnterRoom::GM_Gangwar_EnterRoom(const GM_Gangwar_EnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_EnterRoom::SharedCtor() {
  _cached_size_ = 0;
  m_mineid_ = 0;
  m_roomid_ = 0;
  m_gangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_EnterRoom::~GM_Gangwar_EnterRoom() {
  SharedDtor();
}

void GM_Gangwar_EnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_EnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_EnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_EnterRoom_descriptor_;
}

const GM_Gangwar_EnterRoom& GM_Gangwar_EnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_EnterRoom* GM_Gangwar_EnterRoom::default_instance_ = NULL;

GM_Gangwar_EnterRoom* GM_Gangwar_EnterRoom::New() const {
  return new GM_Gangwar_EnterRoom;
}

void GM_Gangwar_EnterRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mineid_ = 0;
    m_roomid_ = 0;
    m_gangid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_EnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_mineid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mineid_)));
          set_has_m_mineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gangid;
        break;
      }

      // optional int64 m_gangid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gangid_)));
          set_has_m_gangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_EnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mineid(), output);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roomid(), output);
  }

  // optional int64 m_gangid = 3;
  if (has_m_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_gangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_EnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_mineid = 1;
  if (has_m_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mineid(), target);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roomid(), target);
  }

  // optional int64 m_gangid = 3;
  if (has_m_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_gangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_EnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_mineid = 1;
    if (has_m_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mineid());
    }

    // optional int32 m_roomid = 2;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int64 m_gangid = 3;
    if (has_m_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_EnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_EnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_EnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_EnterRoom::MergeFrom(const GM_Gangwar_EnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mineid()) {
      set_m_mineid(from.m_mineid());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_gangid()) {
      set_m_gangid(from.m_gangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_EnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_EnterRoom::CopyFrom(const GM_Gangwar_EnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_EnterRoom::IsInitialized() const {

  return true;
}

void GM_Gangwar_EnterRoom::Swap(GM_Gangwar_EnterRoom* other) {
  if (other != this) {
    std::swap(m_mineid_, other->m_mineid_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_gangid_, other->m_gangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_EnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_EnterRoom_descriptor_;
  metadata.reflection = GM_Gangwar_EnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_EnterRoom_Return::kMStateFieldNumber;
const int GM_Gangwar_EnterRoom_Return::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_EnterRoom_Return::GM_Gangwar_EnterRoom_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_EnterRoom_Return::InitAsDefaultInstance() {
}

GM_Gangwar_EnterRoom_Return::GM_Gangwar_EnterRoom_Return(const GM_Gangwar_EnterRoom_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_EnterRoom_Return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_EnterRoom_Return::~GM_Gangwar_EnterRoom_Return() {
  SharedDtor();
}

void GM_Gangwar_EnterRoom_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_EnterRoom_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_EnterRoom_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_EnterRoom_Return_descriptor_;
}

const GM_Gangwar_EnterRoom_Return& GM_Gangwar_EnterRoom_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_EnterRoom_Return* GM_Gangwar_EnterRoom_Return::default_instance_ = NULL;

GM_Gangwar_EnterRoom_Return* GM_Gangwar_EnterRoom_Return::New() const {
  return new GM_Gangwar_EnterRoom_Return;
}

void GM_Gangwar_EnterRoom_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_EnterRoom_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_EnterRoom_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_EnterRoom_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_EnterRoom_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_EnterRoom_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_EnterRoom_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_EnterRoom_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_EnterRoom_Return::MergeFrom(const GM_Gangwar_EnterRoom_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_EnterRoom_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_EnterRoom_Return::CopyFrom(const GM_Gangwar_EnterRoom_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_EnterRoom_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Gangwar_EnterRoom_Return::Swap(GM_Gangwar_EnterRoom_Return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_EnterRoom_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_EnterRoom_Return_descriptor_;
  metadata.reflection = GM_Gangwar_EnterRoom_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gangwar_Testing::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Gangwar_Testing::GM_Gangwar_Testing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gangwar_Testing::InitAsDefaultInstance() {
}

GM_Gangwar_Testing::GM_Gangwar_Testing(const GM_Gangwar_Testing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gangwar_Testing::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gangwar_Testing::~GM_Gangwar_Testing() {
  SharedDtor();
}

void GM_Gangwar_Testing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gangwar_Testing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gangwar_Testing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gangwar_Testing_descriptor_;
}

const GM_Gangwar_Testing& GM_Gangwar_Testing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gangwar_2etxt();
  return *default_instance_;
}

GM_Gangwar_Testing* GM_Gangwar_Testing::default_instance_ = NULL;

GM_Gangwar_Testing* GM_Gangwar_Testing::New() const {
  return new GM_Gangwar_Testing;
}

void GM_Gangwar_Testing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gangwar_Testing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gangwar_Testing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gangwar_Testing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gangwar_Testing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gangwar_Testing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gangwar_Testing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gangwar_Testing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gangwar_Testing::MergeFrom(const GM_Gangwar_Testing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gangwar_Testing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gangwar_Testing::CopyFrom(const GM_Gangwar_Testing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gangwar_Testing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Gangwar_Testing::Swap(GM_Gangwar_Testing* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gangwar_Testing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gangwar_Testing_descriptor_;
  metadata.reflection = GM_Gangwar_Testing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
