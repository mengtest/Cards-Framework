// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Match.txt

#ifndef PROTOBUF_SP_5fMatch_2etxt__INCLUDED
#define PROTOBUF_SP_5fMatch_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fMatch_2etxt();
void protobuf_AssignDesc_SP_5fMatch_2etxt();
void protobuf_ShutdownFile_SP_5fMatch_2etxt();

class SM_MatchRole_info;
class SM_MatchRole;
class SM_Match_request;
class SM_match_game_info;
class SM_match_game;

// ===================================================================

class SM_MatchRole_info : public ::google::protobuf::Message {
 public:
  SM_MatchRole_info();
  virtual ~SM_MatchRole_info();

  SM_MatchRole_info(const SM_MatchRole_info& from);

  inline SM_MatchRole_info& operator=(const SM_MatchRole_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_MatchRole_info& default_instance();

  void Swap(SM_MatchRole_info* other);

  // implements Message ----------------------------------------------

  SM_MatchRole_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_MatchRole_info& from);
  void MergeFrom(const SM_MatchRole_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 createtime = 2;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 2;
  inline ::google::protobuf::int32 createtime() const;
  inline void set_createtime(::google::protobuf::int32 value);

  // optional int32 matchid = 3;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 3;
  inline ::google::protobuf::int32 matchid() const;
  inline void set_matchid(::google::protobuf::int32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 isdeleate = 6;
  inline bool has_isdeleate() const;
  inline void clear_isdeleate();
  static const int kIsdeleateFieldNumber = 6;
  inline ::google::protobuf::int32 isdeleate() const;
  inline void set_isdeleate(::google::protobuf::int32 value);

  // optional int32 ID = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 7;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 updatetime = 10;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 10;
  inline ::google::protobuf::int32 updatetime() const;
  inline void set_updatetime(::google::protobuf::int32 value);

  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 robot = 12;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 12;
  inline ::google::protobuf::int32 robot() const;
  inline void set_robot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_MatchRole_info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_isdeleate();
  inline void clear_has_isdeleate();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_robot();
  inline void clear_has_robot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 matchid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 isdeleate_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 updatetime_;
  ::std::string* name_;
  ::google::protobuf::int32 robot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fMatch_2etxt();
  friend void protobuf_AssignDesc_SP_5fMatch_2etxt();
  friend void protobuf_ShutdownFile_SP_5fMatch_2etxt();

  void InitAsDefaultInstance();
  static SM_MatchRole_info* default_instance_;
};
// -------------------------------------------------------------------

class SM_MatchRole : public ::google::protobuf::Message {
 public:
  SM_MatchRole();
  virtual ~SM_MatchRole();

  SM_MatchRole(const SM_MatchRole& from);

  inline SM_MatchRole& operator=(const SM_MatchRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_MatchRole& default_instance();

  void Swap(SM_MatchRole* other);

  // implements Message ----------------------------------------------

  SM_MatchRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_MatchRole& from);
  void MergeFrom(const SM_MatchRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .SM_MatchRole_info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_MatchRole_info& data(int index) const;
  inline ::SM_MatchRole_info* mutable_data(int index);
  inline ::SM_MatchRole_info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_MatchRole_info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_MatchRole_info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_MatchRole)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_MatchRole_info > data_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fMatch_2etxt();
  friend void protobuf_AssignDesc_SP_5fMatch_2etxt();
  friend void protobuf_ShutdownFile_SP_5fMatch_2etxt();

  void InitAsDefaultInstance();
  static SM_MatchRole* default_instance_;
};
// -------------------------------------------------------------------

class SM_Match_request : public ::google::protobuf::Message {
 public:
  SM_Match_request();
  virtual ~SM_Match_request();

  SM_Match_request(const SM_Match_request& from);

  inline SM_Match_request& operator=(const SM_Match_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_Match_request& default_instance();

  void Swap(SM_Match_request* other);

  // implements Message ----------------------------------------------

  SM_Match_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_Match_request& from);
  void MergeFrom(const SM_Match_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_Match_request)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fMatch_2etxt();
  friend void protobuf_AssignDesc_SP_5fMatch_2etxt();
  friend void protobuf_ShutdownFile_SP_5fMatch_2etxt();

  void InitAsDefaultInstance();
  static SM_Match_request* default_instance_;
};
// -------------------------------------------------------------------

class SM_match_game_info : public ::google::protobuf::Message {
 public:
  SM_match_game_info();
  virtual ~SM_match_game_info();

  SM_match_game_info(const SM_match_game_info& from);

  inline SM_match_game_info& operator=(const SM_match_game_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_match_game_info& default_instance();

  void Swap(SM_match_game_info* other);

  // implements Message ----------------------------------------------

  SM_match_game_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_match_game_info& from);
  void MergeFrom(const SM_match_game_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::int32 matchid() const;
  inline void set_matchid(::google::protobuf::int32 value);

  // optional int32 begintime = 3;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 3;
  inline ::google::protobuf::int32 begintime() const;
  inline void set_begintime(::google::protobuf::int32 value);

  // optional int32 isdeleate = 4;
  inline bool has_isdeleate() const;
  inline void clear_isdeleate();
  static const int kIsdeleateFieldNumber = 4;
  inline ::google::protobuf::int32 isdeleate() const;
  inline void set_isdeleate(::google::protobuf::int32 value);

  // optional int32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 endtime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 6;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_match_game_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_isdeleate();
  inline void clear_has_isdeleate();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 matchid_;
  ::google::protobuf::int32 begintime_;
  ::google::protobuf::int32 isdeleate_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fMatch_2etxt();
  friend void protobuf_AssignDesc_SP_5fMatch_2etxt();
  friend void protobuf_ShutdownFile_SP_5fMatch_2etxt();

  void InitAsDefaultInstance();
  static SM_match_game_info* default_instance_;
};
// -------------------------------------------------------------------

class SM_match_game : public ::google::protobuf::Message {
 public:
  SM_match_game();
  virtual ~SM_match_game();

  SM_match_game(const SM_match_game& from);

  inline SM_match_game& operator=(const SM_match_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_match_game& default_instance();

  void Swap(SM_match_game* other);

  // implements Message ----------------------------------------------

  SM_match_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_match_game& from);
  void MergeFrom(const SM_match_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // repeated .SM_match_game_info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SM_match_game_info& data(int index) const;
  inline ::SM_match_game_info* mutable_data(int index);
  inline ::SM_match_game_info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_match_game_info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_match_game_info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SM_match_game)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SM_match_game_info > data_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fMatch_2etxt();
  friend void protobuf_AssignDesc_SP_5fMatch_2etxt();
  friend void protobuf_ShutdownFile_SP_5fMatch_2etxt();

  void InitAsDefaultInstance();
  static SM_match_game* default_instance_;
};
// ===================================================================


// ===================================================================

// SM_MatchRole_info

// required int32 roleid = 1;
inline bool SM_MatchRole_info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_MatchRole_info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_MatchRole_info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_MatchRole_info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_MatchRole_info::roleid() const {
  return roleid_;
}
inline void SM_MatchRole_info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 createtime = 2;
inline bool SM_MatchRole_info::has_createtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_MatchRole_info::set_has_createtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_MatchRole_info::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_MatchRole_info::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 SM_MatchRole_info::createtime() const {
  return createtime_;
}
inline void SM_MatchRole_info::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int32 matchid = 3;
inline bool SM_MatchRole_info::has_matchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_MatchRole_info::set_has_matchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_MatchRole_info::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_MatchRole_info::clear_matchid() {
  matchid_ = 0;
  clear_has_matchid();
}
inline ::google::protobuf::int32 SM_MatchRole_info::matchid() const {
  return matchid_;
}
inline void SM_MatchRole_info::set_matchid(::google::protobuf::int32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional int32 score = 4;
inline bool SM_MatchRole_info::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_MatchRole_info::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_MatchRole_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_MatchRole_info::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 SM_MatchRole_info::score() const {
  return score_;
}
inline void SM_MatchRole_info::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 isdeleate = 6;
inline bool SM_MatchRole_info::has_isdeleate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_MatchRole_info::set_has_isdeleate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_MatchRole_info::clear_has_isdeleate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_MatchRole_info::clear_isdeleate() {
  isdeleate_ = 0;
  clear_has_isdeleate();
}
inline ::google::protobuf::int32 SM_MatchRole_info::isdeleate() const {
  return isdeleate_;
}
inline void SM_MatchRole_info::set_isdeleate(::google::protobuf::int32 value) {
  set_has_isdeleate();
  isdeleate_ = value;
}

// optional int32 ID = 7;
inline bool SM_MatchRole_info::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_MatchRole_info::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_MatchRole_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_MatchRole_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SM_MatchRole_info::id() const {
  return id_;
}
inline void SM_MatchRole_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 state = 8;
inline bool SM_MatchRole_info::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SM_MatchRole_info::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SM_MatchRole_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SM_MatchRole_info::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SM_MatchRole_info::state() const {
  return state_;
}
inline void SM_MatchRole_info::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 updatetime = 10;
inline bool SM_MatchRole_info::has_updatetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_MatchRole_info::set_has_updatetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_MatchRole_info::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_MatchRole_info::clear_updatetime() {
  updatetime_ = 0;
  clear_has_updatetime();
}
inline ::google::protobuf::int32 SM_MatchRole_info::updatetime() const {
  return updatetime_;
}
inline void SM_MatchRole_info::set_updatetime(::google::protobuf::int32 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional string name = 11;
inline bool SM_MatchRole_info::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SM_MatchRole_info::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SM_MatchRole_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SM_MatchRole_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SM_MatchRole_info::name() const {
  return *name_;
}
inline void SM_MatchRole_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SM_MatchRole_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SM_MatchRole_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_MatchRole_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SM_MatchRole_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_MatchRole_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 robot = 12;
inline bool SM_MatchRole_info::has_robot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SM_MatchRole_info::set_has_robot() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SM_MatchRole_info::clear_has_robot() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SM_MatchRole_info::clear_robot() {
  robot_ = 0;
  clear_has_robot();
}
inline ::google::protobuf::int32 SM_MatchRole_info::robot() const {
  return robot_;
}
inline void SM_MatchRole_info::set_robot(::google::protobuf::int32 value) {
  set_has_robot();
  robot_ = value;
}

// -------------------------------------------------------------------

// SM_MatchRole

// required int32 roleid = 1;
inline bool SM_MatchRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_MatchRole::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_MatchRole::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_MatchRole::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_MatchRole::roleid() const {
  return roleid_;
}
inline void SM_MatchRole::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .SM_MatchRole_info data = 2;
inline int SM_MatchRole::data_size() const {
  return data_.size();
}
inline void SM_MatchRole::clear_data() {
  data_.Clear();
}
inline const ::SM_MatchRole_info& SM_MatchRole::data(int index) const {
  return data_.Get(index);
}
inline ::SM_MatchRole_info* SM_MatchRole::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_MatchRole_info* SM_MatchRole::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_MatchRole_info >&
SM_MatchRole::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_MatchRole_info >*
SM_MatchRole::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// SM_Match_request

// required int32 roleid = 1;
inline bool SM_Match_request::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_Match_request::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_Match_request::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_Match_request::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_Match_request::roleid() const {
  return roleid_;
}
inline void SM_Match_request::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// SM_match_game_info

// required int32 ID = 1;
inline bool SM_match_game_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_match_game_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_match_game_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_match_game_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SM_match_game_info::id() const {
  return id_;
}
inline void SM_match_game_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 matchid = 2;
inline bool SM_match_game_info::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_match_game_info::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_match_game_info::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_match_game_info::clear_matchid() {
  matchid_ = 0;
  clear_has_matchid();
}
inline ::google::protobuf::int32 SM_match_game_info::matchid() const {
  return matchid_;
}
inline void SM_match_game_info::set_matchid(::google::protobuf::int32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional int32 begintime = 3;
inline bool SM_match_game_info::has_begintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_match_game_info::set_has_begintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_match_game_info::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_match_game_info::clear_begintime() {
  begintime_ = 0;
  clear_has_begintime();
}
inline ::google::protobuf::int32 SM_match_game_info::begintime() const {
  return begintime_;
}
inline void SM_match_game_info::set_begintime(::google::protobuf::int32 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int32 isdeleate = 4;
inline bool SM_match_game_info::has_isdeleate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_match_game_info::set_has_isdeleate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_match_game_info::clear_has_isdeleate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_match_game_info::clear_isdeleate() {
  isdeleate_ = 0;
  clear_has_isdeleate();
}
inline ::google::protobuf::int32 SM_match_game_info::isdeleate() const {
  return isdeleate_;
}
inline void SM_match_game_info::set_isdeleate(::google::protobuf::int32 value) {
  set_has_isdeleate();
  isdeleate_ = value;
}

// optional int32 state = 5;
inline bool SM_match_game_info::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_match_game_info::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_match_game_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_match_game_info::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SM_match_game_info::state() const {
  return state_;
}
inline void SM_match_game_info::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 endtime = 6;
inline bool SM_match_game_info::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_match_game_info::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_match_game_info::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_match_game_info::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 SM_match_game_info::endtime() const {
  return endtime_;
}
inline void SM_match_game_info::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// SM_match_game

// required int32 roleid = 1;
inline bool SM_match_game::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_match_game::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_match_game::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_match_game::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 SM_match_game::roleid() const {
  return roleid_;
}
inline void SM_match_game::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// repeated .SM_match_game_info data = 2;
inline int SM_match_game::data_size() const {
  return data_.size();
}
inline void SM_match_game::clear_data() {
  data_.Clear();
}
inline const ::SM_match_game_info& SM_match_game::data(int index) const {
  return data_.Get(index);
}
inline ::SM_match_game_info* SM_match_game::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SM_match_game_info* SM_match_game::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_match_game_info >&
SM_match_game::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_match_game_info >*
SM_match_game::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fMatch_2etxt__INCLUDED
