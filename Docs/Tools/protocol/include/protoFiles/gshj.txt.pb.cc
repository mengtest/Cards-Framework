// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gshj.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gshj.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Gshj_OpenTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_OpenTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_BossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_BossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_BossInfo_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_BossInfo_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_Join_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_Join_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_CoolDown_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_CoolDown_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_Inspire_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_Inspire_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_RankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_RankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Gshj_Rank_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Gshj_Rank_Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gshj_2etxt() {
  protobuf_AddDesc_gshj_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gshj.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Gshj_OpenTime_descriptor_ = file->message_type(0);
  static const int GM_Gshj_OpenTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_OpenTime, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_OpenTime, endtime_),
  };
  GM_Gshj_OpenTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_OpenTime_descriptor_,
      GM_Gshj_OpenTime::default_instance_,
      GM_Gshj_OpenTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_OpenTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_OpenTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_OpenTime));
  GM_Gshj_BossInfo_descriptor_ = file->message_type(1);
  static const int GM_Gshj_BossInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, bosscurhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, bosstotalhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, moralelv_),
  };
  GM_Gshj_BossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_BossInfo_descriptor_,
      GM_Gshj_BossInfo::default_instance_,
      GM_Gshj_BossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_BossInfo));
  GM_Gshj_BossInfo_Result_descriptor_ = file->message_type(2);
  static const int GM_Gshj_BossInfo_Result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo_Result, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo_Result, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo_Result, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo_Result, openlefttime_),
  };
  GM_Gshj_BossInfo_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_BossInfo_Result_descriptor_,
      GM_Gshj_BossInfo_Result::default_instance_,
      GM_Gshj_BossInfo_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_BossInfo_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_BossInfo_Result));
  GM_Gshj_Join_Result_descriptor_ = file->message_type(3);
  static const int GM_Gshj_Join_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Join_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Join_Result, teamid_),
  };
  GM_Gshj_Join_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_Join_Result_descriptor_,
      GM_Gshj_Join_Result::default_instance_,
      GM_Gshj_Join_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Join_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Join_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_Join_Result));
  GM_Gshj_CoolDown_Result_descriptor_ = file->message_type(4);
  static const int GM_Gshj_CoolDown_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_CoolDown_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_CoolDown_Result, cooltime_),
  };
  GM_Gshj_CoolDown_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_CoolDown_Result_descriptor_,
      GM_Gshj_CoolDown_Result::default_instance_,
      GM_Gshj_CoolDown_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_CoolDown_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_CoolDown_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_CoolDown_Result));
  GM_Gshj_Inspire_Result_descriptor_ = file->message_type(5);
  static const int GM_Gshj_Inspire_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Inspire_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Inspire_Result, moralelv_),
  };
  GM_Gshj_Inspire_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_Inspire_Result_descriptor_,
      GM_Gshj_Inspire_Result::default_instance_,
      GM_Gshj_Inspire_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Inspire_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Inspire_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_Inspire_Result));
  GM_Gshj_RankItem_descriptor_ = file->message_type(6);
  static const int GM_Gshj_RankItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, position_),
  };
  GM_Gshj_RankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_RankItem_descriptor_,
      GM_Gshj_RankItem::default_instance_,
      GM_Gshj_RankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_RankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_RankItem));
  GM_Gshj_Rank_Result_descriptor_ = file->message_type(7);
  static const int GM_Gshj_Rank_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Rank_Result, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Rank_Result, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Rank_Result, item_),
  };
  GM_Gshj_Rank_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Gshj_Rank_Result_descriptor_,
      GM_Gshj_Rank_Result::default_instance_,
      GM_Gshj_Rank_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Rank_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Gshj_Rank_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Gshj_Rank_Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gshj_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_OpenTime_descriptor_, &GM_Gshj_OpenTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_BossInfo_descriptor_, &GM_Gshj_BossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_BossInfo_Result_descriptor_, &GM_Gshj_BossInfo_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_Join_Result_descriptor_, &GM_Gshj_Join_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_CoolDown_Result_descriptor_, &GM_Gshj_CoolDown_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_Inspire_Result_descriptor_, &GM_Gshj_Inspire_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_RankItem_descriptor_, &GM_Gshj_RankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Gshj_Rank_Result_descriptor_, &GM_Gshj_Rank_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gshj_2etxt() {
  delete GM_Gshj_OpenTime::default_instance_;
  delete GM_Gshj_OpenTime_reflection_;
  delete GM_Gshj_BossInfo::default_instance_;
  delete GM_Gshj_BossInfo_reflection_;
  delete GM_Gshj_BossInfo_Result::default_instance_;
  delete GM_Gshj_BossInfo_Result_reflection_;
  delete GM_Gshj_Join_Result::default_instance_;
  delete GM_Gshj_Join_Result_reflection_;
  delete GM_Gshj_CoolDown_Result::default_instance_;
  delete GM_Gshj_CoolDown_Result_reflection_;
  delete GM_Gshj_Inspire_Result::default_instance_;
  delete GM_Gshj_Inspire_Result_reflection_;
  delete GM_Gshj_RankItem::default_instance_;
  delete GM_Gshj_RankItem_reflection_;
  delete GM_Gshj_Rank_Result::default_instance_;
  delete GM_Gshj_Rank_Result_reflection_;
}

void protobuf_AddDesc_gshj_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010gshj.txt\"6\n\020GM_Gshj_OpenTime\022\021\n\tstartt"
    "ime\030\001 \002(\005\022\017\n\007endtime\030\002 \002(\005\"~\n\020GM_Gshj_Bo"
    "ssInfo\022\016\n\006bossid\030\001 \002(\005\022\021\n\tbosscurhp\030\002 \002("
    "\003\022\023\n\013bosstotalhp\030\003 \002(\003\022\016\n\006joined\030\004 \002(\005\022\020"
    "\n\010cooltime\030\005 \002(\005\022\020\n\010moralelv\030\006 \002(\005\"\200\001\n\027G"
    "M_Gshj_BossInfo_Result\022\r\n\005times\030\001 \002(\005\022\037\n"
    "\004boss\030\002 \001(\0132\021.GM_Gshj_BossInfo\022\037\n\004time\030\003"
    " \001(\0132\021.GM_Gshj_OpenTime\022\024\n\014openlefttime\030"
    "\004 \001(\005\"5\n\023GM_Gshj_Join_Result\022\016\n\006result\030\001"
    " \002(\005\022\016\n\006teamid\030\002 \001(\005\";\n\027GM_Gshj_CoolDown"
    "_Result\022\016\n\006result\030\001 \002(\005\022\020\n\010cooltime\030\002 \002("
    "\005\":\n\026GM_Gshj_Inspire_Result\022\016\n\006result\030\001 "
    "\002(\005\022\020\n\010moralelv\030\002 \002(\005\"z\n\020GM_Gshj_RankIte"
    "m\022\016\n\006roleid\030\001 \002(\005\022\020\n\010rolename\030\002 \002(\t\022\022\n\np"
    "rofession\030\003 \002(\005\022\016\n\006rolelv\030\004 \002(\005\022\016\n\006damag"
    "e\030\005 \002(\003\022\020\n\010position\030\006 \002(\005\"h\n\023GM_Gshj_Ran"
    "k_Result\022!\n\006myrank\030\001 \001(\0132\021.GM_Gshj_RankI"
    "tem\022\r\n\005count\030\002 \002(\005\022\037\n\004item\030\003 \003(\0132\021.GM_Gs"
    "hj_RankItem", 731);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gshj.txt", &protobuf_RegisterTypes);
  GM_Gshj_OpenTime::default_instance_ = new GM_Gshj_OpenTime();
  GM_Gshj_BossInfo::default_instance_ = new GM_Gshj_BossInfo();
  GM_Gshj_BossInfo_Result::default_instance_ = new GM_Gshj_BossInfo_Result();
  GM_Gshj_Join_Result::default_instance_ = new GM_Gshj_Join_Result();
  GM_Gshj_CoolDown_Result::default_instance_ = new GM_Gshj_CoolDown_Result();
  GM_Gshj_Inspire_Result::default_instance_ = new GM_Gshj_Inspire_Result();
  GM_Gshj_RankItem::default_instance_ = new GM_Gshj_RankItem();
  GM_Gshj_Rank_Result::default_instance_ = new GM_Gshj_Rank_Result();
  GM_Gshj_OpenTime::default_instance_->InitAsDefaultInstance();
  GM_Gshj_BossInfo::default_instance_->InitAsDefaultInstance();
  GM_Gshj_BossInfo_Result::default_instance_->InitAsDefaultInstance();
  GM_Gshj_Join_Result::default_instance_->InitAsDefaultInstance();
  GM_Gshj_CoolDown_Result::default_instance_->InitAsDefaultInstance();
  GM_Gshj_Inspire_Result::default_instance_->InitAsDefaultInstance();
  GM_Gshj_RankItem::default_instance_->InitAsDefaultInstance();
  GM_Gshj_Rank_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gshj_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gshj_2etxt {
  StaticDescriptorInitializer_gshj_2etxt() {
    protobuf_AddDesc_gshj_2etxt();
  }
} static_descriptor_initializer_gshj_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_OpenTime::kStarttimeFieldNumber;
const int GM_Gshj_OpenTime::kEndtimeFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_OpenTime::GM_Gshj_OpenTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_OpenTime::InitAsDefaultInstance() {
}

GM_Gshj_OpenTime::GM_Gshj_OpenTime(const GM_Gshj_OpenTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_OpenTime::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_OpenTime::~GM_Gshj_OpenTime() {
  SharedDtor();
}

void GM_Gshj_OpenTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gshj_OpenTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_OpenTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_OpenTime_descriptor_;
}

const GM_Gshj_OpenTime& GM_Gshj_OpenTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_OpenTime* GM_Gshj_OpenTime::default_instance_ = NULL;

GM_Gshj_OpenTime* GM_Gshj_OpenTime::New() const {
  return new GM_Gshj_OpenTime;
}

void GM_Gshj_OpenTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_OpenTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // required int32 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_OpenTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }

  // required int32 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_OpenTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 starttime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }

  // required int32 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_OpenTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // required int32 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_OpenTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_OpenTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_OpenTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_OpenTime::MergeFrom(const GM_Gshj_OpenTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_OpenTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_OpenTime::CopyFrom(const GM_Gshj_OpenTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_OpenTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Gshj_OpenTime::Swap(GM_Gshj_OpenTime* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_OpenTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_OpenTime_descriptor_;
  metadata.reflection = GM_Gshj_OpenTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_BossInfo::kBossidFieldNumber;
const int GM_Gshj_BossInfo::kBosscurhpFieldNumber;
const int GM_Gshj_BossInfo::kBosstotalhpFieldNumber;
const int GM_Gshj_BossInfo::kJoinedFieldNumber;
const int GM_Gshj_BossInfo::kCooltimeFieldNumber;
const int GM_Gshj_BossInfo::kMoralelvFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_BossInfo::GM_Gshj_BossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_BossInfo::InitAsDefaultInstance() {
}

GM_Gshj_BossInfo::GM_Gshj_BossInfo(const GM_Gshj_BossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_BossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  bosscurhp_ = GOOGLE_LONGLONG(0);
  bosstotalhp_ = GOOGLE_LONGLONG(0);
  joined_ = 0;
  cooltime_ = 0;
  moralelv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_BossInfo::~GM_Gshj_BossInfo() {
  SharedDtor();
}

void GM_Gshj_BossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gshj_BossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_BossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_BossInfo_descriptor_;
}

const GM_Gshj_BossInfo& GM_Gshj_BossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_BossInfo* GM_Gshj_BossInfo::default_instance_ = NULL;

GM_Gshj_BossInfo* GM_Gshj_BossInfo::New() const {
  return new GM_Gshj_BossInfo;
}

void GM_Gshj_BossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
    bosscurhp_ = GOOGLE_LONGLONG(0);
    bosstotalhp_ = GOOGLE_LONGLONG(0);
    joined_ = 0;
    cooltime_ = 0;
    moralelv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_BossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bossid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bosscurhp;
        break;
      }

      // required int64 bosscurhp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bosscurhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bosscurhp_)));
          set_has_bosscurhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bosstotalhp;
        break;
      }

      // required int64 bosstotalhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bosstotalhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bosstotalhp_)));
          set_has_bosstotalhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_joined;
        break;
      }

      // required int32 joined = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joined_)));
          set_has_joined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cooltime;
        break;
      }

      // required int32 cooltime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooltime_)));
          set_has_cooltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_moralelv;
        break;
      }

      // required int32 moralelv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moralelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moralelv_)));
          set_has_moralelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_BossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bossid = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  // required int64 bosscurhp = 2;
  if (has_bosscurhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bosscurhp(), output);
  }

  // required int64 bosstotalhp = 3;
  if (has_bosstotalhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bosstotalhp(), output);
  }

  // required int32 joined = 4;
  if (has_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->joined(), output);
  }

  // required int32 cooltime = 5;
  if (has_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cooltime(), output);
  }

  // required int32 moralelv = 6;
  if (has_moralelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->moralelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_BossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bossid = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  // required int64 bosscurhp = 2;
  if (has_bosscurhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bosscurhp(), target);
  }

  // required int64 bosstotalhp = 3;
  if (has_bosstotalhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bosstotalhp(), target);
  }

  // required int32 joined = 4;
  if (has_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->joined(), target);
  }

  // required int32 cooltime = 5;
  if (has_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cooltime(), target);
  }

  // required int32 moralelv = 6;
  if (has_moralelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->moralelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_BossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bossid = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // required int64 bosscurhp = 2;
    if (has_bosscurhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bosscurhp());
    }

    // required int64 bosstotalhp = 3;
    if (has_bosstotalhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bosstotalhp());
    }

    // required int32 joined = 4;
    if (has_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joined());
    }

    // required int32 cooltime = 5;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooltime());
    }

    // required int32 moralelv = 6;
    if (has_moralelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moralelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_BossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_BossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_BossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_BossInfo::MergeFrom(const GM_Gshj_BossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosscurhp()) {
      set_bosscurhp(from.bosscurhp());
    }
    if (from.has_bosstotalhp()) {
      set_bosstotalhp(from.bosstotalhp());
    }
    if (from.has_joined()) {
      set_joined(from.joined());
    }
    if (from.has_cooltime()) {
      set_cooltime(from.cooltime());
    }
    if (from.has_moralelv()) {
      set_moralelv(from.moralelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_BossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_BossInfo::CopyFrom(const GM_Gshj_BossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_BossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GM_Gshj_BossInfo::Swap(GM_Gshj_BossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bosscurhp_, other->bosscurhp_);
    std::swap(bosstotalhp_, other->bosstotalhp_);
    std::swap(joined_, other->joined_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(moralelv_, other->moralelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_BossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_BossInfo_descriptor_;
  metadata.reflection = GM_Gshj_BossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_BossInfo_Result::kTimesFieldNumber;
const int GM_Gshj_BossInfo_Result::kBossFieldNumber;
const int GM_Gshj_BossInfo_Result::kTimeFieldNumber;
const int GM_Gshj_BossInfo_Result::kOpenlefttimeFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_BossInfo_Result::GM_Gshj_BossInfo_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_BossInfo_Result::InitAsDefaultInstance() {
  boss_ = const_cast< ::GM_Gshj_BossInfo*>(&::GM_Gshj_BossInfo::default_instance());
  time_ = const_cast< ::GM_Gshj_OpenTime*>(&::GM_Gshj_OpenTime::default_instance());
}

GM_Gshj_BossInfo_Result::GM_Gshj_BossInfo_Result(const GM_Gshj_BossInfo_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_BossInfo_Result::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  boss_ = NULL;
  time_ = NULL;
  openlefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_BossInfo_Result::~GM_Gshj_BossInfo_Result() {
  SharedDtor();
}

void GM_Gshj_BossInfo_Result::SharedDtor() {
  if (this != default_instance_) {
    delete boss_;
    delete time_;
  }
}

void GM_Gshj_BossInfo_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_BossInfo_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_BossInfo_Result_descriptor_;
}

const GM_Gshj_BossInfo_Result& GM_Gshj_BossInfo_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_BossInfo_Result* GM_Gshj_BossInfo_Result::default_instance_ = NULL;

GM_Gshj_BossInfo_Result* GM_Gshj_BossInfo_Result::New() const {
  return new GM_Gshj_BossInfo_Result;
}

void GM_Gshj_BossInfo_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
    if (has_boss()) {
      if (boss_ != NULL) boss_->::GM_Gshj_BossInfo::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::GM_Gshj_OpenTime::Clear();
    }
    openlefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_BossInfo_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boss;
        break;
      }

      // optional .GM_Gshj_BossInfo boss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // optional .GM_Gshj_OpenTime time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_openlefttime;
        break;
      }

      // optional int32 openlefttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openlefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openlefttime_)));
          set_has_openlefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_BossInfo_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  // optional .GM_Gshj_BossInfo boss = 2;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boss(), output);
  }

  // optional .GM_Gshj_OpenTime time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->time(), output);
  }

  // optional int32 openlefttime = 4;
  if (has_openlefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->openlefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_BossInfo_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }

  // optional .GM_Gshj_BossInfo boss = 2;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boss(), target);
  }

  // optional .GM_Gshj_OpenTime time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->time(), target);
  }

  // optional int32 openlefttime = 4;
  if (has_openlefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->openlefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_BossInfo_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional .GM_Gshj_BossInfo boss = 2;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

    // optional .GM_Gshj_OpenTime time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional int32 openlefttime = 4;
    if (has_openlefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openlefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_BossInfo_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_BossInfo_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_BossInfo_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_BossInfo_Result::MergeFrom(const GM_Gshj_BossInfo_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_boss()) {
      mutable_boss()->::GM_Gshj_BossInfo::MergeFrom(from.boss());
    }
    if (from.has_time()) {
      mutable_time()->::GM_Gshj_OpenTime::MergeFrom(from.time());
    }
    if (from.has_openlefttime()) {
      set_openlefttime(from.openlefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_BossInfo_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_BossInfo_Result::CopyFrom(const GM_Gshj_BossInfo_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_BossInfo_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void GM_Gshj_BossInfo_Result::Swap(GM_Gshj_BossInfo_Result* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(boss_, other->boss_);
    std::swap(time_, other->time_);
    std::swap(openlefttime_, other->openlefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_BossInfo_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_BossInfo_Result_descriptor_;
  metadata.reflection = GM_Gshj_BossInfo_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_Join_Result::kResultFieldNumber;
const int GM_Gshj_Join_Result::kTeamidFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_Join_Result::GM_Gshj_Join_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_Join_Result::InitAsDefaultInstance() {
}

GM_Gshj_Join_Result::GM_Gshj_Join_Result(const GM_Gshj_Join_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_Join_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_Join_Result::~GM_Gshj_Join_Result() {
  SharedDtor();
}

void GM_Gshj_Join_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gshj_Join_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_Join_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_Join_Result_descriptor_;
}

const GM_Gshj_Join_Result& GM_Gshj_Join_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_Join_Result* GM_Gshj_Join_Result::default_instance_ = NULL;

GM_Gshj_Join_Result* GM_Gshj_Join_Result::New() const {
  return new GM_Gshj_Join_Result;
}

void GM_Gshj_Join_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_Join_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_Join_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_Join_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_Join_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_Join_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_Join_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_Join_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_Join_Result::MergeFrom(const GM_Gshj_Join_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_Join_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_Join_Result::CopyFrom(const GM_Gshj_Join_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_Join_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Gshj_Join_Result::Swap(GM_Gshj_Join_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_Join_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_Join_Result_descriptor_;
  metadata.reflection = GM_Gshj_Join_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_CoolDown_Result::kResultFieldNumber;
const int GM_Gshj_CoolDown_Result::kCooltimeFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_CoolDown_Result::GM_Gshj_CoolDown_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_CoolDown_Result::InitAsDefaultInstance() {
}

GM_Gshj_CoolDown_Result::GM_Gshj_CoolDown_Result(const GM_Gshj_CoolDown_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_CoolDown_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cooltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_CoolDown_Result::~GM_Gshj_CoolDown_Result() {
  SharedDtor();
}

void GM_Gshj_CoolDown_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gshj_CoolDown_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_CoolDown_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_CoolDown_Result_descriptor_;
}

const GM_Gshj_CoolDown_Result& GM_Gshj_CoolDown_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_CoolDown_Result* GM_Gshj_CoolDown_Result::default_instance_ = NULL;

GM_Gshj_CoolDown_Result* GM_Gshj_CoolDown_Result::New() const {
  return new GM_Gshj_CoolDown_Result;
}

void GM_Gshj_CoolDown_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cooltime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_CoolDown_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cooltime;
        break;
      }

      // required int32 cooltime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooltime_)));
          set_has_cooltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_CoolDown_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 cooltime = 2;
  if (has_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cooltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_CoolDown_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 cooltime = 2;
  if (has_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cooltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_CoolDown_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 cooltime = 2;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_CoolDown_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_CoolDown_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_CoolDown_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_CoolDown_Result::MergeFrom(const GM_Gshj_CoolDown_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cooltime()) {
      set_cooltime(from.cooltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_CoolDown_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_CoolDown_Result::CopyFrom(const GM_Gshj_CoolDown_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_CoolDown_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Gshj_CoolDown_Result::Swap(GM_Gshj_CoolDown_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_CoolDown_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_CoolDown_Result_descriptor_;
  metadata.reflection = GM_Gshj_CoolDown_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_Inspire_Result::kResultFieldNumber;
const int GM_Gshj_Inspire_Result::kMoralelvFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_Inspire_Result::GM_Gshj_Inspire_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_Inspire_Result::InitAsDefaultInstance() {
}

GM_Gshj_Inspire_Result::GM_Gshj_Inspire_Result(const GM_Gshj_Inspire_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_Inspire_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  moralelv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_Inspire_Result::~GM_Gshj_Inspire_Result() {
  SharedDtor();
}

void GM_Gshj_Inspire_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Gshj_Inspire_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_Inspire_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_Inspire_Result_descriptor_;
}

const GM_Gshj_Inspire_Result& GM_Gshj_Inspire_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_Inspire_Result* GM_Gshj_Inspire_Result::default_instance_ = NULL;

GM_Gshj_Inspire_Result* GM_Gshj_Inspire_Result::New() const {
  return new GM_Gshj_Inspire_Result;
}

void GM_Gshj_Inspire_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    moralelv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_Inspire_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moralelv;
        break;
      }

      // required int32 moralelv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moralelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moralelv_)));
          set_has_moralelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_Inspire_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 moralelv = 2;
  if (has_moralelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moralelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_Inspire_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 moralelv = 2;
  if (has_moralelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moralelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_Inspire_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 moralelv = 2;
    if (has_moralelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moralelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_Inspire_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_Inspire_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_Inspire_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_Inspire_Result::MergeFrom(const GM_Gshj_Inspire_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_moralelv()) {
      set_moralelv(from.moralelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_Inspire_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_Inspire_Result::CopyFrom(const GM_Gshj_Inspire_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_Inspire_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Gshj_Inspire_Result::Swap(GM_Gshj_Inspire_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(moralelv_, other->moralelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_Inspire_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_Inspire_Result_descriptor_;
  metadata.reflection = GM_Gshj_Inspire_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_RankItem::kRoleidFieldNumber;
const int GM_Gshj_RankItem::kRolenameFieldNumber;
const int GM_Gshj_RankItem::kProfessionFieldNumber;
const int GM_Gshj_RankItem::kRolelvFieldNumber;
const int GM_Gshj_RankItem::kDamageFieldNumber;
const int GM_Gshj_RankItem::kPositionFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_RankItem::GM_Gshj_RankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_RankItem::InitAsDefaultInstance() {
}

GM_Gshj_RankItem::GM_Gshj_RankItem(const GM_Gshj_RankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_RankItem::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  rolelv_ = 0;
  damage_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_RankItem::~GM_Gshj_RankItem() {
  SharedDtor();
}

void GM_Gshj_RankItem::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_Gshj_RankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_RankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_RankItem_descriptor_;
}

const GM_Gshj_RankItem& GM_Gshj_RankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_RankItem* GM_Gshj_RankItem::default_instance_ = NULL;

GM_Gshj_RankItem* GM_Gshj_RankItem::New() const {
  return new GM_Gshj_RankItem;
}

void GM_Gshj_RankItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    profession_ = 0;
    rolelv_ = 0;
    damage_ = GOOGLE_LONGLONG(0);
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_RankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolename;
        break;
      }

      // required string rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // required int32 profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rolelv;
        break;
      }

      // required int32 rolelv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // required int64 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_position;
        break;
      }

      // required int32 position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_RankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // required int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // required int32 rolelv = 4;
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rolelv(), output);
  }

  // required int64 damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->damage(), output);
  }

  // required int32 position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_RankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // required int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // required int32 rolelv = 4;
  if (has_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rolelv(), target);
  }

  // required int64 damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->damage(), target);
  }

  // required int32 position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_RankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string rolename = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 rolelv = 4;
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelv());
    }

    // required int64 damage = 5;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->damage());
    }

    // required int32 position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_RankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_RankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_RankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_RankItem::MergeFrom(const GM_Gshj_RankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_RankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_RankItem::CopyFrom(const GM_Gshj_RankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_RankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GM_Gshj_RankItem::Swap(GM_Gshj_RankItem* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(profession_, other->profession_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(damage_, other->damage_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_RankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_RankItem_descriptor_;
  metadata.reflection = GM_Gshj_RankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Gshj_Rank_Result::kMyrankFieldNumber;
const int GM_Gshj_Rank_Result::kCountFieldNumber;
const int GM_Gshj_Rank_Result::kItemFieldNumber;
#endif  // !_MSC_VER

GM_Gshj_Rank_Result::GM_Gshj_Rank_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Gshj_Rank_Result::InitAsDefaultInstance() {
  myrank_ = const_cast< ::GM_Gshj_RankItem*>(&::GM_Gshj_RankItem::default_instance());
}

GM_Gshj_Rank_Result::GM_Gshj_Rank_Result(const GM_Gshj_Rank_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Gshj_Rank_Result::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Gshj_Rank_Result::~GM_Gshj_Rank_Result() {
  SharedDtor();
}

void GM_Gshj_Rank_Result::SharedDtor() {
  if (this != default_instance_) {
    delete myrank_;
  }
}

void GM_Gshj_Rank_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Gshj_Rank_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Gshj_Rank_Result_descriptor_;
}

const GM_Gshj_Rank_Result& GM_Gshj_Rank_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gshj_2etxt();
  return *default_instance_;
}

GM_Gshj_Rank_Result* GM_Gshj_Rank_Result::default_instance_ = NULL;

GM_Gshj_Rank_Result* GM_Gshj_Rank_Result::New() const {
  return new GM_Gshj_Rank_Result;
}

void GM_Gshj_Rank_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_myrank()) {
      if (myrank_ != NULL) myrank_->::GM_Gshj_RankItem::Clear();
    }
    count_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Gshj_Rank_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GM_Gshj_RankItem myrank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .GM_Gshj_RankItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Gshj_Rank_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GM_Gshj_RankItem myrank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myrank(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .GM_Gshj_RankItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Gshj_Rank_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GM_Gshj_RankItem myrank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myrank(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .GM_Gshj_RankItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Gshj_Rank_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GM_Gshj_RankItem myrank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrank());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_Gshj_RankItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Gshj_Rank_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Gshj_Rank_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Gshj_Rank_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Gshj_Rank_Result::MergeFrom(const GM_Gshj_Rank_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      mutable_myrank()->::GM_Gshj_RankItem::MergeFrom(from.myrank());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Gshj_Rank_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Gshj_Rank_Result::CopyFrom(const GM_Gshj_Rank_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Gshj_Rank_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_myrank()) {
    if (!this->myrank().IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Gshj_Rank_Result::Swap(GM_Gshj_Rank_Result* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    std::swap(count_, other->count_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Gshj_Rank_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Gshj_Rank_Result_descriptor_;
  metadata.reflection = GM_Gshj_Rank_Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
