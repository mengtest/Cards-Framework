// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_FightAid.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_FightAid.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SMFightAidReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMFightAidReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_FightAidDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_FightAidDataRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fFightAid_2etxt() {
  protobuf_AddDesc_SP_5fFightAid_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_FightAid.txt");
  GOOGLE_CHECK(file != NULL);
  SMFightAidReturn_descriptor_ = file->message_type(0);
  static const int SMFightAidReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMFightAidReturn, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMFightAidReturn, bagstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMFightAidReturn, lefttime_),
  };
  SMFightAidReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMFightAidReturn_descriptor_,
      SMFightAidReturn::default_instance_,
      SMFightAidReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMFightAidReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMFightAidReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMFightAidReturn));
  DB_FightAidDataRequest_descriptor_ = file->message_type(1);
  static const int DB_FightAidDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FightAidDataRequest, m_roleid_),
  };
  DB_FightAidDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_FightAidDataRequest_descriptor_,
      DB_FightAidDataRequest::default_instance_,
      DB_FightAidDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FightAidDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_FightAidDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_FightAidDataRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fFightAid_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMFightAidReturn_descriptor_, &SMFightAidReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_FightAidDataRequest_descriptor_, &DB_FightAidDataRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fFightAid_2etxt() {
  delete SMFightAidReturn::default_instance_;
  delete SMFightAidReturn_reflection_;
  delete DB_FightAidDataRequest::default_instance_;
  delete DB_FightAidDataRequest_reflection_;
}

void protobuf_AddDesc_SP_5fFightAid_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SP_FightAid.txt\"F\n\020SMFightAidReturn\022\016\n"
    "\006roleid\030\001 \002(\005\022\020\n\010bagState\030\002 \001(\t\022\020\n\010leftT"
    "ime\030\003 \001(\005\"*\n\026DB_FightAidDataRequest\022\020\n\010m"
    "_roleId\030\001 \002(\005", 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_FightAid.txt", &protobuf_RegisterTypes);
  SMFightAidReturn::default_instance_ = new SMFightAidReturn();
  DB_FightAidDataRequest::default_instance_ = new DB_FightAidDataRequest();
  SMFightAidReturn::default_instance_->InitAsDefaultInstance();
  DB_FightAidDataRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fFightAid_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fFightAid_2etxt {
  StaticDescriptorInitializer_SP_5fFightAid_2etxt() {
    protobuf_AddDesc_SP_5fFightAid_2etxt();
  }
} static_descriptor_initializer_SP_5fFightAid_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SMFightAidReturn::kRoleidFieldNumber;
const int SMFightAidReturn::kBagStateFieldNumber;
const int SMFightAidReturn::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

SMFightAidReturn::SMFightAidReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMFightAidReturn::InitAsDefaultInstance() {
}

SMFightAidReturn::SMFightAidReturn(const SMFightAidReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMFightAidReturn::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  bagstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMFightAidReturn::~SMFightAidReturn() {
  SharedDtor();
}

void SMFightAidReturn::SharedDtor() {
  if (bagstate_ != &::google::protobuf::internal::kEmptyString) {
    delete bagstate_;
  }
  if (this != default_instance_) {
  }
}

void SMFightAidReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMFightAidReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMFightAidReturn_descriptor_;
}

const SMFightAidReturn& SMFightAidReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFightAid_2etxt();
  return *default_instance_;
}

SMFightAidReturn* SMFightAidReturn::default_instance_ = NULL;

SMFightAidReturn* SMFightAidReturn::New() const {
  return new SMFightAidReturn;
}

void SMFightAidReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_bagstate()) {
      if (bagstate_ != &::google::protobuf::internal::kEmptyString) {
        bagstate_->clear();
      }
    }
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMFightAidReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bagState;
        break;
      }

      // optional string bagState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bagstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bagstate().data(), this->bagstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMFightAidReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string bagState = 2;
  if (has_bagstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bagstate().data(), this->bagstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bagstate(), output);
  }

  // optional int32 leftTime = 3;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMFightAidReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string bagState = 2;
  if (has_bagstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bagstate().data(), this->bagstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bagstate(), target);
  }

  // optional int32 leftTime = 3;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMFightAidReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string bagState = 2;
    if (has_bagstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bagstate());
    }

    // optional int32 leftTime = 3;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMFightAidReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMFightAidReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMFightAidReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMFightAidReturn::MergeFrom(const SMFightAidReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_bagstate()) {
      set_bagstate(from.bagstate());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMFightAidReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMFightAidReturn::CopyFrom(const SMFightAidReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMFightAidReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SMFightAidReturn::Swap(SMFightAidReturn* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(bagstate_, other->bagstate_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMFightAidReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMFightAidReturn_descriptor_;
  metadata.reflection = SMFightAidReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_FightAidDataRequest::kMRoleIdFieldNumber;
#endif  // !_MSC_VER

DB_FightAidDataRequest::DB_FightAidDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_FightAidDataRequest::InitAsDefaultInstance() {
}

DB_FightAidDataRequest::DB_FightAidDataRequest(const DB_FightAidDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_FightAidDataRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_FightAidDataRequest::~DB_FightAidDataRequest() {
  SharedDtor();
}

void DB_FightAidDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_FightAidDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_FightAidDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_FightAidDataRequest_descriptor_;
}

const DB_FightAidDataRequest& DB_FightAidDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fFightAid_2etxt();
  return *default_instance_;
}

DB_FightAidDataRequest* DB_FightAidDataRequest::default_instance_ = NULL;

DB_FightAidDataRequest* DB_FightAidDataRequest::New() const {
  return new DB_FightAidDataRequest;
}

void DB_FightAidDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_FightAidDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_FightAidDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_FightAidDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_FightAidDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_FightAidDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_FightAidDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_FightAidDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_FightAidDataRequest::MergeFrom(const DB_FightAidDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_FightAidDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_FightAidDataRequest::CopyFrom(const DB_FightAidDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_FightAidDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_FightAidDataRequest::Swap(DB_FightAidDataRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_FightAidDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_FightAidDataRequest_descriptor_;
  metadata.reflection = DB_FightAidDataRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
