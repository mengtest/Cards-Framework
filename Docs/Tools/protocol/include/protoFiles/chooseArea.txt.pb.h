// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chooseArea.txt

#ifndef PROTOBUF_chooseArea_2etxt__INCLUDED
#define PROTOBUF_chooseArea_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chooseArea_2etxt();
void protobuf_AssignDesc_chooseArea_2etxt();
void protobuf_ShutdownFile_chooseArea_2etxt();

class SD_AreaList;
class SD_Area;
class GM_ChooseArea;
class GM_ChooseAreaReturn;
class SM_DBAreaAccount;
class SM_DBAreaInfo;

// ===================================================================

class SD_AreaList : public ::google::protobuf::Message {
 public:
  SD_AreaList();
  virtual ~SD_AreaList();

  SD_AreaList(const SD_AreaList& from);

  inline SD_AreaList& operator=(const SD_AreaList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD_AreaList& default_instance();

  void Swap(SD_AreaList* other);

  // implements Message ----------------------------------------------

  SD_AreaList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD_AreaList& from);
  void MergeFrom(const SD_AreaList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Count = 1;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 1;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // repeated .SD_Area m_Area = 2;
  inline int m_area_size() const;
  inline void clear_m_area();
  static const int kMAreaFieldNumber = 2;
  inline const ::SD_Area& m_area(int index) const;
  inline ::SD_Area* mutable_m_area(int index);
  inline ::SD_Area* add_m_area();
  inline const ::google::protobuf::RepeatedPtrField< ::SD_Area >&
      m_area() const;
  inline ::google::protobuf::RepeatedPtrField< ::SD_Area >*
      mutable_m_area();

  // @@protoc_insertion_point(class_scope:SD_AreaList)
 private:
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SD_Area > m_area_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_chooseArea_2etxt();
  friend void protobuf_AssignDesc_chooseArea_2etxt();
  friend void protobuf_ShutdownFile_chooseArea_2etxt();

  void InitAsDefaultInstance();
  static SD_AreaList* default_instance_;
};
// -------------------------------------------------------------------

class SD_Area : public ::google::protobuf::Message {
 public:
  SD_Area();
  virtual ~SD_Area();

  SD_Area(const SD_Area& from);

  inline SD_Area& operator=(const SD_Area& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD_Area& default_instance();

  void Swap(SD_Area* other);

  // implements Message ----------------------------------------------

  SD_Area* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD_Area& from);
  void MergeFrom(const SD_Area& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // required string m_AreaName = 2;
  inline bool has_m_areaname() const;
  inline void clear_m_areaname();
  static const int kMAreaNameFieldNumber = 2;
  inline const ::std::string& m_areaname() const;
  inline void set_m_areaname(const ::std::string& value);
  inline void set_m_areaname(const char* value);
  inline void set_m_areaname(const char* value, size_t size);
  inline ::std::string* mutable_m_areaname();
  inline ::std::string* release_m_areaname();
  inline void set_allocated_m_areaname(::std::string* m_areaname);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SD_Area)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_areaname();
  inline void clear_has_m_areaname();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_areaname_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_chooseArea_2etxt();
  friend void protobuf_AssignDesc_chooseArea_2etxt();
  friend void protobuf_ShutdownFile_chooseArea_2etxt();

  void InitAsDefaultInstance();
  static SD_Area* default_instance_;
};
// -------------------------------------------------------------------

class GM_ChooseArea : public ::google::protobuf::Message {
 public:
  GM_ChooseArea();
  virtual ~GM_ChooseArea();

  GM_ChooseArea(const GM_ChooseArea& from);

  inline GM_ChooseArea& operator=(const GM_ChooseArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ChooseArea& default_instance();

  void Swap(GM_ChooseArea* other);

  // implements Message ----------------------------------------------

  GM_ChooseArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ChooseArea& from);
  void MergeFrom(const GM_ChooseArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Account = 1;
  inline bool has_m_account() const;
  inline void clear_m_account();
  static const int kMAccountFieldNumber = 1;
  inline ::google::protobuf::int32 m_account() const;
  inline void set_m_account(::google::protobuf::int32 value);

  // required int32 m_AreaID = 2;
  inline bool has_m_areaid() const;
  inline void clear_m_areaid();
  static const int kMAreaIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_areaid() const;
  inline void set_m_areaid(::google::protobuf::int32 value);

  // required string m_RandStr = 3;
  inline bool has_m_randstr() const;
  inline void clear_m_randstr();
  static const int kMRandStrFieldNumber = 3;
  inline const ::std::string& m_randstr() const;
  inline void set_m_randstr(const ::std::string& value);
  inline void set_m_randstr(const char* value);
  inline void set_m_randstr(const char* value, size_t size);
  inline ::std::string* mutable_m_randstr();
  inline ::std::string* release_m_randstr();
  inline void set_allocated_m_randstr(::std::string* m_randstr);

  // @@protoc_insertion_point(class_scope:GM_ChooseArea)
 private:
  inline void set_has_m_account();
  inline void clear_has_m_account();
  inline void set_has_m_areaid();
  inline void clear_has_m_areaid();
  inline void set_has_m_randstr();
  inline void clear_has_m_randstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_account_;
  ::google::protobuf::int32 m_areaid_;
  ::std::string* m_randstr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_chooseArea_2etxt();
  friend void protobuf_AssignDesc_chooseArea_2etxt();
  friend void protobuf_ShutdownFile_chooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_ChooseArea* default_instance_;
};
// -------------------------------------------------------------------

class GM_ChooseAreaReturn : public ::google::protobuf::Message {
 public:
  GM_ChooseAreaReturn();
  virtual ~GM_ChooseAreaReturn();

  GM_ChooseAreaReturn(const GM_ChooseAreaReturn& from);

  inline GM_ChooseAreaReturn& operator=(const GM_ChooseAreaReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ChooseAreaReturn& default_instance();

  void Swap(GM_ChooseAreaReturn* other);

  // implements Message ----------------------------------------------

  GM_ChooseAreaReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ChooseAreaReturn& from);
  void MergeFrom(const GM_ChooseAreaReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional string m_ServerIP = 2;
  inline bool has_m_serverip() const;
  inline void clear_m_serverip();
  static const int kMServerIPFieldNumber = 2;
  inline const ::std::string& m_serverip() const;
  inline void set_m_serverip(const ::std::string& value);
  inline void set_m_serverip(const char* value);
  inline void set_m_serverip(const char* value, size_t size);
  inline ::std::string* mutable_m_serverip();
  inline ::std::string* release_m_serverip();
  inline void set_allocated_m_serverip(::std::string* m_serverip);

  // optional string m_Password = 3;
  inline bool has_m_password() const;
  inline void clear_m_password();
  static const int kMPasswordFieldNumber = 3;
  inline const ::std::string& m_password() const;
  inline void set_m_password(const ::std::string& value);
  inline void set_m_password(const char* value);
  inline void set_m_password(const char* value, size_t size);
  inline ::std::string* mutable_m_password();
  inline ::std::string* release_m_password();
  inline void set_allocated_m_password(::std::string* m_password);

  // optional int32 m_PortNumber = 4;
  inline bool has_m_portnumber() const;
  inline void clear_m_portnumber();
  static const int kMPortNumberFieldNumber = 4;
  inline ::google::protobuf::int32 m_portnumber() const;
  inline void set_m_portnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ChooseAreaReturn)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_serverip();
  inline void clear_has_m_serverip();
  inline void set_has_m_password();
  inline void clear_has_m_password();
  inline void set_has_m_portnumber();
  inline void clear_has_m_portnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_serverip_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_portnumber_;
  ::std::string* m_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_chooseArea_2etxt();
  friend void protobuf_AssignDesc_chooseArea_2etxt();
  friend void protobuf_ShutdownFile_chooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_ChooseAreaReturn* default_instance_;
};
// -------------------------------------------------------------------

class SM_DBAreaAccount : public ::google::protobuf::Message {
 public:
  SM_DBAreaAccount();
  virtual ~SM_DBAreaAccount();

  SM_DBAreaAccount(const SM_DBAreaAccount& from);

  inline SM_DBAreaAccount& operator=(const SM_DBAreaAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_DBAreaAccount& default_instance();

  void Swap(SM_DBAreaAccount* other);

  // implements Message ----------------------------------------------

  SM_DBAreaAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_DBAreaAccount& from);
  void MergeFrom(const SM_DBAreaAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleCount = 1;
  inline bool has_m_rolecount() const;
  inline void clear_m_rolecount();
  static const int kMRoleCountFieldNumber = 1;
  inline ::google::protobuf::int32 m_rolecount() const;
  inline void set_m_rolecount(::google::protobuf::int32 value);

  // optional int32 serverId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 serverState = 3;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerStateFieldNumber = 3;
  inline ::google::protobuf::int32 serverstate() const;
  inline void set_serverstate(::google::protobuf::int32 value);

  // optional int32 onlinePlayer = 4;
  inline bool has_onlineplayer() const;
  inline void clear_onlineplayer();
  static const int kOnlinePlayerFieldNumber = 4;
  inline ::google::protobuf::int32 onlineplayer() const;
  inline void set_onlineplayer(::google::protobuf::int32 value);

  // optional string useip = 5;
  inline bool has_useip() const;
  inline void clear_useip();
  static const int kUseipFieldNumber = 5;
  inline const ::std::string& useip() const;
  inline void set_useip(const ::std::string& value);
  inline void set_useip(const char* value);
  inline void set_useip(const char* value, size_t size);
  inline ::std::string* mutable_useip();
  inline ::std::string* release_useip();
  inline void set_allocated_useip(::std::string* useip);

  // optional int32 areaId = 6;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 6;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // repeated .SM_DBAreaInfo dbAreaInfo = 7;
  inline int dbareainfo_size() const;
  inline void clear_dbareainfo();
  static const int kDbAreaInfoFieldNumber = 7;
  inline const ::SM_DBAreaInfo& dbareainfo(int index) const;
  inline ::SM_DBAreaInfo* mutable_dbareainfo(int index);
  inline ::SM_DBAreaInfo* add_dbareainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SM_DBAreaInfo >&
      dbareainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SM_DBAreaInfo >*
      mutable_dbareainfo();

  // optional int32 serverFlag = 8;
  inline bool has_serverflag() const;
  inline void clear_serverflag();
  static const int kServerFlagFieldNumber = 8;
  inline ::google::protobuf::int32 serverflag() const;
  inline void set_serverflag(::google::protobuf::int32 value);

  // optional int32 accountId = 9;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 9;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_DBAreaAccount)
 private:
  inline void set_has_m_rolecount();
  inline void clear_has_m_rolecount();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_serverstate();
  inline void clear_has_serverstate();
  inline void set_has_onlineplayer();
  inline void clear_has_onlineplayer();
  inline void set_has_useip();
  inline void clear_has_useip();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_serverflag();
  inline void clear_has_serverflag();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_rolecount_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 serverstate_;
  ::google::protobuf::int32 onlineplayer_;
  ::std::string* useip_;
  ::google::protobuf::RepeatedPtrField< ::SM_DBAreaInfo > dbareainfo_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 serverflag_;
  ::google::protobuf::int32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_chooseArea_2etxt();
  friend void protobuf_AssignDesc_chooseArea_2etxt();
  friend void protobuf_ShutdownFile_chooseArea_2etxt();

  void InitAsDefaultInstance();
  static SM_DBAreaAccount* default_instance_;
};
// -------------------------------------------------------------------

class SM_DBAreaInfo : public ::google::protobuf::Message {
 public:
  SM_DBAreaInfo();
  virtual ~SM_DBAreaInfo();

  SM_DBAreaInfo(const SM_DBAreaInfo& from);

  inline SM_DBAreaInfo& operator=(const SM_DBAreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_DBAreaInfo& default_instance();

  void Swap(SM_DBAreaInfo* other);

  // implements Message ----------------------------------------------

  SM_DBAreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_DBAreaInfo& from);
  void MergeFrom(const SM_DBAreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_roleLevel = 1;
  inline bool has_m_rolelevel() const;
  inline void clear_m_rolelevel();
  static const int kMRoleLevelFieldNumber = 1;
  inline ::google::protobuf::int32 m_rolelevel() const;
  inline void set_m_rolelevel(::google::protobuf::int32 value);

  // required string m_roleName = 3;
  inline bool has_m_rolename() const;
  inline void clear_m_rolename();
  static const int kMRoleNameFieldNumber = 3;
  inline const ::std::string& m_rolename() const;
  inline void set_m_rolename(const ::std::string& value);
  inline void set_m_rolename(const char* value);
  inline void set_m_rolename(const char* value, size_t size);
  inline ::std::string* mutable_m_rolename();
  inline ::std::string* release_m_rolename();
  inline void set_allocated_m_rolename(::std::string* m_rolename);

  // optional int32 m_accountId = 4;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountIdFieldNumber = 4;
  inline ::google::protobuf::int32 m_accountid() const;
  inline void set_m_accountid(::google::protobuf::int32 value);

  // optional int32 m_roleID = 5;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 5;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_areaid = 6;
  inline bool has_m_areaid() const;
  inline void clear_m_areaid();
  static const int kMAreaidFieldNumber = 6;
  inline ::google::protobuf::int32 m_areaid() const;
  inline void set_m_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_DBAreaInfo)
 private:
  inline void set_has_m_rolelevel();
  inline void clear_has_m_rolelevel();
  inline void set_has_m_rolename();
  inline void clear_has_m_rolename();
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_areaid();
  inline void clear_has_m_areaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_rolename_;
  ::google::protobuf::int32 m_rolelevel_;
  ::google::protobuf::int32 m_accountid_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_chooseArea_2etxt();
  friend void protobuf_AssignDesc_chooseArea_2etxt();
  friend void protobuf_ShutdownFile_chooseArea_2etxt();

  void InitAsDefaultInstance();
  static SM_DBAreaInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SD_AreaList

// required int32 m_Count = 1;
inline bool SD_AreaList::has_m_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD_AreaList::set_has_m_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD_AreaList::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD_AreaList::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 SD_AreaList::m_count() const {
  return m_count_;
}
inline void SD_AreaList::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// repeated .SD_Area m_Area = 2;
inline int SD_AreaList::m_area_size() const {
  return m_area_.size();
}
inline void SD_AreaList::clear_m_area() {
  m_area_.Clear();
}
inline const ::SD_Area& SD_AreaList::m_area(int index) const {
  return m_area_.Get(index);
}
inline ::SD_Area* SD_AreaList::mutable_m_area(int index) {
  return m_area_.Mutable(index);
}
inline ::SD_Area* SD_AreaList::add_m_area() {
  return m_area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SD_Area >&
SD_AreaList::m_area() const {
  return m_area_;
}
inline ::google::protobuf::RepeatedPtrField< ::SD_Area >*
SD_AreaList::mutable_m_area() {
  return &m_area_;
}

// -------------------------------------------------------------------

// SD_Area

// required int32 m_id = 1;
inline bool SD_Area::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD_Area::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD_Area::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD_Area::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 SD_Area::m_id() const {
  return m_id_;
}
inline void SD_Area::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// required string m_AreaName = 2;
inline bool SD_Area::has_m_areaname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD_Area::set_has_m_areaname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD_Area::clear_has_m_areaname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD_Area::clear_m_areaname() {
  if (m_areaname_ != &::google::protobuf::internal::kEmptyString) {
    m_areaname_->clear();
  }
  clear_has_m_areaname();
}
inline const ::std::string& SD_Area::m_areaname() const {
  return *m_areaname_;
}
inline void SD_Area::set_m_areaname(const ::std::string& value) {
  set_has_m_areaname();
  if (m_areaname_ == &::google::protobuf::internal::kEmptyString) {
    m_areaname_ = new ::std::string;
  }
  m_areaname_->assign(value);
}
inline void SD_Area::set_m_areaname(const char* value) {
  set_has_m_areaname();
  if (m_areaname_ == &::google::protobuf::internal::kEmptyString) {
    m_areaname_ = new ::std::string;
  }
  m_areaname_->assign(value);
}
inline void SD_Area::set_m_areaname(const char* value, size_t size) {
  set_has_m_areaname();
  if (m_areaname_ == &::google::protobuf::internal::kEmptyString) {
    m_areaname_ = new ::std::string;
  }
  m_areaname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SD_Area::mutable_m_areaname() {
  set_has_m_areaname();
  if (m_areaname_ == &::google::protobuf::internal::kEmptyString) {
    m_areaname_ = new ::std::string;
  }
  return m_areaname_;
}
inline ::std::string* SD_Area::release_m_areaname() {
  clear_has_m_areaname();
  if (m_areaname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_areaname_;
    m_areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SD_Area::set_allocated_m_areaname(::std::string* m_areaname) {
  if (m_areaname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_areaname_;
  }
  if (m_areaname) {
    set_has_m_areaname();
    m_areaname_ = m_areaname;
  } else {
    clear_has_m_areaname();
    m_areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 3;
inline bool SD_Area::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SD_Area::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SD_Area::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SD_Area::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SD_Area::state() const {
  return state_;
}
inline void SD_Area::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 flag = 4;
inline bool SD_Area::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SD_Area::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SD_Area::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SD_Area::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 SD_Area::flag() const {
  return flag_;
}
inline void SD_Area::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// GM_ChooseArea

// required int32 m_Account = 1;
inline bool GM_ChooseArea::has_m_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ChooseArea::set_has_m_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ChooseArea::clear_has_m_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ChooseArea::clear_m_account() {
  m_account_ = 0;
  clear_has_m_account();
}
inline ::google::protobuf::int32 GM_ChooseArea::m_account() const {
  return m_account_;
}
inline void GM_ChooseArea::set_m_account(::google::protobuf::int32 value) {
  set_has_m_account();
  m_account_ = value;
}

// required int32 m_AreaID = 2;
inline bool GM_ChooseArea::has_m_areaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ChooseArea::set_has_m_areaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ChooseArea::clear_has_m_areaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ChooseArea::clear_m_areaid() {
  m_areaid_ = 0;
  clear_has_m_areaid();
}
inline ::google::protobuf::int32 GM_ChooseArea::m_areaid() const {
  return m_areaid_;
}
inline void GM_ChooseArea::set_m_areaid(::google::protobuf::int32 value) {
  set_has_m_areaid();
  m_areaid_ = value;
}

// required string m_RandStr = 3;
inline bool GM_ChooseArea::has_m_randstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ChooseArea::set_has_m_randstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ChooseArea::clear_has_m_randstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ChooseArea::clear_m_randstr() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    m_randstr_->clear();
  }
  clear_has_m_randstr();
}
inline const ::std::string& GM_ChooseArea::m_randstr() const {
  return *m_randstr_;
}
inline void GM_ChooseArea::set_m_randstr(const ::std::string& value) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(value);
}
inline void GM_ChooseArea::set_m_randstr(const char* value) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(value);
}
inline void GM_ChooseArea::set_m_randstr(const char* value, size_t size) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChooseArea::mutable_m_randstr() {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  return m_randstr_;
}
inline ::std::string* GM_ChooseArea::release_m_randstr() {
  clear_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_randstr_;
    m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChooseArea::set_allocated_m_randstr(::std::string* m_randstr) {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (m_randstr) {
    set_has_m_randstr();
    m_randstr_ = m_randstr;
  } else {
    clear_has_m_randstr();
    m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_ChooseAreaReturn

// required int32 m_Result = 1;
inline bool GM_ChooseAreaReturn::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ChooseAreaReturn::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ChooseAreaReturn::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ChooseAreaReturn::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_ChooseAreaReturn::m_result() const {
  return m_result_;
}
inline void GM_ChooseAreaReturn::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional string m_ServerIP = 2;
inline bool GM_ChooseAreaReturn::has_m_serverip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ChooseAreaReturn::set_has_m_serverip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ChooseAreaReturn::clear_has_m_serverip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ChooseAreaReturn::clear_m_serverip() {
  if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
    m_serverip_->clear();
  }
  clear_has_m_serverip();
}
inline const ::std::string& GM_ChooseAreaReturn::m_serverip() const {
  return *m_serverip_;
}
inline void GM_ChooseAreaReturn::set_m_serverip(const ::std::string& value) {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  m_serverip_->assign(value);
}
inline void GM_ChooseAreaReturn::set_m_serverip(const char* value) {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  m_serverip_->assign(value);
}
inline void GM_ChooseAreaReturn::set_m_serverip(const char* value, size_t size) {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  m_serverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChooseAreaReturn::mutable_m_serverip() {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  return m_serverip_;
}
inline ::std::string* GM_ChooseAreaReturn::release_m_serverip() {
  clear_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_serverip_;
    m_serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChooseAreaReturn::set_allocated_m_serverip(::std::string* m_serverip) {
  if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_serverip_;
  }
  if (m_serverip) {
    set_has_m_serverip();
    m_serverip_ = m_serverip;
  } else {
    clear_has_m_serverip();
    m_serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_Password = 3;
inline bool GM_ChooseAreaReturn::has_m_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ChooseAreaReturn::set_has_m_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ChooseAreaReturn::clear_has_m_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ChooseAreaReturn::clear_m_password() {
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    m_password_->clear();
  }
  clear_has_m_password();
}
inline const ::std::string& GM_ChooseAreaReturn::m_password() const {
  return *m_password_;
}
inline void GM_ChooseAreaReturn::set_m_password(const ::std::string& value) {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  m_password_->assign(value);
}
inline void GM_ChooseAreaReturn::set_m_password(const char* value) {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  m_password_->assign(value);
}
inline void GM_ChooseAreaReturn::set_m_password(const char* value, size_t size) {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  m_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChooseAreaReturn::mutable_m_password() {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  return m_password_;
}
inline ::std::string* GM_ChooseAreaReturn::release_m_password() {
  clear_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_password_;
    m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChooseAreaReturn::set_allocated_m_password(::std::string* m_password) {
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (m_password) {
    set_has_m_password();
    m_password_ = m_password;
  } else {
    clear_has_m_password();
    m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_PortNumber = 4;
inline bool GM_ChooseAreaReturn::has_m_portnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_ChooseAreaReturn::set_has_m_portnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_ChooseAreaReturn::clear_has_m_portnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_ChooseAreaReturn::clear_m_portnumber() {
  m_portnumber_ = 0;
  clear_has_m_portnumber();
}
inline ::google::protobuf::int32 GM_ChooseAreaReturn::m_portnumber() const {
  return m_portnumber_;
}
inline void GM_ChooseAreaReturn::set_m_portnumber(::google::protobuf::int32 value) {
  set_has_m_portnumber();
  m_portnumber_ = value;
}

// -------------------------------------------------------------------

// SM_DBAreaAccount

// required int32 m_roleCount = 1;
inline bool SM_DBAreaAccount::has_m_rolecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_DBAreaAccount::set_has_m_rolecount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_DBAreaAccount::clear_has_m_rolecount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_DBAreaAccount::clear_m_rolecount() {
  m_rolecount_ = 0;
  clear_has_m_rolecount();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::m_rolecount() const {
  return m_rolecount_;
}
inline void SM_DBAreaAccount::set_m_rolecount(::google::protobuf::int32 value) {
  set_has_m_rolecount();
  m_rolecount_ = value;
}

// optional int32 serverId = 2;
inline bool SM_DBAreaAccount::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_DBAreaAccount::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_DBAreaAccount::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_DBAreaAccount::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::serverid() const {
  return serverid_;
}
inline void SM_DBAreaAccount::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 serverState = 3;
inline bool SM_DBAreaAccount::has_serverstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_DBAreaAccount::set_has_serverstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_DBAreaAccount::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_DBAreaAccount::clear_serverstate() {
  serverstate_ = 0;
  clear_has_serverstate();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::serverstate() const {
  return serverstate_;
}
inline void SM_DBAreaAccount::set_serverstate(::google::protobuf::int32 value) {
  set_has_serverstate();
  serverstate_ = value;
}

// optional int32 onlinePlayer = 4;
inline bool SM_DBAreaAccount::has_onlineplayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_DBAreaAccount::set_has_onlineplayer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_DBAreaAccount::clear_has_onlineplayer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_DBAreaAccount::clear_onlineplayer() {
  onlineplayer_ = 0;
  clear_has_onlineplayer();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::onlineplayer() const {
  return onlineplayer_;
}
inline void SM_DBAreaAccount::set_onlineplayer(::google::protobuf::int32 value) {
  set_has_onlineplayer();
  onlineplayer_ = value;
}

// optional string useip = 5;
inline bool SM_DBAreaAccount::has_useip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_DBAreaAccount::set_has_useip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_DBAreaAccount::clear_has_useip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_DBAreaAccount::clear_useip() {
  if (useip_ != &::google::protobuf::internal::kEmptyString) {
    useip_->clear();
  }
  clear_has_useip();
}
inline const ::std::string& SM_DBAreaAccount::useip() const {
  return *useip_;
}
inline void SM_DBAreaAccount::set_useip(const ::std::string& value) {
  set_has_useip();
  if (useip_ == &::google::protobuf::internal::kEmptyString) {
    useip_ = new ::std::string;
  }
  useip_->assign(value);
}
inline void SM_DBAreaAccount::set_useip(const char* value) {
  set_has_useip();
  if (useip_ == &::google::protobuf::internal::kEmptyString) {
    useip_ = new ::std::string;
  }
  useip_->assign(value);
}
inline void SM_DBAreaAccount::set_useip(const char* value, size_t size) {
  set_has_useip();
  if (useip_ == &::google::protobuf::internal::kEmptyString) {
    useip_ = new ::std::string;
  }
  useip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_DBAreaAccount::mutable_useip() {
  set_has_useip();
  if (useip_ == &::google::protobuf::internal::kEmptyString) {
    useip_ = new ::std::string;
  }
  return useip_;
}
inline ::std::string* SM_DBAreaAccount::release_useip() {
  clear_has_useip();
  if (useip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useip_;
    useip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_DBAreaAccount::set_allocated_useip(::std::string* useip) {
  if (useip_ != &::google::protobuf::internal::kEmptyString) {
    delete useip_;
  }
  if (useip) {
    set_has_useip();
    useip_ = useip;
  } else {
    clear_has_useip();
    useip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 areaId = 6;
inline bool SM_DBAreaAccount::has_areaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SM_DBAreaAccount::set_has_areaid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SM_DBAreaAccount::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SM_DBAreaAccount::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::areaid() const {
  return areaid_;
}
inline void SM_DBAreaAccount::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
}

// repeated .SM_DBAreaInfo dbAreaInfo = 7;
inline int SM_DBAreaAccount::dbareainfo_size() const {
  return dbareainfo_.size();
}
inline void SM_DBAreaAccount::clear_dbareainfo() {
  dbareainfo_.Clear();
}
inline const ::SM_DBAreaInfo& SM_DBAreaAccount::dbareainfo(int index) const {
  return dbareainfo_.Get(index);
}
inline ::SM_DBAreaInfo* SM_DBAreaAccount::mutable_dbareainfo(int index) {
  return dbareainfo_.Mutable(index);
}
inline ::SM_DBAreaInfo* SM_DBAreaAccount::add_dbareainfo() {
  return dbareainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SM_DBAreaInfo >&
SM_DBAreaAccount::dbareainfo() const {
  return dbareainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SM_DBAreaInfo >*
SM_DBAreaAccount::mutable_dbareainfo() {
  return &dbareainfo_;
}

// optional int32 serverFlag = 8;
inline bool SM_DBAreaAccount::has_serverflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SM_DBAreaAccount::set_has_serverflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SM_DBAreaAccount::clear_has_serverflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SM_DBAreaAccount::clear_serverflag() {
  serverflag_ = 0;
  clear_has_serverflag();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::serverflag() const {
  return serverflag_;
}
inline void SM_DBAreaAccount::set_serverflag(::google::protobuf::int32 value) {
  set_has_serverflag();
  serverflag_ = value;
}

// optional int32 accountId = 9;
inline bool SM_DBAreaAccount::has_accountid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SM_DBAreaAccount::set_has_accountid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SM_DBAreaAccount::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SM_DBAreaAccount::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 SM_DBAreaAccount::accountid() const {
  return accountid_;
}
inline void SM_DBAreaAccount::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// SM_DBAreaInfo

// required int32 m_roleLevel = 1;
inline bool SM_DBAreaInfo::has_m_rolelevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_DBAreaInfo::set_has_m_rolelevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_DBAreaInfo::clear_has_m_rolelevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_DBAreaInfo::clear_m_rolelevel() {
  m_rolelevel_ = 0;
  clear_has_m_rolelevel();
}
inline ::google::protobuf::int32 SM_DBAreaInfo::m_rolelevel() const {
  return m_rolelevel_;
}
inline void SM_DBAreaInfo::set_m_rolelevel(::google::protobuf::int32 value) {
  set_has_m_rolelevel();
  m_rolelevel_ = value;
}

// required string m_roleName = 3;
inline bool SM_DBAreaInfo::has_m_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_DBAreaInfo::set_has_m_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_DBAreaInfo::clear_has_m_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_DBAreaInfo::clear_m_rolename() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    m_rolename_->clear();
  }
  clear_has_m_rolename();
}
inline const ::std::string& SM_DBAreaInfo::m_rolename() const {
  return *m_rolename_;
}
inline void SM_DBAreaInfo::set_m_rolename(const ::std::string& value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void SM_DBAreaInfo::set_m_rolename(const char* value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void SM_DBAreaInfo::set_m_rolename(const char* value, size_t size) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SM_DBAreaInfo::mutable_m_rolename() {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  return m_rolename_;
}
inline ::std::string* SM_DBAreaInfo::release_m_rolename() {
  clear_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rolename_;
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SM_DBAreaInfo::set_allocated_m_rolename(::std::string* m_rolename) {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_rolename) {
    set_has_m_rolename();
    m_rolename_ = m_rolename;
  } else {
    clear_has_m_rolename();
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_accountId = 4;
inline bool SM_DBAreaInfo::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SM_DBAreaInfo::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SM_DBAreaInfo::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SM_DBAreaInfo::clear_m_accountid() {
  m_accountid_ = 0;
  clear_has_m_accountid();
}
inline ::google::protobuf::int32 SM_DBAreaInfo::m_accountid() const {
  return m_accountid_;
}
inline void SM_DBAreaInfo::set_m_accountid(::google::protobuf::int32 value) {
  set_has_m_accountid();
  m_accountid_ = value;
}

// optional int32 m_roleID = 5;
inline bool SM_DBAreaInfo::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SM_DBAreaInfo::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SM_DBAreaInfo::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SM_DBAreaInfo::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 SM_DBAreaInfo::m_roleid() const {
  return m_roleid_;
}
inline void SM_DBAreaInfo::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_areaid = 6;
inline bool SM_DBAreaInfo::has_m_areaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SM_DBAreaInfo::set_has_m_areaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SM_DBAreaInfo::clear_has_m_areaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SM_DBAreaInfo::clear_m_areaid() {
  m_areaid_ = 0;
  clear_has_m_areaid();
}
inline ::google::protobuf::int32 SM_DBAreaInfo::m_areaid() const {
  return m_areaid_;
}
inline void SM_DBAreaInfo::set_m_areaid(::google::protobuf::int32 value) {
  set_has_m_areaid();
  m_areaid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_chooseArea_2etxt__INCLUDED
