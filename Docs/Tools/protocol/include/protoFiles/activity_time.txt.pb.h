// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity_time.txt

#ifndef PROTOBUF_activity_5ftime_2etxt__INCLUDED
#define PROTOBUF_activity_5ftime_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_activity_5ftime_2etxt();
void protobuf_AssignDesc_activity_5ftime_2etxt();
void protobuf_ShutdownFile_activity_5ftime_2etxt();

class GM_ActivityDataList;
class GM_ActivityData;
class GM_TimeLimit;

// ===================================================================

class GM_ActivityDataList : public ::google::protobuf::Message {
 public:
  GM_ActivityDataList();
  virtual ~GM_ActivityDataList();

  GM_ActivityDataList(const GM_ActivityDataList& from);

  inline GM_ActivityDataList& operator=(const GM_ActivityDataList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ActivityDataList& default_instance();

  void Swap(GM_ActivityDataList* other);

  // implements Message ----------------------------------------------

  GM_ActivityDataList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ActivityDataList& from);
  void MergeFrom(const GM_ActivityDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_ActivityData data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GM_ActivityData& data(int index) const;
  inline ::GM_ActivityData* mutable_data(int index);
  inline ::GM_ActivityData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_ActivityData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_ActivityData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:GM_ActivityDataList)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_ActivityData > data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_activity_5ftime_2etxt();
  friend void protobuf_AssignDesc_activity_5ftime_2etxt();
  friend void protobuf_ShutdownFile_activity_5ftime_2etxt();

  void InitAsDefaultInstance();
  static GM_ActivityDataList* default_instance_;
};
// -------------------------------------------------------------------

class GM_ActivityData : public ::google::protobuf::Message {
 public:
  GM_ActivityData();
  virtual ~GM_ActivityData();

  GM_ActivityData(const GM_ActivityData& from);

  inline GM_ActivityData& operator=(const GM_ActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ActivityData& default_instance();

  void Swap(GM_ActivityData* other);

  // implements Message ----------------------------------------------

  GM_ActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ActivityData& from);
  void MergeFrom(const GM_ActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 activityid = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityidFieldNumber = 1;
  inline ::google::protobuf::int32 activityid() const;
  inline void set_activityid(::google::protobuf::int32 value);

  // required string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 isactivity = 2;
  inline bool has_isactivity() const;
  inline void clear_isactivity();
  static const int kIsactivityFieldNumber = 2;
  inline ::google::protobuf::int32 isactivity() const;
  inline void set_isactivity(::google::protobuf::int32 value);

  // required int32 activity_type = 3;
  inline bool has_activity_type() const;
  inline void clear_activity_type();
  static const int kActivityTypeFieldNumber = 3;
  inline ::google::protobuf::int32 activity_type() const;
  inline void set_activity_type(::google::protobuf::int32 value);

  // required string strtime = 10;
  inline bool has_strtime() const;
  inline void clear_strtime();
  static const int kStrtimeFieldNumber = 10;
  inline const ::std::string& strtime() const;
  inline void set_strtime(const ::std::string& value);
  inline void set_strtime(const char* value);
  inline void set_strtime(const char* value, size_t size);
  inline ::std::string* mutable_strtime();
  inline ::std::string* release_strtime();
  inline void set_allocated_strtime(::std::string* strtime);

  // required int32 isEver = 11;
  inline bool has_isever() const;
  inline void clear_isever();
  static const int kIsEverFieldNumber = 11;
  inline ::google::protobuf::int32 isever() const;
  inline void set_isever(::google::protobuf::int32 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string rules = 5;
  inline bool has_rules() const;
  inline void clear_rules();
  static const int kRulesFieldNumber = 5;
  inline const ::std::string& rules() const;
  inline void set_rules(const ::std::string& value);
  inline void set_rules(const char* value);
  inline void set_rules(const char* value, size_t size);
  inline ::std::string* mutable_rules();
  inline ::std::string* release_rules();
  inline void set_allocated_rules(::std::string* rules);

  // required string describe = 6;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 6;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // required int32 times = 7;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 7;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // required int32 jointimes = 8;
  inline bool has_jointimes() const;
  inline void clear_jointimes();
  static const int kJointimesFieldNumber = 8;
  inline ::google::protobuf::int32 jointimes() const;
  inline void set_jointimes(::google::protobuf::int32 value);

  // required int32 buttontype = 13;
  inline bool has_buttontype() const;
  inline void clear_buttontype();
  static const int kButtontypeFieldNumber = 13;
  inline ::google::protobuf::int32 buttontype() const;
  inline void set_buttontype(::google::protobuf::int32 value);

  // repeated .GM_TimeLimit timelist = 12;
  inline int timelist_size() const;
  inline void clear_timelist();
  static const int kTimelistFieldNumber = 12;
  inline const ::GM_TimeLimit& timelist(int index) const;
  inline ::GM_TimeLimit* mutable_timelist(int index);
  inline ::GM_TimeLimit* add_timelist();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_TimeLimit >&
      timelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_TimeLimit >*
      mutable_timelist();

  // optional bool isadd = 14;
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsaddFieldNumber = 14;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // optional int32 addtimes = 15;
  inline bool has_addtimes() const;
  inline void clear_addtimes();
  static const int kAddtimesFieldNumber = 15;
  inline ::google::protobuf::int32 addtimes() const;
  inline void set_addtimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_ActivityData)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_isactivity();
  inline void clear_has_isactivity();
  inline void set_has_activity_type();
  inline void clear_has_activity_type();
  inline void set_has_strtime();
  inline void clear_has_strtime();
  inline void set_has_isever();
  inline void clear_has_isever();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rules();
  inline void clear_has_rules();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_jointimes();
  inline void clear_has_jointimes();
  inline void set_has_buttontype();
  inline void clear_has_buttontype();
  inline void set_has_isadd();
  inline void clear_has_isadd();
  inline void set_has_addtimes();
  inline void clear_has_addtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 activityid_;
  ::google::protobuf::int32 isactivity_;
  ::std::string* strtime_;
  ::google::protobuf::int32 activity_type_;
  ::google::protobuf::int32 isever_;
  ::std::string* rules_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 times_;
  ::std::string* describe_;
  ::google::protobuf::int32 jointimes_;
  ::google::protobuf::int32 buttontype_;
  ::google::protobuf::RepeatedPtrField< ::GM_TimeLimit > timelist_;
  bool isadd_;
  ::google::protobuf::int32 addtimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_activity_5ftime_2etxt();
  friend void protobuf_AssignDesc_activity_5ftime_2etxt();
  friend void protobuf_ShutdownFile_activity_5ftime_2etxt();

  void InitAsDefaultInstance();
  static GM_ActivityData* default_instance_;
};
// -------------------------------------------------------------------

class GM_TimeLimit : public ::google::protobuf::Message {
 public:
  GM_TimeLimit();
  virtual ~GM_TimeLimit();

  GM_TimeLimit(const GM_TimeLimit& from);

  inline GM_TimeLimit& operator=(const GM_TimeLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_TimeLimit& default_instance();

  void Swap(GM_TimeLimit* other);

  // implements Message ----------------------------------------------

  GM_TimeLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_TimeLimit& from);
  void MergeFrom(const GM_TimeLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 starttime = 1;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 1;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // required int32 endtime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 2;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_TimeLimit)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_activity_5ftime_2etxt();
  friend void protobuf_AssignDesc_activity_5ftime_2etxt();
  friend void protobuf_ShutdownFile_activity_5ftime_2etxt();

  void InitAsDefaultInstance();
  static GM_TimeLimit* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_ActivityDataList

// required int32 count = 1;
inline bool GM_ActivityDataList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ActivityDataList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ActivityDataList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ActivityDataList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_ActivityDataList::count() const {
  return count_;
}
inline void GM_ActivityDataList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_ActivityData data = 2;
inline int GM_ActivityDataList::data_size() const {
  return data_.size();
}
inline void GM_ActivityDataList::clear_data() {
  data_.Clear();
}
inline const ::GM_ActivityData& GM_ActivityDataList::data(int index) const {
  return data_.Get(index);
}
inline ::GM_ActivityData* GM_ActivityDataList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GM_ActivityData* GM_ActivityDataList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_ActivityData >&
GM_ActivityDataList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_ActivityData >*
GM_ActivityDataList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GM_ActivityData

// required int32 activityid = 1;
inline bool GM_ActivityData::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ActivityData::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ActivityData::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ActivityData::clear_activityid() {
  activityid_ = 0;
  clear_has_activityid();
}
inline ::google::protobuf::int32 GM_ActivityData::activityid() const {
  return activityid_;
}
inline void GM_ActivityData::set_activityid(::google::protobuf::int32 value) {
  set_has_activityid();
  activityid_ = value;
}

// required string name = 9;
inline bool GM_ActivityData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ActivityData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ActivityData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ActivityData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GM_ActivityData::name() const {
  return *name_;
}
inline void GM_ActivityData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_ActivityData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GM_ActivityData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ActivityData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GM_ActivityData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ActivityData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 isactivity = 2;
inline bool GM_ActivityData::has_isactivity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ActivityData::set_has_isactivity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ActivityData::clear_has_isactivity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ActivityData::clear_isactivity() {
  isactivity_ = 0;
  clear_has_isactivity();
}
inline ::google::protobuf::int32 GM_ActivityData::isactivity() const {
  return isactivity_;
}
inline void GM_ActivityData::set_isactivity(::google::protobuf::int32 value) {
  set_has_isactivity();
  isactivity_ = value;
}

// required int32 activity_type = 3;
inline bool GM_ActivityData::has_activity_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_ActivityData::set_has_activity_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_ActivityData::clear_has_activity_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_ActivityData::clear_activity_type() {
  activity_type_ = 0;
  clear_has_activity_type();
}
inline ::google::protobuf::int32 GM_ActivityData::activity_type() const {
  return activity_type_;
}
inline void GM_ActivityData::set_activity_type(::google::protobuf::int32 value) {
  set_has_activity_type();
  activity_type_ = value;
}

// required string strtime = 10;
inline bool GM_ActivityData::has_strtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_ActivityData::set_has_strtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_ActivityData::clear_has_strtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_ActivityData::clear_strtime() {
  if (strtime_ != &::google::protobuf::internal::kEmptyString) {
    strtime_->clear();
  }
  clear_has_strtime();
}
inline const ::std::string& GM_ActivityData::strtime() const {
  return *strtime_;
}
inline void GM_ActivityData::set_strtime(const ::std::string& value) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::kEmptyString) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(value);
}
inline void GM_ActivityData::set_strtime(const char* value) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::kEmptyString) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(value);
}
inline void GM_ActivityData::set_strtime(const char* value, size_t size) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::kEmptyString) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ActivityData::mutable_strtime() {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::kEmptyString) {
    strtime_ = new ::std::string;
  }
  return strtime_;
}
inline ::std::string* GM_ActivityData::release_strtime() {
  clear_has_strtime();
  if (strtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strtime_;
    strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ActivityData::set_allocated_strtime(::std::string* strtime) {
  if (strtime_ != &::google::protobuf::internal::kEmptyString) {
    delete strtime_;
  }
  if (strtime) {
    set_has_strtime();
    strtime_ = strtime;
  } else {
    clear_has_strtime();
    strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 isEver = 11;
inline bool GM_ActivityData::has_isever() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_ActivityData::set_has_isever() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_ActivityData::clear_has_isever() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_ActivityData::clear_isever() {
  isever_ = 0;
  clear_has_isever();
}
inline ::google::protobuf::int32 GM_ActivityData::isever() const {
  return isever_;
}
inline void GM_ActivityData::set_isever(::google::protobuf::int32 value) {
  set_has_isever();
  isever_ = value;
}

// required int32 level = 4;
inline bool GM_ActivityData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_ActivityData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_ActivityData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_ActivityData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GM_ActivityData::level() const {
  return level_;
}
inline void GM_ActivityData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string rules = 5;
inline bool GM_ActivityData::has_rules() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_ActivityData::set_has_rules() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_ActivityData::clear_has_rules() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_ActivityData::clear_rules() {
  if (rules_ != &::google::protobuf::internal::kEmptyString) {
    rules_->clear();
  }
  clear_has_rules();
}
inline const ::std::string& GM_ActivityData::rules() const {
  return *rules_;
}
inline void GM_ActivityData::set_rules(const ::std::string& value) {
  set_has_rules();
  if (rules_ == &::google::protobuf::internal::kEmptyString) {
    rules_ = new ::std::string;
  }
  rules_->assign(value);
}
inline void GM_ActivityData::set_rules(const char* value) {
  set_has_rules();
  if (rules_ == &::google::protobuf::internal::kEmptyString) {
    rules_ = new ::std::string;
  }
  rules_->assign(value);
}
inline void GM_ActivityData::set_rules(const char* value, size_t size) {
  set_has_rules();
  if (rules_ == &::google::protobuf::internal::kEmptyString) {
    rules_ = new ::std::string;
  }
  rules_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ActivityData::mutable_rules() {
  set_has_rules();
  if (rules_ == &::google::protobuf::internal::kEmptyString) {
    rules_ = new ::std::string;
  }
  return rules_;
}
inline ::std::string* GM_ActivityData::release_rules() {
  clear_has_rules();
  if (rules_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rules_;
    rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ActivityData::set_allocated_rules(::std::string* rules) {
  if (rules_ != &::google::protobuf::internal::kEmptyString) {
    delete rules_;
  }
  if (rules) {
    set_has_rules();
    rules_ = rules;
  } else {
    clear_has_rules();
    rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string describe = 6;
inline bool GM_ActivityData::has_describe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_ActivityData::set_has_describe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_ActivityData::clear_has_describe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_ActivityData::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& GM_ActivityData::describe() const {
  return *describe_;
}
inline void GM_ActivityData::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void GM_ActivityData::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void GM_ActivityData::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ActivityData::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* GM_ActivityData::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ActivityData::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 times = 7;
inline bool GM_ActivityData::has_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_ActivityData::set_has_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_ActivityData::clear_has_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_ActivityData::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 GM_ActivityData::times() const {
  return times_;
}
inline void GM_ActivityData::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// required int32 jointimes = 8;
inline bool GM_ActivityData::has_jointimes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_ActivityData::set_has_jointimes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_ActivityData::clear_has_jointimes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_ActivityData::clear_jointimes() {
  jointimes_ = 0;
  clear_has_jointimes();
}
inline ::google::protobuf::int32 GM_ActivityData::jointimes() const {
  return jointimes_;
}
inline void GM_ActivityData::set_jointimes(::google::protobuf::int32 value) {
  set_has_jointimes();
  jointimes_ = value;
}

// required int32 buttontype = 13;
inline bool GM_ActivityData::has_buttontype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_ActivityData::set_has_buttontype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_ActivityData::clear_has_buttontype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_ActivityData::clear_buttontype() {
  buttontype_ = 0;
  clear_has_buttontype();
}
inline ::google::protobuf::int32 GM_ActivityData::buttontype() const {
  return buttontype_;
}
inline void GM_ActivityData::set_buttontype(::google::protobuf::int32 value) {
  set_has_buttontype();
  buttontype_ = value;
}

// repeated .GM_TimeLimit timelist = 12;
inline int GM_ActivityData::timelist_size() const {
  return timelist_.size();
}
inline void GM_ActivityData::clear_timelist() {
  timelist_.Clear();
}
inline const ::GM_TimeLimit& GM_ActivityData::timelist(int index) const {
  return timelist_.Get(index);
}
inline ::GM_TimeLimit* GM_ActivityData::mutable_timelist(int index) {
  return timelist_.Mutable(index);
}
inline ::GM_TimeLimit* GM_ActivityData::add_timelist() {
  return timelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_TimeLimit >&
GM_ActivityData::timelist() const {
  return timelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_TimeLimit >*
GM_ActivityData::mutable_timelist() {
  return &timelist_;
}

// optional bool isadd = 14;
inline bool GM_ActivityData::has_isadd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GM_ActivityData::set_has_isadd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GM_ActivityData::clear_has_isadd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GM_ActivityData::clear_isadd() {
  isadd_ = false;
  clear_has_isadd();
}
inline bool GM_ActivityData::isadd() const {
  return isadd_;
}
inline void GM_ActivityData::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
}

// optional int32 addtimes = 15;
inline bool GM_ActivityData::has_addtimes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GM_ActivityData::set_has_addtimes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GM_ActivityData::clear_has_addtimes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GM_ActivityData::clear_addtimes() {
  addtimes_ = 0;
  clear_has_addtimes();
}
inline ::google::protobuf::int32 GM_ActivityData::addtimes() const {
  return addtimes_;
}
inline void GM_ActivityData::set_addtimes(::google::protobuf::int32 value) {
  set_has_addtimes();
  addtimes_ = value;
}

// -------------------------------------------------------------------

// GM_TimeLimit

// required int32 starttime = 1;
inline bool GM_TimeLimit::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_TimeLimit::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_TimeLimit::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_TimeLimit::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 GM_TimeLimit::starttime() const {
  return starttime_;
}
inline void GM_TimeLimit::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// required int32 endtime = 2;
inline bool GM_TimeLimit::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_TimeLimit::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_TimeLimit::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_TimeLimit::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 GM_TimeLimit::endtime() const {
  return endtime_;
}
inline void GM_TimeLimit::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_activity_5ftime_2etxt__INCLUDED
