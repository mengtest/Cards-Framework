// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concentrictree.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "concentrictree.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMConTreeDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMConTreeDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMConTreeObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMConTreeObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMConTreeGetReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMConTreeGetReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMConTreeIrrigateReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMConTreeIrrigateReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMConTreeDivorceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMConTreeDivorceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMConTreeDivorceReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMConTreeDivorceReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAgreeDivorceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAgreeDivorceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMMarryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMarryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMNotifyTargetMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMNotifyTargetMarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAgreeMarryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAgreeMarryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMMarryReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMarryReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MarryRankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MarryRankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MarryRankListReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MarryRankListReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_MarryRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_MarryRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_OrderCalendar_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_OrderCalendar_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCalendarItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCalendarItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Order_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Order_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Order_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Order_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_WeddingCalendar_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_WeddingCalendar_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingCalendarItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingCalendarItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_concentrictree_2etxt() {
  protobuf_AddDesc_concentrictree_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "concentrictree.txt");
  GOOGLE_CHECK(file != NULL);
  GMConTreeDataReturn_descriptor_ = file->message_type(0);
  static const int GMConTreeDataReturn_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, ismarry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, treeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, treelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, treeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, companionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, iscanget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, matnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, leftdivorcetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, companionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, isdivorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, bedivorced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, isorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, iscanjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, compprofession_),
  };
  GMConTreeDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMConTreeDataReturn_descriptor_,
      GMConTreeDataReturn::default_instance_,
      GMConTreeDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMConTreeDataReturn));
  GMConTreeObj_descriptor_ = file->message_type(1);
  static const int GMConTreeObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeObj, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeObj, objectnum_),
  };
  GMConTreeObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMConTreeObj_descriptor_,
      GMConTreeObj::default_instance_,
      GMConTreeObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMConTreeObj));
  GMConTreeGetReturn_descriptor_ = file->message_type(2);
  static const int GMConTreeGetReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeGetReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeGetReturn, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeGetReturn, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeGetReturn, getgold_),
  };
  GMConTreeGetReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMConTreeGetReturn_descriptor_,
      GMConTreeGetReturn::default_instance_,
      GMConTreeGetReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeGetReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeGetReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMConTreeGetReturn));
  GMConTreeIrrigateReturn_descriptor_ = file->message_type(3);
  static const int GMConTreeIrrigateReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeIrrigateReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeIrrigateReturn, treelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeIrrigateReturn, treeexp_),
  };
  GMConTreeIrrigateReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMConTreeIrrigateReturn_descriptor_,
      GMConTreeIrrigateReturn::default_instance_,
      GMConTreeIrrigateReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeIrrigateReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeIrrigateReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMConTreeIrrigateReturn));
  GMConTreeDivorceRequest_descriptor_ = file->message_type(4);
  static const int GMConTreeDivorceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceRequest, companionid_),
  };
  GMConTreeDivorceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMConTreeDivorceRequest_descriptor_,
      GMConTreeDivorceRequest::default_instance_,
      GMConTreeDivorceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMConTreeDivorceRequest));
  GMConTreeDivorceReturn_descriptor_ = file->message_type(5);
  static const int GMConTreeDivorceReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceReturn, result_),
  };
  GMConTreeDivorceReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMConTreeDivorceReturn_descriptor_,
      GMConTreeDivorceReturn::default_instance_,
      GMConTreeDivorceReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMConTreeDivorceReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMConTreeDivorceReturn));
  GMAgreeDivorceRequest_descriptor_ = file->message_type(6);
  static const int GMAgreeDivorceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeDivorceRequest, isagree_),
  };
  GMAgreeDivorceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAgreeDivorceRequest_descriptor_,
      GMAgreeDivorceRequest::default_instance_,
      GMAgreeDivorceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeDivorceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeDivorceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAgreeDivorceRequest));
  GMMarryRequest_descriptor_ = file->message_type(7);
  static const int GMMarryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryRequest, companionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryRequest, type_),
  };
  GMMarryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMarryRequest_descriptor_,
      GMMarryRequest::default_instance_,
      GMMarryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMarryRequest));
  GMNotifyTargetMarry_descriptor_ = file->message_type(8);
  static const int GMNotifyTargetMarry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMNotifyTargetMarry, companionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMNotifyTargetMarry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMNotifyTargetMarry, type_),
  };
  GMNotifyTargetMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMNotifyTargetMarry_descriptor_,
      GMNotifyTargetMarry::default_instance_,
      GMNotifyTargetMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMNotifyTargetMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMNotifyTargetMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMNotifyTargetMarry));
  GMAgreeMarryRequest_descriptor_ = file->message_type(9);
  static const int GMAgreeMarryRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeMarryRequest, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeMarryRequest, companionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeMarryRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeMarryRequest, type_),
  };
  GMAgreeMarryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAgreeMarryRequest_descriptor_,
      GMAgreeMarryRequest::default_instance_,
      GMAgreeMarryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeMarryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAgreeMarryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAgreeMarryRequest));
  GMMarryReturn_descriptor_ = file->message_type(10);
  static const int GMMarryReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryReturn, marryresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryReturn, name_),
  };
  GMMarryReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMarryReturn_descriptor_,
      GMMarryReturn::default_instance_,
      GMMarryReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMarryReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMarryReturn));
  GM_MarryRankRequest_descriptor_ = file->message_type(11);
  static const int GM_MarryRankRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankRequest, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankRequest, m_pagenum_),
  };
  GM_MarryRankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MarryRankRequest_descriptor_,
      GM_MarryRankRequest::default_instance_,
      GM_MarryRankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MarryRankRequest));
  GM_MarryRankListReturn_descriptor_ = file->message_type(12);
  static const int GM_MarryRankListReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankListReturn, m_myplace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankListReturn, m_rankinfo_),
  };
  GM_MarryRankListReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MarryRankListReturn_descriptor_,
      GM_MarryRankListReturn::default_instance_,
      GM_MarryRankListReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankListReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankListReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MarryRankListReturn));
  GM_MarryRankInfo_descriptor_ = file->message_type(13);
  static const int GM_MarryRankInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_otherrolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_otherprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_othergangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, tree_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, m_otherroleid_),
  };
  GM_MarryRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_MarryRankInfo_descriptor_,
      GM_MarryRankInfo::default_instance_,
      GM_MarryRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_MarryRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_MarryRankInfo));
  GM_OrderCalendar_Return_descriptor_ = file->message_type(14);
  static const int GM_OrderCalendar_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OrderCalendar_Return, marrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OrderCalendar_Return, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OrderCalendar_Return, coldtime_),
  };
  GM_OrderCalendar_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_OrderCalendar_Return_descriptor_,
      GM_OrderCalendar_Return::default_instance_,
      GM_OrderCalendar_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OrderCalendar_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_OrderCalendar_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_OrderCalendar_Return));
  OrderCalendarItem_descriptor_ = file->message_type(15);
  static const int OrderCalendarItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCalendarItem, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCalendarItem, isafternoon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCalendarItem, isnight_),
  };
  OrderCalendarItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCalendarItem_descriptor_,
      OrderCalendarItem::default_instance_,
      OrderCalendarItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCalendarItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCalendarItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCalendarItem));
  GM_Order_Request_descriptor_ = file->message_type(16);
  static const int GM_Order_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Request, months_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Request, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Request, isnoonornight_),
  };
  GM_Order_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Order_Request_descriptor_,
      GM_Order_Request::default_instance_,
      GM_Order_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Order_Request));
  GM_Order_Return_descriptor_ = file->message_type(17);
  static const int GM_Order_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Return, result_),
  };
  GM_Order_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Order_Return_descriptor_,
      GM_Order_Return::default_instance_,
      GM_Order_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Order_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Order_Return));
  GM_WeddingCalendar_Return_descriptor_ = file->message_type(18);
  static const int GM_WeddingCalendar_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WeddingCalendar_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WeddingCalendar_Return, item_),
  };
  GM_WeddingCalendar_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_WeddingCalendar_Return_descriptor_,
      GM_WeddingCalendar_Return::default_instance_,
      GM_WeddingCalendar_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WeddingCalendar_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_WeddingCalendar_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_WeddingCalendar_Return));
  WeddingCalendarItem_descriptor_ = file->message_type(19);
  static const int WeddingCalendarItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCalendarItem, marrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCalendarItem, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCalendarItem, manname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCalendarItem, womanname_),
  };
  WeddingCalendarItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingCalendarItem_descriptor_,
      WeddingCalendarItem::default_instance_,
      WeddingCalendarItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCalendarItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCalendarItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingCalendarItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_concentrictree_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMConTreeDataReturn_descriptor_, &GMConTreeDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMConTreeObj_descriptor_, &GMConTreeObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMConTreeGetReturn_descriptor_, &GMConTreeGetReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMConTreeIrrigateReturn_descriptor_, &GMConTreeIrrigateReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMConTreeDivorceRequest_descriptor_, &GMConTreeDivorceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMConTreeDivorceReturn_descriptor_, &GMConTreeDivorceReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAgreeDivorceRequest_descriptor_, &GMAgreeDivorceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMarryRequest_descriptor_, &GMMarryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMNotifyTargetMarry_descriptor_, &GMNotifyTargetMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAgreeMarryRequest_descriptor_, &GMAgreeMarryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMarryReturn_descriptor_, &GMMarryReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MarryRankRequest_descriptor_, &GM_MarryRankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MarryRankListReturn_descriptor_, &GM_MarryRankListReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_MarryRankInfo_descriptor_, &GM_MarryRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_OrderCalendar_Return_descriptor_, &GM_OrderCalendar_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCalendarItem_descriptor_, &OrderCalendarItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Order_Request_descriptor_, &GM_Order_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Order_Return_descriptor_, &GM_Order_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_WeddingCalendar_Return_descriptor_, &GM_WeddingCalendar_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingCalendarItem_descriptor_, &WeddingCalendarItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_concentrictree_2etxt() {
  delete GMConTreeDataReturn::default_instance_;
  delete GMConTreeDataReturn_reflection_;
  delete GMConTreeObj::default_instance_;
  delete GMConTreeObj_reflection_;
  delete GMConTreeGetReturn::default_instance_;
  delete GMConTreeGetReturn_reflection_;
  delete GMConTreeIrrigateReturn::default_instance_;
  delete GMConTreeIrrigateReturn_reflection_;
  delete GMConTreeDivorceRequest::default_instance_;
  delete GMConTreeDivorceRequest_reflection_;
  delete GMConTreeDivorceReturn::default_instance_;
  delete GMConTreeDivorceReturn_reflection_;
  delete GMAgreeDivorceRequest::default_instance_;
  delete GMAgreeDivorceRequest_reflection_;
  delete GMMarryRequest::default_instance_;
  delete GMMarryRequest_reflection_;
  delete GMNotifyTargetMarry::default_instance_;
  delete GMNotifyTargetMarry_reflection_;
  delete GMAgreeMarryRequest::default_instance_;
  delete GMAgreeMarryRequest_reflection_;
  delete GMMarryReturn::default_instance_;
  delete GMMarryReturn_reflection_;
  delete GM_MarryRankRequest::default_instance_;
  delete GM_MarryRankRequest_reflection_;
  delete GM_MarryRankListReturn::default_instance_;
  delete GM_MarryRankListReturn_reflection_;
  delete GM_MarryRankInfo::default_instance_;
  delete GM_MarryRankInfo_reflection_;
  delete GM_OrderCalendar_Return::default_instance_;
  delete GM_OrderCalendar_Return_reflection_;
  delete OrderCalendarItem::default_instance_;
  delete OrderCalendarItem_reflection_;
  delete GM_Order_Request::default_instance_;
  delete GM_Order_Request_reflection_;
  delete GM_Order_Return::default_instance_;
  delete GM_Order_Return_reflection_;
  delete GM_WeddingCalendar_Return::default_instance_;
  delete GM_WeddingCalendar_Return_reflection_;
  delete WeddingCalendarItem::default_instance_;
  delete WeddingCalendarItem_reflection_;
}

void protobuf_AddDesc_concentrictree_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022concentrictree.txt\"\320\002\n\023GMConTreeDataRe"
    "turn\022\017\n\007isMarry\030\001 \002(\005\022\016\n\006treeId\030\002 \001(\003\022\016\n"
    "\006treeLv\030\003 \001(\005\022\017\n\007treeExp\030\004 \001(\005\022\023\n\013compan"
    "ionId\030\005 \001(\005\022\020\n\010isCanGet\030\006 \001(\005\022\020\n\010leftTim"
    "e\030\007 \001(\005\022\033\n\004item\030\010 \003(\0132\r.GMConTreeObj\022\016\n\006"
    "matNum\030\t \001(\005\022\027\n\017leftDivorceTime\030\n \001(\005\022\025\n"
    "\rcompanionName\030\013 \001(\t\022\021\n\tisDivorce\030\014 \001(\005\022"
    "\022\n\nbeDivorced\030\r \001(\005\022\017\n\007isOrder\030\016 \001(\005\022\021\n\t"
    "isCanJoin\030\017 \001(\005\022\026\n\016compProfession\030\020 \001(\005\""
    "3\n\014GMConTreeObj\022\020\n\010objectid\030\001 \002(\005\022\021\n\tobj"
    "ectnum\030\002 \001(\005\"d\n\022GMConTreeGetReturn\022\016\n\006re"
    "sult\030\001 \002(\005\022\020\n\010leftTime\030\002 \001(\005\022\033\n\004item\030\003 \003"
    "(\0132\r.GMConTreeObj\022\017\n\007getGold\030\004 \001(\005\"J\n\027GM"
    "ConTreeIrrigateReturn\022\016\n\006result\030\001 \002(\005\022\016\n"
    "\006treeLv\030\002 \001(\005\022\017\n\007treeExp\030\003 \001(\005\"<\n\027GMConT"
    "reeDivorceRequest\022\014\n\004type\030\001 \002(\005\022\023\n\013compa"
    "nionId\030\002 \001(\005\"(\n\026GMConTreeDivorceReturn\022\016"
    "\n\006result\030\001 \002(\005\"(\n\025GMAgreeDivorceRequest\022"
    "\017\n\007isAgree\030\001 \002(\005\"3\n\016GMMarryRequest\022\023\n\013co"
    "mpanionId\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\"F\n\023GMNotif"
    "yTargetMarry\022\023\n\013companionId\030\001 \002(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\"W\n\023GMAgreeMarryReq"
    "uest\022\017\n\007isAgree\030\001 \002(\005\022\023\n\013companionId\030\002 \001"
    "(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\"2\n\rGMMarr"
    "yReturn\022\023\n\013marryResult\030\001 \002(\005\022\014\n\004name\030\002 \001"
    "(\t\":\n\023GM_MarryRankRequest\022\020\n\010m_RoleID\030\001 "
    "\002(\005\022\021\n\tm_pagenum\030\003 \002(\005\"R\n\026GM_MarryRankLi"
    "stReturn\022\021\n\tm_myplace\030\002 \002(\005\022%\n\nm_RankInf"
    "o\030\003 \003(\0132\021.GM_MarryRankInfo\"\373\001\n\020GM_MarryR"
    "ankInfo\022\017\n\007m_place\030\001 \002(\005\022\020\n\010m_roleid\030\002 \001"
    "(\005\022\022\n\nm_roleName\030\003 \001(\t\022\024\n\014m_Profession\030\004"
    " \001(\005\022\017\n\007m_value\030\005 \001(\005\022\022\n\nm_gangname\030\006 \001("
    "\t\022\027\n\017m_otherroleName\030\007 \001(\t\022\031\n\021m_otherPro"
    "fession\030\010 \001(\005\022\027\n\017m_othergangname\030\t \001(\t\022\021"
    "\n\ttree_gmid\030\n \002(\003\022\025\n\rm_otherroleid\030\013 \001(\005"
    "\"`\n\027GM_OrderCalendar_Return\022\021\n\tmarrytype"
    "\030\001 \002(\005\022 \n\004item\030\002 \003(\0132\022.OrderCalendarItem"
    "\022\020\n\010coldTime\030\003 \001(\005\"G\n\021OrderCalendarItem\022"
    "\014\n\004days\030\001 \002(\005\022\023\n\013isafternoon\030\002 \001(\005\022\017\n\007is"
    "night\030\003 \001(\005\"G\n\020GM_Order_Request\022\016\n\006month"
    "s\030\001 \002(\005\022\014\n\004days\030\002 \002(\005\022\025\n\risNoonOrNight\030\003"
    " \002(\005\"!\n\017GM_Order_Return\022\016\n\006result\030\001 \002(\005\""
    "N\n\031GM_WeddingCalendar_Return\022\r\n\005count\030\001 "
    "\002(\005\022\"\n\004item\030\002 \003(\0132\024.WeddingCalendarItem\""
    "[\n\023WeddingCalendarItem\022\021\n\tmarrytype\030\001 \002("
    "\005\022\r\n\005mtime\030\002 \002(\005\022\017\n\007manname\030\003 \001(\t\022\021\n\twom"
    "anname\030\004 \001(\t", 1852);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "concentrictree.txt", &protobuf_RegisterTypes);
  GMConTreeDataReturn::default_instance_ = new GMConTreeDataReturn();
  GMConTreeObj::default_instance_ = new GMConTreeObj();
  GMConTreeGetReturn::default_instance_ = new GMConTreeGetReturn();
  GMConTreeIrrigateReturn::default_instance_ = new GMConTreeIrrigateReturn();
  GMConTreeDivorceRequest::default_instance_ = new GMConTreeDivorceRequest();
  GMConTreeDivorceReturn::default_instance_ = new GMConTreeDivorceReturn();
  GMAgreeDivorceRequest::default_instance_ = new GMAgreeDivorceRequest();
  GMMarryRequest::default_instance_ = new GMMarryRequest();
  GMNotifyTargetMarry::default_instance_ = new GMNotifyTargetMarry();
  GMAgreeMarryRequest::default_instance_ = new GMAgreeMarryRequest();
  GMMarryReturn::default_instance_ = new GMMarryReturn();
  GM_MarryRankRequest::default_instance_ = new GM_MarryRankRequest();
  GM_MarryRankListReturn::default_instance_ = new GM_MarryRankListReturn();
  GM_MarryRankInfo::default_instance_ = new GM_MarryRankInfo();
  GM_OrderCalendar_Return::default_instance_ = new GM_OrderCalendar_Return();
  OrderCalendarItem::default_instance_ = new OrderCalendarItem();
  GM_Order_Request::default_instance_ = new GM_Order_Request();
  GM_Order_Return::default_instance_ = new GM_Order_Return();
  GM_WeddingCalendar_Return::default_instance_ = new GM_WeddingCalendar_Return();
  WeddingCalendarItem::default_instance_ = new WeddingCalendarItem();
  GMConTreeDataReturn::default_instance_->InitAsDefaultInstance();
  GMConTreeObj::default_instance_->InitAsDefaultInstance();
  GMConTreeGetReturn::default_instance_->InitAsDefaultInstance();
  GMConTreeIrrigateReturn::default_instance_->InitAsDefaultInstance();
  GMConTreeDivorceRequest::default_instance_->InitAsDefaultInstance();
  GMConTreeDivorceReturn::default_instance_->InitAsDefaultInstance();
  GMAgreeDivorceRequest::default_instance_->InitAsDefaultInstance();
  GMMarryRequest::default_instance_->InitAsDefaultInstance();
  GMNotifyTargetMarry::default_instance_->InitAsDefaultInstance();
  GMAgreeMarryRequest::default_instance_->InitAsDefaultInstance();
  GMMarryReturn::default_instance_->InitAsDefaultInstance();
  GM_MarryRankRequest::default_instance_->InitAsDefaultInstance();
  GM_MarryRankListReturn::default_instance_->InitAsDefaultInstance();
  GM_MarryRankInfo::default_instance_->InitAsDefaultInstance();
  GM_OrderCalendar_Return::default_instance_->InitAsDefaultInstance();
  OrderCalendarItem::default_instance_->InitAsDefaultInstance();
  GM_Order_Request::default_instance_->InitAsDefaultInstance();
  GM_Order_Return::default_instance_->InitAsDefaultInstance();
  GM_WeddingCalendar_Return::default_instance_->InitAsDefaultInstance();
  WeddingCalendarItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_concentrictree_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_concentrictree_2etxt {
  StaticDescriptorInitializer_concentrictree_2etxt() {
    protobuf_AddDesc_concentrictree_2etxt();
  }
} static_descriptor_initializer_concentrictree_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMConTreeDataReturn::kIsMarryFieldNumber;
const int GMConTreeDataReturn::kTreeIdFieldNumber;
const int GMConTreeDataReturn::kTreeLvFieldNumber;
const int GMConTreeDataReturn::kTreeExpFieldNumber;
const int GMConTreeDataReturn::kCompanionIdFieldNumber;
const int GMConTreeDataReturn::kIsCanGetFieldNumber;
const int GMConTreeDataReturn::kLeftTimeFieldNumber;
const int GMConTreeDataReturn::kItemFieldNumber;
const int GMConTreeDataReturn::kMatNumFieldNumber;
const int GMConTreeDataReturn::kLeftDivorceTimeFieldNumber;
const int GMConTreeDataReturn::kCompanionNameFieldNumber;
const int GMConTreeDataReturn::kIsDivorceFieldNumber;
const int GMConTreeDataReturn::kBeDivorcedFieldNumber;
const int GMConTreeDataReturn::kIsOrderFieldNumber;
const int GMConTreeDataReturn::kIsCanJoinFieldNumber;
const int GMConTreeDataReturn::kCompProfessionFieldNumber;
#endif  // !_MSC_VER

GMConTreeDataReturn::GMConTreeDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMConTreeDataReturn::InitAsDefaultInstance() {
}

GMConTreeDataReturn::GMConTreeDataReturn(const GMConTreeDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMConTreeDataReturn::SharedCtor() {
  _cached_size_ = 0;
  ismarry_ = 0;
  treeid_ = GOOGLE_LONGLONG(0);
  treelv_ = 0;
  treeexp_ = 0;
  companionid_ = 0;
  iscanget_ = 0;
  lefttime_ = 0;
  matnum_ = 0;
  leftdivorcetime_ = 0;
  companionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdivorce_ = 0;
  bedivorced_ = 0;
  isorder_ = 0;
  iscanjoin_ = 0;
  compprofession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMConTreeDataReturn::~GMConTreeDataReturn() {
  SharedDtor();
}

void GMConTreeDataReturn::SharedDtor() {
  if (companionname_ != &::google::protobuf::internal::kEmptyString) {
    delete companionname_;
  }
  if (this != default_instance_) {
  }
}

void GMConTreeDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMConTreeDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMConTreeDataReturn_descriptor_;
}

const GMConTreeDataReturn& GMConTreeDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMConTreeDataReturn* GMConTreeDataReturn::default_instance_ = NULL;

GMConTreeDataReturn* GMConTreeDataReturn::New() const {
  return new GMConTreeDataReturn;
}

void GMConTreeDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ismarry_ = 0;
    treeid_ = GOOGLE_LONGLONG(0);
    treelv_ = 0;
    treeexp_ = 0;
    companionid_ = 0;
    iscanget_ = 0;
    lefttime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matnum_ = 0;
    leftdivorcetime_ = 0;
    if (has_companionname()) {
      if (companionname_ != &::google::protobuf::internal::kEmptyString) {
        companionname_->clear();
      }
    }
    isdivorce_ = 0;
    bedivorced_ = 0;
    isorder_ = 0;
    iscanjoin_ = 0;
    compprofession_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMConTreeDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isMarry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismarry_)));
          set_has_ismarry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treeId;
        break;
      }

      // optional int64 treeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &treeid_)));
          set_has_treeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treeLv;
        break;
      }

      // optional int32 treeLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treeLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treelv_)));
          set_has_treelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_treeExp;
        break;
      }

      // optional int32 treeExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treeExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treeexp_)));
          set_has_treeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_companionId;
        break;
      }

      // optional int32 companionId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_companionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &companionid_)));
          set_has_companionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isCanGet;
        break;
      }

      // optional int32 isCanGet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCanGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanget_)));
          set_has_iscanget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item;
        break;
      }

      // repeated .GMConTreeObj item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item;
        if (input->ExpectTag(72)) goto parse_matNum;
        break;
      }

      // optional int32 matNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matnum_)));
          set_has_matnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_leftDivorceTime;
        break;
      }

      // optional int32 leftDivorceTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftDivorceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftdivorcetime_)));
          set_has_leftdivorcetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_companionName;
        break;
      }

      // optional string companionName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_companionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->companionname().data(), this->companionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isDivorce;
        break;
      }

      // optional int32 isDivorce = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDivorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdivorce_)));
          set_has_isdivorce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_beDivorced;
        break;
      }

      // optional int32 beDivorced = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beDivorced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bedivorced_)));
          set_has_bedivorced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isOrder;
        break;
      }

      // optional int32 isOrder = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isorder_)));
          set_has_isorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isCanJoin;
        break;
      }

      // optional int32 isCanJoin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCanJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanjoin_)));
          set_has_iscanjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_compProfession;
        break;
      }

      // optional int32 compProfession = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compprofession_)));
          set_has_compprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMConTreeDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isMarry = 1;
  if (has_ismarry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ismarry(), output);
  }

  // optional int64 treeId = 2;
  if (has_treeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->treeid(), output);
  }

  // optional int32 treeLv = 3;
  if (has_treelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->treelv(), output);
  }

  // optional int32 treeExp = 4;
  if (has_treeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->treeexp(), output);
  }

  // optional int32 companionId = 5;
  if (has_companionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->companionid(), output);
  }

  // optional int32 isCanGet = 6;
  if (has_iscanget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iscanget(), output);
  }

  // optional int32 leftTime = 7;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lefttime(), output);
  }

  // repeated .GMConTreeObj item = 8;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item(i), output);
  }

  // optional int32 matNum = 9;
  if (has_matnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->matnum(), output);
  }

  // optional int32 leftDivorceTime = 10;
  if (has_leftdivorcetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->leftdivorcetime(), output);
  }

  // optional string companionName = 11;
  if (has_companionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->companionname().data(), this->companionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->companionname(), output);
  }

  // optional int32 isDivorce = 12;
  if (has_isdivorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->isdivorce(), output);
  }

  // optional int32 beDivorced = 13;
  if (has_bedivorced()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bedivorced(), output);
  }

  // optional int32 isOrder = 14;
  if (has_isorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isorder(), output);
  }

  // optional int32 isCanJoin = 15;
  if (has_iscanjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->iscanjoin(), output);
  }

  // optional int32 compProfession = 16;
  if (has_compprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->compprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMConTreeDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isMarry = 1;
  if (has_ismarry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ismarry(), target);
  }

  // optional int64 treeId = 2;
  if (has_treeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->treeid(), target);
  }

  // optional int32 treeLv = 3;
  if (has_treelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->treelv(), target);
  }

  // optional int32 treeExp = 4;
  if (has_treeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->treeexp(), target);
  }

  // optional int32 companionId = 5;
  if (has_companionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->companionid(), target);
  }

  // optional int32 isCanGet = 6;
  if (has_iscanget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iscanget(), target);
  }

  // optional int32 leftTime = 7;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lefttime(), target);
  }

  // repeated .GMConTreeObj item = 8;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item(i), target);
  }

  // optional int32 matNum = 9;
  if (has_matnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->matnum(), target);
  }

  // optional int32 leftDivorceTime = 10;
  if (has_leftdivorcetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->leftdivorcetime(), target);
  }

  // optional string companionName = 11;
  if (has_companionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->companionname().data(), this->companionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->companionname(), target);
  }

  // optional int32 isDivorce = 12;
  if (has_isdivorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->isdivorce(), target);
  }

  // optional int32 beDivorced = 13;
  if (has_bedivorced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bedivorced(), target);
  }

  // optional int32 isOrder = 14;
  if (has_isorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->isorder(), target);
  }

  // optional int32 isCanJoin = 15;
  if (has_iscanjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->iscanjoin(), target);
  }

  // optional int32 compProfession = 16;
  if (has_compprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->compprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMConTreeDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isMarry = 1;
    if (has_ismarry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismarry());
    }

    // optional int64 treeId = 2;
    if (has_treeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->treeid());
    }

    // optional int32 treeLv = 3;
    if (has_treelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treelv());
    }

    // optional int32 treeExp = 4;
    if (has_treeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treeexp());
    }

    // optional int32 companionId = 5;
    if (has_companionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->companionid());
    }

    // optional int32 isCanGet = 6;
    if (has_iscanget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanget());
    }

    // optional int32 leftTime = 7;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 matNum = 9;
    if (has_matnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matnum());
    }

    // optional int32 leftDivorceTime = 10;
    if (has_leftdivorcetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftdivorcetime());
    }

    // optional string companionName = 11;
    if (has_companionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companionname());
    }

    // optional int32 isDivorce = 12;
    if (has_isdivorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdivorce());
    }

    // optional int32 beDivorced = 13;
    if (has_bedivorced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bedivorced());
    }

    // optional int32 isOrder = 14;
    if (has_isorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isorder());
    }

    // optional int32 isCanJoin = 15;
    if (has_iscanjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanjoin());
    }

    // optional int32 compProfession = 16;
    if (has_compprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compprofession());
    }

  }
  // repeated .GMConTreeObj item = 8;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMConTreeDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMConTreeDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMConTreeDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMConTreeDataReturn::MergeFrom(const GMConTreeDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismarry()) {
      set_ismarry(from.ismarry());
    }
    if (from.has_treeid()) {
      set_treeid(from.treeid());
    }
    if (from.has_treelv()) {
      set_treelv(from.treelv());
    }
    if (from.has_treeexp()) {
      set_treeexp(from.treeexp());
    }
    if (from.has_companionid()) {
      set_companionid(from.companionid());
    }
    if (from.has_iscanget()) {
      set_iscanget(from.iscanget());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matnum()) {
      set_matnum(from.matnum());
    }
    if (from.has_leftdivorcetime()) {
      set_leftdivorcetime(from.leftdivorcetime());
    }
    if (from.has_companionname()) {
      set_companionname(from.companionname());
    }
    if (from.has_isdivorce()) {
      set_isdivorce(from.isdivorce());
    }
    if (from.has_bedivorced()) {
      set_bedivorced(from.bedivorced());
    }
    if (from.has_isorder()) {
      set_isorder(from.isorder());
    }
    if (from.has_iscanjoin()) {
      set_iscanjoin(from.iscanjoin());
    }
    if (from.has_compprofession()) {
      set_compprofession(from.compprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMConTreeDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMConTreeDataReturn::CopyFrom(const GMConTreeDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMConTreeDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GMConTreeDataReturn::Swap(GMConTreeDataReturn* other) {
  if (other != this) {
    std::swap(ismarry_, other->ismarry_);
    std::swap(treeid_, other->treeid_);
    std::swap(treelv_, other->treelv_);
    std::swap(treeexp_, other->treeexp_);
    std::swap(companionid_, other->companionid_);
    std::swap(iscanget_, other->iscanget_);
    std::swap(lefttime_, other->lefttime_);
    item_.Swap(&other->item_);
    std::swap(matnum_, other->matnum_);
    std::swap(leftdivorcetime_, other->leftdivorcetime_);
    std::swap(companionname_, other->companionname_);
    std::swap(isdivorce_, other->isdivorce_);
    std::swap(bedivorced_, other->bedivorced_);
    std::swap(isorder_, other->isorder_);
    std::swap(iscanjoin_, other->iscanjoin_);
    std::swap(compprofession_, other->compprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMConTreeDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMConTreeDataReturn_descriptor_;
  metadata.reflection = GMConTreeDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMConTreeObj::kObjectidFieldNumber;
const int GMConTreeObj::kObjectnumFieldNumber;
#endif  // !_MSC_VER

GMConTreeObj::GMConTreeObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMConTreeObj::InitAsDefaultInstance() {
}

GMConTreeObj::GMConTreeObj(const GMConTreeObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMConTreeObj::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMConTreeObj::~GMConTreeObj() {
  SharedDtor();
}

void GMConTreeObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMConTreeObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMConTreeObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMConTreeObj_descriptor_;
}

const GMConTreeObj& GMConTreeObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMConTreeObj* GMConTreeObj::default_instance_ = NULL;

GMConTreeObj* GMConTreeObj::New() const {
  return new GMConTreeObj;
}

void GMConTreeObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMConTreeObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectnum;
        break;
      }

      // optional int32 objectnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMConTreeObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 objectnum = 2;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMConTreeObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 objectnum = 2;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMConTreeObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 objectnum = 2;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMConTreeObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMConTreeObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMConTreeObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMConTreeObj::MergeFrom(const GMConTreeObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMConTreeObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMConTreeObj::CopyFrom(const GMConTreeObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMConTreeObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMConTreeObj::Swap(GMConTreeObj* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMConTreeObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMConTreeObj_descriptor_;
  metadata.reflection = GMConTreeObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMConTreeGetReturn::kResultFieldNumber;
const int GMConTreeGetReturn::kLeftTimeFieldNumber;
const int GMConTreeGetReturn::kItemFieldNumber;
const int GMConTreeGetReturn::kGetGoldFieldNumber;
#endif  // !_MSC_VER

GMConTreeGetReturn::GMConTreeGetReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMConTreeGetReturn::InitAsDefaultInstance() {
}

GMConTreeGetReturn::GMConTreeGetReturn(const GMConTreeGetReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMConTreeGetReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  lefttime_ = 0;
  getgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMConTreeGetReturn::~GMConTreeGetReturn() {
  SharedDtor();
}

void GMConTreeGetReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMConTreeGetReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMConTreeGetReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMConTreeGetReturn_descriptor_;
}

const GMConTreeGetReturn& GMConTreeGetReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMConTreeGetReturn* GMConTreeGetReturn::default_instance_ = NULL;

GMConTreeGetReturn* GMConTreeGetReturn::New() const {
  return new GMConTreeGetReturn;
}

void GMConTreeGetReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    lefttime_ = 0;
    getgold_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMConTreeGetReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .GMConTreeObj item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_getGold;
        break;
      }

      // optional int32 getGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getgold_)));
          set_has_getgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMConTreeGetReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  // repeated .GMConTreeObj item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional int32 getGold = 4;
  if (has_getgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMConTreeGetReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  // repeated .GMConTreeObj item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional int32 getGold = 4;
  if (has_getgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMConTreeGetReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 leftTime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

    // optional int32 getGold = 4;
    if (has_getgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getgold());
    }

  }
  // repeated .GMConTreeObj item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMConTreeGetReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMConTreeGetReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMConTreeGetReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMConTreeGetReturn::MergeFrom(const GMConTreeGetReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_getgold()) {
      set_getgold(from.getgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMConTreeGetReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMConTreeGetReturn::CopyFrom(const GMConTreeGetReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMConTreeGetReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GMConTreeGetReturn::Swap(GMConTreeGetReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(lefttime_, other->lefttime_);
    item_.Swap(&other->item_);
    std::swap(getgold_, other->getgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMConTreeGetReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMConTreeGetReturn_descriptor_;
  metadata.reflection = GMConTreeGetReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMConTreeIrrigateReturn::kResultFieldNumber;
const int GMConTreeIrrigateReturn::kTreeLvFieldNumber;
const int GMConTreeIrrigateReturn::kTreeExpFieldNumber;
#endif  // !_MSC_VER

GMConTreeIrrigateReturn::GMConTreeIrrigateReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMConTreeIrrigateReturn::InitAsDefaultInstance() {
}

GMConTreeIrrigateReturn::GMConTreeIrrigateReturn(const GMConTreeIrrigateReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMConTreeIrrigateReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  treelv_ = 0;
  treeexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMConTreeIrrigateReturn::~GMConTreeIrrigateReturn() {
  SharedDtor();
}

void GMConTreeIrrigateReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMConTreeIrrigateReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMConTreeIrrigateReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMConTreeIrrigateReturn_descriptor_;
}

const GMConTreeIrrigateReturn& GMConTreeIrrigateReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMConTreeIrrigateReturn* GMConTreeIrrigateReturn::default_instance_ = NULL;

GMConTreeIrrigateReturn* GMConTreeIrrigateReturn::New() const {
  return new GMConTreeIrrigateReturn;
}

void GMConTreeIrrigateReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    treelv_ = 0;
    treeexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMConTreeIrrigateReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treeLv;
        break;
      }

      // optional int32 treeLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treeLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treelv_)));
          set_has_treelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treeExp;
        break;
      }

      // optional int32 treeExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treeExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treeexp_)));
          set_has_treeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMConTreeIrrigateReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 treeLv = 2;
  if (has_treelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->treelv(), output);
  }

  // optional int32 treeExp = 3;
  if (has_treeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->treeexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMConTreeIrrigateReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 treeLv = 2;
  if (has_treelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->treelv(), target);
  }

  // optional int32 treeExp = 3;
  if (has_treeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->treeexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMConTreeIrrigateReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 treeLv = 2;
    if (has_treelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treelv());
    }

    // optional int32 treeExp = 3;
    if (has_treeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treeexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMConTreeIrrigateReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMConTreeIrrigateReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMConTreeIrrigateReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMConTreeIrrigateReturn::MergeFrom(const GMConTreeIrrigateReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_treelv()) {
      set_treelv(from.treelv());
    }
    if (from.has_treeexp()) {
      set_treeexp(from.treeexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMConTreeIrrigateReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMConTreeIrrigateReturn::CopyFrom(const GMConTreeIrrigateReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMConTreeIrrigateReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMConTreeIrrigateReturn::Swap(GMConTreeIrrigateReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(treelv_, other->treelv_);
    std::swap(treeexp_, other->treeexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMConTreeIrrigateReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMConTreeIrrigateReturn_descriptor_;
  metadata.reflection = GMConTreeIrrigateReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMConTreeDivorceRequest::kTypeFieldNumber;
const int GMConTreeDivorceRequest::kCompanionIdFieldNumber;
#endif  // !_MSC_VER

GMConTreeDivorceRequest::GMConTreeDivorceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMConTreeDivorceRequest::InitAsDefaultInstance() {
}

GMConTreeDivorceRequest::GMConTreeDivorceRequest(const GMConTreeDivorceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMConTreeDivorceRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  companionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMConTreeDivorceRequest::~GMConTreeDivorceRequest() {
  SharedDtor();
}

void GMConTreeDivorceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMConTreeDivorceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMConTreeDivorceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMConTreeDivorceRequest_descriptor_;
}

const GMConTreeDivorceRequest& GMConTreeDivorceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMConTreeDivorceRequest* GMConTreeDivorceRequest::default_instance_ = NULL;

GMConTreeDivorceRequest* GMConTreeDivorceRequest::New() const {
  return new GMConTreeDivorceRequest;
}

void GMConTreeDivorceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    companionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMConTreeDivorceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_companionId;
        break;
      }

      // optional int32 companionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_companionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &companionid_)));
          set_has_companionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMConTreeDivorceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 companionId = 2;
  if (has_companionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->companionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMConTreeDivorceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 companionId = 2;
  if (has_companionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->companionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMConTreeDivorceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 companionId = 2;
    if (has_companionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->companionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMConTreeDivorceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMConTreeDivorceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMConTreeDivorceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMConTreeDivorceRequest::MergeFrom(const GMConTreeDivorceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_companionid()) {
      set_companionid(from.companionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMConTreeDivorceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMConTreeDivorceRequest::CopyFrom(const GMConTreeDivorceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMConTreeDivorceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMConTreeDivorceRequest::Swap(GMConTreeDivorceRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(companionid_, other->companionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMConTreeDivorceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMConTreeDivorceRequest_descriptor_;
  metadata.reflection = GMConTreeDivorceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMConTreeDivorceReturn::kResultFieldNumber;
#endif  // !_MSC_VER

GMConTreeDivorceReturn::GMConTreeDivorceReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMConTreeDivorceReturn::InitAsDefaultInstance() {
}

GMConTreeDivorceReturn::GMConTreeDivorceReturn(const GMConTreeDivorceReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMConTreeDivorceReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMConTreeDivorceReturn::~GMConTreeDivorceReturn() {
  SharedDtor();
}

void GMConTreeDivorceReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMConTreeDivorceReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMConTreeDivorceReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMConTreeDivorceReturn_descriptor_;
}

const GMConTreeDivorceReturn& GMConTreeDivorceReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMConTreeDivorceReturn* GMConTreeDivorceReturn::default_instance_ = NULL;

GMConTreeDivorceReturn* GMConTreeDivorceReturn::New() const {
  return new GMConTreeDivorceReturn;
}

void GMConTreeDivorceReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMConTreeDivorceReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMConTreeDivorceReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMConTreeDivorceReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMConTreeDivorceReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMConTreeDivorceReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMConTreeDivorceReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMConTreeDivorceReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMConTreeDivorceReturn::MergeFrom(const GMConTreeDivorceReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMConTreeDivorceReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMConTreeDivorceReturn::CopyFrom(const GMConTreeDivorceReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMConTreeDivorceReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMConTreeDivorceReturn::Swap(GMConTreeDivorceReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMConTreeDivorceReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMConTreeDivorceReturn_descriptor_;
  metadata.reflection = GMConTreeDivorceReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAgreeDivorceRequest::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

GMAgreeDivorceRequest::GMAgreeDivorceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAgreeDivorceRequest::InitAsDefaultInstance() {
}

GMAgreeDivorceRequest::GMAgreeDivorceRequest(const GMAgreeDivorceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAgreeDivorceRequest::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAgreeDivorceRequest::~GMAgreeDivorceRequest() {
  SharedDtor();
}

void GMAgreeDivorceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAgreeDivorceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAgreeDivorceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAgreeDivorceRequest_descriptor_;
}

const GMAgreeDivorceRequest& GMAgreeDivorceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMAgreeDivorceRequest* GMAgreeDivorceRequest::default_instance_ = NULL;

GMAgreeDivorceRequest* GMAgreeDivorceRequest::New() const {
  return new GMAgreeDivorceRequest;
}

void GMAgreeDivorceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAgreeDivorceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAgreeDivorceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAgreeDivorceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAgreeDivorceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAgree = 1;
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isagree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAgreeDivorceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAgreeDivorceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAgreeDivorceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAgreeDivorceRequest::MergeFrom(const GMAgreeDivorceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAgreeDivorceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAgreeDivorceRequest::CopyFrom(const GMAgreeDivorceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAgreeDivorceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAgreeDivorceRequest::Swap(GMAgreeDivorceRequest* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAgreeDivorceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAgreeDivorceRequest_descriptor_;
  metadata.reflection = GMAgreeDivorceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMMarryRequest::kCompanionIdFieldNumber;
const int GMMarryRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GMMarryRequest::GMMarryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMarryRequest::InitAsDefaultInstance() {
}

GMMarryRequest::GMMarryRequest(const GMMarryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMarryRequest::SharedCtor() {
  _cached_size_ = 0;
  companionid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMarryRequest::~GMMarryRequest() {
  SharedDtor();
}

void GMMarryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMMarryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMarryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMarryRequest_descriptor_;
}

const GMMarryRequest& GMMarryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMMarryRequest* GMMarryRequest::default_instance_ = NULL;

GMMarryRequest* GMMarryRequest::New() const {
  return new GMMarryRequest;
}

void GMMarryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    companionid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMarryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 companionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &companionid_)));
          set_has_companionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMarryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 companionId = 1;
  if (has_companionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->companionid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMarryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 companionId = 1;
  if (has_companionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->companionid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMarryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 companionId = 1;
    if (has_companionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->companionid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMarryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMarryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMarryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMarryRequest::MergeFrom(const GMMarryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companionid()) {
      set_companionid(from.companionid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMarryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMarryRequest::CopyFrom(const GMMarryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMarryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMMarryRequest::Swap(GMMarryRequest* other) {
  if (other != this) {
    std::swap(companionid_, other->companionid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMarryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMarryRequest_descriptor_;
  metadata.reflection = GMMarryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMNotifyTargetMarry::kCompanionIdFieldNumber;
const int GMNotifyTargetMarry::kNameFieldNumber;
const int GMNotifyTargetMarry::kTypeFieldNumber;
#endif  // !_MSC_VER

GMNotifyTargetMarry::GMNotifyTargetMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMNotifyTargetMarry::InitAsDefaultInstance() {
}

GMNotifyTargetMarry::GMNotifyTargetMarry(const GMNotifyTargetMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMNotifyTargetMarry::SharedCtor() {
  _cached_size_ = 0;
  companionid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMNotifyTargetMarry::~GMNotifyTargetMarry() {
  SharedDtor();
}

void GMNotifyTargetMarry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMNotifyTargetMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMNotifyTargetMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMNotifyTargetMarry_descriptor_;
}

const GMNotifyTargetMarry& GMNotifyTargetMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMNotifyTargetMarry* GMNotifyTargetMarry::default_instance_ = NULL;

GMNotifyTargetMarry* GMNotifyTargetMarry::New() const {
  return new GMNotifyTargetMarry;
}

void GMNotifyTargetMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    companionid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMNotifyTargetMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 companionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &companionid_)));
          set_has_companionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMNotifyTargetMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 companionId = 1;
  if (has_companionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->companionid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMNotifyTargetMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 companionId = 1;
  if (has_companionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->companionid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMNotifyTargetMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 companionId = 1;
    if (has_companionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->companionid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMNotifyTargetMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMNotifyTargetMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMNotifyTargetMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMNotifyTargetMarry::MergeFrom(const GMNotifyTargetMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_companionid()) {
      set_companionid(from.companionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMNotifyTargetMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMNotifyTargetMarry::CopyFrom(const GMNotifyTargetMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMNotifyTargetMarry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMNotifyTargetMarry::Swap(GMNotifyTargetMarry* other) {
  if (other != this) {
    std::swap(companionid_, other->companionid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMNotifyTargetMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMNotifyTargetMarry_descriptor_;
  metadata.reflection = GMNotifyTargetMarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAgreeMarryRequest::kIsAgreeFieldNumber;
const int GMAgreeMarryRequest::kCompanionIdFieldNumber;
const int GMAgreeMarryRequest::kNameFieldNumber;
const int GMAgreeMarryRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GMAgreeMarryRequest::GMAgreeMarryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAgreeMarryRequest::InitAsDefaultInstance() {
}

GMAgreeMarryRequest::GMAgreeMarryRequest(const GMAgreeMarryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAgreeMarryRequest::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = 0;
  companionid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAgreeMarryRequest::~GMAgreeMarryRequest() {
  SharedDtor();
}

void GMAgreeMarryRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMAgreeMarryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAgreeMarryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAgreeMarryRequest_descriptor_;
}

const GMAgreeMarryRequest& GMAgreeMarryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMAgreeMarryRequest* GMAgreeMarryRequest::default_instance_ = NULL;

GMAgreeMarryRequest* GMAgreeMarryRequest::New() const {
  return new GMAgreeMarryRequest;
}

void GMAgreeMarryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = 0;
    companionid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAgreeMarryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_companionId;
        break;
      }

      // optional int32 companionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_companionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &companionid_)));
          set_has_companionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAgreeMarryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isagree(), output);
  }

  // optional int32 companionId = 2;
  if (has_companionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->companionid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAgreeMarryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isagree(), target);
  }

  // optional int32 companionId = 2;
  if (has_companionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->companionid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAgreeMarryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAgree = 1;
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isagree());
    }

    // optional int32 companionId = 2;
    if (has_companionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->companionid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAgreeMarryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAgreeMarryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAgreeMarryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAgreeMarryRequest::MergeFrom(const GMAgreeMarryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
    if (from.has_companionid()) {
      set_companionid(from.companionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAgreeMarryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAgreeMarryRequest::CopyFrom(const GMAgreeMarryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAgreeMarryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAgreeMarryRequest::Swap(GMAgreeMarryRequest* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(companionid_, other->companionid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAgreeMarryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAgreeMarryRequest_descriptor_;
  metadata.reflection = GMAgreeMarryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMMarryReturn::kMarryResultFieldNumber;
const int GMMarryReturn::kNameFieldNumber;
#endif  // !_MSC_VER

GMMarryReturn::GMMarryReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMarryReturn::InitAsDefaultInstance() {
}

GMMarryReturn::GMMarryReturn(const GMMarryReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMarryReturn::SharedCtor() {
  _cached_size_ = 0;
  marryresult_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMarryReturn::~GMMarryReturn() {
  SharedDtor();
}

void GMMarryReturn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMMarryReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMarryReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMarryReturn_descriptor_;
}

const GMMarryReturn& GMMarryReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GMMarryReturn* GMMarryReturn::default_instance_ = NULL;

GMMarryReturn* GMMarryReturn::New() const {
  return new GMMarryReturn;
}

void GMMarryReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marryresult_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMarryReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 marryResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marryresult_)));
          set_has_marryresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMarryReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 marryResult = 1;
  if (has_marryresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->marryresult(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMarryReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 marryResult = 1;
  if (has_marryresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->marryresult(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMarryReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 marryResult = 1;
    if (has_marryresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marryresult());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMarryReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMarryReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMarryReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMarryReturn::MergeFrom(const GMMarryReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marryresult()) {
      set_marryresult(from.marryresult());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMarryReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMarryReturn::CopyFrom(const GMMarryReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMarryReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMMarryReturn::Swap(GMMarryReturn* other) {
  if (other != this) {
    std::swap(marryresult_, other->marryresult_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMarryReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMarryReturn_descriptor_;
  metadata.reflection = GMMarryReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MarryRankRequest::kMRoleIDFieldNumber;
const int GM_MarryRankRequest::kMPagenumFieldNumber;
#endif  // !_MSC_VER

GM_MarryRankRequest::GM_MarryRankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MarryRankRequest::InitAsDefaultInstance() {
}

GM_MarryRankRequest::GM_MarryRankRequest(const GM_MarryRankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MarryRankRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_pagenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MarryRankRequest::~GM_MarryRankRequest() {
  SharedDtor();
}

void GM_MarryRankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MarryRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MarryRankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MarryRankRequest_descriptor_;
}

const GM_MarryRankRequest& GM_MarryRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_MarryRankRequest* GM_MarryRankRequest::default_instance_ = NULL;

GM_MarryRankRequest* GM_MarryRankRequest::New() const {
  return new GM_MarryRankRequest;
}

void GM_MarryRankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_pagenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MarryRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pagenum;
        break;
      }

      // required int32 m_pagenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pagenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pagenum_)));
          set_has_m_pagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MarryRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // required int32 m_pagenum = 3;
  if (has_m_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_pagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MarryRankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // required int32 m_pagenum = 3;
  if (has_m_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_pagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MarryRankRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int32 m_pagenum = 3;
    if (has_m_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MarryRankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MarryRankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MarryRankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MarryRankRequest::MergeFrom(const GM_MarryRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_pagenum()) {
      set_m_pagenum(from.m_pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MarryRankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MarryRankRequest::CopyFrom(const GM_MarryRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MarryRankRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_MarryRankRequest::Swap(GM_MarryRankRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_pagenum_, other->m_pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MarryRankRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MarryRankRequest_descriptor_;
  metadata.reflection = GM_MarryRankRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MarryRankListReturn::kMMyplaceFieldNumber;
const int GM_MarryRankListReturn::kMRankInfoFieldNumber;
#endif  // !_MSC_VER

GM_MarryRankListReturn::GM_MarryRankListReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MarryRankListReturn::InitAsDefaultInstance() {
}

GM_MarryRankListReturn::GM_MarryRankListReturn(const GM_MarryRankListReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MarryRankListReturn::SharedCtor() {
  _cached_size_ = 0;
  m_myplace_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MarryRankListReturn::~GM_MarryRankListReturn() {
  SharedDtor();
}

void GM_MarryRankListReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_MarryRankListReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MarryRankListReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MarryRankListReturn_descriptor_;
}

const GM_MarryRankListReturn& GM_MarryRankListReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_MarryRankListReturn* GM_MarryRankListReturn::default_instance_ = NULL;

GM_MarryRankListReturn* GM_MarryRankListReturn::New() const {
  return new GM_MarryRankListReturn;
}

void GM_MarryRankListReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_myplace_ = 0;
  }
  m_rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MarryRankListReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_myplace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_myplace_)));
          set_has_m_myplace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_RankInfo;
        break;
      }

      // repeated .GM_MarryRankInfo m_RankInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_RankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_RankInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MarryRankListReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_myplace = 2;
  if (has_m_myplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_myplace(), output);
  }

  // repeated .GM_MarryRankInfo m_RankInfo = 3;
  for (int i = 0; i < this->m_rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_rankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MarryRankListReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_myplace = 2;
  if (has_m_myplace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_myplace(), target);
  }

  // repeated .GM_MarryRankInfo m_RankInfo = 3;
  for (int i = 0; i < this->m_rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_rankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MarryRankListReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_myplace = 2;
    if (has_m_myplace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_myplace());
    }

  }
  // repeated .GM_MarryRankInfo m_RankInfo = 3;
  total_size += 1 * this->m_rankinfo_size();
  for (int i = 0; i < this->m_rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MarryRankListReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MarryRankListReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MarryRankListReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MarryRankListReturn::MergeFrom(const GM_MarryRankListReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_rankinfo_.MergeFrom(from.m_rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_myplace()) {
      set_m_myplace(from.m_myplace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MarryRankListReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MarryRankListReturn::CopyFrom(const GM_MarryRankListReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MarryRankListReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_rankinfo_size(); i++) {
    if (!this->m_rankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_MarryRankListReturn::Swap(GM_MarryRankListReturn* other) {
  if (other != this) {
    std::swap(m_myplace_, other->m_myplace_);
    m_rankinfo_.Swap(&other->m_rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MarryRankListReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MarryRankListReturn_descriptor_;
  metadata.reflection = GM_MarryRankListReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_MarryRankInfo::kMPlaceFieldNumber;
const int GM_MarryRankInfo::kMRoleidFieldNumber;
const int GM_MarryRankInfo::kMRoleNameFieldNumber;
const int GM_MarryRankInfo::kMProfessionFieldNumber;
const int GM_MarryRankInfo::kMValueFieldNumber;
const int GM_MarryRankInfo::kMGangnameFieldNumber;
const int GM_MarryRankInfo::kMOtherroleNameFieldNumber;
const int GM_MarryRankInfo::kMOtherProfessionFieldNumber;
const int GM_MarryRankInfo::kMOthergangnameFieldNumber;
const int GM_MarryRankInfo::kTreeGmidFieldNumber;
const int GM_MarryRankInfo::kMOtherroleidFieldNumber;
#endif  // !_MSC_VER

GM_MarryRankInfo::GM_MarryRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_MarryRankInfo::InitAsDefaultInstance() {
}

GM_MarryRankInfo::GM_MarryRankInfo(const GM_MarryRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_MarryRankInfo::SharedCtor() {
  _cached_size_ = 0;
  m_place_ = 0;
  m_roleid_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_profession_ = 0;
  m_value_ = 0;
  m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_otherrolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_otherprofession_ = 0;
  m_othergangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tree_gmid_ = GOOGLE_LONGLONG(0);
  m_otherroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_MarryRankInfo::~GM_MarryRankInfo() {
  SharedDtor();
}

void GM_MarryRankInfo::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gangname_;
  }
  if (m_otherrolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_otherrolename_;
  }
  if (m_othergangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_othergangname_;
  }
  if (this != default_instance_) {
  }
}

void GM_MarryRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_MarryRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_MarryRankInfo_descriptor_;
}

const GM_MarryRankInfo& GM_MarryRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_MarryRankInfo* GM_MarryRankInfo::default_instance_ = NULL;

GM_MarryRankInfo* GM_MarryRankInfo::New() const {
  return new GM_MarryRankInfo;
}

void GM_MarryRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_place_ = 0;
    m_roleid_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_profession_ = 0;
    m_value_ = 0;
    if (has_m_gangname()) {
      if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
        m_gangname_->clear();
      }
    }
    if (has_m_otherrolename()) {
      if (m_otherrolename_ != &::google::protobuf::internal::kEmptyString) {
        m_otherrolename_->clear();
      }
    }
    m_otherprofession_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_othergangname()) {
      if (m_othergangname_ != &::google::protobuf::internal::kEmptyString) {
        m_othergangname_->clear();
      }
    }
    tree_gmid_ = GOOGLE_LONGLONG(0);
    m_otherroleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_MarryRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_place = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_place_)));
          set_has_m_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleid;
        break;
      }

      // optional int32 m_roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_roleName;
        break;
      }

      // optional string m_roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_Profession;
        break;
      }

      // optional int32 m_Profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_gangname;
        break;
      }

      // optional string m_gangname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gangname().data(), this->m_gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_otherroleName;
        break;
      }

      // optional string m_otherroleName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_otherroleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_otherrolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_otherrolename().data(), this->m_otherrolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_otherProfession;
        break;
      }

      // optional int32 m_otherProfession = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_otherProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_otherprofession_)));
          set_has_m_otherprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_othergangname;
        break;
      }

      // optional string m_othergangname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_othergangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_othergangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_othergangname().data(), this->m_othergangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tree_gmid;
        break;
      }

      // required int64 tree_gmid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tree_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tree_gmid_)));
          set_has_tree_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_otherroleid;
        break;
      }

      // optional int32 m_otherroleid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_otherroleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_otherroleid_)));
          set_has_m_otherroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_MarryRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_place = 1;
  if (has_m_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_place(), output);
  }

  // optional int32 m_roleid = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // optional string m_roleName = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_rolename(), output);
  }

  // optional int32 m_Profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  // optional int32 m_value = 5;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_value(), output);
  }

  // optional string m_gangname = 6;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_gangname(), output);
  }

  // optional string m_otherroleName = 7;
  if (has_m_otherrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_otherrolename().data(), this->m_otherrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_otherrolename(), output);
  }

  // optional int32 m_otherProfession = 8;
  if (has_m_otherprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_otherprofession(), output);
  }

  // optional string m_othergangname = 9;
  if (has_m_othergangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_othergangname().data(), this->m_othergangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_othergangname(), output);
  }

  // required int64 tree_gmid = 10;
  if (has_tree_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->tree_gmid(), output);
  }

  // optional int32 m_otherroleid = 11;
  if (has_m_otherroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_otherroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_MarryRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_place = 1;
  if (has_m_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_place(), target);
  }

  // optional int32 m_roleid = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // optional string m_roleName = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_rolename(), target);
  }

  // optional int32 m_Profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  // optional int32 m_value = 5;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_value(), target);
  }

  // optional string m_gangname = 6;
  if (has_m_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gangname().data(), this->m_gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_gangname(), target);
  }

  // optional string m_otherroleName = 7;
  if (has_m_otherrolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_otherrolename().data(), this->m_otherrolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_otherrolename(), target);
  }

  // optional int32 m_otherProfession = 8;
  if (has_m_otherprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_otherprofession(), target);
  }

  // optional string m_othergangname = 9;
  if (has_m_othergangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_othergangname().data(), this->m_othergangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_othergangname(), target);
  }

  // required int64 tree_gmid = 10;
  if (has_tree_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->tree_gmid(), target);
  }

  // optional int32 m_otherroleid = 11;
  if (has_m_otherroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_otherroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_MarryRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_place = 1;
    if (has_m_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_place());
    }

    // optional int32 m_roleid = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional string m_roleName = 3;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_Profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional int32 m_value = 5;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional string m_gangname = 6;
    if (has_m_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gangname());
    }

    // optional string m_otherroleName = 7;
    if (has_m_otherrolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_otherrolename());
    }

    // optional int32 m_otherProfession = 8;
    if (has_m_otherprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_otherprofession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_othergangname = 9;
    if (has_m_othergangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_othergangname());
    }

    // required int64 tree_gmid = 10;
    if (has_tree_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tree_gmid());
    }

    // optional int32 m_otherroleid = 11;
    if (has_m_otherroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_otherroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_MarryRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_MarryRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_MarryRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_MarryRankInfo::MergeFrom(const GM_MarryRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_place()) {
      set_m_place(from.m_place());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_gangname()) {
      set_m_gangname(from.m_gangname());
    }
    if (from.has_m_otherrolename()) {
      set_m_otherrolename(from.m_otherrolename());
    }
    if (from.has_m_otherprofession()) {
      set_m_otherprofession(from.m_otherprofession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_othergangname()) {
      set_m_othergangname(from.m_othergangname());
    }
    if (from.has_tree_gmid()) {
      set_tree_gmid(from.tree_gmid());
    }
    if (from.has_m_otherroleid()) {
      set_m_otherroleid(from.m_otherroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_MarryRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_MarryRankInfo::CopyFrom(const GM_MarryRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_MarryRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000201) != 0x00000201) return false;

  return true;
}

void GM_MarryRankInfo::Swap(GM_MarryRankInfo* other) {
  if (other != this) {
    std::swap(m_place_, other->m_place_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_gangname_, other->m_gangname_);
    std::swap(m_otherrolename_, other->m_otherrolename_);
    std::swap(m_otherprofession_, other->m_otherprofession_);
    std::swap(m_othergangname_, other->m_othergangname_);
    std::swap(tree_gmid_, other->tree_gmid_);
    std::swap(m_otherroleid_, other->m_otherroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_MarryRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_MarryRankInfo_descriptor_;
  metadata.reflection = GM_MarryRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_OrderCalendar_Return::kMarrytypeFieldNumber;
const int GM_OrderCalendar_Return::kItemFieldNumber;
const int GM_OrderCalendar_Return::kColdTimeFieldNumber;
#endif  // !_MSC_VER

GM_OrderCalendar_Return::GM_OrderCalendar_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_OrderCalendar_Return::InitAsDefaultInstance() {
}

GM_OrderCalendar_Return::GM_OrderCalendar_Return(const GM_OrderCalendar_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_OrderCalendar_Return::SharedCtor() {
  _cached_size_ = 0;
  marrytype_ = 0;
  coldtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_OrderCalendar_Return::~GM_OrderCalendar_Return() {
  SharedDtor();
}

void GM_OrderCalendar_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_OrderCalendar_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_OrderCalendar_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_OrderCalendar_Return_descriptor_;
}

const GM_OrderCalendar_Return& GM_OrderCalendar_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_OrderCalendar_Return* GM_OrderCalendar_Return::default_instance_ = NULL;

GM_OrderCalendar_Return* GM_OrderCalendar_Return::New() const {
  return new GM_OrderCalendar_Return;
}

void GM_OrderCalendar_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marrytype_ = 0;
    coldtime_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_OrderCalendar_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 marrytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marrytype_)));
          set_has_marrytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .OrderCalendarItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_coldTime;
        break;
      }

      // optional int32 coldTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coldtime_)));
          set_has_coldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_OrderCalendar_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 marrytype = 1;
  if (has_marrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->marrytype(), output);
  }

  // repeated .OrderCalendarItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional int32 coldTime = 3;
  if (has_coldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coldtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_OrderCalendar_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 marrytype = 1;
  if (has_marrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->marrytype(), target);
  }

  // repeated .OrderCalendarItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional int32 coldTime = 3;
  if (has_coldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coldtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_OrderCalendar_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 marrytype = 1;
    if (has_marrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marrytype());
    }

    // optional int32 coldTime = 3;
    if (has_coldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coldtime());
    }

  }
  // repeated .OrderCalendarItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_OrderCalendar_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_OrderCalendar_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_OrderCalendar_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_OrderCalendar_Return::MergeFrom(const GM_OrderCalendar_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marrytype()) {
      set_marrytype(from.marrytype());
    }
    if (from.has_coldtime()) {
      set_coldtime(from.coldtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_OrderCalendar_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_OrderCalendar_Return::CopyFrom(const GM_OrderCalendar_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_OrderCalendar_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_OrderCalendar_Return::Swap(GM_OrderCalendar_Return* other) {
  if (other != this) {
    std::swap(marrytype_, other->marrytype_);
    item_.Swap(&other->item_);
    std::swap(coldtime_, other->coldtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_OrderCalendar_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_OrderCalendar_Return_descriptor_;
  metadata.reflection = GM_OrderCalendar_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCalendarItem::kDaysFieldNumber;
const int OrderCalendarItem::kIsafternoonFieldNumber;
const int OrderCalendarItem::kIsnightFieldNumber;
#endif  // !_MSC_VER

OrderCalendarItem::OrderCalendarItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderCalendarItem::InitAsDefaultInstance() {
}

OrderCalendarItem::OrderCalendarItem(const OrderCalendarItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderCalendarItem::SharedCtor() {
  _cached_size_ = 0;
  days_ = 0;
  isafternoon_ = 0;
  isnight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCalendarItem::~OrderCalendarItem() {
  SharedDtor();
}

void OrderCalendarItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderCalendarItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCalendarItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCalendarItem_descriptor_;
}

const OrderCalendarItem& OrderCalendarItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

OrderCalendarItem* OrderCalendarItem::default_instance_ = NULL;

OrderCalendarItem* OrderCalendarItem::New() const {
  return new OrderCalendarItem;
}

void OrderCalendarItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    days_ = 0;
    isafternoon_ = 0;
    isnight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCalendarItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isafternoon;
        break;
      }

      // optional int32 isafternoon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isafternoon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isafternoon_)));
          set_has_isafternoon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isnight;
        break;
      }

      // optional int32 isnight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnight_)));
          set_has_isnight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderCalendarItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 days = 1;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->days(), output);
  }

  // optional int32 isafternoon = 2;
  if (has_isafternoon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isafternoon(), output);
  }

  // optional int32 isnight = 3;
  if (has_isnight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isnight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderCalendarItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 days = 1;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->days(), target);
  }

  // optional int32 isafternoon = 2;
  if (has_isafternoon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isafternoon(), target);
  }

  // optional int32 isnight = 3;
  if (has_isnight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isnight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderCalendarItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 days = 1;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }

    // optional int32 isafternoon = 2;
    if (has_isafternoon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isafternoon());
    }

    // optional int32 isnight = 3;
    if (has_isnight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCalendarItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCalendarItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCalendarItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCalendarItem::MergeFrom(const OrderCalendarItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_isafternoon()) {
      set_isafternoon(from.isafternoon());
    }
    if (from.has_isnight()) {
      set_isnight(from.isnight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCalendarItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCalendarItem::CopyFrom(const OrderCalendarItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCalendarItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OrderCalendarItem::Swap(OrderCalendarItem* other) {
  if (other != this) {
    std::swap(days_, other->days_);
    std::swap(isafternoon_, other->isafternoon_);
    std::swap(isnight_, other->isnight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCalendarItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCalendarItem_descriptor_;
  metadata.reflection = OrderCalendarItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Order_Request::kMonthsFieldNumber;
const int GM_Order_Request::kDaysFieldNumber;
const int GM_Order_Request::kIsNoonOrNightFieldNumber;
#endif  // !_MSC_VER

GM_Order_Request::GM_Order_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Order_Request::InitAsDefaultInstance() {
}

GM_Order_Request::GM_Order_Request(const GM_Order_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Order_Request::SharedCtor() {
  _cached_size_ = 0;
  months_ = 0;
  days_ = 0;
  isnoonornight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Order_Request::~GM_Order_Request() {
  SharedDtor();
}

void GM_Order_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Order_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Order_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Order_Request_descriptor_;
}

const GM_Order_Request& GM_Order_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_Order_Request* GM_Order_Request::default_instance_ = NULL;

GM_Order_Request* GM_Order_Request::New() const {
  return new GM_Order_Request;
}

void GM_Order_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    months_ = 0;
    days_ = 0;
    isnoonornight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Order_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 months = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &months_)));
          set_has_months();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_days;
        break;
      }

      // required int32 days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isNoonOrNight;
        break;
      }

      // required int32 isNoonOrNight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNoonOrNight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnoonornight_)));
          set_has_isnoonornight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Order_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 months = 1;
  if (has_months()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->months(), output);
  }

  // required int32 days = 2;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->days(), output);
  }

  // required int32 isNoonOrNight = 3;
  if (has_isnoonornight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isnoonornight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Order_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 months = 1;
  if (has_months()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->months(), target);
  }

  // required int32 days = 2;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->days(), target);
  }

  // required int32 isNoonOrNight = 3;
  if (has_isnoonornight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isnoonornight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Order_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 months = 1;
    if (has_months()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->months());
    }

    // required int32 days = 2;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }

    // required int32 isNoonOrNight = 3;
    if (has_isnoonornight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnoonornight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Order_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Order_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Order_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Order_Request::MergeFrom(const GM_Order_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_months()) {
      set_months(from.months());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_isnoonornight()) {
      set_isnoonornight(from.isnoonornight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Order_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Order_Request::CopyFrom(const GM_Order_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Order_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Order_Request::Swap(GM_Order_Request* other) {
  if (other != this) {
    std::swap(months_, other->months_);
    std::swap(days_, other->days_);
    std::swap(isnoonornight_, other->isnoonornight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Order_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Order_Request_descriptor_;
  metadata.reflection = GM_Order_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Order_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_Order_Return::GM_Order_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Order_Return::InitAsDefaultInstance() {
}

GM_Order_Return::GM_Order_Return(const GM_Order_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Order_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Order_Return::~GM_Order_Return() {
  SharedDtor();
}

void GM_Order_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Order_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Order_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Order_Return_descriptor_;
}

const GM_Order_Return& GM_Order_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_Order_Return* GM_Order_Return::default_instance_ = NULL;

GM_Order_Return* GM_Order_Return::New() const {
  return new GM_Order_Return;
}

void GM_Order_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Order_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Order_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Order_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Order_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Order_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Order_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Order_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Order_Return::MergeFrom(const GM_Order_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Order_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Order_Return::CopyFrom(const GM_Order_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Order_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Order_Return::Swap(GM_Order_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Order_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Order_Return_descriptor_;
  metadata.reflection = GM_Order_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_WeddingCalendar_Return::kCountFieldNumber;
const int GM_WeddingCalendar_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_WeddingCalendar_Return::GM_WeddingCalendar_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_WeddingCalendar_Return::InitAsDefaultInstance() {
}

GM_WeddingCalendar_Return::GM_WeddingCalendar_Return(const GM_WeddingCalendar_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_WeddingCalendar_Return::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_WeddingCalendar_Return::~GM_WeddingCalendar_Return() {
  SharedDtor();
}

void GM_WeddingCalendar_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_WeddingCalendar_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_WeddingCalendar_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_WeddingCalendar_Return_descriptor_;
}

const GM_WeddingCalendar_Return& GM_WeddingCalendar_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

GM_WeddingCalendar_Return* GM_WeddingCalendar_Return::default_instance_ = NULL;

GM_WeddingCalendar_Return* GM_WeddingCalendar_Return::New() const {
  return new GM_WeddingCalendar_Return;
}

void GM_WeddingCalendar_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_WeddingCalendar_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .WeddingCalendarItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_WeddingCalendar_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .WeddingCalendarItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_WeddingCalendar_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .WeddingCalendarItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_WeddingCalendar_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .WeddingCalendarItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_WeddingCalendar_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_WeddingCalendar_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_WeddingCalendar_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_WeddingCalendar_Return::MergeFrom(const GM_WeddingCalendar_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_WeddingCalendar_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_WeddingCalendar_Return::CopyFrom(const GM_WeddingCalendar_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_WeddingCalendar_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_WeddingCalendar_Return::Swap(GM_WeddingCalendar_Return* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_WeddingCalendar_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_WeddingCalendar_Return_descriptor_;
  metadata.reflection = GM_WeddingCalendar_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingCalendarItem::kMarrytypeFieldNumber;
const int WeddingCalendarItem::kMtimeFieldNumber;
const int WeddingCalendarItem::kMannameFieldNumber;
const int WeddingCalendarItem::kWomannameFieldNumber;
#endif  // !_MSC_VER

WeddingCalendarItem::WeddingCalendarItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingCalendarItem::InitAsDefaultInstance() {
}

WeddingCalendarItem::WeddingCalendarItem(const WeddingCalendarItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingCalendarItem::SharedCtor() {
  _cached_size_ = 0;
  marrytype_ = 0;
  mtime_ = 0;
  manname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  womanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingCalendarItem::~WeddingCalendarItem() {
  SharedDtor();
}

void WeddingCalendarItem::SharedDtor() {
  if (manname_ != &::google::protobuf::internal::kEmptyString) {
    delete manname_;
  }
  if (womanname_ != &::google::protobuf::internal::kEmptyString) {
    delete womanname_;
  }
  if (this != default_instance_) {
  }
}

void WeddingCalendarItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingCalendarItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingCalendarItem_descriptor_;
}

const WeddingCalendarItem& WeddingCalendarItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_concentrictree_2etxt();
  return *default_instance_;
}

WeddingCalendarItem* WeddingCalendarItem::default_instance_ = NULL;

WeddingCalendarItem* WeddingCalendarItem::New() const {
  return new WeddingCalendarItem;
}

void WeddingCalendarItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marrytype_ = 0;
    mtime_ = 0;
    if (has_manname()) {
      if (manname_ != &::google::protobuf::internal::kEmptyString) {
        manname_->clear();
      }
    }
    if (has_womanname()) {
      if (womanname_ != &::google::protobuf::internal::kEmptyString) {
        womanname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingCalendarItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 marrytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marrytype_)));
          set_has_marrytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtime;
        break;
      }

      // required int32 mtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_manname;
        break;
      }

      // optional string manname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manname().data(), this->manname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_womanname;
        break;
      }

      // optional string womanname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_womanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_womanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->womanname().data(), this->womanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingCalendarItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 marrytype = 1;
  if (has_marrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->marrytype(), output);
  }

  // required int32 mtime = 2;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mtime(), output);
  }

  // optional string manname = 3;
  if (has_manname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manname().data(), this->manname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->manname(), output);
  }

  // optional string womanname = 4;
  if (has_womanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->womanname().data(), this->womanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->womanname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingCalendarItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 marrytype = 1;
  if (has_marrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->marrytype(), target);
  }

  // required int32 mtime = 2;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mtime(), target);
  }

  // optional string manname = 3;
  if (has_manname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manname().data(), this->manname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->manname(), target);
  }

  // optional string womanname = 4;
  if (has_womanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->womanname().data(), this->womanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->womanname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingCalendarItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 marrytype = 1;
    if (has_marrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marrytype());
    }

    // required int32 mtime = 2;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime());
    }

    // optional string manname = 3;
    if (has_manname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manname());
    }

    // optional string womanname = 4;
    if (has_womanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->womanname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingCalendarItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingCalendarItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingCalendarItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingCalendarItem::MergeFrom(const WeddingCalendarItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marrytype()) {
      set_marrytype(from.marrytype());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_manname()) {
      set_manname(from.manname());
    }
    if (from.has_womanname()) {
      set_womanname(from.womanname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingCalendarItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingCalendarItem::CopyFrom(const WeddingCalendarItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingCalendarItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WeddingCalendarItem::Swap(WeddingCalendarItem* other) {
  if (other != this) {
    std::swap(marrytype_, other->marrytype_);
    std::swap(mtime_, other->mtime_);
    std::swap(manname_, other->manname_);
    std::swap(womanname_, other->womanname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingCalendarItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingCalendarItem_descriptor_;
  metadata.reflection = WeddingCalendarItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
