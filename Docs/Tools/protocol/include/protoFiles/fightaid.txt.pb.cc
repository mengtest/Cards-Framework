// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fightaid.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fightaid.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMFightAidReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFightAidReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMObjectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMObjectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFightAidGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFightAidGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFightAidGetReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFightAidGetReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fightaid_2etxt() {
  protobuf_AddDesc_fightaid_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fightaid.txt");
  GOOGLE_CHECK(file != NULL);
  GMFightAidReturn_descriptor_ = file->message_type(0);
  static const int GMFightAidReturn_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, isaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, bagname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, bagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, chargenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, item_),
  };
  GMFightAidReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFightAidReturn_descriptor_,
      GMFightAidReturn::default_instance_,
      GMFightAidReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFightAidReturn));
  GMObjectData_descriptor_ = file->message_type(1);
  static const int GMObjectData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObjectData, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObjectData, objectnum_),
  };
  GMObjectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMObjectData_descriptor_,
      GMObjectData::default_instance_,
      GMObjectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObjectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMObjectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMObjectData));
  GMFightAidGetRequest_descriptor_ = file->message_type(2);
  static const int GMFightAidGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidGetRequest, bagid_),
  };
  GMFightAidGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFightAidGetRequest_descriptor_,
      GMFightAidGetRequest::default_instance_,
      GMFightAidGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFightAidGetRequest));
  GMFightAidGetReturn_descriptor_ = file->message_type(3);
  static const int GMFightAidGetReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidGetReturn, result_),
  };
  GMFightAidGetReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFightAidGetReturn_descriptor_,
      GMFightAidGetReturn::default_instance_,
      GMFightAidGetReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidGetReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightAidGetReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFightAidGetReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fightaid_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFightAidReturn_descriptor_, &GMFightAidReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMObjectData_descriptor_, &GMObjectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFightAidGetRequest_descriptor_, &GMFightAidGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFightAidGetReturn_descriptor_, &GMFightAidGetReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fightaid_2etxt() {
  delete GMFightAidReturn::default_instance_;
  delete GMFightAidReturn_reflection_;
  delete GMObjectData::default_instance_;
  delete GMObjectData_reflection_;
  delete GMFightAidGetRequest::default_instance_;
  delete GMFightAidGetRequest_reflection_;
  delete GMFightAidGetReturn::default_instance_;
  delete GMFightAidGetReturn_reflection_;
}

void protobuf_AddDesc_fightaid_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014fightaid.txt\"\222\001\n\020GMFightAidReturn\022\r\n\005i"
    "sAid\030\001 \002(\005\022\017\n\007bagName\030\002 \001(\t\022\r\n\005bagId\030\003 \001"
    "(\005\022\020\n\010leftTime\030\004 \001(\005\022\r\n\005value\030\005 \001(\005\022\021\n\tc"
    "hargeNum\030\006 \001(\005\022\033\n\004Item\030\007 \003(\0132\r.GMObjectD"
    "ata\"3\n\014GMObjectData\022\020\n\010objectId\030\001 \002(\005\022\021\n"
    "\tobjectNum\030\002 \002(\005\"%\n\024GMFightAidGetRequest"
    "\022\r\n\005bagid\030\001 \002(\005\"%\n\023GMFightAidGetReturn\022\016"
    "\n\006result\030\001 \002(\005", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fightaid.txt", &protobuf_RegisterTypes);
  GMFightAidReturn::default_instance_ = new GMFightAidReturn();
  GMObjectData::default_instance_ = new GMObjectData();
  GMFightAidGetRequest::default_instance_ = new GMFightAidGetRequest();
  GMFightAidGetReturn::default_instance_ = new GMFightAidGetReturn();
  GMFightAidReturn::default_instance_->InitAsDefaultInstance();
  GMObjectData::default_instance_->InitAsDefaultInstance();
  GMFightAidGetRequest::default_instance_->InitAsDefaultInstance();
  GMFightAidGetReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fightaid_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fightaid_2etxt {
  StaticDescriptorInitializer_fightaid_2etxt() {
    protobuf_AddDesc_fightaid_2etxt();
  }
} static_descriptor_initializer_fightaid_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMFightAidReturn::kIsAidFieldNumber;
const int GMFightAidReturn::kBagNameFieldNumber;
const int GMFightAidReturn::kBagIdFieldNumber;
const int GMFightAidReturn::kLeftTimeFieldNumber;
const int GMFightAidReturn::kValueFieldNumber;
const int GMFightAidReturn::kChargeNumFieldNumber;
const int GMFightAidReturn::kItemFieldNumber;
#endif  // !_MSC_VER

GMFightAidReturn::GMFightAidReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFightAidReturn::InitAsDefaultInstance() {
}

GMFightAidReturn::GMFightAidReturn(const GMFightAidReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFightAidReturn::SharedCtor() {
  _cached_size_ = 0;
  isaid_ = 0;
  bagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bagid_ = 0;
  lefttime_ = 0;
  value_ = 0;
  chargenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFightAidReturn::~GMFightAidReturn() {
  SharedDtor();
}

void GMFightAidReturn::SharedDtor() {
  if (bagname_ != &::google::protobuf::internal::kEmptyString) {
    delete bagname_;
  }
  if (this != default_instance_) {
  }
}

void GMFightAidReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFightAidReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightAidReturn_descriptor_;
}

const GMFightAidReturn& GMFightAidReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightaid_2etxt();
  return *default_instance_;
}

GMFightAidReturn* GMFightAidReturn::default_instance_ = NULL;

GMFightAidReturn* GMFightAidReturn::New() const {
  return new GMFightAidReturn;
}

void GMFightAidReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isaid_ = 0;
    if (has_bagname()) {
      if (bagname_ != &::google::protobuf::internal::kEmptyString) {
        bagname_->clear();
      }
    }
    bagid_ = 0;
    lefttime_ = 0;
    value_ = 0;
    chargenum_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFightAidReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaid_)));
          set_has_isaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bagName;
        break;
      }

      // optional string bagName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bagname().data(), this->bagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bagId;
        break;
      }

      // optional int32 bagId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagid_)));
          set_has_bagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chargeNum;
        break;
      }

      // optional int32 chargeNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargenum_)));
          set_has_chargenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Item;
        break;
      }

      // repeated .GMObjectData Item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFightAidReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAid = 1;
  if (has_isaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isaid(), output);
  }

  // optional string bagName = 2;
  if (has_bagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bagname().data(), this->bagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bagname(), output);
  }

  // optional int32 bagId = 3;
  if (has_bagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bagid(), output);
  }

  // optional int32 leftTime = 4;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lefttime(), output);
  }

  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }

  // optional int32 chargeNum = 6;
  if (has_chargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chargenum(), output);
  }

  // repeated .GMObjectData Item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFightAidReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAid = 1;
  if (has_isaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isaid(), target);
  }

  // optional string bagName = 2;
  if (has_bagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bagname().data(), this->bagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bagname(), target);
  }

  // optional int32 bagId = 3;
  if (has_bagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bagid(), target);
  }

  // optional int32 leftTime = 4;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lefttime(), target);
  }

  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }

  // optional int32 chargeNum = 6;
  if (has_chargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chargenum(), target);
  }

  // repeated .GMObjectData Item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFightAidReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAid = 1;
    if (has_isaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaid());
    }

    // optional string bagName = 2;
    if (has_bagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bagname());
    }

    // optional int32 bagId = 3;
    if (has_bagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagid());
    }

    // optional int32 leftTime = 4;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 chargeNum = 6;
    if (has_chargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargenum());
    }

  }
  // repeated .GMObjectData Item = 7;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFightAidReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFightAidReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFightAidReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFightAidReturn::MergeFrom(const GMFightAidReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isaid()) {
      set_isaid(from.isaid());
    }
    if (from.has_bagname()) {
      set_bagname(from.bagname());
    }
    if (from.has_bagid()) {
      set_bagid(from.bagid());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_chargenum()) {
      set_chargenum(from.chargenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFightAidReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFightAidReturn::CopyFrom(const GMFightAidReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFightAidReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GMFightAidReturn::Swap(GMFightAidReturn* other) {
  if (other != this) {
    std::swap(isaid_, other->isaid_);
    std::swap(bagname_, other->bagname_);
    std::swap(bagid_, other->bagid_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(value_, other->value_);
    std::swap(chargenum_, other->chargenum_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFightAidReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFightAidReturn_descriptor_;
  metadata.reflection = GMFightAidReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMObjectData::kObjectIdFieldNumber;
const int GMObjectData::kObjectNumFieldNumber;
#endif  // !_MSC_VER

GMObjectData::GMObjectData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMObjectData::InitAsDefaultInstance() {
}

GMObjectData::GMObjectData(const GMObjectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMObjectData::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMObjectData::~GMObjectData() {
  SharedDtor();
}

void GMObjectData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMObjectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMObjectData_descriptor_;
}

const GMObjectData& GMObjectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightaid_2etxt();
  return *default_instance_;
}

GMObjectData* GMObjectData::default_instance_ = NULL;

GMObjectData* GMObjectData::New() const {
  return new GMObjectData;
}

void GMObjectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectNum;
        break;
      }

      // required int32 objectNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required int32 objectNum = 2;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMObjectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required int32 objectNum = 2;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMObjectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 objectNum = 2;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMObjectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMObjectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMObjectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMObjectData::MergeFrom(const GMObjectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMObjectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMObjectData::CopyFrom(const GMObjectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMObjectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMObjectData::Swap(GMObjectData* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMObjectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMObjectData_descriptor_;
  metadata.reflection = GMObjectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMFightAidGetRequest::kBagidFieldNumber;
#endif  // !_MSC_VER

GMFightAidGetRequest::GMFightAidGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFightAidGetRequest::InitAsDefaultInstance() {
}

GMFightAidGetRequest::GMFightAidGetRequest(const GMFightAidGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFightAidGetRequest::SharedCtor() {
  _cached_size_ = 0;
  bagid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFightAidGetRequest::~GMFightAidGetRequest() {
  SharedDtor();
}

void GMFightAidGetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMFightAidGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFightAidGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightAidGetRequest_descriptor_;
}

const GMFightAidGetRequest& GMFightAidGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightaid_2etxt();
  return *default_instance_;
}

GMFightAidGetRequest* GMFightAidGetRequest::default_instance_ = NULL;

GMFightAidGetRequest* GMFightAidGetRequest::New() const {
  return new GMFightAidGetRequest;
}

void GMFightAidGetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFightAidGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bagid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagid_)));
          set_has_bagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFightAidGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bagid = 1;
  if (has_bagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFightAidGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bagid = 1;
  if (has_bagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFightAidGetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bagid = 1;
    if (has_bagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFightAidGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFightAidGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFightAidGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFightAidGetRequest::MergeFrom(const GMFightAidGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagid()) {
      set_bagid(from.bagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFightAidGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFightAidGetRequest::CopyFrom(const GMFightAidGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFightAidGetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMFightAidGetRequest::Swap(GMFightAidGetRequest* other) {
  if (other != this) {
    std::swap(bagid_, other->bagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFightAidGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFightAidGetRequest_descriptor_;
  metadata.reflection = GMFightAidGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMFightAidGetReturn::kResultFieldNumber;
#endif  // !_MSC_VER

GMFightAidGetReturn::GMFightAidGetReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFightAidGetReturn::InitAsDefaultInstance() {
}

GMFightAidGetReturn::GMFightAidGetReturn(const GMFightAidGetReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFightAidGetReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFightAidGetReturn::~GMFightAidGetReturn() {
  SharedDtor();
}

void GMFightAidGetReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMFightAidGetReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFightAidGetReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightAidGetReturn_descriptor_;
}

const GMFightAidGetReturn& GMFightAidGetReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightaid_2etxt();
  return *default_instance_;
}

GMFightAidGetReturn* GMFightAidGetReturn::default_instance_ = NULL;

GMFightAidGetReturn* GMFightAidGetReturn::New() const {
  return new GMFightAidGetReturn;
}

void GMFightAidGetReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFightAidGetReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFightAidGetReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFightAidGetReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFightAidGetReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFightAidGetReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFightAidGetReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFightAidGetReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFightAidGetReturn::MergeFrom(const GMFightAidGetReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFightAidGetReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFightAidGetReturn::CopyFrom(const GMFightAidGetReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFightAidGetReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMFightAidGetReturn::Swap(GMFightAidGetReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFightAidGetReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFightAidGetReturn_descriptor_;
  metadata.reflection = GMFightAidGetReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
