// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Marry.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Marry.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DB_MarryDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_MarryDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_ConTreeDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_ConTreeDataReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConTreeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConTreeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB_CoupleDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_CoupleDataReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fMarry_2etxt() {
  protobuf_AddDesc_SP_5fMarry_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Marry.txt");
  GOOGLE_CHECK(file != NULL);
  DB_MarryDataRequest_descriptor_ = file->message_type(0);
  static const int DB_MarryDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MarryDataRequest, m_roleid_),
  };
  DB_MarryDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_MarryDataRequest_descriptor_,
      DB_MarryDataRequest::default_instance_,
      DB_MarryDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MarryDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_MarryDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_MarryDataRequest));
  DB_ConTreeDataReturn_descriptor_ = file->message_type(1);
  static const int DB_ConTreeDataReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ConTreeDataReturn, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ConTreeDataReturn, item_),
  };
  DB_ConTreeDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_ConTreeDataReturn_descriptor_,
      DB_ConTreeDataReturn::default_instance_,
      DB_ConTreeDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ConTreeDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_ConTreeDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_ConTreeDataReturn));
  ConTreeData_descriptor_ = file->message_type(2);
  static const int ConTreeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConTreeData, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConTreeData, treelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConTreeData, treeexp_),
  };
  ConTreeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConTreeData_descriptor_,
      ConTreeData::default_instance_,
      ConTreeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConTreeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConTreeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConTreeData));
  DB_CoupleDataReturn_descriptor_ = file->message_type(3);
  static const int DB_CoupleDataReturn_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, tree_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, marrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, marriagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, lastgettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, divorcetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, marrystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, ordertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, ordercount_),
  };
  DB_CoupleDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_CoupleDataReturn_descriptor_,
      DB_CoupleDataReturn::default_instance_,
      DB_CoupleDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_CoupleDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_CoupleDataReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fMarry_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_MarryDataRequest_descriptor_, &DB_MarryDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_ConTreeDataReturn_descriptor_, &DB_ConTreeDataReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConTreeData_descriptor_, &ConTreeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_CoupleDataReturn_descriptor_, &DB_CoupleDataReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fMarry_2etxt() {
  delete DB_MarryDataRequest::default_instance_;
  delete DB_MarryDataRequest_reflection_;
  delete DB_ConTreeDataReturn::default_instance_;
  delete DB_ConTreeDataReturn_reflection_;
  delete ConTreeData::default_instance_;
  delete ConTreeData_reflection_;
  delete DB_CoupleDataReturn::default_instance_;
  delete DB_CoupleDataReturn_reflection_;
}

void protobuf_AddDesc_SP_5fMarry_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014SP_Marry.txt\"\'\n\023DB_MarryDataRequest\022\020\n"
    "\010m_roleId\030\001 \002(\005\"C\n\024DB_ConTreeDataReturn\022"
    "\017\n\007m_count\030\001 \002(\003\022\032\n\004item\030\002 \003(\0132\014.ConTree"
    "Data\"<\n\013ConTreeData\022\014\n\004gmid\030\001 \002(\003\022\016\n\006tre"
    "elv\030\002 \002(\005\022\017\n\007treeexp\030\003 \002(\005\"\306\001\n\023DB_Couple"
    "DataReturn\022\016\n\006roleid\030\001 \002(\005\022\021\n\ttree_gmid\030"
    "\002 \001(\003\022\021\n\tmarrytype\030\003 \001(\005\022\024\n\014marriagetime"
    "\030\004 \001(\005\022\023\n\013lastgettime\030\005 \001(\005\022\023\n\013divorceti"
    "me\030\006 \001(\005\022\022\n\nmarrystate\030\007 \001(\005\022\021\n\tordertim"
    "e\030\010 \001(\005\022\022\n\nordercount\030\t \001(\005", 387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Marry.txt", &protobuf_RegisterTypes);
  DB_MarryDataRequest::default_instance_ = new DB_MarryDataRequest();
  DB_ConTreeDataReturn::default_instance_ = new DB_ConTreeDataReturn();
  ConTreeData::default_instance_ = new ConTreeData();
  DB_CoupleDataReturn::default_instance_ = new DB_CoupleDataReturn();
  DB_MarryDataRequest::default_instance_->InitAsDefaultInstance();
  DB_ConTreeDataReturn::default_instance_->InitAsDefaultInstance();
  ConTreeData::default_instance_->InitAsDefaultInstance();
  DB_CoupleDataReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fMarry_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fMarry_2etxt {
  StaticDescriptorInitializer_SP_5fMarry_2etxt() {
    protobuf_AddDesc_SP_5fMarry_2etxt();
  }
} static_descriptor_initializer_SP_5fMarry_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int DB_MarryDataRequest::kMRoleIdFieldNumber;
#endif  // !_MSC_VER

DB_MarryDataRequest::DB_MarryDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_MarryDataRequest::InitAsDefaultInstance() {
}

DB_MarryDataRequest::DB_MarryDataRequest(const DB_MarryDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_MarryDataRequest::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_MarryDataRequest::~DB_MarryDataRequest() {
  SharedDtor();
}

void DB_MarryDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_MarryDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_MarryDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MarryDataRequest_descriptor_;
}

const DB_MarryDataRequest& DB_MarryDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMarry_2etxt();
  return *default_instance_;
}

DB_MarryDataRequest* DB_MarryDataRequest::default_instance_ = NULL;

DB_MarryDataRequest* DB_MarryDataRequest::New() const {
  return new DB_MarryDataRequest;
}

void DB_MarryDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_MarryDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_MarryDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_MarryDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_MarryDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_MarryDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_MarryDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_MarryDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_MarryDataRequest::MergeFrom(const DB_MarryDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_MarryDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_MarryDataRequest::CopyFrom(const DB_MarryDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_MarryDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_MarryDataRequest::Swap(DB_MarryDataRequest* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_MarryDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_MarryDataRequest_descriptor_;
  metadata.reflection = DB_MarryDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_ConTreeDataReturn::kMCountFieldNumber;
const int DB_ConTreeDataReturn::kItemFieldNumber;
#endif  // !_MSC_VER

DB_ConTreeDataReturn::DB_ConTreeDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_ConTreeDataReturn::InitAsDefaultInstance() {
}

DB_ConTreeDataReturn::DB_ConTreeDataReturn(const DB_ConTreeDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_ConTreeDataReturn::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_ConTreeDataReturn::~DB_ConTreeDataReturn() {
  SharedDtor();
}

void DB_ConTreeDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_ConTreeDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_ConTreeDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_ConTreeDataReturn_descriptor_;
}

const DB_ConTreeDataReturn& DB_ConTreeDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMarry_2etxt();
  return *default_instance_;
}

DB_ConTreeDataReturn* DB_ConTreeDataReturn::default_instance_ = NULL;

DB_ConTreeDataReturn* DB_ConTreeDataReturn::New() const {
  return new DB_ConTreeDataReturn;
}

void DB_ConTreeDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_ConTreeDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .ConTreeData item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_ConTreeDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_count(), output);
  }

  // repeated .ConTreeData item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_ConTreeDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_count(), target);
  }

  // repeated .ConTreeData item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_ConTreeDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_count());
    }

  }
  // repeated .ConTreeData item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_ConTreeDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_ConTreeDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_ConTreeDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_ConTreeDataReturn::MergeFrom(const DB_ConTreeDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_ConTreeDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_ConTreeDataReturn::CopyFrom(const DB_ConTreeDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_ConTreeDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void DB_ConTreeDataReturn::Swap(DB_ConTreeDataReturn* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_ConTreeDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_ConTreeDataReturn_descriptor_;
  metadata.reflection = DB_ConTreeDataReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConTreeData::kGmidFieldNumber;
const int ConTreeData::kTreelvFieldNumber;
const int ConTreeData::kTreeexpFieldNumber;
#endif  // !_MSC_VER

ConTreeData::ConTreeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConTreeData::InitAsDefaultInstance() {
}

ConTreeData::ConTreeData(const ConTreeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConTreeData::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  treelv_ = 0;
  treeexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConTreeData::~ConTreeData() {
  SharedDtor();
}

void ConTreeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConTreeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConTreeData_descriptor_;
}

const ConTreeData& ConTreeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMarry_2etxt();
  return *default_instance_;
}

ConTreeData* ConTreeData::default_instance_ = NULL;

ConTreeData* ConTreeData::New() const {
  return new ConTreeData;
}

void ConTreeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    treelv_ = 0;
    treeexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treelv;
        break;
      }

      // required int32 treelv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treelv_)));
          set_has_treelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treeexp;
        break;
      }

      // required int32 treeexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treeexp_)));
          set_has_treeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // required int32 treelv = 2;
  if (has_treelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->treelv(), output);
  }

  // required int32 treeexp = 3;
  if (has_treeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->treeexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConTreeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // required int32 treelv = 2;
  if (has_treelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->treelv(), target);
  }

  // required int32 treeexp = 3;
  if (has_treeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->treeexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConTreeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // required int32 treelv = 2;
    if (has_treelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treelv());
    }

    // required int32 treeexp = 3;
    if (has_treeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treeexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConTreeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConTreeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConTreeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConTreeData::MergeFrom(const ConTreeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_treelv()) {
      set_treelv(from.treelv());
    }
    if (from.has_treeexp()) {
      set_treeexp(from.treeexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConTreeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConTreeData::CopyFrom(const ConTreeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConTreeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConTreeData::Swap(ConTreeData* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(treelv_, other->treelv_);
    std::swap(treeexp_, other->treeexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConTreeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConTreeData_descriptor_;
  metadata.reflection = ConTreeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_CoupleDataReturn::kRoleidFieldNumber;
const int DB_CoupleDataReturn::kTreeGmidFieldNumber;
const int DB_CoupleDataReturn::kMarrytypeFieldNumber;
const int DB_CoupleDataReturn::kMarriagetimeFieldNumber;
const int DB_CoupleDataReturn::kLastgettimeFieldNumber;
const int DB_CoupleDataReturn::kDivorcetimeFieldNumber;
const int DB_CoupleDataReturn::kMarrystateFieldNumber;
const int DB_CoupleDataReturn::kOrdertimeFieldNumber;
const int DB_CoupleDataReturn::kOrdercountFieldNumber;
#endif  // !_MSC_VER

DB_CoupleDataReturn::DB_CoupleDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_CoupleDataReturn::InitAsDefaultInstance() {
}

DB_CoupleDataReturn::DB_CoupleDataReturn(const DB_CoupleDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_CoupleDataReturn::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  tree_gmid_ = GOOGLE_LONGLONG(0);
  marrytype_ = 0;
  marriagetime_ = 0;
  lastgettime_ = 0;
  divorcetime_ = 0;
  marrystate_ = 0;
  ordertime_ = 0;
  ordercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_CoupleDataReturn::~DB_CoupleDataReturn() {
  SharedDtor();
}

void DB_CoupleDataReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB_CoupleDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_CoupleDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_CoupleDataReturn_descriptor_;
}

const DB_CoupleDataReturn& DB_CoupleDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMarry_2etxt();
  return *default_instance_;
}

DB_CoupleDataReturn* DB_CoupleDataReturn::default_instance_ = NULL;

DB_CoupleDataReturn* DB_CoupleDataReturn::New() const {
  return new DB_CoupleDataReturn;
}

void DB_CoupleDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    tree_gmid_ = GOOGLE_LONGLONG(0);
    marrytype_ = 0;
    marriagetime_ = 0;
    lastgettime_ = 0;
    divorcetime_ = 0;
    marrystate_ = 0;
    ordertime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ordercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_CoupleDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tree_gmid;
        break;
      }

      // optional int64 tree_gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tree_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tree_gmid_)));
          set_has_tree_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_marrytype;
        break;
      }

      // optional int32 marrytype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marrytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marrytype_)));
          set_has_marrytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_marriagetime;
        break;
      }

      // optional int32 marriagetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marriagetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marriagetime_)));
          set_has_marriagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastgettime;
        break;
      }

      // optional int32 lastgettime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastgettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastgettime_)));
          set_has_lastgettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_divorcetime;
        break;
      }

      // optional int32 divorcetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divorcetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divorcetime_)));
          set_has_divorcetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_marrystate;
        break;
      }

      // optional int32 marrystate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marrystate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marrystate_)));
          set_has_marrystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ordertime;
        break;
      }

      // optional int32 ordertime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertime_)));
          set_has_ordertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ordercount;
        break;
      }

      // optional int32 ordercount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordercount_)));
          set_has_ordercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_CoupleDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int64 tree_gmid = 2;
  if (has_tree_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tree_gmid(), output);
  }

  // optional int32 marrytype = 3;
  if (has_marrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->marrytype(), output);
  }

  // optional int32 marriagetime = 4;
  if (has_marriagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->marriagetime(), output);
  }

  // optional int32 lastgettime = 5;
  if (has_lastgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastgettime(), output);
  }

  // optional int32 divorcetime = 6;
  if (has_divorcetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->divorcetime(), output);
  }

  // optional int32 marrystate = 7;
  if (has_marrystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->marrystate(), output);
  }

  // optional int32 ordertime = 8;
  if (has_ordertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ordertime(), output);
  }

  // optional int32 ordercount = 9;
  if (has_ordercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ordercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_CoupleDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int64 tree_gmid = 2;
  if (has_tree_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tree_gmid(), target);
  }

  // optional int32 marrytype = 3;
  if (has_marrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->marrytype(), target);
  }

  // optional int32 marriagetime = 4;
  if (has_marriagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->marriagetime(), target);
  }

  // optional int32 lastgettime = 5;
  if (has_lastgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastgettime(), target);
  }

  // optional int32 divorcetime = 6;
  if (has_divorcetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->divorcetime(), target);
  }

  // optional int32 marrystate = 7;
  if (has_marrystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->marrystate(), target);
  }

  // optional int32 ordertime = 8;
  if (has_ordertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ordertime(), target);
  }

  // optional int32 ordercount = 9;
  if (has_ordercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ordercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_CoupleDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int64 tree_gmid = 2;
    if (has_tree_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tree_gmid());
    }

    // optional int32 marrytype = 3;
    if (has_marrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marrytype());
    }

    // optional int32 marriagetime = 4;
    if (has_marriagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marriagetime());
    }

    // optional int32 lastgettime = 5;
    if (has_lastgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastgettime());
    }

    // optional int32 divorcetime = 6;
    if (has_divorcetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divorcetime());
    }

    // optional int32 marrystate = 7;
    if (has_marrystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marrystate());
    }

    // optional int32 ordertime = 8;
    if (has_ordertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ordercount = 9;
    if (has_ordercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_CoupleDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_CoupleDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_CoupleDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_CoupleDataReturn::MergeFrom(const DB_CoupleDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_tree_gmid()) {
      set_tree_gmid(from.tree_gmid());
    }
    if (from.has_marrytype()) {
      set_marrytype(from.marrytype());
    }
    if (from.has_marriagetime()) {
      set_marriagetime(from.marriagetime());
    }
    if (from.has_lastgettime()) {
      set_lastgettime(from.lastgettime());
    }
    if (from.has_divorcetime()) {
      set_divorcetime(from.divorcetime());
    }
    if (from.has_marrystate()) {
      set_marrystate(from.marrystate());
    }
    if (from.has_ordertime()) {
      set_ordertime(from.ordertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordercount()) {
      set_ordercount(from.ordercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_CoupleDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_CoupleDataReturn::CopyFrom(const DB_CoupleDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_CoupleDataReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DB_CoupleDataReturn::Swap(DB_CoupleDataReturn* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(tree_gmid_, other->tree_gmid_);
    std::swap(marrytype_, other->marrytype_);
    std::swap(marriagetime_, other->marriagetime_);
    std::swap(lastgettime_, other->lastgettime_);
    std::swap(divorcetime_, other->divorcetime_);
    std::swap(marrystate_, other->marrystate_);
    std::swap(ordertime_, other->ordertime_);
    std::swap(ordercount_, other->ordercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_CoupleDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_CoupleDataReturn_descriptor_;
  metadata.reflection = DB_CoupleDataReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
