// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_sealAccount.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_sealAccount.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SP_SealAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SP_SealAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* SP_SealAccountReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SP_SealAccountReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fsealAccount_2etxt() {
  protobuf_AddDesc_SP_5fsealAccount_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_sealAccount.txt");
  GOOGLE_CHECK(file != NULL);
  SP_SealAccount_descriptor_ = file->message_type(0);
  static const int SP_SealAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccount, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccount, sealtime_),
  };
  SP_SealAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SP_SealAccount_descriptor_,
      SP_SealAccount::default_instance_,
      SP_SealAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SP_SealAccount));
  SP_SealAccountReturn_descriptor_ = file->message_type(1);
  static const int SP_SealAccountReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccountReturn, sealaccount_),
  };
  SP_SealAccountReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SP_SealAccountReturn_descriptor_,
      SP_SealAccountReturn::default_instance_,
      SP_SealAccountReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccountReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SP_SealAccountReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SP_SealAccountReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fsealAccount_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SP_SealAccount_descriptor_, &SP_SealAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SP_SealAccountReturn_descriptor_, &SP_SealAccountReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fsealAccount_2etxt() {
  delete SP_SealAccount::default_instance_;
  delete SP_SealAccount_reflection_;
  delete SP_SealAccountReturn::default_instance_;
  delete SP_SealAccountReturn_reflection_;
}

void protobuf_AddDesc_SP_5fsealAccount_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022SP_sealAccount.txt\"5\n\016SP_SealAccount\022\021"
    "\n\taccountid\030\001 \002(\005\022\020\n\010sealTime\030\002 \002(\t\"<\n\024S"
    "P_SealAccountReturn\022$\n\013sealAccount\030\001 \003(\013"
    "2\017.SP_SealAccount", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_sealAccount.txt", &protobuf_RegisterTypes);
  SP_SealAccount::default_instance_ = new SP_SealAccount();
  SP_SealAccountReturn::default_instance_ = new SP_SealAccountReturn();
  SP_SealAccount::default_instance_->InitAsDefaultInstance();
  SP_SealAccountReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fsealAccount_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fsealAccount_2etxt {
  StaticDescriptorInitializer_SP_5fsealAccount_2etxt() {
    protobuf_AddDesc_SP_5fsealAccount_2etxt();
  }
} static_descriptor_initializer_SP_5fsealAccount_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SP_SealAccount::kAccountidFieldNumber;
const int SP_SealAccount::kSealTimeFieldNumber;
#endif  // !_MSC_VER

SP_SealAccount::SP_SealAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SP_SealAccount::InitAsDefaultInstance() {
}

SP_SealAccount::SP_SealAccount(const SP_SealAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SP_SealAccount::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0;
  sealtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SP_SealAccount::~SP_SealAccount() {
  SharedDtor();
}

void SP_SealAccount::SharedDtor() {
  if (sealtime_ != &::google::protobuf::internal::kEmptyString) {
    delete sealtime_;
  }
  if (this != default_instance_) {
  }
}

void SP_SealAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SP_SealAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SP_SealAccount_descriptor_;
}

const SP_SealAccount& SP_SealAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fsealAccount_2etxt();
  return *default_instance_;
}

SP_SealAccount* SP_SealAccount::default_instance_ = NULL;

SP_SealAccount* SP_SealAccount::New() const {
  return new SP_SealAccount;
}

void SP_SealAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0;
    if (has_sealtime()) {
      if (sealtime_ != &::google::protobuf::internal::kEmptyString) {
        sealtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SP_SealAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sealTime;
        break;
      }

      // required string sealTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sealTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sealtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sealtime().data(), this->sealtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SP_SealAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->accountid(), output);
  }

  // required string sealTime = 2;
  if (has_sealtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sealtime().data(), this->sealtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sealtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SP_SealAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->accountid(), target);
  }

  // required string sealTime = 2;
  if (has_sealtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sealtime().data(), this->sealtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sealtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SP_SealAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // required string sealTime = 2;
    if (has_sealtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sealtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SP_SealAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SP_SealAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SP_SealAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SP_SealAccount::MergeFrom(const SP_SealAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_sealtime()) {
      set_sealtime(from.sealtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SP_SealAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SP_SealAccount::CopyFrom(const SP_SealAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SP_SealAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SP_SealAccount::Swap(SP_SealAccount* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(sealtime_, other->sealtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SP_SealAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SP_SealAccount_descriptor_;
  metadata.reflection = SP_SealAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SP_SealAccountReturn::kSealAccountFieldNumber;
#endif  // !_MSC_VER

SP_SealAccountReturn::SP_SealAccountReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SP_SealAccountReturn::InitAsDefaultInstance() {
}

SP_SealAccountReturn::SP_SealAccountReturn(const SP_SealAccountReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SP_SealAccountReturn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SP_SealAccountReturn::~SP_SealAccountReturn() {
  SharedDtor();
}

void SP_SealAccountReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SP_SealAccountReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SP_SealAccountReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SP_SealAccountReturn_descriptor_;
}

const SP_SealAccountReturn& SP_SealAccountReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fsealAccount_2etxt();
  return *default_instance_;
}

SP_SealAccountReturn* SP_SealAccountReturn::default_instance_ = NULL;

SP_SealAccountReturn* SP_SealAccountReturn::New() const {
  return new SP_SealAccountReturn;
}

void SP_SealAccountReturn::Clear() {
  sealaccount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SP_SealAccountReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SP_SealAccount sealAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sealAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sealaccount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sealAccount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SP_SealAccountReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SP_SealAccount sealAccount = 1;
  for (int i = 0; i < this->sealaccount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sealaccount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SP_SealAccountReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SP_SealAccount sealAccount = 1;
  for (int i = 0; i < this->sealaccount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sealaccount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SP_SealAccountReturn::ByteSize() const {
  int total_size = 0;

  // repeated .SP_SealAccount sealAccount = 1;
  total_size += 1 * this->sealaccount_size();
  for (int i = 0; i < this->sealaccount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sealaccount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SP_SealAccountReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SP_SealAccountReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SP_SealAccountReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SP_SealAccountReturn::MergeFrom(const SP_SealAccountReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  sealaccount_.MergeFrom(from.sealaccount_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SP_SealAccountReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SP_SealAccountReturn::CopyFrom(const SP_SealAccountReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SP_SealAccountReturn::IsInitialized() const {

  for (int i = 0; i < sealaccount_size(); i++) {
    if (!this->sealaccount(i).IsInitialized()) return false;
  }
  return true;
}

void SP_SealAccountReturn::Swap(SP_SealAccountReturn* other) {
  if (other != this) {
    sealaccount_.Swap(&other->sealaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SP_SealAccountReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SP_SealAccountReturn_descriptor_;
  metadata.reflection = SP_SealAccountReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
