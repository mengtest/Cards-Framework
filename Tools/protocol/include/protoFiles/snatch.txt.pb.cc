// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snatch.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snatch.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Snatch_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_BuyIfno_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_BuyIfno_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_AllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_AllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_Look_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Look_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_Look_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Look_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_DoSnatch_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_DoSnatch_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_DoSnatch_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_DoSnatch_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_DoSnatch_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_DoSnatch_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_DoMulSnatch_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_DoMulSnatch_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_BuyPeace_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_BuyPeace_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_BuyPeace_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_BuyPeace_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_Compound_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Compound_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_Compound_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Compound_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CompoundObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CompoundObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_Item_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Item_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_SwitchCardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_SwitchCardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_SwitchCard_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_SwitchCard_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_SwitchCard_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_SwitchCard_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_Reward_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_Reward_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Snatch_PeaceTime_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Snatch_PeaceTime_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_snatch_2etxt() {
  protobuf_AddDesc_snatch_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snatch.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Snatch_Item_descriptor_ = file->message_type(0);
  static const int GM_Snatch_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item, count_),
  };
  GM_Snatch_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Item_descriptor_,
      GM_Snatch_Item::default_instance_,
      GM_Snatch_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Item));
  GM_Snatch_BuyIfno_descriptor_ = file->message_type(1);
  static const int GM_Snatch_BuyIfno_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyIfno, buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyIfno, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyIfno, peaceminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyIfno, objectid_),
  };
  GM_Snatch_BuyIfno_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_BuyIfno_descriptor_,
      GM_Snatch_BuyIfno::default_instance_,
      GM_Snatch_BuyIfno_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyIfno, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyIfno, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_BuyIfno));
  GM_Snatch_AllInfo_descriptor_ = file->message_type(2);
  static const int GM_Snatch_AllInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_AllInfo, peacetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_AllInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_AllInfo, buyinfo_),
  };
  GM_Snatch_AllInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_AllInfo_descriptor_,
      GM_Snatch_AllInfo::default_instance_,
      GM_Snatch_AllInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_AllInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_AllInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_AllInfo));
  GM_Snatch_Look_Request_descriptor_ = file->message_type(3);
  static const int GM_Snatch_Look_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Request, pieceid_),
  };
  GM_Snatch_Look_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Look_Request_descriptor_,
      GM_Snatch_Look_Request::default_instance_,
      GM_Snatch_Look_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Look_Request));
  GM_Snatch_PlayerInfo_descriptor_ = file->message_type(4);
  static const int GM_Snatch_PlayerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, rolepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, rolepro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, probability_),
  };
  GM_Snatch_PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_PlayerInfo_descriptor_,
      GM_Snatch_PlayerInfo::default_instance_,
      GM_Snatch_PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_PlayerInfo));
  GM_Snatch_Look_Return_descriptor_ = file->message_type(5);
  static const int GM_Snatch_Look_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Return, m_playerinfo_),
  };
  GM_Snatch_Look_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Look_Return_descriptor_,
      GM_Snatch_Look_Return::default_instance_,
      GM_Snatch_Look_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Look_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Look_Return));
  GM_Snatch_DoSnatch_Request_descriptor_ = file->message_type(6);
  static const int GM_Snatch_DoSnatch_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Request, pieceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Request, rolepos_),
  };
  GM_Snatch_DoSnatch_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_DoSnatch_Request_descriptor_,
      GM_Snatch_DoSnatch_Request::default_instance_,
      GM_Snatch_DoSnatch_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_DoSnatch_Request));
  GM_Snatch_DoSnatch_Result_descriptor_ = file->message_type(7);
  static const int GM_Snatch_DoSnatch_Result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, pieceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, addgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, costexpval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, isget_),
  };
  GM_Snatch_DoSnatch_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_DoSnatch_Result_descriptor_,
      GM_Snatch_DoSnatch_Result::default_instance_,
      GM_Snatch_DoSnatch_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_DoSnatch_Result));
  GM_Snatch_DoSnatch_Return_descriptor_ = file->message_type(8);
  static const int GM_Snatch_DoSnatch_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Return, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Return, peacetime_),
  };
  GM_Snatch_DoSnatch_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_DoSnatch_Return_descriptor_,
      GM_Snatch_DoSnatch_Return::default_instance_,
      GM_Snatch_DoSnatch_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoSnatch_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_DoSnatch_Return));
  GM_Snatch_DoMulSnatch_Return_descriptor_ = file->message_type(9);
  static const int GM_Snatch_DoMulSnatch_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoMulSnatch_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoMulSnatch_Return, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoMulSnatch_Return, peacetime_),
  };
  GM_Snatch_DoMulSnatch_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_DoMulSnatch_Return_descriptor_,
      GM_Snatch_DoMulSnatch_Return::default_instance_,
      GM_Snatch_DoMulSnatch_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoMulSnatch_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_DoMulSnatch_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_DoMulSnatch_Return));
  GM_Snatch_BuyPeace_Request_descriptor_ = file->message_type(10);
  static const int GM_Snatch_BuyPeace_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Request, buytype_),
  };
  GM_Snatch_BuyPeace_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_BuyPeace_Request_descriptor_,
      GM_Snatch_BuyPeace_Request::default_instance_,
      GM_Snatch_BuyPeace_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_BuyPeace_Request));
  GM_Snatch_BuyPeace_Return_descriptor_ = file->message_type(11);
  static const int GM_Snatch_BuyPeace_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Return, peacetime_),
  };
  GM_Snatch_BuyPeace_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_BuyPeace_Return_descriptor_,
      GM_Snatch_BuyPeace_Return::default_instance_,
      GM_Snatch_BuyPeace_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_BuyPeace_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_BuyPeace_Return));
  GM_Snatch_Compound_Request_descriptor_ = file->message_type(12);
  static const int GM_Snatch_Compound_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Request, objectid_),
  };
  GM_Snatch_Compound_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Compound_Request_descriptor_,
      GM_Snatch_Compound_Request::default_instance_,
      GM_Snatch_Compound_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Compound_Request));
  GM_Snatch_Compound_Return_descriptor_ = file->message_type(13);
  static const int GM_Snatch_Compound_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Return, obj_),
  };
  GM_Snatch_Compound_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Compound_Return_descriptor_,
      GM_Snatch_Compound_Return::default_instance_,
      GM_Snatch_Compound_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Compound_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Compound_Return));
  GM_CompoundObj_descriptor_ = file->message_type(14);
  static const int GM_CompoundObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CompoundObj, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CompoundObj, objectnum_),
  };
  GM_CompoundObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CompoundObj_descriptor_,
      GM_CompoundObj::default_instance_,
      GM_CompoundObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CompoundObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CompoundObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CompoundObj));
  GM_Snatch_Item_Notify_descriptor_ = file->message_type(15);
  static const int GM_Snatch_Item_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item_Notify, item_),
  };
  GM_Snatch_Item_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Item_Notify_descriptor_,
      GM_Snatch_Item_Notify::default_instance_,
      GM_Snatch_Item_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Item_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Item_Notify));
  GM_Snatch_SwitchCardItem_descriptor_ = file->message_type(16);
  static const int GM_Snatch_SwitchCardItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCardItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCardItem, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCardItem, objectnum_),
  };
  GM_Snatch_SwitchCardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_SwitchCardItem_descriptor_,
      GM_Snatch_SwitchCardItem::default_instance_,
      GM_Snatch_SwitchCardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_SwitchCardItem));
  GM_Snatch_SwitchCard_Request_descriptor_ = file->message_type(17);
  static const int GM_Snatch_SwitchCard_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Request, pos_),
  };
  GM_Snatch_SwitchCard_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_SwitchCard_Request_descriptor_,
      GM_Snatch_SwitchCard_Request::default_instance_,
      GM_Snatch_SwitchCard_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_SwitchCard_Request));
  GM_Snatch_SwitchCard_Return_descriptor_ = file->message_type(18);
  static const int GM_Snatch_SwitchCard_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Return, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Return, item_),
  };
  GM_Snatch_SwitchCard_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_SwitchCard_Return_descriptor_,
      GM_Snatch_SwitchCard_Return::default_instance_,
      GM_Snatch_SwitchCard_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_SwitchCard_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_SwitchCard_Return));
  GM_Snatch_Reward_Return_descriptor_ = file->message_type(19);
  static const int GM_Snatch_Reward_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Reward_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Reward_Return, item_),
  };
  GM_Snatch_Reward_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_Reward_Return_descriptor_,
      GM_Snatch_Reward_Return::default_instance_,
      GM_Snatch_Reward_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Reward_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_Reward_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_Reward_Return));
  GM_Snatch_PeaceTime_Return_descriptor_ = file->message_type(20);
  static const int GM_Snatch_PeaceTime_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PeaceTime_Return, peacetime_),
  };
  GM_Snatch_PeaceTime_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Snatch_PeaceTime_Return_descriptor_,
      GM_Snatch_PeaceTime_Return::default_instance_,
      GM_Snatch_PeaceTime_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PeaceTime_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Snatch_PeaceTime_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Snatch_PeaceTime_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snatch_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Item_descriptor_, &GM_Snatch_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_BuyIfno_descriptor_, &GM_Snatch_BuyIfno::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_AllInfo_descriptor_, &GM_Snatch_AllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Look_Request_descriptor_, &GM_Snatch_Look_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_PlayerInfo_descriptor_, &GM_Snatch_PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Look_Return_descriptor_, &GM_Snatch_Look_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_DoSnatch_Request_descriptor_, &GM_Snatch_DoSnatch_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_DoSnatch_Result_descriptor_, &GM_Snatch_DoSnatch_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_DoSnatch_Return_descriptor_, &GM_Snatch_DoSnatch_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_DoMulSnatch_Return_descriptor_, &GM_Snatch_DoMulSnatch_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_BuyPeace_Request_descriptor_, &GM_Snatch_BuyPeace_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_BuyPeace_Return_descriptor_, &GM_Snatch_BuyPeace_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Compound_Request_descriptor_, &GM_Snatch_Compound_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Compound_Return_descriptor_, &GM_Snatch_Compound_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CompoundObj_descriptor_, &GM_CompoundObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Item_Notify_descriptor_, &GM_Snatch_Item_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_SwitchCardItem_descriptor_, &GM_Snatch_SwitchCardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_SwitchCard_Request_descriptor_, &GM_Snatch_SwitchCard_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_SwitchCard_Return_descriptor_, &GM_Snatch_SwitchCard_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_Reward_Return_descriptor_, &GM_Snatch_Reward_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Snatch_PeaceTime_Return_descriptor_, &GM_Snatch_PeaceTime_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snatch_2etxt() {
  delete GM_Snatch_Item::default_instance_;
  delete GM_Snatch_Item_reflection_;
  delete GM_Snatch_BuyIfno::default_instance_;
  delete GM_Snatch_BuyIfno_reflection_;
  delete GM_Snatch_AllInfo::default_instance_;
  delete GM_Snatch_AllInfo_reflection_;
  delete GM_Snatch_Look_Request::default_instance_;
  delete GM_Snatch_Look_Request_reflection_;
  delete GM_Snatch_PlayerInfo::default_instance_;
  delete GM_Snatch_PlayerInfo_reflection_;
  delete GM_Snatch_Look_Return::default_instance_;
  delete GM_Snatch_Look_Return_reflection_;
  delete GM_Snatch_DoSnatch_Request::default_instance_;
  delete GM_Snatch_DoSnatch_Request_reflection_;
  delete GM_Snatch_DoSnatch_Result::default_instance_;
  delete GM_Snatch_DoSnatch_Result_reflection_;
  delete GM_Snatch_DoSnatch_Return::default_instance_;
  delete GM_Snatch_DoSnatch_Return_reflection_;
  delete GM_Snatch_DoMulSnatch_Return::default_instance_;
  delete GM_Snatch_DoMulSnatch_Return_reflection_;
  delete GM_Snatch_BuyPeace_Request::default_instance_;
  delete GM_Snatch_BuyPeace_Request_reflection_;
  delete GM_Snatch_BuyPeace_Return::default_instance_;
  delete GM_Snatch_BuyPeace_Return_reflection_;
  delete GM_Snatch_Compound_Request::default_instance_;
  delete GM_Snatch_Compound_Request_reflection_;
  delete GM_Snatch_Compound_Return::default_instance_;
  delete GM_Snatch_Compound_Return_reflection_;
  delete GM_CompoundObj::default_instance_;
  delete GM_CompoundObj_reflection_;
  delete GM_Snatch_Item_Notify::default_instance_;
  delete GM_Snatch_Item_Notify_reflection_;
  delete GM_Snatch_SwitchCardItem::default_instance_;
  delete GM_Snatch_SwitchCardItem_reflection_;
  delete GM_Snatch_SwitchCard_Request::default_instance_;
  delete GM_Snatch_SwitchCard_Request_reflection_;
  delete GM_Snatch_SwitchCard_Return::default_instance_;
  delete GM_Snatch_SwitchCard_Return_reflection_;
  delete GM_Snatch_Reward_Return::default_instance_;
  delete GM_Snatch_Reward_Return_reflection_;
  delete GM_Snatch_PeaceTime_Return::default_instance_;
  delete GM_Snatch_PeaceTime_Return_reflection_;
}

void protobuf_AddDesc_snatch_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nsnatch.txt\"1\n\016GM_Snatch_Item\022\020\n\010object"
    "id\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"]\n\021GM_Snatch_Buy"
    "Ifno\022\017\n\007buytype\030\001 \002(\005\022\020\n\010needgold\030\002 \002(\005\022"
    "\023\n\013peaceminute\030\003 \002(\005\022\020\n\010objectid\030\004 \002(\005\"j"
    "\n\021GM_Snatch_AllInfo\022\021\n\tpeacetime\030\001 \002(\005\022\035"
    "\n\004item\030\002 \003(\0132\017.GM_Snatch_Item\022#\n\007buyinfo"
    "\030\003 \003(\0132\022.GM_Snatch_BuyIfno\")\n\026GM_Snatch_"
    "Look_Request\022\017\n\007pieceid\030\001 \002(\005\"\177\n\024GM_Snat"
    "ch_PlayerInfo\022\017\n\007rolepos\030\001 \002(\005\022\016\n\006roleid"
    "\030\002 \002(\005\022\017\n\007rolepro\030\003 \002(\005\022\016\n\006rolelv\030\004 \002(\005\022"
    "\020\n\010roleName\030\005 \002(\t\022\023\n\013probability\030\006 \002(\005\"T"
    "\n\025GM_Snatch_Look_Return\022\016\n\006result\030\001 \002(\005\022"
    "+\n\014m_PlayerInfo\030\002 \003(\0132\025.GM_Snatch_Player"
    "Info\">\n\032GM_Snatch_DoSnatch_Request\022\017\n\007pi"
    "eceid\030\001 \002(\005\022\017\n\007rolepos\030\002 \002(\005\"\216\001\n\031GM_Snat"
    "ch_DoSnatch_Result\022\017\n\007pieceid\030\001 \002(\005\022\r\n\005c"
    "ount\030\002 \002(\005\022\016\n\006addexp\030\003 \002(\005\022\017\n\007addgold\030\004 "
    "\002(\005\022\022\n\ncostexpval\030\005 \002(\005\022\r\n\005iswin\030\006 \002(\005\022\r"
    "\n\005isget\030\007 \002(\005\"h\n\031GM_Snatch_DoSnatch_Retu"
    "rn\022\016\n\006result\030\001 \002(\005\022(\n\004info\030\002 \001(\0132\032.GM_Sn"
    "atch_DoSnatch_Result\022\021\n\tpeacetime\030\003 \001(\005\""
    "k\n\034GM_Snatch_DoMulSnatch_Return\022\016\n\006resul"
    "t\030\001 \002(\005\022(\n\004info\030\002 \003(\0132\032.GM_Snatch_DoSnat"
    "ch_Result\022\021\n\tpeacetime\030\003 \001(\005\"-\n\032GM_Snatc"
    "h_BuyPeace_Request\022\017\n\007buytype\030\001 \002(\005\">\n\031G"
    "M_Snatch_BuyPeace_Return\022\016\n\006result\030\001 \002(\005"
    "\022\021\n\tpeacetime\030\002 \002(\005\".\n\032GM_Snatch_Compoun"
    "d_Request\022\020\n\010objectid\030\001 \002(\005\"I\n\031GM_Snatch"
    "_Compound_Return\022\016\n\006result\030\001 \002(\005\022\034\n\003obj\030"
    "\002 \003(\0132\017.GM_CompoundObj\"5\n\016GM_CompoundObj"
    "\022\020\n\010objectid\030\002 \002(\005\022\021\n\tobjectnum\030\003 \001(\005\"6\n"
    "\025GM_Snatch_Item_Notify\022\035\n\004item\030\001 \003(\0132\017.G"
    "M_Snatch_Item\"L\n\030GM_Snatch_SwitchCardIte"
    "m\022\013\n\003pos\030\001 \002(\005\022\020\n\010objectid\030\002 \002(\005\022\021\n\tobje"
    "ctnum\030\003 \002(\005\"+\n\034GM_Snatch_SwitchCard_Requ"
    "est\022\013\n\003pos\030\001 \002(\005\"c\n\033GM_Snatch_SwitchCard"
    "_Return\022\016\n\006result\030\001 \002(\005\022\013\n\003pos\030\002 \002(\005\022\'\n\004"
    "item\030\003 \003(\0132\031.GM_Snatch_SwitchCardItem\"R\n"
    "\027GM_Snatch_Reward_Return\022\016\n\006result\030\001 \002(\005"
    "\022\'\n\004item\030\002 \003(\0132\031.GM_Snatch_SwitchCardIte"
    "m\"/\n\032GM_Snatch_PeaceTime_Return\022\021\n\tpeace"
    "time\030\001 \002(\005", 1650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snatch.txt", &protobuf_RegisterTypes);
  GM_Snatch_Item::default_instance_ = new GM_Snatch_Item();
  GM_Snatch_BuyIfno::default_instance_ = new GM_Snatch_BuyIfno();
  GM_Snatch_AllInfo::default_instance_ = new GM_Snatch_AllInfo();
  GM_Snatch_Look_Request::default_instance_ = new GM_Snatch_Look_Request();
  GM_Snatch_PlayerInfo::default_instance_ = new GM_Snatch_PlayerInfo();
  GM_Snatch_Look_Return::default_instance_ = new GM_Snatch_Look_Return();
  GM_Snatch_DoSnatch_Request::default_instance_ = new GM_Snatch_DoSnatch_Request();
  GM_Snatch_DoSnatch_Result::default_instance_ = new GM_Snatch_DoSnatch_Result();
  GM_Snatch_DoSnatch_Return::default_instance_ = new GM_Snatch_DoSnatch_Return();
  GM_Snatch_DoMulSnatch_Return::default_instance_ = new GM_Snatch_DoMulSnatch_Return();
  GM_Snatch_BuyPeace_Request::default_instance_ = new GM_Snatch_BuyPeace_Request();
  GM_Snatch_BuyPeace_Return::default_instance_ = new GM_Snatch_BuyPeace_Return();
  GM_Snatch_Compound_Request::default_instance_ = new GM_Snatch_Compound_Request();
  GM_Snatch_Compound_Return::default_instance_ = new GM_Snatch_Compound_Return();
  GM_CompoundObj::default_instance_ = new GM_CompoundObj();
  GM_Snatch_Item_Notify::default_instance_ = new GM_Snatch_Item_Notify();
  GM_Snatch_SwitchCardItem::default_instance_ = new GM_Snatch_SwitchCardItem();
  GM_Snatch_SwitchCard_Request::default_instance_ = new GM_Snatch_SwitchCard_Request();
  GM_Snatch_SwitchCard_Return::default_instance_ = new GM_Snatch_SwitchCard_Return();
  GM_Snatch_Reward_Return::default_instance_ = new GM_Snatch_Reward_Return();
  GM_Snatch_PeaceTime_Return::default_instance_ = new GM_Snatch_PeaceTime_Return();
  GM_Snatch_Item::default_instance_->InitAsDefaultInstance();
  GM_Snatch_BuyIfno::default_instance_->InitAsDefaultInstance();
  GM_Snatch_AllInfo::default_instance_->InitAsDefaultInstance();
  GM_Snatch_Look_Request::default_instance_->InitAsDefaultInstance();
  GM_Snatch_PlayerInfo::default_instance_->InitAsDefaultInstance();
  GM_Snatch_Look_Return::default_instance_->InitAsDefaultInstance();
  GM_Snatch_DoSnatch_Request::default_instance_->InitAsDefaultInstance();
  GM_Snatch_DoSnatch_Result::default_instance_->InitAsDefaultInstance();
  GM_Snatch_DoSnatch_Return::default_instance_->InitAsDefaultInstance();
  GM_Snatch_DoMulSnatch_Return::default_instance_->InitAsDefaultInstance();
  GM_Snatch_BuyPeace_Request::default_instance_->InitAsDefaultInstance();
  GM_Snatch_BuyPeace_Return::default_instance_->InitAsDefaultInstance();
  GM_Snatch_Compound_Request::default_instance_->InitAsDefaultInstance();
  GM_Snatch_Compound_Return::default_instance_->InitAsDefaultInstance();
  GM_CompoundObj::default_instance_->InitAsDefaultInstance();
  GM_Snatch_Item_Notify::default_instance_->InitAsDefaultInstance();
  GM_Snatch_SwitchCardItem::default_instance_->InitAsDefaultInstance();
  GM_Snatch_SwitchCard_Request::default_instance_->InitAsDefaultInstance();
  GM_Snatch_SwitchCard_Return::default_instance_->InitAsDefaultInstance();
  GM_Snatch_Reward_Return::default_instance_->InitAsDefaultInstance();
  GM_Snatch_PeaceTime_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snatch_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snatch_2etxt {
  StaticDescriptorInitializer_snatch_2etxt() {
    protobuf_AddDesc_snatch_2etxt();
  }
} static_descriptor_initializer_snatch_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Item::kObjectidFieldNumber;
const int GM_Snatch_Item::kCountFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Item::GM_Snatch_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Item::InitAsDefaultInstance() {
}

GM_Snatch_Item::GM_Snatch_Item(const GM_Snatch_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Item::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Item::~GM_Snatch_Item() {
  SharedDtor();
}

void GM_Snatch_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Item_descriptor_;
}

const GM_Snatch_Item& GM_Snatch_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Item* GM_Snatch_Item::default_instance_ = NULL;

GM_Snatch_Item* GM_Snatch_Item::New() const {
  return new GM_Snatch_Item;
}

void GM_Snatch_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Item::MergeFrom(const GM_Snatch_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Item::CopyFrom(const GM_Snatch_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Snatch_Item::Swap(GM_Snatch_Item* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Item_descriptor_;
  metadata.reflection = GM_Snatch_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_BuyIfno::kBuytypeFieldNumber;
const int GM_Snatch_BuyIfno::kNeedgoldFieldNumber;
const int GM_Snatch_BuyIfno::kPeaceminuteFieldNumber;
const int GM_Snatch_BuyIfno::kObjectidFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_BuyIfno::GM_Snatch_BuyIfno()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_BuyIfno::InitAsDefaultInstance() {
}

GM_Snatch_BuyIfno::GM_Snatch_BuyIfno(const GM_Snatch_BuyIfno& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_BuyIfno::SharedCtor() {
  _cached_size_ = 0;
  buytype_ = 0;
  needgold_ = 0;
  peaceminute_ = 0;
  objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_BuyIfno::~GM_Snatch_BuyIfno() {
  SharedDtor();
}

void GM_Snatch_BuyIfno::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_BuyIfno::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_BuyIfno::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_BuyIfno_descriptor_;
}

const GM_Snatch_BuyIfno& GM_Snatch_BuyIfno::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_BuyIfno* GM_Snatch_BuyIfno::default_instance_ = NULL;

GM_Snatch_BuyIfno* GM_Snatch_BuyIfno::New() const {
  return new GM_Snatch_BuyIfno;
}

void GM_Snatch_BuyIfno::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buytype_ = 0;
    needgold_ = 0;
    peaceminute_ = 0;
    objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_BuyIfno::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needgold;
        break;
      }

      // required int32 needgold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peaceminute;
        break;
      }

      // required int32 peaceminute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peaceminute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peaceminute_)));
          set_has_peaceminute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_BuyIfno::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buytype = 1;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buytype(), output);
  }

  // required int32 needgold = 2;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgold(), output);
  }

  // required int32 peaceminute = 3;
  if (has_peaceminute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peaceminute(), output);
  }

  // required int32 objectid = 4;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_BuyIfno::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buytype = 1;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buytype(), target);
  }

  // required int32 needgold = 2;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgold(), target);
  }

  // required int32 peaceminute = 3;
  if (has_peaceminute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peaceminute(), target);
  }

  // required int32 objectid = 4;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_BuyIfno::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buytype = 1;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

    // required int32 needgold = 2;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgold());
    }

    // required int32 peaceminute = 3;
    if (has_peaceminute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peaceminute());
    }

    // required int32 objectid = 4;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_BuyIfno::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_BuyIfno* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_BuyIfno*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_BuyIfno::MergeFrom(const GM_Snatch_BuyIfno& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_peaceminute()) {
      set_peaceminute(from.peaceminute());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_BuyIfno::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_BuyIfno::CopyFrom(const GM_Snatch_BuyIfno& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_BuyIfno::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_Snatch_BuyIfno::Swap(GM_Snatch_BuyIfno* other) {
  if (other != this) {
    std::swap(buytype_, other->buytype_);
    std::swap(needgold_, other->needgold_);
    std::swap(peaceminute_, other->peaceminute_);
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_BuyIfno::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_BuyIfno_descriptor_;
  metadata.reflection = GM_Snatch_BuyIfno_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_AllInfo::kPeacetimeFieldNumber;
const int GM_Snatch_AllInfo::kItemFieldNumber;
const int GM_Snatch_AllInfo::kBuyinfoFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_AllInfo::GM_Snatch_AllInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_AllInfo::InitAsDefaultInstance() {
}

GM_Snatch_AllInfo::GM_Snatch_AllInfo(const GM_Snatch_AllInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_AllInfo::SharedCtor() {
  _cached_size_ = 0;
  peacetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_AllInfo::~GM_Snatch_AllInfo() {
  SharedDtor();
}

void GM_Snatch_AllInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_AllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_AllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_AllInfo_descriptor_;
}

const GM_Snatch_AllInfo& GM_Snatch_AllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_AllInfo* GM_Snatch_AllInfo::default_instance_ = NULL;

GM_Snatch_AllInfo* GM_Snatch_AllInfo::New() const {
  return new GM_Snatch_AllInfo;
}

void GM_Snatch_AllInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peacetime_ = 0;
  }
  item_.Clear();
  buyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_AllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 peacetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peacetime_)));
          set_has_peacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .GM_Snatch_Item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_buyinfo;
        break;
      }

      // repeated .GM_Snatch_BuyIfno buyinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buyinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_AllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 peacetime = 1;
  if (has_peacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peacetime(), output);
  }

  // repeated .GM_Snatch_Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // repeated .GM_Snatch_BuyIfno buyinfo = 3;
  for (int i = 0; i < this->buyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_AllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 peacetime = 1;
  if (has_peacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peacetime(), target);
  }

  // repeated .GM_Snatch_Item item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // repeated .GM_Snatch_BuyIfno buyinfo = 3;
  for (int i = 0; i < this->buyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_AllInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 peacetime = 1;
    if (has_peacetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peacetime());
    }

  }
  // repeated .GM_Snatch_Item item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .GM_Snatch_BuyIfno buyinfo = 3;
  total_size += 1 * this->buyinfo_size();
  for (int i = 0; i < this->buyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_AllInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_AllInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_AllInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_AllInfo::MergeFrom(const GM_Snatch_AllInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  buyinfo_.MergeFrom(from.buyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peacetime()) {
      set_peacetime(from.peacetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_AllInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_AllInfo::CopyFrom(const GM_Snatch_AllInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_AllInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buyinfo_size(); i++) {
    if (!this->buyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_AllInfo::Swap(GM_Snatch_AllInfo* other) {
  if (other != this) {
    std::swap(peacetime_, other->peacetime_);
    item_.Swap(&other->item_);
    buyinfo_.Swap(&other->buyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_AllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_AllInfo_descriptor_;
  metadata.reflection = GM_Snatch_AllInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Look_Request::kPieceidFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Look_Request::GM_Snatch_Look_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Look_Request::InitAsDefaultInstance() {
}

GM_Snatch_Look_Request::GM_Snatch_Look_Request(const GM_Snatch_Look_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Look_Request::SharedCtor() {
  _cached_size_ = 0;
  pieceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Look_Request::~GM_Snatch_Look_Request() {
  SharedDtor();
}

void GM_Snatch_Look_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Look_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Look_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Look_Request_descriptor_;
}

const GM_Snatch_Look_Request& GM_Snatch_Look_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Look_Request* GM_Snatch_Look_Request::default_instance_ = NULL;

GM_Snatch_Look_Request* GM_Snatch_Look_Request::New() const {
  return new GM_Snatch_Look_Request;
}

void GM_Snatch_Look_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pieceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Look_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pieceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pieceid_)));
          set_has_pieceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Look_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pieceid = 1;
  if (has_pieceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pieceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Look_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pieceid = 1;
  if (has_pieceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pieceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Look_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pieceid = 1;
    if (has_pieceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pieceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Look_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Look_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Look_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Look_Request::MergeFrom(const GM_Snatch_Look_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pieceid()) {
      set_pieceid(from.pieceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Look_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Look_Request::CopyFrom(const GM_Snatch_Look_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Look_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Snatch_Look_Request::Swap(GM_Snatch_Look_Request* other) {
  if (other != this) {
    std::swap(pieceid_, other->pieceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Look_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Look_Request_descriptor_;
  metadata.reflection = GM_Snatch_Look_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_PlayerInfo::kRoleposFieldNumber;
const int GM_Snatch_PlayerInfo::kRoleidFieldNumber;
const int GM_Snatch_PlayerInfo::kRoleproFieldNumber;
const int GM_Snatch_PlayerInfo::kRolelvFieldNumber;
const int GM_Snatch_PlayerInfo::kRoleNameFieldNumber;
const int GM_Snatch_PlayerInfo::kProbabilityFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_PlayerInfo::GM_Snatch_PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_PlayerInfo::InitAsDefaultInstance() {
}

GM_Snatch_PlayerInfo::GM_Snatch_PlayerInfo(const GM_Snatch_PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  rolepos_ = 0;
  roleid_ = 0;
  rolepro_ = 0;
  rolelv_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_PlayerInfo::~GM_Snatch_PlayerInfo() {
  SharedDtor();
}

void GM_Snatch_PlayerInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_Snatch_PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_PlayerInfo_descriptor_;
}

const GM_Snatch_PlayerInfo& GM_Snatch_PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_PlayerInfo* GM_Snatch_PlayerInfo::default_instance_ = NULL;

GM_Snatch_PlayerInfo* GM_Snatch_PlayerInfo::New() const {
  return new GM_Snatch_PlayerInfo;
}

void GM_Snatch_PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rolepos_ = 0;
    roleid_ = 0;
    rolepro_ = 0;
    rolelv_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    probability_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rolepos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolepos_)));
          set_has_rolepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rolepro;
        break;
      }

      // required int32 rolepro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolepro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolepro_)));
          set_has_rolepro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rolelv;
        break;
      }

      // required int32 rolelv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleName;
        break;
      }

      // required string roleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_probability;
        break;
      }

      // required int32 probability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rolepos = 1;
  if (has_rolepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rolepos(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // required int32 rolepro = 3;
  if (has_rolepro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolepro(), output);
  }

  // required int32 rolelv = 4;
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rolelv(), output);
  }

  // required string roleName = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rolename(), output);
  }

  // required int32 probability = 6;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->probability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rolepos = 1;
  if (has_rolepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rolepos(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // required int32 rolepro = 3;
  if (has_rolepro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolepro(), target);
  }

  // required int32 rolelv = 4;
  if (has_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rolelv(), target);
  }

  // required string roleName = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rolename(), target);
  }

  // required int32 probability = 6;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->probability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rolepos = 1;
    if (has_rolepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolepos());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 rolepro = 3;
    if (has_rolepro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolepro());
    }

    // required int32 rolelv = 4;
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelv());
    }

    // required string roleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 probability = 6;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_PlayerInfo::MergeFrom(const GM_Snatch_PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolepos()) {
      set_rolepos(from.rolepos());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolepro()) {
      set_rolepro(from.rolepro());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_PlayerInfo::CopyFrom(const GM_Snatch_PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GM_Snatch_PlayerInfo::Swap(GM_Snatch_PlayerInfo* other) {
  if (other != this) {
    std::swap(rolepos_, other->rolepos_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolepro_, other->rolepro_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(rolename_, other->rolename_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_PlayerInfo_descriptor_;
  metadata.reflection = GM_Snatch_PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Look_Return::kResultFieldNumber;
const int GM_Snatch_Look_Return::kMPlayerInfoFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Look_Return::GM_Snatch_Look_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Look_Return::InitAsDefaultInstance() {
}

GM_Snatch_Look_Return::GM_Snatch_Look_Return(const GM_Snatch_Look_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Look_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Look_Return::~GM_Snatch_Look_Return() {
  SharedDtor();
}

void GM_Snatch_Look_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Look_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Look_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Look_Return_descriptor_;
}

const GM_Snatch_Look_Return& GM_Snatch_Look_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Look_Return* GM_Snatch_Look_Return::default_instance_ = NULL;

GM_Snatch_Look_Return* GM_Snatch_Look_Return::New() const {
  return new GM_Snatch_Look_Return;
}

void GM_Snatch_Look_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  m_playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Look_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_PlayerInfo;
        break;
      }

      // repeated .GM_Snatch_PlayerInfo m_PlayerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_PlayerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Look_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_Snatch_PlayerInfo m_PlayerInfo = 2;
  for (int i = 0; i < this->m_playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_playerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Look_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_Snatch_PlayerInfo m_PlayerInfo = 2;
  for (int i = 0; i < this->m_playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_playerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Look_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_Snatch_PlayerInfo m_PlayerInfo = 2;
  total_size += 1 * this->m_playerinfo_size();
  for (int i = 0; i < this->m_playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Look_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Look_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Look_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Look_Return::MergeFrom(const GM_Snatch_Look_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_playerinfo_.MergeFrom(from.m_playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Look_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Look_Return::CopyFrom(const GM_Snatch_Look_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Look_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_playerinfo_size(); i++) {
    if (!this->m_playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_Look_Return::Swap(GM_Snatch_Look_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    m_playerinfo_.Swap(&other->m_playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Look_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Look_Return_descriptor_;
  metadata.reflection = GM_Snatch_Look_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_DoSnatch_Request::kPieceidFieldNumber;
const int GM_Snatch_DoSnatch_Request::kRoleposFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_DoSnatch_Request::GM_Snatch_DoSnatch_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_DoSnatch_Request::InitAsDefaultInstance() {
}

GM_Snatch_DoSnatch_Request::GM_Snatch_DoSnatch_Request(const GM_Snatch_DoSnatch_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_DoSnatch_Request::SharedCtor() {
  _cached_size_ = 0;
  pieceid_ = 0;
  rolepos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_DoSnatch_Request::~GM_Snatch_DoSnatch_Request() {
  SharedDtor();
}

void GM_Snatch_DoSnatch_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_DoSnatch_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_DoSnatch_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_DoSnatch_Request_descriptor_;
}

const GM_Snatch_DoSnatch_Request& GM_Snatch_DoSnatch_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_DoSnatch_Request* GM_Snatch_DoSnatch_Request::default_instance_ = NULL;

GM_Snatch_DoSnatch_Request* GM_Snatch_DoSnatch_Request::New() const {
  return new GM_Snatch_DoSnatch_Request;
}

void GM_Snatch_DoSnatch_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pieceid_ = 0;
    rolepos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_DoSnatch_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pieceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pieceid_)));
          set_has_pieceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rolepos;
        break;
      }

      // required int32 rolepos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolepos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolepos_)));
          set_has_rolepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_DoSnatch_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pieceid = 1;
  if (has_pieceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pieceid(), output);
  }

  // required int32 rolepos = 2;
  if (has_rolepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rolepos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_DoSnatch_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pieceid = 1;
  if (has_pieceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pieceid(), target);
  }

  // required int32 rolepos = 2;
  if (has_rolepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rolepos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_DoSnatch_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pieceid = 1;
    if (has_pieceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pieceid());
    }

    // required int32 rolepos = 2;
    if (has_rolepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolepos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_DoSnatch_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_DoSnatch_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_DoSnatch_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_DoSnatch_Request::MergeFrom(const GM_Snatch_DoSnatch_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pieceid()) {
      set_pieceid(from.pieceid());
    }
    if (from.has_rolepos()) {
      set_rolepos(from.rolepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_DoSnatch_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_DoSnatch_Request::CopyFrom(const GM_Snatch_DoSnatch_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_DoSnatch_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Snatch_DoSnatch_Request::Swap(GM_Snatch_DoSnatch_Request* other) {
  if (other != this) {
    std::swap(pieceid_, other->pieceid_);
    std::swap(rolepos_, other->rolepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_DoSnatch_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_DoSnatch_Request_descriptor_;
  metadata.reflection = GM_Snatch_DoSnatch_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_DoSnatch_Result::kPieceidFieldNumber;
const int GM_Snatch_DoSnatch_Result::kCountFieldNumber;
const int GM_Snatch_DoSnatch_Result::kAddexpFieldNumber;
const int GM_Snatch_DoSnatch_Result::kAddgoldFieldNumber;
const int GM_Snatch_DoSnatch_Result::kCostexpvalFieldNumber;
const int GM_Snatch_DoSnatch_Result::kIswinFieldNumber;
const int GM_Snatch_DoSnatch_Result::kIsgetFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_DoSnatch_Result::GM_Snatch_DoSnatch_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_DoSnatch_Result::InitAsDefaultInstance() {
}

GM_Snatch_DoSnatch_Result::GM_Snatch_DoSnatch_Result(const GM_Snatch_DoSnatch_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_DoSnatch_Result::SharedCtor() {
  _cached_size_ = 0;
  pieceid_ = 0;
  count_ = 0;
  addexp_ = 0;
  addgold_ = 0;
  costexpval_ = 0;
  iswin_ = 0;
  isget_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_DoSnatch_Result::~GM_Snatch_DoSnatch_Result() {
  SharedDtor();
}

void GM_Snatch_DoSnatch_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_DoSnatch_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_DoSnatch_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_DoSnatch_Result_descriptor_;
}

const GM_Snatch_DoSnatch_Result& GM_Snatch_DoSnatch_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_DoSnatch_Result* GM_Snatch_DoSnatch_Result::default_instance_ = NULL;

GM_Snatch_DoSnatch_Result* GM_Snatch_DoSnatch_Result::New() const {
  return new GM_Snatch_DoSnatch_Result;
}

void GM_Snatch_DoSnatch_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pieceid_ = 0;
    count_ = 0;
    addexp_ = 0;
    addgold_ = 0;
    costexpval_ = 0;
    iswin_ = 0;
    isget_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_DoSnatch_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pieceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pieceid_)));
          set_has_pieceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addexp;
        break;
      }

      // required int32 addexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addgold;
        break;
      }

      // required int32 addgold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addgold_)));
          set_has_addgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_costexpval;
        break;
      }

      // required int32 costexpval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costexpval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costexpval_)));
          set_has_costexpval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iswin;
        break;
      }

      // required int32 iswin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isget;
        break;
      }

      // required int32 isget = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_DoSnatch_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pieceid = 1;
  if (has_pieceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pieceid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 addexp = 3;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addexp(), output);
  }

  // required int32 addgold = 4;
  if (has_addgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addgold(), output);
  }

  // required int32 costexpval = 5;
  if (has_costexpval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->costexpval(), output);
  }

  // required int32 iswin = 6;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iswin(), output);
  }

  // required int32 isget = 7;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_DoSnatch_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pieceid = 1;
  if (has_pieceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pieceid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 addexp = 3;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addexp(), target);
  }

  // required int32 addgold = 4;
  if (has_addgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addgold(), target);
  }

  // required int32 costexpval = 5;
  if (has_costexpval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->costexpval(), target);
  }

  // required int32 iswin = 6;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iswin(), target);
  }

  // required int32 isget = 7;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_DoSnatch_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pieceid = 1;
    if (has_pieceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pieceid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 addexp = 3;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addexp());
    }

    // required int32 addgold = 4;
    if (has_addgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgold());
    }

    // required int32 costexpval = 5;
    if (has_costexpval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costexpval());
    }

    // required int32 iswin = 6;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswin());
    }

    // required int32 isget = 7;
    if (has_isget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isget());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_DoSnatch_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_DoSnatch_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_DoSnatch_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_DoSnatch_Result::MergeFrom(const GM_Snatch_DoSnatch_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pieceid()) {
      set_pieceid(from.pieceid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_addgold()) {
      set_addgold(from.addgold());
    }
    if (from.has_costexpval()) {
      set_costexpval(from.costexpval());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_DoSnatch_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_DoSnatch_Result::CopyFrom(const GM_Snatch_DoSnatch_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_DoSnatch_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GM_Snatch_DoSnatch_Result::Swap(GM_Snatch_DoSnatch_Result* other) {
  if (other != this) {
    std::swap(pieceid_, other->pieceid_);
    std::swap(count_, other->count_);
    std::swap(addexp_, other->addexp_);
    std::swap(addgold_, other->addgold_);
    std::swap(costexpval_, other->costexpval_);
    std::swap(iswin_, other->iswin_);
    std::swap(isget_, other->isget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_DoSnatch_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_DoSnatch_Result_descriptor_;
  metadata.reflection = GM_Snatch_DoSnatch_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_DoSnatch_Return::kResultFieldNumber;
const int GM_Snatch_DoSnatch_Return::kInfoFieldNumber;
const int GM_Snatch_DoSnatch_Return::kPeacetimeFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_DoSnatch_Return::GM_Snatch_DoSnatch_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_DoSnatch_Return::InitAsDefaultInstance() {
  info_ = const_cast< ::GM_Snatch_DoSnatch_Result*>(&::GM_Snatch_DoSnatch_Result::default_instance());
}

GM_Snatch_DoSnatch_Return::GM_Snatch_DoSnatch_Return(const GM_Snatch_DoSnatch_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_DoSnatch_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = NULL;
  peacetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_DoSnatch_Return::~GM_Snatch_DoSnatch_Return() {
  SharedDtor();
}

void GM_Snatch_DoSnatch_Return::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GM_Snatch_DoSnatch_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_DoSnatch_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_DoSnatch_Return_descriptor_;
}

const GM_Snatch_DoSnatch_Return& GM_Snatch_DoSnatch_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_DoSnatch_Return* GM_Snatch_DoSnatch_Return::default_instance_ = NULL;

GM_Snatch_DoSnatch_Return* GM_Snatch_DoSnatch_Return::New() const {
  return new GM_Snatch_DoSnatch_Return;
}

void GM_Snatch_DoSnatch_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::GM_Snatch_DoSnatch_Result::Clear();
    }
    peacetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_DoSnatch_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .GM_Snatch_DoSnatch_Result info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peacetime;
        break;
      }

      // optional int32 peacetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peacetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peacetime_)));
          set_has_peacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_DoSnatch_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .GM_Snatch_DoSnatch_Result info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional int32 peacetime = 3;
  if (has_peacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peacetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_DoSnatch_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .GM_Snatch_DoSnatch_Result info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional int32 peacetime = 3;
  if (has_peacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peacetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_DoSnatch_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GM_Snatch_DoSnatch_Result info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 peacetime = 3;
    if (has_peacetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peacetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_DoSnatch_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_DoSnatch_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_DoSnatch_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_DoSnatch_Return::MergeFrom(const GM_Snatch_DoSnatch_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::GM_Snatch_DoSnatch_Result::MergeFrom(from.info());
    }
    if (from.has_peacetime()) {
      set_peacetime(from.peacetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_DoSnatch_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_DoSnatch_Return::CopyFrom(const GM_Snatch_DoSnatch_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_DoSnatch_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_DoSnatch_Return::Swap(GM_Snatch_DoSnatch_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(peacetime_, other->peacetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_DoSnatch_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_DoSnatch_Return_descriptor_;
  metadata.reflection = GM_Snatch_DoSnatch_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_DoMulSnatch_Return::kResultFieldNumber;
const int GM_Snatch_DoMulSnatch_Return::kInfoFieldNumber;
const int GM_Snatch_DoMulSnatch_Return::kPeacetimeFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_DoMulSnatch_Return::GM_Snatch_DoMulSnatch_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_DoMulSnatch_Return::InitAsDefaultInstance() {
}

GM_Snatch_DoMulSnatch_Return::GM_Snatch_DoMulSnatch_Return(const GM_Snatch_DoMulSnatch_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_DoMulSnatch_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  peacetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_DoMulSnatch_Return::~GM_Snatch_DoMulSnatch_Return() {
  SharedDtor();
}

void GM_Snatch_DoMulSnatch_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_DoMulSnatch_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_DoMulSnatch_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_DoMulSnatch_Return_descriptor_;
}

const GM_Snatch_DoMulSnatch_Return& GM_Snatch_DoMulSnatch_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_DoMulSnatch_Return* GM_Snatch_DoMulSnatch_Return::default_instance_ = NULL;

GM_Snatch_DoMulSnatch_Return* GM_Snatch_DoMulSnatch_Return::New() const {
  return new GM_Snatch_DoMulSnatch_Return;
}

void GM_Snatch_DoMulSnatch_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    peacetime_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_DoMulSnatch_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GM_Snatch_DoSnatch_Result info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_peacetime;
        break;
      }

      // optional int32 peacetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peacetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peacetime_)));
          set_has_peacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_DoMulSnatch_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_Snatch_DoSnatch_Result info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 peacetime = 3;
  if (has_peacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peacetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_DoMulSnatch_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_Snatch_DoSnatch_Result info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 peacetime = 3;
  if (has_peacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peacetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_DoMulSnatch_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 peacetime = 3;
    if (has_peacetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peacetime());
    }

  }
  // repeated .GM_Snatch_DoSnatch_Result info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_DoMulSnatch_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_DoMulSnatch_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_DoMulSnatch_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_DoMulSnatch_Return::MergeFrom(const GM_Snatch_DoMulSnatch_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_peacetime()) {
      set_peacetime(from.peacetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_DoMulSnatch_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_DoMulSnatch_Return::CopyFrom(const GM_Snatch_DoMulSnatch_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_DoMulSnatch_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_DoMulSnatch_Return::Swap(GM_Snatch_DoMulSnatch_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(peacetime_, other->peacetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_DoMulSnatch_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_DoMulSnatch_Return_descriptor_;
  metadata.reflection = GM_Snatch_DoMulSnatch_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_BuyPeace_Request::kBuytypeFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_BuyPeace_Request::GM_Snatch_BuyPeace_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_BuyPeace_Request::InitAsDefaultInstance() {
}

GM_Snatch_BuyPeace_Request::GM_Snatch_BuyPeace_Request(const GM_Snatch_BuyPeace_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_BuyPeace_Request::SharedCtor() {
  _cached_size_ = 0;
  buytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_BuyPeace_Request::~GM_Snatch_BuyPeace_Request() {
  SharedDtor();
}

void GM_Snatch_BuyPeace_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_BuyPeace_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_BuyPeace_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_BuyPeace_Request_descriptor_;
}

const GM_Snatch_BuyPeace_Request& GM_Snatch_BuyPeace_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_BuyPeace_Request* GM_Snatch_BuyPeace_Request::default_instance_ = NULL;

GM_Snatch_BuyPeace_Request* GM_Snatch_BuyPeace_Request::New() const {
  return new GM_Snatch_BuyPeace_Request;
}

void GM_Snatch_BuyPeace_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_BuyPeace_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_BuyPeace_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buytype = 1;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_BuyPeace_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buytype = 1;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_BuyPeace_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buytype = 1;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_BuyPeace_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_BuyPeace_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_BuyPeace_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_BuyPeace_Request::MergeFrom(const GM_Snatch_BuyPeace_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_BuyPeace_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_BuyPeace_Request::CopyFrom(const GM_Snatch_BuyPeace_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_BuyPeace_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Snatch_BuyPeace_Request::Swap(GM_Snatch_BuyPeace_Request* other) {
  if (other != this) {
    std::swap(buytype_, other->buytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_BuyPeace_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_BuyPeace_Request_descriptor_;
  metadata.reflection = GM_Snatch_BuyPeace_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_BuyPeace_Return::kResultFieldNumber;
const int GM_Snatch_BuyPeace_Return::kPeacetimeFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_BuyPeace_Return::GM_Snatch_BuyPeace_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_BuyPeace_Return::InitAsDefaultInstance() {
}

GM_Snatch_BuyPeace_Return::GM_Snatch_BuyPeace_Return(const GM_Snatch_BuyPeace_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_BuyPeace_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  peacetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_BuyPeace_Return::~GM_Snatch_BuyPeace_Return() {
  SharedDtor();
}

void GM_Snatch_BuyPeace_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_BuyPeace_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_BuyPeace_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_BuyPeace_Return_descriptor_;
}

const GM_Snatch_BuyPeace_Return& GM_Snatch_BuyPeace_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_BuyPeace_Return* GM_Snatch_BuyPeace_Return::default_instance_ = NULL;

GM_Snatch_BuyPeace_Return* GM_Snatch_BuyPeace_Return::New() const {
  return new GM_Snatch_BuyPeace_Return;
}

void GM_Snatch_BuyPeace_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    peacetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_BuyPeace_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_peacetime;
        break;
      }

      // required int32 peacetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peacetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peacetime_)));
          set_has_peacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_BuyPeace_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 peacetime = 2;
  if (has_peacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->peacetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_BuyPeace_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 peacetime = 2;
  if (has_peacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->peacetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_BuyPeace_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 peacetime = 2;
    if (has_peacetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peacetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_BuyPeace_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_BuyPeace_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_BuyPeace_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_BuyPeace_Return::MergeFrom(const GM_Snatch_BuyPeace_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_peacetime()) {
      set_peacetime(from.peacetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_BuyPeace_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_BuyPeace_Return::CopyFrom(const GM_Snatch_BuyPeace_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_BuyPeace_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Snatch_BuyPeace_Return::Swap(GM_Snatch_BuyPeace_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(peacetime_, other->peacetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_BuyPeace_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_BuyPeace_Return_descriptor_;
  metadata.reflection = GM_Snatch_BuyPeace_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Compound_Request::kObjectidFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Compound_Request::GM_Snatch_Compound_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Compound_Request::InitAsDefaultInstance() {
}

GM_Snatch_Compound_Request::GM_Snatch_Compound_Request(const GM_Snatch_Compound_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Compound_Request::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Compound_Request::~GM_Snatch_Compound_Request() {
  SharedDtor();
}

void GM_Snatch_Compound_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Compound_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Compound_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Compound_Request_descriptor_;
}

const GM_Snatch_Compound_Request& GM_Snatch_Compound_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Compound_Request* GM_Snatch_Compound_Request::default_instance_ = NULL;

GM_Snatch_Compound_Request* GM_Snatch_Compound_Request::New() const {
  return new GM_Snatch_Compound_Request;
}

void GM_Snatch_Compound_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Compound_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Compound_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Compound_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Compound_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Compound_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Compound_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Compound_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Compound_Request::MergeFrom(const GM_Snatch_Compound_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Compound_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Compound_Request::CopyFrom(const GM_Snatch_Compound_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Compound_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Snatch_Compound_Request::Swap(GM_Snatch_Compound_Request* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Compound_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Compound_Request_descriptor_;
  metadata.reflection = GM_Snatch_Compound_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Compound_Return::kResultFieldNumber;
const int GM_Snatch_Compound_Return::kObjFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Compound_Return::GM_Snatch_Compound_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Compound_Return::InitAsDefaultInstance() {
}

GM_Snatch_Compound_Return::GM_Snatch_Compound_Return(const GM_Snatch_Compound_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Compound_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Compound_Return::~GM_Snatch_Compound_Return() {
  SharedDtor();
}

void GM_Snatch_Compound_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Compound_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Compound_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Compound_Return_descriptor_;
}

const GM_Snatch_Compound_Return& GM_Snatch_Compound_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Compound_Return* GM_Snatch_Compound_Return::default_instance_ = NULL;

GM_Snatch_Compound_Return* GM_Snatch_Compound_Return::New() const {
  return new GM_Snatch_Compound_Return;
}

void GM_Snatch_Compound_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  obj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Compound_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_obj;
        break;
      }

      // repeated .GM_CompoundObj obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_obj;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Compound_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_CompoundObj obj = 2;
  for (int i = 0; i < this->obj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obj(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Compound_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_CompoundObj obj = 2;
  for (int i = 0; i < this->obj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obj(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Compound_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_CompoundObj obj = 2;
  total_size += 1 * this->obj_size();
  for (int i = 0; i < this->obj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Compound_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Compound_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Compound_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Compound_Return::MergeFrom(const GM_Snatch_Compound_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  obj_.MergeFrom(from.obj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Compound_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Compound_Return::CopyFrom(const GM_Snatch_Compound_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Compound_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < obj_size(); i++) {
    if (!this->obj(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_Compound_Return::Swap(GM_Snatch_Compound_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    obj_.Swap(&other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Compound_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Compound_Return_descriptor_;
  metadata.reflection = GM_Snatch_Compound_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CompoundObj::kObjectidFieldNumber;
const int GM_CompoundObj::kObjectnumFieldNumber;
#endif  // !_MSC_VER

GM_CompoundObj::GM_CompoundObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CompoundObj::InitAsDefaultInstance() {
}

GM_CompoundObj::GM_CompoundObj(const GM_CompoundObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CompoundObj::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CompoundObj::~GM_CompoundObj() {
  SharedDtor();
}

void GM_CompoundObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CompoundObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CompoundObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CompoundObj_descriptor_;
}

const GM_CompoundObj& GM_CompoundObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_CompoundObj* GM_CompoundObj::default_instance_ = NULL;

GM_CompoundObj* GM_CompoundObj::New() const {
  return new GM_CompoundObj;
}

void GM_CompoundObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CompoundObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectnum;
        break;
      }

      // optional int32 objectnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CompoundObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // optional int32 objectnum = 3;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CompoundObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // optional int32 objectnum = 3;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CompoundObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 objectnum = 3;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CompoundObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CompoundObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CompoundObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CompoundObj::MergeFrom(const GM_CompoundObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CompoundObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CompoundObj::CopyFrom(const GM_CompoundObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CompoundObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CompoundObj::Swap(GM_CompoundObj* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CompoundObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CompoundObj_descriptor_;
  metadata.reflection = GM_CompoundObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Item_Notify::kItemFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Item_Notify::GM_Snatch_Item_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Item_Notify::InitAsDefaultInstance() {
}

GM_Snatch_Item_Notify::GM_Snatch_Item_Notify(const GM_Snatch_Item_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Item_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Item_Notify::~GM_Snatch_Item_Notify() {
  SharedDtor();
}

void GM_Snatch_Item_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Item_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Item_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Item_Notify_descriptor_;
}

const GM_Snatch_Item_Notify& GM_Snatch_Item_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Item_Notify* GM_Snatch_Item_Notify::default_instance_ = NULL;

GM_Snatch_Item_Notify* GM_Snatch_Item_Notify::New() const {
  return new GM_Snatch_Item_Notify;
}

void GM_Snatch_Item_Notify::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Item_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_Snatch_Item item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Item_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_Snatch_Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Item_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_Snatch_Item item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Item_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .GM_Snatch_Item item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Item_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Item_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Item_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Item_Notify::MergeFrom(const GM_Snatch_Item_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Item_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Item_Notify::CopyFrom(const GM_Snatch_Item_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Item_Notify::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_Item_Notify::Swap(GM_Snatch_Item_Notify* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Item_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Item_Notify_descriptor_;
  metadata.reflection = GM_Snatch_Item_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_SwitchCardItem::kPosFieldNumber;
const int GM_Snatch_SwitchCardItem::kObjectidFieldNumber;
const int GM_Snatch_SwitchCardItem::kObjectnumFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_SwitchCardItem::GM_Snatch_SwitchCardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_SwitchCardItem::InitAsDefaultInstance() {
}

GM_Snatch_SwitchCardItem::GM_Snatch_SwitchCardItem(const GM_Snatch_SwitchCardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_SwitchCardItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_SwitchCardItem::~GM_Snatch_SwitchCardItem() {
  SharedDtor();
}

void GM_Snatch_SwitchCardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_SwitchCardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_SwitchCardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_SwitchCardItem_descriptor_;
}

const GM_Snatch_SwitchCardItem& GM_Snatch_SwitchCardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_SwitchCardItem* GM_Snatch_SwitchCardItem::default_instance_ = NULL;

GM_Snatch_SwitchCardItem* GM_Snatch_SwitchCardItem::New() const {
  return new GM_Snatch_SwitchCardItem;
}

void GM_Snatch_SwitchCardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_SwitchCardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectnum;
        break;
      }

      // required int32 objectnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_SwitchCardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // required int32 objectnum = 3;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_SwitchCardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // required int32 objectnum = 3;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_SwitchCardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 objectnum = 3;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_SwitchCardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_SwitchCardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_SwitchCardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_SwitchCardItem::MergeFrom(const GM_Snatch_SwitchCardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_SwitchCardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_SwitchCardItem::CopyFrom(const GM_Snatch_SwitchCardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_SwitchCardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Snatch_SwitchCardItem::Swap(GM_Snatch_SwitchCardItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_SwitchCardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_SwitchCardItem_descriptor_;
  metadata.reflection = GM_Snatch_SwitchCardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_SwitchCard_Request::kPosFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_SwitchCard_Request::GM_Snatch_SwitchCard_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_SwitchCard_Request::InitAsDefaultInstance() {
}

GM_Snatch_SwitchCard_Request::GM_Snatch_SwitchCard_Request(const GM_Snatch_SwitchCard_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_SwitchCard_Request::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_SwitchCard_Request::~GM_Snatch_SwitchCard_Request() {
  SharedDtor();
}

void GM_Snatch_SwitchCard_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_SwitchCard_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_SwitchCard_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_SwitchCard_Request_descriptor_;
}

const GM_Snatch_SwitchCard_Request& GM_Snatch_SwitchCard_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_SwitchCard_Request* GM_Snatch_SwitchCard_Request::default_instance_ = NULL;

GM_Snatch_SwitchCard_Request* GM_Snatch_SwitchCard_Request::New() const {
  return new GM_Snatch_SwitchCard_Request;
}

void GM_Snatch_SwitchCard_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_SwitchCard_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_SwitchCard_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_SwitchCard_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_SwitchCard_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_SwitchCard_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_SwitchCard_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_SwitchCard_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_SwitchCard_Request::MergeFrom(const GM_Snatch_SwitchCard_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_SwitchCard_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_SwitchCard_Request::CopyFrom(const GM_Snatch_SwitchCard_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_SwitchCard_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Snatch_SwitchCard_Request::Swap(GM_Snatch_SwitchCard_Request* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_SwitchCard_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_SwitchCard_Request_descriptor_;
  metadata.reflection = GM_Snatch_SwitchCard_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_SwitchCard_Return::kResultFieldNumber;
const int GM_Snatch_SwitchCard_Return::kPosFieldNumber;
const int GM_Snatch_SwitchCard_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_SwitchCard_Return::GM_Snatch_SwitchCard_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_SwitchCard_Return::InitAsDefaultInstance() {
}

GM_Snatch_SwitchCard_Return::GM_Snatch_SwitchCard_Return(const GM_Snatch_SwitchCard_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_SwitchCard_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_SwitchCard_Return::~GM_Snatch_SwitchCard_Return() {
  SharedDtor();
}

void GM_Snatch_SwitchCard_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_SwitchCard_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_SwitchCard_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_SwitchCard_Return_descriptor_;
}

const GM_Snatch_SwitchCard_Return& GM_Snatch_SwitchCard_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_SwitchCard_Return* GM_Snatch_SwitchCard_Return::default_instance_ = NULL;

GM_Snatch_SwitchCard_Return* GM_Snatch_SwitchCard_Return::New() const {
  return new GM_Snatch_SwitchCard_Return;
}

void GM_Snatch_SwitchCard_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pos_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_SwitchCard_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .GM_Snatch_SwitchCardItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_SwitchCard_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // repeated .GM_Snatch_SwitchCardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_SwitchCard_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // repeated .GM_Snatch_SwitchCardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_SwitchCard_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated .GM_Snatch_SwitchCardItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_SwitchCard_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_SwitchCard_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_SwitchCard_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_SwitchCard_Return::MergeFrom(const GM_Snatch_SwitchCard_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_SwitchCard_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_SwitchCard_Return::CopyFrom(const GM_Snatch_SwitchCard_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_SwitchCard_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_SwitchCard_Return::Swap(GM_Snatch_SwitchCard_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_SwitchCard_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_SwitchCard_Return_descriptor_;
  metadata.reflection = GM_Snatch_SwitchCard_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_Reward_Return::kResultFieldNumber;
const int GM_Snatch_Reward_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_Reward_Return::GM_Snatch_Reward_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_Reward_Return::InitAsDefaultInstance() {
}

GM_Snatch_Reward_Return::GM_Snatch_Reward_Return(const GM_Snatch_Reward_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_Reward_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_Reward_Return::~GM_Snatch_Reward_Return() {
  SharedDtor();
}

void GM_Snatch_Reward_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_Reward_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_Reward_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_Reward_Return_descriptor_;
}

const GM_Snatch_Reward_Return& GM_Snatch_Reward_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_Reward_Return* GM_Snatch_Reward_Return::default_instance_ = NULL;

GM_Snatch_Reward_Return* GM_Snatch_Reward_Return::New() const {
  return new GM_Snatch_Reward_Return;
}

void GM_Snatch_Reward_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_Reward_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .GM_Snatch_SwitchCardItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_Reward_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_Snatch_SwitchCardItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_Reward_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_Snatch_SwitchCardItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_Reward_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_Snatch_SwitchCardItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_Reward_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_Reward_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_Reward_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_Reward_Return::MergeFrom(const GM_Snatch_Reward_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_Reward_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_Reward_Return::CopyFrom(const GM_Snatch_Reward_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_Reward_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Snatch_Reward_Return::Swap(GM_Snatch_Reward_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_Reward_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_Reward_Return_descriptor_;
  metadata.reflection = GM_Snatch_Reward_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Snatch_PeaceTime_Return::kPeacetimeFieldNumber;
#endif  // !_MSC_VER

GM_Snatch_PeaceTime_Return::GM_Snatch_PeaceTime_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Snatch_PeaceTime_Return::InitAsDefaultInstance() {
}

GM_Snatch_PeaceTime_Return::GM_Snatch_PeaceTime_Return(const GM_Snatch_PeaceTime_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Snatch_PeaceTime_Return::SharedCtor() {
  _cached_size_ = 0;
  peacetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Snatch_PeaceTime_Return::~GM_Snatch_PeaceTime_Return() {
  SharedDtor();
}

void GM_Snatch_PeaceTime_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Snatch_PeaceTime_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Snatch_PeaceTime_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Snatch_PeaceTime_Return_descriptor_;
}

const GM_Snatch_PeaceTime_Return& GM_Snatch_PeaceTime_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snatch_2etxt();
  return *default_instance_;
}

GM_Snatch_PeaceTime_Return* GM_Snatch_PeaceTime_Return::default_instance_ = NULL;

GM_Snatch_PeaceTime_Return* GM_Snatch_PeaceTime_Return::New() const {
  return new GM_Snatch_PeaceTime_Return;
}

void GM_Snatch_PeaceTime_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peacetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Snatch_PeaceTime_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 peacetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peacetime_)));
          set_has_peacetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Snatch_PeaceTime_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 peacetime = 1;
  if (has_peacetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peacetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Snatch_PeaceTime_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 peacetime = 1;
  if (has_peacetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peacetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Snatch_PeaceTime_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 peacetime = 1;
    if (has_peacetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peacetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Snatch_PeaceTime_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Snatch_PeaceTime_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Snatch_PeaceTime_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Snatch_PeaceTime_Return::MergeFrom(const GM_Snatch_PeaceTime_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peacetime()) {
      set_peacetime(from.peacetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Snatch_PeaceTime_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Snatch_PeaceTime_Return::CopyFrom(const GM_Snatch_PeaceTime_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Snatch_PeaceTime_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Snatch_PeaceTime_Return::Swap(GM_Snatch_PeaceTime_Return* other) {
  if (other != this) {
    std::swap(peacetime_, other->peacetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Snatch_PeaceTime_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Snatch_PeaceTime_Return_descriptor_;
  metadata.reflection = GM_Snatch_PeaceTime_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
