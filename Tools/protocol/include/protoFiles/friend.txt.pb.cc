// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_recommend_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_recommend_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_single_recommend_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_single_recommend_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FriendRecommend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FriendRecommend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Exprecieve_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Exprecieve_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Invite_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Invite_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Delete_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Delete_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Delete_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Delete_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_recieve_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_recieve_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friendrecieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friendrecieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_One_Friend_Recieve_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_One_Friend_Recieve_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_All_Friend_Recieve_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_All_Friend_Recieve_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Invitelist_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Invitelist_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Invitelist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Invitelist_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Invite_Agree_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Invite_Agree_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Invite_AgreeAll_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Invite_AgreeAll_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Invite_Refuse_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Invite_Refuse_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Single_Friend_Recommend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Single_Friend_Recommend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Invite_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Invite_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Friend_Notice_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Friend_Notice_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2etxt() {
  protobuf_AddDesc_friend_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Friend_descriptor_ = file->message_type(0);
  static const int GM_Friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend, coldtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend, m_frienddata_),
  };
  GM_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_descriptor_,
      GM_Friend::default_instance_,
      GM_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend));
  GM_FriendData_descriptor_ = file->message_type(1);
  static const int GM_FriendData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_frendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_iscouple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, m_headphotourl_),
  };
  GM_FriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FriendData_descriptor_,
      GM_FriendData::default_instance_,
      GM_FriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FriendData));
  GM_Friend_recommend_return_descriptor_ = file->message_type(2);
  static const int GM_Friend_recommend_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recommend_return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recommend_return, m_friendrecommenddata_),
  };
  GM_Friend_recommend_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_recommend_return_descriptor_,
      GM_Friend_recommend_return::default_instance_,
      GM_Friend_recommend_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recommend_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recommend_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_recommend_return));
  GM_Friend_single_recommend_return_descriptor_ = file->message_type(3);
  static const int GM_Friend_single_recommend_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_single_recommend_return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_single_recommend_return, m_friendrecommenddata_),
  };
  GM_Friend_single_recommend_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_single_recommend_return_descriptor_,
      GM_Friend_single_recommend_return::default_instance_,
      GM_Friend_single_recommend_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_single_recommend_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_single_recommend_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_single_recommend_return));
  GM_FriendRecommend_descriptor_ = file->message_type(4);
  static const int GM_FriendRecommend_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_frendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, m_headphotourl_),
  };
  GM_FriendRecommend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FriendRecommend_descriptor_,
      GM_FriendRecommend::default_instance_,
      GM_FriendRecommend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FriendRecommend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FriendRecommend));
  GM_Friend_Exprecieve_Return_descriptor_ = file->message_type(5);
  static const int GM_Friend_Exprecieve_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Exprecieve_Return, m_state_),
  };
  GM_Friend_Exprecieve_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Exprecieve_Return_descriptor_,
      GM_Friend_Exprecieve_Return::default_instance_,
      GM_Friend_Exprecieve_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Exprecieve_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Exprecieve_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Exprecieve_Return));
  GM_Friend_Invite_return_descriptor_ = file->message_type(6);
  static const int GM_Friend_Invite_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_return, m_state_),
  };
  GM_Friend_Invite_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Invite_return_descriptor_,
      GM_Friend_Invite_return::default_instance_,
      GM_Friend_Invite_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Invite_return));
  GM_Friend_Delete_Request_descriptor_ = file->message_type(7);
  static const int GM_Friend_Delete_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Delete_Request, m_friendid_),
  };
  GM_Friend_Delete_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Delete_Request_descriptor_,
      GM_Friend_Delete_Request::default_instance_,
      GM_Friend_Delete_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Delete_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Delete_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Delete_Request));
  GM_Friend_Delete_return_descriptor_ = file->message_type(8);
  static const int GM_Friend_Delete_return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Delete_return, m_state_),
  };
  GM_Friend_Delete_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Delete_return_descriptor_,
      GM_Friend_Delete_return::default_instance_,
      GM_Friend_Delete_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Delete_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Delete_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Delete_return));
  GM_Friend_recieve_return_descriptor_ = file->message_type(9);
  static const int GM_Friend_recieve_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recieve_return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recieve_return, m_recievetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recieve_return, m_friendrecievedata_),
  };
  GM_Friend_recieve_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_recieve_return_descriptor_,
      GM_Friend_recieve_return::default_instance_,
      GM_Friend_recieve_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recieve_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_recieve_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_recieve_return));
  GM_Friendrecieve_descriptor_ = file->message_type(10);
  static const int GM_Friendrecieve_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, m_headphotourl_),
  };
  GM_Friendrecieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friendrecieve_descriptor_,
      GM_Friendrecieve::default_instance_,
      GM_Friendrecieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friendrecieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friendrecieve));
  GM_One_Friend_Recieve_return_descriptor_ = file->message_type(11);
  static const int GM_One_Friend_Recieve_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_One_Friend_Recieve_return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_One_Friend_Recieve_return, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_One_Friend_Recieve_return, m_friendid_),
  };
  GM_One_Friend_Recieve_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_One_Friend_Recieve_return_descriptor_,
      GM_One_Friend_Recieve_return::default_instance_,
      GM_One_Friend_Recieve_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_One_Friend_Recieve_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_One_Friend_Recieve_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_One_Friend_Recieve_return));
  GM_All_Friend_Recieve_return_descriptor_ = file->message_type(12);
  static const int GM_All_Friend_Recieve_return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_All_Friend_Recieve_return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_All_Friend_Recieve_return, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_All_Friend_Recieve_return, m_friendid_),
  };
  GM_All_Friend_Recieve_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_All_Friend_Recieve_return_descriptor_,
      GM_All_Friend_Recieve_return::default_instance_,
      GM_All_Friend_Recieve_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_All_Friend_Recieve_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_All_Friend_Recieve_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_All_Friend_Recieve_return));
  GM_Invitelist_return_descriptor_ = file->message_type(13);
  static const int GM_Invitelist_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist_return, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist_return, m_invitelistdata_),
  };
  GM_Invitelist_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Invitelist_return_descriptor_,
      GM_Invitelist_return::default_instance_,
      GM_Invitelist_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Invitelist_return));
  GM_Invitelist_descriptor_ = file->message_type(14);
  static const int GM_Invitelist_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_headphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, m_headphotourl_),
  };
  GM_Invitelist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Invitelist_descriptor_,
      GM_Invitelist::default_instance_,
      GM_Invitelist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invitelist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Invitelist));
  GM_Invite_Agree_Return_descriptor_ = file->message_type(15);
  static const int GM_Invite_Agree_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Agree_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Agree_Return, m_friendid_),
  };
  GM_Invite_Agree_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Invite_Agree_Return_descriptor_,
      GM_Invite_Agree_Return::default_instance_,
      GM_Invite_Agree_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Agree_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Agree_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Invite_Agree_Return));
  GM_Invite_AgreeAll_Return_descriptor_ = file->message_type(16);
  static const int GM_Invite_AgreeAll_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_AgreeAll_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_AgreeAll_Return, m_friendid_),
  };
  GM_Invite_AgreeAll_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Invite_AgreeAll_Return_descriptor_,
      GM_Invite_AgreeAll_Return::default_instance_,
      GM_Invite_AgreeAll_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_AgreeAll_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_AgreeAll_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Invite_AgreeAll_Return));
  GM_Invite_Refuse_Return_descriptor_ = file->message_type(17);
  static const int GM_Invite_Refuse_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Refuse_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Refuse_Return, m_friendid_),
  };
  GM_Invite_Refuse_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Invite_Refuse_Return_descriptor_,
      GM_Invite_Refuse_Return::default_instance_,
      GM_Invite_Refuse_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Refuse_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Invite_Refuse_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Invite_Refuse_Return));
  GM_Single_Friend_Recommend_descriptor_ = file->message_type(18);
  static const int GM_Single_Friend_Recommend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Friend_Recommend, m_name_),
  };
  GM_Single_Friend_Recommend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Single_Friend_Recommend_descriptor_,
      GM_Single_Friend_Recommend::default_instance_,
      GM_Single_Friend_Recommend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Friend_Recommend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Single_Friend_Recommend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Single_Friend_Recommend));
  GM_Friend_Invite_Request_descriptor_ = file->message_type(19);
  static const int GM_Friend_Invite_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_Request, m_friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_Request, m_content_),
  };
  GM_Friend_Invite_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Invite_Request_descriptor_,
      GM_Friend_Invite_Request::default_instance_,
      GM_Friend_Invite_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Invite_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Invite_Request));
  GM_Friend_Request_descriptor_ = file->message_type(20);
  static const int GM_Friend_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Request, m_friendid_),
  };
  GM_Friend_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Request_descriptor_,
      GM_Friend_Request::default_instance_,
      GM_Friend_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Request));
  GM_Friend_Notice_Return_descriptor_ = file->message_type(21);
  static const int GM_Friend_Notice_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Notice_Return, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Notice_Return, m_rolename_),
  };
  GM_Friend_Notice_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Friend_Notice_Return_descriptor_,
      GM_Friend_Notice_Return::default_instance_,
      GM_Friend_Notice_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Notice_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Friend_Notice_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Friend_Notice_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_descriptor_, &GM_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FriendData_descriptor_, &GM_FriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_recommend_return_descriptor_, &GM_Friend_recommend_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_single_recommend_return_descriptor_, &GM_Friend_single_recommend_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FriendRecommend_descriptor_, &GM_FriendRecommend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Exprecieve_Return_descriptor_, &GM_Friend_Exprecieve_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Invite_return_descriptor_, &GM_Friend_Invite_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Delete_Request_descriptor_, &GM_Friend_Delete_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Delete_return_descriptor_, &GM_Friend_Delete_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_recieve_return_descriptor_, &GM_Friend_recieve_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friendrecieve_descriptor_, &GM_Friendrecieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_One_Friend_Recieve_return_descriptor_, &GM_One_Friend_Recieve_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_All_Friend_Recieve_return_descriptor_, &GM_All_Friend_Recieve_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Invitelist_return_descriptor_, &GM_Invitelist_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Invitelist_descriptor_, &GM_Invitelist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Invite_Agree_Return_descriptor_, &GM_Invite_Agree_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Invite_AgreeAll_Return_descriptor_, &GM_Invite_AgreeAll_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Invite_Refuse_Return_descriptor_, &GM_Invite_Refuse_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Single_Friend_Recommend_descriptor_, &GM_Single_Friend_Recommend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Invite_Request_descriptor_, &GM_Friend_Invite_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Request_descriptor_, &GM_Friend_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Friend_Notice_Return_descriptor_, &GM_Friend_Notice_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2etxt() {
  delete GM_Friend::default_instance_;
  delete GM_Friend_reflection_;
  delete GM_FriendData::default_instance_;
  delete GM_FriendData_reflection_;
  delete GM_Friend_recommend_return::default_instance_;
  delete GM_Friend_recommend_return_reflection_;
  delete GM_Friend_single_recommend_return::default_instance_;
  delete GM_Friend_single_recommend_return_reflection_;
  delete GM_FriendRecommend::default_instance_;
  delete GM_FriendRecommend_reflection_;
  delete GM_Friend_Exprecieve_Return::default_instance_;
  delete GM_Friend_Exprecieve_Return_reflection_;
  delete GM_Friend_Invite_return::default_instance_;
  delete GM_Friend_Invite_return_reflection_;
  delete GM_Friend_Delete_Request::default_instance_;
  delete GM_Friend_Delete_Request_reflection_;
  delete GM_Friend_Delete_return::default_instance_;
  delete GM_Friend_Delete_return_reflection_;
  delete GM_Friend_recieve_return::default_instance_;
  delete GM_Friend_recieve_return_reflection_;
  delete GM_Friendrecieve::default_instance_;
  delete GM_Friendrecieve_reflection_;
  delete GM_One_Friend_Recieve_return::default_instance_;
  delete GM_One_Friend_Recieve_return_reflection_;
  delete GM_All_Friend_Recieve_return::default_instance_;
  delete GM_All_Friend_Recieve_return_reflection_;
  delete GM_Invitelist_return::default_instance_;
  delete GM_Invitelist_return_reflection_;
  delete GM_Invitelist::default_instance_;
  delete GM_Invitelist_reflection_;
  delete GM_Invite_Agree_Return::default_instance_;
  delete GM_Invite_Agree_Return_reflection_;
  delete GM_Invite_AgreeAll_Return::default_instance_;
  delete GM_Invite_AgreeAll_Return_reflection_;
  delete GM_Invite_Refuse_Return::default_instance_;
  delete GM_Invite_Refuse_Return_reflection_;
  delete GM_Single_Friend_Recommend::default_instance_;
  delete GM_Single_Friend_Recommend_reflection_;
  delete GM_Friend_Invite_Request::default_instance_;
  delete GM_Friend_Invite_Request_reflection_;
  delete GM_Friend_Request::default_instance_;
  delete GM_Friend_Request_reflection_;
  delete GM_Friend_Notice_Return::default_instance_;
  delete GM_Friend_Notice_Return_reflection_;
}

void protobuf_AddDesc_friend_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nfriend.txt\"T\n\tGM_Friend\022\017\n\007m_count\030\001 \002"
    "(\005\022\020\n\010coldtime\030\002 \001(\005\022$\n\014m_FriendData\030\003 \003"
    "(\0132\016.GM_FriendData\"\362\001\n\rGM_FriendData\022\021\n\t"
    "m_frendid\030\001 \002(\005\022\016\n\006m_name\030\002 \001(\t\022\022\n\nm_vip"
    "level\030\003 \001(\005\022\017\n\007m_level\030\004 \001(\005\022\r\n\005m_sex\030\005 "
    "\001(\005\022\020\n\010m_online\030\006 \001(\005\022\016\n\006m_give\030\007 \001(\005\022\022\n"
    "\nm_isCouple\030\010 \001(\005\022\023\n\013m_headPhoto\030\t \001(\005\022\023"
    "\n\013m_headFrame\030\n \001(\005\022\022\n\nm_NickName\030\013 \001(\t\022"
    "\026\n\016m_HeadPhotoUrl\030\014 \001(\t\"a\n\032GM_Friend_rec"
    "ommend_return\022\017\n\007m_count\030\001 \002(\005\0222\n\025m_Frie"
    "ndRecommendData\030\002 \003(\0132\023.GM_FriendRecomme"
    "nd\"h\n!GM_Friend_single_recommend_return\022"
    "\017\n\007m_count\030\001 \002(\005\0222\n\025m_FriendRecommendDat"
    "a\030\002 \003(\0132\023.GM_FriendRecommend\"\301\001\n\022GM_Frie"
    "ndRecommend\022\021\n\tm_frendid\030\001 \002(\005\022\016\n\006m_name"
    "\030\002 \001(\t\022\r\n\005m_sex\030\003 \001(\005\022\017\n\007m_level\030\004 \001(\005\022\022"
    "\n\nm_viplevel\030\005 \001(\005\022\023\n\013m_headPhoto\030\006 \001(\005\022"
    "\023\n\013m_headFrame\030\007 \001(\005\022\022\n\nm_NickName\030\010 \001(\t"
    "\022\026\n\016m_HeadPhotoUrl\030\t \001(\t\".\n\033GM_Friend_Ex"
    "precieve_Return\022\017\n\007m_state\030\001 \002(\005\"*\n\027GM_F"
    "riend_Invite_return\022\017\n\007m_state\030\001 \002(\005\".\n\030"
    "GM_Friend_Delete_Request\022\022\n\nm_friendid\030\001"
    " \002(\005\"*\n\027GM_Friend_Delete_return\022\017\n\007m_sta"
    "te\030\001 \002(\005\"r\n\030GM_Friend_recieve_return\022\017\n\007"
    "m_count\030\001 \002(\005\022\025\n\rm_recievetime\030\002 \002(\005\022.\n\023"
    "m_FriendrecieveData\030\003 \003(\0132\021.GM_Friendrec"
    "ieve\"\320\001\n\020GM_Friendrecieve\022\022\n\nm_friendid\030"
    "\001 \002(\005\022\016\n\006m_name\030\002 \001(\t\022\r\n\005m_sex\030\003 \001(\005\022\017\n\007"
    "m_level\030\004 \001(\005\022\022\n\nm_viplevel\030\005 \001(\005\022\016\n\006m_t"
    "ime\030\006 \001(\005\022\023\n\013m_headPhoto\030\007 \001(\005\022\023\n\013m_head"
    "Frame\030\010 \001(\005\022\022\n\nm_NickName\030\t \001(\t\022\026\n\016m_Hea"
    "dPhotoUrl\030\n \001(\t\"R\n\034GM_One_Friend_Recieve"
    "_return\022\017\n\007m_state\030\001 \002(\005\022\r\n\005m_num\030\002 \002(\005\022"
    "\022\n\nm_friendid\030\003 \002(\005\"R\n\034GM_All_Friend_Rec"
    "ieve_return\022\017\n\007m_state\030\001 \002(\005\022\r\n\005m_num\030\002 "
    "\002(\005\022\022\n\nm_friendid\030\003 \003(\005\"Q\n\024GM_Invitelist"
    "_return\022\017\n\007m_count\030\001 \002(\005\022(\n\020m_Invitelist"
    "Data\030\002 \003(\0132\016.GM_Invitelist\"\320\001\n\rGM_Invite"
    "list\022\022\n\nm_friendid\030\001 \002(\005\022\016\n\006m_name\030\002 \001(\t"
    "\022\r\n\005m_sex\030\003 \001(\005\022\017\n\007m_level\030\004 \001(\005\022\022\n\nm_vi"
    "plevel\030\005 \001(\005\022\021\n\tm_content\030\006 \001(\t\022\023\n\013m_hea"
    "dPhoto\030\007 \001(\005\022\023\n\013m_headFrame\030\010 \001(\005\022\022\n\nm_N"
    "ickName\030\t \001(\t\022\026\n\016m_HeadPhotoUrl\030\n \001(\t\">\n"
    "\026GM_Invite_Agree_Return\022\020\n\010m_result\030\001 \002("
    "\005\022\022\n\nm_friendid\030\002 \002(\005\"A\n\031GM_Invite_Agree"
    "All_Return\022\020\n\010m_result\030\001 \002(\005\022\022\n\nm_friend"
    "id\030\002 \003(\005\"\?\n\027GM_Invite_Refuse_Return\022\020\n\010m"
    "_result\030\001 \002(\005\022\022\n\nm_friendid\030\002 \002(\005\",\n\032GM_"
    "Single_Friend_Recommend\022\016\n\006m_name\030\001 \002(\t\""
    "A\n\030GM_Friend_Invite_Request\022\022\n\nm_friendi"
    "d\030\001 \002(\005\022\021\n\tm_content\030\002 \002(\t\"\'\n\021GM_Friend_"
    "Request\022\022\n\nm_friendid\030\001 \002(\005\";\n\027GM_Friend"
    "_Notice_Return\022\014\n\004m_id\030\001 \002(\005\022\022\n\nm_rolena"
    "me\030\002 \002(\t", 2128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.txt", &protobuf_RegisterTypes);
  GM_Friend::default_instance_ = new GM_Friend();
  GM_FriendData::default_instance_ = new GM_FriendData();
  GM_Friend_recommend_return::default_instance_ = new GM_Friend_recommend_return();
  GM_Friend_single_recommend_return::default_instance_ = new GM_Friend_single_recommend_return();
  GM_FriendRecommend::default_instance_ = new GM_FriendRecommend();
  GM_Friend_Exprecieve_Return::default_instance_ = new GM_Friend_Exprecieve_Return();
  GM_Friend_Invite_return::default_instance_ = new GM_Friend_Invite_return();
  GM_Friend_Delete_Request::default_instance_ = new GM_Friend_Delete_Request();
  GM_Friend_Delete_return::default_instance_ = new GM_Friend_Delete_return();
  GM_Friend_recieve_return::default_instance_ = new GM_Friend_recieve_return();
  GM_Friendrecieve::default_instance_ = new GM_Friendrecieve();
  GM_One_Friend_Recieve_return::default_instance_ = new GM_One_Friend_Recieve_return();
  GM_All_Friend_Recieve_return::default_instance_ = new GM_All_Friend_Recieve_return();
  GM_Invitelist_return::default_instance_ = new GM_Invitelist_return();
  GM_Invitelist::default_instance_ = new GM_Invitelist();
  GM_Invite_Agree_Return::default_instance_ = new GM_Invite_Agree_Return();
  GM_Invite_AgreeAll_Return::default_instance_ = new GM_Invite_AgreeAll_Return();
  GM_Invite_Refuse_Return::default_instance_ = new GM_Invite_Refuse_Return();
  GM_Single_Friend_Recommend::default_instance_ = new GM_Single_Friend_Recommend();
  GM_Friend_Invite_Request::default_instance_ = new GM_Friend_Invite_Request();
  GM_Friend_Request::default_instance_ = new GM_Friend_Request();
  GM_Friend_Notice_Return::default_instance_ = new GM_Friend_Notice_Return();
  GM_Friend::default_instance_->InitAsDefaultInstance();
  GM_FriendData::default_instance_->InitAsDefaultInstance();
  GM_Friend_recommend_return::default_instance_->InitAsDefaultInstance();
  GM_Friend_single_recommend_return::default_instance_->InitAsDefaultInstance();
  GM_FriendRecommend::default_instance_->InitAsDefaultInstance();
  GM_Friend_Exprecieve_Return::default_instance_->InitAsDefaultInstance();
  GM_Friend_Invite_return::default_instance_->InitAsDefaultInstance();
  GM_Friend_Delete_Request::default_instance_->InitAsDefaultInstance();
  GM_Friend_Delete_return::default_instance_->InitAsDefaultInstance();
  GM_Friend_recieve_return::default_instance_->InitAsDefaultInstance();
  GM_Friendrecieve::default_instance_->InitAsDefaultInstance();
  GM_One_Friend_Recieve_return::default_instance_->InitAsDefaultInstance();
  GM_All_Friend_Recieve_return::default_instance_->InitAsDefaultInstance();
  GM_Invitelist_return::default_instance_->InitAsDefaultInstance();
  GM_Invitelist::default_instance_->InitAsDefaultInstance();
  GM_Invite_Agree_Return::default_instance_->InitAsDefaultInstance();
  GM_Invite_AgreeAll_Return::default_instance_->InitAsDefaultInstance();
  GM_Invite_Refuse_Return::default_instance_->InitAsDefaultInstance();
  GM_Single_Friend_Recommend::default_instance_->InitAsDefaultInstance();
  GM_Friend_Invite_Request::default_instance_->InitAsDefaultInstance();
  GM_Friend_Request::default_instance_->InitAsDefaultInstance();
  GM_Friend_Notice_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2etxt {
  StaticDescriptorInitializer_friend_2etxt() {
    protobuf_AddDesc_friend_2etxt();
  }
} static_descriptor_initializer_friend_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Friend::kMCountFieldNumber;
const int GM_Friend::kColdtimeFieldNumber;
const int GM_Friend::kMFriendDataFieldNumber;
#endif  // !_MSC_VER

GM_Friend::GM_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend::InitAsDefaultInstance() {
}

GM_Friend::GM_Friend(const GM_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  coldtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend::~GM_Friend() {
  SharedDtor();
}

void GM_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_descriptor_;
}

const GM_Friend& GM_Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend* GM_Friend::default_instance_ = NULL;

GM_Friend* GM_Friend::New() const {
  return new GM_Friend;
}

void GM_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
    coldtime_ = 0;
  }
  m_frienddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coldtime;
        break;
      }

      // optional int32 coldtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coldtime_)));
          set_has_coldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_FriendData;
        break;
      }

      // repeated .GM_FriendData m_FriendData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FriendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_frienddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_FriendData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // optional int32 coldtime = 2;
  if (has_coldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coldtime(), output);
  }

  // repeated .GM_FriendData m_FriendData = 3;
  for (int i = 0; i < this->m_frienddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_frienddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // optional int32 coldtime = 2;
  if (has_coldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coldtime(), target);
  }

  // repeated .GM_FriendData m_FriendData = 3;
  for (int i = 0; i < this->m_frienddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_frienddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // optional int32 coldtime = 2;
    if (has_coldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coldtime());
    }

  }
  // repeated .GM_FriendData m_FriendData = 3;
  total_size += 1 * this->m_frienddata_size();
  for (int i = 0; i < this->m_frienddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_frienddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend::MergeFrom(const GM_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_frienddata_.MergeFrom(from.m_frienddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_coldtime()) {
      set_coldtime(from.coldtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend::CopyFrom(const GM_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_frienddata_size(); i++) {
    if (!this->m_frienddata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Friend::Swap(GM_Friend* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    std::swap(coldtime_, other->coldtime_);
    m_frienddata_.Swap(&other->m_frienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_descriptor_;
  metadata.reflection = GM_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FriendData::kMFrendidFieldNumber;
const int GM_FriendData::kMNameFieldNumber;
const int GM_FriendData::kMViplevelFieldNumber;
const int GM_FriendData::kMLevelFieldNumber;
const int GM_FriendData::kMSexFieldNumber;
const int GM_FriendData::kMOnlineFieldNumber;
const int GM_FriendData::kMGiveFieldNumber;
const int GM_FriendData::kMIsCoupleFieldNumber;
const int GM_FriendData::kMHeadPhotoFieldNumber;
const int GM_FriendData::kMHeadFrameFieldNumber;
const int GM_FriendData::kMNickNameFieldNumber;
const int GM_FriendData::kMHeadPhotoUrlFieldNumber;
#endif  // !_MSC_VER

GM_FriendData::GM_FriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FriendData::InitAsDefaultInstance() {
}

GM_FriendData::GM_FriendData(const GM_FriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FriendData::SharedCtor() {
  _cached_size_ = 0;
  m_frendid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_viplevel_ = 0;
  m_level_ = 0;
  m_sex_ = 0;
  m_online_ = 0;
  m_give_ = 0;
  m_iscouple_ = 0;
  m_headphoto_ = 0;
  m_headframe_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FriendData::~GM_FriendData() {
  SharedDtor();
}

void GM_FriendData::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (this != default_instance_) {
  }
}

void GM_FriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FriendData_descriptor_;
}

const GM_FriendData& GM_FriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_FriendData* GM_FriendData::default_instance_ = NULL;

GM_FriendData* GM_FriendData::New() const {
  return new GM_FriendData;
}

void GM_FriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_frendid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_viplevel_ = 0;
    m_level_ = 0;
    m_sex_ = 0;
    m_online_ = 0;
    m_give_ = 0;
    m_iscouple_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_headphoto_ = 0;
    m_headframe_ = 0;
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_frendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_frendid_)));
          set_has_m_frendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_sex;
        break;
      }

      // optional int32 m_sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_online;
        break;
      }

      // optional int32 m_online = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_online_)));
          set_has_m_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_give;
        break;
      }

      // optional int32 m_give = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_give_)));
          set_has_m_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_isCouple;
        break;
      }

      // optional int32 m_isCouple = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isCouple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iscouple_)));
          set_has_m_iscouple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_headPhoto;
        break;
      }

      // optional int32 m_headPhoto = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_headFrame;
        break;
      }

      // optional int32 m_headFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_frendid = 1;
  if (has_m_frendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_frendid(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_viplevel = 3;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_viplevel(), output);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_level(), output);
  }

  // optional int32 m_sex = 5;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_sex(), output);
  }

  // optional int32 m_online = 6;
  if (has_m_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_online(), output);
  }

  // optional int32 m_give = 7;
  if (has_m_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_give(), output);
  }

  // optional int32 m_isCouple = 8;
  if (has_m_iscouple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_iscouple(), output);
  }

  // optional int32 m_headPhoto = 9;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_headphoto(), output);
  }

  // optional int32 m_headFrame = 10;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_headframe(), output);
  }

  // optional string m_NickName = 11;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 12;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_headphotourl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_frendid = 1;
  if (has_m_frendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_frendid(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_viplevel = 3;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_viplevel(), target);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_level(), target);
  }

  // optional int32 m_sex = 5;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_sex(), target);
  }

  // optional int32 m_online = 6;
  if (has_m_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_online(), target);
  }

  // optional int32 m_give = 7;
  if (has_m_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_give(), target);
  }

  // optional int32 m_isCouple = 8;
  if (has_m_iscouple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_iscouple(), target);
  }

  // optional int32 m_headPhoto = 9;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_headphoto(), target);
  }

  // optional int32 m_headFrame = 10;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_headframe(), target);
  }

  // optional string m_NickName = 11;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 12;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_headphotourl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_frendid = 1;
    if (has_m_frendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_frendid());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_viplevel = 3;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional int32 m_level = 4;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_sex = 5;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_online = 6;
    if (has_m_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_online());
    }

    // optional int32 m_give = 7;
    if (has_m_give()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_give());
    }

    // optional int32 m_isCouple = 8;
    if (has_m_iscouple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iscouple());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_headPhoto = 9;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_headFrame = 10;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

    // optional string m_NickName = 11;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // optional string m_HeadPhotoUrl = 12;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FriendData::MergeFrom(const GM_FriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_frendid()) {
      set_m_frendid(from.m_frendid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_online()) {
      set_m_online(from.m_online());
    }
    if (from.has_m_give()) {
      set_m_give(from.m_give());
    }
    if (from.has_m_iscouple()) {
      set_m_iscouple(from.m_iscouple());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FriendData::CopyFrom(const GM_FriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FriendData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FriendData::Swap(GM_FriendData* other) {
  if (other != this) {
    std::swap(m_frendid_, other->m_frendid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_online_, other->m_online_);
    std::swap(m_give_, other->m_give_);
    std::swap(m_iscouple_, other->m_iscouple_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FriendData_descriptor_;
  metadata.reflection = GM_FriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_recommend_return::kMCountFieldNumber;
const int GM_Friend_recommend_return::kMFriendRecommendDataFieldNumber;
#endif  // !_MSC_VER

GM_Friend_recommend_return::GM_Friend_recommend_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_recommend_return::InitAsDefaultInstance() {
}

GM_Friend_recommend_return::GM_Friend_recommend_return(const GM_Friend_recommend_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_recommend_return::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_recommend_return::~GM_Friend_recommend_return() {
  SharedDtor();
}

void GM_Friend_recommend_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_recommend_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_recommend_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_recommend_return_descriptor_;
}

const GM_Friend_recommend_return& GM_Friend_recommend_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_recommend_return* GM_Friend_recommend_return::default_instance_ = NULL;

GM_Friend_recommend_return* GM_Friend_recommend_return::New() const {
  return new GM_Friend_recommend_return;
}

void GM_Friend_recommend_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_friendrecommenddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_recommend_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_FriendRecommendData;
        break;
      }

      // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FriendRecommendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_friendrecommenddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_FriendRecommendData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_recommend_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
  for (int i = 0; i < this->m_friendrecommenddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_friendrecommenddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_recommend_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
  for (int i = 0; i < this->m_friendrecommenddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_friendrecommenddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_recommend_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
  total_size += 1 * this->m_friendrecommenddata_size();
  for (int i = 0; i < this->m_friendrecommenddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_friendrecommenddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_recommend_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_recommend_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_recommend_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_recommend_return::MergeFrom(const GM_Friend_recommend_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_friendrecommenddata_.MergeFrom(from.m_friendrecommenddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_recommend_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_recommend_return::CopyFrom(const GM_Friend_recommend_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_recommend_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_friendrecommenddata_size(); i++) {
    if (!this->m_friendrecommenddata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Friend_recommend_return::Swap(GM_Friend_recommend_return* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_friendrecommenddata_.Swap(&other->m_friendrecommenddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_recommend_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_recommend_return_descriptor_;
  metadata.reflection = GM_Friend_recommend_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_single_recommend_return::kMCountFieldNumber;
const int GM_Friend_single_recommend_return::kMFriendRecommendDataFieldNumber;
#endif  // !_MSC_VER

GM_Friend_single_recommend_return::GM_Friend_single_recommend_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_single_recommend_return::InitAsDefaultInstance() {
}

GM_Friend_single_recommend_return::GM_Friend_single_recommend_return(const GM_Friend_single_recommend_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_single_recommend_return::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_single_recommend_return::~GM_Friend_single_recommend_return() {
  SharedDtor();
}

void GM_Friend_single_recommend_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_single_recommend_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_single_recommend_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_single_recommend_return_descriptor_;
}

const GM_Friend_single_recommend_return& GM_Friend_single_recommend_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_single_recommend_return* GM_Friend_single_recommend_return::default_instance_ = NULL;

GM_Friend_single_recommend_return* GM_Friend_single_recommend_return::New() const {
  return new GM_Friend_single_recommend_return;
}

void GM_Friend_single_recommend_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_friendrecommenddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_single_recommend_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_FriendRecommendData;
        break;
      }

      // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FriendRecommendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_friendrecommenddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_FriendRecommendData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_single_recommend_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
  for (int i = 0; i < this->m_friendrecommenddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_friendrecommenddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_single_recommend_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
  for (int i = 0; i < this->m_friendrecommenddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_friendrecommenddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_single_recommend_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_FriendRecommend m_FriendRecommendData = 2;
  total_size += 1 * this->m_friendrecommenddata_size();
  for (int i = 0; i < this->m_friendrecommenddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_friendrecommenddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_single_recommend_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_single_recommend_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_single_recommend_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_single_recommend_return::MergeFrom(const GM_Friend_single_recommend_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_friendrecommenddata_.MergeFrom(from.m_friendrecommenddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_single_recommend_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_single_recommend_return::CopyFrom(const GM_Friend_single_recommend_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_single_recommend_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_friendrecommenddata_size(); i++) {
    if (!this->m_friendrecommenddata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Friend_single_recommend_return::Swap(GM_Friend_single_recommend_return* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_friendrecommenddata_.Swap(&other->m_friendrecommenddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_single_recommend_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_single_recommend_return_descriptor_;
  metadata.reflection = GM_Friend_single_recommend_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FriendRecommend::kMFrendidFieldNumber;
const int GM_FriendRecommend::kMNameFieldNumber;
const int GM_FriendRecommend::kMSexFieldNumber;
const int GM_FriendRecommend::kMLevelFieldNumber;
const int GM_FriendRecommend::kMViplevelFieldNumber;
const int GM_FriendRecommend::kMHeadPhotoFieldNumber;
const int GM_FriendRecommend::kMHeadFrameFieldNumber;
const int GM_FriendRecommend::kMNickNameFieldNumber;
const int GM_FriendRecommend::kMHeadPhotoUrlFieldNumber;
#endif  // !_MSC_VER

GM_FriendRecommend::GM_FriendRecommend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FriendRecommend::InitAsDefaultInstance() {
}

GM_FriendRecommend::GM_FriendRecommend(const GM_FriendRecommend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FriendRecommend::SharedCtor() {
  _cached_size_ = 0;
  m_frendid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_level_ = 0;
  m_viplevel_ = 0;
  m_headphoto_ = 0;
  m_headframe_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FriendRecommend::~GM_FriendRecommend() {
  SharedDtor();
}

void GM_FriendRecommend::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (this != default_instance_) {
  }
}

void GM_FriendRecommend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FriendRecommend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FriendRecommend_descriptor_;
}

const GM_FriendRecommend& GM_FriendRecommend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_FriendRecommend* GM_FriendRecommend::default_instance_ = NULL;

GM_FriendRecommend* GM_FriendRecommend::New() const {
  return new GM_FriendRecommend;
}

void GM_FriendRecommend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_frendid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_sex_ = 0;
    m_level_ = 0;
    m_viplevel_ = 0;
    m_headphoto_ = 0;
    m_headframe_ = 0;
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FriendRecommend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_frendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_frendid_)));
          set_has_m_frendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sex;
        break;
      }

      // optional int32 m_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_headPhoto;
        break;
      }

      // optional int32 m_headPhoto = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_headFrame;
        break;
      }

      // optional int32 m_headFrame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FriendRecommend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_frendid = 1;
  if (has_m_frendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_frendid(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sex(), output);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_level(), output);
  }

  // optional int32 m_viplevel = 5;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_viplevel(), output);
  }

  // optional int32 m_headPhoto = 6;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_headphoto(), output);
  }

  // optional int32 m_headFrame = 7;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_headframe(), output);
  }

  // optional string m_NickName = 8;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 9;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_headphotourl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FriendRecommend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_frendid = 1;
  if (has_m_frendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_frendid(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sex(), target);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_level(), target);
  }

  // optional int32 m_viplevel = 5;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_viplevel(), target);
  }

  // optional int32 m_headPhoto = 6;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_headphoto(), target);
  }

  // optional int32 m_headFrame = 7;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_headframe(), target);
  }

  // optional string m_NickName = 8;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 9;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_headphotourl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FriendRecommend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_frendid = 1;
    if (has_m_frendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_frendid());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_sex = 3;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_level = 4;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_viplevel = 5;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional int32 m_headPhoto = 6;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_headFrame = 7;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

    // optional string m_NickName = 8;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_HeadPhotoUrl = 9;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FriendRecommend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FriendRecommend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FriendRecommend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FriendRecommend::MergeFrom(const GM_FriendRecommend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_frendid()) {
      set_m_frendid(from.m_frendid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FriendRecommend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FriendRecommend::CopyFrom(const GM_FriendRecommend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FriendRecommend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FriendRecommend::Swap(GM_FriendRecommend* other) {
  if (other != this) {
    std::swap(m_frendid_, other->m_frendid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FriendRecommend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FriendRecommend_descriptor_;
  metadata.reflection = GM_FriendRecommend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Exprecieve_Return::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Exprecieve_Return::GM_Friend_Exprecieve_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Exprecieve_Return::InitAsDefaultInstance() {
}

GM_Friend_Exprecieve_Return::GM_Friend_Exprecieve_Return(const GM_Friend_Exprecieve_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Exprecieve_Return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Exprecieve_Return::~GM_Friend_Exprecieve_Return() {
  SharedDtor();
}

void GM_Friend_Exprecieve_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_Exprecieve_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Exprecieve_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Exprecieve_Return_descriptor_;
}

const GM_Friend_Exprecieve_Return& GM_Friend_Exprecieve_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Exprecieve_Return* GM_Friend_Exprecieve_Return::default_instance_ = NULL;

GM_Friend_Exprecieve_Return* GM_Friend_Exprecieve_Return::New() const {
  return new GM_Friend_Exprecieve_Return;
}

void GM_Friend_Exprecieve_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Exprecieve_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Exprecieve_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Exprecieve_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Exprecieve_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Exprecieve_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Exprecieve_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Exprecieve_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Exprecieve_Return::MergeFrom(const GM_Friend_Exprecieve_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Exprecieve_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Exprecieve_Return::CopyFrom(const GM_Friend_Exprecieve_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Exprecieve_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Friend_Exprecieve_Return::Swap(GM_Friend_Exprecieve_Return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Exprecieve_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Exprecieve_Return_descriptor_;
  metadata.reflection = GM_Friend_Exprecieve_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Invite_return::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Invite_return::GM_Friend_Invite_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Invite_return::InitAsDefaultInstance() {
}

GM_Friend_Invite_return::GM_Friend_Invite_return(const GM_Friend_Invite_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Invite_return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Invite_return::~GM_Friend_Invite_return() {
  SharedDtor();
}

void GM_Friend_Invite_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_Invite_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Invite_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Invite_return_descriptor_;
}

const GM_Friend_Invite_return& GM_Friend_Invite_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Invite_return* GM_Friend_Invite_return::default_instance_ = NULL;

GM_Friend_Invite_return* GM_Friend_Invite_return::New() const {
  return new GM_Friend_Invite_return;
}

void GM_Friend_Invite_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Invite_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Invite_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Invite_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Invite_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Invite_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Invite_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Invite_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Invite_return::MergeFrom(const GM_Friend_Invite_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Invite_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Invite_return::CopyFrom(const GM_Friend_Invite_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Invite_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Friend_Invite_return::Swap(GM_Friend_Invite_return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Invite_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Invite_return_descriptor_;
  metadata.reflection = GM_Friend_Invite_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Delete_Request::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Delete_Request::GM_Friend_Delete_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Delete_Request::InitAsDefaultInstance() {
}

GM_Friend_Delete_Request::GM_Friend_Delete_Request(const GM_Friend_Delete_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Delete_Request::SharedCtor() {
  _cached_size_ = 0;
  m_friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Delete_Request::~GM_Friend_Delete_Request() {
  SharedDtor();
}

void GM_Friend_Delete_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_Delete_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Delete_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Delete_Request_descriptor_;
}

const GM_Friend_Delete_Request& GM_Friend_Delete_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Delete_Request* GM_Friend_Delete_Request::default_instance_ = NULL;

GM_Friend_Delete_Request* GM_Friend_Delete_Request::New() const {
  return new GM_Friend_Delete_Request;
}

void GM_Friend_Delete_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Delete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Delete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Delete_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Delete_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_friendid = 1;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Delete_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Delete_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Delete_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Delete_Request::MergeFrom(const GM_Friend_Delete_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Delete_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Delete_Request::CopyFrom(const GM_Friend_Delete_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Delete_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Friend_Delete_Request::Swap(GM_Friend_Delete_Request* other) {
  if (other != this) {
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Delete_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Delete_Request_descriptor_;
  metadata.reflection = GM_Friend_Delete_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Delete_return::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Delete_return::GM_Friend_Delete_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Delete_return::InitAsDefaultInstance() {
}

GM_Friend_Delete_return::GM_Friend_Delete_return(const GM_Friend_Delete_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Delete_return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Delete_return::~GM_Friend_Delete_return() {
  SharedDtor();
}

void GM_Friend_Delete_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_Delete_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Delete_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Delete_return_descriptor_;
}

const GM_Friend_Delete_return& GM_Friend_Delete_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Delete_return* GM_Friend_Delete_return::default_instance_ = NULL;

GM_Friend_Delete_return* GM_Friend_Delete_return::New() const {
  return new GM_Friend_Delete_return;
}

void GM_Friend_Delete_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Delete_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Delete_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Delete_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Delete_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Delete_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Delete_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Delete_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Delete_return::MergeFrom(const GM_Friend_Delete_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Delete_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Delete_return::CopyFrom(const GM_Friend_Delete_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Delete_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Friend_Delete_return::Swap(GM_Friend_Delete_return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Delete_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Delete_return_descriptor_;
  metadata.reflection = GM_Friend_Delete_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_recieve_return::kMCountFieldNumber;
const int GM_Friend_recieve_return::kMRecievetimeFieldNumber;
const int GM_Friend_recieve_return::kMFriendrecieveDataFieldNumber;
#endif  // !_MSC_VER

GM_Friend_recieve_return::GM_Friend_recieve_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_recieve_return::InitAsDefaultInstance() {
}

GM_Friend_recieve_return::GM_Friend_recieve_return(const GM_Friend_recieve_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_recieve_return::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  m_recievetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_recieve_return::~GM_Friend_recieve_return() {
  SharedDtor();
}

void GM_Friend_recieve_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_recieve_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_recieve_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_recieve_return_descriptor_;
}

const GM_Friend_recieve_return& GM_Friend_recieve_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_recieve_return* GM_Friend_recieve_return::default_instance_ = NULL;

GM_Friend_recieve_return* GM_Friend_recieve_return::New() const {
  return new GM_Friend_recieve_return;
}

void GM_Friend_recieve_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
    m_recievetime_ = 0;
  }
  m_friendrecievedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_recieve_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_recievetime;
        break;
      }

      // required int32 m_recievetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recievetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recievetime_)));
          set_has_m_recievetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_FriendrecieveData;
        break;
      }

      // repeated .GM_Friendrecieve m_FriendrecieveData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_FriendrecieveData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_friendrecievedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_FriendrecieveData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_recieve_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // required int32 m_recievetime = 2;
  if (has_m_recievetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_recievetime(), output);
  }

  // repeated .GM_Friendrecieve m_FriendrecieveData = 3;
  for (int i = 0; i < this->m_friendrecievedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_friendrecievedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_recieve_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // required int32 m_recievetime = 2;
  if (has_m_recievetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_recievetime(), target);
  }

  // repeated .GM_Friendrecieve m_FriendrecieveData = 3;
  for (int i = 0; i < this->m_friendrecievedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_friendrecievedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_recieve_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // required int32 m_recievetime = 2;
    if (has_m_recievetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recievetime());
    }

  }
  // repeated .GM_Friendrecieve m_FriendrecieveData = 3;
  total_size += 1 * this->m_friendrecievedata_size();
  for (int i = 0; i < this->m_friendrecievedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_friendrecievedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_recieve_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_recieve_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_recieve_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_recieve_return::MergeFrom(const GM_Friend_recieve_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_friendrecievedata_.MergeFrom(from.m_friendrecievedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_recievetime()) {
      set_m_recievetime(from.m_recievetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_recieve_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_recieve_return::CopyFrom(const GM_Friend_recieve_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_recieve_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < m_friendrecievedata_size(); i++) {
    if (!this->m_friendrecievedata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Friend_recieve_return::Swap(GM_Friend_recieve_return* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    std::swap(m_recievetime_, other->m_recievetime_);
    m_friendrecievedata_.Swap(&other->m_friendrecievedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_recieve_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_recieve_return_descriptor_;
  metadata.reflection = GM_Friend_recieve_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friendrecieve::kMFriendidFieldNumber;
const int GM_Friendrecieve::kMNameFieldNumber;
const int GM_Friendrecieve::kMSexFieldNumber;
const int GM_Friendrecieve::kMLevelFieldNumber;
const int GM_Friendrecieve::kMViplevelFieldNumber;
const int GM_Friendrecieve::kMTimeFieldNumber;
const int GM_Friendrecieve::kMHeadPhotoFieldNumber;
const int GM_Friendrecieve::kMHeadFrameFieldNumber;
const int GM_Friendrecieve::kMNickNameFieldNumber;
const int GM_Friendrecieve::kMHeadPhotoUrlFieldNumber;
#endif  // !_MSC_VER

GM_Friendrecieve::GM_Friendrecieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friendrecieve::InitAsDefaultInstance() {
}

GM_Friendrecieve::GM_Friendrecieve(const GM_Friendrecieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friendrecieve::SharedCtor() {
  _cached_size_ = 0;
  m_friendid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_level_ = 0;
  m_viplevel_ = 0;
  m_time_ = 0;
  m_headphoto_ = 0;
  m_headframe_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friendrecieve::~GM_Friendrecieve() {
  SharedDtor();
}

void GM_Friendrecieve::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (this != default_instance_) {
  }
}

void GM_Friendrecieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friendrecieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friendrecieve_descriptor_;
}

const GM_Friendrecieve& GM_Friendrecieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friendrecieve* GM_Friendrecieve::default_instance_ = NULL;

GM_Friendrecieve* GM_Friendrecieve::New() const {
  return new GM_Friendrecieve;
}

void GM_Friendrecieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_friendid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_sex_ = 0;
    m_level_ = 0;
    m_viplevel_ = 0;
    m_time_ = 0;
    m_headphoto_ = 0;
    m_headframe_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friendrecieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sex;
        break;
      }

      // optional int32 m_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_headPhoto;
        break;
      }

      // optional int32 m_headPhoto = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_headFrame;
        break;
      }

      // optional int32 m_headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friendrecieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_friendid(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sex(), output);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_level(), output);
  }

  // optional int32 m_viplevel = 5;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_viplevel(), output);
  }

  // optional int32 m_time = 6;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_time(), output);
  }

  // optional int32 m_headPhoto = 7;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_headphoto(), output);
  }

  // optional int32 m_headFrame = 8;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_headframe(), output);
  }

  // optional string m_NickName = 9;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 10;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_headphotourl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friendrecieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_friendid(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sex(), target);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_level(), target);
  }

  // optional int32 m_viplevel = 5;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_viplevel(), target);
  }

  // optional int32 m_time = 6;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_time(), target);
  }

  // optional int32 m_headPhoto = 7;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_headphoto(), target);
  }

  // optional int32 m_headFrame = 8;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_headframe(), target);
  }

  // optional string m_NickName = 9;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 10;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_headphotourl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friendrecieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_friendid = 1;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_sex = 3;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_level = 4;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_viplevel = 5;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional int32 m_time = 6;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional int32 m_headPhoto = 7;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_headFrame = 8;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_NickName = 9;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // optional string m_HeadPhotoUrl = 10;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friendrecieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friendrecieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friendrecieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friendrecieve::MergeFrom(const GM_Friendrecieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friendrecieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friendrecieve::CopyFrom(const GM_Friendrecieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friendrecieve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Friendrecieve::Swap(GM_Friendrecieve* other) {
  if (other != this) {
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friendrecieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friendrecieve_descriptor_;
  metadata.reflection = GM_Friendrecieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_One_Friend_Recieve_return::kMStateFieldNumber;
const int GM_One_Friend_Recieve_return::kMNumFieldNumber;
const int GM_One_Friend_Recieve_return::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_One_Friend_Recieve_return::GM_One_Friend_Recieve_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_One_Friend_Recieve_return::InitAsDefaultInstance() {
}

GM_One_Friend_Recieve_return::GM_One_Friend_Recieve_return(const GM_One_Friend_Recieve_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_One_Friend_Recieve_return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_num_ = 0;
  m_friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_One_Friend_Recieve_return::~GM_One_Friend_Recieve_return() {
  SharedDtor();
}

void GM_One_Friend_Recieve_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_One_Friend_Recieve_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_One_Friend_Recieve_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_One_Friend_Recieve_return_descriptor_;
}

const GM_One_Friend_Recieve_return& GM_One_Friend_Recieve_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_One_Friend_Recieve_return* GM_One_Friend_Recieve_return::default_instance_ = NULL;

GM_One_Friend_Recieve_return* GM_One_Friend_Recieve_return::New() const {
  return new GM_One_Friend_Recieve_return;
}

void GM_One_Friend_Recieve_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
    m_num_ = 0;
    m_friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_One_Friend_Recieve_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_num;
        break;
      }

      // required int32 m_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_friendid;
        break;
      }

      // required int32 m_friendid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_One_Friend_Recieve_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // required int32 m_num = 2;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_num(), output);
  }

  // required int32 m_friendid = 3;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_One_Friend_Recieve_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // required int32 m_num = 2;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_num(), target);
  }

  // required int32 m_friendid = 3;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_One_Friend_Recieve_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // required int32 m_num = 2;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // required int32 m_friendid = 3;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_One_Friend_Recieve_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_One_Friend_Recieve_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_One_Friend_Recieve_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_One_Friend_Recieve_return::MergeFrom(const GM_One_Friend_Recieve_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_One_Friend_Recieve_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_One_Friend_Recieve_return::CopyFrom(const GM_One_Friend_Recieve_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_One_Friend_Recieve_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_One_Friend_Recieve_return::Swap(GM_One_Friend_Recieve_return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_One_Friend_Recieve_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_One_Friend_Recieve_return_descriptor_;
  metadata.reflection = GM_One_Friend_Recieve_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_All_Friend_Recieve_return::kMStateFieldNumber;
const int GM_All_Friend_Recieve_return::kMNumFieldNumber;
const int GM_All_Friend_Recieve_return::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_All_Friend_Recieve_return::GM_All_Friend_Recieve_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_All_Friend_Recieve_return::InitAsDefaultInstance() {
}

GM_All_Friend_Recieve_return::GM_All_Friend_Recieve_return(const GM_All_Friend_Recieve_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_All_Friend_Recieve_return::SharedCtor() {
  _cached_size_ = 0;
  m_state_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_All_Friend_Recieve_return::~GM_All_Friend_Recieve_return() {
  SharedDtor();
}

void GM_All_Friend_Recieve_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_All_Friend_Recieve_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_All_Friend_Recieve_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_All_Friend_Recieve_return_descriptor_;
}

const GM_All_Friend_Recieve_return& GM_All_Friend_Recieve_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_All_Friend_Recieve_return* GM_All_Friend_Recieve_return::default_instance_ = NULL;

GM_All_Friend_Recieve_return* GM_All_Friend_Recieve_return::New() const {
  return new GM_All_Friend_Recieve_return;
}

void GM_All_Friend_Recieve_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_state_ = 0;
    m_num_ = 0;
  }
  m_friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_All_Friend_Recieve_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_num;
        break;
      }

      // required int32 m_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_friendid;
        break;
      }

      // repeated int32 m_friendid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_m_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_friendid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_All_Friend_Recieve_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_state(), output);
  }

  // required int32 m_num = 2;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_num(), output);
  }

  // repeated int32 m_friendid = 3;
  for (int i = 0; i < this->m_friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->m_friendid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_All_Friend_Recieve_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_state = 1;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_state(), target);
  }

  // required int32 m_num = 2;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_num(), target);
  }

  // repeated int32 m_friendid = 3;
  for (int i = 0; i < this->m_friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->m_friendid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_All_Friend_Recieve_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_state = 1;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // required int32 m_num = 2;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated int32 m_friendid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_friendid(i));
    }
    total_size += 1 * this->m_friendid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_All_Friend_Recieve_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_All_Friend_Recieve_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_All_Friend_Recieve_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_All_Friend_Recieve_return::MergeFrom(const GM_All_Friend_Recieve_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_friendid_.MergeFrom(from.m_friendid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_All_Friend_Recieve_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_All_Friend_Recieve_return::CopyFrom(const GM_All_Friend_Recieve_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_All_Friend_Recieve_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_All_Friend_Recieve_return::Swap(GM_All_Friend_Recieve_return* other) {
  if (other != this) {
    std::swap(m_state_, other->m_state_);
    std::swap(m_num_, other->m_num_);
    m_friendid_.Swap(&other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_All_Friend_Recieve_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_All_Friend_Recieve_return_descriptor_;
  metadata.reflection = GM_All_Friend_Recieve_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Invitelist_return::kMCountFieldNumber;
const int GM_Invitelist_return::kMInvitelistDataFieldNumber;
#endif  // !_MSC_VER

GM_Invitelist_return::GM_Invitelist_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Invitelist_return::InitAsDefaultInstance() {
}

GM_Invitelist_return::GM_Invitelist_return(const GM_Invitelist_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Invitelist_return::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Invitelist_return::~GM_Invitelist_return() {
  SharedDtor();
}

void GM_Invitelist_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Invitelist_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Invitelist_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Invitelist_return_descriptor_;
}

const GM_Invitelist_return& GM_Invitelist_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Invitelist_return* GM_Invitelist_return::default_instance_ = NULL;

GM_Invitelist_return* GM_Invitelist_return::New() const {
  return new GM_Invitelist_return;
}

void GM_Invitelist_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
  }
  m_invitelistdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Invitelist_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_InvitelistData;
        break;
      }

      // repeated .GM_Invitelist m_InvitelistData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_InvitelistData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_invitelistdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_InvitelistData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Invitelist_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // repeated .GM_Invitelist m_InvitelistData = 2;
  for (int i = 0; i < this->m_invitelistdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_invitelistdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Invitelist_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // repeated .GM_Invitelist m_InvitelistData = 2;
  for (int i = 0; i < this->m_invitelistdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_invitelistdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Invitelist_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  // repeated .GM_Invitelist m_InvitelistData = 2;
  total_size += 1 * this->m_invitelistdata_size();
  for (int i = 0; i < this->m_invitelistdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_invitelistdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Invitelist_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Invitelist_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Invitelist_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Invitelist_return::MergeFrom(const GM_Invitelist_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_invitelistdata_.MergeFrom(from.m_invitelistdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Invitelist_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Invitelist_return::CopyFrom(const GM_Invitelist_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Invitelist_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_invitelistdata_size(); i++) {
    if (!this->m_invitelistdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Invitelist_return::Swap(GM_Invitelist_return* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    m_invitelistdata_.Swap(&other->m_invitelistdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Invitelist_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Invitelist_return_descriptor_;
  metadata.reflection = GM_Invitelist_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Invitelist::kMFriendidFieldNumber;
const int GM_Invitelist::kMNameFieldNumber;
const int GM_Invitelist::kMSexFieldNumber;
const int GM_Invitelist::kMLevelFieldNumber;
const int GM_Invitelist::kMViplevelFieldNumber;
const int GM_Invitelist::kMContentFieldNumber;
const int GM_Invitelist::kMHeadPhotoFieldNumber;
const int GM_Invitelist::kMHeadFrameFieldNumber;
const int GM_Invitelist::kMNickNameFieldNumber;
const int GM_Invitelist::kMHeadPhotoUrlFieldNumber;
#endif  // !_MSC_VER

GM_Invitelist::GM_Invitelist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Invitelist::InitAsDefaultInstance() {
}

GM_Invitelist::GM_Invitelist(const GM_Invitelist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Invitelist::SharedCtor() {
  _cached_size_ = 0;
  m_friendid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_level_ = 0;
  m_viplevel_ = 0;
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphoto_ = 0;
  m_headframe_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headphotourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Invitelist::~GM_Invitelist() {
  SharedDtor();
}

void GM_Invitelist::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_headphotourl_;
  }
  if (this != default_instance_) {
  }
}

void GM_Invitelist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Invitelist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Invitelist_descriptor_;
}

const GM_Invitelist& GM_Invitelist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Invitelist* GM_Invitelist::default_instance_ = NULL;

GM_Invitelist* GM_Invitelist::New() const {
  return new GM_Invitelist;
}

void GM_Invitelist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_friendid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_sex_ = 0;
    m_level_ = 0;
    m_viplevel_ = 0;
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
    m_headphoto_ = 0;
    m_headframe_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    if (has_m_headphotourl()) {
      if (m_headphotourl_ != &::google::protobuf::internal::kEmptyString) {
        m_headphotourl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Invitelist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sex;
        break;
      }

      // optional int32 m_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_content;
        break;
      }

      // optional string m_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_headPhoto;
        break;
      }

      // optional int32 m_headPhoto = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headphoto_)));
          set_has_m_headphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_headFrame;
        break;
      }

      // optional int32 m_headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headframe_)));
          set_has_m_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_NickName;
        break;
      }

      // optional string m_NickName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_HeadPhotoUrl;
        break;
      }

      // optional string m_HeadPhotoUrl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_HeadPhotoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_headphotourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_headphotourl().data(), this->m_headphotourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Invitelist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_friendid(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sex(), output);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_level(), output);
  }

  // optional int32 m_viplevel = 5;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_viplevel(), output);
  }

  // optional string m_content = 6;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_content(), output);
  }

  // optional int32 m_headPhoto = 7;
  if (has_m_headphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_headphoto(), output);
  }

  // optional int32 m_headFrame = 8;
  if (has_m_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_headframe(), output);
  }

  // optional string m_NickName = 9;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_nickname(), output);
  }

  // optional string m_HeadPhotoUrl = 10;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_headphotourl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Invitelist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_friendid(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_sex = 3;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sex(), target);
  }

  // optional int32 m_level = 4;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_level(), target);
  }

  // optional int32 m_viplevel = 5;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_viplevel(), target);
  }

  // optional string m_content = 6;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_content(), target);
  }

  // optional int32 m_headPhoto = 7;
  if (has_m_headphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_headphoto(), target);
  }

  // optional int32 m_headFrame = 8;
  if (has_m_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_headframe(), target);
  }

  // optional string m_NickName = 9;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_nickname(), target);
  }

  // optional string m_HeadPhotoUrl = 10;
  if (has_m_headphotourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_headphotourl().data(), this->m_headphotourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_headphotourl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Invitelist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_friendid = 1;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_sex = 3;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // optional int32 m_level = 4;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_viplevel = 5;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional string m_content = 6;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

    // optional int32 m_headPhoto = 7;
    if (has_m_headphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headphoto());
    }

    // optional int32 m_headFrame = 8;
    if (has_m_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headframe());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_NickName = 9;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // optional string m_HeadPhotoUrl = 10;
    if (has_m_headphotourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_headphotourl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Invitelist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Invitelist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Invitelist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Invitelist::MergeFrom(const GM_Invitelist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
    if (from.has_m_headphoto()) {
      set_m_headphoto(from.m_headphoto());
    }
    if (from.has_m_headframe()) {
      set_m_headframe(from.m_headframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_headphotourl()) {
      set_m_headphotourl(from.m_headphotourl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Invitelist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Invitelist::CopyFrom(const GM_Invitelist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Invitelist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Invitelist::Swap(GM_Invitelist* other) {
  if (other != this) {
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_content_, other->m_content_);
    std::swap(m_headphoto_, other->m_headphoto_);
    std::swap(m_headframe_, other->m_headframe_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_headphotourl_, other->m_headphotourl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Invitelist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Invitelist_descriptor_;
  metadata.reflection = GM_Invitelist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Invite_Agree_Return::kMResultFieldNumber;
const int GM_Invite_Agree_Return::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_Invite_Agree_Return::GM_Invite_Agree_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Invite_Agree_Return::InitAsDefaultInstance() {
}

GM_Invite_Agree_Return::GM_Invite_Agree_Return(const GM_Invite_Agree_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Invite_Agree_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Invite_Agree_Return::~GM_Invite_Agree_Return() {
  SharedDtor();
}

void GM_Invite_Agree_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Invite_Agree_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Invite_Agree_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Invite_Agree_Return_descriptor_;
}

const GM_Invite_Agree_Return& GM_Invite_Agree_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Invite_Agree_Return* GM_Invite_Agree_Return::default_instance_ = NULL;

GM_Invite_Agree_Return* GM_Invite_Agree_Return::New() const {
  return new GM_Invite_Agree_Return;
}

void GM_Invite_Agree_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Invite_Agree_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_friendid;
        break;
      }

      // required int32 m_friendid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Invite_Agree_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_friendid = 2;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Invite_Agree_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_friendid = 2;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Invite_Agree_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_friendid = 2;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Invite_Agree_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Invite_Agree_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Invite_Agree_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Invite_Agree_Return::MergeFrom(const GM_Invite_Agree_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Invite_Agree_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Invite_Agree_Return::CopyFrom(const GM_Invite_Agree_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Invite_Agree_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Invite_Agree_Return::Swap(GM_Invite_Agree_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Invite_Agree_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Invite_Agree_Return_descriptor_;
  metadata.reflection = GM_Invite_Agree_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Invite_AgreeAll_Return::kMResultFieldNumber;
const int GM_Invite_AgreeAll_Return::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_Invite_AgreeAll_Return::GM_Invite_AgreeAll_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Invite_AgreeAll_Return::InitAsDefaultInstance() {
}

GM_Invite_AgreeAll_Return::GM_Invite_AgreeAll_Return(const GM_Invite_AgreeAll_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Invite_AgreeAll_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Invite_AgreeAll_Return::~GM_Invite_AgreeAll_Return() {
  SharedDtor();
}

void GM_Invite_AgreeAll_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Invite_AgreeAll_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Invite_AgreeAll_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Invite_AgreeAll_Return_descriptor_;
}

const GM_Invite_AgreeAll_Return& GM_Invite_AgreeAll_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Invite_AgreeAll_Return* GM_Invite_AgreeAll_Return::default_instance_ = NULL;

GM_Invite_AgreeAll_Return* GM_Invite_AgreeAll_Return::New() const {
  return new GM_Invite_AgreeAll_Return;
}

void GM_Invite_AgreeAll_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  m_friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Invite_AgreeAll_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_friendid;
        break;
      }

      // repeated int32 m_friendid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_friendid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Invite_AgreeAll_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated int32 m_friendid = 2;
  for (int i = 0; i < this->m_friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_friendid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Invite_AgreeAll_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated int32 m_friendid = 2;
  for (int i = 0; i < this->m_friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_friendid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Invite_AgreeAll_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated int32 m_friendid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_friendid(i));
    }
    total_size += 1 * this->m_friendid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Invite_AgreeAll_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Invite_AgreeAll_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Invite_AgreeAll_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Invite_AgreeAll_Return::MergeFrom(const GM_Invite_AgreeAll_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_friendid_.MergeFrom(from.m_friendid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Invite_AgreeAll_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Invite_AgreeAll_Return::CopyFrom(const GM_Invite_AgreeAll_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Invite_AgreeAll_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Invite_AgreeAll_Return::Swap(GM_Invite_AgreeAll_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    m_friendid_.Swap(&other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Invite_AgreeAll_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Invite_AgreeAll_Return_descriptor_;
  metadata.reflection = GM_Invite_AgreeAll_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Invite_Refuse_Return::kMResultFieldNumber;
const int GM_Invite_Refuse_Return::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_Invite_Refuse_Return::GM_Invite_Refuse_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Invite_Refuse_Return::InitAsDefaultInstance() {
}

GM_Invite_Refuse_Return::GM_Invite_Refuse_Return(const GM_Invite_Refuse_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Invite_Refuse_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Invite_Refuse_Return::~GM_Invite_Refuse_Return() {
  SharedDtor();
}

void GM_Invite_Refuse_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Invite_Refuse_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Invite_Refuse_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Invite_Refuse_Return_descriptor_;
}

const GM_Invite_Refuse_Return& GM_Invite_Refuse_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Invite_Refuse_Return* GM_Invite_Refuse_Return::default_instance_ = NULL;

GM_Invite_Refuse_Return* GM_Invite_Refuse_Return::New() const {
  return new GM_Invite_Refuse_Return;
}

void GM_Invite_Refuse_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Invite_Refuse_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_friendid;
        break;
      }

      // required int32 m_friendid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Invite_Refuse_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_friendid = 2;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Invite_Refuse_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_friendid = 2;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Invite_Refuse_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_friendid = 2;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Invite_Refuse_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Invite_Refuse_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Invite_Refuse_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Invite_Refuse_Return::MergeFrom(const GM_Invite_Refuse_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Invite_Refuse_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Invite_Refuse_Return::CopyFrom(const GM_Invite_Refuse_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Invite_Refuse_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Invite_Refuse_Return::Swap(GM_Invite_Refuse_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Invite_Refuse_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Invite_Refuse_Return_descriptor_;
  metadata.reflection = GM_Invite_Refuse_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Single_Friend_Recommend::kMNameFieldNumber;
#endif  // !_MSC_VER

GM_Single_Friend_Recommend::GM_Single_Friend_Recommend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Single_Friend_Recommend::InitAsDefaultInstance() {
}

GM_Single_Friend_Recommend::GM_Single_Friend_Recommend(const GM_Single_Friend_Recommend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Single_Friend_Recommend::SharedCtor() {
  _cached_size_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Single_Friend_Recommend::~GM_Single_Friend_Recommend() {
  SharedDtor();
}

void GM_Single_Friend_Recommend::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void GM_Single_Friend_Recommend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Single_Friend_Recommend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Single_Friend_Recommend_descriptor_;
}

const GM_Single_Friend_Recommend& GM_Single_Friend_Recommend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Single_Friend_Recommend* GM_Single_Friend_Recommend::default_instance_ = NULL;

GM_Single_Friend_Recommend* GM_Single_Friend_Recommend::New() const {
  return new GM_Single_Friend_Recommend;
}

void GM_Single_Friend_Recommend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Single_Friend_Recommend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Single_Friend_Recommend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_name = 1;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Single_Friend_Recommend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_name = 1;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Single_Friend_Recommend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_name = 1;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Single_Friend_Recommend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Single_Friend_Recommend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Single_Friend_Recommend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Single_Friend_Recommend::MergeFrom(const GM_Single_Friend_Recommend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Single_Friend_Recommend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Single_Friend_Recommend::CopyFrom(const GM_Single_Friend_Recommend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Single_Friend_Recommend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Single_Friend_Recommend::Swap(GM_Single_Friend_Recommend* other) {
  if (other != this) {
    std::swap(m_name_, other->m_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Single_Friend_Recommend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Single_Friend_Recommend_descriptor_;
  metadata.reflection = GM_Single_Friend_Recommend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Invite_Request::kMFriendidFieldNumber;
const int GM_Friend_Invite_Request::kMContentFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Invite_Request::GM_Friend_Invite_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Invite_Request::InitAsDefaultInstance() {
}

GM_Friend_Invite_Request::GM_Friend_Invite_Request(const GM_Friend_Invite_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Invite_Request::SharedCtor() {
  _cached_size_ = 0;
  m_friendid_ = 0;
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Invite_Request::~GM_Friend_Invite_Request() {
  SharedDtor();
}

void GM_Friend_Invite_Request::SharedDtor() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (this != default_instance_) {
  }
}

void GM_Friend_Invite_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Invite_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Invite_Request_descriptor_;
}

const GM_Friend_Invite_Request& GM_Friend_Invite_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Invite_Request* GM_Friend_Invite_Request::default_instance_ = NULL;

GM_Friend_Invite_Request* GM_Friend_Invite_Request::New() const {
  return new GM_Friend_Invite_Request;
}

void GM_Friend_Invite_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_friendid_ = 0;
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Invite_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_content;
        break;
      }

      // required string m_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Invite_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_friendid(), output);
  }

  // required string m_content = 2;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Invite_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_friendid(), target);
  }

  // required string m_content = 2;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Invite_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_friendid = 1;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

    // required string m_content = 2;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Invite_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Invite_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Invite_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Invite_Request::MergeFrom(const GM_Friend_Invite_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Invite_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Invite_Request::CopyFrom(const GM_Friend_Invite_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Invite_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Friend_Invite_Request::Swap(GM_Friend_Invite_Request* other) {
  if (other != this) {
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(m_content_, other->m_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Invite_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Invite_Request_descriptor_;
  metadata.reflection = GM_Friend_Invite_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Request::kMFriendidFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Request::GM_Friend_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Request::InitAsDefaultInstance() {
}

GM_Friend_Request::GM_Friend_Request(const GM_Friend_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Request::SharedCtor() {
  _cached_size_ = 0;
  m_friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Request::~GM_Friend_Request() {
  SharedDtor();
}

void GM_Friend_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Friend_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Request_descriptor_;
}

const GM_Friend_Request& GM_Friend_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Request* GM_Friend_Request::default_instance_ = NULL;

GM_Friend_Request* GM_Friend_Request::New() const {
  return new GM_Friend_Request;
}

void GM_Friend_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_friendid = 1;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Request::MergeFrom(const GM_Friend_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Request::CopyFrom(const GM_Friend_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Friend_Request::Swap(GM_Friend_Request* other) {
  if (other != this) {
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Request_descriptor_;
  metadata.reflection = GM_Friend_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Friend_Notice_Return::kMIdFieldNumber;
const int GM_Friend_Notice_Return::kMRolenameFieldNumber;
#endif  // !_MSC_VER

GM_Friend_Notice_Return::GM_Friend_Notice_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Friend_Notice_Return::InitAsDefaultInstance() {
}

GM_Friend_Notice_Return::GM_Friend_Notice_Return(const GM_Friend_Notice_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Friend_Notice_Return::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Friend_Notice_Return::~GM_Friend_Notice_Return() {
  SharedDtor();
}

void GM_Friend_Notice_Return::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_Friend_Notice_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Friend_Notice_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Friend_Notice_Return_descriptor_;
}

const GM_Friend_Notice_Return& GM_Friend_Notice_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2etxt();
  return *default_instance_;
}

GM_Friend_Notice_Return* GM_Friend_Notice_Return::default_instance_ = NULL;

GM_Friend_Notice_Return* GM_Friend_Notice_Return::New() const {
  return new GM_Friend_Notice_Return;
}

void GM_Friend_Notice_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Friend_Notice_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_rolename;
        break;
      }

      // required string m_rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Friend_Notice_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // required string m_rolename = 2;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Friend_Notice_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // required string m_rolename = 2;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Friend_Notice_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // required string m_rolename = 2;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Friend_Notice_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Friend_Notice_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Friend_Notice_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Friend_Notice_Return::MergeFrom(const GM_Friend_Notice_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Friend_Notice_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Friend_Notice_Return::CopyFrom(const GM_Friend_Notice_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Friend_Notice_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Friend_Notice_Return::Swap(GM_Friend_Notice_Return* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Friend_Notice_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Friend_Notice_Return_descriptor_;
  metadata.reflection = GM_Friend_Notice_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
