// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Gmtool.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Gmtool.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMTool_GetOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_GetOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_CurrentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_CurrentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_Seal_Player_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_Seal_Player_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_Operation_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_Operation_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_GiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_GiftBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_OperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_OperateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_noticeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_noticeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_SystemWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_SystemWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_SealAccountReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_SealAccountReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_Mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_Mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_MailItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_MailItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_DynTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_DynTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FreshTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FreshTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SealAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SealAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_UpdateArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_UpdateArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTool_Acitveshare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTool_Acitveshare_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fGmtool_2etxt() {
  protobuf_AddDesc_SP_5fGmtool_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Gmtool.txt");
  GOOGLE_CHECK(file != NULL);
  GMTool_GetOnline_descriptor_ = file->message_type(0);
  static const int GMTool_GetOnline_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GetOnline, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GetOnline, maxonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GetOnline, currentonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GetOnline, httpserverip_),
  };
  GMTool_GetOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_GetOnline_descriptor_,
      GMTool_GetOnline::default_instance_,
      GMTool_GetOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GetOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GetOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_GetOnline));
  GMTool_CurrentData_descriptor_ = file->message_type(1);
  static const int GMTool_CurrentData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, maxonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, currentonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, registercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, httpserverip_),
  };
  GMTool_CurrentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_CurrentData_descriptor_,
      GMTool_CurrentData::default_instance_,
      GMTool_CurrentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_CurrentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_CurrentData));
  GMTool_Request_descriptor_ = file->message_type(2);
  static const int GMTool_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Request, roleid_),
  };
  GMTool_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_Request_descriptor_,
      GMTool_Request::default_instance_,
      GMTool_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_Request));
  GMTool_Seal_Player_Request_descriptor_ = file->message_type(3);
  static const int GMTool_Seal_Player_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, seal_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, role_desc_),
  };
  GMTool_Seal_Player_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_Seal_Player_Request_descriptor_,
      GMTool_Seal_Player_Request::default_instance_,
      GMTool_Seal_Player_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Seal_Player_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_Seal_Player_Request));
  GMTool_Operation_result_descriptor_ = file->message_type(4);
  static const int GMTool_Operation_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Operation_result, operation_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Operation_result, connect_),
  };
  GMTool_Operation_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_Operation_result_descriptor_,
      GMTool_Operation_result::default_instance_,
      GMTool_Operation_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Operation_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Operation_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_Operation_result));
  GiftBagItem_descriptor_ = file->message_type(5);
  static const int GiftBagItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBagItem, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBagItem, objcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBagItem, objlevel_),
  };
  GiftBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftBagItem_descriptor_,
      GiftBagItem::default_instance_,
      GiftBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftBagItem));
  GMTool_GiftBag_descriptor_ = file->message_type(6);
  static const int GMTool_GiftBag_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, m_iconurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, m_describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, m_giftbagitem_),
  };
  GMTool_GiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_GiftBag_descriptor_,
      GMTool_GiftBag::default_instance_,
      GMTool_GiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_GiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_GiftBag));
  GMTool_OperateRequest_descriptor_ = file->message_type(7);
  static const int GMTool_OperateRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, str_param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, int_param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, int_param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, str_param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, str_param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, str_param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, int_param4_),
  };
  GMTool_OperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_OperateRequest_descriptor_,
      GMTool_OperateRequest::default_instance_,
      GMTool_OperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_OperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_OperateRequest));
  GMTool_noticeRequest_descriptor_ = file->message_type(8);
  static const int GMTool_noticeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_noticeRequest, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_noticeRequest, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_noticeRequest, str_param_),
  };
  GMTool_noticeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_noticeRequest_descriptor_,
      GMTool_noticeRequest::default_instance_,
      GMTool_noticeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_noticeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_noticeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_noticeRequest));
  GMTool_SystemWord_descriptor_ = file->message_type(9);
  static const int GMTool_SystemWord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, interval_),
  };
  GMTool_SystemWord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_SystemWord_descriptor_,
      GMTool_SystemWord::default_instance_,
      GMTool_SystemWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SystemWord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_SystemWord));
  GMTool_SealAccountReturn_descriptor_ = file->message_type(10);
  static const int GMTool_SealAccountReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SealAccountReturn, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SealAccountReturn, operation_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SealAccountReturn, accountid_),
  };
  GMTool_SealAccountReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_SealAccountReturn_descriptor_,
      GMTool_SealAccountReturn::default_instance_,
      GMTool_SealAccountReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SealAccountReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_SealAccountReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_SealAccountReturn));
  GMTool_Mail_descriptor_ = file->message_type(11);
  static const int GMTool_Mail_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, m_gmid_),
  };
  GMTool_Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_Mail_descriptor_,
      GMTool_Mail::default_instance_,
      GMTool_Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_Mail));
  GMTool_MailItem_descriptor_ = file->message_type(12);
  static const int GMTool_MailItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_MailItem, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_MailItem, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_MailItem, m_level_),
  };
  GMTool_MailItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_MailItem_descriptor_,
      GMTool_MailItem::default_instance_,
      GMTool_MailItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_MailItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_MailItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_MailItem));
  GMTool_DynTable_descriptor_ = file->message_type(13);
  static const int GMTool_DynTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_DynTable, m_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_DynTable, m_lastupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_DynTable, m_tablename_),
  };
  GMTool_DynTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_DynTable_descriptor_,
      GMTool_DynTable::default_instance_,
      GMTool_DynTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_DynTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_DynTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_DynTable));
  GM_FreshTable_descriptor_ = file->message_type(14);
  static const int GM_FreshTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FreshTable, m_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FreshTable, m_lastupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FreshTable, m_serverid_),
  };
  GM_FreshTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FreshTable_descriptor_,
      GM_FreshTable::default_instance_,
      GM_FreshTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FreshTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FreshTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FreshTable));
  GM_SealAll_descriptor_ = file->message_type(15);
  static const int GM_SealAll_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_sealendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_seal_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_sealtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, m_roleid_),
  };
  GM_SealAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SealAll_descriptor_,
      GM_SealAll::default_instance_,
      GM_SealAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SealAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SealAll));
  GMTool_UpdateArea_descriptor_ = file->message_type(16);
  static const int GMTool_UpdateArea_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_UpdateArea, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_UpdateArea, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_UpdateArea, m_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_UpdateArea, m_connect_),
  };
  GMTool_UpdateArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_UpdateArea_descriptor_,
      GMTool_UpdateArea::default_instance_,
      GMTool_UpdateArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_UpdateArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_UpdateArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_UpdateArea));
  GMTool_Acitveshare_descriptor_ = file->message_type(17);
  static const int GMTool_Acitveshare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Acitveshare, unionid_),
  };
  GMTool_Acitveshare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTool_Acitveshare_descriptor_,
      GMTool_Acitveshare::default_instance_,
      GMTool_Acitveshare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Acitveshare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTool_Acitveshare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTool_Acitveshare));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fGmtool_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_GetOnline_descriptor_, &GMTool_GetOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_CurrentData_descriptor_, &GMTool_CurrentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_Request_descriptor_, &GMTool_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_Seal_Player_Request_descriptor_, &GMTool_Seal_Player_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_Operation_result_descriptor_, &GMTool_Operation_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftBagItem_descriptor_, &GiftBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_GiftBag_descriptor_, &GMTool_GiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_OperateRequest_descriptor_, &GMTool_OperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_noticeRequest_descriptor_, &GMTool_noticeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_SystemWord_descriptor_, &GMTool_SystemWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_SealAccountReturn_descriptor_, &GMTool_SealAccountReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_Mail_descriptor_, &GMTool_Mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_MailItem_descriptor_, &GMTool_MailItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_DynTable_descriptor_, &GMTool_DynTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FreshTable_descriptor_, &GM_FreshTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SealAll_descriptor_, &GM_SealAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_UpdateArea_descriptor_, &GMTool_UpdateArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTool_Acitveshare_descriptor_, &GMTool_Acitveshare::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fGmtool_2etxt() {
  delete GMTool_GetOnline::default_instance_;
  delete GMTool_GetOnline_reflection_;
  delete GMTool_CurrentData::default_instance_;
  delete GMTool_CurrentData_reflection_;
  delete GMTool_Request::default_instance_;
  delete GMTool_Request_reflection_;
  delete GMTool_Seal_Player_Request::default_instance_;
  delete GMTool_Seal_Player_Request_reflection_;
  delete GMTool_Operation_result::default_instance_;
  delete GMTool_Operation_result_reflection_;
  delete GiftBagItem::default_instance_;
  delete GiftBagItem_reflection_;
  delete GMTool_GiftBag::default_instance_;
  delete GMTool_GiftBag_reflection_;
  delete GMTool_OperateRequest::default_instance_;
  delete GMTool_OperateRequest_reflection_;
  delete GMTool_noticeRequest::default_instance_;
  delete GMTool_noticeRequest_reflection_;
  delete GMTool_SystemWord::default_instance_;
  delete GMTool_SystemWord_reflection_;
  delete GMTool_SealAccountReturn::default_instance_;
  delete GMTool_SealAccountReturn_reflection_;
  delete GMTool_Mail::default_instance_;
  delete GMTool_Mail_reflection_;
  delete GMTool_MailItem::default_instance_;
  delete GMTool_MailItem_reflection_;
  delete GMTool_DynTable::default_instance_;
  delete GMTool_DynTable_reflection_;
  delete GM_FreshTable::default_instance_;
  delete GM_FreshTable_reflection_;
  delete GM_SealAll::default_instance_;
  delete GM_SealAll_reflection_;
  delete GMTool_UpdateArea::default_instance_;
  delete GMTool_UpdateArea_reflection_;
  delete GMTool_Acitveshare::default_instance_;
  delete GMTool_Acitveshare_reflection_;
}

void protobuf_AddDesc_SP_5fGmtool_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rSP_Gmtool.txt\"c\n\020GMTool_GetOnline\022\017\n\007c"
    "onnect\030\003 \002(\r\022\021\n\tMaxOnline\030\001 \002(\r\022\025\n\rCurre"
    "ntOnline\030\002 \002(\r\022\024\n\014HttpServerIp\030\004 \002(\t\"|\n\022"
    "GMTool_CurrentData\022\017\n\007connect\030\003 \002(\r\022\021\n\tM"
    "axOnline\030\001 \002(\r\022\025\n\rCurrentOnline\030\002 \002(\r\022\025\n"
    "\rRegisterCount\030\004 \002(\r\022\024\n\014HttpServerIp\030\005 \002"
    "(\t\" \n\016GMTool_Request\022\016\n\006roleid\030\001 \002(\r\"\213\001\n"
    "\032GMTool_Seal_Player_Request\022\021\n\trole_name"
    "\030\001 \001(\t\022\025\n\rseal_end_time\030\002 \001(\005\022\017\n\007connect"
    "\030\003 \002(\r\022\016\n\006action\030\004 \001(\005\022\017\n\007role_id\030\005 \001(\005\022"
    "\021\n\trole_desc\030\006 \001(\t\"D\n\027GMTool_Operation_r"
    "esult\022\030\n\020operation_result\030\001 \002(\005\022\017\n\007conne"
    "ct\030\002 \002(\r\"C\n\013GiftBagItem\022\020\n\010objectid\030\001 \002("
    "\r\022\020\n\010objcount\030\002 \002(\r\022\020\n\010objlevel\030\003 \002(\r\"\217\001"
    "\n\016GMTool_GiftBag\022\020\n\010m_typeid\030\002 \002(\r\022\016\n\006m_"
    "name\030\003 \002(\t\022\021\n\tm_iconurl\030\004 \002(\t\022\022\n\nm_descr"
    "ibe\030\005 \002(\t\022\017\n\007connect\030\006 \002(\r\022#\n\rm_giftBagI"
    "tem\030\001 \003(\0132\014.GiftBagItem\"\332\001\n\025GMTool_Opera"
    "teRequest\022\017\n\007connect\030\001 \002(\r\022\021\n\tint_param\030"
    "\002 \001(\005\022\021\n\tstr_param\030\003 \001(\t\022\022\n\nstr_param2\030\004"
    " \001(\t\022\022\n\nint_param2\030\005 \001(\005\022\022\n\nint_param3\030\006"
    " \001(\005\022\022\n\nstr_param3\030\007 \001(\t\022\022\n\nstr_param4\030\010"
    " \001(\t\022\022\n\nstr_param5\030\t \001(\t\022\022\n\nint_param4\030\n"
    " \001(\005\"M\n\024GMTool_noticeRequest\022\017\n\007connect\030"
    "\001 \002(\r\022\021\n\tint_param\030\002 \001(\005\022\021\n\tstr_param\030\003 "
    "\001(\t\"k\n\021GMTool_SystemWord\022\014\n\004word\030\001 \002(\t\022\020"
    "\n\010channels\030\003 \003(\005\022\023\n\013repeatCount\030\002 \001(\005\022\017\n"
    "\007connect\030\004 \002(\r\022\020\n\010interval\030\005 \001(\005\"X\n\030GMTo"
    "ol_SealAccountReturn\022\017\n\007connect\030\001 \002(\r\022\030\n"
    "\020operation_result\030\002 \002(\005\022\021\n\taccountid\030\003 \002"
    "(\005\"\324\001\n\013GMTool_Mail\022\022\n\nm_rolename\030\001 \001(\t\022\020"
    "\n\010m_roleid\030\002 \001(\005\022\021\n\tm_subject\030\003 \002(\t\022\016\n\006m"
    "_word\030\004 \002(\t\022\016\n\006m_time\030\005 \002(\005\022\021\n\tm_connect"
    "\030\006 \002(\005\022!\n\007m_items\030\007 \003(\0132\020.GMTool_MailIte"
    "m\022\022\n\nm_isonline\030\010 \001(\005\022\022\n\nm_sendtime\030\t \001("
    "\005\022\016\n\006m_gmid\030\n \001(\005\"C\n\017GMTool_MailItem\022\020\n\010"
    "m_typeid\030\001 \002(\005\022\r\n\005m_num\030\002 \002(\005\022\017\n\007m_level"
    "\030\003 \002(\005\"L\n\017GMTool_DynTable\022\016\n\006m_data\030\001 \003("
    "\014\022\024\n\014m_lastupdate\030\002 \001(\005\022\023\n\013m_tablename\030\003"
    " \001(\t\"J\n\rGM_FreshTable\022\017\n\007m_table\030\001 \002(\t\022\024"
    "\n\014m_lastupdate\030\002 \002(\005\022\022\n\nm_serverid\030\003 \002(\005"
    "\"\276\001\n\nGM_SealAll\022\022\n\nm_rolename\030\001 \002(\t\022\022\n\nm"
    "_serverid\030\002 \002(\005\022\025\n\rm_sealendtime\030\003 \002(\005\022\023"
    "\n\013m_seal_desc\030\004 \001(\t\022\022\n\nm_sealtype\030\005 \002(\005\022"
    "\023\n\013m_accountid\030\006 \001(\005\022\020\n\010m_result\030\007 \001(\005\022\017"
    "\n\007connect\030\010 \002(\r\022\020\n\010m_roleid\030\t \001(\005\"U\n\021GMT"
    "ool_UpdateArea\022\014\n\004m_id\030\001 \002(\005\022\017\n\007m_state\030"
    "\002 \001(\005\022\016\n\006m_flag\030\003 \001(\005\022\021\n\tm_connect\030\004 \002(\005"
    "\"%\n\022GMTool_Acitveshare\022\017\n\007unionid\030\001 \002(\t", 1959);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Gmtool.txt", &protobuf_RegisterTypes);
  GMTool_GetOnline::default_instance_ = new GMTool_GetOnline();
  GMTool_CurrentData::default_instance_ = new GMTool_CurrentData();
  GMTool_Request::default_instance_ = new GMTool_Request();
  GMTool_Seal_Player_Request::default_instance_ = new GMTool_Seal_Player_Request();
  GMTool_Operation_result::default_instance_ = new GMTool_Operation_result();
  GiftBagItem::default_instance_ = new GiftBagItem();
  GMTool_GiftBag::default_instance_ = new GMTool_GiftBag();
  GMTool_OperateRequest::default_instance_ = new GMTool_OperateRequest();
  GMTool_noticeRequest::default_instance_ = new GMTool_noticeRequest();
  GMTool_SystemWord::default_instance_ = new GMTool_SystemWord();
  GMTool_SealAccountReturn::default_instance_ = new GMTool_SealAccountReturn();
  GMTool_Mail::default_instance_ = new GMTool_Mail();
  GMTool_MailItem::default_instance_ = new GMTool_MailItem();
  GMTool_DynTable::default_instance_ = new GMTool_DynTable();
  GM_FreshTable::default_instance_ = new GM_FreshTable();
  GM_SealAll::default_instance_ = new GM_SealAll();
  GMTool_UpdateArea::default_instance_ = new GMTool_UpdateArea();
  GMTool_Acitveshare::default_instance_ = new GMTool_Acitveshare();
  GMTool_GetOnline::default_instance_->InitAsDefaultInstance();
  GMTool_CurrentData::default_instance_->InitAsDefaultInstance();
  GMTool_Request::default_instance_->InitAsDefaultInstance();
  GMTool_Seal_Player_Request::default_instance_->InitAsDefaultInstance();
  GMTool_Operation_result::default_instance_->InitAsDefaultInstance();
  GiftBagItem::default_instance_->InitAsDefaultInstance();
  GMTool_GiftBag::default_instance_->InitAsDefaultInstance();
  GMTool_OperateRequest::default_instance_->InitAsDefaultInstance();
  GMTool_noticeRequest::default_instance_->InitAsDefaultInstance();
  GMTool_SystemWord::default_instance_->InitAsDefaultInstance();
  GMTool_SealAccountReturn::default_instance_->InitAsDefaultInstance();
  GMTool_Mail::default_instance_->InitAsDefaultInstance();
  GMTool_MailItem::default_instance_->InitAsDefaultInstance();
  GMTool_DynTable::default_instance_->InitAsDefaultInstance();
  GM_FreshTable::default_instance_->InitAsDefaultInstance();
  GM_SealAll::default_instance_->InitAsDefaultInstance();
  GMTool_UpdateArea::default_instance_->InitAsDefaultInstance();
  GMTool_Acitveshare::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fGmtool_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fGmtool_2etxt {
  StaticDescriptorInitializer_SP_5fGmtool_2etxt() {
    protobuf_AddDesc_SP_5fGmtool_2etxt();
  }
} static_descriptor_initializer_SP_5fGmtool_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMTool_GetOnline::kConnectFieldNumber;
const int GMTool_GetOnline::kMaxOnlineFieldNumber;
const int GMTool_GetOnline::kCurrentOnlineFieldNumber;
const int GMTool_GetOnline::kHttpServerIpFieldNumber;
#endif  // !_MSC_VER

GMTool_GetOnline::GMTool_GetOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_GetOnline::InitAsDefaultInstance() {
}

GMTool_GetOnline::GMTool_GetOnline(const GMTool_GetOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_GetOnline::SharedCtor() {
  _cached_size_ = 0;
  connect_ = 0u;
  maxonline_ = 0u;
  currentonline_ = 0u;
  httpserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_GetOnline::~GMTool_GetOnline() {
  SharedDtor();
}

void GMTool_GetOnline::SharedDtor() {
  if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete httpserverip_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_GetOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_GetOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_GetOnline_descriptor_;
}

const GMTool_GetOnline& GMTool_GetOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_GetOnline* GMTool_GetOnline::default_instance_ = NULL;

GMTool_GetOnline* GMTool_GetOnline::New() const {
  return new GMTool_GetOnline;
}

void GMTool_GetOnline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_ = 0u;
    maxonline_ = 0u;
    currentonline_ = 0u;
    if (has_httpserverip()) {
      if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
        httpserverip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_GetOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MaxOnline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxonline_)));
          set_has_maxonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurrentOnline;
        break;
      }

      // required uint32 CurrentOnline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentonline_)));
          set_has_currentonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connect;
        break;
      }

      // required uint32 connect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_HttpServerIp;
        break;
      }

      // required string HttpServerIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HttpServerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httpserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->httpserverip().data(), this->httpserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_GetOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MaxOnline = 1;
  if (has_maxonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxonline(), output);
  }

  // required uint32 CurrentOnline = 2;
  if (has_currentonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currentonline(), output);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connect(), output);
  }

  // required string HttpServerIp = 4;
  if (has_httpserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpserverip().data(), this->httpserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->httpserverip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_GetOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MaxOnline = 1;
  if (has_maxonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxonline(), target);
  }

  // required uint32 CurrentOnline = 2;
  if (has_currentonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currentonline(), target);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connect(), target);
  }

  // required string HttpServerIp = 4;
  if (has_httpserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpserverip().data(), this->httpserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->httpserverip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_GetOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect = 3;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // required uint32 MaxOnline = 1;
    if (has_maxonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxonline());
    }

    // required uint32 CurrentOnline = 2;
    if (has_currentonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentonline());
    }

    // required string HttpServerIp = 4;
    if (has_httpserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httpserverip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_GetOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_GetOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_GetOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_GetOnline::MergeFrom(const GMTool_GetOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_maxonline()) {
      set_maxonline(from.maxonline());
    }
    if (from.has_currentonline()) {
      set_currentonline(from.currentonline());
    }
    if (from.has_httpserverip()) {
      set_httpserverip(from.httpserverip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_GetOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_GetOnline::CopyFrom(const GMTool_GetOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_GetOnline::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GMTool_GetOnline::Swap(GMTool_GetOnline* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(maxonline_, other->maxonline_);
    std::swap(currentonline_, other->currentonline_);
    std::swap(httpserverip_, other->httpserverip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_GetOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_GetOnline_descriptor_;
  metadata.reflection = GMTool_GetOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_CurrentData::kConnectFieldNumber;
const int GMTool_CurrentData::kMaxOnlineFieldNumber;
const int GMTool_CurrentData::kCurrentOnlineFieldNumber;
const int GMTool_CurrentData::kRegisterCountFieldNumber;
const int GMTool_CurrentData::kHttpServerIpFieldNumber;
#endif  // !_MSC_VER

GMTool_CurrentData::GMTool_CurrentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_CurrentData::InitAsDefaultInstance() {
}

GMTool_CurrentData::GMTool_CurrentData(const GMTool_CurrentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_CurrentData::SharedCtor() {
  _cached_size_ = 0;
  connect_ = 0u;
  maxonline_ = 0u;
  currentonline_ = 0u;
  registercount_ = 0u;
  httpserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_CurrentData::~GMTool_CurrentData() {
  SharedDtor();
}

void GMTool_CurrentData::SharedDtor() {
  if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete httpserverip_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_CurrentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_CurrentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_CurrentData_descriptor_;
}

const GMTool_CurrentData& GMTool_CurrentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_CurrentData* GMTool_CurrentData::default_instance_ = NULL;

GMTool_CurrentData* GMTool_CurrentData::New() const {
  return new GMTool_CurrentData;
}

void GMTool_CurrentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_ = 0u;
    maxonline_ = 0u;
    currentonline_ = 0u;
    registercount_ = 0u;
    if (has_httpserverip()) {
      if (httpserverip_ != &::google::protobuf::internal::kEmptyString) {
        httpserverip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_CurrentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MaxOnline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxonline_)));
          set_has_maxonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurrentOnline;
        break;
      }

      // required uint32 CurrentOnline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentonline_)));
          set_has_currentonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connect;
        break;
      }

      // required uint32 connect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RegisterCount;
        break;
      }

      // required uint32 RegisterCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegisterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registercount_)));
          set_has_registercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HttpServerIp;
        break;
      }

      // required string HttpServerIp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HttpServerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httpserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->httpserverip().data(), this->httpserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_CurrentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MaxOnline = 1;
  if (has_maxonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxonline(), output);
  }

  // required uint32 CurrentOnline = 2;
  if (has_currentonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currentonline(), output);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connect(), output);
  }

  // required uint32 RegisterCount = 4;
  if (has_registercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->registercount(), output);
  }

  // required string HttpServerIp = 5;
  if (has_httpserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpserverip().data(), this->httpserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->httpserverip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_CurrentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MaxOnline = 1;
  if (has_maxonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxonline(), target);
  }

  // required uint32 CurrentOnline = 2;
  if (has_currentonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currentonline(), target);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connect(), target);
  }

  // required uint32 RegisterCount = 4;
  if (has_registercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->registercount(), target);
  }

  // required string HttpServerIp = 5;
  if (has_httpserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->httpserverip().data(), this->httpserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->httpserverip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_CurrentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect = 3;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // required uint32 MaxOnline = 1;
    if (has_maxonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxonline());
    }

    // required uint32 CurrentOnline = 2;
    if (has_currentonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentonline());
    }

    // required uint32 RegisterCount = 4;
    if (has_registercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registercount());
    }

    // required string HttpServerIp = 5;
    if (has_httpserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httpserverip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_CurrentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_CurrentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_CurrentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_CurrentData::MergeFrom(const GMTool_CurrentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_maxonline()) {
      set_maxonline(from.maxonline());
    }
    if (from.has_currentonline()) {
      set_currentonline(from.currentonline());
    }
    if (from.has_registercount()) {
      set_registercount(from.registercount());
    }
    if (from.has_httpserverip()) {
      set_httpserverip(from.httpserverip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_CurrentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_CurrentData::CopyFrom(const GMTool_CurrentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_CurrentData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GMTool_CurrentData::Swap(GMTool_CurrentData* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(maxonline_, other->maxonline_);
    std::swap(currentonline_, other->currentonline_);
    std::swap(registercount_, other->registercount_);
    std::swap(httpserverip_, other->httpserverip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_CurrentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_CurrentData_descriptor_;
  metadata.reflection = GMTool_CurrentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_Request::kRoleidFieldNumber;
#endif  // !_MSC_VER

GMTool_Request::GMTool_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_Request::InitAsDefaultInstance() {
}

GMTool_Request::GMTool_Request(const GMTool_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_Request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_Request::~GMTool_Request() {
  SharedDtor();
}

void GMTool_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTool_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_Request_descriptor_;
}

const GMTool_Request& GMTool_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_Request* GMTool_Request::default_instance_ = NULL;

GMTool_Request* GMTool_Request::New() const {
  return new GMTool_Request;
}

void GMTool_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_Request::MergeFrom(const GMTool_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_Request::CopyFrom(const GMTool_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMTool_Request::Swap(GMTool_Request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_Request_descriptor_;
  metadata.reflection = GMTool_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_Seal_Player_Request::kRoleNameFieldNumber;
const int GMTool_Seal_Player_Request::kSealEndTimeFieldNumber;
const int GMTool_Seal_Player_Request::kConnectFieldNumber;
const int GMTool_Seal_Player_Request::kActionFieldNumber;
const int GMTool_Seal_Player_Request::kRoleIdFieldNumber;
const int GMTool_Seal_Player_Request::kRoleDescFieldNumber;
#endif  // !_MSC_VER

GMTool_Seal_Player_Request::GMTool_Seal_Player_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_Seal_Player_Request::InitAsDefaultInstance() {
}

GMTool_Seal_Player_Request::GMTool_Seal_Player_Request(const GMTool_Seal_Player_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_Seal_Player_Request::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seal_end_time_ = 0;
  connect_ = 0u;
  action_ = 0;
  role_id_ = 0;
  role_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_Seal_Player_Request::~GMTool_Seal_Player_Request() {
  SharedDtor();
}

void GMTool_Seal_Player_Request::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete role_desc_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_Seal_Player_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_Seal_Player_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_Seal_Player_Request_descriptor_;
}

const GMTool_Seal_Player_Request& GMTool_Seal_Player_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_Seal_Player_Request* GMTool_Seal_Player_Request::default_instance_ = NULL;

GMTool_Seal_Player_Request* GMTool_Seal_Player_Request::New() const {
  return new GMTool_Seal_Player_Request;
}

void GMTool_Seal_Player_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    seal_end_time_ = 0;
    connect_ = 0u;
    action_ = 0;
    role_id_ = 0;
    if (has_role_desc()) {
      if (role_desc_ != &::google::protobuf::internal::kEmptyString) {
        role_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_Seal_Player_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seal_end_time;
        break;
      }

      // optional int32 seal_end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seal_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_end_time_)));
          set_has_seal_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connect;
        break;
      }

      // required uint32 connect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional int32 action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // optional int32 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_desc;
        break;
      }

      // optional string role_desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_desc().data(), this->role_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_Seal_Player_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }

  // optional int32 seal_end_time = 2;
  if (has_seal_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seal_end_time(), output);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connect(), output);
  }

  // optional int32 action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // optional int32 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_id(), output);
  }

  // optional string role_desc = 6;
  if (has_role_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_desc().data(), this->role_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->role_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_Seal_Player_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }

  // optional int32 seal_end_time = 2;
  if (has_seal_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seal_end_time(), target);
  }

  // required uint32 connect = 3;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connect(), target);
  }

  // optional int32 action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // optional int32 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_id(), target);
  }

  // optional string role_desc = 6;
  if (has_role_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_desc().data(), this->role_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->role_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_Seal_Player_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 seal_end_time = 2;
    if (has_seal_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_end_time());
    }

    // required uint32 connect = 3;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // optional int32 action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // optional string role_desc = 6;
    if (has_role_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_Seal_Player_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_Seal_Player_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_Seal_Player_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_Seal_Player_Request::MergeFrom(const GMTool_Seal_Player_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_seal_end_time()) {
      set_seal_end_time(from.seal_end_time());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_desc()) {
      set_role_desc(from.role_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_Seal_Player_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_Seal_Player_Request::CopyFrom(const GMTool_Seal_Player_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_Seal_Player_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GMTool_Seal_Player_Request::Swap(GMTool_Seal_Player_Request* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(seal_end_time_, other->seal_end_time_);
    std::swap(connect_, other->connect_);
    std::swap(action_, other->action_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_desc_, other->role_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_Seal_Player_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_Seal_Player_Request_descriptor_;
  metadata.reflection = GMTool_Seal_Player_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_Operation_result::kOperationResultFieldNumber;
const int GMTool_Operation_result::kConnectFieldNumber;
#endif  // !_MSC_VER

GMTool_Operation_result::GMTool_Operation_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_Operation_result::InitAsDefaultInstance() {
}

GMTool_Operation_result::GMTool_Operation_result(const GMTool_Operation_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_Operation_result::SharedCtor() {
  _cached_size_ = 0;
  operation_result_ = 0;
  connect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_Operation_result::~GMTool_Operation_result() {
  SharedDtor();
}

void GMTool_Operation_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTool_Operation_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_Operation_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_Operation_result_descriptor_;
}

const GMTool_Operation_result& GMTool_Operation_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_Operation_result* GMTool_Operation_result::default_instance_ = NULL;

GMTool_Operation_result* GMTool_Operation_result::New() const {
  return new GMTool_Operation_result;
}

void GMTool_Operation_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_result_ = 0;
    connect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_Operation_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operation_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_result_)));
          set_has_operation_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect;
        break;
      }

      // required uint32 connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_Operation_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operation_result = 1;
  if (has_operation_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operation_result(), output);
  }

  // required uint32 connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_Operation_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operation_result = 1;
  if (has_operation_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operation_result(), target);
  }

  // required uint32 connect = 2;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_Operation_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operation_result = 1;
    if (has_operation_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation_result());
    }

    // required uint32 connect = 2;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_Operation_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_Operation_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_Operation_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_Operation_result::MergeFrom(const GMTool_Operation_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation_result()) {
      set_operation_result(from.operation_result());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_Operation_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_Operation_result::CopyFrom(const GMTool_Operation_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_Operation_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMTool_Operation_result::Swap(GMTool_Operation_result* other) {
  if (other != this) {
    std::swap(operation_result_, other->operation_result_);
    std::swap(connect_, other->connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_Operation_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_Operation_result_descriptor_;
  metadata.reflection = GMTool_Operation_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftBagItem::kObjectidFieldNumber;
const int GiftBagItem::kObjcountFieldNumber;
const int GiftBagItem::kObjlevelFieldNumber;
#endif  // !_MSC_VER

GiftBagItem::GiftBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftBagItem::InitAsDefaultInstance() {
}

GiftBagItem::GiftBagItem(const GiftBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftBagItem::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0u;
  objcount_ = 0u;
  objlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftBagItem::~GiftBagItem() {
  SharedDtor();
}

void GiftBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiftBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftBagItem_descriptor_;
}

const GiftBagItem& GiftBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GiftBagItem* GiftBagItem::default_instance_ = NULL;

GiftBagItem* GiftBagItem::New() const {
  return new GiftBagItem;
}

void GiftBagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0u;
    objcount_ = 0u;
    objlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objcount;
        break;
      }

      // required uint32 objcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objcount_)));
          set_has_objcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objlevel;
        break;
      }

      // required uint32 objlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objlevel_)));
          set_has_objlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objectid(), output);
  }

  // required uint32 objcount = 2;
  if (has_objcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->objcount(), output);
  }

  // required uint32 objlevel = 3;
  if (has_objlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objectid(), target);
  }

  // required uint32 objcount = 2;
  if (has_objcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->objcount(), target);
  }

  // required uint32 objlevel = 3;
  if (has_objlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectid());
    }

    // required uint32 objcount = 2;
    if (has_objcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objcount());
    }

    // required uint32 objlevel = 3;
    if (has_objlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftBagItem::MergeFrom(const GiftBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objcount()) {
      set_objcount(from.objcount());
    }
    if (from.has_objlevel()) {
      set_objlevel(from.objlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftBagItem::CopyFrom(const GiftBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftBagItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GiftBagItem::Swap(GiftBagItem* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(objcount_, other->objcount_);
    std::swap(objlevel_, other->objlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftBagItem_descriptor_;
  metadata.reflection = GiftBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_GiftBag::kMTypeidFieldNumber;
const int GMTool_GiftBag::kMNameFieldNumber;
const int GMTool_GiftBag::kMIconurlFieldNumber;
const int GMTool_GiftBag::kMDescribeFieldNumber;
const int GMTool_GiftBag::kConnectFieldNumber;
const int GMTool_GiftBag::kMGiftBagItemFieldNumber;
#endif  // !_MSC_VER

GMTool_GiftBag::GMTool_GiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_GiftBag::InitAsDefaultInstance() {
}

GMTool_GiftBag::GMTool_GiftBag(const GMTool_GiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_GiftBag::SharedCtor() {
  _cached_size_ = 0;
  m_typeid_ = 0u;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_GiftBag::~GMTool_GiftBag() {
  SharedDtor();
}

void GMTool_GiftBag::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_iconurl_ != &::google::protobuf::internal::kEmptyString) {
    delete m_iconurl_;
  }
  if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
    delete m_describe_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_GiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_GiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_GiftBag_descriptor_;
}

const GMTool_GiftBag& GMTool_GiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_GiftBag* GMTool_GiftBag::default_instance_ = NULL;

GMTool_GiftBag* GMTool_GiftBag::New() const {
  return new GMTool_GiftBag;
}

void GMTool_GiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_typeid_ = 0u;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    if (has_m_iconurl()) {
      if (m_iconurl_ != &::google::protobuf::internal::kEmptyString) {
        m_iconurl_->clear();
      }
    }
    if (has_m_describe()) {
      if (m_describe_ != &::google::protobuf::internal::kEmptyString) {
        m_describe_->clear();
      }
    }
    connect_ = 0u;
  }
  m_giftbagitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_GiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GiftBagItem m_giftBagItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_giftBagItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_giftbagitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_giftBagItem;
        if (input->ExpectTag(16)) goto parse_m_typeid;
        break;
      }

      // required uint32 m_typeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_name;
        break;
      }

      // required string m_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_iconurl;
        break;
      }

      // required string m_iconurl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_iconurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_iconurl().data(), this->m_iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_describe;
        break;
      }

      // required string m_describe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_describe().data(), this->m_describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_connect;
        break;
      }

      // required uint32 connect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_GiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GiftBagItem m_giftBagItem = 1;
  for (int i = 0; i < this->m_giftbagitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_giftbagitem(i), output);
  }

  // required uint32 m_typeid = 2;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_typeid(), output);
  }

  // required string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // required string m_iconurl = 4;
  if (has_m_iconurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_iconurl().data(), this->m_iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_iconurl(), output);
  }

  // required string m_describe = 5;
  if (has_m_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe().data(), this->m_describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_describe(), output);
  }

  // required uint32 connect = 6;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_GiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GiftBagItem m_giftBagItem = 1;
  for (int i = 0; i < this->m_giftbagitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_giftbagitem(i), target);
  }

  // required uint32 m_typeid = 2;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_typeid(), target);
  }

  // required string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // required string m_iconurl = 4;
  if (has_m_iconurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_iconurl().data(), this->m_iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_iconurl(), target);
  }

  // required string m_describe = 5;
  if (has_m_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_describe().data(), this->m_describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_describe(), target);
  }

  // required uint32 connect = 6;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_GiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_typeid = 2;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_typeid());
    }

    // required string m_name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required string m_iconurl = 4;
    if (has_m_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_iconurl());
    }

    // required string m_describe = 5;
    if (has_m_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_describe());
    }

    // required uint32 connect = 6;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

  }
  // repeated .GiftBagItem m_giftBagItem = 1;
  total_size += 1 * this->m_giftbagitem_size();
  for (int i = 0; i < this->m_giftbagitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_giftbagitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_GiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_GiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_GiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_GiftBag::MergeFrom(const GMTool_GiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_giftbagitem_.MergeFrom(from.m_giftbagitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_iconurl()) {
      set_m_iconurl(from.m_iconurl());
    }
    if (from.has_m_describe()) {
      set_m_describe(from.m_describe());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_GiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_GiftBag::CopyFrom(const GMTool_GiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_GiftBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < m_giftbagitem_size(); i++) {
    if (!this->m_giftbagitem(i).IsInitialized()) return false;
  }
  return true;
}

void GMTool_GiftBag::Swap(GMTool_GiftBag* other) {
  if (other != this) {
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_iconurl_, other->m_iconurl_);
    std::swap(m_describe_, other->m_describe_);
    std::swap(connect_, other->connect_);
    m_giftbagitem_.Swap(&other->m_giftbagitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_GiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_GiftBag_descriptor_;
  metadata.reflection = GMTool_GiftBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_OperateRequest::kConnectFieldNumber;
const int GMTool_OperateRequest::kIntParamFieldNumber;
const int GMTool_OperateRequest::kStrParamFieldNumber;
const int GMTool_OperateRequest::kStrParam2FieldNumber;
const int GMTool_OperateRequest::kIntParam2FieldNumber;
const int GMTool_OperateRequest::kIntParam3FieldNumber;
const int GMTool_OperateRequest::kStrParam3FieldNumber;
const int GMTool_OperateRequest::kStrParam4FieldNumber;
const int GMTool_OperateRequest::kStrParam5FieldNumber;
const int GMTool_OperateRequest::kIntParam4FieldNumber;
#endif  // !_MSC_VER

GMTool_OperateRequest::GMTool_OperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_OperateRequest::InitAsDefaultInstance() {
}

GMTool_OperateRequest::GMTool_OperateRequest(const GMTool_OperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_OperateRequest::SharedCtor() {
  _cached_size_ = 0;
  connect_ = 0u;
  int_param_ = 0;
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_param2_ = 0;
  int_param3_ = 0;
  str_param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_param4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_OperateRequest::~GMTool_OperateRequest() {
  SharedDtor();
}

void GMTool_OperateRequest::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (str_param2_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param2_;
  }
  if (str_param3_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param3_;
  }
  if (str_param4_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param4_;
  }
  if (str_param5_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param5_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_OperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_OperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_OperateRequest_descriptor_;
}

const GMTool_OperateRequest& GMTool_OperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_OperateRequest* GMTool_OperateRequest::default_instance_ = NULL;

GMTool_OperateRequest* GMTool_OperateRequest::New() const {
  return new GMTool_OperateRequest;
}

void GMTool_OperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_ = 0u;
    int_param_ = 0;
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
    if (has_str_param2()) {
      if (str_param2_ != &::google::protobuf::internal::kEmptyString) {
        str_param2_->clear();
      }
    }
    int_param2_ = 0;
    int_param3_ = 0;
    if (has_str_param3()) {
      if (str_param3_ != &::google::protobuf::internal::kEmptyString) {
        str_param3_->clear();
      }
    }
    if (has_str_param4()) {
      if (str_param4_ != &::google::protobuf::internal::kEmptyString) {
        str_param4_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_str_param5()) {
      if (str_param5_ != &::google::protobuf::internal::kEmptyString) {
        str_param5_->clear();
      }
    }
    int_param4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_OperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 connect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_param;
        break;
      }

      // optional int32 int_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_param;
        break;
      }

      // optional string str_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param().data(), this->str_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_param2;
        break;
      }

      // optional string str_param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param2().data(), this->str_param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_int_param2;
        break;
      }

      // optional int32 int_param2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param2_)));
          set_has_int_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_int_param3;
        break;
      }

      // optional int32 int_param3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param3_)));
          set_has_int_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_str_param3;
        break;
      }

      // optional string str_param3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param3().data(), this->str_param3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_str_param4;
        break;
      }

      // optional string str_param4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param4().data(), this->str_param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_str_param5;
        break;
      }

      // optional string str_param5 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param5().data(), this->str_param5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_int_param4;
        break;
      }

      // optional int32 int_param4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param4_)));
          set_has_int_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_OperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 connect = 1;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connect(), output);
  }

  // optional int32 int_param = 2;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_param(), output);
  }

  // optional string str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_param(), output);
  }

  // optional string str_param2 = 4;
  if (has_str_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param2().data(), this->str_param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_param2(), output);
  }

  // optional int32 int_param2 = 5;
  if (has_int_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->int_param2(), output);
  }

  // optional int32 int_param3 = 6;
  if (has_int_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->int_param3(), output);
  }

  // optional string str_param3 = 7;
  if (has_str_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param3().data(), this->str_param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->str_param3(), output);
  }

  // optional string str_param4 = 8;
  if (has_str_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param4().data(), this->str_param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->str_param4(), output);
  }

  // optional string str_param5 = 9;
  if (has_str_param5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param5().data(), this->str_param5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->str_param5(), output);
  }

  // optional int32 int_param4 = 10;
  if (has_int_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->int_param4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_OperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 connect = 1;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connect(), target);
  }

  // optional int32 int_param = 2;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_param(), target);
  }

  // optional string str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str_param(), target);
  }

  // optional string str_param2 = 4;
  if (has_str_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param2().data(), this->str_param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_param2(), target);
  }

  // optional int32 int_param2 = 5;
  if (has_int_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->int_param2(), target);
  }

  // optional int32 int_param3 = 6;
  if (has_int_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->int_param3(), target);
  }

  // optional string str_param3 = 7;
  if (has_str_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param3().data(), this->str_param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->str_param3(), target);
  }

  // optional string str_param4 = 8;
  if (has_str_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param4().data(), this->str_param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->str_param4(), target);
  }

  // optional string str_param5 = 9;
  if (has_str_param5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param5().data(), this->str_param5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->str_param5(), target);
  }

  // optional int32 int_param4 = 10;
  if (has_int_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->int_param4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_OperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect = 1;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // optional int32 int_param = 2;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param());
    }

    // optional string str_param = 3;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param());
    }

    // optional string str_param2 = 4;
    if (has_str_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param2());
    }

    // optional int32 int_param2 = 5;
    if (has_int_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param2());
    }

    // optional int32 int_param3 = 6;
    if (has_int_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param3());
    }

    // optional string str_param3 = 7;
    if (has_str_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param3());
    }

    // optional string str_param4 = 8;
    if (has_str_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string str_param5 = 9;
    if (has_str_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param5());
    }

    // optional int32 int_param4 = 10;
    if (has_int_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_OperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_OperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_OperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_OperateRequest::MergeFrom(const GMTool_OperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
    if (from.has_str_param2()) {
      set_str_param2(from.str_param2());
    }
    if (from.has_int_param2()) {
      set_int_param2(from.int_param2());
    }
    if (from.has_int_param3()) {
      set_int_param3(from.int_param3());
    }
    if (from.has_str_param3()) {
      set_str_param3(from.str_param3());
    }
    if (from.has_str_param4()) {
      set_str_param4(from.str_param4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_str_param5()) {
      set_str_param5(from.str_param5());
    }
    if (from.has_int_param4()) {
      set_int_param4(from.int_param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_OperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_OperateRequest::CopyFrom(const GMTool_OperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_OperateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMTool_OperateRequest::Swap(GMTool_OperateRequest* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(str_param2_, other->str_param2_);
    std::swap(int_param2_, other->int_param2_);
    std::swap(int_param3_, other->int_param3_);
    std::swap(str_param3_, other->str_param3_);
    std::swap(str_param4_, other->str_param4_);
    std::swap(str_param5_, other->str_param5_);
    std::swap(int_param4_, other->int_param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_OperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_OperateRequest_descriptor_;
  metadata.reflection = GMTool_OperateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_noticeRequest::kConnectFieldNumber;
const int GMTool_noticeRequest::kIntParamFieldNumber;
const int GMTool_noticeRequest::kStrParamFieldNumber;
#endif  // !_MSC_VER

GMTool_noticeRequest::GMTool_noticeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_noticeRequest::InitAsDefaultInstance() {
}

GMTool_noticeRequest::GMTool_noticeRequest(const GMTool_noticeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_noticeRequest::SharedCtor() {
  _cached_size_ = 0;
  connect_ = 0u;
  int_param_ = 0;
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_noticeRequest::~GMTool_noticeRequest() {
  SharedDtor();
}

void GMTool_noticeRequest::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_noticeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_noticeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_noticeRequest_descriptor_;
}

const GMTool_noticeRequest& GMTool_noticeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_noticeRequest* GMTool_noticeRequest::default_instance_ = NULL;

GMTool_noticeRequest* GMTool_noticeRequest::New() const {
  return new GMTool_noticeRequest;
}

void GMTool_noticeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_ = 0u;
    int_param_ = 0;
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_noticeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 connect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_param;
        break;
      }

      // optional int32 int_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_param;
        break;
      }

      // optional string str_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param().data(), this->str_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_noticeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 connect = 1;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connect(), output);
  }

  // optional int32 int_param = 2;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_param(), output);
  }

  // optional string str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_noticeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 connect = 1;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connect(), target);
  }

  // optional int32 int_param = 2;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_param(), target);
  }

  // optional string str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_noticeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect = 1;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // optional int32 int_param = 2;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param());
    }

    // optional string str_param = 3;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_noticeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_noticeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_noticeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_noticeRequest::MergeFrom(const GMTool_noticeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_noticeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_noticeRequest::CopyFrom(const GMTool_noticeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_noticeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMTool_noticeRequest::Swap(GMTool_noticeRequest* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_noticeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_noticeRequest_descriptor_;
  metadata.reflection = GMTool_noticeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_SystemWord::kWordFieldNumber;
const int GMTool_SystemWord::kChannelsFieldNumber;
const int GMTool_SystemWord::kRepeatCountFieldNumber;
const int GMTool_SystemWord::kConnectFieldNumber;
const int GMTool_SystemWord::kIntervalFieldNumber;
#endif  // !_MSC_VER

GMTool_SystemWord::GMTool_SystemWord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_SystemWord::InitAsDefaultInstance() {
}

GMTool_SystemWord::GMTool_SystemWord(const GMTool_SystemWord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_SystemWord::SharedCtor() {
  _cached_size_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repeatcount_ = 0;
  connect_ = 0u;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_SystemWord::~GMTool_SystemWord() {
  SharedDtor();
}

void GMTool_SystemWord::SharedDtor() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_SystemWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_SystemWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_SystemWord_descriptor_;
}

const GMTool_SystemWord& GMTool_SystemWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_SystemWord* GMTool_SystemWord::default_instance_ = NULL;

GMTool_SystemWord* GMTool_SystemWord::New() const {
  return new GMTool_SystemWord;
}

void GMTool_SystemWord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    repeatcount_ = 0;
    connect_ = 0u;
    interval_ = 0;
  }
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_SystemWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_repeatCount;
        break;
      }

      // optional int32 repeatCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // repeated int32 channels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_channels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        if (input->ExpectTag(32)) goto parse_connect;
        break;
      }

      // required uint32 connect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_interval;
        break;
      }

      // optional int32 interval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_SystemWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->word(), output);
  }

  // optional int32 repeatCount = 2;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repeatcount(), output);
  }

  // repeated int32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->channels(i), output);
  }

  // required uint32 connect = 4;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->connect(), output);
  }

  // optional int32 interval = 5;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_SystemWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // optional int32 repeatCount = 2;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repeatcount(), target);
  }

  // repeated int32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->channels(i), target);
  }

  // required uint32 connect = 4;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->connect(), target);
  }

  // optional int32 interval = 5;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_SystemWord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // optional int32 repeatCount = 2;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeatcount());
    }

    // required uint32 connect = 4;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // optional int32 interval = 5;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

  }
  // repeated int32 channels = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->channels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->channels(i));
    }
    total_size += 1 * this->channels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_SystemWord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_SystemWord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_SystemWord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_SystemWord::MergeFrom(const GMTool_SystemWord& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_SystemWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_SystemWord::CopyFrom(const GMTool_SystemWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_SystemWord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GMTool_SystemWord::Swap(GMTool_SystemWord* other) {
  if (other != this) {
    std::swap(word_, other->word_);
    channels_.Swap(&other->channels_);
    std::swap(repeatcount_, other->repeatcount_);
    std::swap(connect_, other->connect_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_SystemWord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_SystemWord_descriptor_;
  metadata.reflection = GMTool_SystemWord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_SealAccountReturn::kConnectFieldNumber;
const int GMTool_SealAccountReturn::kOperationResultFieldNumber;
const int GMTool_SealAccountReturn::kAccountidFieldNumber;
#endif  // !_MSC_VER

GMTool_SealAccountReturn::GMTool_SealAccountReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_SealAccountReturn::InitAsDefaultInstance() {
}

GMTool_SealAccountReturn::GMTool_SealAccountReturn(const GMTool_SealAccountReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_SealAccountReturn::SharedCtor() {
  _cached_size_ = 0;
  connect_ = 0u;
  operation_result_ = 0;
  accountid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_SealAccountReturn::~GMTool_SealAccountReturn() {
  SharedDtor();
}

void GMTool_SealAccountReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTool_SealAccountReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_SealAccountReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_SealAccountReturn_descriptor_;
}

const GMTool_SealAccountReturn& GMTool_SealAccountReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_SealAccountReturn* GMTool_SealAccountReturn::default_instance_ = NULL;

GMTool_SealAccountReturn* GMTool_SealAccountReturn::New() const {
  return new GMTool_SealAccountReturn;
}

void GMTool_SealAccountReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_ = 0u;
    operation_result_ = 0;
    accountid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_SealAccountReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 connect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation_result;
        break;
      }

      // required int32 operation_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_result_)));
          set_has_operation_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // required int32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_SealAccountReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 connect = 1;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connect(), output);
  }

  // required int32 operation_result = 2;
  if (has_operation_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operation_result(), output);
  }

  // required int32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_SealAccountReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 connect = 1;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connect(), target);
  }

  // required int32 operation_result = 2;
  if (has_operation_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operation_result(), target);
  }

  // required int32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_SealAccountReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect = 1;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

    // required int32 operation_result = 2;
    if (has_operation_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation_result());
    }

    // required int32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_SealAccountReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_SealAccountReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_SealAccountReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_SealAccountReturn::MergeFrom(const GMTool_SealAccountReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_operation_result()) {
      set_operation_result(from.operation_result());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_SealAccountReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_SealAccountReturn::CopyFrom(const GMTool_SealAccountReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_SealAccountReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMTool_SealAccountReturn::Swap(GMTool_SealAccountReturn* other) {
  if (other != this) {
    std::swap(connect_, other->connect_);
    std::swap(operation_result_, other->operation_result_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_SealAccountReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_SealAccountReturn_descriptor_;
  metadata.reflection = GMTool_SealAccountReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_Mail::kMRolenameFieldNumber;
const int GMTool_Mail::kMRoleidFieldNumber;
const int GMTool_Mail::kMSubjectFieldNumber;
const int GMTool_Mail::kMWordFieldNumber;
const int GMTool_Mail::kMTimeFieldNumber;
const int GMTool_Mail::kMConnectFieldNumber;
const int GMTool_Mail::kMItemsFieldNumber;
const int GMTool_Mail::kMIsonlineFieldNumber;
const int GMTool_Mail::kMSendtimeFieldNumber;
const int GMTool_Mail::kMGmidFieldNumber;
#endif  // !_MSC_VER

GMTool_Mail::GMTool_Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_Mail::InitAsDefaultInstance() {
}

GMTool_Mail::GMTool_Mail(const GMTool_Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_Mail::SharedCtor() {
  _cached_size_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roleid_ = 0;
  m_subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_time_ = 0;
  m_connect_ = 0;
  m_isonline_ = 0;
  m_sendtime_ = 0;
  m_gmid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_Mail::~GMTool_Mail() {
  SharedDtor();
}

void GMTool_Mail::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_subject_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subject_;
  }
  if (m_word_ != &::google::protobuf::internal::kEmptyString) {
    delete m_word_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_Mail_descriptor_;
}

const GMTool_Mail& GMTool_Mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_Mail* GMTool_Mail::default_instance_ = NULL;

GMTool_Mail* GMTool_Mail::New() const {
  return new GMTool_Mail;
}

void GMTool_Mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_roleid_ = 0;
    if (has_m_subject()) {
      if (m_subject_ != &::google::protobuf::internal::kEmptyString) {
        m_subject_->clear();
      }
    }
    if (has_m_word()) {
      if (m_word_ != &::google::protobuf::internal::kEmptyString) {
        m_word_->clear();
      }
    }
    m_time_ = 0;
    m_connect_ = 0;
    m_isonline_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_sendtime_ = 0;
    m_gmid_ = 0;
  }
  m_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleid;
        break;
      }

      // optional int32 m_roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_subject;
        break;
      }

      // required string m_subject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_subject().data(), this->m_subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_word;
        break;
      }

      // required string m_word = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_word().data(), this->m_word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_time;
        break;
      }

      // required int32 m_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_connect;
        break;
      }

      // required int32 m_connect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_connect_)));
          set_has_m_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_items;
        break;
      }

      // repeated .GMTool_MailItem m_items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_items;
        if (input->ExpectTag(64)) goto parse_m_isonline;
        break;
      }

      // optional int32 m_isonline = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isonline_)));
          set_has_m_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_sendtime;
        break;
      }

      // optional int32 m_sendtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sendtime_)));
          set_has_m_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_gmid;
        break;
      }

      // optional int32 m_gmid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_rolename(), output);
  }

  // optional int32 m_roleid = 2;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roleid(), output);
  }

  // required string m_subject = 3;
  if (has_m_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subject().data(), this->m_subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_subject(), output);
  }

  // required string m_word = 4;
  if (has_m_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_word().data(), this->m_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_word(), output);
  }

  // required int32 m_time = 5;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_time(), output);
  }

  // required int32 m_connect = 6;
  if (has_m_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_connect(), output);
  }

  // repeated .GMTool_MailItem m_items = 7;
  for (int i = 0; i < this->m_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_items(i), output);
  }

  // optional int32 m_isonline = 8;
  if (has_m_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_isonline(), output);
  }

  // optional int32 m_sendtime = 9;
  if (has_m_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_sendtime(), output);
  }

  // optional int32 m_gmid = 10;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_rolename(), target);
  }

  // optional int32 m_roleid = 2;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roleid(), target);
  }

  // required string m_subject = 3;
  if (has_m_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subject().data(), this->m_subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_subject(), target);
  }

  // required string m_word = 4;
  if (has_m_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_word().data(), this->m_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_word(), target);
  }

  // required int32 m_time = 5;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_time(), target);
  }

  // required int32 m_connect = 6;
  if (has_m_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_connect(), target);
  }

  // repeated .GMTool_MailItem m_items = 7;
  for (int i = 0; i < this->m_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_items(i), target);
  }

  // optional int32 m_isonline = 8;
  if (has_m_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_isonline(), target);
  }

  // optional int32 m_sendtime = 9;
  if (has_m_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_sendtime(), target);
  }

  // optional int32 m_gmid = 10;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_Mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_rolename = 1;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_roleid = 2;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required string m_subject = 3;
    if (has_m_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_subject());
    }

    // required string m_word = 4;
    if (has_m_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_word());
    }

    // required int32 m_time = 5;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // required int32 m_connect = 6;
    if (has_m_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_connect());
    }

    // optional int32 m_isonline = 8;
    if (has_m_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isonline());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_sendtime = 9;
    if (has_m_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sendtime());
    }

    // optional int32 m_gmid = 10;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gmid());
    }

  }
  // repeated .GMTool_MailItem m_items = 7;
  total_size += 1 * this->m_items_size();
  for (int i = 0; i < this->m_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_Mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_Mail::MergeFrom(const GMTool_Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_items_.MergeFrom(from.m_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_subject()) {
      set_m_subject(from.m_subject());
    }
    if (from.has_m_word()) {
      set_m_word(from.m_word());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_connect()) {
      set_m_connect(from.m_connect());
    }
    if (from.has_m_isonline()) {
      set_m_isonline(from.m_isonline());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_sendtime()) {
      set_m_sendtime(from.m_sendtime());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_Mail::CopyFrom(const GMTool_Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_Mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;

  for (int i = 0; i < m_items_size(); i++) {
    if (!this->m_items(i).IsInitialized()) return false;
  }
  return true;
}

void GMTool_Mail::Swap(GMTool_Mail* other) {
  if (other != this) {
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_subject_, other->m_subject_);
    std::swap(m_word_, other->m_word_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_connect_, other->m_connect_);
    m_items_.Swap(&other->m_items_);
    std::swap(m_isonline_, other->m_isonline_);
    std::swap(m_sendtime_, other->m_sendtime_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_Mail_descriptor_;
  metadata.reflection = GMTool_Mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_MailItem::kMTypeidFieldNumber;
const int GMTool_MailItem::kMNumFieldNumber;
const int GMTool_MailItem::kMLevelFieldNumber;
#endif  // !_MSC_VER

GMTool_MailItem::GMTool_MailItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_MailItem::InitAsDefaultInstance() {
}

GMTool_MailItem::GMTool_MailItem(const GMTool_MailItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_MailItem::SharedCtor() {
  _cached_size_ = 0;
  m_typeid_ = 0;
  m_num_ = 0;
  m_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_MailItem::~GMTool_MailItem() {
  SharedDtor();
}

void GMTool_MailItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTool_MailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_MailItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_MailItem_descriptor_;
}

const GMTool_MailItem& GMTool_MailItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_MailItem* GMTool_MailItem::default_instance_ = NULL;

GMTool_MailItem* GMTool_MailItem::New() const {
  return new GMTool_MailItem;
}

void GMTool_MailItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_typeid_ = 0;
    m_num_ = 0;
    m_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_MailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_num;
        break;
      }

      // required int32 m_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_level;
        break;
      }

      // required int32 m_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_MailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_typeid = 1;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_typeid(), output);
  }

  // required int32 m_num = 2;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_num(), output);
  }

  // required int32 m_level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_MailItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_typeid = 1;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_typeid(), target);
  }

  // required int32 m_num = 2;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_num(), target);
  }

  // required int32 m_level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_MailItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_typeid = 1;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // required int32 m_num = 2;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // required int32 m_level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_MailItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_MailItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_MailItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_MailItem::MergeFrom(const GMTool_MailItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_MailItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_MailItem::CopyFrom(const GMTool_MailItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_MailItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMTool_MailItem::Swap(GMTool_MailItem* other) {
  if (other != this) {
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_level_, other->m_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_MailItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_MailItem_descriptor_;
  metadata.reflection = GMTool_MailItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_DynTable::kMDataFieldNumber;
const int GMTool_DynTable::kMLastupdateFieldNumber;
const int GMTool_DynTable::kMTablenameFieldNumber;
#endif  // !_MSC_VER

GMTool_DynTable::GMTool_DynTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_DynTable::InitAsDefaultInstance() {
}

GMTool_DynTable::GMTool_DynTable(const GMTool_DynTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_DynTable::SharedCtor() {
  _cached_size_ = 0;
  m_lastupdate_ = 0;
  m_tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_DynTable::~GMTool_DynTable() {
  SharedDtor();
}

void GMTool_DynTable::SharedDtor() {
  if (m_tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tablename_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_DynTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_DynTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_DynTable_descriptor_;
}

const GMTool_DynTable& GMTool_DynTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_DynTable* GMTool_DynTable::default_instance_ = NULL;

GMTool_DynTable* GMTool_DynTable::New() const {
  return new GMTool_DynTable;
}

void GMTool_DynTable::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    m_lastupdate_ = 0;
    if (has_m_tablename()) {
      if (m_tablename_ != &::google::protobuf::internal::kEmptyString) {
        m_tablename_->clear();
      }
    }
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_DynTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectTag(16)) goto parse_m_lastupdate;
        break;
      }

      // optional int32 m_lastupdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lastupdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastupdate_)));
          set_has_m_lastupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_tablename;
        break;
      }

      // optional string m_tablename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_tablename().data(), this->m_tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_DynTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->m_data(i), output);
  }

  // optional int32 m_lastupdate = 2;
  if (has_m_lastupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lastupdate(), output);
  }

  // optional string m_tablename = 3;
  if (has_m_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tablename().data(), this->m_tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_tablename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_DynTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->m_data(i), target);
  }

  // optional int32 m_lastupdate = 2;
  if (has_m_lastupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lastupdate(), target);
  }

  // optional string m_tablename = 3;
  if (has_m_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tablename().data(), this->m_tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_tablename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_DynTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 m_lastupdate = 2;
    if (has_m_lastupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastupdate());
    }

    // optional string m_tablename = 3;
    if (has_m_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_tablename());
    }

  }
  // repeated bytes m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_DynTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_DynTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_DynTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_DynTable::MergeFrom(const GMTool_DynTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_lastupdate()) {
      set_m_lastupdate(from.m_lastupdate());
    }
    if (from.has_m_tablename()) {
      set_m_tablename(from.m_tablename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_DynTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_DynTable::CopyFrom(const GMTool_DynTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_DynTable::IsInitialized() const {

  return true;
}

void GMTool_DynTable::Swap(GMTool_DynTable* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(m_lastupdate_, other->m_lastupdate_);
    std::swap(m_tablename_, other->m_tablename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_DynTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_DynTable_descriptor_;
  metadata.reflection = GMTool_DynTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FreshTable::kMTableFieldNumber;
const int GM_FreshTable::kMLastupdateFieldNumber;
const int GM_FreshTable::kMServeridFieldNumber;
#endif  // !_MSC_VER

GM_FreshTable::GM_FreshTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FreshTable::InitAsDefaultInstance() {
}

GM_FreshTable::GM_FreshTable(const GM_FreshTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FreshTable::SharedCtor() {
  _cached_size_ = 0;
  m_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lastupdate_ = 0;
  m_serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FreshTable::~GM_FreshTable() {
  SharedDtor();
}

void GM_FreshTable::SharedDtor() {
  if (m_table_ != &::google::protobuf::internal::kEmptyString) {
    delete m_table_;
  }
  if (this != default_instance_) {
  }
}

void GM_FreshTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FreshTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FreshTable_descriptor_;
}

const GM_FreshTable& GM_FreshTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GM_FreshTable* GM_FreshTable::default_instance_ = NULL;

GM_FreshTable* GM_FreshTable::New() const {
  return new GM_FreshTable;
}

void GM_FreshTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_table()) {
      if (m_table_ != &::google::protobuf::internal::kEmptyString) {
        m_table_->clear();
      }
    }
    m_lastupdate_ = 0;
    m_serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FreshTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_table().data(), this->m_table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lastupdate;
        break;
      }

      // required int32 m_lastupdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lastupdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastupdate_)));
          set_has_m_lastupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_serverid;
        break;
      }

      // required int32 m_serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverid_)));
          set_has_m_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FreshTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_table = 1;
  if (has_m_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_table().data(), this->m_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_table(), output);
  }

  // required int32 m_lastupdate = 2;
  if (has_m_lastupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lastupdate(), output);
  }

  // required int32 m_serverid = 3;
  if (has_m_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FreshTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_table = 1;
  if (has_m_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_table().data(), this->m_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_table(), target);
  }

  // required int32 m_lastupdate = 2;
  if (has_m_lastupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lastupdate(), target);
  }

  // required int32 m_serverid = 3;
  if (has_m_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FreshTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_table = 1;
    if (has_m_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_table());
    }

    // required int32 m_lastupdate = 2;
    if (has_m_lastupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastupdate());
    }

    // required int32 m_serverid = 3;
    if (has_m_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FreshTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FreshTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FreshTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FreshTable::MergeFrom(const GM_FreshTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_table()) {
      set_m_table(from.m_table());
    }
    if (from.has_m_lastupdate()) {
      set_m_lastupdate(from.m_lastupdate());
    }
    if (from.has_m_serverid()) {
      set_m_serverid(from.m_serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FreshTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FreshTable::CopyFrom(const GM_FreshTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FreshTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_FreshTable::Swap(GM_FreshTable* other) {
  if (other != this) {
    std::swap(m_table_, other->m_table_);
    std::swap(m_lastupdate_, other->m_lastupdate_);
    std::swap(m_serverid_, other->m_serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FreshTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FreshTable_descriptor_;
  metadata.reflection = GM_FreshTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SealAll::kMRolenameFieldNumber;
const int GM_SealAll::kMServeridFieldNumber;
const int GM_SealAll::kMSealendtimeFieldNumber;
const int GM_SealAll::kMSealDescFieldNumber;
const int GM_SealAll::kMSealtypeFieldNumber;
const int GM_SealAll::kMAccountidFieldNumber;
const int GM_SealAll::kMResultFieldNumber;
const int GM_SealAll::kConnectFieldNumber;
const int GM_SealAll::kMRoleidFieldNumber;
#endif  // !_MSC_VER

GM_SealAll::GM_SealAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SealAll::InitAsDefaultInstance() {
}

GM_SealAll::GM_SealAll(const GM_SealAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SealAll::SharedCtor() {
  _cached_size_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_serverid_ = 0;
  m_sealendtime_ = 0;
  m_seal_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sealtype_ = 0;
  m_accountid_ = 0;
  m_result_ = 0;
  connect_ = 0u;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SealAll::~GM_SealAll() {
  SharedDtor();
}

void GM_SealAll::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_seal_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_seal_desc_;
  }
  if (this != default_instance_) {
  }
}

void GM_SealAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SealAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SealAll_descriptor_;
}

const GM_SealAll& GM_SealAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GM_SealAll* GM_SealAll::default_instance_ = NULL;

GM_SealAll* GM_SealAll::New() const {
  return new GM_SealAll;
}

void GM_SealAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_serverid_ = 0;
    m_sealendtime_ = 0;
    if (has_m_seal_desc()) {
      if (m_seal_desc_ != &::google::protobuf::internal::kEmptyString) {
        m_seal_desc_->clear();
      }
    }
    m_sealtype_ = 0;
    m_accountid_ = 0;
    m_result_ = 0;
    connect_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SealAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_serverid;
        break;
      }

      // required int32 m_serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serverid_)));
          set_has_m_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sealendtime;
        break;
      }

      // required int32 m_sealendtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sealendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sealendtime_)));
          set_has_m_sealendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_seal_desc;
        break;
      }

      // optional string m_seal_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_seal_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_seal_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_seal_desc().data(), this->m_seal_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_sealtype;
        break;
      }

      // required int32 m_sealtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sealtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sealtype_)));
          set_has_m_sealtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_accountid;
        break;
      }

      // optional int32 m_accountid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountid_)));
          set_has_m_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_result;
        break;
      }

      // optional int32 m_result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_connect;
        break;
      }

      // required uint32 connect = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_)));
          set_has_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_roleid;
        break;
      }

      // optional int32 m_roleid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SealAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_rolename(), output);
  }

  // required int32 m_serverid = 2;
  if (has_m_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_serverid(), output);
  }

  // required int32 m_sealendtime = 3;
  if (has_m_sealendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sealendtime(), output);
  }

  // optional string m_seal_desc = 4;
  if (has_m_seal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_seal_desc().data(), this->m_seal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_seal_desc(), output);
  }

  // required int32 m_sealtype = 5;
  if (has_m_sealtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_sealtype(), output);
  }

  // optional int32 m_accountid = 6;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_accountid(), output);
  }

  // optional int32 m_result = 7;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_result(), output);
  }

  // required uint32 connect = 8;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->connect(), output);
  }

  // optional int32 m_roleid = 9;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SealAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_rolename(), target);
  }

  // required int32 m_serverid = 2;
  if (has_m_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_serverid(), target);
  }

  // required int32 m_sealendtime = 3;
  if (has_m_sealendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sealendtime(), target);
  }

  // optional string m_seal_desc = 4;
  if (has_m_seal_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_seal_desc().data(), this->m_seal_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_seal_desc(), target);
  }

  // required int32 m_sealtype = 5;
  if (has_m_sealtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_sealtype(), target);
  }

  // optional int32 m_accountid = 6;
  if (has_m_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_accountid(), target);
  }

  // optional int32 m_result = 7;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_result(), target);
  }

  // required uint32 connect = 8;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->connect(), target);
  }

  // optional int32 m_roleid = 9;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SealAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_rolename = 1;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // required int32 m_serverid = 2;
    if (has_m_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serverid());
    }

    // required int32 m_sealendtime = 3;
    if (has_m_sealendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sealendtime());
    }

    // optional string m_seal_desc = 4;
    if (has_m_seal_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_seal_desc());
    }

    // required int32 m_sealtype = 5;
    if (has_m_sealtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sealtype());
    }

    // optional int32 m_accountid = 6;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountid());
    }

    // optional int32 m_result = 7;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required uint32 connect = 8;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_roleid = 9;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SealAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SealAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SealAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SealAll::MergeFrom(const GM_SealAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_serverid()) {
      set_m_serverid(from.m_serverid());
    }
    if (from.has_m_sealendtime()) {
      set_m_sealendtime(from.m_sealendtime());
    }
    if (from.has_m_seal_desc()) {
      set_m_seal_desc(from.m_seal_desc());
    }
    if (from.has_m_sealtype()) {
      set_m_sealtype(from.m_sealtype());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SealAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SealAll::CopyFrom(const GM_SealAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SealAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000097) != 0x00000097) return false;

  return true;
}

void GM_SealAll::Swap(GM_SealAll* other) {
  if (other != this) {
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_serverid_, other->m_serverid_);
    std::swap(m_sealendtime_, other->m_sealendtime_);
    std::swap(m_seal_desc_, other->m_seal_desc_);
    std::swap(m_sealtype_, other->m_sealtype_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_result_, other->m_result_);
    std::swap(connect_, other->connect_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SealAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SealAll_descriptor_;
  metadata.reflection = GM_SealAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_UpdateArea::kMIdFieldNumber;
const int GMTool_UpdateArea::kMStateFieldNumber;
const int GMTool_UpdateArea::kMFlagFieldNumber;
const int GMTool_UpdateArea::kMConnectFieldNumber;
#endif  // !_MSC_VER

GMTool_UpdateArea::GMTool_UpdateArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_UpdateArea::InitAsDefaultInstance() {
}

GMTool_UpdateArea::GMTool_UpdateArea(const GMTool_UpdateArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_UpdateArea::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_state_ = 0;
  m_flag_ = 0;
  m_connect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_UpdateArea::~GMTool_UpdateArea() {
  SharedDtor();
}

void GMTool_UpdateArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTool_UpdateArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_UpdateArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_UpdateArea_descriptor_;
}

const GMTool_UpdateArea& GMTool_UpdateArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_UpdateArea* GMTool_UpdateArea::default_instance_ = NULL;

GMTool_UpdateArea* GMTool_UpdateArea::New() const {
  return new GMTool_UpdateArea;
}

void GMTool_UpdateArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_state_ = 0;
    m_flag_ = 0;
    m_connect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_UpdateArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_flag;
        break;
      }

      // optional int32 m_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_flag_)));
          set_has_m_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_connect;
        break;
      }

      // required int32 m_connect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_connect_)));
          set_has_m_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_UpdateArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_state(), output);
  }

  // optional int32 m_flag = 3;
  if (has_m_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_flag(), output);
  }

  // required int32 m_connect = 4;
  if (has_m_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_UpdateArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_state = 2;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_state(), target);
  }

  // optional int32 m_flag = 3;
  if (has_m_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_flag(), target);
  }

  // required int32 m_connect = 4;
  if (has_m_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_UpdateArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_state = 2;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

    // optional int32 m_flag = 3;
    if (has_m_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_flag());
    }

    // required int32 m_connect = 4;
    if (has_m_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_connect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_UpdateArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_UpdateArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_UpdateArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_UpdateArea::MergeFrom(const GMTool_UpdateArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
    if (from.has_m_flag()) {
      set_m_flag(from.m_flag());
    }
    if (from.has_m_connect()) {
      set_m_connect(from.m_connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_UpdateArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_UpdateArea::CopyFrom(const GMTool_UpdateArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_UpdateArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GMTool_UpdateArea::Swap(GMTool_UpdateArea* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_state_, other->m_state_);
    std::swap(m_flag_, other->m_flag_);
    std::swap(m_connect_, other->m_connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_UpdateArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_UpdateArea_descriptor_;
  metadata.reflection = GMTool_UpdateArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTool_Acitveshare::kUnionidFieldNumber;
#endif  // !_MSC_VER

GMTool_Acitveshare::GMTool_Acitveshare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTool_Acitveshare::InitAsDefaultInstance() {
}

GMTool_Acitveshare::GMTool_Acitveshare(const GMTool_Acitveshare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTool_Acitveshare::SharedCtor() {
  _cached_size_ = 0;
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTool_Acitveshare::~GMTool_Acitveshare() {
  SharedDtor();
}

void GMTool_Acitveshare::SharedDtor() {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    delete unionid_;
  }
  if (this != default_instance_) {
  }
}

void GMTool_Acitveshare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTool_Acitveshare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTool_Acitveshare_descriptor_;
}

const GMTool_Acitveshare& GMTool_Acitveshare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fGmtool_2etxt();
  return *default_instance_;
}

GMTool_Acitveshare* GMTool_Acitveshare::default_instance_ = NULL;

GMTool_Acitveshare* GMTool_Acitveshare::New() const {
  return new GMTool_Acitveshare;
}

void GMTool_Acitveshare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::kEmptyString) {
        unionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTool_Acitveshare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string unionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTool_Acitveshare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string unionid = 1;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTool_Acitveshare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string unionid = 1;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTool_Acitveshare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string unionid = 1;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTool_Acitveshare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTool_Acitveshare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTool_Acitveshare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTool_Acitveshare::MergeFrom(const GMTool_Acitveshare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTool_Acitveshare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTool_Acitveshare::CopyFrom(const GMTool_Acitveshare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTool_Acitveshare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMTool_Acitveshare::Swap(GMTool_Acitveshare* other) {
  if (other != this) {
    std::swap(unionid_, other->unionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTool_Acitveshare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTool_Acitveshare_descriptor_;
  metadata.reflection = GMTool_Acitveshare_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
