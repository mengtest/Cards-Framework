// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Skill.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Skill.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_Skill_Info_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Skill_Info_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Skill_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Skill_Info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fSkill_2etxt() {
  protobuf_AddDesc_SP_5fSkill_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Skill.txt");
  GOOGLE_CHECK(file != NULL);
  SM_Skill_Info_Return_descriptor_ = file->message_type(0);
  static const int SM_Skill_Info_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info_Return, m_nroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info_Return, m_ncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info_Return, m_nskillinfo_),
  };
  SM_Skill_Info_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Skill_Info_Return_descriptor_,
      SM_Skill_Info_Return::default_instance_,
      SM_Skill_Info_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Skill_Info_Return));
  SM_Skill_Info_descriptor_ = file->message_type(1);
  static const int SM_Skill_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info, m_ngmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info, m_nprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info, m_nskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info, m_nlevel_),
  };
  SM_Skill_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Skill_Info_descriptor_,
      SM_Skill_Info::default_instance_,
      SM_Skill_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Skill_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Skill_Info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fSkill_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Skill_Info_Return_descriptor_, &SM_Skill_Info_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Skill_Info_descriptor_, &SM_Skill_Info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fSkill_2etxt() {
  delete SM_Skill_Info_Return::default_instance_;
  delete SM_Skill_Info_Return_reflection_;
  delete SM_Skill_Info::default_instance_;
  delete SM_Skill_Info_reflection_;
}

void protobuf_AddDesc_SP_5fSkill_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014SP_Skill.txt\"a\n\024SM_Skill_Info_Return\022\021"
    "\n\tm_nRoleId\030\001 \002(\005\022\020\n\010m_nCount\030\002 \001(\005\022$\n\014m"
    "_nSkillInfo\030\003 \003(\0132\016.SM_Skill_Info\"]\n\rSM_"
    "Skill_Info\022\017\n\007m_nGmid\030\001 \002(\003\022\025\n\rm_nProfes"
    "sion\030\002 \001(\005\022\022\n\nm_nSkillid\030\003 \001(\005\022\020\n\010m_nLev"
    "el\030\004 \001(\005", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Skill.txt", &protobuf_RegisterTypes);
  SM_Skill_Info_Return::default_instance_ = new SM_Skill_Info_Return();
  SM_Skill_Info::default_instance_ = new SM_Skill_Info();
  SM_Skill_Info_Return::default_instance_->InitAsDefaultInstance();
  SM_Skill_Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fSkill_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fSkill_2etxt {
  StaticDescriptorInitializer_SP_5fSkill_2etxt() {
    protobuf_AddDesc_SP_5fSkill_2etxt();
  }
} static_descriptor_initializer_SP_5fSkill_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_Skill_Info_Return::kMNRoleIdFieldNumber;
const int SM_Skill_Info_Return::kMNCountFieldNumber;
const int SM_Skill_Info_Return::kMNSkillInfoFieldNumber;
#endif  // !_MSC_VER

SM_Skill_Info_Return::SM_Skill_Info_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Skill_Info_Return::InitAsDefaultInstance() {
}

SM_Skill_Info_Return::SM_Skill_Info_Return(const SM_Skill_Info_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Skill_Info_Return::SharedCtor() {
  _cached_size_ = 0;
  m_nroleid_ = 0;
  m_ncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Skill_Info_Return::~SM_Skill_Info_Return() {
  SharedDtor();
}

void SM_Skill_Info_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Skill_Info_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Skill_Info_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Skill_Info_Return_descriptor_;
}

const SM_Skill_Info_Return& SM_Skill_Info_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSkill_2etxt();
  return *default_instance_;
}

SM_Skill_Info_Return* SM_Skill_Info_Return::default_instance_ = NULL;

SM_Skill_Info_Return* SM_Skill_Info_Return::New() const {
  return new SM_Skill_Info_Return;
}

void SM_Skill_Info_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nroleid_ = 0;
    m_ncount_ = 0;
  }
  m_nskillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Skill_Info_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nRoleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nroleid_)));
          set_has_m_nroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nCount;
        break;
      }

      // optional int32 m_nCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncount_)));
          set_has_m_ncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_nSkillInfo;
        break;
      }

      // repeated .SM_Skill_Info m_nSkillInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_nSkillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_nskillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_nSkillInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Skill_Info_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nRoleId = 1;
  if (has_m_nroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nroleid(), output);
  }

  // optional int32 m_nCount = 2;
  if (has_m_ncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ncount(), output);
  }

  // repeated .SM_Skill_Info m_nSkillInfo = 3;
  for (int i = 0; i < this->m_nskillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_nskillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Skill_Info_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nRoleId = 1;
  if (has_m_nroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nroleid(), target);
  }

  // optional int32 m_nCount = 2;
  if (has_m_ncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ncount(), target);
  }

  // repeated .SM_Skill_Info m_nSkillInfo = 3;
  for (int i = 0; i < this->m_nskillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_nskillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Skill_Info_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nRoleId = 1;
    if (has_m_nroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nroleid());
    }

    // optional int32 m_nCount = 2;
    if (has_m_ncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncount());
    }

  }
  // repeated .SM_Skill_Info m_nSkillInfo = 3;
  total_size += 1 * this->m_nskillinfo_size();
  for (int i = 0; i < this->m_nskillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_nskillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Skill_Info_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Skill_Info_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Skill_Info_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Skill_Info_Return::MergeFrom(const SM_Skill_Info_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_nskillinfo_.MergeFrom(from.m_nskillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nroleid()) {
      set_m_nroleid(from.m_nroleid());
    }
    if (from.has_m_ncount()) {
      set_m_ncount(from.m_ncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Skill_Info_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Skill_Info_Return::CopyFrom(const SM_Skill_Info_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Skill_Info_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_nskillinfo_size(); i++) {
    if (!this->m_nskillinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Skill_Info_Return::Swap(SM_Skill_Info_Return* other) {
  if (other != this) {
    std::swap(m_nroleid_, other->m_nroleid_);
    std::swap(m_ncount_, other->m_ncount_);
    m_nskillinfo_.Swap(&other->m_nskillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Skill_Info_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Skill_Info_Return_descriptor_;
  metadata.reflection = SM_Skill_Info_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Skill_Info::kMNGmidFieldNumber;
const int SM_Skill_Info::kMNProfessionFieldNumber;
const int SM_Skill_Info::kMNSkillidFieldNumber;
const int SM_Skill_Info::kMNLevelFieldNumber;
#endif  // !_MSC_VER

SM_Skill_Info::SM_Skill_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Skill_Info::InitAsDefaultInstance() {
}

SM_Skill_Info::SM_Skill_Info(const SM_Skill_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Skill_Info::SharedCtor() {
  _cached_size_ = 0;
  m_ngmid_ = GOOGLE_LONGLONG(0);
  m_nprofession_ = 0;
  m_nskillid_ = 0;
  m_nlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Skill_Info::~SM_Skill_Info() {
  SharedDtor();
}

void SM_Skill_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Skill_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Skill_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Skill_Info_descriptor_;
}

const SM_Skill_Info& SM_Skill_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fSkill_2etxt();
  return *default_instance_;
}

SM_Skill_Info* SM_Skill_Info::default_instance_ = NULL;

SM_Skill_Info* SM_Skill_Info::New() const {
  return new SM_Skill_Info;
}

void SM_Skill_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ngmid_ = GOOGLE_LONGLONG(0);
    m_nprofession_ = 0;
    m_nskillid_ = 0;
    m_nlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Skill_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 m_nGmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_ngmid_)));
          set_has_m_ngmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nProfession;
        break;
      }

      // optional int32 m_nProfession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nprofession_)));
          set_has_m_nprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nSkillid;
        break;
      }

      // optional int32 m_nSkillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nSkillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nskillid_)));
          set_has_m_nskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_nLevel;
        break;
      }

      // optional int32 m_nLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nlevel_)));
          set_has_m_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Skill_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 m_nGmid = 1;
  if (has_m_ngmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_ngmid(), output);
  }

  // optional int32 m_nProfession = 2;
  if (has_m_nprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nprofession(), output);
  }

  // optional int32 m_nSkillid = 3;
  if (has_m_nskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nskillid(), output);
  }

  // optional int32 m_nLevel = 4;
  if (has_m_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_nlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Skill_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 m_nGmid = 1;
  if (has_m_ngmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_ngmid(), target);
  }

  // optional int32 m_nProfession = 2;
  if (has_m_nprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nprofession(), target);
  }

  // optional int32 m_nSkillid = 3;
  if (has_m_nskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_nskillid(), target);
  }

  // optional int32 m_nLevel = 4;
  if (has_m_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_nlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Skill_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 m_nGmid = 1;
    if (has_m_ngmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_ngmid());
    }

    // optional int32 m_nProfession = 2;
    if (has_m_nprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nprofession());
    }

    // optional int32 m_nSkillid = 3;
    if (has_m_nskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nskillid());
    }

    // optional int32 m_nLevel = 4;
    if (has_m_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Skill_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Skill_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Skill_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Skill_Info::MergeFrom(const SM_Skill_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ngmid()) {
      set_m_ngmid(from.m_ngmid());
    }
    if (from.has_m_nprofession()) {
      set_m_nprofession(from.m_nprofession());
    }
    if (from.has_m_nskillid()) {
      set_m_nskillid(from.m_nskillid());
    }
    if (from.has_m_nlevel()) {
      set_m_nlevel(from.m_nlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Skill_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Skill_Info::CopyFrom(const SM_Skill_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Skill_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Skill_Info::Swap(SM_Skill_Info* other) {
  if (other != this) {
    std::swap(m_ngmid_, other->m_ngmid_);
    std::swap(m_nprofession_, other->m_nprofession_);
    std::swap(m_nskillid_, other->m_nskillid_);
    std::swap(m_nlevel_, other->m_nlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Skill_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Skill_Info_descriptor_;
  metadata.reflection = SM_Skill_Info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
