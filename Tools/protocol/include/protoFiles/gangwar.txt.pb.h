// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gangwar.txt

#ifndef PROTOBUF_gangwar_2etxt__INCLUDED
#define PROTOBUF_gangwar_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gangwar_2etxt();
void protobuf_AssignDesc_gangwar_2etxt();
void protobuf_ShutdownFile_gangwar_2etxt();

class GM_Gangwar_Open_Return;
class GM_Gangwar_Open_Data;
class GM_Gangwar_Rankings;
class GM_Gangwar_Rankings_Return;
class GM_Gangwar_Rankings_Data;
class GM_Gangwar_Bidding;
class GM_Bidding_Result;
class GM_Gangwar_WarOpen;
class GM_Gangwar_Data;
class GM_Gangwar_CheckRoom;
class GM_Gangwar_CheckRoom_Return;
class GM_Gangwar_CheckRoom_Data;
class GM_Gangwar_EnterRoom;
class GM_Gangwar_EnterRoom_Return;
class GM_Gangwar_Testing;

// ===================================================================

class GM_Gangwar_Open_Return : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Open_Return();
  virtual ~GM_Gangwar_Open_Return();

  GM_Gangwar_Open_Return(const GM_Gangwar_Open_Return& from);

  inline GM_Gangwar_Open_Return& operator=(const GM_Gangwar_Open_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Open_Return& default_instance();

  void Swap(GM_Gangwar_Open_Return* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Open_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Open_Return& from);
  void MergeFrom(const GM_Gangwar_Open_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_Gangwar_Open_Data m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::GM_Gangwar_Open_Data& m_data(int index) const;
  inline ::GM_Gangwar_Open_Data* mutable_m_data(int index);
  inline ::GM_Gangwar_Open_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Open_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Open_Data >*
      mutable_m_data();

  // optional int32 m_state = 2;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 2;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional int32 m_second = 3;
  inline bool has_m_second() const;
  inline void clear_m_second();
  static const int kMSecondFieldNumber = 3;
  inline ::google::protobuf::int32 m_second() const;
  inline void set_m_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Open_Return)
 private:
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_second();
  inline void clear_has_m_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Open_Data > m_data_;
  ::google::protobuf::int32 m_state_;
  ::google::protobuf::int32 m_second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Open_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Open_Data : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Open_Data();
  virtual ~GM_Gangwar_Open_Data();

  GM_Gangwar_Open_Data(const GM_Gangwar_Open_Data& from);

  inline GM_Gangwar_Open_Data& operator=(const GM_Gangwar_Open_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Open_Data& default_instance();

  void Swap(GM_Gangwar_Open_Data* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Open_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Open_Data& from);
  void MergeFrom(const GM_Gangwar_Open_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_mineralgang = 2;
  inline bool has_m_mineralgang() const;
  inline void clear_m_mineralgang();
  static const int kMMineralgangFieldNumber = 2;
  inline const ::std::string& m_mineralgang() const;
  inline void set_m_mineralgang(const ::std::string& value);
  inline void set_m_mineralgang(const char* value);
  inline void set_m_mineralgang(const char* value, size_t size);
  inline ::std::string* mutable_m_mineralgang();
  inline ::std::string* release_m_mineralgang();
  inline void set_allocated_m_mineralgang(::std::string* m_mineralgang);

  // optional int64 m_gangid = 3;
  inline bool has_m_gangid() const;
  inline void clear_m_gangid();
  static const int kMGangidFieldNumber = 3;
  inline ::google::protobuf::int64 m_gangid() const;
  inline void set_m_gangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Open_Data)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_mineralgang();
  inline void clear_has_m_mineralgang();
  inline void set_has_m_gangid();
  inline void clear_has_m_gangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_mineralgang_;
  ::google::protobuf::int64 m_gangid_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Open_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Rankings : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Rankings();
  virtual ~GM_Gangwar_Rankings();

  GM_Gangwar_Rankings(const GM_Gangwar_Rankings& from);

  inline GM_Gangwar_Rankings& operator=(const GM_Gangwar_Rankings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Rankings& default_instance();

  void Swap(GM_Gangwar_Rankings* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Rankings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Rankings& from);
  void MergeFrom(const GM_Gangwar_Rankings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_mineid = 1;
  inline bool has_m_mineid() const;
  inline void clear_m_mineid();
  static const int kMMineidFieldNumber = 1;
  inline ::google::protobuf::int32 m_mineid() const;
  inline void set_m_mineid(::google::protobuf::int32 value);

  // optional int64 m_gangid = 2;
  inline bool has_m_gangid() const;
  inline void clear_m_gangid();
  static const int kMGangidFieldNumber = 2;
  inline ::google::protobuf::int64 m_gangid() const;
  inline void set_m_gangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Rankings)
 private:
  inline void set_has_m_mineid();
  inline void clear_has_m_mineid();
  inline void set_has_m_gangid();
  inline void clear_has_m_gangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_gangid_;
  ::google::protobuf::int32 m_mineid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Rankings* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Rankings_Return : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Rankings_Return();
  virtual ~GM_Gangwar_Rankings_Return();

  GM_Gangwar_Rankings_Return(const GM_Gangwar_Rankings_Return& from);

  inline GM_Gangwar_Rankings_Return& operator=(const GM_Gangwar_Rankings_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Rankings_Return& default_instance();

  void Swap(GM_Gangwar_Rankings_Return* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Rankings_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Rankings_Return& from);
  void MergeFrom(const GM_Gangwar_Rankings_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_count = 1;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 1;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // repeated .GM_Gangwar_Rankings_Data m_data = 2;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::GM_Gangwar_Rankings_Data& m_data(int index) const;
  inline ::GM_Gangwar_Rankings_Data* mutable_m_data(int index);
  inline ::GM_Gangwar_Rankings_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Rankings_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Rankings_Data >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Rankings_Return)
 private:
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Rankings_Data > m_data_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Rankings_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Rankings_Data : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Rankings_Data();
  virtual ~GM_Gangwar_Rankings_Data();

  GM_Gangwar_Rankings_Data(const GM_Gangwar_Rankings_Data& from);

  inline GM_Gangwar_Rankings_Data& operator=(const GM_Gangwar_Rankings_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Rankings_Data& default_instance();

  void Swap(GM_Gangwar_Rankings_Data* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Rankings_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Rankings_Data& from);
  void MergeFrom(const GM_Gangwar_Rankings_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_gangname = 1;
  inline bool has_m_gangname() const;
  inline void clear_m_gangname();
  static const int kMGangnameFieldNumber = 1;
  inline const ::std::string& m_gangname() const;
  inline void set_m_gangname(const ::std::string& value);
  inline void set_m_gangname(const char* value);
  inline void set_m_gangname(const char* value, size_t size);
  inline ::std::string* mutable_m_gangname();
  inline ::std::string* release_m_gangname();
  inline void set_allocated_m_gangname(::std::string* m_gangname);

  // optional int32 mine_price = 2;
  inline bool has_mine_price() const;
  inline void clear_mine_price();
  static const int kMinePriceFieldNumber = 2;
  inline ::google::protobuf::int32 mine_price() const;
  inline void set_mine_price(::google::protobuf::int32 value);

  // optional int32 m_rank = 3;
  inline bool has_m_rank() const;
  inline void clear_m_rank();
  static const int kMRankFieldNumber = 3;
  inline ::google::protobuf::int32 m_rank() const;
  inline void set_m_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Rankings_Data)
 private:
  inline void set_has_m_gangname();
  inline void clear_has_m_gangname();
  inline void set_has_mine_price();
  inline void clear_has_mine_price();
  inline void set_has_m_rank();
  inline void clear_has_m_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_gangname_;
  ::google::protobuf::int32 mine_price_;
  ::google::protobuf::int32 m_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Rankings_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Bidding : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Bidding();
  virtual ~GM_Gangwar_Bidding();

  GM_Gangwar_Bidding(const GM_Gangwar_Bidding& from);

  inline GM_Gangwar_Bidding& operator=(const GM_Gangwar_Bidding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Bidding& default_instance();

  void Swap(GM_Gangwar_Bidding* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Bidding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Bidding& from);
  void MergeFrom(const GM_Gangwar_Bidding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_mineid = 1;
  inline bool has_m_mineid() const;
  inline void clear_m_mineid();
  static const int kMMineidFieldNumber = 1;
  inline ::google::protobuf::int32 m_mineid() const;
  inline void set_m_mineid(::google::protobuf::int32 value);

  // optional int32 m_unit = 2;
  inline bool has_m_unit() const;
  inline void clear_m_unit();
  static const int kMUnitFieldNumber = 2;
  inline ::google::protobuf::int32 m_unit() const;
  inline void set_m_unit(::google::protobuf::int32 value);

  // optional int32 m_roleid = 3;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 3;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int64 m_gangid = 4;
  inline bool has_m_gangid() const;
  inline void clear_m_gangid();
  static const int kMGangidFieldNumber = 4;
  inline ::google::protobuf::int64 m_gangid() const;
  inline void set_m_gangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Bidding)
 private:
  inline void set_has_m_mineid();
  inline void clear_has_m_mineid();
  inline void set_has_m_unit();
  inline void clear_has_m_unit();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_gangid();
  inline void clear_has_m_gangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_mineid_;
  ::google::protobuf::int32 m_unit_;
  ::google::protobuf::int64 m_gangid_;
  ::google::protobuf::int32 m_roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Bidding* default_instance_;
};
// -------------------------------------------------------------------

class GM_Bidding_Result : public ::google::protobuf::Message {
 public:
  GM_Bidding_Result();
  virtual ~GM_Bidding_Result();

  GM_Bidding_Result(const GM_Bidding_Result& from);

  inline GM_Bidding_Result& operator=(const GM_Bidding_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Bidding_Result& default_instance();

  void Swap(GM_Bidding_Result* other);

  // implements Message ----------------------------------------------

  GM_Bidding_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Bidding_Result& from);
  void MergeFrom(const GM_Bidding_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_state = 1;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Bidding_Result)
 private:
  inline void set_has_m_state();
  inline void clear_has_m_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Bidding_Result* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_WarOpen : public ::google::protobuf::Message {
 public:
  GM_Gangwar_WarOpen();
  virtual ~GM_Gangwar_WarOpen();

  GM_Gangwar_WarOpen(const GM_Gangwar_WarOpen& from);

  inline GM_Gangwar_WarOpen& operator=(const GM_Gangwar_WarOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_WarOpen& default_instance();

  void Swap(GM_Gangwar_WarOpen* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_WarOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_WarOpen& from);
  void MergeFrom(const GM_Gangwar_WarOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_othername = 1;
  inline bool has_m_othername() const;
  inline void clear_m_othername();
  static const int kMOthernameFieldNumber = 1;
  inline const ::std::string& m_othername() const;
  inline void set_m_othername(const ::std::string& value);
  inline void set_m_othername(const char* value);
  inline void set_m_othername(const char* value, size_t size);
  inline ::std::string* mutable_m_othername();
  inline ::std::string* release_m_othername();
  inline void set_allocated_m_othername(::std::string* m_othername);

  // repeated .GM_Gangwar_Data m_Roomdata = 2;
  inline int m_roomdata_size() const;
  inline void clear_m_roomdata();
  static const int kMRoomdataFieldNumber = 2;
  inline const ::GM_Gangwar_Data& m_roomdata(int index) const;
  inline ::GM_Gangwar_Data* mutable_m_roomdata(int index);
  inline ::GM_Gangwar_Data* add_m_roomdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Data >&
      m_roomdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Data >*
      mutable_m_roomdata();

  // optional int32 m_state = 3;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional int32 m_myscore = 4;
  inline bool has_m_myscore() const;
  inline void clear_m_myscore();
  static const int kMMyscoreFieldNumber = 4;
  inline ::google::protobuf::int32 m_myscore() const;
  inline void set_m_myscore(::google::protobuf::int32 value);

  // optional int32 m_otherscore = 5;
  inline bool has_m_otherscore() const;
  inline void clear_m_otherscore();
  static const int kMOtherscoreFieldNumber = 5;
  inline ::google::protobuf::int32 m_otherscore() const;
  inline void set_m_otherscore(::google::protobuf::int32 value);

  // optional int32 m_minestate = 6;
  inline bool has_m_minestate() const;
  inline void clear_m_minestate();
  static const int kMMinestateFieldNumber = 6;
  inline ::google::protobuf::int32 m_minestate() const;
  inline void set_m_minestate(::google::protobuf::int32 value);

  // optional int32 m_second = 7;
  inline bool has_m_second() const;
  inline void clear_m_second();
  static const int kMSecondFieldNumber = 7;
  inline ::google::protobuf::int32 m_second() const;
  inline void set_m_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_WarOpen)
 private:
  inline void set_has_m_othername();
  inline void clear_has_m_othername();
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_myscore();
  inline void clear_has_m_myscore();
  inline void set_has_m_otherscore();
  inline void clear_has_m_otherscore();
  inline void set_has_m_minestate();
  inline void clear_has_m_minestate();
  inline void set_has_m_second();
  inline void clear_has_m_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_othername_;
  ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Data > m_roomdata_;
  ::google::protobuf::int32 m_state_;
  ::google::protobuf::int32 m_myscore_;
  ::google::protobuf::int32 m_otherscore_;
  ::google::protobuf::int32 m_minestate_;
  ::google::protobuf::int32 m_second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_WarOpen* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Data : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Data();
  virtual ~GM_Gangwar_Data();

  GM_Gangwar_Data(const GM_Gangwar_Data& from);

  inline GM_Gangwar_Data& operator=(const GM_Gangwar_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Data& default_instance();

  void Swap(GM_Gangwar_Data* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Data& from);
  void MergeFrom(const GM_Gangwar_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_mynum = 1;
  inline bool has_m_mynum() const;
  inline void clear_m_mynum();
  static const int kMMynumFieldNumber = 1;
  inline ::google::protobuf::int32 m_mynum() const;
  inline void set_m_mynum(::google::protobuf::int32 value);

  // optional int32 m_maxnum = 2;
  inline bool has_m_maxnum() const;
  inline void clear_m_maxnum();
  static const int kMMaxnumFieldNumber = 2;
  inline ::google::protobuf::int32 m_maxnum() const;
  inline void set_m_maxnum(::google::protobuf::int32 value);

  // optional int32 m_state = 3;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional int32 m_roomid = 4;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomidFieldNumber = 4;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // optional int32 m_score = 5;
  inline bool has_m_score() const;
  inline void clear_m_score();
  static const int kMScoreFieldNumber = 5;
  inline ::google::protobuf::int32 m_score() const;
  inline void set_m_score(::google::protobuf::int32 value);

  // optional int64 m_wingangid = 6;
  inline bool has_m_wingangid() const;
  inline void clear_m_wingangid();
  static const int kMWingangidFieldNumber = 6;
  inline ::google::protobuf::int64 m_wingangid() const;
  inline void set_m_wingangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Data)
 private:
  inline void set_has_m_mynum();
  inline void clear_has_m_mynum();
  inline void set_has_m_maxnum();
  inline void clear_has_m_maxnum();
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();
  inline void set_has_m_score();
  inline void clear_has_m_score();
  inline void set_has_m_wingangid();
  inline void clear_has_m_wingangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_mynum_;
  ::google::protobuf::int32 m_maxnum_;
  ::google::protobuf::int32 m_state_;
  ::google::protobuf::int32 m_roomid_;
  ::google::protobuf::int64 m_wingangid_;
  ::google::protobuf::int32 m_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_CheckRoom : public ::google::protobuf::Message {
 public:
  GM_Gangwar_CheckRoom();
  virtual ~GM_Gangwar_CheckRoom();

  GM_Gangwar_CheckRoom(const GM_Gangwar_CheckRoom& from);

  inline GM_Gangwar_CheckRoom& operator=(const GM_Gangwar_CheckRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_CheckRoom& default_instance();

  void Swap(GM_Gangwar_CheckRoom* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_CheckRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_CheckRoom& from);
  void MergeFrom(const GM_Gangwar_CheckRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_mineid = 1;
  inline bool has_m_mineid() const;
  inline void clear_m_mineid();
  static const int kMMineidFieldNumber = 1;
  inline ::google::protobuf::int32 m_mineid() const;
  inline void set_m_mineid(::google::protobuf::int32 value);

  // optional int32 m_roomid = 2;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // optional int64 m_gangid = 3;
  inline bool has_m_gangid() const;
  inline void clear_m_gangid();
  static const int kMGangidFieldNumber = 3;
  inline ::google::protobuf::int64 m_gangid() const;
  inline void set_m_gangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_CheckRoom)
 private:
  inline void set_has_m_mineid();
  inline void clear_has_m_mineid();
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();
  inline void set_has_m_gangid();
  inline void clear_has_m_gangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_mineid_;
  ::google::protobuf::int32 m_roomid_;
  ::google::protobuf::int64 m_gangid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_CheckRoom* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_CheckRoom_Return : public ::google::protobuf::Message {
 public:
  GM_Gangwar_CheckRoom_Return();
  virtual ~GM_Gangwar_CheckRoom_Return();

  GM_Gangwar_CheckRoom_Return(const GM_Gangwar_CheckRoom_Return& from);

  inline GM_Gangwar_CheckRoom_Return& operator=(const GM_Gangwar_CheckRoom_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_CheckRoom_Return& default_instance();

  void Swap(GM_Gangwar_CheckRoom_Return* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_CheckRoom_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_CheckRoom_Return& from);
  void MergeFrom(const GM_Gangwar_CheckRoom_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_count = 1;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 1;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::GM_Gangwar_CheckRoom_Data& m_data(int index) const;
  inline ::GM_Gangwar_CheckRoom_Data* mutable_m_data(int index);
  inline ::GM_Gangwar_CheckRoom_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >*
      mutable_m_data();

  // optional int32 m_state = 3;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional string m_roomname = 4;
  inline bool has_m_roomname() const;
  inline void clear_m_roomname();
  static const int kMRoomnameFieldNumber = 4;
  inline const ::std::string& m_roomname() const;
  inline void set_m_roomname(const ::std::string& value);
  inline void set_m_roomname(const char* value);
  inline void set_m_roomname(const char* value, size_t size);
  inline ::std::string* mutable_m_roomname();
  inline ::std::string* release_m_roomname();
  inline void set_allocated_m_roomname(::std::string* m_roomname);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_CheckRoom_Return)
 private:
  inline void set_has_m_count();
  inline void clear_has_m_count();
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_roomname();
  inline void clear_has_m_roomname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data > m_data_;
  ::google::protobuf::int32 m_count_;
  ::google::protobuf::int32 m_state_;
  ::std::string* m_roomname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_CheckRoom_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_CheckRoom_Data : public ::google::protobuf::Message {
 public:
  GM_Gangwar_CheckRoom_Data();
  virtual ~GM_Gangwar_CheckRoom_Data();

  GM_Gangwar_CheckRoom_Data(const GM_Gangwar_CheckRoom_Data& from);

  inline GM_Gangwar_CheckRoom_Data& operator=(const GM_Gangwar_CheckRoom_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_CheckRoom_Data& default_instance();

  void Swap(GM_Gangwar_CheckRoom_Data* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_CheckRoom_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_CheckRoom_Data& from);
  void MergeFrom(const GM_Gangwar_CheckRoom_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_rolename = 1;
  inline bool has_m_rolename() const;
  inline void clear_m_rolename();
  static const int kMRolenameFieldNumber = 1;
  inline const ::std::string& m_rolename() const;
  inline void set_m_rolename(const ::std::string& value);
  inline void set_m_rolename(const char* value);
  inline void set_m_rolename(const char* value, size_t size);
  inline ::std::string* mutable_m_rolename();
  inline ::std::string* release_m_rolename();
  inline void set_allocated_m_rolename(::std::string* m_rolename);

  // optional int32 m_fightval = 2;
  inline bool has_m_fightval() const;
  inline void clear_m_fightval();
  static const int kMFightvalFieldNumber = 2;
  inline ::google::protobuf::int32 m_fightval() const;
  inline void set_m_fightval(::google::protobuf::int32 value);

  // optional int32 m_level = 3;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_profession = 4;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 m_profession() const;
  inline void set_m_profession(::google::protobuf::int32 value);

  // optional int32 m_entertime = 5;
  inline bool has_m_entertime() const;
  inline void clear_m_entertime();
  static const int kMEntertimeFieldNumber = 5;
  inline ::google::protobuf::int32 m_entertime() const;
  inline void set_m_entertime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_CheckRoom_Data)
 private:
  inline void set_has_m_rolename();
  inline void clear_has_m_rolename();
  inline void set_has_m_fightval();
  inline void clear_has_m_fightval();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();
  inline void set_has_m_entertime();
  inline void clear_has_m_entertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_rolename_;
  ::google::protobuf::int32 m_fightval_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_profession_;
  ::google::protobuf::int32 m_entertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_CheckRoom_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_EnterRoom : public ::google::protobuf::Message {
 public:
  GM_Gangwar_EnterRoom();
  virtual ~GM_Gangwar_EnterRoom();

  GM_Gangwar_EnterRoom(const GM_Gangwar_EnterRoom& from);

  inline GM_Gangwar_EnterRoom& operator=(const GM_Gangwar_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_EnterRoom& default_instance();

  void Swap(GM_Gangwar_EnterRoom* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_EnterRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_EnterRoom& from);
  void MergeFrom(const GM_Gangwar_EnterRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_mineid = 1;
  inline bool has_m_mineid() const;
  inline void clear_m_mineid();
  static const int kMMineidFieldNumber = 1;
  inline ::google::protobuf::int32 m_mineid() const;
  inline void set_m_mineid(::google::protobuf::int32 value);

  // optional int32 m_roomid = 2;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // optional int64 m_gangid = 3;
  inline bool has_m_gangid() const;
  inline void clear_m_gangid();
  static const int kMGangidFieldNumber = 3;
  inline ::google::protobuf::int64 m_gangid() const;
  inline void set_m_gangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_EnterRoom)
 private:
  inline void set_has_m_mineid();
  inline void clear_has_m_mineid();
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();
  inline void set_has_m_gangid();
  inline void clear_has_m_gangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_mineid_;
  ::google::protobuf::int32 m_roomid_;
  ::google::protobuf::int64 m_gangid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_EnterRoom* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_EnterRoom_Return : public ::google::protobuf::Message {
 public:
  GM_Gangwar_EnterRoom_Return();
  virtual ~GM_Gangwar_EnterRoom_Return();

  GM_Gangwar_EnterRoom_Return(const GM_Gangwar_EnterRoom_Return& from);

  inline GM_Gangwar_EnterRoom_Return& operator=(const GM_Gangwar_EnterRoom_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_EnterRoom_Return& default_instance();

  void Swap(GM_Gangwar_EnterRoom_Return* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_EnterRoom_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_EnterRoom_Return& from);
  void MergeFrom(const GM_Gangwar_EnterRoom_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_state = 1;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::GM_Gangwar_CheckRoom_Data& m_data(int index) const;
  inline ::GM_Gangwar_CheckRoom_Data* mutable_m_data(int index);
  inline ::GM_Gangwar_CheckRoom_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:GM_Gangwar_EnterRoom_Return)
 private:
  inline void set_has_m_state();
  inline void clear_has_m_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data > m_data_;
  ::google::protobuf::int32 m_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_EnterRoom_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Gangwar_Testing : public ::google::protobuf::Message {
 public:
  GM_Gangwar_Testing();
  virtual ~GM_Gangwar_Testing();

  GM_Gangwar_Testing(const GM_Gangwar_Testing& from);

  inline GM_Gangwar_Testing& operator=(const GM_Gangwar_Testing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Gangwar_Testing& default_instance();

  void Swap(GM_Gangwar_Testing* other);

  // implements Message ----------------------------------------------

  GM_Gangwar_Testing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Gangwar_Testing& from);
  void MergeFrom(const GM_Gangwar_Testing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_state = 1;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Gangwar_Testing)
 private:
  inline void set_has_m_state();
  inline void clear_has_m_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gangwar_2etxt();
  friend void protobuf_AssignDesc_gangwar_2etxt();
  friend void protobuf_ShutdownFile_gangwar_2etxt();

  void InitAsDefaultInstance();
  static GM_Gangwar_Testing* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_Gangwar_Open_Return

// repeated .GM_Gangwar_Open_Data m_data = 1;
inline int GM_Gangwar_Open_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Gangwar_Open_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Gangwar_Open_Data& GM_Gangwar_Open_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Gangwar_Open_Data* GM_Gangwar_Open_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Gangwar_Open_Data* GM_Gangwar_Open_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Open_Data >&
GM_Gangwar_Open_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Open_Data >*
GM_Gangwar_Open_Return::mutable_m_data() {
  return &m_data_;
}

// optional int32 m_state = 2;
inline bool GM_Gangwar_Open_Return::has_m_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_Open_Return::set_has_m_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_Open_Return::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_Open_Return::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Gangwar_Open_Return::m_state() const {
  return m_state_;
}
inline void GM_Gangwar_Open_Return::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional int32 m_second = 3;
inline bool GM_Gangwar_Open_Return::has_m_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_Open_Return::set_has_m_second() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_Open_Return::clear_has_m_second() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_Open_Return::clear_m_second() {
  m_second_ = 0;
  clear_has_m_second();
}
inline ::google::protobuf::int32 GM_Gangwar_Open_Return::m_second() const {
  return m_second_;
}
inline void GM_Gangwar_Open_Return::set_m_second(::google::protobuf::int32 value) {
  set_has_m_second();
  m_second_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_Open_Data

// optional int32 m_id = 1;
inline bool GM_Gangwar_Open_Data::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Open_Data::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Open_Data::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Open_Data::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 GM_Gangwar_Open_Data::m_id() const {
  return m_id_;
}
inline void GM_Gangwar_Open_Data::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_mineralgang = 2;
inline bool GM_Gangwar_Open_Data::has_m_mineralgang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_Open_Data::set_has_m_mineralgang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_Open_Data::clear_has_m_mineralgang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_Open_Data::clear_m_mineralgang() {
  if (m_mineralgang_ != &::google::protobuf::internal::kEmptyString) {
    m_mineralgang_->clear();
  }
  clear_has_m_mineralgang();
}
inline const ::std::string& GM_Gangwar_Open_Data::m_mineralgang() const {
  return *m_mineralgang_;
}
inline void GM_Gangwar_Open_Data::set_m_mineralgang(const ::std::string& value) {
  set_has_m_mineralgang();
  if (m_mineralgang_ == &::google::protobuf::internal::kEmptyString) {
    m_mineralgang_ = new ::std::string;
  }
  m_mineralgang_->assign(value);
}
inline void GM_Gangwar_Open_Data::set_m_mineralgang(const char* value) {
  set_has_m_mineralgang();
  if (m_mineralgang_ == &::google::protobuf::internal::kEmptyString) {
    m_mineralgang_ = new ::std::string;
  }
  m_mineralgang_->assign(value);
}
inline void GM_Gangwar_Open_Data::set_m_mineralgang(const char* value, size_t size) {
  set_has_m_mineralgang();
  if (m_mineralgang_ == &::google::protobuf::internal::kEmptyString) {
    m_mineralgang_ = new ::std::string;
  }
  m_mineralgang_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Gangwar_Open_Data::mutable_m_mineralgang() {
  set_has_m_mineralgang();
  if (m_mineralgang_ == &::google::protobuf::internal::kEmptyString) {
    m_mineralgang_ = new ::std::string;
  }
  return m_mineralgang_;
}
inline ::std::string* GM_Gangwar_Open_Data::release_m_mineralgang() {
  clear_has_m_mineralgang();
  if (m_mineralgang_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_mineralgang_;
    m_mineralgang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Gangwar_Open_Data::set_allocated_m_mineralgang(::std::string* m_mineralgang) {
  if (m_mineralgang_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mineralgang_;
  }
  if (m_mineralgang) {
    set_has_m_mineralgang();
    m_mineralgang_ = m_mineralgang;
  } else {
    clear_has_m_mineralgang();
    m_mineralgang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_gangid = 3;
inline bool GM_Gangwar_Open_Data::has_m_gangid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_Open_Data::set_has_m_gangid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_Open_Data::clear_has_m_gangid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_Open_Data::clear_m_gangid() {
  m_gangid_ = GOOGLE_LONGLONG(0);
  clear_has_m_gangid();
}
inline ::google::protobuf::int64 GM_Gangwar_Open_Data::m_gangid() const {
  return m_gangid_;
}
inline void GM_Gangwar_Open_Data::set_m_gangid(::google::protobuf::int64 value) {
  set_has_m_gangid();
  m_gangid_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_Rankings

// optional int32 m_mineid = 1;
inline bool GM_Gangwar_Rankings::has_m_mineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Rankings::set_has_m_mineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Rankings::clear_has_m_mineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Rankings::clear_m_mineid() {
  m_mineid_ = 0;
  clear_has_m_mineid();
}
inline ::google::protobuf::int32 GM_Gangwar_Rankings::m_mineid() const {
  return m_mineid_;
}
inline void GM_Gangwar_Rankings::set_m_mineid(::google::protobuf::int32 value) {
  set_has_m_mineid();
  m_mineid_ = value;
}

// optional int64 m_gangid = 2;
inline bool GM_Gangwar_Rankings::has_m_gangid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_Rankings::set_has_m_gangid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_Rankings::clear_has_m_gangid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_Rankings::clear_m_gangid() {
  m_gangid_ = GOOGLE_LONGLONG(0);
  clear_has_m_gangid();
}
inline ::google::protobuf::int64 GM_Gangwar_Rankings::m_gangid() const {
  return m_gangid_;
}
inline void GM_Gangwar_Rankings::set_m_gangid(::google::protobuf::int64 value) {
  set_has_m_gangid();
  m_gangid_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_Rankings_Return

// required int32 m_count = 1;
inline bool GM_Gangwar_Rankings_Return::has_m_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Rankings_Return::set_has_m_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Rankings_Return::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Rankings_Return::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 GM_Gangwar_Rankings_Return::m_count() const {
  return m_count_;
}
inline void GM_Gangwar_Rankings_Return::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// repeated .GM_Gangwar_Rankings_Data m_data = 2;
inline int GM_Gangwar_Rankings_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Gangwar_Rankings_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Gangwar_Rankings_Data& GM_Gangwar_Rankings_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Gangwar_Rankings_Data* GM_Gangwar_Rankings_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Gangwar_Rankings_Data* GM_Gangwar_Rankings_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Rankings_Data >&
GM_Gangwar_Rankings_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Rankings_Data >*
GM_Gangwar_Rankings_Return::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// GM_Gangwar_Rankings_Data

// optional string m_gangname = 1;
inline bool GM_Gangwar_Rankings_Data::has_m_gangname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Rankings_Data::set_has_m_gangname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Rankings_Data::clear_has_m_gangname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Rankings_Data::clear_m_gangname() {
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    m_gangname_->clear();
  }
  clear_has_m_gangname();
}
inline const ::std::string& GM_Gangwar_Rankings_Data::m_gangname() const {
  return *m_gangname_;
}
inline void GM_Gangwar_Rankings_Data::set_m_gangname(const ::std::string& value) {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  m_gangname_->assign(value);
}
inline void GM_Gangwar_Rankings_Data::set_m_gangname(const char* value) {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  m_gangname_->assign(value);
}
inline void GM_Gangwar_Rankings_Data::set_m_gangname(const char* value, size_t size) {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  m_gangname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Gangwar_Rankings_Data::mutable_m_gangname() {
  set_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    m_gangname_ = new ::std::string;
  }
  return m_gangname_;
}
inline ::std::string* GM_Gangwar_Rankings_Data::release_m_gangname() {
  clear_has_m_gangname();
  if (m_gangname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_gangname_;
    m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Gangwar_Rankings_Data::set_allocated_m_gangname(::std::string* m_gangname) {
  if (m_gangname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gangname_;
  }
  if (m_gangname) {
    set_has_m_gangname();
    m_gangname_ = m_gangname;
  } else {
    clear_has_m_gangname();
    m_gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 mine_price = 2;
inline bool GM_Gangwar_Rankings_Data::has_mine_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_Rankings_Data::set_has_mine_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_Rankings_Data::clear_has_mine_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_Rankings_Data::clear_mine_price() {
  mine_price_ = 0;
  clear_has_mine_price();
}
inline ::google::protobuf::int32 GM_Gangwar_Rankings_Data::mine_price() const {
  return mine_price_;
}
inline void GM_Gangwar_Rankings_Data::set_mine_price(::google::protobuf::int32 value) {
  set_has_mine_price();
  mine_price_ = value;
}

// optional int32 m_rank = 3;
inline bool GM_Gangwar_Rankings_Data::has_m_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_Rankings_Data::set_has_m_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_Rankings_Data::clear_has_m_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_Rankings_Data::clear_m_rank() {
  m_rank_ = 0;
  clear_has_m_rank();
}
inline ::google::protobuf::int32 GM_Gangwar_Rankings_Data::m_rank() const {
  return m_rank_;
}
inline void GM_Gangwar_Rankings_Data::set_m_rank(::google::protobuf::int32 value) {
  set_has_m_rank();
  m_rank_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_Bidding

// optional int32 m_mineid = 1;
inline bool GM_Gangwar_Bidding::has_m_mineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Bidding::set_has_m_mineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Bidding::clear_has_m_mineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Bidding::clear_m_mineid() {
  m_mineid_ = 0;
  clear_has_m_mineid();
}
inline ::google::protobuf::int32 GM_Gangwar_Bidding::m_mineid() const {
  return m_mineid_;
}
inline void GM_Gangwar_Bidding::set_m_mineid(::google::protobuf::int32 value) {
  set_has_m_mineid();
  m_mineid_ = value;
}

// optional int32 m_unit = 2;
inline bool GM_Gangwar_Bidding::has_m_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_Bidding::set_has_m_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_Bidding::clear_has_m_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_Bidding::clear_m_unit() {
  m_unit_ = 0;
  clear_has_m_unit();
}
inline ::google::protobuf::int32 GM_Gangwar_Bidding::m_unit() const {
  return m_unit_;
}
inline void GM_Gangwar_Bidding::set_m_unit(::google::protobuf::int32 value) {
  set_has_m_unit();
  m_unit_ = value;
}

// optional int32 m_roleid = 3;
inline bool GM_Gangwar_Bidding::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_Bidding::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_Bidding::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_Bidding::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_Gangwar_Bidding::m_roleid() const {
  return m_roleid_;
}
inline void GM_Gangwar_Bidding::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int64 m_gangid = 4;
inline bool GM_Gangwar_Bidding::has_m_gangid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Gangwar_Bidding::set_has_m_gangid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Gangwar_Bidding::clear_has_m_gangid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Gangwar_Bidding::clear_m_gangid() {
  m_gangid_ = GOOGLE_LONGLONG(0);
  clear_has_m_gangid();
}
inline ::google::protobuf::int64 GM_Gangwar_Bidding::m_gangid() const {
  return m_gangid_;
}
inline void GM_Gangwar_Bidding::set_m_gangid(::google::protobuf::int64 value) {
  set_has_m_gangid();
  m_gangid_ = value;
}

// -------------------------------------------------------------------

// GM_Bidding_Result

// optional int32 m_state = 1;
inline bool GM_Bidding_Result::has_m_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Bidding_Result::set_has_m_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Bidding_Result::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Bidding_Result::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Bidding_Result::m_state() const {
  return m_state_;
}
inline void GM_Bidding_Result::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_WarOpen

// optional string m_othername = 1;
inline bool GM_Gangwar_WarOpen::has_m_othername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_WarOpen::set_has_m_othername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_WarOpen::clear_has_m_othername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_WarOpen::clear_m_othername() {
  if (m_othername_ != &::google::protobuf::internal::kEmptyString) {
    m_othername_->clear();
  }
  clear_has_m_othername();
}
inline const ::std::string& GM_Gangwar_WarOpen::m_othername() const {
  return *m_othername_;
}
inline void GM_Gangwar_WarOpen::set_m_othername(const ::std::string& value) {
  set_has_m_othername();
  if (m_othername_ == &::google::protobuf::internal::kEmptyString) {
    m_othername_ = new ::std::string;
  }
  m_othername_->assign(value);
}
inline void GM_Gangwar_WarOpen::set_m_othername(const char* value) {
  set_has_m_othername();
  if (m_othername_ == &::google::protobuf::internal::kEmptyString) {
    m_othername_ = new ::std::string;
  }
  m_othername_->assign(value);
}
inline void GM_Gangwar_WarOpen::set_m_othername(const char* value, size_t size) {
  set_has_m_othername();
  if (m_othername_ == &::google::protobuf::internal::kEmptyString) {
    m_othername_ = new ::std::string;
  }
  m_othername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Gangwar_WarOpen::mutable_m_othername() {
  set_has_m_othername();
  if (m_othername_ == &::google::protobuf::internal::kEmptyString) {
    m_othername_ = new ::std::string;
  }
  return m_othername_;
}
inline ::std::string* GM_Gangwar_WarOpen::release_m_othername() {
  clear_has_m_othername();
  if (m_othername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_othername_;
    m_othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Gangwar_WarOpen::set_allocated_m_othername(::std::string* m_othername) {
  if (m_othername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_othername_;
  }
  if (m_othername) {
    set_has_m_othername();
    m_othername_ = m_othername;
  } else {
    clear_has_m_othername();
    m_othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .GM_Gangwar_Data m_Roomdata = 2;
inline int GM_Gangwar_WarOpen::m_roomdata_size() const {
  return m_roomdata_.size();
}
inline void GM_Gangwar_WarOpen::clear_m_roomdata() {
  m_roomdata_.Clear();
}
inline const ::GM_Gangwar_Data& GM_Gangwar_WarOpen::m_roomdata(int index) const {
  return m_roomdata_.Get(index);
}
inline ::GM_Gangwar_Data* GM_Gangwar_WarOpen::mutable_m_roomdata(int index) {
  return m_roomdata_.Mutable(index);
}
inline ::GM_Gangwar_Data* GM_Gangwar_WarOpen::add_m_roomdata() {
  return m_roomdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Data >&
GM_Gangwar_WarOpen::m_roomdata() const {
  return m_roomdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_Data >*
GM_Gangwar_WarOpen::mutable_m_roomdata() {
  return &m_roomdata_;
}

// optional int32 m_state = 3;
inline bool GM_Gangwar_WarOpen::has_m_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_WarOpen::set_has_m_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_WarOpen::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_WarOpen::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Gangwar_WarOpen::m_state() const {
  return m_state_;
}
inline void GM_Gangwar_WarOpen::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional int32 m_myscore = 4;
inline bool GM_Gangwar_WarOpen::has_m_myscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Gangwar_WarOpen::set_has_m_myscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Gangwar_WarOpen::clear_has_m_myscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Gangwar_WarOpen::clear_m_myscore() {
  m_myscore_ = 0;
  clear_has_m_myscore();
}
inline ::google::protobuf::int32 GM_Gangwar_WarOpen::m_myscore() const {
  return m_myscore_;
}
inline void GM_Gangwar_WarOpen::set_m_myscore(::google::protobuf::int32 value) {
  set_has_m_myscore();
  m_myscore_ = value;
}

// optional int32 m_otherscore = 5;
inline bool GM_Gangwar_WarOpen::has_m_otherscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Gangwar_WarOpen::set_has_m_otherscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Gangwar_WarOpen::clear_has_m_otherscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Gangwar_WarOpen::clear_m_otherscore() {
  m_otherscore_ = 0;
  clear_has_m_otherscore();
}
inline ::google::protobuf::int32 GM_Gangwar_WarOpen::m_otherscore() const {
  return m_otherscore_;
}
inline void GM_Gangwar_WarOpen::set_m_otherscore(::google::protobuf::int32 value) {
  set_has_m_otherscore();
  m_otherscore_ = value;
}

// optional int32 m_minestate = 6;
inline bool GM_Gangwar_WarOpen::has_m_minestate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Gangwar_WarOpen::set_has_m_minestate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Gangwar_WarOpen::clear_has_m_minestate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Gangwar_WarOpen::clear_m_minestate() {
  m_minestate_ = 0;
  clear_has_m_minestate();
}
inline ::google::protobuf::int32 GM_Gangwar_WarOpen::m_minestate() const {
  return m_minestate_;
}
inline void GM_Gangwar_WarOpen::set_m_minestate(::google::protobuf::int32 value) {
  set_has_m_minestate();
  m_minestate_ = value;
}

// optional int32 m_second = 7;
inline bool GM_Gangwar_WarOpen::has_m_second() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Gangwar_WarOpen::set_has_m_second() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Gangwar_WarOpen::clear_has_m_second() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Gangwar_WarOpen::clear_m_second() {
  m_second_ = 0;
  clear_has_m_second();
}
inline ::google::protobuf::int32 GM_Gangwar_WarOpen::m_second() const {
  return m_second_;
}
inline void GM_Gangwar_WarOpen::set_m_second(::google::protobuf::int32 value) {
  set_has_m_second();
  m_second_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_Data

// optional int32 m_mynum = 1;
inline bool GM_Gangwar_Data::has_m_mynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Data::set_has_m_mynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Data::clear_has_m_mynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Data::clear_m_mynum() {
  m_mynum_ = 0;
  clear_has_m_mynum();
}
inline ::google::protobuf::int32 GM_Gangwar_Data::m_mynum() const {
  return m_mynum_;
}
inline void GM_Gangwar_Data::set_m_mynum(::google::protobuf::int32 value) {
  set_has_m_mynum();
  m_mynum_ = value;
}

// optional int32 m_maxnum = 2;
inline bool GM_Gangwar_Data::has_m_maxnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_Data::set_has_m_maxnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_Data::clear_has_m_maxnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_Data::clear_m_maxnum() {
  m_maxnum_ = 0;
  clear_has_m_maxnum();
}
inline ::google::protobuf::int32 GM_Gangwar_Data::m_maxnum() const {
  return m_maxnum_;
}
inline void GM_Gangwar_Data::set_m_maxnum(::google::protobuf::int32 value) {
  set_has_m_maxnum();
  m_maxnum_ = value;
}

// optional int32 m_state = 3;
inline bool GM_Gangwar_Data::has_m_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_Data::set_has_m_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_Data::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_Data::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Gangwar_Data::m_state() const {
  return m_state_;
}
inline void GM_Gangwar_Data::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional int32 m_roomid = 4;
inline bool GM_Gangwar_Data::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Gangwar_Data::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Gangwar_Data::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Gangwar_Data::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 GM_Gangwar_Data::m_roomid() const {
  return m_roomid_;
}
inline void GM_Gangwar_Data::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
}

// optional int32 m_score = 5;
inline bool GM_Gangwar_Data::has_m_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Gangwar_Data::set_has_m_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Gangwar_Data::clear_has_m_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Gangwar_Data::clear_m_score() {
  m_score_ = 0;
  clear_has_m_score();
}
inline ::google::protobuf::int32 GM_Gangwar_Data::m_score() const {
  return m_score_;
}
inline void GM_Gangwar_Data::set_m_score(::google::protobuf::int32 value) {
  set_has_m_score();
  m_score_ = value;
}

// optional int64 m_wingangid = 6;
inline bool GM_Gangwar_Data::has_m_wingangid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Gangwar_Data::set_has_m_wingangid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Gangwar_Data::clear_has_m_wingangid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Gangwar_Data::clear_m_wingangid() {
  m_wingangid_ = GOOGLE_LONGLONG(0);
  clear_has_m_wingangid();
}
inline ::google::protobuf::int64 GM_Gangwar_Data::m_wingangid() const {
  return m_wingangid_;
}
inline void GM_Gangwar_Data::set_m_wingangid(::google::protobuf::int64 value) {
  set_has_m_wingangid();
  m_wingangid_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_CheckRoom

// optional int32 m_mineid = 1;
inline bool GM_Gangwar_CheckRoom::has_m_mineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_CheckRoom::set_has_m_mineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_CheckRoom::clear_has_m_mineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_CheckRoom::clear_m_mineid() {
  m_mineid_ = 0;
  clear_has_m_mineid();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom::m_mineid() const {
  return m_mineid_;
}
inline void GM_Gangwar_CheckRoom::set_m_mineid(::google::protobuf::int32 value) {
  set_has_m_mineid();
  m_mineid_ = value;
}

// optional int32 m_roomid = 2;
inline bool GM_Gangwar_CheckRoom::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_CheckRoom::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_CheckRoom::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_CheckRoom::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom::m_roomid() const {
  return m_roomid_;
}
inline void GM_Gangwar_CheckRoom::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
}

// optional int64 m_gangid = 3;
inline bool GM_Gangwar_CheckRoom::has_m_gangid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_CheckRoom::set_has_m_gangid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_CheckRoom::clear_has_m_gangid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_CheckRoom::clear_m_gangid() {
  m_gangid_ = GOOGLE_LONGLONG(0);
  clear_has_m_gangid();
}
inline ::google::protobuf::int64 GM_Gangwar_CheckRoom::m_gangid() const {
  return m_gangid_;
}
inline void GM_Gangwar_CheckRoom::set_m_gangid(::google::protobuf::int64 value) {
  set_has_m_gangid();
  m_gangid_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_CheckRoom_Return

// required int32 m_count = 1;
inline bool GM_Gangwar_CheckRoom_Return::has_m_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_CheckRoom_Return::set_has_m_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_CheckRoom_Return::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_CheckRoom_Return::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom_Return::m_count() const {
  return m_count_;
}
inline void GM_Gangwar_CheckRoom_Return::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
inline int GM_Gangwar_CheckRoom_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Gangwar_CheckRoom_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Gangwar_CheckRoom_Data& GM_Gangwar_CheckRoom_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Gangwar_CheckRoom_Data* GM_Gangwar_CheckRoom_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Gangwar_CheckRoom_Data* GM_Gangwar_CheckRoom_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >&
GM_Gangwar_CheckRoom_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >*
GM_Gangwar_CheckRoom_Return::mutable_m_data() {
  return &m_data_;
}

// optional int32 m_state = 3;
inline bool GM_Gangwar_CheckRoom_Return::has_m_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_CheckRoom_Return::set_has_m_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_CheckRoom_Return::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_CheckRoom_Return::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom_Return::m_state() const {
  return m_state_;
}
inline void GM_Gangwar_CheckRoom_Return::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional string m_roomname = 4;
inline bool GM_Gangwar_CheckRoom_Return::has_m_roomname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Gangwar_CheckRoom_Return::set_has_m_roomname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Gangwar_CheckRoom_Return::clear_has_m_roomname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Gangwar_CheckRoom_Return::clear_m_roomname() {
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    m_roomname_->clear();
  }
  clear_has_m_roomname();
}
inline const ::std::string& GM_Gangwar_CheckRoom_Return::m_roomname() const {
  return *m_roomname_;
}
inline void GM_Gangwar_CheckRoom_Return::set_m_roomname(const ::std::string& value) {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  m_roomname_->assign(value);
}
inline void GM_Gangwar_CheckRoom_Return::set_m_roomname(const char* value) {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  m_roomname_->assign(value);
}
inline void GM_Gangwar_CheckRoom_Return::set_m_roomname(const char* value, size_t size) {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  m_roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Gangwar_CheckRoom_Return::mutable_m_roomname() {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  return m_roomname_;
}
inline ::std::string* GM_Gangwar_CheckRoom_Return::release_m_roomname() {
  clear_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_roomname_;
    m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Gangwar_CheckRoom_Return::set_allocated_m_roomname(::std::string* m_roomname) {
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_roomname_;
  }
  if (m_roomname) {
    set_has_m_roomname();
    m_roomname_ = m_roomname;
  } else {
    clear_has_m_roomname();
    m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Gangwar_CheckRoom_Data

// optional string m_rolename = 1;
inline bool GM_Gangwar_CheckRoom_Data::has_m_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_CheckRoom_Data::set_has_m_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_has_m_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_m_rolename() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    m_rolename_->clear();
  }
  clear_has_m_rolename();
}
inline const ::std::string& GM_Gangwar_CheckRoom_Data::m_rolename() const {
  return *m_rolename_;
}
inline void GM_Gangwar_CheckRoom_Data::set_m_rolename(const ::std::string& value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_Gangwar_CheckRoom_Data::set_m_rolename(const char* value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_Gangwar_CheckRoom_Data::set_m_rolename(const char* value, size_t size) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Gangwar_CheckRoom_Data::mutable_m_rolename() {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  return m_rolename_;
}
inline ::std::string* GM_Gangwar_CheckRoom_Data::release_m_rolename() {
  clear_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rolename_;
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Gangwar_CheckRoom_Data::set_allocated_m_rolename(::std::string* m_rolename) {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_rolename) {
    set_has_m_rolename();
    m_rolename_ = m_rolename;
  } else {
    clear_has_m_rolename();
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_fightval = 2;
inline bool GM_Gangwar_CheckRoom_Data::has_m_fightval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_CheckRoom_Data::set_has_m_fightval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_has_m_fightval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_m_fightval() {
  m_fightval_ = 0;
  clear_has_m_fightval();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom_Data::m_fightval() const {
  return m_fightval_;
}
inline void GM_Gangwar_CheckRoom_Data::set_m_fightval(::google::protobuf::int32 value) {
  set_has_m_fightval();
  m_fightval_ = value;
}

// optional int32 m_level = 3;
inline bool GM_Gangwar_CheckRoom_Data::has_m_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_CheckRoom_Data::set_has_m_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom_Data::m_level() const {
  return m_level_;
}
inline void GM_Gangwar_CheckRoom_Data::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_profession = 4;
inline bool GM_Gangwar_CheckRoom_Data::has_m_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Gangwar_CheckRoom_Data::set_has_m_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_m_profession() {
  m_profession_ = 0;
  clear_has_m_profession();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom_Data::m_profession() const {
  return m_profession_;
}
inline void GM_Gangwar_CheckRoom_Data::set_m_profession(::google::protobuf::int32 value) {
  set_has_m_profession();
  m_profession_ = value;
}

// optional int32 m_entertime = 5;
inline bool GM_Gangwar_CheckRoom_Data::has_m_entertime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Gangwar_CheckRoom_Data::set_has_m_entertime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_has_m_entertime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Gangwar_CheckRoom_Data::clear_m_entertime() {
  m_entertime_ = 0;
  clear_has_m_entertime();
}
inline ::google::protobuf::int32 GM_Gangwar_CheckRoom_Data::m_entertime() const {
  return m_entertime_;
}
inline void GM_Gangwar_CheckRoom_Data::set_m_entertime(::google::protobuf::int32 value) {
  set_has_m_entertime();
  m_entertime_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_EnterRoom

// optional int32 m_mineid = 1;
inline bool GM_Gangwar_EnterRoom::has_m_mineid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_EnterRoom::set_has_m_mineid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_EnterRoom::clear_has_m_mineid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_EnterRoom::clear_m_mineid() {
  m_mineid_ = 0;
  clear_has_m_mineid();
}
inline ::google::protobuf::int32 GM_Gangwar_EnterRoom::m_mineid() const {
  return m_mineid_;
}
inline void GM_Gangwar_EnterRoom::set_m_mineid(::google::protobuf::int32 value) {
  set_has_m_mineid();
  m_mineid_ = value;
}

// optional int32 m_roomid = 2;
inline bool GM_Gangwar_EnterRoom::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Gangwar_EnterRoom::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Gangwar_EnterRoom::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Gangwar_EnterRoom::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 GM_Gangwar_EnterRoom::m_roomid() const {
  return m_roomid_;
}
inline void GM_Gangwar_EnterRoom::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
}

// optional int64 m_gangid = 3;
inline bool GM_Gangwar_EnterRoom::has_m_gangid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Gangwar_EnterRoom::set_has_m_gangid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Gangwar_EnterRoom::clear_has_m_gangid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Gangwar_EnterRoom::clear_m_gangid() {
  m_gangid_ = GOOGLE_LONGLONG(0);
  clear_has_m_gangid();
}
inline ::google::protobuf::int64 GM_Gangwar_EnterRoom::m_gangid() const {
  return m_gangid_;
}
inline void GM_Gangwar_EnterRoom::set_m_gangid(::google::protobuf::int64 value) {
  set_has_m_gangid();
  m_gangid_ = value;
}

// -------------------------------------------------------------------

// GM_Gangwar_EnterRoom_Return

// required int32 m_state = 1;
inline bool GM_Gangwar_EnterRoom_Return::has_m_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_EnterRoom_Return::set_has_m_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_EnterRoom_Return::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_EnterRoom_Return::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Gangwar_EnterRoom_Return::m_state() const {
  return m_state_;
}
inline void GM_Gangwar_EnterRoom_Return::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// repeated .GM_Gangwar_CheckRoom_Data m_data = 2;
inline int GM_Gangwar_EnterRoom_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Gangwar_EnterRoom_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Gangwar_CheckRoom_Data& GM_Gangwar_EnterRoom_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Gangwar_CheckRoom_Data* GM_Gangwar_EnterRoom_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Gangwar_CheckRoom_Data* GM_Gangwar_EnterRoom_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >&
GM_Gangwar_EnterRoom_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Gangwar_CheckRoom_Data >*
GM_Gangwar_EnterRoom_Return::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// GM_Gangwar_Testing

// required int32 m_state = 1;
inline bool GM_Gangwar_Testing::has_m_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Gangwar_Testing::set_has_m_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Gangwar_Testing::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Gangwar_Testing::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Gangwar_Testing::m_state() const {
  return m_state_;
}
inline void GM_Gangwar_Testing::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_gangwar_2etxt__INCLUDED
