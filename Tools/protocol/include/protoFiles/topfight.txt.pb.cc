// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topfight.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topfight.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_TopfightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TopfightInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TopfightReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TopfightReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_TopshopReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_TopshopReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ShopObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ShopObject_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_topfight_2etxt() {
  protobuf_AddDesc_topfight_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "topfight.txt");
  GOOGLE_CHECK(file != NULL);
  GM_TopfightInfo_descriptor_ = file->message_type(0);
  static const int GM_TopfightInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_toptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_pagecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, m_hadrank_),
  };
  GM_TopfightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TopfightInfo_descriptor_,
      GM_TopfightInfo::default_instance_,
      GM_TopfightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TopfightInfo));
  GM_TopfightReturn_descriptor_ = file->message_type(1);
  static const int GM_TopfightReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightReturn, m_totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightReturn, m_currank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightReturn, m_hisrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightReturn, m_matchtime_),
  };
  GM_TopfightReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TopfightReturn_descriptor_,
      GM_TopfightReturn::default_instance_,
      GM_TopfightReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopfightReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TopfightReturn));
  GM_TopshopReturn_descriptor_ = file->message_type(2);
  static const int GM_TopshopReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopshopReturn, m_ownwand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopshopReturn, m_resetcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopshopReturn, m_objs_),
  };
  GM_TopshopReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_TopshopReturn_descriptor_,
      GM_TopshopReturn::default_instance_,
      GM_TopshopReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopshopReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_TopshopReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_TopshopReturn));
  GM_ShopObject_descriptor_ = file->message_type(3);
  static const int GM_ShopObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopObject, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopObject, m_count_),
  };
  GM_ShopObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ShopObject_descriptor_,
      GM_ShopObject::default_instance_,
      GM_ShopObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ShopObject));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_topfight_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TopfightInfo_descriptor_, &GM_TopfightInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TopfightReturn_descriptor_, &GM_TopfightReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_TopshopReturn_descriptor_, &GM_TopshopReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ShopObject_descriptor_, &GM_ShopObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_topfight_2etxt() {
  delete GM_TopfightInfo::default_instance_;
  delete GM_TopfightInfo_reflection_;
  delete GM_TopfightReturn::default_instance_;
  delete GM_TopfightReturn_reflection_;
  delete GM_TopshopReturn::default_instance_;
  delete GM_TopshopReturn_reflection_;
  delete GM_ShopObject::default_instance_;
  delete GM_ShopObject_reflection_;
}

void protobuf_AddDesc_topfight_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014topfight.txt\"\313\001\n\017GM_TopfightInfo\022\020\n\010m_"
    "roleid\030\001 \002(\005\022\022\n\nm_rolename\030\002 \001(\t\022\024\n\014m_pr"
    "ofession\030\003 \001(\005\022\021\n\tm_toptime\030\004 \001(\005\022\017\n\007m_s"
    "core\030\005 \001(\005\022\017\n\007m_grade\030\006 \001(\005\022\017\n\007m_level\030\007"
    " \001(\005\022\020\n\010m_reward\030\010 \001(\005\022\021\n\tm_pagecnt\030\t \001("
    "\005\022\021\n\tm_hadrank\030\n \001(\005\"\210\001\n\021GM_TopfightRetu"
    "rn\022\024\n\014m_totalcount\030\001 \002(\005\022#\n\tm_curRank\030\002 "
    "\003(\0132\020.GM_TopfightInfo\022#\n\tm_hisRank\030\003 \003(\013"
    "2\020.GM_TopfightInfo\022\023\n\013m_matchtime\030\004 \001(\005\""
    "Z\n\020GM_TopshopReturn\022\021\n\tm_ownwand\030\001 \002(\005\022\023"
    "\n\013m_resetcost\030\002 \001(\005\022\036\n\006m_objs\030\003 \003(\0132\016.GM"
    "_ShopObject\"4\n\rGM_ShopObject\022\022\n\nm_object"
    "id\030\001 \002(\005\022\017\n\007m_count\030\002 \001(\005", 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topfight.txt", &protobuf_RegisterTypes);
  GM_TopfightInfo::default_instance_ = new GM_TopfightInfo();
  GM_TopfightReturn::default_instance_ = new GM_TopfightReturn();
  GM_TopshopReturn::default_instance_ = new GM_TopshopReturn();
  GM_ShopObject::default_instance_ = new GM_ShopObject();
  GM_TopfightInfo::default_instance_->InitAsDefaultInstance();
  GM_TopfightReturn::default_instance_->InitAsDefaultInstance();
  GM_TopshopReturn::default_instance_->InitAsDefaultInstance();
  GM_ShopObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topfight_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topfight_2etxt {
  StaticDescriptorInitializer_topfight_2etxt() {
    protobuf_AddDesc_topfight_2etxt();
  }
} static_descriptor_initializer_topfight_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_TopfightInfo::kMRoleidFieldNumber;
const int GM_TopfightInfo::kMRolenameFieldNumber;
const int GM_TopfightInfo::kMProfessionFieldNumber;
const int GM_TopfightInfo::kMToptimeFieldNumber;
const int GM_TopfightInfo::kMScoreFieldNumber;
const int GM_TopfightInfo::kMGradeFieldNumber;
const int GM_TopfightInfo::kMLevelFieldNumber;
const int GM_TopfightInfo::kMRewardFieldNumber;
const int GM_TopfightInfo::kMPagecntFieldNumber;
const int GM_TopfightInfo::kMHadrankFieldNumber;
#endif  // !_MSC_VER

GM_TopfightInfo::GM_TopfightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TopfightInfo::InitAsDefaultInstance() {
}

GM_TopfightInfo::GM_TopfightInfo(const GM_TopfightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TopfightInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_profession_ = 0;
  m_toptime_ = 0;
  m_score_ = 0;
  m_grade_ = 0;
  m_level_ = 0;
  m_reward_ = 0;
  m_pagecnt_ = 0;
  m_hadrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TopfightInfo::~GM_TopfightInfo() {
  SharedDtor();
}

void GM_TopfightInfo::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_TopfightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TopfightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TopfightInfo_descriptor_;
}

const GM_TopfightInfo& GM_TopfightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topfight_2etxt();
  return *default_instance_;
}

GM_TopfightInfo* GM_TopfightInfo::default_instance_ = NULL;

GM_TopfightInfo* GM_TopfightInfo::New() const {
  return new GM_TopfightInfo;
}

void GM_TopfightInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_profession_ = 0;
    m_toptime_ = 0;
    m_score_ = 0;
    m_grade_ = 0;
    m_level_ = 0;
    m_reward_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_pagecnt_ = 0;
    m_hadrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TopfightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_toptime;
        break;
      }

      // optional int32 m_toptime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_toptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toptime_)));
          set_has_m_toptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_score;
        break;
      }

      // optional int32 m_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_score_)));
          set_has_m_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_grade;
        break;
      }

      // optional int32 m_grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grade_)));
          set_has_m_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_pagecnt;
        break;
      }

      // optional int32 m_pagecnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pagecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pagecnt_)));
          set_has_m_pagecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_hadrank;
        break;
      }

      // optional int32 m_hadrank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_hadrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hadrank_)));
          set_has_m_hadrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TopfightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional string m_rolename = 2;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_rolename(), output);
  }

  // optional int32 m_profession = 3;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_profession(), output);
  }

  // optional int32 m_toptime = 4;
  if (has_m_toptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_toptime(), output);
  }

  // optional int32 m_score = 5;
  if (has_m_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_score(), output);
  }

  // optional int32 m_grade = 6;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_grade(), output);
  }

  // optional int32 m_level = 7;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_level(), output);
  }

  // optional int32 m_reward = 8;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_reward(), output);
  }

  // optional int32 m_pagecnt = 9;
  if (has_m_pagecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_pagecnt(), output);
  }

  // optional int32 m_hadrank = 10;
  if (has_m_hadrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_hadrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TopfightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional string m_rolename = 2;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_rolename(), target);
  }

  // optional int32 m_profession = 3;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_profession(), target);
  }

  // optional int32 m_toptime = 4;
  if (has_m_toptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_toptime(), target);
  }

  // optional int32 m_score = 5;
  if (has_m_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_score(), target);
  }

  // optional int32 m_grade = 6;
  if (has_m_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_grade(), target);
  }

  // optional int32 m_level = 7;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_level(), target);
  }

  // optional int32 m_reward = 8;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_reward(), target);
  }

  // optional int32 m_pagecnt = 9;
  if (has_m_pagecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_pagecnt(), target);
  }

  // optional int32 m_hadrank = 10;
  if (has_m_hadrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_hadrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TopfightInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional string m_rolename = 2;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_profession = 3;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional int32 m_toptime = 4;
    if (has_m_toptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toptime());
    }

    // optional int32 m_score = 5;
    if (has_m_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_score());
    }

    // optional int32 m_grade = 6;
    if (has_m_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grade());
    }

    // optional int32 m_level = 7;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_reward = 8;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_pagecnt = 9;
    if (has_m_pagecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pagecnt());
    }

    // optional int32 m_hadrank = 10;
    if (has_m_hadrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hadrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TopfightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TopfightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TopfightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TopfightInfo::MergeFrom(const GM_TopfightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_toptime()) {
      set_m_toptime(from.m_toptime());
    }
    if (from.has_m_score()) {
      set_m_score(from.m_score());
    }
    if (from.has_m_grade()) {
      set_m_grade(from.m_grade());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_pagecnt()) {
      set_m_pagecnt(from.m_pagecnt());
    }
    if (from.has_m_hadrank()) {
      set_m_hadrank(from.m_hadrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TopfightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TopfightInfo::CopyFrom(const GM_TopfightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TopfightInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_TopfightInfo::Swap(GM_TopfightInfo* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_toptime_, other->m_toptime_);
    std::swap(m_score_, other->m_score_);
    std::swap(m_grade_, other->m_grade_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_pagecnt_, other->m_pagecnt_);
    std::swap(m_hadrank_, other->m_hadrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TopfightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TopfightInfo_descriptor_;
  metadata.reflection = GM_TopfightInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TopfightReturn::kMTotalcountFieldNumber;
const int GM_TopfightReturn::kMCurRankFieldNumber;
const int GM_TopfightReturn::kMHisRankFieldNumber;
const int GM_TopfightReturn::kMMatchtimeFieldNumber;
#endif  // !_MSC_VER

GM_TopfightReturn::GM_TopfightReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TopfightReturn::InitAsDefaultInstance() {
}

GM_TopfightReturn::GM_TopfightReturn(const GM_TopfightReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TopfightReturn::SharedCtor() {
  _cached_size_ = 0;
  m_totalcount_ = 0;
  m_matchtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TopfightReturn::~GM_TopfightReturn() {
  SharedDtor();
}

void GM_TopfightReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TopfightReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TopfightReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TopfightReturn_descriptor_;
}

const GM_TopfightReturn& GM_TopfightReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topfight_2etxt();
  return *default_instance_;
}

GM_TopfightReturn* GM_TopfightReturn::default_instance_ = NULL;

GM_TopfightReturn* GM_TopfightReturn::New() const {
  return new GM_TopfightReturn;
}

void GM_TopfightReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_totalcount_ = 0;
    m_matchtime_ = 0;
  }
  m_currank_.Clear();
  m_hisrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TopfightReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_totalcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalcount_)));
          set_has_m_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_curRank;
        break;
      }

      // repeated .GM_TopfightInfo m_curRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_curRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_currank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_curRank;
        if (input->ExpectTag(26)) goto parse_m_hisRank;
        break;
      }

      // repeated .GM_TopfightInfo m_hisRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_hisRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_hisrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_hisRank;
        if (input->ExpectTag(32)) goto parse_m_matchtime;
        break;
      }

      // optional int32 m_matchtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_matchtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_matchtime_)));
          set_has_m_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TopfightReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_totalcount = 1;
  if (has_m_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_totalcount(), output);
  }

  // repeated .GM_TopfightInfo m_curRank = 2;
  for (int i = 0; i < this->m_currank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_currank(i), output);
  }

  // repeated .GM_TopfightInfo m_hisRank = 3;
  for (int i = 0; i < this->m_hisrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_hisrank(i), output);
  }

  // optional int32 m_matchtime = 4;
  if (has_m_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_matchtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TopfightReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_totalcount = 1;
  if (has_m_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_totalcount(), target);
  }

  // repeated .GM_TopfightInfo m_curRank = 2;
  for (int i = 0; i < this->m_currank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_currank(i), target);
  }

  // repeated .GM_TopfightInfo m_hisRank = 3;
  for (int i = 0; i < this->m_hisrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_hisrank(i), target);
  }

  // optional int32 m_matchtime = 4;
  if (has_m_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_matchtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TopfightReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_totalcount = 1;
    if (has_m_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalcount());
    }

    // optional int32 m_matchtime = 4;
    if (has_m_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_matchtime());
    }

  }
  // repeated .GM_TopfightInfo m_curRank = 2;
  total_size += 1 * this->m_currank_size();
  for (int i = 0; i < this->m_currank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_currank(i));
  }

  // repeated .GM_TopfightInfo m_hisRank = 3;
  total_size += 1 * this->m_hisrank_size();
  for (int i = 0; i < this->m_hisrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_hisrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TopfightReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TopfightReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TopfightReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TopfightReturn::MergeFrom(const GM_TopfightReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_currank_.MergeFrom(from.m_currank_);
  m_hisrank_.MergeFrom(from.m_hisrank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_totalcount()) {
      set_m_totalcount(from.m_totalcount());
    }
    if (from.has_m_matchtime()) {
      set_m_matchtime(from.m_matchtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TopfightReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TopfightReturn::CopyFrom(const GM_TopfightReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TopfightReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_currank_size(); i++) {
    if (!this->m_currank(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_hisrank_size(); i++) {
    if (!this->m_hisrank(i).IsInitialized()) return false;
  }
  return true;
}

void GM_TopfightReturn::Swap(GM_TopfightReturn* other) {
  if (other != this) {
    std::swap(m_totalcount_, other->m_totalcount_);
    m_currank_.Swap(&other->m_currank_);
    m_hisrank_.Swap(&other->m_hisrank_);
    std::swap(m_matchtime_, other->m_matchtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TopfightReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TopfightReturn_descriptor_;
  metadata.reflection = GM_TopfightReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_TopshopReturn::kMOwnwandFieldNumber;
const int GM_TopshopReturn::kMResetcostFieldNumber;
const int GM_TopshopReturn::kMObjsFieldNumber;
#endif  // !_MSC_VER

GM_TopshopReturn::GM_TopshopReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_TopshopReturn::InitAsDefaultInstance() {
}

GM_TopshopReturn::GM_TopshopReturn(const GM_TopshopReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_TopshopReturn::SharedCtor() {
  _cached_size_ = 0;
  m_ownwand_ = 0;
  m_resetcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_TopshopReturn::~GM_TopshopReturn() {
  SharedDtor();
}

void GM_TopshopReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_TopshopReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_TopshopReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_TopshopReturn_descriptor_;
}

const GM_TopshopReturn& GM_TopshopReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topfight_2etxt();
  return *default_instance_;
}

GM_TopshopReturn* GM_TopshopReturn::default_instance_ = NULL;

GM_TopshopReturn* GM_TopshopReturn::New() const {
  return new GM_TopshopReturn;
}

void GM_TopshopReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ownwand_ = 0;
    m_resetcost_ = 0;
  }
  m_objs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_TopshopReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_ownwand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ownwand_)));
          set_has_m_ownwand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_resetcost;
        break;
      }

      // optional int32 m_resetcost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_resetcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resetcost_)));
          set_has_m_resetcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_objs;
        break;
      }

      // repeated .GM_ShopObject m_objs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_objs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_TopshopReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_ownwand = 1;
  if (has_m_ownwand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ownwand(), output);
  }

  // optional int32 m_resetcost = 2;
  if (has_m_resetcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_resetcost(), output);
  }

  // repeated .GM_ShopObject m_objs = 3;
  for (int i = 0; i < this->m_objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_objs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_TopshopReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_ownwand = 1;
  if (has_m_ownwand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ownwand(), target);
  }

  // optional int32 m_resetcost = 2;
  if (has_m_resetcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_resetcost(), target);
  }

  // repeated .GM_ShopObject m_objs = 3;
  for (int i = 0; i < this->m_objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_objs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_TopshopReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_ownwand = 1;
    if (has_m_ownwand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ownwand());
    }

    // optional int32 m_resetcost = 2;
    if (has_m_resetcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resetcost());
    }

  }
  // repeated .GM_ShopObject m_objs = 3;
  total_size += 1 * this->m_objs_size();
  for (int i = 0; i < this->m_objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_objs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_TopshopReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_TopshopReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_TopshopReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_TopshopReturn::MergeFrom(const GM_TopshopReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_objs_.MergeFrom(from.m_objs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ownwand()) {
      set_m_ownwand(from.m_ownwand());
    }
    if (from.has_m_resetcost()) {
      set_m_resetcost(from.m_resetcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_TopshopReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_TopshopReturn::CopyFrom(const GM_TopshopReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_TopshopReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_objs_size(); i++) {
    if (!this->m_objs(i).IsInitialized()) return false;
  }
  return true;
}

void GM_TopshopReturn::Swap(GM_TopshopReturn* other) {
  if (other != this) {
    std::swap(m_ownwand_, other->m_ownwand_);
    std::swap(m_resetcost_, other->m_resetcost_);
    m_objs_.Swap(&other->m_objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_TopshopReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_TopshopReturn_descriptor_;
  metadata.reflection = GM_TopshopReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ShopObject::kMObjectidFieldNumber;
const int GM_ShopObject::kMCountFieldNumber;
#endif  // !_MSC_VER

GM_ShopObject::GM_ShopObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ShopObject::InitAsDefaultInstance() {
}

GM_ShopObject::GM_ShopObject(const GM_ShopObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ShopObject::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ShopObject::~GM_ShopObject() {
  SharedDtor();
}

void GM_ShopObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ShopObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ShopObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ShopObject_descriptor_;
}

const GM_ShopObject& GM_ShopObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topfight_2etxt();
  return *default_instance_;
}

GM_ShopObject* GM_ShopObject::default_instance_ = NULL;

GM_ShopObject* GM_ShopObject::New() const {
  return new GM_ShopObject;
}

void GM_ShopObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ShopObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_count;
        break;
      }

      // optional int32 m_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ShopObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_count = 2;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ShopObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_count = 2;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ShopObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_count = 2;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ShopObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ShopObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ShopObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ShopObject::MergeFrom(const GM_ShopObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ShopObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ShopObject::CopyFrom(const GM_ShopObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ShopObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ShopObject::Swap(GM_ShopObject* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_count_, other->m_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ShopObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ShopObject_descriptor_;
  metadata.reflection = GM_ShopObject_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
