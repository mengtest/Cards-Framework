// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: challenge.txt

#ifndef PROTOBUF_challenge_2etxt__INCLUDED
#define PROTOBUF_challenge_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_challenge_2etxt();
void protobuf_AssignDesc_challenge_2etxt();
void protobuf_ShutdownFile_challenge_2etxt();

class GM_Challenge_Open_Return;
class GM_Challenge_Choose_Request;
class GM_Challenge_Choose_Return;
class GM_Challenge_Reset_Return;
class GM_Challenge_Fortune_Open_Return;
class GM_Challenge_Reset_Fortune_Return;
class GM_Challenge_Fortune_Info;
class GM_Challenge_Start_Return;
class GM_Challenge_Ready_Return;
class GM_Challenge_Pet_Info;
class GM_Challenge_Proof_Notify;
class GM_Challenge_Store_Open_Return;
class GM_Challenge_Store_Object;
class GM_Challenge_Store_Reset_Return;
class GM_Challenge_Store_Buy_Return;
class GM_Challenge_Store_Buy_Result;
class GM_Challenge_OnBattle;
class GM_Challenge_OnBattle_Return;
class GM_Challenge_RentPet_Return;
class GM_Challenge_RentPet_Rent_Request;
class GM_Challenge_RentPet_Rent_Return;
class GM_Challenge_RentPet_Open_Return;
class GM_Challenge_RentPet_Info;
class GM_Challenge_RentPet_Hire_Request;
class GM_Challenge_RentPet_Hire_Return;
class GM_Challenge_SwitchCardItem;
class GM_Challenge_SwitchCard_Request;
class GM_Challenge_SwitchCard_Return;

// ===================================================================

class GM_Challenge_Open_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Open_Return();
  virtual ~GM_Challenge_Open_Return();

  GM_Challenge_Open_Return(const GM_Challenge_Open_Return& from);

  inline GM_Challenge_Open_Return& operator=(const GM_Challenge_Open_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Open_Return& default_instance();

  void Swap(GM_Challenge_Open_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Open_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Open_Return& from);
  void MergeFrom(const GM_Challenge_Open_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 roleHP = 2;
  inline bool has_rolehp() const;
  inline void clear_rolehp();
  static const int kRoleHPFieldNumber = 2;
  inline ::google::protobuf::int32 rolehp() const;
  inline void set_rolehp(::google::protobuf::int32 value);

  // optional string matchName = 3;
  inline bool has_matchname() const;
  inline void clear_matchname();
  static const int kMatchNameFieldNumber = 3;
  inline const ::std::string& matchname() const;
  inline void set_matchname(const ::std::string& value);
  inline void set_matchname(const char* value);
  inline void set_matchname(const char* value, size_t size);
  inline ::std::string* mutable_matchname();
  inline ::std::string* release_matchname();
  inline void set_allocated_matchname(::std::string* matchname);

  // optional int32 matchlevel = 4;
  inline bool has_matchlevel() const;
  inline void clear_matchlevel();
  static const int kMatchlevelFieldNumber = 4;
  inline ::google::protobuf::int32 matchlevel() const;
  inline void set_matchlevel(::google::protobuf::int32 value);

  // optional int32 matchfightvalue = 5;
  inline bool has_matchfightvalue() const;
  inline void clear_matchfightvalue();
  static const int kMatchfightvalueFieldNumber = 5;
  inline ::google::protobuf::int32 matchfightvalue() const;
  inline void set_matchfightvalue(::google::protobuf::int32 value);

  // optional int32 matchtime = 6;
  inline bool has_matchtime() const;
  inline void clear_matchtime();
  static const int kMatchtimeFieldNumber = 6;
  inline ::google::protobuf::int32 matchtime() const;
  inline void set_matchtime(::google::protobuf::int32 value);

  // optional int32 matchprofession = 7;
  inline bool has_matchprofession() const;
  inline void clear_matchprofession();
  static const int kMatchprofessionFieldNumber = 7;
  inline ::google::protobuf::int32 matchprofession() const;
  inline void set_matchprofession(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Open_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rolehp();
  inline void clear_has_rolehp();
  inline void set_has_matchname();
  inline void clear_has_matchname();
  inline void set_has_matchlevel();
  inline void clear_has_matchlevel();
  inline void set_has_matchfightvalue();
  inline void clear_has_matchfightvalue();
  inline void set_has_matchtime();
  inline void clear_has_matchtime();
  inline void set_has_matchprofession();
  inline void clear_has_matchprofession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 rolehp_;
  ::std::string* matchname_;
  ::google::protobuf::int32 matchlevel_;
  ::google::protobuf::int32 matchfightvalue_;
  ::google::protobuf::int32 matchtime_;
  ::google::protobuf::int32 matchprofession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Open_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Choose_Request : public ::google::protobuf::Message {
 public:
  GM_Challenge_Choose_Request();
  virtual ~GM_Challenge_Choose_Request();

  GM_Challenge_Choose_Request(const GM_Challenge_Choose_Request& from);

  inline GM_Challenge_Choose_Request& operator=(const GM_Challenge_Choose_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Choose_Request& default_instance();

  void Swap(GM_Challenge_Choose_Request* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Choose_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Choose_Request& from);
  void MergeFrom(const GM_Challenge_Choose_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 degree = 1;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 1;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Choose_Request)
 private:
  inline void set_has_degree();
  inline void clear_has_degree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 degree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Choose_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Choose_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Choose_Return();
  virtual ~GM_Challenge_Choose_Return();

  GM_Challenge_Choose_Return(const GM_Challenge_Choose_Return& from);

  inline GM_Challenge_Choose_Return& operator=(const GM_Challenge_Choose_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Choose_Return& default_instance();

  void Swap(GM_Challenge_Choose_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Choose_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Choose_Return& from);
  void MergeFrom(const GM_Challenge_Choose_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Choose_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Choose_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Reset_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Reset_Return();
  virtual ~GM_Challenge_Reset_Return();

  GM_Challenge_Reset_Return(const GM_Challenge_Reset_Return& from);

  inline GM_Challenge_Reset_Return& operator=(const GM_Challenge_Reset_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Reset_Return& default_instance();

  void Swap(GM_Challenge_Reset_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Reset_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Reset_Return& from);
  void MergeFrom(const GM_Challenge_Reset_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Reset_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Reset_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Fortune_Open_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Fortune_Open_Return();
  virtual ~GM_Challenge_Fortune_Open_Return();

  GM_Challenge_Fortune_Open_Return(const GM_Challenge_Fortune_Open_Return& from);

  inline GM_Challenge_Fortune_Open_Return& operator=(const GM_Challenge_Fortune_Open_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Fortune_Open_Return& default_instance();

  void Swap(GM_Challenge_Fortune_Open_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Fortune_Open_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Fortune_Open_Return& from);
  void MergeFrom(const GM_Challenge_Fortune_Open_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 remaintime = 1;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemaintimeFieldNumber = 1;
  inline ::google::protobuf::int32 remaintime() const;
  inline void set_remaintime(::google::protobuf::int32 value);

  // optional .GM_Challenge_Fortune_Info fortuneInfo = 2;
  inline bool has_fortuneinfo() const;
  inline void clear_fortuneinfo();
  static const int kFortuneInfoFieldNumber = 2;
  inline const ::GM_Challenge_Fortune_Info& fortuneinfo() const;
  inline ::GM_Challenge_Fortune_Info* mutable_fortuneinfo();
  inline ::GM_Challenge_Fortune_Info* release_fortuneinfo();
  inline void set_allocated_fortuneinfo(::GM_Challenge_Fortune_Info* fortuneinfo);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Fortune_Open_Return)
 private:
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_fortuneinfo();
  inline void clear_has_fortuneinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GM_Challenge_Fortune_Info* fortuneinfo_;
  ::google::protobuf::int32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Fortune_Open_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Reset_Fortune_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Reset_Fortune_Return();
  virtual ~GM_Challenge_Reset_Fortune_Return();

  GM_Challenge_Reset_Fortune_Return(const GM_Challenge_Reset_Fortune_Return& from);

  inline GM_Challenge_Reset_Fortune_Return& operator=(const GM_Challenge_Reset_Fortune_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Reset_Fortune_Return& default_instance();

  void Swap(GM_Challenge_Reset_Fortune_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Reset_Fortune_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Reset_Fortune_Return& from);
  void MergeFrom(const GM_Challenge_Reset_Fortune_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 remaintime = 2;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemaintimeFieldNumber = 2;
  inline ::google::protobuf::int32 remaintime() const;
  inline void set_remaintime(::google::protobuf::int32 value);

  // optional .GM_Challenge_Fortune_Info fortuneInfo = 8;
  inline bool has_fortuneinfo() const;
  inline void clear_fortuneinfo();
  static const int kFortuneInfoFieldNumber = 8;
  inline const ::GM_Challenge_Fortune_Info& fortuneinfo() const;
  inline ::GM_Challenge_Fortune_Info* mutable_fortuneinfo();
  inline ::GM_Challenge_Fortune_Info* release_fortuneinfo();
  inline void set_allocated_fortuneinfo(::GM_Challenge_Fortune_Info* fortuneinfo);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Reset_Fortune_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_fortuneinfo();
  inline void clear_has_fortuneinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 remaintime_;
  ::GM_Challenge_Fortune_Info* fortuneinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Reset_Fortune_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Fortune_Info : public ::google::protobuf::Message {
 public:
  GM_Challenge_Fortune_Info();
  virtual ~GM_Challenge_Fortune_Info();

  GM_Challenge_Fortune_Info(const GM_Challenge_Fortune_Info& from);

  inline GM_Challenge_Fortune_Info& operator=(const GM_Challenge_Fortune_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Fortune_Info& default_instance();

  void Swap(GM_Challenge_Fortune_Info* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Fortune_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Fortune_Info& from);
  void MergeFrom(const GM_Challenge_Fortune_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fbtypeid = 1;
  inline bool has_fbtypeid() const;
  inline void clear_fbtypeid();
  static const int kFbtypeidFieldNumber = 1;
  inline ::google::protobuf::int32 fbtypeid() const;
  inline void set_fbtypeid(::google::protobuf::int32 value);

  // required int32 role_fortune = 2;
  inline bool has_role_fortune() const;
  inline void clear_role_fortune();
  static const int kRoleFortuneFieldNumber = 2;
  inline ::google::protobuf::int32 role_fortune() const;
  inline void set_role_fortune(::google::protobuf::int32 value);

  // required int32 pet_fortune = 3;
  inline bool has_pet_fortune() const;
  inline void clear_pet_fortune();
  static const int kPetFortuneFieldNumber = 3;
  inline ::google::protobuf::int32 pet_fortune() const;
  inline void set_pet_fortune(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Fortune_Info)
 private:
  inline void set_has_fbtypeid();
  inline void clear_has_fbtypeid();
  inline void set_has_role_fortune();
  inline void clear_has_role_fortune();
  inline void set_has_pet_fortune();
  inline void clear_has_pet_fortune();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fbtypeid_;
  ::google::protobuf::int32 role_fortune_;
  ::google::protobuf::int32 pet_fortune_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Fortune_Info* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Start_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Start_Return();
  virtual ~GM_Challenge_Start_Return();

  GM_Challenge_Start_Return(const GM_Challenge_Start_Return& from);

  inline GM_Challenge_Start_Return& operator=(const GM_Challenge_Start_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Start_Return& default_instance();

  void Swap(GM_Challenge_Start_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Start_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Start_Return& from);
  void MergeFrom(const GM_Challenge_Start_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Start_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Start_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Ready_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Ready_Return();
  virtual ~GM_Challenge_Ready_Return();

  GM_Challenge_Ready_Return(const GM_Challenge_Ready_Return& from);

  inline GM_Challenge_Ready_Return& operator=(const GM_Challenge_Ready_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Ready_Return& default_instance();

  void Swap(GM_Challenge_Ready_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Ready_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Ready_Return& from);
  void MergeFrom(const GM_Challenge_Ready_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .GM_Challenge_Pet_Info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GM_Challenge_Pet_Info& data(int index) const;
  inline ::GM_Challenge_Pet_Info* mutable_data(int index);
  inline ::GM_Challenge_Pet_Info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Pet_Info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Pet_Info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:GM_Challenge_Ready_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Pet_Info > data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Ready_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Pet_Info : public ::google::protobuf::Message {
 public:
  GM_Challenge_Pet_Info();
  virtual ~GM_Challenge_Pet_Info();

  GM_Challenge_Pet_Info(const GM_Challenge_Pet_Info& from);

  inline GM_Challenge_Pet_Info& operator=(const GM_Challenge_Pet_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Pet_Info& default_instance();

  void Swap(GM_Challenge_Pet_Info* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Pet_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Pet_Info& from);
  void MergeFrom(const GM_Challenge_Pet_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int64 gmid = 2;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 2;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 hpdecrease = 3;
  inline bool has_hpdecrease() const;
  inline void clear_hpdecrease();
  static const int kHpdecreaseFieldNumber = 3;
  inline ::google::protobuf::int32 hpdecrease() const;
  inline void set_hpdecrease(::google::protobuf::int32 value);

  // optional int32 ownerid = 4;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 4;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 onbattle = 5;
  inline bool has_onbattle() const;
  inline void clear_onbattle();
  static const int kOnbattleFieldNumber = 5;
  inline ::google::protobuf::int32 onbattle() const;
  inline void set_onbattle(::google::protobuf::int32 value);

  // optional int32 petid = 6;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 6;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Pet_Info)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_hpdecrease();
  inline void clear_has_hpdecrease();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_onbattle();
  inline void clear_has_onbattle();
  inline void set_has_petid();
  inline void clear_has_petid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 hpdecrease_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 onbattle_;
  ::google::protobuf::int32 petid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Pet_Info* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Proof_Notify : public ::google::protobuf::Message {
 public:
  GM_Challenge_Proof_Notify();
  virtual ~GM_Challenge_Proof_Notify();

  GM_Challenge_Proof_Notify(const GM_Challenge_Proof_Notify& from);

  inline GM_Challenge_Proof_Notify& operator=(const GM_Challenge_Proof_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Proof_Notify& default_instance();

  void Swap(GM_Challenge_Proof_Notify* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Proof_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Proof_Notify& from);
  void MergeFrom(const GM_Challenge_Proof_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 proof = 1;
  inline bool has_proof() const;
  inline void clear_proof();
  static const int kProofFieldNumber = 1;
  inline ::google::protobuf::int32 proof() const;
  inline void set_proof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Proof_Notify)
 private:
  inline void set_has_proof();
  inline void clear_has_proof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 proof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Proof_Notify* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Store_Open_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Store_Open_Return();
  virtual ~GM_Challenge_Store_Open_Return();

  GM_Challenge_Store_Open_Return(const GM_Challenge_Store_Open_Return& from);

  inline GM_Challenge_Store_Open_Return& operator=(const GM_Challenge_Store_Open_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Store_Open_Return& default_instance();

  void Swap(GM_Challenge_Store_Open_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Store_Open_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Store_Open_Return& from);
  void MergeFrom(const GM_Challenge_Store_Open_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 proof = 1;
  inline bool has_proof() const;
  inline void clear_proof();
  static const int kProofFieldNumber = 1;
  inline ::google::protobuf::int32 proof() const;
  inline void set_proof(::google::protobuf::int32 value);

  // repeated .GM_Challenge_Store_Object data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GM_Challenge_Store_Object& data(int index) const;
  inline ::GM_Challenge_Store_Object* mutable_data(int index);
  inline ::GM_Challenge_Store_Object* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Store_Object >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Store_Object >*
      mutable_data();

  // optional int32 resetcost = 3;
  inline bool has_resetcost() const;
  inline void clear_resetcost();
  static const int kResetcostFieldNumber = 3;
  inline ::google::protobuf::int32 resetcost() const;
  inline void set_resetcost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Store_Open_Return)
 private:
  inline void set_has_proof();
  inline void clear_has_proof();
  inline void set_has_resetcost();
  inline void clear_has_resetcost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Store_Object > data_;
  ::google::protobuf::int32 proof_;
  ::google::protobuf::int32 resetcost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Store_Open_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Store_Object : public ::google::protobuf::Message {
 public:
  GM_Challenge_Store_Object();
  virtual ~GM_Challenge_Store_Object();

  GM_Challenge_Store_Object(const GM_Challenge_Store_Object& from);

  inline GM_Challenge_Store_Object& operator=(const GM_Challenge_Store_Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Store_Object& default_instance();

  void Swap(GM_Challenge_Store_Object* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Store_Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Store_Object& from);
  void MergeFrom(const GM_Challenge_Store_Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objectid = 1;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // required int32 remaindercount = 2;
  inline bool has_remaindercount() const;
  inline void clear_remaindercount();
  static const int kRemaindercountFieldNumber = 2;
  inline ::google::protobuf::int32 remaindercount() const;
  inline void set_remaindercount(::google::protobuf::int32 value);

  // required int32 costnum = 3;
  inline bool has_costnum() const;
  inline void clear_costnum();
  static const int kCostnumFieldNumber = 3;
  inline ::google::protobuf::int32 costnum() const;
  inline void set_costnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Store_Object)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_remaindercount();
  inline void clear_has_remaindercount();
  inline void set_has_costnum();
  inline void clear_has_costnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 remaindercount_;
  ::google::protobuf::int32 costnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Store_Object* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Store_Reset_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Store_Reset_Return();
  virtual ~GM_Challenge_Store_Reset_Return();

  GM_Challenge_Store_Reset_Return(const GM_Challenge_Store_Reset_Return& from);

  inline GM_Challenge_Store_Reset_Return& operator=(const GM_Challenge_Store_Reset_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Store_Reset_Return& default_instance();

  void Swap(GM_Challenge_Store_Reset_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Store_Reset_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Store_Reset_Return& from);
  void MergeFrom(const GM_Challenge_Store_Reset_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 proof = 2;
  inline bool has_proof() const;
  inline void clear_proof();
  static const int kProofFieldNumber = 2;
  inline ::google::protobuf::int32 proof() const;
  inline void set_proof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Store_Reset_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_proof();
  inline void clear_has_proof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 proof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Store_Reset_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Store_Buy_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_Store_Buy_Return();
  virtual ~GM_Challenge_Store_Buy_Return();

  GM_Challenge_Store_Buy_Return(const GM_Challenge_Store_Buy_Return& from);

  inline GM_Challenge_Store_Buy_Return& operator=(const GM_Challenge_Store_Buy_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Store_Buy_Return& default_instance();

  void Swap(GM_Challenge_Store_Buy_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Store_Buy_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Store_Buy_Return& from);
  void MergeFrom(const GM_Challenge_Store_Buy_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objectid = 1;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Store_Buy_Return)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Store_Buy_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_Store_Buy_Result : public ::google::protobuf::Message {
 public:
  GM_Challenge_Store_Buy_Result();
  virtual ~GM_Challenge_Store_Buy_Result();

  GM_Challenge_Store_Buy_Result(const GM_Challenge_Store_Buy_Result& from);

  inline GM_Challenge_Store_Buy_Result& operator=(const GM_Challenge_Store_Buy_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_Store_Buy_Result& default_instance();

  void Swap(GM_Challenge_Store_Buy_Result* other);

  // implements Message ----------------------------------------------

  GM_Challenge_Store_Buy_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_Store_Buy_Result& from);
  void MergeFrom(const GM_Challenge_Store_Buy_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 objectid = 2;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 2;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // required int32 proof = 3;
  inline bool has_proof() const;
  inline void clear_proof();
  static const int kProofFieldNumber = 3;
  inline ::google::protobuf::int32 proof() const;
  inline void set_proof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_Store_Buy_Result)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_proof();
  inline void clear_has_proof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 proof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_Store_Buy_Result* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_OnBattle : public ::google::protobuf::Message {
 public:
  GM_Challenge_OnBattle();
  virtual ~GM_Challenge_OnBattle();

  GM_Challenge_OnBattle(const GM_Challenge_OnBattle& from);

  inline GM_Challenge_OnBattle& operator=(const GM_Challenge_OnBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_OnBattle& default_instance();

  void Swap(GM_Challenge_OnBattle* other);

  // implements Message ----------------------------------------------

  GM_Challenge_OnBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_OnBattle& from);
  void MergeFrom(const GM_Challenge_OnBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 battleHole = 2;
  inline bool has_battlehole() const;
  inline void clear_battlehole();
  static const int kBattleHoleFieldNumber = 2;
  inline ::google::protobuf::int32 battlehole() const;
  inline void set_battlehole(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_OnBattle)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_battlehole();
  inline void clear_has_battlehole();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 battlehole_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_OnBattle* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_OnBattle_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_OnBattle_Return();
  virtual ~GM_Challenge_OnBattle_Return();

  GM_Challenge_OnBattle_Return(const GM_Challenge_OnBattle_Return& from);

  inline GM_Challenge_OnBattle_Return& operator=(const GM_Challenge_OnBattle_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_OnBattle_Return& default_instance();

  void Swap(GM_Challenge_OnBattle_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_OnBattle_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_OnBattle_Return& from);
  void MergeFrom(const GM_Challenge_OnBattle_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 battleHole = 2;
  inline bool has_battlehole() const;
  inline void clear_battlehole();
  static const int kBattleHoleFieldNumber = 2;
  inline ::google::protobuf::int32 battlehole() const;
  inline void set_battlehole(::google::protobuf::int32 value);

  // repeated .GM_Challenge_OnBattle dataInfo = 3;
  inline int datainfo_size() const;
  inline void clear_datainfo();
  static const int kDataInfoFieldNumber = 3;
  inline const ::GM_Challenge_OnBattle& datainfo(int index) const;
  inline ::GM_Challenge_OnBattle* mutable_datainfo(int index);
  inline ::GM_Challenge_OnBattle* add_datainfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_OnBattle >&
      datainfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_OnBattle >*
      mutable_datainfo();

  // @@protoc_insertion_point(class_scope:GM_Challenge_OnBattle_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_battlehole();
  inline void clear_has_battlehole();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 battlehole_;
  ::google::protobuf::RepeatedPtrField< ::GM_Challenge_OnBattle > datainfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_OnBattle_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Return();
  virtual ~GM_Challenge_RentPet_Return();

  GM_Challenge_RentPet_Return(const GM_Challenge_RentPet_Return& from);

  inline GM_Challenge_RentPet_Return& operator=(const GM_Challenge_RentPet_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Return& default_instance();

  void Swap(GM_Challenge_RentPet_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Return& from);
  void MergeFrom(const GM_Challenge_RentPet_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 gmid = 2;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 2;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Rent_Request : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Rent_Request();
  virtual ~GM_Challenge_RentPet_Rent_Request();

  GM_Challenge_RentPet_Rent_Request(const GM_Challenge_RentPet_Rent_Request& from);

  inline GM_Challenge_RentPet_Rent_Request& operator=(const GM_Challenge_RentPet_Rent_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Rent_Request& default_instance();

  void Swap(GM_Challenge_RentPet_Rent_Request* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Rent_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Rent_Request& from);
  void MergeFrom(const GM_Challenge_RentPet_Rent_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // required int32 operate = 2;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 2;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Rent_Request)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_operate();
  inline void clear_has_operate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 operate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Rent_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Rent_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Rent_Return();
  virtual ~GM_Challenge_RentPet_Rent_Return();

  GM_Challenge_RentPet_Rent_Return(const GM_Challenge_RentPet_Rent_Return& from);

  inline GM_Challenge_RentPet_Rent_Return& operator=(const GM_Challenge_RentPet_Rent_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Rent_Return& default_instance();

  void Swap(GM_Challenge_RentPet_Rent_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Rent_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Rent_Return& from);
  void MergeFrom(const GM_Challenge_RentPet_Rent_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 gmid = 2;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 2;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // required int32 operate = 3;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 3;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Rent_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Rent_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Open_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Open_Return();
  virtual ~GM_Challenge_RentPet_Open_Return();

  GM_Challenge_RentPet_Open_Return(const GM_Challenge_RentPet_Open_Return& from);

  inline GM_Challenge_RentPet_Open_Return& operator=(const GM_Challenge_RentPet_Open_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Open_Return& default_instance();

  void Swap(GM_Challenge_RentPet_Open_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Open_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Open_Return& from);
  void MergeFrom(const GM_Challenge_RentPet_Open_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_Challenge_RentPet_Info data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::GM_Challenge_RentPet_Info& data(int index) const;
  inline ::GM_Challenge_RentPet_Info* mutable_data(int index);
  inline ::GM_Challenge_RentPet_Info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_RentPet_Info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_RentPet_Info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Open_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::GM_Challenge_RentPet_Info > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Open_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Info : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Info();
  virtual ~GM_Challenge_RentPet_Info();

  GM_Challenge_RentPet_Info(const GM_Challenge_RentPet_Info& from);

  inline GM_Challenge_RentPet_Info& operator=(const GM_Challenge_RentPet_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Info& default_instance();

  void Swap(GM_Challenge_RentPet_Info* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Info& from);
  void MergeFrom(const GM_Challenge_RentPet_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional int32 petid = 2;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 2;
  inline ::google::protobuf::int32 petid() const;
  inline void set_petid(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 evolve = 4;
  inline bool has_evolve() const;
  inline void clear_evolve();
  static const int kEvolveFieldNumber = 4;
  inline ::google::protobuf::int32 evolve() const;
  inline void set_evolve(::google::protobuf::int32 value);

  // optional int32 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional string ownerName = 6;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnerNameFieldNumber = 6;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const char* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Info)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_evolve();
  inline void clear_has_evolve();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_ownername();
  inline void clear_has_ownername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::google::protobuf::int32 petid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 evolve_;
  ::google::protobuf::int32 money_;
  ::std::string* ownername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Info* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Hire_Request : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Hire_Request();
  virtual ~GM_Challenge_RentPet_Hire_Request();

  GM_Challenge_RentPet_Hire_Request(const GM_Challenge_RentPet_Hire_Request& from);

  inline GM_Challenge_RentPet_Hire_Request& operator=(const GM_Challenge_RentPet_Hire_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Hire_Request& default_instance();

  void Swap(GM_Challenge_RentPet_Hire_Request* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Hire_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Hire_Request& from);
  void MergeFrom(const GM_Challenge_RentPet_Hire_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Hire_Request)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Hire_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_RentPet_Hire_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_RentPet_Hire_Return();
  virtual ~GM_Challenge_RentPet_Hire_Return();

  GM_Challenge_RentPet_Hire_Return(const GM_Challenge_RentPet_Hire_Return& from);

  inline GM_Challenge_RentPet_Hire_Return& operator=(const GM_Challenge_RentPet_Hire_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_RentPet_Hire_Return& default_instance();

  void Swap(GM_Challenge_RentPet_Hire_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_RentPet_Hire_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_RentPet_Hire_Return& from);
  void MergeFrom(const GM_Challenge_RentPet_Hire_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 gmid = 2;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 2;
  inline ::google::protobuf::int64 gmid() const;
  inline void set_gmid(::google::protobuf::int64 value);

  // optional .GM_Challenge_Pet_Info data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::GM_Challenge_Pet_Info& data() const;
  inline ::GM_Challenge_Pet_Info* mutable_data();
  inline ::GM_Challenge_Pet_Info* release_data();
  inline void set_allocated_data(::GM_Challenge_Pet_Info* data);

  // @@protoc_insertion_point(class_scope:GM_Challenge_RentPet_Hire_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gmid_;
  ::GM_Challenge_Pet_Info* data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_RentPet_Hire_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_SwitchCardItem : public ::google::protobuf::Message {
 public:
  GM_Challenge_SwitchCardItem();
  virtual ~GM_Challenge_SwitchCardItem();

  GM_Challenge_SwitchCardItem(const GM_Challenge_SwitchCardItem& from);

  inline GM_Challenge_SwitchCardItem& operator=(const GM_Challenge_SwitchCardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_SwitchCardItem& default_instance();

  void Swap(GM_Challenge_SwitchCardItem* other);

  // implements Message ----------------------------------------------

  GM_Challenge_SwitchCardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_SwitchCardItem& from);
  void MergeFrom(const GM_Challenge_SwitchCardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // required int32 objectid = 2;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 2;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // required int32 objectnum = 3;
  inline bool has_objectnum() const;
  inline void clear_objectnum();
  static const int kObjectnumFieldNumber = 3;
  inline ::google::protobuf::int32 objectnum() const;
  inline void set_objectnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_SwitchCardItem)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_objectnum();
  inline void clear_has_objectnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 objectnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_SwitchCardItem* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_SwitchCard_Request : public ::google::protobuf::Message {
 public:
  GM_Challenge_SwitchCard_Request();
  virtual ~GM_Challenge_SwitchCard_Request();

  GM_Challenge_SwitchCard_Request(const GM_Challenge_SwitchCard_Request& from);

  inline GM_Challenge_SwitchCard_Request& operator=(const GM_Challenge_SwitchCard_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_SwitchCard_Request& default_instance();

  void Swap(GM_Challenge_SwitchCard_Request* other);

  // implements Message ----------------------------------------------

  GM_Challenge_SwitchCard_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_SwitchCard_Request& from);
  void MergeFrom(const GM_Challenge_SwitchCard_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Challenge_SwitchCard_Request)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_SwitchCard_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_Challenge_SwitchCard_Return : public ::google::protobuf::Message {
 public:
  GM_Challenge_SwitchCard_Return();
  virtual ~GM_Challenge_SwitchCard_Return();

  GM_Challenge_SwitchCard_Return(const GM_Challenge_SwitchCard_Return& from);

  inline GM_Challenge_SwitchCard_Return& operator=(const GM_Challenge_SwitchCard_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Challenge_SwitchCard_Return& default_instance();

  void Swap(GM_Challenge_SwitchCard_Return* other);

  // implements Message ----------------------------------------------

  GM_Challenge_SwitchCard_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Challenge_SwitchCard_Return& from);
  void MergeFrom(const GM_Challenge_SwitchCard_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // repeated .GM_Challenge_SwitchCardItem item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::GM_Challenge_SwitchCardItem& item(int index) const;
  inline ::GM_Challenge_SwitchCardItem* mutable_item(int index);
  inline ::GM_Challenge_SwitchCardItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_SwitchCardItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_SwitchCardItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:GM_Challenge_SwitchCard_Return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::RepeatedPtrField< ::GM_Challenge_SwitchCardItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_challenge_2etxt();
  friend void protobuf_AssignDesc_challenge_2etxt();
  friend void protobuf_ShutdownFile_challenge_2etxt();

  void InitAsDefaultInstance();
  static GM_Challenge_SwitchCard_Return* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_Challenge_Open_Return

// required int32 result = 1;
inline bool GM_Challenge_Open_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Open_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Open_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Open_Return::result() const {
  return result_;
}
inline void GM_Challenge_Open_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 roleHP = 2;
inline bool GM_Challenge_Open_Return::has_rolehp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_rolehp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Open_Return::clear_has_rolehp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Open_Return::clear_rolehp() {
  rolehp_ = 0;
  clear_has_rolehp();
}
inline ::google::protobuf::int32 GM_Challenge_Open_Return::rolehp() const {
  return rolehp_;
}
inline void GM_Challenge_Open_Return::set_rolehp(::google::protobuf::int32 value) {
  set_has_rolehp();
  rolehp_ = value;
}

// optional string matchName = 3;
inline bool GM_Challenge_Open_Return::has_matchname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_matchname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Open_Return::clear_has_matchname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Open_Return::clear_matchname() {
  if (matchname_ != &::google::protobuf::internal::kEmptyString) {
    matchname_->clear();
  }
  clear_has_matchname();
}
inline const ::std::string& GM_Challenge_Open_Return::matchname() const {
  return *matchname_;
}
inline void GM_Challenge_Open_Return::set_matchname(const ::std::string& value) {
  set_has_matchname();
  if (matchname_ == &::google::protobuf::internal::kEmptyString) {
    matchname_ = new ::std::string;
  }
  matchname_->assign(value);
}
inline void GM_Challenge_Open_Return::set_matchname(const char* value) {
  set_has_matchname();
  if (matchname_ == &::google::protobuf::internal::kEmptyString) {
    matchname_ = new ::std::string;
  }
  matchname_->assign(value);
}
inline void GM_Challenge_Open_Return::set_matchname(const char* value, size_t size) {
  set_has_matchname();
  if (matchname_ == &::google::protobuf::internal::kEmptyString) {
    matchname_ = new ::std::string;
  }
  matchname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Challenge_Open_Return::mutable_matchname() {
  set_has_matchname();
  if (matchname_ == &::google::protobuf::internal::kEmptyString) {
    matchname_ = new ::std::string;
  }
  return matchname_;
}
inline ::std::string* GM_Challenge_Open_Return::release_matchname() {
  clear_has_matchname();
  if (matchname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matchname_;
    matchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Challenge_Open_Return::set_allocated_matchname(::std::string* matchname) {
  if (matchname_ != &::google::protobuf::internal::kEmptyString) {
    delete matchname_;
  }
  if (matchname) {
    set_has_matchname();
    matchname_ = matchname;
  } else {
    clear_has_matchname();
    matchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 matchlevel = 4;
inline bool GM_Challenge_Open_Return::has_matchlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_matchlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Challenge_Open_Return::clear_has_matchlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Challenge_Open_Return::clear_matchlevel() {
  matchlevel_ = 0;
  clear_has_matchlevel();
}
inline ::google::protobuf::int32 GM_Challenge_Open_Return::matchlevel() const {
  return matchlevel_;
}
inline void GM_Challenge_Open_Return::set_matchlevel(::google::protobuf::int32 value) {
  set_has_matchlevel();
  matchlevel_ = value;
}

// optional int32 matchfightvalue = 5;
inline bool GM_Challenge_Open_Return::has_matchfightvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_matchfightvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Challenge_Open_Return::clear_has_matchfightvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Challenge_Open_Return::clear_matchfightvalue() {
  matchfightvalue_ = 0;
  clear_has_matchfightvalue();
}
inline ::google::protobuf::int32 GM_Challenge_Open_Return::matchfightvalue() const {
  return matchfightvalue_;
}
inline void GM_Challenge_Open_Return::set_matchfightvalue(::google::protobuf::int32 value) {
  set_has_matchfightvalue();
  matchfightvalue_ = value;
}

// optional int32 matchtime = 6;
inline bool GM_Challenge_Open_Return::has_matchtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_matchtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Challenge_Open_Return::clear_has_matchtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Challenge_Open_Return::clear_matchtime() {
  matchtime_ = 0;
  clear_has_matchtime();
}
inline ::google::protobuf::int32 GM_Challenge_Open_Return::matchtime() const {
  return matchtime_;
}
inline void GM_Challenge_Open_Return::set_matchtime(::google::protobuf::int32 value) {
  set_has_matchtime();
  matchtime_ = value;
}

// optional int32 matchprofession = 7;
inline bool GM_Challenge_Open_Return::has_matchprofession() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Challenge_Open_Return::set_has_matchprofession() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Challenge_Open_Return::clear_has_matchprofession() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Challenge_Open_Return::clear_matchprofession() {
  matchprofession_ = 0;
  clear_has_matchprofession();
}
inline ::google::protobuf::int32 GM_Challenge_Open_Return::matchprofession() const {
  return matchprofession_;
}
inline void GM_Challenge_Open_Return::set_matchprofession(::google::protobuf::int32 value) {
  set_has_matchprofession();
  matchprofession_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Choose_Request

// required int32 degree = 1;
inline bool GM_Challenge_Choose_Request::has_degree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Choose_Request::set_has_degree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Choose_Request::clear_has_degree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Choose_Request::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 GM_Challenge_Choose_Request::degree() const {
  return degree_;
}
inline void GM_Challenge_Choose_Request::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Choose_Return

// required int32 result = 1;
inline bool GM_Challenge_Choose_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Choose_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Choose_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Choose_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Choose_Return::result() const {
  return result_;
}
inline void GM_Challenge_Choose_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Reset_Return

// required int32 result = 1;
inline bool GM_Challenge_Reset_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Reset_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Reset_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Reset_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Reset_Return::result() const {
  return result_;
}
inline void GM_Challenge_Reset_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Fortune_Open_Return

// required int32 remaintime = 1;
inline bool GM_Challenge_Fortune_Open_Return::has_remaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Fortune_Open_Return::set_has_remaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Fortune_Open_Return::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Fortune_Open_Return::clear_remaintime() {
  remaintime_ = 0;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 GM_Challenge_Fortune_Open_Return::remaintime() const {
  return remaintime_;
}
inline void GM_Challenge_Fortune_Open_Return::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional .GM_Challenge_Fortune_Info fortuneInfo = 2;
inline bool GM_Challenge_Fortune_Open_Return::has_fortuneinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Fortune_Open_Return::set_has_fortuneinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Fortune_Open_Return::clear_has_fortuneinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Fortune_Open_Return::clear_fortuneinfo() {
  if (fortuneinfo_ != NULL) fortuneinfo_->::GM_Challenge_Fortune_Info::Clear();
  clear_has_fortuneinfo();
}
inline const ::GM_Challenge_Fortune_Info& GM_Challenge_Fortune_Open_Return::fortuneinfo() const {
  return fortuneinfo_ != NULL ? *fortuneinfo_ : *default_instance_->fortuneinfo_;
}
inline ::GM_Challenge_Fortune_Info* GM_Challenge_Fortune_Open_Return::mutable_fortuneinfo() {
  set_has_fortuneinfo();
  if (fortuneinfo_ == NULL) fortuneinfo_ = new ::GM_Challenge_Fortune_Info;
  return fortuneinfo_;
}
inline ::GM_Challenge_Fortune_Info* GM_Challenge_Fortune_Open_Return::release_fortuneinfo() {
  clear_has_fortuneinfo();
  ::GM_Challenge_Fortune_Info* temp = fortuneinfo_;
  fortuneinfo_ = NULL;
  return temp;
}
inline void GM_Challenge_Fortune_Open_Return::set_allocated_fortuneinfo(::GM_Challenge_Fortune_Info* fortuneinfo) {
  delete fortuneinfo_;
  fortuneinfo_ = fortuneinfo;
  if (fortuneinfo) {
    set_has_fortuneinfo();
  } else {
    clear_has_fortuneinfo();
  }
}

// -------------------------------------------------------------------

// GM_Challenge_Reset_Fortune_Return

// required int32 result = 1;
inline bool GM_Challenge_Reset_Fortune_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Reset_Fortune_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Reset_Fortune_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Reset_Fortune_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Reset_Fortune_Return::result() const {
  return result_;
}
inline void GM_Challenge_Reset_Fortune_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 remaintime = 2;
inline bool GM_Challenge_Reset_Fortune_Return::has_remaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Reset_Fortune_Return::set_has_remaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Reset_Fortune_Return::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Reset_Fortune_Return::clear_remaintime() {
  remaintime_ = 0;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 GM_Challenge_Reset_Fortune_Return::remaintime() const {
  return remaintime_;
}
inline void GM_Challenge_Reset_Fortune_Return::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional .GM_Challenge_Fortune_Info fortuneInfo = 8;
inline bool GM_Challenge_Reset_Fortune_Return::has_fortuneinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Reset_Fortune_Return::set_has_fortuneinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Reset_Fortune_Return::clear_has_fortuneinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Reset_Fortune_Return::clear_fortuneinfo() {
  if (fortuneinfo_ != NULL) fortuneinfo_->::GM_Challenge_Fortune_Info::Clear();
  clear_has_fortuneinfo();
}
inline const ::GM_Challenge_Fortune_Info& GM_Challenge_Reset_Fortune_Return::fortuneinfo() const {
  return fortuneinfo_ != NULL ? *fortuneinfo_ : *default_instance_->fortuneinfo_;
}
inline ::GM_Challenge_Fortune_Info* GM_Challenge_Reset_Fortune_Return::mutable_fortuneinfo() {
  set_has_fortuneinfo();
  if (fortuneinfo_ == NULL) fortuneinfo_ = new ::GM_Challenge_Fortune_Info;
  return fortuneinfo_;
}
inline ::GM_Challenge_Fortune_Info* GM_Challenge_Reset_Fortune_Return::release_fortuneinfo() {
  clear_has_fortuneinfo();
  ::GM_Challenge_Fortune_Info* temp = fortuneinfo_;
  fortuneinfo_ = NULL;
  return temp;
}
inline void GM_Challenge_Reset_Fortune_Return::set_allocated_fortuneinfo(::GM_Challenge_Fortune_Info* fortuneinfo) {
  delete fortuneinfo_;
  fortuneinfo_ = fortuneinfo;
  if (fortuneinfo) {
    set_has_fortuneinfo();
  } else {
    clear_has_fortuneinfo();
  }
}

// -------------------------------------------------------------------

// GM_Challenge_Fortune_Info

// required int32 fbtypeid = 1;
inline bool GM_Challenge_Fortune_Info::has_fbtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Fortune_Info::set_has_fbtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Fortune_Info::clear_has_fbtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Fortune_Info::clear_fbtypeid() {
  fbtypeid_ = 0;
  clear_has_fbtypeid();
}
inline ::google::protobuf::int32 GM_Challenge_Fortune_Info::fbtypeid() const {
  return fbtypeid_;
}
inline void GM_Challenge_Fortune_Info::set_fbtypeid(::google::protobuf::int32 value) {
  set_has_fbtypeid();
  fbtypeid_ = value;
}

// required int32 role_fortune = 2;
inline bool GM_Challenge_Fortune_Info::has_role_fortune() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Fortune_Info::set_has_role_fortune() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Fortune_Info::clear_has_role_fortune() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Fortune_Info::clear_role_fortune() {
  role_fortune_ = 0;
  clear_has_role_fortune();
}
inline ::google::protobuf::int32 GM_Challenge_Fortune_Info::role_fortune() const {
  return role_fortune_;
}
inline void GM_Challenge_Fortune_Info::set_role_fortune(::google::protobuf::int32 value) {
  set_has_role_fortune();
  role_fortune_ = value;
}

// required int32 pet_fortune = 3;
inline bool GM_Challenge_Fortune_Info::has_pet_fortune() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Fortune_Info::set_has_pet_fortune() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Fortune_Info::clear_has_pet_fortune() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Fortune_Info::clear_pet_fortune() {
  pet_fortune_ = 0;
  clear_has_pet_fortune();
}
inline ::google::protobuf::int32 GM_Challenge_Fortune_Info::pet_fortune() const {
  return pet_fortune_;
}
inline void GM_Challenge_Fortune_Info::set_pet_fortune(::google::protobuf::int32 value) {
  set_has_pet_fortune();
  pet_fortune_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Start_Return

// required int32 result = 1;
inline bool GM_Challenge_Start_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Start_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Start_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Start_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Start_Return::result() const {
  return result_;
}
inline void GM_Challenge_Start_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Ready_Return

// required int32 result = 1;
inline bool GM_Challenge_Ready_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Ready_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Ready_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Ready_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Ready_Return::result() const {
  return result_;
}
inline void GM_Challenge_Ready_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .GM_Challenge_Pet_Info data = 2;
inline int GM_Challenge_Ready_Return::data_size() const {
  return data_.size();
}
inline void GM_Challenge_Ready_Return::clear_data() {
  data_.Clear();
}
inline const ::GM_Challenge_Pet_Info& GM_Challenge_Ready_Return::data(int index) const {
  return data_.Get(index);
}
inline ::GM_Challenge_Pet_Info* GM_Challenge_Ready_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GM_Challenge_Pet_Info* GM_Challenge_Ready_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Pet_Info >&
GM_Challenge_Ready_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Pet_Info >*
GM_Challenge_Ready_Return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GM_Challenge_Pet_Info

// required int32 roleid = 1;
inline bool GM_Challenge_Pet_Info::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Pet_Info::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Pet_Info::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Pet_Info::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_Challenge_Pet_Info::roleid() const {
  return roleid_;
}
inline void GM_Challenge_Pet_Info::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int64 gmid = 2;
inline bool GM_Challenge_Pet_Info::has_gmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Pet_Info::set_has_gmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Pet_Info::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Pet_Info::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_Pet_Info::gmid() const {
  return gmid_;
}
inline void GM_Challenge_Pet_Info::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 hpdecrease = 3;
inline bool GM_Challenge_Pet_Info::has_hpdecrease() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Pet_Info::set_has_hpdecrease() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Pet_Info::clear_has_hpdecrease() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Pet_Info::clear_hpdecrease() {
  hpdecrease_ = 0;
  clear_has_hpdecrease();
}
inline ::google::protobuf::int32 GM_Challenge_Pet_Info::hpdecrease() const {
  return hpdecrease_;
}
inline void GM_Challenge_Pet_Info::set_hpdecrease(::google::protobuf::int32 value) {
  set_has_hpdecrease();
  hpdecrease_ = value;
}

// optional int32 ownerid = 4;
inline bool GM_Challenge_Pet_Info::has_ownerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Challenge_Pet_Info::set_has_ownerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Challenge_Pet_Info::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Challenge_Pet_Info::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 GM_Challenge_Pet_Info::ownerid() const {
  return ownerid_;
}
inline void GM_Challenge_Pet_Info::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 onbattle = 5;
inline bool GM_Challenge_Pet_Info::has_onbattle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Challenge_Pet_Info::set_has_onbattle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Challenge_Pet_Info::clear_has_onbattle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Challenge_Pet_Info::clear_onbattle() {
  onbattle_ = 0;
  clear_has_onbattle();
}
inline ::google::protobuf::int32 GM_Challenge_Pet_Info::onbattle() const {
  return onbattle_;
}
inline void GM_Challenge_Pet_Info::set_onbattle(::google::protobuf::int32 value) {
  set_has_onbattle();
  onbattle_ = value;
}

// optional int32 petid = 6;
inline bool GM_Challenge_Pet_Info::has_petid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Challenge_Pet_Info::set_has_petid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Challenge_Pet_Info::clear_has_petid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Challenge_Pet_Info::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 GM_Challenge_Pet_Info::petid() const {
  return petid_;
}
inline void GM_Challenge_Pet_Info::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Proof_Notify

// required int32 proof = 1;
inline bool GM_Challenge_Proof_Notify::has_proof() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Proof_Notify::set_has_proof() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Proof_Notify::clear_has_proof() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Proof_Notify::clear_proof() {
  proof_ = 0;
  clear_has_proof();
}
inline ::google::protobuf::int32 GM_Challenge_Proof_Notify::proof() const {
  return proof_;
}
inline void GM_Challenge_Proof_Notify::set_proof(::google::protobuf::int32 value) {
  set_has_proof();
  proof_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Store_Open_Return

// required int32 proof = 1;
inline bool GM_Challenge_Store_Open_Return::has_proof() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Store_Open_Return::set_has_proof() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Store_Open_Return::clear_has_proof() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Store_Open_Return::clear_proof() {
  proof_ = 0;
  clear_has_proof();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Open_Return::proof() const {
  return proof_;
}
inline void GM_Challenge_Store_Open_Return::set_proof(::google::protobuf::int32 value) {
  set_has_proof();
  proof_ = value;
}

// repeated .GM_Challenge_Store_Object data = 2;
inline int GM_Challenge_Store_Open_Return::data_size() const {
  return data_.size();
}
inline void GM_Challenge_Store_Open_Return::clear_data() {
  data_.Clear();
}
inline const ::GM_Challenge_Store_Object& GM_Challenge_Store_Open_Return::data(int index) const {
  return data_.Get(index);
}
inline ::GM_Challenge_Store_Object* GM_Challenge_Store_Open_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GM_Challenge_Store_Object* GM_Challenge_Store_Open_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Store_Object >&
GM_Challenge_Store_Open_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_Store_Object >*
GM_Challenge_Store_Open_Return::mutable_data() {
  return &data_;
}

// optional int32 resetcost = 3;
inline bool GM_Challenge_Store_Open_Return::has_resetcost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Store_Open_Return::set_has_resetcost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Store_Open_Return::clear_has_resetcost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Store_Open_Return::clear_resetcost() {
  resetcost_ = 0;
  clear_has_resetcost();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Open_Return::resetcost() const {
  return resetcost_;
}
inline void GM_Challenge_Store_Open_Return::set_resetcost(::google::protobuf::int32 value) {
  set_has_resetcost();
  resetcost_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Store_Object

// required int32 objectid = 1;
inline bool GM_Challenge_Store_Object::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Store_Object::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Store_Object::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Store_Object::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Object::objectid() const {
  return objectid_;
}
inline void GM_Challenge_Store_Object::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// required int32 remaindercount = 2;
inline bool GM_Challenge_Store_Object::has_remaindercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Store_Object::set_has_remaindercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Store_Object::clear_has_remaindercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Store_Object::clear_remaindercount() {
  remaindercount_ = 0;
  clear_has_remaindercount();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Object::remaindercount() const {
  return remaindercount_;
}
inline void GM_Challenge_Store_Object::set_remaindercount(::google::protobuf::int32 value) {
  set_has_remaindercount();
  remaindercount_ = value;
}

// required int32 costnum = 3;
inline bool GM_Challenge_Store_Object::has_costnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Store_Object::set_has_costnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Store_Object::clear_has_costnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Store_Object::clear_costnum() {
  costnum_ = 0;
  clear_has_costnum();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Object::costnum() const {
  return costnum_;
}
inline void GM_Challenge_Store_Object::set_costnum(::google::protobuf::int32 value) {
  set_has_costnum();
  costnum_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Store_Reset_Return

// required int32 result = 1;
inline bool GM_Challenge_Store_Reset_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Store_Reset_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Store_Reset_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Store_Reset_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Reset_Return::result() const {
  return result_;
}
inline void GM_Challenge_Store_Reset_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 proof = 2;
inline bool GM_Challenge_Store_Reset_Return::has_proof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Store_Reset_Return::set_has_proof() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Store_Reset_Return::clear_has_proof() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Store_Reset_Return::clear_proof() {
  proof_ = 0;
  clear_has_proof();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Reset_Return::proof() const {
  return proof_;
}
inline void GM_Challenge_Store_Reset_Return::set_proof(::google::protobuf::int32 value) {
  set_has_proof();
  proof_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Store_Buy_Return

// required int32 objectid = 1;
inline bool GM_Challenge_Store_Buy_Return::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Store_Buy_Return::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Store_Buy_Return::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Store_Buy_Return::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Buy_Return::objectid() const {
  return objectid_;
}
inline void GM_Challenge_Store_Buy_Return::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_Store_Buy_Result

// required int32 result = 1;
inline bool GM_Challenge_Store_Buy_Result::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_Store_Buy_Result::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_Store_Buy_Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_Store_Buy_Result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Buy_Result::result() const {
  return result_;
}
inline void GM_Challenge_Store_Buy_Result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 objectid = 2;
inline bool GM_Challenge_Store_Buy_Result::has_objectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_Store_Buy_Result::set_has_objectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_Store_Buy_Result::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_Store_Buy_Result::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Buy_Result::objectid() const {
  return objectid_;
}
inline void GM_Challenge_Store_Buy_Result::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// required int32 proof = 3;
inline bool GM_Challenge_Store_Buy_Result::has_proof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_Store_Buy_Result::set_has_proof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_Store_Buy_Result::clear_has_proof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_Store_Buy_Result::clear_proof() {
  proof_ = 0;
  clear_has_proof();
}
inline ::google::protobuf::int32 GM_Challenge_Store_Buy_Result::proof() const {
  return proof_;
}
inline void GM_Challenge_Store_Buy_Result::set_proof(::google::protobuf::int32 value) {
  set_has_proof();
  proof_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_OnBattle

// required int64 gmid = 1;
inline bool GM_Challenge_OnBattle::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_OnBattle::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_OnBattle::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_OnBattle::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_OnBattle::gmid() const {
  return gmid_;
}
inline void GM_Challenge_OnBattle::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 battleHole = 2;
inline bool GM_Challenge_OnBattle::has_battlehole() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_OnBattle::set_has_battlehole() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_OnBattle::clear_has_battlehole() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_OnBattle::clear_battlehole() {
  battlehole_ = 0;
  clear_has_battlehole();
}
inline ::google::protobuf::int32 GM_Challenge_OnBattle::battlehole() const {
  return battlehole_;
}
inline void GM_Challenge_OnBattle::set_battlehole(::google::protobuf::int32 value) {
  set_has_battlehole();
  battlehole_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_OnBattle_Return

// required int32 result = 1;
inline bool GM_Challenge_OnBattle_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_OnBattle_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_OnBattle_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_OnBattle_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_OnBattle_Return::result() const {
  return result_;
}
inline void GM_Challenge_OnBattle_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 battleHole = 2;
inline bool GM_Challenge_OnBattle_Return::has_battlehole() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_OnBattle_Return::set_has_battlehole() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_OnBattle_Return::clear_has_battlehole() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_OnBattle_Return::clear_battlehole() {
  battlehole_ = 0;
  clear_has_battlehole();
}
inline ::google::protobuf::int32 GM_Challenge_OnBattle_Return::battlehole() const {
  return battlehole_;
}
inline void GM_Challenge_OnBattle_Return::set_battlehole(::google::protobuf::int32 value) {
  set_has_battlehole();
  battlehole_ = value;
}

// repeated .GM_Challenge_OnBattle dataInfo = 3;
inline int GM_Challenge_OnBattle_Return::datainfo_size() const {
  return datainfo_.size();
}
inline void GM_Challenge_OnBattle_Return::clear_datainfo() {
  datainfo_.Clear();
}
inline const ::GM_Challenge_OnBattle& GM_Challenge_OnBattle_Return::datainfo(int index) const {
  return datainfo_.Get(index);
}
inline ::GM_Challenge_OnBattle* GM_Challenge_OnBattle_Return::mutable_datainfo(int index) {
  return datainfo_.Mutable(index);
}
inline ::GM_Challenge_OnBattle* GM_Challenge_OnBattle_Return::add_datainfo() {
  return datainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_OnBattle >&
GM_Challenge_OnBattle_Return::datainfo() const {
  return datainfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_OnBattle >*
GM_Challenge_OnBattle_Return::mutable_datainfo() {
  return &datainfo_;
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Return

// required int32 result = 1;
inline bool GM_Challenge_RentPet_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Return::result() const {
  return result_;
}
inline void GM_Challenge_RentPet_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 gmid = 2;
inline bool GM_Challenge_RentPet_Return::has_gmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_RentPet_Return::set_has_gmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_RentPet_Return::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_RentPet_Return::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_RentPet_Return::gmid() const {
  return gmid_;
}
inline void GM_Challenge_RentPet_Return::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 money = 4;
inline bool GM_Challenge_RentPet_Return::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_RentPet_Return::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_RentPet_Return::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_RentPet_Return::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Return::money() const {
  return money_;
}
inline void GM_Challenge_RentPet_Return::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Rent_Request

// required int64 gmid = 1;
inline bool GM_Challenge_RentPet_Rent_Request::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Rent_Request::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Rent_Request::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Rent_Request::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_RentPet_Rent_Request::gmid() const {
  return gmid_;
}
inline void GM_Challenge_RentPet_Rent_Request::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// required int32 operate = 2;
inline bool GM_Challenge_RentPet_Rent_Request::has_operate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_RentPet_Rent_Request::set_has_operate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_RentPet_Rent_Request::clear_has_operate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_RentPet_Rent_Request::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Rent_Request::operate() const {
  return operate_;
}
inline void GM_Challenge_RentPet_Rent_Request::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Rent_Return

// required int32 result = 1;
inline bool GM_Challenge_RentPet_Rent_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Rent_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Rent_Return::result() const {
  return result_;
}
inline void GM_Challenge_RentPet_Rent_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 gmid = 2;
inline bool GM_Challenge_RentPet_Rent_Return::has_gmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_RentPet_Rent_Return::set_has_gmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_RentPet_Rent_Return::gmid() const {
  return gmid_;
}
inline void GM_Challenge_RentPet_Rent_Return::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// required int32 operate = 3;
inline bool GM_Challenge_RentPet_Rent_Return::has_operate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_RentPet_Rent_Return::set_has_operate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_has_operate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Rent_Return::operate() const {
  return operate_;
}
inline void GM_Challenge_RentPet_Rent_Return::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
}

// optional int32 money = 4;
inline bool GM_Challenge_RentPet_Rent_Return::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Challenge_RentPet_Rent_Return::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Challenge_RentPet_Rent_Return::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Rent_Return::money() const {
  return money_;
}
inline void GM_Challenge_RentPet_Rent_Return::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Open_Return

// required int32 result = 1;
inline bool GM_Challenge_RentPet_Open_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Open_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Open_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Open_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Open_Return::result() const {
  return result_;
}
inline void GM_Challenge_RentPet_Open_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 count = 2;
inline bool GM_Challenge_RentPet_Open_Return::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_RentPet_Open_Return::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_RentPet_Open_Return::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_RentPet_Open_Return::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Open_Return::count() const {
  return count_;
}
inline void GM_Challenge_RentPet_Open_Return::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_Challenge_RentPet_Info data = 3;
inline int GM_Challenge_RentPet_Open_Return::data_size() const {
  return data_.size();
}
inline void GM_Challenge_RentPet_Open_Return::clear_data() {
  data_.Clear();
}
inline const ::GM_Challenge_RentPet_Info& GM_Challenge_RentPet_Open_Return::data(int index) const {
  return data_.Get(index);
}
inline ::GM_Challenge_RentPet_Info* GM_Challenge_RentPet_Open_Return::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::GM_Challenge_RentPet_Info* GM_Challenge_RentPet_Open_Return::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_RentPet_Info >&
GM_Challenge_RentPet_Open_Return::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_RentPet_Info >*
GM_Challenge_RentPet_Open_Return::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Info

// required int64 gmid = 1;
inline bool GM_Challenge_RentPet_Info::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Info::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Info::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Info::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_RentPet_Info::gmid() const {
  return gmid_;
}
inline void GM_Challenge_RentPet_Info::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional int32 petid = 2;
inline bool GM_Challenge_RentPet_Info::has_petid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_RentPet_Info::set_has_petid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_RentPet_Info::clear_has_petid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_RentPet_Info::clear_petid() {
  petid_ = 0;
  clear_has_petid();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Info::petid() const {
  return petid_;
}
inline void GM_Challenge_RentPet_Info::set_petid(::google::protobuf::int32 value) {
  set_has_petid();
  petid_ = value;
}

// optional int32 level = 3;
inline bool GM_Challenge_RentPet_Info::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_RentPet_Info::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_RentPet_Info::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_RentPet_Info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Info::level() const {
  return level_;
}
inline void GM_Challenge_RentPet_Info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 evolve = 4;
inline bool GM_Challenge_RentPet_Info::has_evolve() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Challenge_RentPet_Info::set_has_evolve() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Challenge_RentPet_Info::clear_has_evolve() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Challenge_RentPet_Info::clear_evolve() {
  evolve_ = 0;
  clear_has_evolve();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Info::evolve() const {
  return evolve_;
}
inline void GM_Challenge_RentPet_Info::set_evolve(::google::protobuf::int32 value) {
  set_has_evolve();
  evolve_ = value;
}

// optional int32 money = 5;
inline bool GM_Challenge_RentPet_Info::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Challenge_RentPet_Info::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Challenge_RentPet_Info::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Challenge_RentPet_Info::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Info::money() const {
  return money_;
}
inline void GM_Challenge_RentPet_Info::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional string ownerName = 6;
inline bool GM_Challenge_RentPet_Info::has_ownername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Challenge_RentPet_Info::set_has_ownername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Challenge_RentPet_Info::clear_has_ownername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Challenge_RentPet_Info::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& GM_Challenge_RentPet_Info::ownername() const {
  return *ownername_;
}
inline void GM_Challenge_RentPet_Info::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void GM_Challenge_RentPet_Info::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void GM_Challenge_RentPet_Info::set_ownername(const char* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Challenge_RentPet_Info::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* GM_Challenge_RentPet_Info::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Challenge_RentPet_Info::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Hire_Request

// required int64 gmid = 1;
inline bool GM_Challenge_RentPet_Hire_Request::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Hire_Request::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Hire_Request::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Hire_Request::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_RentPet_Hire_Request::gmid() const {
  return gmid_;
}
inline void GM_Challenge_RentPet_Hire_Request::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_RentPet_Hire_Return

// required int32 result = 1;
inline bool GM_Challenge_RentPet_Hire_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_RentPet_Hire_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_RentPet_Hire_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_RentPet_Hire_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_RentPet_Hire_Return::result() const {
  return result_;
}
inline void GM_Challenge_RentPet_Hire_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 gmid = 2;
inline bool GM_Challenge_RentPet_Hire_Return::has_gmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_RentPet_Hire_Return::set_has_gmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_RentPet_Hire_Return::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_RentPet_Hire_Return::clear_gmid() {
  gmid_ = GOOGLE_LONGLONG(0);
  clear_has_gmid();
}
inline ::google::protobuf::int64 GM_Challenge_RentPet_Hire_Return::gmid() const {
  return gmid_;
}
inline void GM_Challenge_RentPet_Hire_Return::set_gmid(::google::protobuf::int64 value) {
  set_has_gmid();
  gmid_ = value;
}

// optional .GM_Challenge_Pet_Info data = 3;
inline bool GM_Challenge_RentPet_Hire_Return::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_RentPet_Hire_Return::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_RentPet_Hire_Return::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_RentPet_Hire_Return::clear_data() {
  if (data_ != NULL) data_->::GM_Challenge_Pet_Info::Clear();
  clear_has_data();
}
inline const ::GM_Challenge_Pet_Info& GM_Challenge_RentPet_Hire_Return::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::GM_Challenge_Pet_Info* GM_Challenge_RentPet_Hire_Return::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::GM_Challenge_Pet_Info;
  return data_;
}
inline ::GM_Challenge_Pet_Info* GM_Challenge_RentPet_Hire_Return::release_data() {
  clear_has_data();
  ::GM_Challenge_Pet_Info* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GM_Challenge_RentPet_Hire_Return::set_allocated_data(::GM_Challenge_Pet_Info* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// GM_Challenge_SwitchCardItem

// required int32 pos = 1;
inline bool GM_Challenge_SwitchCardItem::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_SwitchCardItem::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_SwitchCardItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_SwitchCardItem::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 GM_Challenge_SwitchCardItem::pos() const {
  return pos_;
}
inline void GM_Challenge_SwitchCardItem::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// required int32 objectid = 2;
inline bool GM_Challenge_SwitchCardItem::has_objectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_SwitchCardItem::set_has_objectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_SwitchCardItem::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_SwitchCardItem::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 GM_Challenge_SwitchCardItem::objectid() const {
  return objectid_;
}
inline void GM_Challenge_SwitchCardItem::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// required int32 objectnum = 3;
inline bool GM_Challenge_SwitchCardItem::has_objectnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Challenge_SwitchCardItem::set_has_objectnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Challenge_SwitchCardItem::clear_has_objectnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Challenge_SwitchCardItem::clear_objectnum() {
  objectnum_ = 0;
  clear_has_objectnum();
}
inline ::google::protobuf::int32 GM_Challenge_SwitchCardItem::objectnum() const {
  return objectnum_;
}
inline void GM_Challenge_SwitchCardItem::set_objectnum(::google::protobuf::int32 value) {
  set_has_objectnum();
  objectnum_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_SwitchCard_Request

// required int32 pos = 1;
inline bool GM_Challenge_SwitchCard_Request::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_SwitchCard_Request::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_SwitchCard_Request::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_SwitchCard_Request::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 GM_Challenge_SwitchCard_Request::pos() const {
  return pos_;
}
inline void GM_Challenge_SwitchCard_Request::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// GM_Challenge_SwitchCard_Return

// required int32 result = 1;
inline bool GM_Challenge_SwitchCard_Return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Challenge_SwitchCard_Return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Challenge_SwitchCard_Return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Challenge_SwitchCard_Return::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GM_Challenge_SwitchCard_Return::result() const {
  return result_;
}
inline void GM_Challenge_SwitchCard_Return::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 pos = 2;
inline bool GM_Challenge_SwitchCard_Return::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Challenge_SwitchCard_Return::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Challenge_SwitchCard_Return::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Challenge_SwitchCard_Return::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 GM_Challenge_SwitchCard_Return::pos() const {
  return pos_;
}
inline void GM_Challenge_SwitchCard_Return::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// repeated .GM_Challenge_SwitchCardItem item = 3;
inline int GM_Challenge_SwitchCard_Return::item_size() const {
  return item_.size();
}
inline void GM_Challenge_SwitchCard_Return::clear_item() {
  item_.Clear();
}
inline const ::GM_Challenge_SwitchCardItem& GM_Challenge_SwitchCard_Return::item(int index) const {
  return item_.Get(index);
}
inline ::GM_Challenge_SwitchCardItem* GM_Challenge_SwitchCard_Return::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::GM_Challenge_SwitchCardItem* GM_Challenge_SwitchCard_Return::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Challenge_SwitchCardItem >&
GM_Challenge_SwitchCard_Return::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Challenge_SwitchCardItem >*
GM_Challenge_SwitchCard_Return::mutable_item() {
  return &item_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_challenge_2etxt__INCLUDED
