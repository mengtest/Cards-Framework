// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recharge.txt

#ifndef PROTOBUF_recharge_2etxt__INCLUDED
#define PROTOBUF_recharge_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_recharge_2etxt();
void protobuf_AssignDesc_recharge_2etxt();
void protobuf_ShutdownFile_recharge_2etxt();

class GM_Recharge_Data;
class GM_Recharge_Open;
class GM_Recharge_Open_Return;
class GM_Shop_Walfare_Return;
class GM_Shop_Walfare_Data;
class GM_Shop_Single_Walfare_Request;
class GM_Single_Walfare_buy_Return;
class GM_Goods_Detail;
class GM_Shop_Single_Walfare_Retrun;
class GM_Single_Walfare_Data;
class GM_Shop_Object_Return;
class GM_Shop_Object_Data;
class GM_Shop_Object_Buy_Request;
class GM_CreateOrder;
class GM_CreateOrder_Return;
class GM_Shop_Obj_Single_Return;
class GM_Shop_Obj_Single_Data;
class GM_Recharge_Over;
class GM_Recharge_Over_Data;
class GM_Single_Object_Return;
class GM_GET_ZYOrder_Request;
class GM_GET_ZYOrder_Return;

// ===================================================================

class GM_Recharge_Data : public ::google::protobuf::Message {
 public:
  GM_Recharge_Data();
  virtual ~GM_Recharge_Data();

  GM_Recharge_Data(const GM_Recharge_Data& from);

  inline GM_Recharge_Data& operator=(const GM_Recharge_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Recharge_Data& default_instance();

  void Swap(GM_Recharge_Data* other);

  // implements Message ----------------------------------------------

  GM_Recharge_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Recharge_Data& from);
  void MergeFrom(const GM_Recharge_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_goodsid = 1;
  inline bool has_m_goodsid() const;
  inline void clear_m_goodsid();
  static const int kMGoodsidFieldNumber = 1;
  inline ::google::protobuf::int32 m_goodsid() const;
  inline void set_m_goodsid(::google::protobuf::int32 value);

  // optional float m_price = 2;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 2;
  inline float m_price() const;
  inline void set_m_price(float value);

  // optional int32 m_getdamond = 3;
  inline bool has_m_getdamond() const;
  inline void clear_m_getdamond();
  static const int kMGetdamondFieldNumber = 3;
  inline ::google::protobuf::int32 m_getdamond() const;
  inline void set_m_getdamond(::google::protobuf::int32 value);

  // optional int32 m_reward = 4;
  inline bool has_m_reward() const;
  inline void clear_m_reward();
  static const int kMRewardFieldNumber = 4;
  inline ::google::protobuf::int32 m_reward() const;
  inline void set_m_reward(::google::protobuf::int32 value);

  // optional int32 m_limitreward = 5;
  inline bool has_m_limitreward() const;
  inline void clear_m_limitreward();
  static const int kMLimitrewardFieldNumber = 5;
  inline ::google::protobuf::int32 m_limitreward() const;
  inline void set_m_limitreward(::google::protobuf::int32 value);

  // optional int32 m_type = 6;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 6;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_iconid = 7;
  inline bool has_m_iconid() const;
  inline void clear_m_iconid();
  static const int kMIconidFieldNumber = 7;
  inline const ::std::string& m_iconid() const;
  inline void set_m_iconid(const ::std::string& value);
  inline void set_m_iconid(const char* value);
  inline void set_m_iconid(const char* value, size_t size);
  inline ::std::string* mutable_m_iconid();
  inline ::std::string* release_m_iconid();
  inline void set_allocated_m_iconid(::std::string* m_iconid);

  // optional int32 m_limit = 8;
  inline bool has_m_limit() const;
  inline void clear_m_limit();
  static const int kMLimitFieldNumber = 8;
  inline ::google::protobuf::int32 m_limit() const;
  inline void set_m_limit(::google::protobuf::int32 value);

  // optional string m_limit_icon = 9;
  inline bool has_m_limit_icon() const;
  inline void clear_m_limit_icon();
  static const int kMLimitIconFieldNumber = 9;
  inline const ::std::string& m_limit_icon() const;
  inline void set_m_limit_icon(const ::std::string& value);
  inline void set_m_limit_icon(const char* value);
  inline void set_m_limit_icon(const char* value, size_t size);
  inline ::std::string* mutable_m_limit_icon();
  inline ::std::string* release_m_limit_icon();
  inline void set_allocated_m_limit_icon(::std::string* m_limit_icon);

  // optional string m_channel = 10;
  inline bool has_m_channel() const;
  inline void clear_m_channel();
  static const int kMChannelFieldNumber = 10;
  inline const ::std::string& m_channel() const;
  inline void set_m_channel(const ::std::string& value);
  inline void set_m_channel(const char* value);
  inline void set_m_channel(const char* value, size_t size);
  inline ::std::string* mutable_m_channel();
  inline ::std::string* release_m_channel();
  inline void set_allocated_m_channel(::std::string* m_channel);

  // optional int32 m_tag = 11;
  inline bool has_m_tag() const;
  inline void clear_m_tag();
  static const int kMTagFieldNumber = 11;
  inline ::google::protobuf::int32 m_tag() const;
  inline void set_m_tag(::google::protobuf::int32 value);

  // optional int32 m_hot = 12;
  inline bool has_m_hot() const;
  inline void clear_m_hot();
  static const int kMHotFieldNumber = 12;
  inline ::google::protobuf::int32 m_hot() const;
  inline void set_m_hot(::google::protobuf::int32 value);

  // optional string m_objectname = 13;
  inline bool has_m_objectname() const;
  inline void clear_m_objectname();
  static const int kMObjectnameFieldNumber = 13;
  inline const ::std::string& m_objectname() const;
  inline void set_m_objectname(const ::std::string& value);
  inline void set_m_objectname(const char* value);
  inline void set_m_objectname(const char* value, size_t size);
  inline ::std::string* mutable_m_objectname();
  inline ::std::string* release_m_objectname();
  inline void set_allocated_m_objectname(::std::string* m_objectname);

  // @@protoc_insertion_point(class_scope:GM_Recharge_Data)
 private:
  inline void set_has_m_goodsid();
  inline void clear_has_m_goodsid();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_getdamond();
  inline void clear_has_m_getdamond();
  inline void set_has_m_reward();
  inline void clear_has_m_reward();
  inline void set_has_m_limitreward();
  inline void clear_has_m_limitreward();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_iconid();
  inline void clear_has_m_iconid();
  inline void set_has_m_limit();
  inline void clear_has_m_limit();
  inline void set_has_m_limit_icon();
  inline void clear_has_m_limit_icon();
  inline void set_has_m_channel();
  inline void clear_has_m_channel();
  inline void set_has_m_tag();
  inline void clear_has_m_tag();
  inline void set_has_m_hot();
  inline void clear_has_m_hot();
  inline void set_has_m_objectname();
  inline void clear_has_m_objectname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_goodsid_;
  float m_price_;
  ::google::protobuf::int32 m_getdamond_;
  ::google::protobuf::int32 m_reward_;
  ::google::protobuf::int32 m_limitreward_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_iconid_;
  ::std::string* m_limit_icon_;
  ::google::protobuf::int32 m_limit_;
  ::google::protobuf::int32 m_tag_;
  ::std::string* m_channel_;
  ::std::string* m_objectname_;
  ::google::protobuf::int32 m_hot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Recharge_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Recharge_Open : public ::google::protobuf::Message {
 public:
  GM_Recharge_Open();
  virtual ~GM_Recharge_Open();

  GM_Recharge_Open(const GM_Recharge_Open& from);

  inline GM_Recharge_Open& operator=(const GM_Recharge_Open& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Recharge_Open& default_instance();

  void Swap(GM_Recharge_Open* other);

  // implements Message ----------------------------------------------

  GM_Recharge_Open* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Recharge_Open& from);
  void MergeFrom(const GM_Recharge_Open& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_channel = 1;
  inline bool has_m_channel() const;
  inline void clear_m_channel();
  static const int kMChannelFieldNumber = 1;
  inline const ::std::string& m_channel() const;
  inline void set_m_channel(const ::std::string& value);
  inline void set_m_channel(const char* value);
  inline void set_m_channel(const char* value, size_t size);
  inline ::std::string* mutable_m_channel();
  inline ::std::string* release_m_channel();
  inline void set_allocated_m_channel(::std::string* m_channel);

  // @@protoc_insertion_point(class_scope:GM_Recharge_Open)
 private:
  inline void set_has_m_channel();
  inline void clear_has_m_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Recharge_Open* default_instance_;
};
// -------------------------------------------------------------------

class GM_Recharge_Open_Return : public ::google::protobuf::Message {
 public:
  GM_Recharge_Open_Return();
  virtual ~GM_Recharge_Open_Return();

  GM_Recharge_Open_Return(const GM_Recharge_Open_Return& from);

  inline GM_Recharge_Open_Return& operator=(const GM_Recharge_Open_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Recharge_Open_Return& default_instance();

  void Swap(GM_Recharge_Open_Return* other);

  // implements Message ----------------------------------------------

  GM_Recharge_Open_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Recharge_Open_Return& from);
  void MergeFrom(const GM_Recharge_Open_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_Recharge_Data m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::GM_Recharge_Data& m_data(int index) const;
  inline ::GM_Recharge_Data* mutable_m_data(int index);
  inline ::GM_Recharge_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Data >*
      mutable_m_data();

  // required int32 m_card30_time = 2;
  inline bool has_m_card30_time() const;
  inline void clear_m_card30_time();
  static const int kMCard30TimeFieldNumber = 2;
  inline ::google::protobuf::int32 m_card30_time() const;
  inline void set_m_card30_time(::google::protobuf::int32 value);

  // required int32 m_state = 3;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 3;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Recharge_Open_Return)
 private:
  inline void set_has_m_card30_time();
  inline void clear_has_m_card30_time();
  inline void set_has_m_state();
  inline void clear_has_m_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Data > m_data_;
  ::google::protobuf::int32 m_card30_time_;
  ::google::protobuf::int32 m_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Recharge_Open_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Walfare_Return : public ::google::protobuf::Message {
 public:
  GM_Shop_Walfare_Return();
  virtual ~GM_Shop_Walfare_Return();

  GM_Shop_Walfare_Return(const GM_Shop_Walfare_Return& from);

  inline GM_Shop_Walfare_Return& operator=(const GM_Shop_Walfare_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Walfare_Return& default_instance();

  void Swap(GM_Shop_Walfare_Return* other);

  // implements Message ----------------------------------------------

  GM_Shop_Walfare_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Walfare_Return& from);
  void MergeFrom(const GM_Shop_Walfare_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_Shop_Walfare_Data m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::GM_Shop_Walfare_Data& m_data(int index) const;
  inline ::GM_Shop_Walfare_Data* mutable_m_data(int index);
  inline ::GM_Shop_Walfare_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Shop_Walfare_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Shop_Walfare_Data >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:GM_Shop_Walfare_Return)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Shop_Walfare_Data > m_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Walfare_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Walfare_Data : public ::google::protobuf::Message {
 public:
  GM_Shop_Walfare_Data();
  virtual ~GM_Shop_Walfare_Data();

  GM_Shop_Walfare_Data(const GM_Shop_Walfare_Data& from);

  inline GM_Shop_Walfare_Data& operator=(const GM_Shop_Walfare_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Walfare_Data& default_instance();

  void Swap(GM_Shop_Walfare_Data* other);

  // implements Message ----------------------------------------------

  GM_Shop_Walfare_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Walfare_Data& from);
  void MergeFrom(const GM_Shop_Walfare_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_objectid = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // optional int32 m_cost_price = 2;
  inline bool has_m_cost_price() const;
  inline void clear_m_cost_price();
  static const int kMCostPriceFieldNumber = 2;
  inline ::google::protobuf::int32 m_cost_price() const;
  inline void set_m_cost_price(::google::protobuf::int32 value);

  // optional int32 m_cutprice = 3;
  inline bool has_m_cutprice() const;
  inline void clear_m_cutprice();
  static const int kMCutpriceFieldNumber = 3;
  inline ::google::protobuf::int32 m_cutprice() const;
  inline void set_m_cutprice(::google::protobuf::int32 value);

  // optional int32 m_vip_limit = 4;
  inline bool has_m_vip_limit() const;
  inline void clear_m_vip_limit();
  static const int kMVipLimitFieldNumber = 4;
  inline ::google::protobuf::int32 m_vip_limit() const;
  inline void set_m_vip_limit(::google::protobuf::int32 value);

  // optional int32 m_person_limit = 5;
  inline bool has_m_person_limit() const;
  inline void clear_m_person_limit();
  static const int kMPersonLimitFieldNumber = 5;
  inline ::google::protobuf::int32 m_person_limit() const;
  inline void set_m_person_limit(::google::protobuf::int32 value);

  // optional int32 m_person_count = 6;
  inline bool has_m_person_count() const;
  inline void clear_m_person_count();
  static const int kMPersonCountFieldNumber = 6;
  inline ::google::protobuf::int32 m_person_count() const;
  inline void set_m_person_count(::google::protobuf::int32 value);

  // optional int32 m_server_limit = 7;
  inline bool has_m_server_limit() const;
  inline void clear_m_server_limit();
  static const int kMServerLimitFieldNumber = 7;
  inline ::google::protobuf::int32 m_server_limit() const;
  inline void set_m_server_limit(::google::protobuf::int32 value);

  // optional int32 m_server_count = 8;
  inline bool has_m_server_count() const;
  inline void clear_m_server_count();
  static const int kMServerCountFieldNumber = 8;
  inline ::google::protobuf::int32 m_server_count() const;
  inline void set_m_server_count(::google::protobuf::int32 value);

  // optional string m_descripte_1 = 9;
  inline bool has_m_descripte_1() const;
  inline void clear_m_descripte_1();
  static const int kMDescripte1FieldNumber = 9;
  inline const ::std::string& m_descripte_1() const;
  inline void set_m_descripte_1(const ::std::string& value);
  inline void set_m_descripte_1(const char* value);
  inline void set_m_descripte_1(const char* value, size_t size);
  inline ::std::string* mutable_m_descripte_1();
  inline ::std::string* release_m_descripte_1();
  inline void set_allocated_m_descripte_1(::std::string* m_descripte_1);

  // optional string m_object_name = 10;
  inline bool has_m_object_name() const;
  inline void clear_m_object_name();
  static const int kMObjectNameFieldNumber = 10;
  inline const ::std::string& m_object_name() const;
  inline void set_m_object_name(const ::std::string& value);
  inline void set_m_object_name(const char* value);
  inline void set_m_object_name(const char* value, size_t size);
  inline ::std::string* mutable_m_object_name();
  inline ::std::string* release_m_object_name();
  inline void set_allocated_m_object_name(::std::string* m_object_name);

  // optional string m_object_icon = 11;
  inline bool has_m_object_icon() const;
  inline void clear_m_object_icon();
  static const int kMObjectIconFieldNumber = 11;
  inline const ::std::string& m_object_icon() const;
  inline void set_m_object_icon(const ::std::string& value);
  inline void set_m_object_icon(const char* value);
  inline void set_m_object_icon(const char* value, size_t size);
  inline ::std::string* mutable_m_object_icon();
  inline ::std::string* release_m_object_icon();
  inline void set_allocated_m_object_icon(::std::string* m_object_icon);

  // optional int32 m_color = 12;
  inline bool has_m_color() const;
  inline void clear_m_color();
  static const int kMColorFieldNumber = 12;
  inline ::google::protobuf::int32 m_color() const;
  inline void set_m_color(::google::protobuf::int32 value);

  // optional int32 m_bag_type = 13;
  inline bool has_m_bag_type() const;
  inline void clear_m_bag_type();
  static const int kMBagTypeFieldNumber = 13;
  inline ::google::protobuf::int32 m_bag_type() const;
  inline void set_m_bag_type(::google::protobuf::int32 value);

  // optional int32 m_object_type = 14;
  inline bool has_m_object_type() const;
  inline void clear_m_object_type();
  static const int kMObjectTypeFieldNumber = 14;
  inline ::google::protobuf::int32 m_object_type() const;
  inline void set_m_object_type(::google::protobuf::int32 value);

  // optional int32 m_profession = 15;
  inline bool has_m_profession() const;
  inline void clear_m_profession();
  static const int kMProfessionFieldNumber = 15;
  inline ::google::protobuf::int32 m_profession() const;
  inline void set_m_profession(::google::protobuf::int32 value);

  // optional int32 m_stacklimit = 16;
  inline bool has_m_stacklimit() const;
  inline void clear_m_stacklimit();
  static const int kMStacklimitFieldNumber = 16;
  inline ::google::protobuf::int32 m_stacklimit() const;
  inline void set_m_stacklimit(::google::protobuf::int32 value);

  // optional int32 m_usedlevel = 17;
  inline bool has_m_usedlevel() const;
  inline void clear_m_usedlevel();
  static const int kMUsedlevelFieldNumber = 17;
  inline ::google::protobuf::int32 m_usedlevel() const;
  inline void set_m_usedlevel(::google::protobuf::int32 value);

  // optional int32 m_buygold = 18;
  inline bool has_m_buygold() const;
  inline void clear_m_buygold();
  static const int kMBuygoldFieldNumber = 18;
  inline ::google::protobuf::int32 m_buygold() const;
  inline void set_m_buygold(::google::protobuf::int32 value);

  // optional int32 m_sellgold = 19;
  inline bool has_m_sellgold() const;
  inline void clear_m_sellgold();
  static const int kMSellgoldFieldNumber = 19;
  inline ::google::protobuf::int32 m_sellgold() const;
  inline void set_m_sellgold(::google::protobuf::int32 value);

  // optional string m_describe_2 = 20;
  inline bool has_m_describe_2() const;
  inline void clear_m_describe_2();
  static const int kMDescribe2FieldNumber = 20;
  inline const ::std::string& m_describe_2() const;
  inline void set_m_describe_2(const ::std::string& value);
  inline void set_m_describe_2(const char* value);
  inline void set_m_describe_2(const char* value, size_t size);
  inline ::std::string* mutable_m_describe_2();
  inline ::std::string* release_m_describe_2();
  inline void set_allocated_m_describe_2(::std::string* m_describe_2);

  // optional int32 m_objectrank = 21;
  inline bool has_m_objectrank() const;
  inline void clear_m_objectrank();
  static const int kMObjectrankFieldNumber = 21;
  inline ::google::protobuf::int32 m_objectrank() const;
  inline void set_m_objectrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Walfare_Data)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_cost_price();
  inline void clear_has_m_cost_price();
  inline void set_has_m_cutprice();
  inline void clear_has_m_cutprice();
  inline void set_has_m_vip_limit();
  inline void clear_has_m_vip_limit();
  inline void set_has_m_person_limit();
  inline void clear_has_m_person_limit();
  inline void set_has_m_person_count();
  inline void clear_has_m_person_count();
  inline void set_has_m_server_limit();
  inline void clear_has_m_server_limit();
  inline void set_has_m_server_count();
  inline void clear_has_m_server_count();
  inline void set_has_m_descripte_1();
  inline void clear_has_m_descripte_1();
  inline void set_has_m_object_name();
  inline void clear_has_m_object_name();
  inline void set_has_m_object_icon();
  inline void clear_has_m_object_icon();
  inline void set_has_m_color();
  inline void clear_has_m_color();
  inline void set_has_m_bag_type();
  inline void clear_has_m_bag_type();
  inline void set_has_m_object_type();
  inline void clear_has_m_object_type();
  inline void set_has_m_profession();
  inline void clear_has_m_profession();
  inline void set_has_m_stacklimit();
  inline void clear_has_m_stacklimit();
  inline void set_has_m_usedlevel();
  inline void clear_has_m_usedlevel();
  inline void set_has_m_buygold();
  inline void clear_has_m_buygold();
  inline void set_has_m_sellgold();
  inline void clear_has_m_sellgold();
  inline void set_has_m_describe_2();
  inline void clear_has_m_describe_2();
  inline void set_has_m_objectrank();
  inline void clear_has_m_objectrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::int32 m_cost_price_;
  ::google::protobuf::int32 m_cutprice_;
  ::google::protobuf::int32 m_vip_limit_;
  ::google::protobuf::int32 m_person_limit_;
  ::google::protobuf::int32 m_person_count_;
  ::google::protobuf::int32 m_server_limit_;
  ::google::protobuf::int32 m_server_count_;
  ::std::string* m_descripte_1_;
  ::std::string* m_object_name_;
  ::std::string* m_object_icon_;
  ::google::protobuf::int32 m_color_;
  ::google::protobuf::int32 m_bag_type_;
  ::google::protobuf::int32 m_object_type_;
  ::google::protobuf::int32 m_profession_;
  ::google::protobuf::int32 m_stacklimit_;
  ::google::protobuf::int32 m_usedlevel_;
  ::google::protobuf::int32 m_buygold_;
  ::google::protobuf::int32 m_sellgold_;
  ::std::string* m_describe_2_;
  ::google::protobuf::int32 m_objectrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Walfare_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Single_Walfare_Request : public ::google::protobuf::Message {
 public:
  GM_Shop_Single_Walfare_Request();
  virtual ~GM_Shop_Single_Walfare_Request();

  GM_Shop_Single_Walfare_Request(const GM_Shop_Single_Walfare_Request& from);

  inline GM_Shop_Single_Walfare_Request& operator=(const GM_Shop_Single_Walfare_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Single_Walfare_Request& default_instance();

  void Swap(GM_Shop_Single_Walfare_Request* other);

  // implements Message ----------------------------------------------

  GM_Shop_Single_Walfare_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Single_Walfare_Request& from);
  void MergeFrom(const GM_Shop_Single_Walfare_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objectid = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Single_Walfare_Request)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Single_Walfare_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_Single_Walfare_buy_Return : public ::google::protobuf::Message {
 public:
  GM_Single_Walfare_buy_Return();
  virtual ~GM_Single_Walfare_buy_Return();

  GM_Single_Walfare_buy_Return(const GM_Single_Walfare_buy_Return& from);

  inline GM_Single_Walfare_buy_Return& operator=(const GM_Single_Walfare_buy_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Single_Walfare_buy_Return& default_instance();

  void Swap(GM_Single_Walfare_buy_Return* other);

  // implements Message ----------------------------------------------

  GM_Single_Walfare_buy_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Single_Walfare_buy_Return& from);
  void MergeFrom(const GM_Single_Walfare_buy_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_state = 1;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional int32 m_objectid = 2;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 2;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // optional int32 m_count = 3;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 3;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // repeated .GM_Goods_Detail m_detail = 4;
  inline int m_detail_size() const;
  inline void clear_m_detail();
  static const int kMDetailFieldNumber = 4;
  inline const ::GM_Goods_Detail& m_detail(int index) const;
  inline ::GM_Goods_Detail* mutable_m_detail(int index);
  inline ::GM_Goods_Detail* add_m_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Goods_Detail >&
      m_detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Goods_Detail >*
      mutable_m_detail();

  // @@protoc_insertion_point(class_scope:GM_Single_Walfare_buy_Return)
 private:
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_state_;
  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::RepeatedPtrField< ::GM_Goods_Detail > m_detail_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Single_Walfare_buy_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Goods_Detail : public ::google::protobuf::Message {
 public:
  GM_Goods_Detail();
  virtual ~GM_Goods_Detail();

  GM_Goods_Detail(const GM_Goods_Detail& from);

  inline GM_Goods_Detail& operator=(const GM_Goods_Detail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Goods_Detail& default_instance();

  void Swap(GM_Goods_Detail* other);

  // implements Message ----------------------------------------------

  GM_Goods_Detail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Goods_Detail& from);
  void MergeFrom(const GM_Goods_Detail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objectid = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // optional int32 m_getnum = 2;
  inline bool has_m_getnum() const;
  inline void clear_m_getnum();
  static const int kMGetnumFieldNumber = 2;
  inline ::google::protobuf::int32 m_getnum() const;
  inline void set_m_getnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Goods_Detail)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_getnum();
  inline void clear_has_m_getnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::int32 m_getnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Goods_Detail* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Single_Walfare_Retrun : public ::google::protobuf::Message {
 public:
  GM_Shop_Single_Walfare_Retrun();
  virtual ~GM_Shop_Single_Walfare_Retrun();

  GM_Shop_Single_Walfare_Retrun(const GM_Shop_Single_Walfare_Retrun& from);

  inline GM_Shop_Single_Walfare_Retrun& operator=(const GM_Shop_Single_Walfare_Retrun& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Single_Walfare_Retrun& default_instance();

  void Swap(GM_Shop_Single_Walfare_Retrun* other);

  // implements Message ----------------------------------------------

  GM_Shop_Single_Walfare_Retrun* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Single_Walfare_Retrun& from);
  void MergeFrom(const GM_Shop_Single_Walfare_Retrun& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_giftid = 1;
  inline bool has_m_giftid() const;
  inline void clear_m_giftid();
  static const int kMGiftidFieldNumber = 1;
  inline ::google::protobuf::int32 m_giftid() const;
  inline void set_m_giftid(::google::protobuf::int32 value);

  // repeated .GM_Single_Walfare_Data m_data = 2;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::GM_Single_Walfare_Data& m_data(int index) const;
  inline ::GM_Single_Walfare_Data* mutable_m_data(int index);
  inline ::GM_Single_Walfare_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Single_Walfare_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Single_Walfare_Data >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:GM_Shop_Single_Walfare_Retrun)
 private:
  inline void set_has_m_giftid();
  inline void clear_has_m_giftid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Single_Walfare_Data > m_data_;
  ::google::protobuf::int32 m_giftid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Single_Walfare_Retrun* default_instance_;
};
// -------------------------------------------------------------------

class GM_Single_Walfare_Data : public ::google::protobuf::Message {
 public:
  GM_Single_Walfare_Data();
  virtual ~GM_Single_Walfare_Data();

  GM_Single_Walfare_Data(const GM_Single_Walfare_Data& from);

  inline GM_Single_Walfare_Data& operator=(const GM_Single_Walfare_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Single_Walfare_Data& default_instance();

  void Swap(GM_Single_Walfare_Data* other);

  // implements Message ----------------------------------------------

  GM_Single_Walfare_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Single_Walfare_Data& from);
  void MergeFrom(const GM_Single_Walfare_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objectid = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // optional int32 m_get_mincount = 2;
  inline bool has_m_get_mincount() const;
  inline void clear_m_get_mincount();
  static const int kMGetMincountFieldNumber = 2;
  inline ::google::protobuf::int32 m_get_mincount() const;
  inline void set_m_get_mincount(::google::protobuf::int32 value);

  // optional int32 m_get_maxcount = 3;
  inline bool has_m_get_maxcount() const;
  inline void clear_m_get_maxcount();
  static const int kMGetMaxcountFieldNumber = 3;
  inline ::google::protobuf::int32 m_get_maxcount() const;
  inline void set_m_get_maxcount(::google::protobuf::int32 value);

  // optional int32 m_get_ratio = 4;
  inline bool has_m_get_ratio() const;
  inline void clear_m_get_ratio();
  static const int kMGetRatioFieldNumber = 4;
  inline ::google::protobuf::int32 m_get_ratio() const;
  inline void set_m_get_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Single_Walfare_Data)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_get_mincount();
  inline void clear_has_m_get_mincount();
  inline void set_has_m_get_maxcount();
  inline void clear_has_m_get_maxcount();
  inline void set_has_m_get_ratio();
  inline void clear_has_m_get_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::int32 m_get_mincount_;
  ::google::protobuf::int32 m_get_maxcount_;
  ::google::protobuf::int32 m_get_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Single_Walfare_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Object_Return : public ::google::protobuf::Message {
 public:
  GM_Shop_Object_Return();
  virtual ~GM_Shop_Object_Return();

  GM_Shop_Object_Return(const GM_Shop_Object_Return& from);

  inline GM_Shop_Object_Return& operator=(const GM_Shop_Object_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Object_Return& default_instance();

  void Swap(GM_Shop_Object_Return* other);

  // implements Message ----------------------------------------------

  GM_Shop_Object_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Object_Return& from);
  void MergeFrom(const GM_Shop_Object_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_Shop_Object_Data m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::GM_Shop_Object_Data& m_data(int index) const;
  inline ::GM_Shop_Object_Data* mutable_m_data(int index);
  inline ::GM_Shop_Object_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Shop_Object_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Shop_Object_Data >*
      mutable_m_data();

  // required int32 isnew = 2;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 2;
  inline ::google::protobuf::int32 isnew() const;
  inline void set_isnew(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Object_Return)
 private:
  inline void set_has_isnew();
  inline void clear_has_isnew();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Shop_Object_Data > m_data_;
  ::google::protobuf::int32 isnew_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Object_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Object_Data : public ::google::protobuf::Message {
 public:
  GM_Shop_Object_Data();
  virtual ~GM_Shop_Object_Data();

  GM_Shop_Object_Data(const GM_Shop_Object_Data& from);

  inline GM_Shop_Object_Data& operator=(const GM_Shop_Object_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Object_Data& default_instance();

  void Swap(GM_Shop_Object_Data* other);

  // implements Message ----------------------------------------------

  GM_Shop_Object_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Object_Data& from);
  void MergeFrom(const GM_Shop_Object_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 objectrank = 2;
  inline bool has_objectrank() const;
  inline void clear_objectrank();
  static const int kObjectrankFieldNumber = 2;
  inline ::google::protobuf::int32 objectrank() const;
  inline void set_objectrank(::google::protobuf::int32 value);

  // optional int32 buy_type = 3;
  inline bool has_buy_type() const;
  inline void clear_buy_type();
  static const int kBuyTypeFieldNumber = 3;
  inline ::google::protobuf::int32 buy_type() const;
  inline void set_buy_type(::google::protobuf::int32 value);

  // optional int32 vip_count = 4;
  inline bool has_vip_count() const;
  inline void clear_vip_count();
  static const int kVipCountFieldNumber = 4;
  inline ::google::protobuf::int32 vip_count() const;
  inline void set_vip_count(::google::protobuf::int32 value);

  // optional string descripte = 5;
  inline bool has_descripte() const;
  inline void clear_descripte();
  static const int kDescripteFieldNumber = 5;
  inline const ::std::string& descripte() const;
  inline void set_descripte(const ::std::string& value);
  inline void set_descripte(const char* value);
  inline void set_descripte(const char* value, size_t size);
  inline ::std::string* mutable_descripte();
  inline ::std::string* release_descripte();
  inline void set_allocated_descripte(::std::string* descripte);

  // optional int32 now_count = 6;
  inline bool has_now_count() const;
  inline void clear_now_count();
  static const int kNowCountFieldNumber = 6;
  inline ::google::protobuf::int32 now_count() const;
  inline void set_now_count(::google::protobuf::int32 value);

  // optional int32 cost_price = 7;
  inline bool has_cost_price() const;
  inline void clear_cost_price();
  static const int kCostPriceFieldNumber = 7;
  inline ::google::protobuf::int32 cost_price() const;
  inline void set_cost_price(::google::protobuf::int32 value);

  // optional int32 isdyn = 8;
  inline bool has_isdyn() const;
  inline void clear_isdyn();
  static const int kIsdynFieldNumber = 8;
  inline ::google::protobuf::int32 isdyn() const;
  inline void set_isdyn(::google::protobuf::int32 value);

  // optional string objectname = 9;
  inline bool has_objectname() const;
  inline void clear_objectname();
  static const int kObjectnameFieldNumber = 9;
  inline const ::std::string& objectname() const;
  inline void set_objectname(const ::std::string& value);
  inline void set_objectname(const char* value);
  inline void set_objectname(const char* value, size_t size);
  inline ::std::string* mutable_objectname();
  inline ::std::string* release_objectname();
  inline void set_allocated_objectname(::std::string* objectname);

  // optional string object_icon = 10;
  inline bool has_object_icon() const;
  inline void clear_object_icon();
  static const int kObjectIconFieldNumber = 10;
  inline const ::std::string& object_icon() const;
  inline void set_object_icon(const ::std::string& value);
  inline void set_object_icon(const char* value);
  inline void set_object_icon(const char* value, size_t size);
  inline ::std::string* mutable_object_icon();
  inline ::std::string* release_object_icon();
  inline void set_allocated_object_icon(::std::string* object_icon);

  // optional int32 color = 11;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 11;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // optional int32 maxvip_count = 12;
  inline bool has_maxvip_count() const;
  inline void clear_maxvip_count();
  static const int kMaxvipCountFieldNumber = 12;
  inline ::google::protobuf::int32 maxvip_count() const;
  inline void set_maxvip_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Object_Data)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_objectrank();
  inline void clear_has_objectrank();
  inline void set_has_buy_type();
  inline void clear_has_buy_type();
  inline void set_has_vip_count();
  inline void clear_has_vip_count();
  inline void set_has_descripte();
  inline void clear_has_descripte();
  inline void set_has_now_count();
  inline void clear_has_now_count();
  inline void set_has_cost_price();
  inline void clear_has_cost_price();
  inline void set_has_isdyn();
  inline void clear_has_isdyn();
  inline void set_has_objectname();
  inline void clear_has_objectname();
  inline void set_has_object_icon();
  inline void clear_has_object_icon();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_maxvip_count();
  inline void clear_has_maxvip_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 objectrank_;
  ::google::protobuf::int32 buy_type_;
  ::google::protobuf::int32 vip_count_;
  ::std::string* descripte_;
  ::google::protobuf::int32 now_count_;
  ::google::protobuf::int32 cost_price_;
  ::std::string* objectname_;
  ::google::protobuf::int32 isdyn_;
  ::google::protobuf::int32 color_;
  ::std::string* object_icon_;
  ::google::protobuf::int32 maxvip_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Object_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Object_Buy_Request : public ::google::protobuf::Message {
 public:
  GM_Shop_Object_Buy_Request();
  virtual ~GM_Shop_Object_Buy_Request();

  GM_Shop_Object_Buy_Request(const GM_Shop_Object_Buy_Request& from);

  inline GM_Shop_Object_Buy_Request& operator=(const GM_Shop_Object_Buy_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Object_Buy_Request& default_instance();

  void Swap(GM_Shop_Object_Buy_Request* other);

  // implements Message ----------------------------------------------

  GM_Shop_Object_Buy_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Object_Buy_Request& from);
  void MergeFrom(const GM_Shop_Object_Buy_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_objectid = 1;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // optional int32 m_count = 2;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 2;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Object_Buy_Request)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();
  inline void set_has_m_count();
  inline void clear_has_m_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objectid_;
  ::google::protobuf::int32 m_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Object_Buy_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_CreateOrder : public ::google::protobuf::Message {
 public:
  GM_CreateOrder();
  virtual ~GM_CreateOrder();

  GM_CreateOrder(const GM_CreateOrder& from);

  inline GM_CreateOrder& operator=(const GM_CreateOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_CreateOrder& default_instance();

  void Swap(GM_CreateOrder* other);

  // implements Message ----------------------------------------------

  GM_CreateOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_CreateOrder& from);
  void MergeFrom(const GM_CreateOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string orderid = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 1;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional int32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional string channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 appid = 4;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // optional float diamonds = 5;
  inline bool has_diamonds() const;
  inline void clear_diamonds();
  static const int kDiamondsFieldNumber = 5;
  inline float diamonds() const;
  inline void set_diamonds(float value);

  // optional int32 roleid = 6;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 6;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional int32 serverid = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 accountid = 8;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 8;
  inline ::google::protobuf::int32 accountid() const;
  inline void set_accountid(::google::protobuf::int32 value);

  // optional int32 productid = 9;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 9;
  inline ::google::protobuf::int32 productid() const;
  inline void set_productid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_CreateOrder)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_diamonds();
  inline void clear_has_diamonds();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_productid();
  inline void clear_has_productid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orderid_;
  ::std::string* channel_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 appid_;
  float diamonds_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 accountid_;
  ::google::protobuf::int32 productid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_CreateOrder* default_instance_;
};
// -------------------------------------------------------------------

class GM_CreateOrder_Return : public ::google::protobuf::Message {
 public:
  GM_CreateOrder_Return();
  virtual ~GM_CreateOrder_Return();

  GM_CreateOrder_Return(const GM_CreateOrder_Return& from);

  inline GM_CreateOrder_Return& operator=(const GM_CreateOrder_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_CreateOrder_Return& default_instance();

  void Swap(GM_CreateOrder_Return* other);

  // implements Message ----------------------------------------------

  GM_CreateOrder_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_CreateOrder_Return& from);
  void MergeFrom(const GM_CreateOrder_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string orderid = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 1;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional int32 m_result = 2;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 2;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // optional int32 m_productid = 3;
  inline bool has_m_productid() const;
  inline void clear_m_productid();
  static const int kMProductidFieldNumber = 3;
  inline ::google::protobuf::int32 m_productid() const;
  inline void set_m_productid(::google::protobuf::int32 value);

  // optional string m_strname = 4;
  inline bool has_m_strname() const;
  inline void clear_m_strname();
  static const int kMStrnameFieldNumber = 4;
  inline const ::std::string& m_strname() const;
  inline void set_m_strname(const ::std::string& value);
  inline void set_m_strname(const char* value);
  inline void set_m_strname(const char* value, size_t size);
  inline ::std::string* mutable_m_strname();
  inline ::std::string* release_m_strname();
  inline void set_allocated_m_strname(::std::string* m_strname);

  // @@protoc_insertion_point(class_scope:GM_CreateOrder_Return)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_productid();
  inline void clear_has_m_productid();
  inline void set_has_m_strname();
  inline void clear_has_m_strname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orderid_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_productid_;
  ::std::string* m_strname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_CreateOrder_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Obj_Single_Return : public ::google::protobuf::Message {
 public:
  GM_Shop_Obj_Single_Return();
  virtual ~GM_Shop_Obj_Single_Return();

  GM_Shop_Obj_Single_Return(const GM_Shop_Obj_Single_Return& from);

  inline GM_Shop_Obj_Single_Return& operator=(const GM_Shop_Obj_Single_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Obj_Single_Return& default_instance();

  void Swap(GM_Shop_Obj_Single_Return* other);

  // implements Message ----------------------------------------------

  GM_Shop_Obj_Single_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Obj_Single_Return& from);
  void MergeFrom(const GM_Shop_Obj_Single_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GM_Shop_Obj_Single_Data m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::GM_Shop_Obj_Single_Data& m_data(int index) const;
  inline ::GM_Shop_Obj_Single_Data* mutable_m_data(int index);
  inline ::GM_Shop_Obj_Single_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Shop_Obj_Single_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Shop_Obj_Single_Data >*
      mutable_m_data();

  // optional int32 m_objectid = 2;
  inline bool has_m_objectid() const;
  inline void clear_m_objectid();
  static const int kMObjectidFieldNumber = 2;
  inline ::google::protobuf::int32 m_objectid() const;
  inline void set_m_objectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Obj_Single_Return)
 private:
  inline void set_has_m_objectid();
  inline void clear_has_m_objectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Shop_Obj_Single_Data > m_data_;
  ::google::protobuf::int32 m_objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Obj_Single_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_Shop_Obj_Single_Data : public ::google::protobuf::Message {
 public:
  GM_Shop_Obj_Single_Data();
  virtual ~GM_Shop_Obj_Single_Data();

  GM_Shop_Obj_Single_Data(const GM_Shop_Obj_Single_Data& from);

  inline GM_Shop_Obj_Single_Data& operator=(const GM_Shop_Obj_Single_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Shop_Obj_Single_Data& default_instance();

  void Swap(GM_Shop_Obj_Single_Data* other);

  // implements Message ----------------------------------------------

  GM_Shop_Obj_Single_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Shop_Obj_Single_Data& from);
  void MergeFrom(const GM_Shop_Obj_Single_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 get_mintime = 1;
  inline bool has_get_mintime() const;
  inline void clear_get_mintime();
  static const int kGetMintimeFieldNumber = 1;
  inline ::google::protobuf::int32 get_mintime() const;
  inline void set_get_mintime(::google::protobuf::int32 value);

  // optional int32 get_maxtime = 2;
  inline bool has_get_maxtime() const;
  inline void clear_get_maxtime();
  static const int kGetMaxtimeFieldNumber = 2;
  inline ::google::protobuf::int32 get_maxtime() const;
  inline void set_get_maxtime(::google::protobuf::int32 value);

  // optional int32 cost_price = 3;
  inline bool has_cost_price() const;
  inline void clear_cost_price();
  static const int kCostPriceFieldNumber = 3;
  inline ::google::protobuf::int32 cost_price() const;
  inline void set_cost_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Shop_Obj_Single_Data)
 private:
  inline void set_has_get_mintime();
  inline void clear_has_get_mintime();
  inline void set_has_get_maxtime();
  inline void clear_has_get_maxtime();
  inline void set_has_cost_price();
  inline void clear_has_cost_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 get_mintime_;
  ::google::protobuf::int32 get_maxtime_;
  ::google::protobuf::int32 cost_price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Shop_Obj_Single_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Recharge_Over : public ::google::protobuf::Message {
 public:
  GM_Recharge_Over();
  virtual ~GM_Recharge_Over();

  GM_Recharge_Over(const GM_Recharge_Over& from);

  inline GM_Recharge_Over& operator=(const GM_Recharge_Over& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Recharge_Over& default_instance();

  void Swap(GM_Recharge_Over* other);

  // implements Message ----------------------------------------------

  GM_Recharge_Over* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Recharge_Over& from);
  void MergeFrom(const GM_Recharge_Over& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .GM_Recharge_Over_Data m_data = 2;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::GM_Recharge_Over_Data& m_data(int index) const;
  inline ::GM_Recharge_Over_Data* mutable_m_data(int index);
  inline ::GM_Recharge_Over_Data* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Over_Data >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Over_Data >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:GM_Recharge_Over)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Over_Data > m_data_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Recharge_Over* default_instance_;
};
// -------------------------------------------------------------------

class GM_Recharge_Over_Data : public ::google::protobuf::Message {
 public:
  GM_Recharge_Over_Data();
  virtual ~GM_Recharge_Over_Data();

  GM_Recharge_Over_Data(const GM_Recharge_Over_Data& from);

  inline GM_Recharge_Over_Data& operator=(const GM_Recharge_Over_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Recharge_Over_Data& default_instance();

  void Swap(GM_Recharge_Over_Data* other);

  // implements Message ----------------------------------------------

  GM_Recharge_Over_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Recharge_Over_Data& from);
  void MergeFrom(const GM_Recharge_Over_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 productid = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 1;
  inline ::google::protobuf::int32 productid() const;
  inline void set_productid(::google::protobuf::int32 value);

  // optional int32 get_diamond = 2;
  inline bool has_get_diamond() const;
  inline void clear_get_diamond();
  static const int kGetDiamondFieldNumber = 2;
  inline ::google::protobuf::int32 get_diamond() const;
  inline void set_get_diamond(::google::protobuf::int32 value);

  // optional int32 m_type = 3;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional string m_descirb = 5;
  inline bool has_m_descirb() const;
  inline void clear_m_descirb();
  static const int kMDescirbFieldNumber = 5;
  inline const ::std::string& m_descirb() const;
  inline void set_m_descirb(const ::std::string& value);
  inline void set_m_descirb(const char* value);
  inline void set_m_descirb(const char* value, size_t size);
  inline ::std::string* mutable_m_descirb();
  inline ::std::string* release_m_descirb();
  inline void set_allocated_m_descirb(::std::string* m_descirb);

  // optional string m_orderid = 6;
  inline bool has_m_orderid() const;
  inline void clear_m_orderid();
  static const int kMOrderidFieldNumber = 6;
  inline const ::std::string& m_orderid() const;
  inline void set_m_orderid(const ::std::string& value);
  inline void set_m_orderid(const char* value);
  inline void set_m_orderid(const char* value, size_t size);
  inline ::std::string* mutable_m_orderid();
  inline ::std::string* release_m_orderid();
  inline void set_allocated_m_orderid(::std::string* m_orderid);

  // @@protoc_insertion_point(class_scope:GM_Recharge_Over_Data)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_get_diamond();
  inline void clear_has_get_diamond();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_m_descirb();
  inline void clear_has_m_descirb();
  inline void set_has_m_orderid();
  inline void clear_has_m_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 productid_;
  ::google::protobuf::int32 get_diamond_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 money_;
  ::std::string* m_descirb_;
  ::std::string* m_orderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Recharge_Over_Data* default_instance_;
};
// -------------------------------------------------------------------

class GM_Single_Object_Return : public ::google::protobuf::Message {
 public:
  GM_Single_Object_Return();
  virtual ~GM_Single_Object_Return();

  GM_Single_Object_Return(const GM_Single_Object_Return& from);

  inline GM_Single_Object_Return& operator=(const GM_Single_Object_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_Single_Object_Return& default_instance();

  void Swap(GM_Single_Object_Return* other);

  // implements Message ----------------------------------------------

  GM_Single_Object_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_Single_Object_Return& from);
  void MergeFrom(const GM_Single_Object_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_buytime = 1;
  inline bool has_m_buytime() const;
  inline void clear_m_buytime();
  static const int kMBuytimeFieldNumber = 1;
  inline ::google::protobuf::int32 m_buytime() const;
  inline void set_m_buytime(::google::protobuf::int32 value);

  // optional int32 m_price = 2;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 2;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 vip_count = 3;
  inline bool has_vip_count() const;
  inline void clear_vip_count();
  static const int kVipCountFieldNumber = 3;
  inline ::google::protobuf::int32 vip_count() const;
  inline void set_vip_count(::google::protobuf::int32 value);

  // optional int32 now_count = 4;
  inline bool has_now_count() const;
  inline void clear_now_count();
  static const int kNowCountFieldNumber = 4;
  inline ::google::protobuf::int32 now_count() const;
  inline void set_now_count(::google::protobuf::int32 value);

  // optional int32 maxvip_count = 5;
  inline bool has_maxvip_count() const;
  inline void clear_maxvip_count();
  static const int kMaxvipCountFieldNumber = 5;
  inline ::google::protobuf::int32 maxvip_count() const;
  inline void set_maxvip_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_Single_Object_Return)
 private:
  inline void set_has_m_buytime();
  inline void clear_has_m_buytime();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_vip_count();
  inline void clear_has_vip_count();
  inline void set_has_now_count();
  inline void clear_has_now_count();
  inline void set_has_maxvip_count();
  inline void clear_has_maxvip_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_buytime_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 vip_count_;
  ::google::protobuf::int32 now_count_;
  ::google::protobuf::int32 maxvip_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_Single_Object_Return* default_instance_;
};
// -------------------------------------------------------------------

class GM_GET_ZYOrder_Request : public ::google::protobuf::Message {
 public:
  GM_GET_ZYOrder_Request();
  virtual ~GM_GET_ZYOrder_Request();

  GM_GET_ZYOrder_Request(const GM_GET_ZYOrder_Request& from);

  inline GM_GET_ZYOrder_Request& operator=(const GM_GET_ZYOrder_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GET_ZYOrder_Request& default_instance();

  void Swap(GM_GET_ZYOrder_Request* other);

  // implements Message ----------------------------------------------

  GM_GET_ZYOrder_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GET_ZYOrder_Request& from);
  void MergeFrom(const GM_GET_ZYOrder_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_userid = 1;
  inline bool has_m_userid() const;
  inline void clear_m_userid();
  static const int kMUseridFieldNumber = 1;
  inline const ::std::string& m_userid() const;
  inline void set_m_userid(const ::std::string& value);
  inline void set_m_userid(const char* value);
  inline void set_m_userid(const char* value, size_t size);
  inline ::std::string* mutable_m_userid();
  inline ::std::string* release_m_userid();
  inline void set_allocated_m_userid(::std::string* m_userid);

  // optional string m_productid = 2;
  inline bool has_m_productid() const;
  inline void clear_m_productid();
  static const int kMProductidFieldNumber = 2;
  inline const ::std::string& m_productid() const;
  inline void set_m_productid(const ::std::string& value);
  inline void set_m_productid(const char* value);
  inline void set_m_productid(const char* value, size_t size);
  inline ::std::string* mutable_m_productid();
  inline ::std::string* release_m_productid();
  inline void set_allocated_m_productid(::std::string* m_productid);

  // optional string m_productname = 3;
  inline bool has_m_productname() const;
  inline void clear_m_productname();
  static const int kMProductnameFieldNumber = 3;
  inline const ::std::string& m_productname() const;
  inline void set_m_productname(const ::std::string& value);
  inline void set_m_productname(const char* value);
  inline void set_m_productname(const char* value, size_t size);
  inline ::std::string* mutable_m_productname();
  inline ::std::string* release_m_productname();
  inline void set_allocated_m_productname(::std::string* m_productname);

  // optional string m_productdesc = 4;
  inline bool has_m_productdesc() const;
  inline void clear_m_productdesc();
  static const int kMProductdescFieldNumber = 4;
  inline const ::std::string& m_productdesc() const;
  inline void set_m_productdesc(const ::std::string& value);
  inline void set_m_productdesc(const char* value);
  inline void set_m_productdesc(const char* value, size_t size);
  inline ::std::string* mutable_m_productdesc();
  inline ::std::string* release_m_productdesc();
  inline void set_allocated_m_productdesc(::std::string* m_productdesc);

  // optional string m_extension = 5;
  inline bool has_m_extension() const;
  inline void clear_m_extension();
  static const int kMExtensionFieldNumber = 5;
  inline const ::std::string& m_extension() const;
  inline void set_m_extension(const ::std::string& value);
  inline void set_m_extension(const char* value);
  inline void set_m_extension(const char* value, size_t size);
  inline ::std::string* mutable_m_extension();
  inline ::std::string* release_m_extension();
  inline void set_allocated_m_extension(::std::string* m_extension);

  // optional string m_ec_pp = 6;
  inline bool has_m_ec_pp() const;
  inline void clear_m_ec_pp();
  static const int kMEcPpFieldNumber = 6;
  inline const ::std::string& m_ec_pp() const;
  inline void set_m_ec_pp(const ::std::string& value);
  inline void set_m_ec_pp(const char* value);
  inline void set_m_ec_pp(const char* value, size_t size);
  inline ::std::string* mutable_m_ec_pp();
  inline ::std::string* release_m_ec_pp();
  inline void set_allocated_m_ec_pp(::std::string* m_ec_pp);

  // optional int32 m_roleid = 7;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleidFieldNumber = 7;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional string m_rolename = 8;
  inline bool has_m_rolename() const;
  inline void clear_m_rolename();
  static const int kMRolenameFieldNumber = 8;
  inline const ::std::string& m_rolename() const;
  inline void set_m_rolename(const ::std::string& value);
  inline void set_m_rolename(const char* value);
  inline void set_m_rolename(const char* value, size_t size);
  inline ::std::string* mutable_m_rolename();
  inline ::std::string* release_m_rolename();
  inline void set_allocated_m_rolename(::std::string* m_rolename);

  // optional float m_money = 9;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 9;
  inline float m_money() const;
  inline void set_m_money(float value);

  // optional int32 m_serverid = 10;
  inline bool has_m_serverid() const;
  inline void clear_m_serverid();
  static const int kMServeridFieldNumber = 10;
  inline ::google::protobuf::int32 m_serverid() const;
  inline void set_m_serverid(::google::protobuf::int32 value);

  // optional string m_servername = 11;
  inline bool has_m_servername() const;
  inline void clear_m_servername();
  static const int kMServernameFieldNumber = 11;
  inline const ::std::string& m_servername() const;
  inline void set_m_servername(const ::std::string& value);
  inline void set_m_servername(const char* value);
  inline void set_m_servername(const char* value, size_t size);
  inline ::std::string* mutable_m_servername();
  inline ::std::string* release_m_servername();
  inline void set_allocated_m_servername(::std::string* m_servername);

  // @@protoc_insertion_point(class_scope:GM_GET_ZYOrder_Request)
 private:
  inline void set_has_m_userid();
  inline void clear_has_m_userid();
  inline void set_has_m_productid();
  inline void clear_has_m_productid();
  inline void set_has_m_productname();
  inline void clear_has_m_productname();
  inline void set_has_m_productdesc();
  inline void clear_has_m_productdesc();
  inline void set_has_m_extension();
  inline void clear_has_m_extension();
  inline void set_has_m_ec_pp();
  inline void clear_has_m_ec_pp();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_rolename();
  inline void clear_has_m_rolename();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_serverid();
  inline void clear_has_m_serverid();
  inline void set_has_m_servername();
  inline void clear_has_m_servername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_userid_;
  ::std::string* m_productid_;
  ::std::string* m_productname_;
  ::std::string* m_productdesc_;
  ::std::string* m_extension_;
  ::std::string* m_ec_pp_;
  ::std::string* m_rolename_;
  ::google::protobuf::int32 m_roleid_;
  float m_money_;
  ::std::string* m_servername_;
  ::google::protobuf::int32 m_serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_GET_ZYOrder_Request* default_instance_;
};
// -------------------------------------------------------------------

class GM_GET_ZYOrder_Return : public ::google::protobuf::Message {
 public:
  GM_GET_ZYOrder_Return();
  virtual ~GM_GET_ZYOrder_Return();

  GM_GET_ZYOrder_Return(const GM_GET_ZYOrder_Return& from);

  inline GM_GET_ZYOrder_Return& operator=(const GM_GET_ZYOrder_Return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GET_ZYOrder_Return& default_instance();

  void Swap(GM_GET_ZYOrder_Return* other);

  // implements Message ----------------------------------------------

  GM_GET_ZYOrder_Return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GET_ZYOrder_Return& from);
  void MergeFrom(const GM_GET_ZYOrder_Return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_state = 1;
  inline bool has_m_state() const;
  inline void clear_m_state();
  static const int kMStateFieldNumber = 1;
  inline ::google::protobuf::int32 m_state() const;
  inline void set_m_state(::google::protobuf::int32 value);

  // optional string m_orderdata = 2;
  inline bool has_m_orderdata() const;
  inline void clear_m_orderdata();
  static const int kMOrderdataFieldNumber = 2;
  inline const ::std::string& m_orderdata() const;
  inline void set_m_orderdata(const ::std::string& value);
  inline void set_m_orderdata(const char* value);
  inline void set_m_orderdata(const char* value, size_t size);
  inline ::std::string* mutable_m_orderdata();
  inline ::std::string* release_m_orderdata();
  inline void set_allocated_m_orderdata(::std::string* m_orderdata);

  // optional string userData = 3;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 3;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const char* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // @@protoc_insertion_point(class_scope:GM_GET_ZYOrder_Return)
 private:
  inline void set_has_m_state();
  inline void clear_has_m_state();
  inline void set_has_m_orderdata();
  inline void clear_has_m_orderdata();
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_orderdata_;
  ::std::string* userdata_;
  ::google::protobuf::int32 m_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2etxt();
  friend void protobuf_AssignDesc_recharge_2etxt();
  friend void protobuf_ShutdownFile_recharge_2etxt();

  void InitAsDefaultInstance();
  static GM_GET_ZYOrder_Return* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_Recharge_Data

// optional int32 m_goodsid = 1;
inline bool GM_Recharge_Data::has_m_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Recharge_Data::set_has_m_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Recharge_Data::clear_has_m_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Recharge_Data::clear_m_goodsid() {
  m_goodsid_ = 0;
  clear_has_m_goodsid();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_goodsid() const {
  return m_goodsid_;
}
inline void GM_Recharge_Data::set_m_goodsid(::google::protobuf::int32 value) {
  set_has_m_goodsid();
  m_goodsid_ = value;
}

// optional float m_price = 2;
inline bool GM_Recharge_Data::has_m_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Recharge_Data::set_has_m_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Recharge_Data::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Recharge_Data::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline float GM_Recharge_Data::m_price() const {
  return m_price_;
}
inline void GM_Recharge_Data::set_m_price(float value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_getdamond = 3;
inline bool GM_Recharge_Data::has_m_getdamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Recharge_Data::set_has_m_getdamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Recharge_Data::clear_has_m_getdamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Recharge_Data::clear_m_getdamond() {
  m_getdamond_ = 0;
  clear_has_m_getdamond();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_getdamond() const {
  return m_getdamond_;
}
inline void GM_Recharge_Data::set_m_getdamond(::google::protobuf::int32 value) {
  set_has_m_getdamond();
  m_getdamond_ = value;
}

// optional int32 m_reward = 4;
inline bool GM_Recharge_Data::has_m_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Recharge_Data::set_has_m_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Recharge_Data::clear_has_m_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Recharge_Data::clear_m_reward() {
  m_reward_ = 0;
  clear_has_m_reward();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_reward() const {
  return m_reward_;
}
inline void GM_Recharge_Data::set_m_reward(::google::protobuf::int32 value) {
  set_has_m_reward();
  m_reward_ = value;
}

// optional int32 m_limitreward = 5;
inline bool GM_Recharge_Data::has_m_limitreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Recharge_Data::set_has_m_limitreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Recharge_Data::clear_has_m_limitreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Recharge_Data::clear_m_limitreward() {
  m_limitreward_ = 0;
  clear_has_m_limitreward();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_limitreward() const {
  return m_limitreward_;
}
inline void GM_Recharge_Data::set_m_limitreward(::google::protobuf::int32 value) {
  set_has_m_limitreward();
  m_limitreward_ = value;
}

// optional int32 m_type = 6;
inline bool GM_Recharge_Data::has_m_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Recharge_Data::set_has_m_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Recharge_Data::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Recharge_Data::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_type() const {
  return m_type_;
}
inline void GM_Recharge_Data::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_iconid = 7;
inline bool GM_Recharge_Data::has_m_iconid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Recharge_Data::set_has_m_iconid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Recharge_Data::clear_has_m_iconid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Recharge_Data::clear_m_iconid() {
  if (m_iconid_ != &::google::protobuf::internal::kEmptyString) {
    m_iconid_->clear();
  }
  clear_has_m_iconid();
}
inline const ::std::string& GM_Recharge_Data::m_iconid() const {
  return *m_iconid_;
}
inline void GM_Recharge_Data::set_m_iconid(const ::std::string& value) {
  set_has_m_iconid();
  if (m_iconid_ == &::google::protobuf::internal::kEmptyString) {
    m_iconid_ = new ::std::string;
  }
  m_iconid_->assign(value);
}
inline void GM_Recharge_Data::set_m_iconid(const char* value) {
  set_has_m_iconid();
  if (m_iconid_ == &::google::protobuf::internal::kEmptyString) {
    m_iconid_ = new ::std::string;
  }
  m_iconid_->assign(value);
}
inline void GM_Recharge_Data::set_m_iconid(const char* value, size_t size) {
  set_has_m_iconid();
  if (m_iconid_ == &::google::protobuf::internal::kEmptyString) {
    m_iconid_ = new ::std::string;
  }
  m_iconid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Data::mutable_m_iconid() {
  set_has_m_iconid();
  if (m_iconid_ == &::google::protobuf::internal::kEmptyString) {
    m_iconid_ = new ::std::string;
  }
  return m_iconid_;
}
inline ::std::string* GM_Recharge_Data::release_m_iconid() {
  clear_has_m_iconid();
  if (m_iconid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_iconid_;
    m_iconid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Data::set_allocated_m_iconid(::std::string* m_iconid) {
  if (m_iconid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_iconid_;
  }
  if (m_iconid) {
    set_has_m_iconid();
    m_iconid_ = m_iconid;
  } else {
    clear_has_m_iconid();
    m_iconid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_limit = 8;
inline bool GM_Recharge_Data::has_m_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_Recharge_Data::set_has_m_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_Recharge_Data::clear_has_m_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_Recharge_Data::clear_m_limit() {
  m_limit_ = 0;
  clear_has_m_limit();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_limit() const {
  return m_limit_;
}
inline void GM_Recharge_Data::set_m_limit(::google::protobuf::int32 value) {
  set_has_m_limit();
  m_limit_ = value;
}

// optional string m_limit_icon = 9;
inline bool GM_Recharge_Data::has_m_limit_icon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_Recharge_Data::set_has_m_limit_icon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_Recharge_Data::clear_has_m_limit_icon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_Recharge_Data::clear_m_limit_icon() {
  if (m_limit_icon_ != &::google::protobuf::internal::kEmptyString) {
    m_limit_icon_->clear();
  }
  clear_has_m_limit_icon();
}
inline const ::std::string& GM_Recharge_Data::m_limit_icon() const {
  return *m_limit_icon_;
}
inline void GM_Recharge_Data::set_m_limit_icon(const ::std::string& value) {
  set_has_m_limit_icon();
  if (m_limit_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_limit_icon_ = new ::std::string;
  }
  m_limit_icon_->assign(value);
}
inline void GM_Recharge_Data::set_m_limit_icon(const char* value) {
  set_has_m_limit_icon();
  if (m_limit_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_limit_icon_ = new ::std::string;
  }
  m_limit_icon_->assign(value);
}
inline void GM_Recharge_Data::set_m_limit_icon(const char* value, size_t size) {
  set_has_m_limit_icon();
  if (m_limit_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_limit_icon_ = new ::std::string;
  }
  m_limit_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Data::mutable_m_limit_icon() {
  set_has_m_limit_icon();
  if (m_limit_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_limit_icon_ = new ::std::string;
  }
  return m_limit_icon_;
}
inline ::std::string* GM_Recharge_Data::release_m_limit_icon() {
  clear_has_m_limit_icon();
  if (m_limit_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_limit_icon_;
    m_limit_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Data::set_allocated_m_limit_icon(::std::string* m_limit_icon) {
  if (m_limit_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_limit_icon_;
  }
  if (m_limit_icon) {
    set_has_m_limit_icon();
    m_limit_icon_ = m_limit_icon;
  } else {
    clear_has_m_limit_icon();
    m_limit_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_channel = 10;
inline bool GM_Recharge_Data::has_m_channel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_Recharge_Data::set_has_m_channel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_Recharge_Data::clear_has_m_channel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_Recharge_Data::clear_m_channel() {
  if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
    m_channel_->clear();
  }
  clear_has_m_channel();
}
inline const ::std::string& GM_Recharge_Data::m_channel() const {
  return *m_channel_;
}
inline void GM_Recharge_Data::set_m_channel(const ::std::string& value) {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  m_channel_->assign(value);
}
inline void GM_Recharge_Data::set_m_channel(const char* value) {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  m_channel_->assign(value);
}
inline void GM_Recharge_Data::set_m_channel(const char* value, size_t size) {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  m_channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Data::mutable_m_channel() {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  return m_channel_;
}
inline ::std::string* GM_Recharge_Data::release_m_channel() {
  clear_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_channel_;
    m_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Data::set_allocated_m_channel(::std::string* m_channel) {
  if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete m_channel_;
  }
  if (m_channel) {
    set_has_m_channel();
    m_channel_ = m_channel;
  } else {
    clear_has_m_channel();
    m_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_tag = 11;
inline bool GM_Recharge_Data::has_m_tag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_Recharge_Data::set_has_m_tag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_Recharge_Data::clear_has_m_tag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_Recharge_Data::clear_m_tag() {
  m_tag_ = 0;
  clear_has_m_tag();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_tag() const {
  return m_tag_;
}
inline void GM_Recharge_Data::set_m_tag(::google::protobuf::int32 value) {
  set_has_m_tag();
  m_tag_ = value;
}

// optional int32 m_hot = 12;
inline bool GM_Recharge_Data::has_m_hot() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_Recharge_Data::set_has_m_hot() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_Recharge_Data::clear_has_m_hot() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_Recharge_Data::clear_m_hot() {
  m_hot_ = 0;
  clear_has_m_hot();
}
inline ::google::protobuf::int32 GM_Recharge_Data::m_hot() const {
  return m_hot_;
}
inline void GM_Recharge_Data::set_m_hot(::google::protobuf::int32 value) {
  set_has_m_hot();
  m_hot_ = value;
}

// optional string m_objectname = 13;
inline bool GM_Recharge_Data::has_m_objectname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GM_Recharge_Data::set_has_m_objectname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GM_Recharge_Data::clear_has_m_objectname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GM_Recharge_Data::clear_m_objectname() {
  if (m_objectname_ != &::google::protobuf::internal::kEmptyString) {
    m_objectname_->clear();
  }
  clear_has_m_objectname();
}
inline const ::std::string& GM_Recharge_Data::m_objectname() const {
  return *m_objectname_;
}
inline void GM_Recharge_Data::set_m_objectname(const ::std::string& value) {
  set_has_m_objectname();
  if (m_objectname_ == &::google::protobuf::internal::kEmptyString) {
    m_objectname_ = new ::std::string;
  }
  m_objectname_->assign(value);
}
inline void GM_Recharge_Data::set_m_objectname(const char* value) {
  set_has_m_objectname();
  if (m_objectname_ == &::google::protobuf::internal::kEmptyString) {
    m_objectname_ = new ::std::string;
  }
  m_objectname_->assign(value);
}
inline void GM_Recharge_Data::set_m_objectname(const char* value, size_t size) {
  set_has_m_objectname();
  if (m_objectname_ == &::google::protobuf::internal::kEmptyString) {
    m_objectname_ = new ::std::string;
  }
  m_objectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Data::mutable_m_objectname() {
  set_has_m_objectname();
  if (m_objectname_ == &::google::protobuf::internal::kEmptyString) {
    m_objectname_ = new ::std::string;
  }
  return m_objectname_;
}
inline ::std::string* GM_Recharge_Data::release_m_objectname() {
  clear_has_m_objectname();
  if (m_objectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_objectname_;
    m_objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Data::set_allocated_m_objectname(::std::string* m_objectname) {
  if (m_objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_objectname_;
  }
  if (m_objectname) {
    set_has_m_objectname();
    m_objectname_ = m_objectname;
  } else {
    clear_has_m_objectname();
    m_objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Recharge_Open

// required string m_channel = 1;
inline bool GM_Recharge_Open::has_m_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Recharge_Open::set_has_m_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Recharge_Open::clear_has_m_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Recharge_Open::clear_m_channel() {
  if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
    m_channel_->clear();
  }
  clear_has_m_channel();
}
inline const ::std::string& GM_Recharge_Open::m_channel() const {
  return *m_channel_;
}
inline void GM_Recharge_Open::set_m_channel(const ::std::string& value) {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  m_channel_->assign(value);
}
inline void GM_Recharge_Open::set_m_channel(const char* value) {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  m_channel_->assign(value);
}
inline void GM_Recharge_Open::set_m_channel(const char* value, size_t size) {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  m_channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Open::mutable_m_channel() {
  set_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    m_channel_ = new ::std::string;
  }
  return m_channel_;
}
inline ::std::string* GM_Recharge_Open::release_m_channel() {
  clear_has_m_channel();
  if (m_channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_channel_;
    m_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Open::set_allocated_m_channel(::std::string* m_channel) {
  if (m_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete m_channel_;
  }
  if (m_channel) {
    set_has_m_channel();
    m_channel_ = m_channel;
  } else {
    clear_has_m_channel();
    m_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Recharge_Open_Return

// repeated .GM_Recharge_Data m_data = 1;
inline int GM_Recharge_Open_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Recharge_Open_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Recharge_Data& GM_Recharge_Open_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Recharge_Data* GM_Recharge_Open_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Recharge_Data* GM_Recharge_Open_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Data >&
GM_Recharge_Open_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Data >*
GM_Recharge_Open_Return::mutable_m_data() {
  return &m_data_;
}

// required int32 m_card30_time = 2;
inline bool GM_Recharge_Open_Return::has_m_card30_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Recharge_Open_Return::set_has_m_card30_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Recharge_Open_Return::clear_has_m_card30_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Recharge_Open_Return::clear_m_card30_time() {
  m_card30_time_ = 0;
  clear_has_m_card30_time();
}
inline ::google::protobuf::int32 GM_Recharge_Open_Return::m_card30_time() const {
  return m_card30_time_;
}
inline void GM_Recharge_Open_Return::set_m_card30_time(::google::protobuf::int32 value) {
  set_has_m_card30_time();
  m_card30_time_ = value;
}

// required int32 m_state = 3;
inline bool GM_Recharge_Open_Return::has_m_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Recharge_Open_Return::set_has_m_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Recharge_Open_Return::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Recharge_Open_Return::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Recharge_Open_Return::m_state() const {
  return m_state_;
}
inline void GM_Recharge_Open_Return::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Walfare_Return

// repeated .GM_Shop_Walfare_Data m_data = 1;
inline int GM_Shop_Walfare_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Shop_Walfare_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Shop_Walfare_Data& GM_Shop_Walfare_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Shop_Walfare_Data* GM_Shop_Walfare_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Shop_Walfare_Data* GM_Shop_Walfare_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Shop_Walfare_Data >&
GM_Shop_Walfare_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Shop_Walfare_Data >*
GM_Shop_Walfare_Return::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// GM_Shop_Walfare_Data

// optional int32 m_objectid = 1;
inline bool GM_Shop_Walfare_Data::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Shop_Walfare_Data::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_objectid() const {
  return m_objectid_;
}
inline void GM_Shop_Walfare_Data::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// optional int32 m_cost_price = 2;
inline bool GM_Shop_Walfare_Data::has_m_cost_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_cost_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_cost_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Shop_Walfare_Data::clear_m_cost_price() {
  m_cost_price_ = 0;
  clear_has_m_cost_price();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_cost_price() const {
  return m_cost_price_;
}
inline void GM_Shop_Walfare_Data::set_m_cost_price(::google::protobuf::int32 value) {
  set_has_m_cost_price();
  m_cost_price_ = value;
}

// optional int32 m_cutprice = 3;
inline bool GM_Shop_Walfare_Data::has_m_cutprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_cutprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_cutprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Shop_Walfare_Data::clear_m_cutprice() {
  m_cutprice_ = 0;
  clear_has_m_cutprice();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_cutprice() const {
  return m_cutprice_;
}
inline void GM_Shop_Walfare_Data::set_m_cutprice(::google::protobuf::int32 value) {
  set_has_m_cutprice();
  m_cutprice_ = value;
}

// optional int32 m_vip_limit = 4;
inline bool GM_Shop_Walfare_Data::has_m_vip_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_vip_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_vip_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Shop_Walfare_Data::clear_m_vip_limit() {
  m_vip_limit_ = 0;
  clear_has_m_vip_limit();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_vip_limit() const {
  return m_vip_limit_;
}
inline void GM_Shop_Walfare_Data::set_m_vip_limit(::google::protobuf::int32 value) {
  set_has_m_vip_limit();
  m_vip_limit_ = value;
}

// optional int32 m_person_limit = 5;
inline bool GM_Shop_Walfare_Data::has_m_person_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_person_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_person_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Shop_Walfare_Data::clear_m_person_limit() {
  m_person_limit_ = 0;
  clear_has_m_person_limit();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_person_limit() const {
  return m_person_limit_;
}
inline void GM_Shop_Walfare_Data::set_m_person_limit(::google::protobuf::int32 value) {
  set_has_m_person_limit();
  m_person_limit_ = value;
}

// optional int32 m_person_count = 6;
inline bool GM_Shop_Walfare_Data::has_m_person_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_person_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_person_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Shop_Walfare_Data::clear_m_person_count() {
  m_person_count_ = 0;
  clear_has_m_person_count();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_person_count() const {
  return m_person_count_;
}
inline void GM_Shop_Walfare_Data::set_m_person_count(::google::protobuf::int32 value) {
  set_has_m_person_count();
  m_person_count_ = value;
}

// optional int32 m_server_limit = 7;
inline bool GM_Shop_Walfare_Data::has_m_server_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_server_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_server_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Shop_Walfare_Data::clear_m_server_limit() {
  m_server_limit_ = 0;
  clear_has_m_server_limit();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_server_limit() const {
  return m_server_limit_;
}
inline void GM_Shop_Walfare_Data::set_m_server_limit(::google::protobuf::int32 value) {
  set_has_m_server_limit();
  m_server_limit_ = value;
}

// optional int32 m_server_count = 8;
inline bool GM_Shop_Walfare_Data::has_m_server_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_server_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_server_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_Shop_Walfare_Data::clear_m_server_count() {
  m_server_count_ = 0;
  clear_has_m_server_count();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_server_count() const {
  return m_server_count_;
}
inline void GM_Shop_Walfare_Data::set_m_server_count(::google::protobuf::int32 value) {
  set_has_m_server_count();
  m_server_count_ = value;
}

// optional string m_descripte_1 = 9;
inline bool GM_Shop_Walfare_Data::has_m_descripte_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_descripte_1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_descripte_1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_Shop_Walfare_Data::clear_m_descripte_1() {
  if (m_descripte_1_ != &::google::protobuf::internal::kEmptyString) {
    m_descripte_1_->clear();
  }
  clear_has_m_descripte_1();
}
inline const ::std::string& GM_Shop_Walfare_Data::m_descripte_1() const {
  return *m_descripte_1_;
}
inline void GM_Shop_Walfare_Data::set_m_descripte_1(const ::std::string& value) {
  set_has_m_descripte_1();
  if (m_descripte_1_ == &::google::protobuf::internal::kEmptyString) {
    m_descripte_1_ = new ::std::string;
  }
  m_descripte_1_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_descripte_1(const char* value) {
  set_has_m_descripte_1();
  if (m_descripte_1_ == &::google::protobuf::internal::kEmptyString) {
    m_descripte_1_ = new ::std::string;
  }
  m_descripte_1_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_descripte_1(const char* value, size_t size) {
  set_has_m_descripte_1();
  if (m_descripte_1_ == &::google::protobuf::internal::kEmptyString) {
    m_descripte_1_ = new ::std::string;
  }
  m_descripte_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Walfare_Data::mutable_m_descripte_1() {
  set_has_m_descripte_1();
  if (m_descripte_1_ == &::google::protobuf::internal::kEmptyString) {
    m_descripte_1_ = new ::std::string;
  }
  return m_descripte_1_;
}
inline ::std::string* GM_Shop_Walfare_Data::release_m_descripte_1() {
  clear_has_m_descripte_1();
  if (m_descripte_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_descripte_1_;
    m_descripte_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Walfare_Data::set_allocated_m_descripte_1(::std::string* m_descripte_1) {
  if (m_descripte_1_ != &::google::protobuf::internal::kEmptyString) {
    delete m_descripte_1_;
  }
  if (m_descripte_1) {
    set_has_m_descripte_1();
    m_descripte_1_ = m_descripte_1;
  } else {
    clear_has_m_descripte_1();
    m_descripte_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_object_name = 10;
inline bool GM_Shop_Walfare_Data::has_m_object_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_object_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_object_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_Shop_Walfare_Data::clear_m_object_name() {
  if (m_object_name_ != &::google::protobuf::internal::kEmptyString) {
    m_object_name_->clear();
  }
  clear_has_m_object_name();
}
inline const ::std::string& GM_Shop_Walfare_Data::m_object_name() const {
  return *m_object_name_;
}
inline void GM_Shop_Walfare_Data::set_m_object_name(const ::std::string& value) {
  set_has_m_object_name();
  if (m_object_name_ == &::google::protobuf::internal::kEmptyString) {
    m_object_name_ = new ::std::string;
  }
  m_object_name_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_object_name(const char* value) {
  set_has_m_object_name();
  if (m_object_name_ == &::google::protobuf::internal::kEmptyString) {
    m_object_name_ = new ::std::string;
  }
  m_object_name_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_object_name(const char* value, size_t size) {
  set_has_m_object_name();
  if (m_object_name_ == &::google::protobuf::internal::kEmptyString) {
    m_object_name_ = new ::std::string;
  }
  m_object_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Walfare_Data::mutable_m_object_name() {
  set_has_m_object_name();
  if (m_object_name_ == &::google::protobuf::internal::kEmptyString) {
    m_object_name_ = new ::std::string;
  }
  return m_object_name_;
}
inline ::std::string* GM_Shop_Walfare_Data::release_m_object_name() {
  clear_has_m_object_name();
  if (m_object_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_object_name_;
    m_object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Walfare_Data::set_allocated_m_object_name(::std::string* m_object_name) {
  if (m_object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_object_name_;
  }
  if (m_object_name) {
    set_has_m_object_name();
    m_object_name_ = m_object_name;
  } else {
    clear_has_m_object_name();
    m_object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_object_icon = 11;
inline bool GM_Shop_Walfare_Data::has_m_object_icon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_object_icon() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_object_icon() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_Shop_Walfare_Data::clear_m_object_icon() {
  if (m_object_icon_ != &::google::protobuf::internal::kEmptyString) {
    m_object_icon_->clear();
  }
  clear_has_m_object_icon();
}
inline const ::std::string& GM_Shop_Walfare_Data::m_object_icon() const {
  return *m_object_icon_;
}
inline void GM_Shop_Walfare_Data::set_m_object_icon(const ::std::string& value) {
  set_has_m_object_icon();
  if (m_object_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_object_icon_ = new ::std::string;
  }
  m_object_icon_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_object_icon(const char* value) {
  set_has_m_object_icon();
  if (m_object_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_object_icon_ = new ::std::string;
  }
  m_object_icon_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_object_icon(const char* value, size_t size) {
  set_has_m_object_icon();
  if (m_object_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_object_icon_ = new ::std::string;
  }
  m_object_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Walfare_Data::mutable_m_object_icon() {
  set_has_m_object_icon();
  if (m_object_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_object_icon_ = new ::std::string;
  }
  return m_object_icon_;
}
inline ::std::string* GM_Shop_Walfare_Data::release_m_object_icon() {
  clear_has_m_object_icon();
  if (m_object_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_object_icon_;
    m_object_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Walfare_Data::set_allocated_m_object_icon(::std::string* m_object_icon) {
  if (m_object_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_object_icon_;
  }
  if (m_object_icon) {
    set_has_m_object_icon();
    m_object_icon_ = m_object_icon;
  } else {
    clear_has_m_object_icon();
    m_object_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_color = 12;
inline bool GM_Shop_Walfare_Data::has_m_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_color() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_color() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_Shop_Walfare_Data::clear_m_color() {
  m_color_ = 0;
  clear_has_m_color();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_color() const {
  return m_color_;
}
inline void GM_Shop_Walfare_Data::set_m_color(::google::protobuf::int32 value) {
  set_has_m_color();
  m_color_ = value;
}

// optional int32 m_bag_type = 13;
inline bool GM_Shop_Walfare_Data::has_m_bag_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_bag_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_bag_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GM_Shop_Walfare_Data::clear_m_bag_type() {
  m_bag_type_ = 0;
  clear_has_m_bag_type();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_bag_type() const {
  return m_bag_type_;
}
inline void GM_Shop_Walfare_Data::set_m_bag_type(::google::protobuf::int32 value) {
  set_has_m_bag_type();
  m_bag_type_ = value;
}

// optional int32 m_object_type = 14;
inline bool GM_Shop_Walfare_Data::has_m_object_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_object_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_object_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GM_Shop_Walfare_Data::clear_m_object_type() {
  m_object_type_ = 0;
  clear_has_m_object_type();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_object_type() const {
  return m_object_type_;
}
inline void GM_Shop_Walfare_Data::set_m_object_type(::google::protobuf::int32 value) {
  set_has_m_object_type();
  m_object_type_ = value;
}

// optional int32 m_profession = 15;
inline bool GM_Shop_Walfare_Data::has_m_profession() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_profession() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_profession() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GM_Shop_Walfare_Data::clear_m_profession() {
  m_profession_ = 0;
  clear_has_m_profession();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_profession() const {
  return m_profession_;
}
inline void GM_Shop_Walfare_Data::set_m_profession(::google::protobuf::int32 value) {
  set_has_m_profession();
  m_profession_ = value;
}

// optional int32 m_stacklimit = 16;
inline bool GM_Shop_Walfare_Data::has_m_stacklimit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_stacklimit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_stacklimit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GM_Shop_Walfare_Data::clear_m_stacklimit() {
  m_stacklimit_ = 0;
  clear_has_m_stacklimit();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_stacklimit() const {
  return m_stacklimit_;
}
inline void GM_Shop_Walfare_Data::set_m_stacklimit(::google::protobuf::int32 value) {
  set_has_m_stacklimit();
  m_stacklimit_ = value;
}

// optional int32 m_usedlevel = 17;
inline bool GM_Shop_Walfare_Data::has_m_usedlevel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_usedlevel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_usedlevel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GM_Shop_Walfare_Data::clear_m_usedlevel() {
  m_usedlevel_ = 0;
  clear_has_m_usedlevel();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_usedlevel() const {
  return m_usedlevel_;
}
inline void GM_Shop_Walfare_Data::set_m_usedlevel(::google::protobuf::int32 value) {
  set_has_m_usedlevel();
  m_usedlevel_ = value;
}

// optional int32 m_buygold = 18;
inline bool GM_Shop_Walfare_Data::has_m_buygold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_buygold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_buygold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GM_Shop_Walfare_Data::clear_m_buygold() {
  m_buygold_ = 0;
  clear_has_m_buygold();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_buygold() const {
  return m_buygold_;
}
inline void GM_Shop_Walfare_Data::set_m_buygold(::google::protobuf::int32 value) {
  set_has_m_buygold();
  m_buygold_ = value;
}

// optional int32 m_sellgold = 19;
inline bool GM_Shop_Walfare_Data::has_m_sellgold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_sellgold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_sellgold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GM_Shop_Walfare_Data::clear_m_sellgold() {
  m_sellgold_ = 0;
  clear_has_m_sellgold();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_sellgold() const {
  return m_sellgold_;
}
inline void GM_Shop_Walfare_Data::set_m_sellgold(::google::protobuf::int32 value) {
  set_has_m_sellgold();
  m_sellgold_ = value;
}

// optional string m_describe_2 = 20;
inline bool GM_Shop_Walfare_Data::has_m_describe_2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_describe_2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_describe_2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GM_Shop_Walfare_Data::clear_m_describe_2() {
  if (m_describe_2_ != &::google::protobuf::internal::kEmptyString) {
    m_describe_2_->clear();
  }
  clear_has_m_describe_2();
}
inline const ::std::string& GM_Shop_Walfare_Data::m_describe_2() const {
  return *m_describe_2_;
}
inline void GM_Shop_Walfare_Data::set_m_describe_2(const ::std::string& value) {
  set_has_m_describe_2();
  if (m_describe_2_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_2_ = new ::std::string;
  }
  m_describe_2_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_describe_2(const char* value) {
  set_has_m_describe_2();
  if (m_describe_2_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_2_ = new ::std::string;
  }
  m_describe_2_->assign(value);
}
inline void GM_Shop_Walfare_Data::set_m_describe_2(const char* value, size_t size) {
  set_has_m_describe_2();
  if (m_describe_2_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_2_ = new ::std::string;
  }
  m_describe_2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Walfare_Data::mutable_m_describe_2() {
  set_has_m_describe_2();
  if (m_describe_2_ == &::google::protobuf::internal::kEmptyString) {
    m_describe_2_ = new ::std::string;
  }
  return m_describe_2_;
}
inline ::std::string* GM_Shop_Walfare_Data::release_m_describe_2() {
  clear_has_m_describe_2();
  if (m_describe_2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_describe_2_;
    m_describe_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Walfare_Data::set_allocated_m_describe_2(::std::string* m_describe_2) {
  if (m_describe_2_ != &::google::protobuf::internal::kEmptyString) {
    delete m_describe_2_;
  }
  if (m_describe_2) {
    set_has_m_describe_2();
    m_describe_2_ = m_describe_2;
  } else {
    clear_has_m_describe_2();
    m_describe_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_objectrank = 21;
inline bool GM_Shop_Walfare_Data::has_m_objectrank() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GM_Shop_Walfare_Data::set_has_m_objectrank() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GM_Shop_Walfare_Data::clear_has_m_objectrank() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GM_Shop_Walfare_Data::clear_m_objectrank() {
  m_objectrank_ = 0;
  clear_has_m_objectrank();
}
inline ::google::protobuf::int32 GM_Shop_Walfare_Data::m_objectrank() const {
  return m_objectrank_;
}
inline void GM_Shop_Walfare_Data::set_m_objectrank(::google::protobuf::int32 value) {
  set_has_m_objectrank();
  m_objectrank_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Single_Walfare_Request

// required int32 m_objectid = 1;
inline bool GM_Shop_Single_Walfare_Request::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Shop_Single_Walfare_Request::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Shop_Single_Walfare_Request::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Shop_Single_Walfare_Request::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Shop_Single_Walfare_Request::m_objectid() const {
  return m_objectid_;
}
inline void GM_Shop_Single_Walfare_Request::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// -------------------------------------------------------------------

// GM_Single_Walfare_buy_Return

// required int32 m_state = 1;
inline bool GM_Single_Walfare_buy_Return::has_m_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Single_Walfare_buy_Return::set_has_m_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Single_Walfare_buy_Return::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Single_Walfare_buy_Return::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_Single_Walfare_buy_Return::m_state() const {
  return m_state_;
}
inline void GM_Single_Walfare_buy_Return::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional int32 m_objectid = 2;
inline bool GM_Single_Walfare_buy_Return::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Single_Walfare_buy_Return::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Single_Walfare_buy_Return::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Single_Walfare_buy_Return::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Single_Walfare_buy_Return::m_objectid() const {
  return m_objectid_;
}
inline void GM_Single_Walfare_buy_Return::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// optional int32 m_count = 3;
inline bool GM_Single_Walfare_buy_Return::has_m_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Single_Walfare_buy_Return::set_has_m_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Single_Walfare_buy_Return::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Single_Walfare_buy_Return::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 GM_Single_Walfare_buy_Return::m_count() const {
  return m_count_;
}
inline void GM_Single_Walfare_buy_Return::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// repeated .GM_Goods_Detail m_detail = 4;
inline int GM_Single_Walfare_buy_Return::m_detail_size() const {
  return m_detail_.size();
}
inline void GM_Single_Walfare_buy_Return::clear_m_detail() {
  m_detail_.Clear();
}
inline const ::GM_Goods_Detail& GM_Single_Walfare_buy_Return::m_detail(int index) const {
  return m_detail_.Get(index);
}
inline ::GM_Goods_Detail* GM_Single_Walfare_buy_Return::mutable_m_detail(int index) {
  return m_detail_.Mutable(index);
}
inline ::GM_Goods_Detail* GM_Single_Walfare_buy_Return::add_m_detail() {
  return m_detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Goods_Detail >&
GM_Single_Walfare_buy_Return::m_detail() const {
  return m_detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Goods_Detail >*
GM_Single_Walfare_buy_Return::mutable_m_detail() {
  return &m_detail_;
}

// -------------------------------------------------------------------

// GM_Goods_Detail

// required int32 m_objectid = 1;
inline bool GM_Goods_Detail::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Goods_Detail::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Goods_Detail::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Goods_Detail::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Goods_Detail::m_objectid() const {
  return m_objectid_;
}
inline void GM_Goods_Detail::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// optional int32 m_getnum = 2;
inline bool GM_Goods_Detail::has_m_getnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Goods_Detail::set_has_m_getnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Goods_Detail::clear_has_m_getnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Goods_Detail::clear_m_getnum() {
  m_getnum_ = 0;
  clear_has_m_getnum();
}
inline ::google::protobuf::int32 GM_Goods_Detail::m_getnum() const {
  return m_getnum_;
}
inline void GM_Goods_Detail::set_m_getnum(::google::protobuf::int32 value) {
  set_has_m_getnum();
  m_getnum_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Single_Walfare_Retrun

// required int32 m_giftid = 1;
inline bool GM_Shop_Single_Walfare_Retrun::has_m_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Shop_Single_Walfare_Retrun::set_has_m_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Shop_Single_Walfare_Retrun::clear_has_m_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Shop_Single_Walfare_Retrun::clear_m_giftid() {
  m_giftid_ = 0;
  clear_has_m_giftid();
}
inline ::google::protobuf::int32 GM_Shop_Single_Walfare_Retrun::m_giftid() const {
  return m_giftid_;
}
inline void GM_Shop_Single_Walfare_Retrun::set_m_giftid(::google::protobuf::int32 value) {
  set_has_m_giftid();
  m_giftid_ = value;
}

// repeated .GM_Single_Walfare_Data m_data = 2;
inline int GM_Shop_Single_Walfare_Retrun::m_data_size() const {
  return m_data_.size();
}
inline void GM_Shop_Single_Walfare_Retrun::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Single_Walfare_Data& GM_Shop_Single_Walfare_Retrun::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Single_Walfare_Data* GM_Shop_Single_Walfare_Retrun::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Single_Walfare_Data* GM_Shop_Single_Walfare_Retrun::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Single_Walfare_Data >&
GM_Shop_Single_Walfare_Retrun::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Single_Walfare_Data >*
GM_Shop_Single_Walfare_Retrun::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// GM_Single_Walfare_Data

// required int32 m_objectid = 1;
inline bool GM_Single_Walfare_Data::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Single_Walfare_Data::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Single_Walfare_Data::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Single_Walfare_Data::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Single_Walfare_Data::m_objectid() const {
  return m_objectid_;
}
inline void GM_Single_Walfare_Data::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// optional int32 m_get_mincount = 2;
inline bool GM_Single_Walfare_Data::has_m_get_mincount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Single_Walfare_Data::set_has_m_get_mincount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Single_Walfare_Data::clear_has_m_get_mincount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Single_Walfare_Data::clear_m_get_mincount() {
  m_get_mincount_ = 0;
  clear_has_m_get_mincount();
}
inline ::google::protobuf::int32 GM_Single_Walfare_Data::m_get_mincount() const {
  return m_get_mincount_;
}
inline void GM_Single_Walfare_Data::set_m_get_mincount(::google::protobuf::int32 value) {
  set_has_m_get_mincount();
  m_get_mincount_ = value;
}

// optional int32 m_get_maxcount = 3;
inline bool GM_Single_Walfare_Data::has_m_get_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Single_Walfare_Data::set_has_m_get_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Single_Walfare_Data::clear_has_m_get_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Single_Walfare_Data::clear_m_get_maxcount() {
  m_get_maxcount_ = 0;
  clear_has_m_get_maxcount();
}
inline ::google::protobuf::int32 GM_Single_Walfare_Data::m_get_maxcount() const {
  return m_get_maxcount_;
}
inline void GM_Single_Walfare_Data::set_m_get_maxcount(::google::protobuf::int32 value) {
  set_has_m_get_maxcount();
  m_get_maxcount_ = value;
}

// optional int32 m_get_ratio = 4;
inline bool GM_Single_Walfare_Data::has_m_get_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Single_Walfare_Data::set_has_m_get_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Single_Walfare_Data::clear_has_m_get_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Single_Walfare_Data::clear_m_get_ratio() {
  m_get_ratio_ = 0;
  clear_has_m_get_ratio();
}
inline ::google::protobuf::int32 GM_Single_Walfare_Data::m_get_ratio() const {
  return m_get_ratio_;
}
inline void GM_Single_Walfare_Data::set_m_get_ratio(::google::protobuf::int32 value) {
  set_has_m_get_ratio();
  m_get_ratio_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Object_Return

// repeated .GM_Shop_Object_Data m_data = 1;
inline int GM_Shop_Object_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Shop_Object_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Shop_Object_Data& GM_Shop_Object_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Shop_Object_Data* GM_Shop_Object_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Shop_Object_Data* GM_Shop_Object_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Shop_Object_Data >&
GM_Shop_Object_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Shop_Object_Data >*
GM_Shop_Object_Return::mutable_m_data() {
  return &m_data_;
}

// required int32 isnew = 2;
inline bool GM_Shop_Object_Return::has_isnew() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Shop_Object_Return::set_has_isnew() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Shop_Object_Return::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Shop_Object_Return::clear_isnew() {
  isnew_ = 0;
  clear_has_isnew();
}
inline ::google::protobuf::int32 GM_Shop_Object_Return::isnew() const {
  return isnew_;
}
inline void GM_Shop_Object_Return::set_isnew(::google::protobuf::int32 value) {
  set_has_isnew();
  isnew_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Object_Data

// optional int32 objectid = 1;
inline bool GM_Shop_Object_Data::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Shop_Object_Data::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Shop_Object_Data::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Shop_Object_Data::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::objectid() const {
  return objectid_;
}
inline void GM_Shop_Object_Data::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
}

// optional int32 objectrank = 2;
inline bool GM_Shop_Object_Data::has_objectrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Shop_Object_Data::set_has_objectrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Shop_Object_Data::clear_has_objectrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Shop_Object_Data::clear_objectrank() {
  objectrank_ = 0;
  clear_has_objectrank();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::objectrank() const {
  return objectrank_;
}
inline void GM_Shop_Object_Data::set_objectrank(::google::protobuf::int32 value) {
  set_has_objectrank();
  objectrank_ = value;
}

// optional int32 buy_type = 3;
inline bool GM_Shop_Object_Data::has_buy_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Shop_Object_Data::set_has_buy_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Shop_Object_Data::clear_has_buy_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Shop_Object_Data::clear_buy_type() {
  buy_type_ = 0;
  clear_has_buy_type();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::buy_type() const {
  return buy_type_;
}
inline void GM_Shop_Object_Data::set_buy_type(::google::protobuf::int32 value) {
  set_has_buy_type();
  buy_type_ = value;
}

// optional int32 vip_count = 4;
inline bool GM_Shop_Object_Data::has_vip_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Shop_Object_Data::set_has_vip_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Shop_Object_Data::clear_has_vip_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Shop_Object_Data::clear_vip_count() {
  vip_count_ = 0;
  clear_has_vip_count();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::vip_count() const {
  return vip_count_;
}
inline void GM_Shop_Object_Data::set_vip_count(::google::protobuf::int32 value) {
  set_has_vip_count();
  vip_count_ = value;
}

// optional string descripte = 5;
inline bool GM_Shop_Object_Data::has_descripte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Shop_Object_Data::set_has_descripte() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Shop_Object_Data::clear_has_descripte() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Shop_Object_Data::clear_descripte() {
  if (descripte_ != &::google::protobuf::internal::kEmptyString) {
    descripte_->clear();
  }
  clear_has_descripte();
}
inline const ::std::string& GM_Shop_Object_Data::descripte() const {
  return *descripte_;
}
inline void GM_Shop_Object_Data::set_descripte(const ::std::string& value) {
  set_has_descripte();
  if (descripte_ == &::google::protobuf::internal::kEmptyString) {
    descripte_ = new ::std::string;
  }
  descripte_->assign(value);
}
inline void GM_Shop_Object_Data::set_descripte(const char* value) {
  set_has_descripte();
  if (descripte_ == &::google::protobuf::internal::kEmptyString) {
    descripte_ = new ::std::string;
  }
  descripte_->assign(value);
}
inline void GM_Shop_Object_Data::set_descripte(const char* value, size_t size) {
  set_has_descripte();
  if (descripte_ == &::google::protobuf::internal::kEmptyString) {
    descripte_ = new ::std::string;
  }
  descripte_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Object_Data::mutable_descripte() {
  set_has_descripte();
  if (descripte_ == &::google::protobuf::internal::kEmptyString) {
    descripte_ = new ::std::string;
  }
  return descripte_;
}
inline ::std::string* GM_Shop_Object_Data::release_descripte() {
  clear_has_descripte();
  if (descripte_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = descripte_;
    descripte_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Object_Data::set_allocated_descripte(::std::string* descripte) {
  if (descripte_ != &::google::protobuf::internal::kEmptyString) {
    delete descripte_;
  }
  if (descripte) {
    set_has_descripte();
    descripte_ = descripte;
  } else {
    clear_has_descripte();
    descripte_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 now_count = 6;
inline bool GM_Shop_Object_Data::has_now_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Shop_Object_Data::set_has_now_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Shop_Object_Data::clear_has_now_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Shop_Object_Data::clear_now_count() {
  now_count_ = 0;
  clear_has_now_count();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::now_count() const {
  return now_count_;
}
inline void GM_Shop_Object_Data::set_now_count(::google::protobuf::int32 value) {
  set_has_now_count();
  now_count_ = value;
}

// optional int32 cost_price = 7;
inline bool GM_Shop_Object_Data::has_cost_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_Shop_Object_Data::set_has_cost_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_Shop_Object_Data::clear_has_cost_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_Shop_Object_Data::clear_cost_price() {
  cost_price_ = 0;
  clear_has_cost_price();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::cost_price() const {
  return cost_price_;
}
inline void GM_Shop_Object_Data::set_cost_price(::google::protobuf::int32 value) {
  set_has_cost_price();
  cost_price_ = value;
}

// optional int32 isdyn = 8;
inline bool GM_Shop_Object_Data::has_isdyn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_Shop_Object_Data::set_has_isdyn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_Shop_Object_Data::clear_has_isdyn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_Shop_Object_Data::clear_isdyn() {
  isdyn_ = 0;
  clear_has_isdyn();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::isdyn() const {
  return isdyn_;
}
inline void GM_Shop_Object_Data::set_isdyn(::google::protobuf::int32 value) {
  set_has_isdyn();
  isdyn_ = value;
}

// optional string objectname = 9;
inline bool GM_Shop_Object_Data::has_objectname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_Shop_Object_Data::set_has_objectname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_Shop_Object_Data::clear_has_objectname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_Shop_Object_Data::clear_objectname() {
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    objectname_->clear();
  }
  clear_has_objectname();
}
inline const ::std::string& GM_Shop_Object_Data::objectname() const {
  return *objectname_;
}
inline void GM_Shop_Object_Data::set_objectname(const ::std::string& value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
}
inline void GM_Shop_Object_Data::set_objectname(const char* value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
}
inline void GM_Shop_Object_Data::set_objectname(const char* value, size_t size) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Object_Data::mutable_objectname() {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    objectname_ = new ::std::string;
  }
  return objectname_;
}
inline ::std::string* GM_Shop_Object_Data::release_objectname() {
  clear_has_objectname();
  if (objectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objectname_;
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Object_Data::set_allocated_objectname(::std::string* objectname) {
  if (objectname_ != &::google::protobuf::internal::kEmptyString) {
    delete objectname_;
  }
  if (objectname) {
    set_has_objectname();
    objectname_ = objectname;
  } else {
    clear_has_objectname();
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string object_icon = 10;
inline bool GM_Shop_Object_Data::has_object_icon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_Shop_Object_Data::set_has_object_icon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_Shop_Object_Data::clear_has_object_icon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_Shop_Object_Data::clear_object_icon() {
  if (object_icon_ != &::google::protobuf::internal::kEmptyString) {
    object_icon_->clear();
  }
  clear_has_object_icon();
}
inline const ::std::string& GM_Shop_Object_Data::object_icon() const {
  return *object_icon_;
}
inline void GM_Shop_Object_Data::set_object_icon(const ::std::string& value) {
  set_has_object_icon();
  if (object_icon_ == &::google::protobuf::internal::kEmptyString) {
    object_icon_ = new ::std::string;
  }
  object_icon_->assign(value);
}
inline void GM_Shop_Object_Data::set_object_icon(const char* value) {
  set_has_object_icon();
  if (object_icon_ == &::google::protobuf::internal::kEmptyString) {
    object_icon_ = new ::std::string;
  }
  object_icon_->assign(value);
}
inline void GM_Shop_Object_Data::set_object_icon(const char* value, size_t size) {
  set_has_object_icon();
  if (object_icon_ == &::google::protobuf::internal::kEmptyString) {
    object_icon_ = new ::std::string;
  }
  object_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Shop_Object_Data::mutable_object_icon() {
  set_has_object_icon();
  if (object_icon_ == &::google::protobuf::internal::kEmptyString) {
    object_icon_ = new ::std::string;
  }
  return object_icon_;
}
inline ::std::string* GM_Shop_Object_Data::release_object_icon() {
  clear_has_object_icon();
  if (object_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_icon_;
    object_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Shop_Object_Data::set_allocated_object_icon(::std::string* object_icon) {
  if (object_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete object_icon_;
  }
  if (object_icon) {
    set_has_object_icon();
    object_icon_ = object_icon;
  } else {
    clear_has_object_icon();
    object_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 color = 11;
inline bool GM_Shop_Object_Data::has_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_Shop_Object_Data::set_has_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_Shop_Object_Data::clear_has_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_Shop_Object_Data::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::color() const {
  return color_;
}
inline void GM_Shop_Object_Data::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 maxvip_count = 12;
inline bool GM_Shop_Object_Data::has_maxvip_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GM_Shop_Object_Data::set_has_maxvip_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GM_Shop_Object_Data::clear_has_maxvip_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GM_Shop_Object_Data::clear_maxvip_count() {
  maxvip_count_ = 0;
  clear_has_maxvip_count();
}
inline ::google::protobuf::int32 GM_Shop_Object_Data::maxvip_count() const {
  return maxvip_count_;
}
inline void GM_Shop_Object_Data::set_maxvip_count(::google::protobuf::int32 value) {
  set_has_maxvip_count();
  maxvip_count_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Object_Buy_Request

// optional int32 m_objectid = 1;
inline bool GM_Shop_Object_Buy_Request::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Shop_Object_Buy_Request::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Shop_Object_Buy_Request::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Shop_Object_Buy_Request::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Shop_Object_Buy_Request::m_objectid() const {
  return m_objectid_;
}
inline void GM_Shop_Object_Buy_Request::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// optional int32 m_count = 2;
inline bool GM_Shop_Object_Buy_Request::has_m_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Shop_Object_Buy_Request::set_has_m_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Shop_Object_Buy_Request::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Shop_Object_Buy_Request::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 GM_Shop_Object_Buy_Request::m_count() const {
  return m_count_;
}
inline void GM_Shop_Object_Buy_Request::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
}

// -------------------------------------------------------------------

// GM_CreateOrder

// optional string orderid = 1;
inline bool GM_CreateOrder::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_CreateOrder::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_CreateOrder::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_CreateOrder::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& GM_CreateOrder::orderid() const {
  return *orderid_;
}
inline void GM_CreateOrder::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void GM_CreateOrder::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void GM_CreateOrder::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_CreateOrder::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* GM_CreateOrder::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_CreateOrder::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 platform = 2;
inline bool GM_CreateOrder::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_CreateOrder::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_CreateOrder::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_CreateOrder::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 GM_CreateOrder::platform() const {
  return platform_;
}
inline void GM_CreateOrder::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional string channel = 3;
inline bool GM_CreateOrder::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_CreateOrder::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_CreateOrder::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_CreateOrder::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& GM_CreateOrder::channel() const {
  return *channel_;
}
inline void GM_CreateOrder::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_CreateOrder::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void GM_CreateOrder::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_CreateOrder::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* GM_CreateOrder::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_CreateOrder::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 appid = 4;
inline bool GM_CreateOrder::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_CreateOrder::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_CreateOrder::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_CreateOrder::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 GM_CreateOrder::appid() const {
  return appid_;
}
inline void GM_CreateOrder::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
}

// optional float diamonds = 5;
inline bool GM_CreateOrder::has_diamonds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_CreateOrder::set_has_diamonds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_CreateOrder::clear_has_diamonds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_CreateOrder::clear_diamonds() {
  diamonds_ = 0;
  clear_has_diamonds();
}
inline float GM_CreateOrder::diamonds() const {
  return diamonds_;
}
inline void GM_CreateOrder::set_diamonds(float value) {
  set_has_diamonds();
  diamonds_ = value;
}

// optional int32 roleid = 6;
inline bool GM_CreateOrder::has_roleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_CreateOrder::set_has_roleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_CreateOrder::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_CreateOrder::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GM_CreateOrder::roleid() const {
  return roleid_;
}
inline void GM_CreateOrder::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional int32 serverid = 7;
inline bool GM_CreateOrder::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_CreateOrder::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_CreateOrder::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_CreateOrder::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GM_CreateOrder::serverid() const {
  return serverid_;
}
inline void GM_CreateOrder::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 accountid = 8;
inline bool GM_CreateOrder::has_accountid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_CreateOrder::set_has_accountid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_CreateOrder::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_CreateOrder::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 GM_CreateOrder::accountid() const {
  return accountid_;
}
inline void GM_CreateOrder::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional int32 productid = 9;
inline bool GM_CreateOrder::has_productid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_CreateOrder::set_has_productid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_CreateOrder::clear_has_productid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_CreateOrder::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 GM_CreateOrder::productid() const {
  return productid_;
}
inline void GM_CreateOrder::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
}

// -------------------------------------------------------------------

// GM_CreateOrder_Return

// optional string orderid = 1;
inline bool GM_CreateOrder_Return::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_CreateOrder_Return::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_CreateOrder_Return::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_CreateOrder_Return::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& GM_CreateOrder_Return::orderid() const {
  return *orderid_;
}
inline void GM_CreateOrder_Return::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void GM_CreateOrder_Return::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void GM_CreateOrder_Return::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_CreateOrder_Return::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* GM_CreateOrder_Return::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_CreateOrder_Return::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_result = 2;
inline bool GM_CreateOrder_Return::has_m_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_CreateOrder_Return::set_has_m_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_CreateOrder_Return::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_CreateOrder_Return::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_CreateOrder_Return::m_result() const {
  return m_result_;
}
inline void GM_CreateOrder_Return::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// optional int32 m_productid = 3;
inline bool GM_CreateOrder_Return::has_m_productid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_CreateOrder_Return::set_has_m_productid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_CreateOrder_Return::clear_has_m_productid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_CreateOrder_Return::clear_m_productid() {
  m_productid_ = 0;
  clear_has_m_productid();
}
inline ::google::protobuf::int32 GM_CreateOrder_Return::m_productid() const {
  return m_productid_;
}
inline void GM_CreateOrder_Return::set_m_productid(::google::protobuf::int32 value) {
  set_has_m_productid();
  m_productid_ = value;
}

// optional string m_strname = 4;
inline bool GM_CreateOrder_Return::has_m_strname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_CreateOrder_Return::set_has_m_strname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_CreateOrder_Return::clear_has_m_strname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_CreateOrder_Return::clear_m_strname() {
  if (m_strname_ != &::google::protobuf::internal::kEmptyString) {
    m_strname_->clear();
  }
  clear_has_m_strname();
}
inline const ::std::string& GM_CreateOrder_Return::m_strname() const {
  return *m_strname_;
}
inline void GM_CreateOrder_Return::set_m_strname(const ::std::string& value) {
  set_has_m_strname();
  if (m_strname_ == &::google::protobuf::internal::kEmptyString) {
    m_strname_ = new ::std::string;
  }
  m_strname_->assign(value);
}
inline void GM_CreateOrder_Return::set_m_strname(const char* value) {
  set_has_m_strname();
  if (m_strname_ == &::google::protobuf::internal::kEmptyString) {
    m_strname_ = new ::std::string;
  }
  m_strname_->assign(value);
}
inline void GM_CreateOrder_Return::set_m_strname(const char* value, size_t size) {
  set_has_m_strname();
  if (m_strname_ == &::google::protobuf::internal::kEmptyString) {
    m_strname_ = new ::std::string;
  }
  m_strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_CreateOrder_Return::mutable_m_strname() {
  set_has_m_strname();
  if (m_strname_ == &::google::protobuf::internal::kEmptyString) {
    m_strname_ = new ::std::string;
  }
  return m_strname_;
}
inline ::std::string* GM_CreateOrder_Return::release_m_strname() {
  clear_has_m_strname();
  if (m_strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_strname_;
    m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_CreateOrder_Return::set_allocated_m_strname(::std::string* m_strname) {
  if (m_strname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_strname_;
  }
  if (m_strname) {
    set_has_m_strname();
    m_strname_ = m_strname;
  } else {
    clear_has_m_strname();
    m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Shop_Obj_Single_Return

// repeated .GM_Shop_Obj_Single_Data m_data = 1;
inline int GM_Shop_Obj_Single_Return::m_data_size() const {
  return m_data_.size();
}
inline void GM_Shop_Obj_Single_Return::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Shop_Obj_Single_Data& GM_Shop_Obj_Single_Return::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Shop_Obj_Single_Data* GM_Shop_Obj_Single_Return::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Shop_Obj_Single_Data* GM_Shop_Obj_Single_Return::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Shop_Obj_Single_Data >&
GM_Shop_Obj_Single_Return::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Shop_Obj_Single_Data >*
GM_Shop_Obj_Single_Return::mutable_m_data() {
  return &m_data_;
}

// optional int32 m_objectid = 2;
inline bool GM_Shop_Obj_Single_Return::has_m_objectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Shop_Obj_Single_Return::set_has_m_objectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Shop_Obj_Single_Return::clear_has_m_objectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Shop_Obj_Single_Return::clear_m_objectid() {
  m_objectid_ = 0;
  clear_has_m_objectid();
}
inline ::google::protobuf::int32 GM_Shop_Obj_Single_Return::m_objectid() const {
  return m_objectid_;
}
inline void GM_Shop_Obj_Single_Return::set_m_objectid(::google::protobuf::int32 value) {
  set_has_m_objectid();
  m_objectid_ = value;
}

// -------------------------------------------------------------------

// GM_Shop_Obj_Single_Data

// optional int32 get_mintime = 1;
inline bool GM_Shop_Obj_Single_Data::has_get_mintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Shop_Obj_Single_Data::set_has_get_mintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Shop_Obj_Single_Data::clear_has_get_mintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Shop_Obj_Single_Data::clear_get_mintime() {
  get_mintime_ = 0;
  clear_has_get_mintime();
}
inline ::google::protobuf::int32 GM_Shop_Obj_Single_Data::get_mintime() const {
  return get_mintime_;
}
inline void GM_Shop_Obj_Single_Data::set_get_mintime(::google::protobuf::int32 value) {
  set_has_get_mintime();
  get_mintime_ = value;
}

// optional int32 get_maxtime = 2;
inline bool GM_Shop_Obj_Single_Data::has_get_maxtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Shop_Obj_Single_Data::set_has_get_maxtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Shop_Obj_Single_Data::clear_has_get_maxtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Shop_Obj_Single_Data::clear_get_maxtime() {
  get_maxtime_ = 0;
  clear_has_get_maxtime();
}
inline ::google::protobuf::int32 GM_Shop_Obj_Single_Data::get_maxtime() const {
  return get_maxtime_;
}
inline void GM_Shop_Obj_Single_Data::set_get_maxtime(::google::protobuf::int32 value) {
  set_has_get_maxtime();
  get_maxtime_ = value;
}

// optional int32 cost_price = 3;
inline bool GM_Shop_Obj_Single_Data::has_cost_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Shop_Obj_Single_Data::set_has_cost_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Shop_Obj_Single_Data::clear_has_cost_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Shop_Obj_Single_Data::clear_cost_price() {
  cost_price_ = 0;
  clear_has_cost_price();
}
inline ::google::protobuf::int32 GM_Shop_Obj_Single_Data::cost_price() const {
  return cost_price_;
}
inline void GM_Shop_Obj_Single_Data::set_cost_price(::google::protobuf::int32 value) {
  set_has_cost_price();
  cost_price_ = value;
}

// -------------------------------------------------------------------

// GM_Recharge_Over

// required int32 count = 1;
inline bool GM_Recharge_Over::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Recharge_Over::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Recharge_Over::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Recharge_Over::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GM_Recharge_Over::count() const {
  return count_;
}
inline void GM_Recharge_Over::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .GM_Recharge_Over_Data m_data = 2;
inline int GM_Recharge_Over::m_data_size() const {
  return m_data_.size();
}
inline void GM_Recharge_Over::clear_m_data() {
  m_data_.Clear();
}
inline const ::GM_Recharge_Over_Data& GM_Recharge_Over::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::GM_Recharge_Over_Data* GM_Recharge_Over::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::GM_Recharge_Over_Data* GM_Recharge_Over::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Over_Data >&
GM_Recharge_Over::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::GM_Recharge_Over_Data >*
GM_Recharge_Over::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// GM_Recharge_Over_Data

// optional int32 productid = 1;
inline bool GM_Recharge_Over_Data::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Recharge_Over_Data::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Recharge_Over_Data::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Recharge_Over_Data::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 GM_Recharge_Over_Data::productid() const {
  return productid_;
}
inline void GM_Recharge_Over_Data::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
}

// optional int32 get_diamond = 2;
inline bool GM_Recharge_Over_Data::has_get_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Recharge_Over_Data::set_has_get_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Recharge_Over_Data::clear_has_get_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Recharge_Over_Data::clear_get_diamond() {
  get_diamond_ = 0;
  clear_has_get_diamond();
}
inline ::google::protobuf::int32 GM_Recharge_Over_Data::get_diamond() const {
  return get_diamond_;
}
inline void GM_Recharge_Over_Data::set_get_diamond(::google::protobuf::int32 value) {
  set_has_get_diamond();
  get_diamond_ = value;
}

// optional int32 m_type = 3;
inline bool GM_Recharge_Over_Data::has_m_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Recharge_Over_Data::set_has_m_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Recharge_Over_Data::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Recharge_Over_Data::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 GM_Recharge_Over_Data::m_type() const {
  return m_type_;
}
inline void GM_Recharge_Over_Data::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 money = 4;
inline bool GM_Recharge_Over_Data::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Recharge_Over_Data::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Recharge_Over_Data::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Recharge_Over_Data::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 GM_Recharge_Over_Data::money() const {
  return money_;
}
inline void GM_Recharge_Over_Data::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional string m_descirb = 5;
inline bool GM_Recharge_Over_Data::has_m_descirb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Recharge_Over_Data::set_has_m_descirb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Recharge_Over_Data::clear_has_m_descirb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Recharge_Over_Data::clear_m_descirb() {
  if (m_descirb_ != &::google::protobuf::internal::kEmptyString) {
    m_descirb_->clear();
  }
  clear_has_m_descirb();
}
inline const ::std::string& GM_Recharge_Over_Data::m_descirb() const {
  return *m_descirb_;
}
inline void GM_Recharge_Over_Data::set_m_descirb(const ::std::string& value) {
  set_has_m_descirb();
  if (m_descirb_ == &::google::protobuf::internal::kEmptyString) {
    m_descirb_ = new ::std::string;
  }
  m_descirb_->assign(value);
}
inline void GM_Recharge_Over_Data::set_m_descirb(const char* value) {
  set_has_m_descirb();
  if (m_descirb_ == &::google::protobuf::internal::kEmptyString) {
    m_descirb_ = new ::std::string;
  }
  m_descirb_->assign(value);
}
inline void GM_Recharge_Over_Data::set_m_descirb(const char* value, size_t size) {
  set_has_m_descirb();
  if (m_descirb_ == &::google::protobuf::internal::kEmptyString) {
    m_descirb_ = new ::std::string;
  }
  m_descirb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Over_Data::mutable_m_descirb() {
  set_has_m_descirb();
  if (m_descirb_ == &::google::protobuf::internal::kEmptyString) {
    m_descirb_ = new ::std::string;
  }
  return m_descirb_;
}
inline ::std::string* GM_Recharge_Over_Data::release_m_descirb() {
  clear_has_m_descirb();
  if (m_descirb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_descirb_;
    m_descirb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Over_Data::set_allocated_m_descirb(::std::string* m_descirb) {
  if (m_descirb_ != &::google::protobuf::internal::kEmptyString) {
    delete m_descirb_;
  }
  if (m_descirb) {
    set_has_m_descirb();
    m_descirb_ = m_descirb;
  } else {
    clear_has_m_descirb();
    m_descirb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_orderid = 6;
inline bool GM_Recharge_Over_Data::has_m_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_Recharge_Over_Data::set_has_m_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_Recharge_Over_Data::clear_has_m_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_Recharge_Over_Data::clear_m_orderid() {
  if (m_orderid_ != &::google::protobuf::internal::kEmptyString) {
    m_orderid_->clear();
  }
  clear_has_m_orderid();
}
inline const ::std::string& GM_Recharge_Over_Data::m_orderid() const {
  return *m_orderid_;
}
inline void GM_Recharge_Over_Data::set_m_orderid(const ::std::string& value) {
  set_has_m_orderid();
  if (m_orderid_ == &::google::protobuf::internal::kEmptyString) {
    m_orderid_ = new ::std::string;
  }
  m_orderid_->assign(value);
}
inline void GM_Recharge_Over_Data::set_m_orderid(const char* value) {
  set_has_m_orderid();
  if (m_orderid_ == &::google::protobuf::internal::kEmptyString) {
    m_orderid_ = new ::std::string;
  }
  m_orderid_->assign(value);
}
inline void GM_Recharge_Over_Data::set_m_orderid(const char* value, size_t size) {
  set_has_m_orderid();
  if (m_orderid_ == &::google::protobuf::internal::kEmptyString) {
    m_orderid_ = new ::std::string;
  }
  m_orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_Recharge_Over_Data::mutable_m_orderid() {
  set_has_m_orderid();
  if (m_orderid_ == &::google::protobuf::internal::kEmptyString) {
    m_orderid_ = new ::std::string;
  }
  return m_orderid_;
}
inline ::std::string* GM_Recharge_Over_Data::release_m_orderid() {
  clear_has_m_orderid();
  if (m_orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_orderid_;
    m_orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_Recharge_Over_Data::set_allocated_m_orderid(::std::string* m_orderid) {
  if (m_orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_orderid_;
  }
  if (m_orderid) {
    set_has_m_orderid();
    m_orderid_ = m_orderid;
  } else {
    clear_has_m_orderid();
    m_orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_Single_Object_Return

// optional int32 m_buytime = 1;
inline bool GM_Single_Object_Return::has_m_buytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_Single_Object_Return::set_has_m_buytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_Single_Object_Return::clear_has_m_buytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_Single_Object_Return::clear_m_buytime() {
  m_buytime_ = 0;
  clear_has_m_buytime();
}
inline ::google::protobuf::int32 GM_Single_Object_Return::m_buytime() const {
  return m_buytime_;
}
inline void GM_Single_Object_Return::set_m_buytime(::google::protobuf::int32 value) {
  set_has_m_buytime();
  m_buytime_ = value;
}

// optional int32 m_price = 2;
inline bool GM_Single_Object_Return::has_m_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_Single_Object_Return::set_has_m_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_Single_Object_Return::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_Single_Object_Return::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 GM_Single_Object_Return::m_price() const {
  return m_price_;
}
inline void GM_Single_Object_Return::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 vip_count = 3;
inline bool GM_Single_Object_Return::has_vip_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_Single_Object_Return::set_has_vip_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_Single_Object_Return::clear_has_vip_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_Single_Object_Return::clear_vip_count() {
  vip_count_ = 0;
  clear_has_vip_count();
}
inline ::google::protobuf::int32 GM_Single_Object_Return::vip_count() const {
  return vip_count_;
}
inline void GM_Single_Object_Return::set_vip_count(::google::protobuf::int32 value) {
  set_has_vip_count();
  vip_count_ = value;
}

// optional int32 now_count = 4;
inline bool GM_Single_Object_Return::has_now_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_Single_Object_Return::set_has_now_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_Single_Object_Return::clear_has_now_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_Single_Object_Return::clear_now_count() {
  now_count_ = 0;
  clear_has_now_count();
}
inline ::google::protobuf::int32 GM_Single_Object_Return::now_count() const {
  return now_count_;
}
inline void GM_Single_Object_Return::set_now_count(::google::protobuf::int32 value) {
  set_has_now_count();
  now_count_ = value;
}

// optional int32 maxvip_count = 5;
inline bool GM_Single_Object_Return::has_maxvip_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_Single_Object_Return::set_has_maxvip_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_Single_Object_Return::clear_has_maxvip_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_Single_Object_Return::clear_maxvip_count() {
  maxvip_count_ = 0;
  clear_has_maxvip_count();
}
inline ::google::protobuf::int32 GM_Single_Object_Return::maxvip_count() const {
  return maxvip_count_;
}
inline void GM_Single_Object_Return::set_maxvip_count(::google::protobuf::int32 value) {
  set_has_maxvip_count();
  maxvip_count_ = value;
}

// -------------------------------------------------------------------

// GM_GET_ZYOrder_Request

// optional string m_userid = 1;
inline bool GM_GET_ZYOrder_Request::has_m_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GET_ZYOrder_Request::clear_m_userid() {
  if (m_userid_ != &::google::protobuf::internal::kEmptyString) {
    m_userid_->clear();
  }
  clear_has_m_userid();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_userid() const {
  return *m_userid_;
}
inline void GM_GET_ZYOrder_Request::set_m_userid(const ::std::string& value) {
  set_has_m_userid();
  if (m_userid_ == &::google::protobuf::internal::kEmptyString) {
    m_userid_ = new ::std::string;
  }
  m_userid_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_userid(const char* value) {
  set_has_m_userid();
  if (m_userid_ == &::google::protobuf::internal::kEmptyString) {
    m_userid_ = new ::std::string;
  }
  m_userid_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_userid(const char* value, size_t size) {
  set_has_m_userid();
  if (m_userid_ == &::google::protobuf::internal::kEmptyString) {
    m_userid_ = new ::std::string;
  }
  m_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_userid() {
  set_has_m_userid();
  if (m_userid_ == &::google::protobuf::internal::kEmptyString) {
    m_userid_ = new ::std::string;
  }
  return m_userid_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_userid() {
  clear_has_m_userid();
  if (m_userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_userid_;
    m_userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_userid(::std::string* m_userid) {
  if (m_userid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_userid_;
  }
  if (m_userid) {
    set_has_m_userid();
    m_userid_ = m_userid;
  } else {
    clear_has_m_userid();
    m_userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_productid = 2;
inline bool GM_GET_ZYOrder_Request::has_m_productid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_productid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_productid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GET_ZYOrder_Request::clear_m_productid() {
  if (m_productid_ != &::google::protobuf::internal::kEmptyString) {
    m_productid_->clear();
  }
  clear_has_m_productid();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_productid() const {
  return *m_productid_;
}
inline void GM_GET_ZYOrder_Request::set_m_productid(const ::std::string& value) {
  set_has_m_productid();
  if (m_productid_ == &::google::protobuf::internal::kEmptyString) {
    m_productid_ = new ::std::string;
  }
  m_productid_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_productid(const char* value) {
  set_has_m_productid();
  if (m_productid_ == &::google::protobuf::internal::kEmptyString) {
    m_productid_ = new ::std::string;
  }
  m_productid_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_productid(const char* value, size_t size) {
  set_has_m_productid();
  if (m_productid_ == &::google::protobuf::internal::kEmptyString) {
    m_productid_ = new ::std::string;
  }
  m_productid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_productid() {
  set_has_m_productid();
  if (m_productid_ == &::google::protobuf::internal::kEmptyString) {
    m_productid_ = new ::std::string;
  }
  return m_productid_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_productid() {
  clear_has_m_productid();
  if (m_productid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_productid_;
    m_productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_productid(::std::string* m_productid) {
  if (m_productid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_productid_;
  }
  if (m_productid) {
    set_has_m_productid();
    m_productid_ = m_productid;
  } else {
    clear_has_m_productid();
    m_productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_productname = 3;
inline bool GM_GET_ZYOrder_Request::has_m_productname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_productname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_productname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GET_ZYOrder_Request::clear_m_productname() {
  if (m_productname_ != &::google::protobuf::internal::kEmptyString) {
    m_productname_->clear();
  }
  clear_has_m_productname();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_productname() const {
  return *m_productname_;
}
inline void GM_GET_ZYOrder_Request::set_m_productname(const ::std::string& value) {
  set_has_m_productname();
  if (m_productname_ == &::google::protobuf::internal::kEmptyString) {
    m_productname_ = new ::std::string;
  }
  m_productname_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_productname(const char* value) {
  set_has_m_productname();
  if (m_productname_ == &::google::protobuf::internal::kEmptyString) {
    m_productname_ = new ::std::string;
  }
  m_productname_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_productname(const char* value, size_t size) {
  set_has_m_productname();
  if (m_productname_ == &::google::protobuf::internal::kEmptyString) {
    m_productname_ = new ::std::string;
  }
  m_productname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_productname() {
  set_has_m_productname();
  if (m_productname_ == &::google::protobuf::internal::kEmptyString) {
    m_productname_ = new ::std::string;
  }
  return m_productname_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_productname() {
  clear_has_m_productname();
  if (m_productname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_productname_;
    m_productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_productname(::std::string* m_productname) {
  if (m_productname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_productname_;
  }
  if (m_productname) {
    set_has_m_productname();
    m_productname_ = m_productname;
  } else {
    clear_has_m_productname();
    m_productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_productdesc = 4;
inline bool GM_GET_ZYOrder_Request::has_m_productdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_productdesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_productdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GET_ZYOrder_Request::clear_m_productdesc() {
  if (m_productdesc_ != &::google::protobuf::internal::kEmptyString) {
    m_productdesc_->clear();
  }
  clear_has_m_productdesc();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_productdesc() const {
  return *m_productdesc_;
}
inline void GM_GET_ZYOrder_Request::set_m_productdesc(const ::std::string& value) {
  set_has_m_productdesc();
  if (m_productdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_productdesc_ = new ::std::string;
  }
  m_productdesc_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_productdesc(const char* value) {
  set_has_m_productdesc();
  if (m_productdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_productdesc_ = new ::std::string;
  }
  m_productdesc_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_productdesc(const char* value, size_t size) {
  set_has_m_productdesc();
  if (m_productdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_productdesc_ = new ::std::string;
  }
  m_productdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_productdesc() {
  set_has_m_productdesc();
  if (m_productdesc_ == &::google::protobuf::internal::kEmptyString) {
    m_productdesc_ = new ::std::string;
  }
  return m_productdesc_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_productdesc() {
  clear_has_m_productdesc();
  if (m_productdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_productdesc_;
    m_productdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_productdesc(::std::string* m_productdesc) {
  if (m_productdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_productdesc_;
  }
  if (m_productdesc) {
    set_has_m_productdesc();
    m_productdesc_ = m_productdesc;
  } else {
    clear_has_m_productdesc();
    m_productdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_extension = 5;
inline bool GM_GET_ZYOrder_Request::has_m_extension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_extension() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_extension() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_GET_ZYOrder_Request::clear_m_extension() {
  if (m_extension_ != &::google::protobuf::internal::kEmptyString) {
    m_extension_->clear();
  }
  clear_has_m_extension();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_extension() const {
  return *m_extension_;
}
inline void GM_GET_ZYOrder_Request::set_m_extension(const ::std::string& value) {
  set_has_m_extension();
  if (m_extension_ == &::google::protobuf::internal::kEmptyString) {
    m_extension_ = new ::std::string;
  }
  m_extension_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_extension(const char* value) {
  set_has_m_extension();
  if (m_extension_ == &::google::protobuf::internal::kEmptyString) {
    m_extension_ = new ::std::string;
  }
  m_extension_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_extension(const char* value, size_t size) {
  set_has_m_extension();
  if (m_extension_ == &::google::protobuf::internal::kEmptyString) {
    m_extension_ = new ::std::string;
  }
  m_extension_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_extension() {
  set_has_m_extension();
  if (m_extension_ == &::google::protobuf::internal::kEmptyString) {
    m_extension_ = new ::std::string;
  }
  return m_extension_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_extension() {
  clear_has_m_extension();
  if (m_extension_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_extension_;
    m_extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_extension(::std::string* m_extension) {
  if (m_extension_ != &::google::protobuf::internal::kEmptyString) {
    delete m_extension_;
  }
  if (m_extension) {
    set_has_m_extension();
    m_extension_ = m_extension;
  } else {
    clear_has_m_extension();
    m_extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_ec_pp = 6;
inline bool GM_GET_ZYOrder_Request::has_m_ec_pp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_ec_pp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_ec_pp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_GET_ZYOrder_Request::clear_m_ec_pp() {
  if (m_ec_pp_ != &::google::protobuf::internal::kEmptyString) {
    m_ec_pp_->clear();
  }
  clear_has_m_ec_pp();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_ec_pp() const {
  return *m_ec_pp_;
}
inline void GM_GET_ZYOrder_Request::set_m_ec_pp(const ::std::string& value) {
  set_has_m_ec_pp();
  if (m_ec_pp_ == &::google::protobuf::internal::kEmptyString) {
    m_ec_pp_ = new ::std::string;
  }
  m_ec_pp_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_ec_pp(const char* value) {
  set_has_m_ec_pp();
  if (m_ec_pp_ == &::google::protobuf::internal::kEmptyString) {
    m_ec_pp_ = new ::std::string;
  }
  m_ec_pp_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_ec_pp(const char* value, size_t size) {
  set_has_m_ec_pp();
  if (m_ec_pp_ == &::google::protobuf::internal::kEmptyString) {
    m_ec_pp_ = new ::std::string;
  }
  m_ec_pp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_ec_pp() {
  set_has_m_ec_pp();
  if (m_ec_pp_ == &::google::protobuf::internal::kEmptyString) {
    m_ec_pp_ = new ::std::string;
  }
  return m_ec_pp_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_ec_pp() {
  clear_has_m_ec_pp();
  if (m_ec_pp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_ec_pp_;
    m_ec_pp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_ec_pp(::std::string* m_ec_pp) {
  if (m_ec_pp_ != &::google::protobuf::internal::kEmptyString) {
    delete m_ec_pp_;
  }
  if (m_ec_pp) {
    set_has_m_ec_pp();
    m_ec_pp_ = m_ec_pp;
  } else {
    clear_has_m_ec_pp();
    m_ec_pp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_roleid = 7;
inline bool GM_GET_ZYOrder_Request::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GM_GET_ZYOrder_Request::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_GET_ZYOrder_Request::m_roleid() const {
  return m_roleid_;
}
inline void GM_GET_ZYOrder_Request::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional string m_rolename = 8;
inline bool GM_GET_ZYOrder_Request::has_m_rolename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_rolename() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_rolename() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GM_GET_ZYOrder_Request::clear_m_rolename() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    m_rolename_->clear();
  }
  clear_has_m_rolename();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_rolename() const {
  return *m_rolename_;
}
inline void GM_GET_ZYOrder_Request::set_m_rolename(const ::std::string& value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_rolename(const char* value) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_rolename(const char* value, size_t size) {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  m_rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_rolename() {
  set_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    m_rolename_ = new ::std::string;
  }
  return m_rolename_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_rolename() {
  clear_has_m_rolename();
  if (m_rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rolename_;
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_rolename(::std::string* m_rolename) {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (m_rolename) {
    set_has_m_rolename();
    m_rolename_ = m_rolename;
  } else {
    clear_has_m_rolename();
    m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float m_money = 9;
inline bool GM_GET_ZYOrder_Request::has_m_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GM_GET_ZYOrder_Request::clear_m_money() {
  m_money_ = 0;
  clear_has_m_money();
}
inline float GM_GET_ZYOrder_Request::m_money() const {
  return m_money_;
}
inline void GM_GET_ZYOrder_Request::set_m_money(float value) {
  set_has_m_money();
  m_money_ = value;
}

// optional int32 m_serverid = 10;
inline bool GM_GET_ZYOrder_Request::has_m_serverid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_serverid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_serverid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GM_GET_ZYOrder_Request::clear_m_serverid() {
  m_serverid_ = 0;
  clear_has_m_serverid();
}
inline ::google::protobuf::int32 GM_GET_ZYOrder_Request::m_serverid() const {
  return m_serverid_;
}
inline void GM_GET_ZYOrder_Request::set_m_serverid(::google::protobuf::int32 value) {
  set_has_m_serverid();
  m_serverid_ = value;
}

// optional string m_servername = 11;
inline bool GM_GET_ZYOrder_Request::has_m_servername() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GM_GET_ZYOrder_Request::set_has_m_servername() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GM_GET_ZYOrder_Request::clear_has_m_servername() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GM_GET_ZYOrder_Request::clear_m_servername() {
  if (m_servername_ != &::google::protobuf::internal::kEmptyString) {
    m_servername_->clear();
  }
  clear_has_m_servername();
}
inline const ::std::string& GM_GET_ZYOrder_Request::m_servername() const {
  return *m_servername_;
}
inline void GM_GET_ZYOrder_Request::set_m_servername(const ::std::string& value) {
  set_has_m_servername();
  if (m_servername_ == &::google::protobuf::internal::kEmptyString) {
    m_servername_ = new ::std::string;
  }
  m_servername_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_servername(const char* value) {
  set_has_m_servername();
  if (m_servername_ == &::google::protobuf::internal::kEmptyString) {
    m_servername_ = new ::std::string;
  }
  m_servername_->assign(value);
}
inline void GM_GET_ZYOrder_Request::set_m_servername(const char* value, size_t size) {
  set_has_m_servername();
  if (m_servername_ == &::google::protobuf::internal::kEmptyString) {
    m_servername_ = new ::std::string;
  }
  m_servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Request::mutable_m_servername() {
  set_has_m_servername();
  if (m_servername_ == &::google::protobuf::internal::kEmptyString) {
    m_servername_ = new ::std::string;
  }
  return m_servername_;
}
inline ::std::string* GM_GET_ZYOrder_Request::release_m_servername() {
  clear_has_m_servername();
  if (m_servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_servername_;
    m_servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Request::set_allocated_m_servername(::std::string* m_servername) {
  if (m_servername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_servername_;
  }
  if (m_servername) {
    set_has_m_servername();
    m_servername_ = m_servername;
  } else {
    clear_has_m_servername();
    m_servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GET_ZYOrder_Return

// required int32 m_state = 1;
inline bool GM_GET_ZYOrder_Return::has_m_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GET_ZYOrder_Return::set_has_m_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GET_ZYOrder_Return::clear_has_m_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GET_ZYOrder_Return::clear_m_state() {
  m_state_ = 0;
  clear_has_m_state();
}
inline ::google::protobuf::int32 GM_GET_ZYOrder_Return::m_state() const {
  return m_state_;
}
inline void GM_GET_ZYOrder_Return::set_m_state(::google::protobuf::int32 value) {
  set_has_m_state();
  m_state_ = value;
}

// optional string m_orderdata = 2;
inline bool GM_GET_ZYOrder_Return::has_m_orderdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GET_ZYOrder_Return::set_has_m_orderdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GET_ZYOrder_Return::clear_has_m_orderdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GET_ZYOrder_Return::clear_m_orderdata() {
  if (m_orderdata_ != &::google::protobuf::internal::kEmptyString) {
    m_orderdata_->clear();
  }
  clear_has_m_orderdata();
}
inline const ::std::string& GM_GET_ZYOrder_Return::m_orderdata() const {
  return *m_orderdata_;
}
inline void GM_GET_ZYOrder_Return::set_m_orderdata(const ::std::string& value) {
  set_has_m_orderdata();
  if (m_orderdata_ == &::google::protobuf::internal::kEmptyString) {
    m_orderdata_ = new ::std::string;
  }
  m_orderdata_->assign(value);
}
inline void GM_GET_ZYOrder_Return::set_m_orderdata(const char* value) {
  set_has_m_orderdata();
  if (m_orderdata_ == &::google::protobuf::internal::kEmptyString) {
    m_orderdata_ = new ::std::string;
  }
  m_orderdata_->assign(value);
}
inline void GM_GET_ZYOrder_Return::set_m_orderdata(const char* value, size_t size) {
  set_has_m_orderdata();
  if (m_orderdata_ == &::google::protobuf::internal::kEmptyString) {
    m_orderdata_ = new ::std::string;
  }
  m_orderdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Return::mutable_m_orderdata() {
  set_has_m_orderdata();
  if (m_orderdata_ == &::google::protobuf::internal::kEmptyString) {
    m_orderdata_ = new ::std::string;
  }
  return m_orderdata_;
}
inline ::std::string* GM_GET_ZYOrder_Return::release_m_orderdata() {
  clear_has_m_orderdata();
  if (m_orderdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_orderdata_;
    m_orderdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Return::set_allocated_m_orderdata(::std::string* m_orderdata) {
  if (m_orderdata_ != &::google::protobuf::internal::kEmptyString) {
    delete m_orderdata_;
  }
  if (m_orderdata) {
    set_has_m_orderdata();
    m_orderdata_ = m_orderdata;
  } else {
    clear_has_m_orderdata();
    m_orderdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userData = 3;
inline bool GM_GET_ZYOrder_Return::has_userdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GET_ZYOrder_Return::set_has_userdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GET_ZYOrder_Return::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GET_ZYOrder_Return::clear_userdata() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    userdata_->clear();
  }
  clear_has_userdata();
}
inline const ::std::string& GM_GET_ZYOrder_Return::userdata() const {
  return *userdata_;
}
inline void GM_GET_ZYOrder_Return::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
}
inline void GM_GET_ZYOrder_Return::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
}
inline void GM_GET_ZYOrder_Return::set_userdata(const char* value, size_t size) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GET_ZYOrder_Return::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  return userdata_;
}
inline ::std::string* GM_GET_ZYOrder_Return::release_userdata() {
  clear_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GET_ZYOrder_Return::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_recharge_2etxt__INCLUDED
