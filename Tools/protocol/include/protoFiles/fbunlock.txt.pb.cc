// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fbunlock.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fbunlock.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_UnlockReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UnlockReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_UnlockFB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_UnlockFB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChestsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChestsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_cChests_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_cChests_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_StarRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_StarRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_StarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_StarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SweepResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SweepResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SweepObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SweepObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FBNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FBNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ChestsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ChestsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SanHuangReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SanHuangReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_SanHuang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_SanHuang_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fbunlock_2etxt() {
  protobuf_AddDesc_fbunlock_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fbunlock.txt");
  GOOGLE_CHECK(file != NULL);
  GM_UnlockReturn_descriptor_ = file->message_type(0);
  static const int GM_UnlockReturn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockReturn, m_lastfbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockReturn, m_maxelite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockReturn, m_fbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockReturn, m_chestsdata_),
  };
  GM_UnlockReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UnlockReturn_descriptor_,
      GM_UnlockReturn::default_instance_,
      GM_UnlockReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UnlockReturn));
  GM_UnlockFB_descriptor_ = file->message_type(1);
  static const int GM_UnlockFB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, m_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, m_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, m_maxfight_),
  };
  GM_UnlockFB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_UnlockFB_descriptor_,
      GM_UnlockFB::default_instance_,
      GM_UnlockFB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_UnlockFB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_UnlockFB));
  GM_ChestsData_descriptor_ = file->message_type(2);
  static const int GM_ChestsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsData, m_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsData, m_starcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsData, m_chests_),
  };
  GM_ChestsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChestsData_descriptor_,
      GM_ChestsData::default_instance_,
      GM_ChestsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChestsData));
  GM_cChests_descriptor_ = file->message_type(3);
  static const int GM_cChests_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_cChests, m_chestsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_cChests, m_state_),
  };
  GM_cChests_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_cChests_descriptor_,
      GM_cChests::default_instance_,
      GM_cChests_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_cChests, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_cChests, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_cChests));
  GM_StarRank_descriptor_ = file->message_type(4);
  static const int GM_StarRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarRank, m_myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarRank, m_mystar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarRank, m_data_),
  };
  GM_StarRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_StarRank_descriptor_,
      GM_StarRank::default_instance_,
      GM_StarRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_StarRank));
  GM_StarInfo_descriptor_ = file->message_type(5);
  static const int GM_StarInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, m_rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, m_starcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, m_profession_),
  };
  GM_StarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_StarInfo_descriptor_,
      GM_StarInfo::default_instance_,
      GM_StarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_StarInfo));
  GM_SweepResult_descriptor_ = file->message_type(6);
  static const int GM_SweepResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepResult, m_objects_),
  };
  GM_SweepResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SweepResult_descriptor_,
      GM_SweepResult::default_instance_,
      GM_SweepResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SweepResult));
  GM_SweepObject_descriptor_ = file->message_type(7);
  static const int GM_SweepObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepObject, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepObject, m_count_),
  };
  GM_SweepObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SweepObject_descriptor_,
      GM_SweepObject::default_instance_,
      GM_SweepObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SweepObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SweepObject));
  GM_FBNotify_descriptor_ = file->message_type(8);
  static const int GM_FBNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBNotify, m_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBNotify, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBNotify, m_starcount_),
  };
  GM_FBNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FBNotify_descriptor_,
      GM_FBNotify::default_instance_,
      GM_FBNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FBNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FBNotify));
  GM_ChestsNotify_descriptor_ = file->message_type(9);
  static const int GM_ChestsNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsNotify, m_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsNotify, m_chestsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsNotify, m_state_),
  };
  GM_ChestsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ChestsNotify_descriptor_,
      GM_ChestsNotify::default_instance_,
      GM_ChestsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ChestsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ChestsNotify));
  GM_SanHuangReturn_descriptor_ = file->message_type(10);
  static const int GM_SanHuangReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuangReturn, m_totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuangReturn, m_fbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuangReturn, matchtime_),
  };
  GM_SanHuangReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SanHuangReturn_descriptor_,
      GM_SanHuangReturn::default_instance_,
      GM_SanHuangReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuangReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuangReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SanHuangReturn));
  GM_SanHuang_descriptor_ = file->message_type(11);
  static const int GM_SanHuang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuang, m_fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuang, m_fightcount_),
  };
  GM_SanHuang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_SanHuang_descriptor_,
      GM_SanHuang::default_instance_,
      GM_SanHuang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_SanHuang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_SanHuang));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fbunlock_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UnlockReturn_descriptor_, &GM_UnlockReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_UnlockFB_descriptor_, &GM_UnlockFB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChestsData_descriptor_, &GM_ChestsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_cChests_descriptor_, &GM_cChests::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_StarRank_descriptor_, &GM_StarRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_StarInfo_descriptor_, &GM_StarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SweepResult_descriptor_, &GM_SweepResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SweepObject_descriptor_, &GM_SweepObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FBNotify_descriptor_, &GM_FBNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ChestsNotify_descriptor_, &GM_ChestsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SanHuangReturn_descriptor_, &GM_SanHuangReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_SanHuang_descriptor_, &GM_SanHuang::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fbunlock_2etxt() {
  delete GM_UnlockReturn::default_instance_;
  delete GM_UnlockReturn_reflection_;
  delete GM_UnlockFB::default_instance_;
  delete GM_UnlockFB_reflection_;
  delete GM_ChestsData::default_instance_;
  delete GM_ChestsData_reflection_;
  delete GM_cChests::default_instance_;
  delete GM_cChests_reflection_;
  delete GM_StarRank::default_instance_;
  delete GM_StarRank_reflection_;
  delete GM_StarInfo::default_instance_;
  delete GM_StarInfo_reflection_;
  delete GM_SweepResult::default_instance_;
  delete GM_SweepResult_reflection_;
  delete GM_SweepObject::default_instance_;
  delete GM_SweepObject_reflection_;
  delete GM_FBNotify::default_instance_;
  delete GM_FBNotify_reflection_;
  delete GM_ChestsNotify::default_instance_;
  delete GM_ChestsNotify_reflection_;
  delete GM_SanHuangReturn::default_instance_;
  delete GM_SanHuangReturn_reflection_;
  delete GM_SanHuang::default_instance_;
  delete GM_SanHuang_reflection_;
}

void protobuf_AddDesc_fbunlock_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014fbunlock.txt\"\177\n\017GM_UnlockReturn\022\022\n\nm_l"
    "astfbid\030\001 \002(\005\022\022\n\nm_maxelite\030\002 \002(\005\022\036\n\010m_f"
    "bdata\030\003 \003(\0132\014.GM_UnlockFB\022$\n\014m_chestsDat"
    "a\030\004 \003(\0132\016.GM_ChestsData\"g\n\013GM_UnlockFB\022\023"
    "\n\013m_chapterId\030\001 \002(\005\022\016\n\006m_fbid\030\002 \002(\005\022\016\n\006m"
    "_star\030\003 \002(\005\022\017\n\007m_fight\030\004 \002(\005\022\022\n\nm_maxfig"
    "ht\030\005 \002(\005\"X\n\rGM_ChestsData\022\023\n\013m_chapterId"
    "\030\001 \002(\005\022\023\n\013m_starCount\030\002 \002(\005\022\035\n\010m_chests\030"
    "\003 \003(\0132\013.GM_cChests\"1\n\nGM_cChests\022\022\n\nm_ch"
    "estsId\030\001 \002(\005\022\017\n\007m_state\030\002 \002(\005\"O\n\013GM_Star"
    "Rank\022\020\n\010m_myrank\030\001 \002(\005\022\020\n\010m_mystar\030\002 \002(\005"
    "\022\034\n\006m_data\030\003 \003(\0132\014.GM_StarInfo\"p\n\013GM_Sta"
    "rInfo\022\022\n\nm_rolename\030\001 \002(\t\022\020\n\010m_rolelv\030\002 "
    "\002(\005\022\023\n\013m_starcount\030\003 \002(\005\022\020\n\010m_roleid\030\004 \002"
    "(\005\022\024\n\014m_profession\030\005 \002(\005\"F\n\016GM_SweepResu"
    "lt\022\020\n\010m_result\030\001 \002(\005\022\"\n\tm_objects\030\002 \003(\0132"
    "\017.GM_SweepObject\"2\n\016GM_SweepObject\022\017\n\007m_"
    "objid\030\001 \002(\005\022\017\n\007m_count\030\002 \002(\005\"G\n\013GM_FBNot"
    "ify\022\023\n\013m_chapterId\030\001 \002(\005\022\016\n\006m_fbId\030\002 \002(\005"
    "\022\023\n\013m_starcount\030\003 \002(\005\"K\n\017GM_ChestsNotify"
    "\022\023\n\013m_chapterId\030\001 \002(\005\022\022\n\nm_chestsId\030\002 \002("
    "\005\022\017\n\007m_state\030\003 \002(\005\"\\\n\021GM_SanHuangReturn\022"
    "\024\n\014m_totalcount\030\001 \002(\005\022\036\n\010m_fbdata\030\002 \003(\0132"
    "\014.GM_SanHuang\022\021\n\tmatchtime\030\005 \001(\005\"3\n\013GM_S"
    "anHuang\022\016\n\006m_fbid\030\001 \002(\005\022\024\n\014m_fightcount\030"
    "\002 \002(\005", 1005);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fbunlock.txt", &protobuf_RegisterTypes);
  GM_UnlockReturn::default_instance_ = new GM_UnlockReturn();
  GM_UnlockFB::default_instance_ = new GM_UnlockFB();
  GM_ChestsData::default_instance_ = new GM_ChestsData();
  GM_cChests::default_instance_ = new GM_cChests();
  GM_StarRank::default_instance_ = new GM_StarRank();
  GM_StarInfo::default_instance_ = new GM_StarInfo();
  GM_SweepResult::default_instance_ = new GM_SweepResult();
  GM_SweepObject::default_instance_ = new GM_SweepObject();
  GM_FBNotify::default_instance_ = new GM_FBNotify();
  GM_ChestsNotify::default_instance_ = new GM_ChestsNotify();
  GM_SanHuangReturn::default_instance_ = new GM_SanHuangReturn();
  GM_SanHuang::default_instance_ = new GM_SanHuang();
  GM_UnlockReturn::default_instance_->InitAsDefaultInstance();
  GM_UnlockFB::default_instance_->InitAsDefaultInstance();
  GM_ChestsData::default_instance_->InitAsDefaultInstance();
  GM_cChests::default_instance_->InitAsDefaultInstance();
  GM_StarRank::default_instance_->InitAsDefaultInstance();
  GM_StarInfo::default_instance_->InitAsDefaultInstance();
  GM_SweepResult::default_instance_->InitAsDefaultInstance();
  GM_SweepObject::default_instance_->InitAsDefaultInstance();
  GM_FBNotify::default_instance_->InitAsDefaultInstance();
  GM_ChestsNotify::default_instance_->InitAsDefaultInstance();
  GM_SanHuangReturn::default_instance_->InitAsDefaultInstance();
  GM_SanHuang::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fbunlock_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fbunlock_2etxt {
  StaticDescriptorInitializer_fbunlock_2etxt() {
    protobuf_AddDesc_fbunlock_2etxt();
  }
} static_descriptor_initializer_fbunlock_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_UnlockReturn::kMLastfbidFieldNumber;
const int GM_UnlockReturn::kMMaxeliteFieldNumber;
const int GM_UnlockReturn::kMFbdataFieldNumber;
const int GM_UnlockReturn::kMChestsDataFieldNumber;
#endif  // !_MSC_VER

GM_UnlockReturn::GM_UnlockReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UnlockReturn::InitAsDefaultInstance() {
}

GM_UnlockReturn::GM_UnlockReturn(const GM_UnlockReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UnlockReturn::SharedCtor() {
  _cached_size_ = 0;
  m_lastfbid_ = 0;
  m_maxelite_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UnlockReturn::~GM_UnlockReturn() {
  SharedDtor();
}

void GM_UnlockReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UnlockReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UnlockReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UnlockReturn_descriptor_;
}

const GM_UnlockReturn& GM_UnlockReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_UnlockReturn* GM_UnlockReturn::default_instance_ = NULL;

GM_UnlockReturn* GM_UnlockReturn::New() const {
  return new GM_UnlockReturn;
}

void GM_UnlockReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lastfbid_ = 0;
    m_maxelite_ = 0;
  }
  m_fbdata_.Clear();
  m_chestsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UnlockReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_lastfbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lastfbid_)));
          set_has_m_lastfbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_maxelite;
        break;
      }

      // required int32 m_maxelite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxelite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxelite_)));
          set_has_m_maxelite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_fbdata;
        break;
      }

      // repeated .GM_UnlockFB m_fbdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_fbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_fbdata;
        if (input->ExpectTag(34)) goto parse_m_chestsData;
        break;
      }

      // repeated .GM_ChestsData m_chestsData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_chestsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_chestsdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_chestsData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UnlockReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_lastfbid = 1;
  if (has_m_lastfbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lastfbid(), output);
  }

  // required int32 m_maxelite = 2;
  if (has_m_maxelite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_maxelite(), output);
  }

  // repeated .GM_UnlockFB m_fbdata = 3;
  for (int i = 0; i < this->m_fbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_fbdata(i), output);
  }

  // repeated .GM_ChestsData m_chestsData = 4;
  for (int i = 0; i < this->m_chestsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_chestsdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UnlockReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_lastfbid = 1;
  if (has_m_lastfbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lastfbid(), target);
  }

  // required int32 m_maxelite = 2;
  if (has_m_maxelite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_maxelite(), target);
  }

  // repeated .GM_UnlockFB m_fbdata = 3;
  for (int i = 0; i < this->m_fbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_fbdata(i), target);
  }

  // repeated .GM_ChestsData m_chestsData = 4;
  for (int i = 0; i < this->m_chestsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_chestsdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UnlockReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_lastfbid = 1;
    if (has_m_lastfbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lastfbid());
    }

    // required int32 m_maxelite = 2;
    if (has_m_maxelite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxelite());
    }

  }
  // repeated .GM_UnlockFB m_fbdata = 3;
  total_size += 1 * this->m_fbdata_size();
  for (int i = 0; i < this->m_fbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_fbdata(i));
  }

  // repeated .GM_ChestsData m_chestsData = 4;
  total_size += 1 * this->m_chestsdata_size();
  for (int i = 0; i < this->m_chestsdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_chestsdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UnlockReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UnlockReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UnlockReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UnlockReturn::MergeFrom(const GM_UnlockReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_fbdata_.MergeFrom(from.m_fbdata_);
  m_chestsdata_.MergeFrom(from.m_chestsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lastfbid()) {
      set_m_lastfbid(from.m_lastfbid());
    }
    if (from.has_m_maxelite()) {
      set_m_maxelite(from.m_maxelite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UnlockReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UnlockReturn::CopyFrom(const GM_UnlockReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UnlockReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < m_fbdata_size(); i++) {
    if (!this->m_fbdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_chestsdata_size(); i++) {
    if (!this->m_chestsdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_UnlockReturn::Swap(GM_UnlockReturn* other) {
  if (other != this) {
    std::swap(m_lastfbid_, other->m_lastfbid_);
    std::swap(m_maxelite_, other->m_maxelite_);
    m_fbdata_.Swap(&other->m_fbdata_);
    m_chestsdata_.Swap(&other->m_chestsdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UnlockReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UnlockReturn_descriptor_;
  metadata.reflection = GM_UnlockReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_UnlockFB::kMChapterIdFieldNumber;
const int GM_UnlockFB::kMFbidFieldNumber;
const int GM_UnlockFB::kMStarFieldNumber;
const int GM_UnlockFB::kMFightFieldNumber;
const int GM_UnlockFB::kMMaxfightFieldNumber;
#endif  // !_MSC_VER

GM_UnlockFB::GM_UnlockFB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_UnlockFB::InitAsDefaultInstance() {
}

GM_UnlockFB::GM_UnlockFB(const GM_UnlockFB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_UnlockFB::SharedCtor() {
  _cached_size_ = 0;
  m_chapterid_ = 0;
  m_fbid_ = 0;
  m_star_ = 0;
  m_fight_ = 0;
  m_maxfight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_UnlockFB::~GM_UnlockFB() {
  SharedDtor();
}

void GM_UnlockFB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_UnlockFB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_UnlockFB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_UnlockFB_descriptor_;
}

const GM_UnlockFB& GM_UnlockFB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_UnlockFB* GM_UnlockFB::default_instance_ = NULL;

GM_UnlockFB* GM_UnlockFB::New() const {
  return new GM_UnlockFB;
}

void GM_UnlockFB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chapterid_ = 0;
    m_fbid_ = 0;
    m_star_ = 0;
    m_fight_ = 0;
    m_maxfight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_UnlockFB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_chapterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chapterid_)));
          set_has_m_chapterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fbid;
        break;
      }

      // required int32 m_fbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_star;
        break;
      }

      // required int32 m_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_fight;
        break;
      }

      // required int32 m_fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fight_)));
          set_has_m_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_maxfight;
        break;
      }

      // required int32 m_maxfight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxfight_)));
          set_has_m_maxfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_UnlockFB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_chapterid(), output);
  }

  // required int32 m_fbid = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // required int32 m_star = 3;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_star(), output);
  }

  // required int32 m_fight = 4;
  if (has_m_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_fight(), output);
  }

  // required int32 m_maxfight = 5;
  if (has_m_maxfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_maxfight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_UnlockFB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_chapterid(), target);
  }

  // required int32 m_fbid = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // required int32 m_star = 3;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_star(), target);
  }

  // required int32 m_fight = 4;
  if (has_m_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_fight(), target);
  }

  // required int32 m_maxfight = 5;
  if (has_m_maxfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_maxfight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_UnlockFB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_chapterId = 1;
    if (has_m_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chapterid());
    }

    // required int32 m_fbid = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // required int32 m_star = 3;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // required int32 m_fight = 4;
    if (has_m_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fight());
    }

    // required int32 m_maxfight = 5;
    if (has_m_maxfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxfight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_UnlockFB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_UnlockFB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_UnlockFB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_UnlockFB::MergeFrom(const GM_UnlockFB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chapterid()) {
      set_m_chapterid(from.m_chapterid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_fight()) {
      set_m_fight(from.m_fight());
    }
    if (from.has_m_maxfight()) {
      set_m_maxfight(from.m_maxfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_UnlockFB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_UnlockFB::CopyFrom(const GM_UnlockFB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_UnlockFB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GM_UnlockFB::Swap(GM_UnlockFB* other) {
  if (other != this) {
    std::swap(m_chapterid_, other->m_chapterid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_fight_, other->m_fight_);
    std::swap(m_maxfight_, other->m_maxfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_UnlockFB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_UnlockFB_descriptor_;
  metadata.reflection = GM_UnlockFB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChestsData::kMChapterIdFieldNumber;
const int GM_ChestsData::kMStarCountFieldNumber;
const int GM_ChestsData::kMChestsFieldNumber;
#endif  // !_MSC_VER

GM_ChestsData::GM_ChestsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChestsData::InitAsDefaultInstance() {
}

GM_ChestsData::GM_ChestsData(const GM_ChestsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChestsData::SharedCtor() {
  _cached_size_ = 0;
  m_chapterid_ = 0;
  m_starcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChestsData::~GM_ChestsData() {
  SharedDtor();
}

void GM_ChestsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ChestsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChestsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChestsData_descriptor_;
}

const GM_ChestsData& GM_ChestsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_ChestsData* GM_ChestsData::default_instance_ = NULL;

GM_ChestsData* GM_ChestsData::New() const {
  return new GM_ChestsData;
}

void GM_ChestsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chapterid_ = 0;
    m_starcount_ = 0;
  }
  m_chests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChestsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_chapterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chapterid_)));
          set_has_m_chapterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_starCount;
        break;
      }

      // required int32 m_starCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starcount_)));
          set_has_m_starcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_chests;
        break;
      }

      // repeated .GM_cChests m_chests = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_chests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_chests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_chests;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChestsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_chapterid(), output);
  }

  // required int32 m_starCount = 2;
  if (has_m_starcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_starcount(), output);
  }

  // repeated .GM_cChests m_chests = 3;
  for (int i = 0; i < this->m_chests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_chests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChestsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_chapterid(), target);
  }

  // required int32 m_starCount = 2;
  if (has_m_starcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_starcount(), target);
  }

  // repeated .GM_cChests m_chests = 3;
  for (int i = 0; i < this->m_chests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_chests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChestsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_chapterId = 1;
    if (has_m_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chapterid());
    }

    // required int32 m_starCount = 2;
    if (has_m_starcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starcount());
    }

  }
  // repeated .GM_cChests m_chests = 3;
  total_size += 1 * this->m_chests_size();
  for (int i = 0; i < this->m_chests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_chests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChestsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChestsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChestsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChestsData::MergeFrom(const GM_ChestsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_chests_.MergeFrom(from.m_chests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chapterid()) {
      set_m_chapterid(from.m_chapterid());
    }
    if (from.has_m_starcount()) {
      set_m_starcount(from.m_starcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChestsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChestsData::CopyFrom(const GM_ChestsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChestsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < m_chests_size(); i++) {
    if (!this->m_chests(i).IsInitialized()) return false;
  }
  return true;
}

void GM_ChestsData::Swap(GM_ChestsData* other) {
  if (other != this) {
    std::swap(m_chapterid_, other->m_chapterid_);
    std::swap(m_starcount_, other->m_starcount_);
    m_chests_.Swap(&other->m_chests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChestsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChestsData_descriptor_;
  metadata.reflection = GM_ChestsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_cChests::kMChestsIdFieldNumber;
const int GM_cChests::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_cChests::GM_cChests()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_cChests::InitAsDefaultInstance() {
}

GM_cChests::GM_cChests(const GM_cChests& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_cChests::SharedCtor() {
  _cached_size_ = 0;
  m_chestsid_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_cChests::~GM_cChests() {
  SharedDtor();
}

void GM_cChests::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_cChests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_cChests::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_cChests_descriptor_;
}

const GM_cChests& GM_cChests::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_cChests* GM_cChests::default_instance_ = NULL;

GM_cChests* GM_cChests::New() const {
  return new GM_cChests;
}

void GM_cChests::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chestsid_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_cChests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_chestsId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chestsid_)));
          set_has_m_chestsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_state;
        break;
      }

      // required int32 m_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_cChests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_chestsId = 1;
  if (has_m_chestsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_chestsid(), output);
  }

  // required int32 m_state = 2;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_cChests::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_chestsId = 1;
  if (has_m_chestsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_chestsid(), target);
  }

  // required int32 m_state = 2;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_cChests::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_chestsId = 1;
    if (has_m_chestsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chestsid());
    }

    // required int32 m_state = 2;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_cChests::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_cChests* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_cChests*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_cChests::MergeFrom(const GM_cChests& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chestsid()) {
      set_m_chestsid(from.m_chestsid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_cChests::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_cChests::CopyFrom(const GM_cChests& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_cChests::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_cChests::Swap(GM_cChests* other) {
  if (other != this) {
    std::swap(m_chestsid_, other->m_chestsid_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_cChests::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_cChests_descriptor_;
  metadata.reflection = GM_cChests_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_StarRank::kMMyrankFieldNumber;
const int GM_StarRank::kMMystarFieldNumber;
const int GM_StarRank::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_StarRank::GM_StarRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_StarRank::InitAsDefaultInstance() {
}

GM_StarRank::GM_StarRank(const GM_StarRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_StarRank::SharedCtor() {
  _cached_size_ = 0;
  m_myrank_ = 0;
  m_mystar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_StarRank::~GM_StarRank() {
  SharedDtor();
}

void GM_StarRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_StarRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_StarRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_StarRank_descriptor_;
}

const GM_StarRank& GM_StarRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_StarRank* GM_StarRank::default_instance_ = NULL;

GM_StarRank* GM_StarRank::New() const {
  return new GM_StarRank;
}

void GM_StarRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_myrank_ = 0;
    m_mystar_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_StarRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_myrank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_myrank_)));
          set_has_m_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_mystar;
        break;
      }

      // required int32 m_mystar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mystar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mystar_)));
          set_has_m_mystar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_data;
        break;
      }

      // repeated .GM_StarInfo m_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_StarRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_myrank = 1;
  if (has_m_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_myrank(), output);
  }

  // required int32 m_mystar = 2;
  if (has_m_mystar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_mystar(), output);
  }

  // repeated .GM_StarInfo m_data = 3;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_StarRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_myrank = 1;
  if (has_m_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_myrank(), target);
  }

  // required int32 m_mystar = 2;
  if (has_m_mystar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_mystar(), target);
  }

  // repeated .GM_StarInfo m_data = 3;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_StarRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_myrank = 1;
    if (has_m_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_myrank());
    }

    // required int32 m_mystar = 2;
    if (has_m_mystar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mystar());
    }

  }
  // repeated .GM_StarInfo m_data = 3;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_StarRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_StarRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_StarRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_StarRank::MergeFrom(const GM_StarRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_myrank()) {
      set_m_myrank(from.m_myrank());
    }
    if (from.has_m_mystar()) {
      set_m_mystar(from.m_mystar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_StarRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_StarRank::CopyFrom(const GM_StarRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_StarRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_StarRank::Swap(GM_StarRank* other) {
  if (other != this) {
    std::swap(m_myrank_, other->m_myrank_);
    std::swap(m_mystar_, other->m_mystar_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_StarRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_StarRank_descriptor_;
  metadata.reflection = GM_StarRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_StarInfo::kMRolenameFieldNumber;
const int GM_StarInfo::kMRolelvFieldNumber;
const int GM_StarInfo::kMStarcountFieldNumber;
const int GM_StarInfo::kMRoleidFieldNumber;
const int GM_StarInfo::kMProfessionFieldNumber;
#endif  // !_MSC_VER

GM_StarInfo::GM_StarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_StarInfo::InitAsDefaultInstance() {
}

GM_StarInfo::GM_StarInfo(const GM_StarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_StarInfo::SharedCtor() {
  _cached_size_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rolelv_ = 0;
  m_starcount_ = 0;
  m_roleid_ = 0;
  m_profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_StarInfo::~GM_StarInfo() {
  SharedDtor();
}

void GM_StarInfo::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_StarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_StarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_StarInfo_descriptor_;
}

const GM_StarInfo& GM_StarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_StarInfo* GM_StarInfo::default_instance_ = NULL;

GM_StarInfo* GM_StarInfo::New() const {
  return new GM_StarInfo;
}

void GM_StarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_rolelv_ = 0;
    m_starcount_ = 0;
    m_roleid_ = 0;
    m_profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_StarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rolelv;
        break;
      }

      // required int32 m_rolelv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelv_)));
          set_has_m_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starcount;
        break;
      }

      // required int32 m_starcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starcount_)));
          set_has_m_starcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_roleid;
        break;
      }

      // required int32 m_roleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_profession;
        break;
      }

      // required int32 m_profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_StarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_rolename(), output);
  }

  // required int32 m_rolelv = 2;
  if (has_m_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rolelv(), output);
  }

  // required int32 m_starcount = 3;
  if (has_m_starcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starcount(), output);
  }

  // required int32 m_roleid = 4;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_roleid(), output);
  }

  // required int32 m_profession = 5;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_StarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_rolename = 1;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_rolename(), target);
  }

  // required int32 m_rolelv = 2;
  if (has_m_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rolelv(), target);
  }

  // required int32 m_starcount = 3;
  if (has_m_starcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starcount(), target);
  }

  // required int32 m_roleid = 4;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_roleid(), target);
  }

  // required int32 m_profession = 5;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_StarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_rolename = 1;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // required int32 m_rolelv = 2;
    if (has_m_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelv());
    }

    // required int32 m_starcount = 3;
    if (has_m_starcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starcount());
    }

    // required int32 m_roleid = 4;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int32 m_profession = 5;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_StarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_StarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_StarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_StarInfo::MergeFrom(const GM_StarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_rolelv()) {
      set_m_rolelv(from.m_rolelv());
    }
    if (from.has_m_starcount()) {
      set_m_starcount(from.m_starcount());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_StarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_StarInfo::CopyFrom(const GM_StarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_StarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GM_StarInfo::Swap(GM_StarInfo* other) {
  if (other != this) {
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_rolelv_, other->m_rolelv_);
    std::swap(m_starcount_, other->m_starcount_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_StarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_StarInfo_descriptor_;
  metadata.reflection = GM_StarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SweepResult::kMResultFieldNumber;
const int GM_SweepResult::kMObjectsFieldNumber;
#endif  // !_MSC_VER

GM_SweepResult::GM_SweepResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SweepResult::InitAsDefaultInstance() {
}

GM_SweepResult::GM_SweepResult(const GM_SweepResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SweepResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SweepResult::~GM_SweepResult() {
  SharedDtor();
}

void GM_SweepResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SweepResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SweepResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SweepResult_descriptor_;
}

const GM_SweepResult& GM_SweepResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_SweepResult* GM_SweepResult::default_instance_ = NULL;

GM_SweepResult* GM_SweepResult::New() const {
  return new GM_SweepResult;
}

void GM_SweepResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  m_objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SweepResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_objects;
        break;
      }

      // repeated .GM_SweepObject m_objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SweepResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated .GM_SweepObject m_objects = 2;
  for (int i = 0; i < this->m_objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SweepResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated .GM_SweepObject m_objects = 2;
  for (int i = 0; i < this->m_objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SweepResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated .GM_SweepObject m_objects = 2;
  total_size += 1 * this->m_objects_size();
  for (int i = 0; i < this->m_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SweepResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SweepResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SweepResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SweepResult::MergeFrom(const GM_SweepResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_objects_.MergeFrom(from.m_objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SweepResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SweepResult::CopyFrom(const GM_SweepResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SweepResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_objects_size(); i++) {
    if (!this->m_objects(i).IsInitialized()) return false;
  }
  return true;
}

void GM_SweepResult::Swap(GM_SweepResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    m_objects_.Swap(&other->m_objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SweepResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SweepResult_descriptor_;
  metadata.reflection = GM_SweepResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SweepObject::kMObjidFieldNumber;
const int GM_SweepObject::kMCountFieldNumber;
#endif  // !_MSC_VER

GM_SweepObject::GM_SweepObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SweepObject::InitAsDefaultInstance() {
}

GM_SweepObject::GM_SweepObject(const GM_SweepObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SweepObject::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SweepObject::~GM_SweepObject() {
  SharedDtor();
}

void GM_SweepObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SweepObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SweepObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SweepObject_descriptor_;
}

const GM_SweepObject& GM_SweepObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_SweepObject* GM_SweepObject::default_instance_ = NULL;

GM_SweepObject* GM_SweepObject::New() const {
  return new GM_SweepObject;
}

void GM_SweepObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SweepObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_count;
        break;
      }

      // required int32 m_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SweepObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_count = 2;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SweepObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_count = 2;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SweepObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_count = 2;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SweepObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SweepObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SweepObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SweepObject::MergeFrom(const GM_SweepObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SweepObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SweepObject::CopyFrom(const GM_SweepObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SweepObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_SweepObject::Swap(GM_SweepObject* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_count_, other->m_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SweepObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SweepObject_descriptor_;
  metadata.reflection = GM_SweepObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FBNotify::kMChapterIdFieldNumber;
const int GM_FBNotify::kMFbIdFieldNumber;
const int GM_FBNotify::kMStarcountFieldNumber;
#endif  // !_MSC_VER

GM_FBNotify::GM_FBNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FBNotify::InitAsDefaultInstance() {
}

GM_FBNotify::GM_FBNotify(const GM_FBNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FBNotify::SharedCtor() {
  _cached_size_ = 0;
  m_chapterid_ = 0;
  m_fbid_ = 0;
  m_starcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FBNotify::~GM_FBNotify() {
  SharedDtor();
}

void GM_FBNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FBNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FBNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FBNotify_descriptor_;
}

const GM_FBNotify& GM_FBNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_FBNotify* GM_FBNotify::default_instance_ = NULL;

GM_FBNotify* GM_FBNotify::New() const {
  return new GM_FBNotify;
}

void GM_FBNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chapterid_ = 0;
    m_fbid_ = 0;
    m_starcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FBNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_chapterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chapterid_)));
          set_has_m_chapterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fbId;
        break;
      }

      // required int32 m_fbId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starcount;
        break;
      }

      // required int32 m_starcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starcount_)));
          set_has_m_starcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FBNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_chapterid(), output);
  }

  // required int32 m_fbId = 2;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbid(), output);
  }

  // required int32 m_starcount = 3;
  if (has_m_starcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FBNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_chapterid(), target);
  }

  // required int32 m_fbId = 2;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbid(), target);
  }

  // required int32 m_starcount = 3;
  if (has_m_starcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FBNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_chapterId = 1;
    if (has_m_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chapterid());
    }

    // required int32 m_fbId = 2;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // required int32 m_starcount = 3;
    if (has_m_starcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FBNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FBNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FBNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FBNotify::MergeFrom(const GM_FBNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chapterid()) {
      set_m_chapterid(from.m_chapterid());
    }
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_starcount()) {
      set_m_starcount(from.m_starcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FBNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FBNotify::CopyFrom(const GM_FBNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FBNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_FBNotify::Swap(GM_FBNotify* other) {
  if (other != this) {
    std::swap(m_chapterid_, other->m_chapterid_);
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_starcount_, other->m_starcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FBNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FBNotify_descriptor_;
  metadata.reflection = GM_FBNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ChestsNotify::kMChapterIdFieldNumber;
const int GM_ChestsNotify::kMChestsIdFieldNumber;
const int GM_ChestsNotify::kMStateFieldNumber;
#endif  // !_MSC_VER

GM_ChestsNotify::GM_ChestsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ChestsNotify::InitAsDefaultInstance() {
}

GM_ChestsNotify::GM_ChestsNotify(const GM_ChestsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ChestsNotify::SharedCtor() {
  _cached_size_ = 0;
  m_chapterid_ = 0;
  m_chestsid_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ChestsNotify::~GM_ChestsNotify() {
  SharedDtor();
}

void GM_ChestsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ChestsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ChestsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ChestsNotify_descriptor_;
}

const GM_ChestsNotify& GM_ChestsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_ChestsNotify* GM_ChestsNotify::default_instance_ = NULL;

GM_ChestsNotify* GM_ChestsNotify::New() const {
  return new GM_ChestsNotify;
}

void GM_ChestsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chapterid_ = 0;
    m_chestsid_ = 0;
    m_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ChestsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_chapterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chapterid_)));
          set_has_m_chapterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_chestsId;
        break;
      }

      // required int32 m_chestsId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_chestsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chestsid_)));
          set_has_m_chestsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_state;
        break;
      }

      // required int32 m_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ChestsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_chapterid(), output);
  }

  // required int32 m_chestsId = 2;
  if (has_m_chestsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_chestsid(), output);
  }

  // required int32 m_state = 3;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ChestsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_chapterId = 1;
  if (has_m_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_chapterid(), target);
  }

  // required int32 m_chestsId = 2;
  if (has_m_chestsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_chestsid(), target);
  }

  // required int32 m_state = 3;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ChestsNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_chapterId = 1;
    if (has_m_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chapterid());
    }

    // required int32 m_chestsId = 2;
    if (has_m_chestsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chestsid());
    }

    // required int32 m_state = 3;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ChestsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ChestsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ChestsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ChestsNotify::MergeFrom(const GM_ChestsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chapterid()) {
      set_m_chapterid(from.m_chapterid());
    }
    if (from.has_m_chestsid()) {
      set_m_chestsid(from.m_chestsid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ChestsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ChestsNotify::CopyFrom(const GM_ChestsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ChestsNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_ChestsNotify::Swap(GM_ChestsNotify* other) {
  if (other != this) {
    std::swap(m_chapterid_, other->m_chapterid_);
    std::swap(m_chestsid_, other->m_chestsid_);
    std::swap(m_state_, other->m_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ChestsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ChestsNotify_descriptor_;
  metadata.reflection = GM_ChestsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SanHuangReturn::kMTotalcountFieldNumber;
const int GM_SanHuangReturn::kMFbdataFieldNumber;
const int GM_SanHuangReturn::kMatchtimeFieldNumber;
#endif  // !_MSC_VER

GM_SanHuangReturn::GM_SanHuangReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SanHuangReturn::InitAsDefaultInstance() {
}

GM_SanHuangReturn::GM_SanHuangReturn(const GM_SanHuangReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SanHuangReturn::SharedCtor() {
  _cached_size_ = 0;
  m_totalcount_ = 0;
  matchtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SanHuangReturn::~GM_SanHuangReturn() {
  SharedDtor();
}

void GM_SanHuangReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SanHuangReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SanHuangReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SanHuangReturn_descriptor_;
}

const GM_SanHuangReturn& GM_SanHuangReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_SanHuangReturn* GM_SanHuangReturn::default_instance_ = NULL;

GM_SanHuangReturn* GM_SanHuangReturn::New() const {
  return new GM_SanHuangReturn;
}

void GM_SanHuangReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_totalcount_ = 0;
    matchtime_ = 0;
  }
  m_fbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SanHuangReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_totalcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalcount_)));
          set_has_m_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_fbdata;
        break;
      }

      // repeated .GM_SanHuang m_fbdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_fbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_fbdata;
        if (input->ExpectTag(40)) goto parse_matchtime;
        break;
      }

      // optional int32 matchtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtime_)));
          set_has_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SanHuangReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_totalcount = 1;
  if (has_m_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_totalcount(), output);
  }

  // repeated .GM_SanHuang m_fbdata = 2;
  for (int i = 0; i < this->m_fbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_fbdata(i), output);
  }

  // optional int32 matchtime = 5;
  if (has_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->matchtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SanHuangReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_totalcount = 1;
  if (has_m_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_totalcount(), target);
  }

  // repeated .GM_SanHuang m_fbdata = 2;
  for (int i = 0; i < this->m_fbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_fbdata(i), target);
  }

  // optional int32 matchtime = 5;
  if (has_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->matchtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SanHuangReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_totalcount = 1;
    if (has_m_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalcount());
    }

    // optional int32 matchtime = 5;
    if (has_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtime());
    }

  }
  // repeated .GM_SanHuang m_fbdata = 2;
  total_size += 1 * this->m_fbdata_size();
  for (int i = 0; i < this->m_fbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_fbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SanHuangReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SanHuangReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SanHuangReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SanHuangReturn::MergeFrom(const GM_SanHuangReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_fbdata_.MergeFrom(from.m_fbdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_totalcount()) {
      set_m_totalcount(from.m_totalcount());
    }
    if (from.has_matchtime()) {
      set_matchtime(from.matchtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SanHuangReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SanHuangReturn::CopyFrom(const GM_SanHuangReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SanHuangReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_fbdata_size(); i++) {
    if (!this->m_fbdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_SanHuangReturn::Swap(GM_SanHuangReturn* other) {
  if (other != this) {
    std::swap(m_totalcount_, other->m_totalcount_);
    m_fbdata_.Swap(&other->m_fbdata_);
    std::swap(matchtime_, other->matchtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SanHuangReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SanHuangReturn_descriptor_;
  metadata.reflection = GM_SanHuangReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_SanHuang::kMFbidFieldNumber;
const int GM_SanHuang::kMFightcountFieldNumber;
#endif  // !_MSC_VER

GM_SanHuang::GM_SanHuang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_SanHuang::InitAsDefaultInstance() {
}

GM_SanHuang::GM_SanHuang(const GM_SanHuang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_SanHuang::SharedCtor() {
  _cached_size_ = 0;
  m_fbid_ = 0;
  m_fightcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_SanHuang::~GM_SanHuang() {
  SharedDtor();
}

void GM_SanHuang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_SanHuang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_SanHuang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_SanHuang_descriptor_;
}

const GM_SanHuang& GM_SanHuang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fbunlock_2etxt();
  return *default_instance_;
}

GM_SanHuang* GM_SanHuang::default_instance_ = NULL;

GM_SanHuang* GM_SanHuang::New() const {
  return new GM_SanHuang;
}

void GM_SanHuang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbid_ = 0;
    m_fightcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_SanHuang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbid_)));
          set_has_m_fbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fightcount;
        break;
      }

      // required int32 m_fightcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fightcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightcount_)));
          set_has_m_fightcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_SanHuang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fbid = 1;
  if (has_m_fbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbid(), output);
  }

  // required int32 m_fightcount = 2;
  if (has_m_fightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fightcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_SanHuang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fbid = 1;
  if (has_m_fbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbid(), target);
  }

  // required int32 m_fightcount = 2;
  if (has_m_fightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fightcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_SanHuang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fbid = 1;
    if (has_m_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbid());
    }

    // required int32 m_fightcount = 2;
    if (has_m_fightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_SanHuang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_SanHuang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_SanHuang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_SanHuang::MergeFrom(const GM_SanHuang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbid()) {
      set_m_fbid(from.m_fbid());
    }
    if (from.has_m_fightcount()) {
      set_m_fightcount(from.m_fightcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_SanHuang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_SanHuang::CopyFrom(const GM_SanHuang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_SanHuang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_SanHuang::Swap(GM_SanHuang* other) {
  if (other != this) {
    std::swap(m_fbid_, other->m_fbid_);
    std::swap(m_fightcount_, other->m_fightcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_SanHuang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_SanHuang_descriptor_;
  metadata.reflection = GM_SanHuang_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
