// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoleIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoleIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_GmidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_GmidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CheckTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CheckTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_BuyTiredResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_BuyTiredResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_StatisticsLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_StatisticsLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Get_object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Get_object_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Get_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Get_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Common_roleinfo_requrest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Common_roleinfo_requrest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Comon_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Comon_role_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2etxt() {
  protobuf_AddDesc_common_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Result_descriptor_ = file->message_type(0);
  static const int GM_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Result, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Result, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Result, m_productid_),
  };
  GM_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Result_descriptor_,
      GM_Result::default_instance_,
      GM_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Result));
  GM_RoleIdRequest_descriptor_ = file->message_type(1);
  static const int GM_RoleIdRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleIdRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleIdRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleIdRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleIdRequest, usergmid_),
  };
  GM_RoleIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoleIdRequest_descriptor_,
      GM_RoleIdRequest::default_instance_,
      GM_RoleIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoleIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoleIdRequest));
  GM_GmidRequest_descriptor_ = file->message_type(2);
  static const int GM_GmidRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GmidRequest, gmid_),
  };
  GM_GmidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_GmidRequest_descriptor_,
      GM_GmidRequest::default_instance_,
      GM_GmidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GmidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_GmidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_GmidRequest));
  GM_Request_descriptor_ = file->message_type(3);
  static const int GM_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Request, request_),
  };
  GM_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Request_descriptor_,
      GM_Request::default_instance_,
      GM_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Request));
  GM_CheckTime_descriptor_ = file->message_type(4);
  static const int GM_CheckTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CheckTime, timet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CheckTime, nowtick_),
  };
  GM_CheckTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CheckTime_descriptor_,
      GM_CheckTime::default_instance_,
      GM_CheckTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CheckTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CheckTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CheckTime));
  GM_BuyTiredResult_descriptor_ = file->message_type(5);
  static const int GM_BuyTiredResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, hasbuy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, nextneedgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, tiredvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, isdiscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, istiredvalueadd_),
  };
  GM_BuyTiredResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_BuyTiredResult_descriptor_,
      GM_BuyTiredResult::default_instance_,
      GM_BuyTiredResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_BuyTiredResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_BuyTiredResult));
  GM_StatisticsLog_descriptor_ = file->message_type(6);
  static const int GM_StatisticsLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StatisticsLog, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StatisticsLog, rolelogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StatisticsLog, recharge_),
  };
  GM_StatisticsLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_StatisticsLog_descriptor_,
      GM_StatisticsLog::default_instance_,
      GM_StatisticsLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StatisticsLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_StatisticsLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_StatisticsLog));
  GM_Get_object_descriptor_ = file->message_type(7);
  static const int GM_Get_object_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_object, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_object, num_),
  };
  GM_Get_object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Get_object_descriptor_,
      GM_Get_object::default_instance_,
      GM_Get_object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Get_object));
  GM_Get_Result_descriptor_ = file->message_type(8);
  static const int GM_Get_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_Result, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_Result, data_),
  };
  GM_Get_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Get_Result_descriptor_,
      GM_Get_Result::default_instance_,
      GM_Get_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Get_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Get_Result));
  GM_Common_roleinfo_requrest_descriptor_ = file->message_type(9);
  static const int GM_Common_roleinfo_requrest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Common_roleinfo_requrest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Common_roleinfo_requrest, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Common_roleinfo_requrest, roomid_),
  };
  GM_Common_roleinfo_requrest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Common_roleinfo_requrest_descriptor_,
      GM_Common_roleinfo_requrest::default_instance_,
      GM_Common_roleinfo_requrest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Common_roleinfo_requrest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Common_roleinfo_requrest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Common_roleinfo_requrest));
  GM_Comon_role_info_descriptor_ = file->message_type(10);
  static const int GM_Comon_role_info_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, golde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, majiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, majiangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, jinhua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, jinhuawin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, matchscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, fruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, majiangbaojian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, jinhuabaojian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, qqhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, ip_),
  };
  GM_Comon_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Comon_role_info_descriptor_,
      GM_Comon_role_info::default_instance_,
      GM_Comon_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Comon_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Comon_role_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Result_descriptor_, &GM_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoleIdRequest_descriptor_, &GM_RoleIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_GmidRequest_descriptor_, &GM_GmidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Request_descriptor_, &GM_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CheckTime_descriptor_, &GM_CheckTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_BuyTiredResult_descriptor_, &GM_BuyTiredResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_StatisticsLog_descriptor_, &GM_StatisticsLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Get_object_descriptor_, &GM_Get_object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Get_Result_descriptor_, &GM_Get_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Common_roleinfo_requrest_descriptor_, &GM_Common_roleinfo_requrest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Comon_role_info_descriptor_, &GM_Comon_role_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2etxt() {
  delete GM_Result::default_instance_;
  delete GM_Result_reflection_;
  delete GM_RoleIdRequest::default_instance_;
  delete GM_RoleIdRequest_reflection_;
  delete GM_GmidRequest::default_instance_;
  delete GM_GmidRequest_reflection_;
  delete GM_Request::default_instance_;
  delete GM_Request_reflection_;
  delete GM_CheckTime::default_instance_;
  delete GM_CheckTime_reflection_;
  delete GM_BuyTiredResult::default_instance_;
  delete GM_BuyTiredResult_reflection_;
  delete GM_StatisticsLog::default_instance_;
  delete GM_StatisticsLog_reflection_;
  delete GM_Get_object::default_instance_;
  delete GM_Get_object_reflection_;
  delete GM_Get_Result::default_instance_;
  delete GM_Get_Result_reflection_;
  delete GM_Common_roleinfo_requrest::default_instance_;
  delete GM_Common_roleinfo_requrest_reflection_;
  delete GM_Comon_role_info::default_instance_;
  delete GM_Comon_role_info_reflection_;
}

void protobuf_AddDesc_common_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncommon.txt\"D\n\tGM_Result\022\020\n\010m_Result\030\001 "
    "\002(\005\022\020\n\010userData\030\002 \001(\t\022\023\n\013m_productid\030\003 \001"
    "(\005\"P\n\020GM_RoleIdRequest\022\016\n\006roleId\030\001 \002(\005\022\n"
    "\n\002ip\030\002 \001(\t\022\016\n\006userId\030\003 \001(\005\022\020\n\010userGmid\030\004"
    " \001(\003\"\036\n\016GM_GmidRequest\022\014\n\004gmid\030\001 \002(\003\"\035\n\n"
    "GM_Request\022\017\n\007request\030\001 \002(\005\".\n\014GM_CheckT"
    "ime\022\r\n\005timet\030\001 \002(\003\022\017\n\007nowtick\030\002 \002(\003\"\222\001\n\021"
    "GM_BuyTiredResult\022\020\n\010m_result\030\001 \002(\005\022\024\n\014h"
    "asbuy_times\030\002 \002(\005\022\024\n\014nextneedgold\030\003 \002(\005\022"
    "\022\n\ntiredvalue\030\004 \001(\005\022\022\n\nisdiscount\030\005 \002(\005\022"
    "\027\n\017istiredvalueadd\030\006 \002(\005\"G\n\020GM_Statistic"
    "sLog\022\016\n\006result\030\001 \002(\005\022\021\n\trolelogin\030\002 \001(\t\022"
    "\020\n\010recharge\030\003 \001(\t\".\n\rGM_Get_object\022\020\n\010ob"
    "jectid\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\"\?\n\rGM_Get_Resu"
    "lt\022\020\n\010m_Result\030\001 \002(\005\022\034\n\004data\030\002 \003(\0132\016.GM_"
    "Get_object\"M\n\033GM_Common_roleinfo_requres"
    "t\022\016\n\006roleid\030\001 \002(\005\022\016\n\006copyid\030\002 \001(\005\022\016\n\006roo"
    "mid\030\003 \001(\005\"\354\002\n\022GM_Comon_role_info\022\016\n\006role"
    "id\030\001 \002(\005\022\014\n\004sign\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004"
    "head\030\004 \001(\005\022\r\n\005frame\030\005 \001(\005\022\013\n\003sex\030\006 \001(\005\022\r"
    "\n\005golde\030\007 \001(\005\022\016\n\006ticket\030\010 \001(\005\022\014\n\004card\030\t "
    "\001(\005\022\017\n\007majiang\030\n \001(\005\022\022\n\nmajiangwin\030\013 \001(\005"
    "\022\016\n\006jinhua\030\014 \001(\005\022\021\n\tjinhuawin\030\r \001(\005\022\022\n\nm"
    "atchscore\030\016 \001(\005\022\r\n\005fruit\030\017 \001(\005\022\026\n\016majian"
    "gbaojian\030\020 \001(\005\022\025\n\rjinhuabaojian\030\021 \001(\005\022\013\n"
    "\003vip\030\022 \001(\005\022\020\n\010nickname\030\023 \001(\t\022\016\n\006qqhead\030\024"
    " \001(\t\022\n\n\002ip\030\025 \001(\t", 1056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.txt", &protobuf_RegisterTypes);
  GM_Result::default_instance_ = new GM_Result();
  GM_RoleIdRequest::default_instance_ = new GM_RoleIdRequest();
  GM_GmidRequest::default_instance_ = new GM_GmidRequest();
  GM_Request::default_instance_ = new GM_Request();
  GM_CheckTime::default_instance_ = new GM_CheckTime();
  GM_BuyTiredResult::default_instance_ = new GM_BuyTiredResult();
  GM_StatisticsLog::default_instance_ = new GM_StatisticsLog();
  GM_Get_object::default_instance_ = new GM_Get_object();
  GM_Get_Result::default_instance_ = new GM_Get_Result();
  GM_Common_roleinfo_requrest::default_instance_ = new GM_Common_roleinfo_requrest();
  GM_Comon_role_info::default_instance_ = new GM_Comon_role_info();
  GM_Result::default_instance_->InitAsDefaultInstance();
  GM_RoleIdRequest::default_instance_->InitAsDefaultInstance();
  GM_GmidRequest::default_instance_->InitAsDefaultInstance();
  GM_Request::default_instance_->InitAsDefaultInstance();
  GM_CheckTime::default_instance_->InitAsDefaultInstance();
  GM_BuyTiredResult::default_instance_->InitAsDefaultInstance();
  GM_StatisticsLog::default_instance_->InitAsDefaultInstance();
  GM_Get_object::default_instance_->InitAsDefaultInstance();
  GM_Get_Result::default_instance_->InitAsDefaultInstance();
  GM_Common_roleinfo_requrest::default_instance_->InitAsDefaultInstance();
  GM_Comon_role_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2etxt {
  StaticDescriptorInitializer_common_2etxt() {
    protobuf_AddDesc_common_2etxt();
  }
} static_descriptor_initializer_common_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Result::kMResultFieldNumber;
const int GM_Result::kUserDataFieldNumber;
const int GM_Result::kMProductidFieldNumber;
#endif  // !_MSC_VER

GM_Result::GM_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Result::InitAsDefaultInstance() {
}

GM_Result::GM_Result(const GM_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Result::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_productid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Result::~GM_Result() {
  SharedDtor();
}

void GM_Result::SharedDtor() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void GM_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Result_descriptor_;
}

const GM_Result& GM_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_Result* GM_Result::default_instance_ = NULL;

GM_Result* GM_Result::New() const {
  return new GM_Result;
}

void GM_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::kEmptyString) {
        userdata_->clear();
      }
    }
    m_productid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userData;
        break;
      }

      // optional string userData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userdata().data(), this->userdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_productid;
        break;
      }

      // optional int32 m_productid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_productid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_productid_)));
          set_has_m_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional string userData = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userdata(), output);
  }

  // optional int32 m_productid = 3;
  if (has_m_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional string userData = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdata().data(), this->userdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userdata(), target);
  }

  // optional int32 m_productid = 3;
  if (has_m_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional string userData = 2;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdata());
    }

    // optional int32 m_productid = 3;
    if (has_m_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Result::MergeFrom(const GM_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
    if (from.has_m_productid()) {
      set_m_productid(from.m_productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Result::CopyFrom(const GM_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Result::Swap(GM_Result* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(userdata_, other->userdata_);
    std::swap(m_productid_, other->m_productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Result_descriptor_;
  metadata.reflection = GM_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoleIdRequest::kRoleIdFieldNumber;
const int GM_RoleIdRequest::kIpFieldNumber;
const int GM_RoleIdRequest::kUserIdFieldNumber;
const int GM_RoleIdRequest::kUserGmidFieldNumber;
#endif  // !_MSC_VER

GM_RoleIdRequest::GM_RoleIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoleIdRequest::InitAsDefaultInstance() {
}

GM_RoleIdRequest::GM_RoleIdRequest(const GM_RoleIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoleIdRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = 0;
  usergmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoleIdRequest::~GM_RoleIdRequest() {
  SharedDtor();
}

void GM_RoleIdRequest::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GM_RoleIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoleIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoleIdRequest_descriptor_;
}

const GM_RoleIdRequest& GM_RoleIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_RoleIdRequest* GM_RoleIdRequest::default_instance_ = NULL;

GM_RoleIdRequest* GM_RoleIdRequest::New() const {
  return new GM_RoleIdRequest;
}

void GM_RoleIdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    userid_ = 0;
    usergmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoleIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userId;
        break;
      }

      // optional int32 userId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userGmid;
        break;
      }

      // optional int64 userGmid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userGmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usergmid_)));
          set_has_usergmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoleIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // optional int64 userGmid = 4;
  if (has_usergmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->usergmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoleIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 userId = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // optional int64 userGmid = 4;
  if (has_usergmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->usergmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoleIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 userId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int64 userGmid = 4;
    if (has_usergmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usergmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoleIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoleIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoleIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoleIdRequest::MergeFrom(const GM_RoleIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_usergmid()) {
      set_usergmid(from.usergmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoleIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoleIdRequest::CopyFrom(const GM_RoleIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoleIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_RoleIdRequest::Swap(GM_RoleIdRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(ip_, other->ip_);
    std::swap(userid_, other->userid_);
    std::swap(usergmid_, other->usergmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoleIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoleIdRequest_descriptor_;
  metadata.reflection = GM_RoleIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_GmidRequest::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_GmidRequest::GM_GmidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_GmidRequest::InitAsDefaultInstance() {
}

GM_GmidRequest::GM_GmidRequest(const GM_GmidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_GmidRequest::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_GmidRequest::~GM_GmidRequest() {
  SharedDtor();
}

void GM_GmidRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_GmidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_GmidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_GmidRequest_descriptor_;
}

const GM_GmidRequest& GM_GmidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_GmidRequest* GM_GmidRequest::default_instance_ = NULL;

GM_GmidRequest* GM_GmidRequest::New() const {
  return new GM_GmidRequest;
}

void GM_GmidRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_GmidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_GmidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_GmidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_GmidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_GmidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_GmidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_GmidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_GmidRequest::MergeFrom(const GM_GmidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_GmidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_GmidRequest::CopyFrom(const GM_GmidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_GmidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_GmidRequest::Swap(GM_GmidRequest* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_GmidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_GmidRequest_descriptor_;
  metadata.reflection = GM_GmidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Request::kRequestFieldNumber;
#endif  // !_MSC_VER

GM_Request::GM_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Request::InitAsDefaultInstance() {
}

GM_Request::GM_Request(const GM_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Request::SharedCtor() {
  _cached_size_ = 0;
  request_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Request::~GM_Request() {
  SharedDtor();
}

void GM_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Request_descriptor_;
}

const GM_Request& GM_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_Request* GM_Request::default_instance_ = NULL;

GM_Request* GM_Request::New() const {
  return new GM_Request;
}

void GM_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Request::MergeFrom(const GM_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Request::CopyFrom(const GM_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Request::Swap(GM_Request* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Request_descriptor_;
  metadata.reflection = GM_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CheckTime::kTimetFieldNumber;
const int GM_CheckTime::kNowtickFieldNumber;
#endif  // !_MSC_VER

GM_CheckTime::GM_CheckTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CheckTime::InitAsDefaultInstance() {
}

GM_CheckTime::GM_CheckTime(const GM_CheckTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CheckTime::SharedCtor() {
  _cached_size_ = 0;
  timet_ = GOOGLE_LONGLONG(0);
  nowtick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CheckTime::~GM_CheckTime() {
  SharedDtor();
}

void GM_CheckTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CheckTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CheckTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CheckTime_descriptor_;
}

const GM_CheckTime& GM_CheckTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_CheckTime* GM_CheckTime::default_instance_ = NULL;

GM_CheckTime* GM_CheckTime::New() const {
  return new GM_CheckTime;
}

void GM_CheckTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timet_ = GOOGLE_LONGLONG(0);
    nowtick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CheckTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timet_)));
          set_has_timet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nowtick;
        break;
      }

      // required int64 nowtick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nowtick_)));
          set_has_nowtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CheckTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 timet = 1;
  if (has_timet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timet(), output);
  }

  // required int64 nowtick = 2;
  if (has_nowtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nowtick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CheckTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 timet = 1;
  if (has_timet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timet(), target);
  }

  // required int64 nowtick = 2;
  if (has_nowtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nowtick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CheckTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 timet = 1;
    if (has_timet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timet());
    }

    // required int64 nowtick = 2;
    if (has_nowtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nowtick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CheckTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CheckTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CheckTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CheckTime::MergeFrom(const GM_CheckTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timet()) {
      set_timet(from.timet());
    }
    if (from.has_nowtick()) {
      set_nowtick(from.nowtick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CheckTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CheckTime::CopyFrom(const GM_CheckTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CheckTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_CheckTime::Swap(GM_CheckTime* other) {
  if (other != this) {
    std::swap(timet_, other->timet_);
    std::swap(nowtick_, other->nowtick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CheckTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CheckTime_descriptor_;
  metadata.reflection = GM_CheckTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_BuyTiredResult::kMResultFieldNumber;
const int GM_BuyTiredResult::kHasbuyTimesFieldNumber;
const int GM_BuyTiredResult::kNextneedgoldFieldNumber;
const int GM_BuyTiredResult::kTiredvalueFieldNumber;
const int GM_BuyTiredResult::kIsdiscountFieldNumber;
const int GM_BuyTiredResult::kIstiredvalueaddFieldNumber;
#endif  // !_MSC_VER

GM_BuyTiredResult::GM_BuyTiredResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_BuyTiredResult::InitAsDefaultInstance() {
}

GM_BuyTiredResult::GM_BuyTiredResult(const GM_BuyTiredResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_BuyTiredResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  hasbuy_times_ = 0;
  nextneedgold_ = 0;
  tiredvalue_ = 0;
  isdiscount_ = 0;
  istiredvalueadd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_BuyTiredResult::~GM_BuyTiredResult() {
  SharedDtor();
}

void GM_BuyTiredResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_BuyTiredResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_BuyTiredResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_BuyTiredResult_descriptor_;
}

const GM_BuyTiredResult& GM_BuyTiredResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_BuyTiredResult* GM_BuyTiredResult::default_instance_ = NULL;

GM_BuyTiredResult* GM_BuyTiredResult::New() const {
  return new GM_BuyTiredResult;
}

void GM_BuyTiredResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    hasbuy_times_ = 0;
    nextneedgold_ = 0;
    tiredvalue_ = 0;
    isdiscount_ = 0;
    istiredvalueadd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_BuyTiredResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasbuy_times;
        break;
      }

      // required int32 hasbuy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasbuy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasbuy_times_)));
          set_has_hasbuy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextneedgold;
        break;
      }

      // required int32 nextneedgold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextneedgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextneedgold_)));
          set_has_nextneedgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tiredvalue;
        break;
      }

      // optional int32 tiredvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiredvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiredvalue_)));
          set_has_tiredvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isdiscount;
        break;
      }

      // required int32 isdiscount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdiscount_)));
          set_has_isdiscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_istiredvalueadd;
        break;
      }

      // required int32 istiredvalueadd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_istiredvalueadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istiredvalueadd_)));
          set_has_istiredvalueadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_BuyTiredResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 hasbuy_times = 2;
  if (has_hasbuy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hasbuy_times(), output);
  }

  // required int32 nextneedgold = 3;
  if (has_nextneedgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextneedgold(), output);
  }

  // optional int32 tiredvalue = 4;
  if (has_tiredvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tiredvalue(), output);
  }

  // required int32 isdiscount = 5;
  if (has_isdiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isdiscount(), output);
  }

  // required int32 istiredvalueadd = 6;
  if (has_istiredvalueadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->istiredvalueadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_BuyTiredResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 hasbuy_times = 2;
  if (has_hasbuy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hasbuy_times(), target);
  }

  // required int32 nextneedgold = 3;
  if (has_nextneedgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextneedgold(), target);
  }

  // optional int32 tiredvalue = 4;
  if (has_tiredvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tiredvalue(), target);
  }

  // required int32 isdiscount = 5;
  if (has_isdiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isdiscount(), target);
  }

  // required int32 istiredvalueadd = 6;
  if (has_istiredvalueadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->istiredvalueadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_BuyTiredResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 hasbuy_times = 2;
    if (has_hasbuy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasbuy_times());
    }

    // required int32 nextneedgold = 3;
    if (has_nextneedgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextneedgold());
    }

    // optional int32 tiredvalue = 4;
    if (has_tiredvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiredvalue());
    }

    // required int32 isdiscount = 5;
    if (has_isdiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdiscount());
    }

    // required int32 istiredvalueadd = 6;
    if (has_istiredvalueadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istiredvalueadd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_BuyTiredResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_BuyTiredResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_BuyTiredResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_BuyTiredResult::MergeFrom(const GM_BuyTiredResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_hasbuy_times()) {
      set_hasbuy_times(from.hasbuy_times());
    }
    if (from.has_nextneedgold()) {
      set_nextneedgold(from.nextneedgold());
    }
    if (from.has_tiredvalue()) {
      set_tiredvalue(from.tiredvalue());
    }
    if (from.has_isdiscount()) {
      set_isdiscount(from.isdiscount());
    }
    if (from.has_istiredvalueadd()) {
      set_istiredvalueadd(from.istiredvalueadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_BuyTiredResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_BuyTiredResult::CopyFrom(const GM_BuyTiredResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_BuyTiredResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void GM_BuyTiredResult::Swap(GM_BuyTiredResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(hasbuy_times_, other->hasbuy_times_);
    std::swap(nextneedgold_, other->nextneedgold_);
    std::swap(tiredvalue_, other->tiredvalue_);
    std::swap(isdiscount_, other->isdiscount_);
    std::swap(istiredvalueadd_, other->istiredvalueadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_BuyTiredResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_BuyTiredResult_descriptor_;
  metadata.reflection = GM_BuyTiredResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_StatisticsLog::kResultFieldNumber;
const int GM_StatisticsLog::kRoleloginFieldNumber;
const int GM_StatisticsLog::kRechargeFieldNumber;
#endif  // !_MSC_VER

GM_StatisticsLog::GM_StatisticsLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_StatisticsLog::InitAsDefaultInstance() {
}

GM_StatisticsLog::GM_StatisticsLog(const GM_StatisticsLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_StatisticsLog::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  rolelogin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recharge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_StatisticsLog::~GM_StatisticsLog() {
  SharedDtor();
}

void GM_StatisticsLog::SharedDtor() {
  if (rolelogin_ != &::google::protobuf::internal::kEmptyString) {
    delete rolelogin_;
  }
  if (recharge_ != &::google::protobuf::internal::kEmptyString) {
    delete recharge_;
  }
  if (this != default_instance_) {
  }
}

void GM_StatisticsLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_StatisticsLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_StatisticsLog_descriptor_;
}

const GM_StatisticsLog& GM_StatisticsLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_StatisticsLog* GM_StatisticsLog::default_instance_ = NULL;

GM_StatisticsLog* GM_StatisticsLog::New() const {
  return new GM_StatisticsLog;
}

void GM_StatisticsLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_rolelogin()) {
      if (rolelogin_ != &::google::protobuf::internal::kEmptyString) {
        rolelogin_->clear();
      }
    }
    if (has_recharge()) {
      if (recharge_ != &::google::protobuf::internal::kEmptyString) {
        recharge_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_StatisticsLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolelogin;
        break;
      }

      // optional string rolelogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolelogin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolelogin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolelogin().data(), this->rolelogin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recharge;
        break;
      }

      // optional string recharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recharge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recharge().data(), this->recharge().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_StatisticsLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string rolelogin = 2;
  if (has_rolelogin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolelogin().data(), this->rolelogin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolelogin(), output);
  }

  // optional string recharge = 3;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recharge().data(), this->recharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_StatisticsLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string rolelogin = 2;
  if (has_rolelogin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolelogin().data(), this->rolelogin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolelogin(), target);
  }

  // optional string recharge = 3;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recharge().data(), this->recharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_StatisticsLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string rolelogin = 2;
    if (has_rolelogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolelogin());
    }

    // optional string recharge = 3;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_StatisticsLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_StatisticsLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_StatisticsLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_StatisticsLog::MergeFrom(const GM_StatisticsLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rolelogin()) {
      set_rolelogin(from.rolelogin());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_StatisticsLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_StatisticsLog::CopyFrom(const GM_StatisticsLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_StatisticsLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_StatisticsLog::Swap(GM_StatisticsLog* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rolelogin_, other->rolelogin_);
    std::swap(recharge_, other->recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_StatisticsLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_StatisticsLog_descriptor_;
  metadata.reflection = GM_StatisticsLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Get_object::kObjectidFieldNumber;
const int GM_Get_object::kNumFieldNumber;
#endif  // !_MSC_VER

GM_Get_object::GM_Get_object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Get_object::InitAsDefaultInstance() {
}

GM_Get_object::GM_Get_object(const GM_Get_object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Get_object::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Get_object::~GM_Get_object() {
  SharedDtor();
}

void GM_Get_object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Get_object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Get_object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Get_object_descriptor_;
}

const GM_Get_object& GM_Get_object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_Get_object* GM_Get_object::default_instance_ = NULL;

GM_Get_object* GM_Get_object::New() const {
  return new GM_Get_object;
}

void GM_Get_object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Get_object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Get_object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Get_object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Get_object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Get_object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Get_object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Get_object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Get_object::MergeFrom(const GM_Get_object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Get_object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Get_object::CopyFrom(const GM_Get_object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Get_object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Get_object::Swap(GM_Get_object* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Get_object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Get_object_descriptor_;
  metadata.reflection = GM_Get_object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Get_Result::kMResultFieldNumber;
const int GM_Get_Result::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Get_Result::GM_Get_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Get_Result::InitAsDefaultInstance() {
}

GM_Get_Result::GM_Get_Result(const GM_Get_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Get_Result::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Get_Result::~GM_Get_Result() {
  SharedDtor();
}

void GM_Get_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Get_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Get_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Get_Result_descriptor_;
}

const GM_Get_Result& GM_Get_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_Get_Result* GM_Get_Result::default_instance_ = NULL;

GM_Get_Result* GM_Get_Result::New() const {
  return new GM_Get_Result;
}

void GM_Get_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Get_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_Get_object data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Get_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated .GM_Get_object data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Get_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated .GM_Get_object data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Get_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated .GM_Get_object data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Get_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Get_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Get_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Get_Result::MergeFrom(const GM_Get_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Get_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Get_Result::CopyFrom(const GM_Get_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Get_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Get_Result::Swap(GM_Get_Result* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Get_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Get_Result_descriptor_;
  metadata.reflection = GM_Get_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Common_roleinfo_requrest::kRoleidFieldNumber;
const int GM_Common_roleinfo_requrest::kCopyidFieldNumber;
const int GM_Common_roleinfo_requrest::kRoomidFieldNumber;
#endif  // !_MSC_VER

GM_Common_roleinfo_requrest::GM_Common_roleinfo_requrest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Common_roleinfo_requrest::InitAsDefaultInstance() {
}

GM_Common_roleinfo_requrest::GM_Common_roleinfo_requrest(const GM_Common_roleinfo_requrest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Common_roleinfo_requrest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  copyid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Common_roleinfo_requrest::~GM_Common_roleinfo_requrest() {
  SharedDtor();
}

void GM_Common_roleinfo_requrest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Common_roleinfo_requrest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Common_roleinfo_requrest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Common_roleinfo_requrest_descriptor_;
}

const GM_Common_roleinfo_requrest& GM_Common_roleinfo_requrest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_Common_roleinfo_requrest* GM_Common_roleinfo_requrest::default_instance_ = NULL;

GM_Common_roleinfo_requrest* GM_Common_roleinfo_requrest::New() const {
  return new GM_Common_roleinfo_requrest;
}

void GM_Common_roleinfo_requrest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    copyid_ = 0;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Common_roleinfo_requrest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyid;
        break;
      }

      // optional int32 copyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Common_roleinfo_requrest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 copyid = 2;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->copyid(), output);
  }

  // optional int32 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Common_roleinfo_requrest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 copyid = 2;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->copyid(), target);
  }

  // optional int32 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Common_roleinfo_requrest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 copyid = 2;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // optional int32 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Common_roleinfo_requrest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Common_roleinfo_requrest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Common_roleinfo_requrest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Common_roleinfo_requrest::MergeFrom(const GM_Common_roleinfo_requrest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Common_roleinfo_requrest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Common_roleinfo_requrest::CopyFrom(const GM_Common_roleinfo_requrest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Common_roleinfo_requrest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Common_roleinfo_requrest::Swap(GM_Common_roleinfo_requrest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(copyid_, other->copyid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Common_roleinfo_requrest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Common_roleinfo_requrest_descriptor_;
  metadata.reflection = GM_Common_roleinfo_requrest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Comon_role_info::kRoleidFieldNumber;
const int GM_Comon_role_info::kSignFieldNumber;
const int GM_Comon_role_info::kNameFieldNumber;
const int GM_Comon_role_info::kHeadFieldNumber;
const int GM_Comon_role_info::kFrameFieldNumber;
const int GM_Comon_role_info::kSexFieldNumber;
const int GM_Comon_role_info::kGoldeFieldNumber;
const int GM_Comon_role_info::kTicketFieldNumber;
const int GM_Comon_role_info::kCardFieldNumber;
const int GM_Comon_role_info::kMajiangFieldNumber;
const int GM_Comon_role_info::kMajiangwinFieldNumber;
const int GM_Comon_role_info::kJinhuaFieldNumber;
const int GM_Comon_role_info::kJinhuawinFieldNumber;
const int GM_Comon_role_info::kMatchscoreFieldNumber;
const int GM_Comon_role_info::kFruitFieldNumber;
const int GM_Comon_role_info::kMajiangbaojianFieldNumber;
const int GM_Comon_role_info::kJinhuabaojianFieldNumber;
const int GM_Comon_role_info::kVipFieldNumber;
const int GM_Comon_role_info::kNicknameFieldNumber;
const int GM_Comon_role_info::kQqheadFieldNumber;
const int GM_Comon_role_info::kIpFieldNumber;
#endif  // !_MSC_VER

GM_Comon_role_info::GM_Comon_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Comon_role_info::InitAsDefaultInstance() {
}

GM_Comon_role_info::GM_Comon_role_info(const GM_Comon_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Comon_role_info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = 0;
  frame_ = 0;
  sex_ = 0;
  golde_ = 0;
  ticket_ = 0;
  card_ = 0;
  majiang_ = 0;
  majiangwin_ = 0;
  jinhua_ = 0;
  jinhuawin_ = 0;
  matchscore_ = 0;
  fruit_ = 0;
  majiangbaojian_ = 0;
  jinhuabaojian_ = 0;
  vip_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qqhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Comon_role_info::~GM_Comon_role_info() {
  SharedDtor();
}

void GM_Comon_role_info::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (qqhead_ != &::google::protobuf::internal::kEmptyString) {
    delete qqhead_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GM_Comon_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Comon_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Comon_role_info_descriptor_;
}

const GM_Comon_role_info& GM_Comon_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2etxt();
  return *default_instance_;
}

GM_Comon_role_info* GM_Comon_role_info::default_instance_ = NULL;

GM_Comon_role_info* GM_Comon_role_info::New() const {
  return new GM_Comon_role_info;
}

void GM_Comon_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_ = 0;
    frame_ = 0;
    sex_ = 0;
    golde_ = 0;
    ticket_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    card_ = 0;
    majiang_ = 0;
    majiangwin_ = 0;
    jinhua_ = 0;
    jinhuawin_ = 0;
    matchscore_ = 0;
    fruit_ = 0;
    majiangbaojian_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jinhuabaojian_ = 0;
    vip_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_qqhead()) {
      if (qqhead_ != &::google::protobuf::internal::kEmptyString) {
        qqhead_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Comon_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sign;
        break;
      }

      // optional string sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }

      // optional int32 head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frame;
        break;
      }

      // optional int32 frame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_golde;
        break;
      }

      // optional int32 golde = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golde_)));
          set_has_golde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_card;
        break;
      }

      // optional int32 card = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_majiang;
        break;
      }

      // optional int32 majiang = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majiang_)));
          set_has_majiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_majiangwin;
        break;
      }

      // optional int32 majiangwin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majiangwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majiangwin_)));
          set_has_majiangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_jinhua;
        break;
      }

      // optional int32 jinhua = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinhua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jinhua_)));
          set_has_jinhua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_jinhuawin;
        break;
      }

      // optional int32 jinhuawin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinhuawin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jinhuawin_)));
          set_has_jinhuawin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_matchscore;
        break;
      }

      // optional int32 matchscore = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchscore_)));
          set_has_matchscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fruit;
        break;
      }

      // optional int32 fruit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fruit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fruit_)));
          set_has_fruit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_majiangbaojian;
        break;
      }

      // optional int32 majiangbaojian = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_majiangbaojian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majiangbaojian_)));
          set_has_majiangbaojian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jinhuabaojian;
        break;
      }

      // optional int32 jinhuabaojian = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinhuabaojian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jinhuabaojian_)));
          set_has_jinhuabaojian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_vip;
        break;
      }

      // optional int32 vip = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_nickname;
        break;
      }

      // optional string nickname = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_qqhead;
        break;
      }

      // optional string qqhead = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qqhead().data(), this->qqhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ip;
        break;
      }

      // optional string ip = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Comon_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sign(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }

  // optional int32 frame = 5;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frame(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional int32 golde = 7;
  if (has_golde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->golde(), output);
  }

  // optional int32 ticket = 8;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ticket(), output);
  }

  // optional int32 card = 9;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->card(), output);
  }

  // optional int32 majiang = 10;
  if (has_majiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->majiang(), output);
  }

  // optional int32 majiangwin = 11;
  if (has_majiangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->majiangwin(), output);
  }

  // optional int32 jinhua = 12;
  if (has_jinhua()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->jinhua(), output);
  }

  // optional int32 jinhuawin = 13;
  if (has_jinhuawin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->jinhuawin(), output);
  }

  // optional int32 matchscore = 14;
  if (has_matchscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->matchscore(), output);
  }

  // optional int32 fruit = 15;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fruit(), output);
  }

  // optional int32 majiangbaojian = 16;
  if (has_majiangbaojian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->majiangbaojian(), output);
  }

  // optional int32 jinhuabaojian = 17;
  if (has_jinhuabaojian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->jinhuabaojian(), output);
  }

  // optional int32 vip = 18;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->vip(), output);
  }

  // optional string nickname = 19;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->nickname(), output);
  }

  // optional string qqhead = 20;
  if (has_qqhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqhead().data(), this->qqhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->qqhead(), output);
  }

  // optional string ip = 21;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Comon_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->head(), target);
  }

  // optional int32 frame = 5;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frame(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional int32 golde = 7;
  if (has_golde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->golde(), target);
  }

  // optional int32 ticket = 8;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ticket(), target);
  }

  // optional int32 card = 9;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->card(), target);
  }

  // optional int32 majiang = 10;
  if (has_majiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->majiang(), target);
  }

  // optional int32 majiangwin = 11;
  if (has_majiangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->majiangwin(), target);
  }

  // optional int32 jinhua = 12;
  if (has_jinhua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->jinhua(), target);
  }

  // optional int32 jinhuawin = 13;
  if (has_jinhuawin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->jinhuawin(), target);
  }

  // optional int32 matchscore = 14;
  if (has_matchscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->matchscore(), target);
  }

  // optional int32 fruit = 15;
  if (has_fruit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->fruit(), target);
  }

  // optional int32 majiangbaojian = 16;
  if (has_majiangbaojian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->majiangbaojian(), target);
  }

  // optional int32 jinhuabaojian = 17;
  if (has_jinhuabaojian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->jinhuabaojian(), target);
  }

  // optional int32 vip = 18;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->vip(), target);
  }

  // optional string nickname = 19;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->nickname(), target);
  }

  // optional string qqhead = 20;
  if (has_qqhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqhead().data(), this->qqhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->qqhead(), target);
  }

  // optional string ip = 21;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Comon_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional int32 frame = 5;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 golde = 7;
    if (has_golde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golde());
    }

    // optional int32 ticket = 8;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 card = 9;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 majiang = 10;
    if (has_majiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majiang());
    }

    // optional int32 majiangwin = 11;
    if (has_majiangwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majiangwin());
    }

    // optional int32 jinhua = 12;
    if (has_jinhua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jinhua());
    }

    // optional int32 jinhuawin = 13;
    if (has_jinhuawin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jinhuawin());
    }

    // optional int32 matchscore = 14;
    if (has_matchscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchscore());
    }

    // optional int32 fruit = 15;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fruit());
    }

    // optional int32 majiangbaojian = 16;
    if (has_majiangbaojian()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majiangbaojian());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 jinhuabaojian = 17;
    if (has_jinhuabaojian()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jinhuabaojian());
    }

    // optional int32 vip = 18;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional string nickname = 19;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string qqhead = 20;
    if (has_qqhead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqhead());
    }

    // optional string ip = 21;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Comon_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Comon_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Comon_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Comon_role_info::MergeFrom(const GM_Comon_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_golde()) {
      set_golde(from.golde());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_majiang()) {
      set_majiang(from.majiang());
    }
    if (from.has_majiangwin()) {
      set_majiangwin(from.majiangwin());
    }
    if (from.has_jinhua()) {
      set_jinhua(from.jinhua());
    }
    if (from.has_jinhuawin()) {
      set_jinhuawin(from.jinhuawin());
    }
    if (from.has_matchscore()) {
      set_matchscore(from.matchscore());
    }
    if (from.has_fruit()) {
      set_fruit(from.fruit());
    }
    if (from.has_majiangbaojian()) {
      set_majiangbaojian(from.majiangbaojian());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jinhuabaojian()) {
      set_jinhuabaojian(from.jinhuabaojian());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_qqhead()) {
      set_qqhead(from.qqhead());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Comon_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Comon_role_info::CopyFrom(const GM_Comon_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Comon_role_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Comon_role_info::Swap(GM_Comon_role_info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sign_, other->sign_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(frame_, other->frame_);
    std::swap(sex_, other->sex_);
    std::swap(golde_, other->golde_);
    std::swap(ticket_, other->ticket_);
    std::swap(card_, other->card_);
    std::swap(majiang_, other->majiang_);
    std::swap(majiangwin_, other->majiangwin_);
    std::swap(jinhua_, other->jinhua_);
    std::swap(jinhuawin_, other->jinhuawin_);
    std::swap(matchscore_, other->matchscore_);
    std::swap(fruit_, other->fruit_);
    std::swap(majiangbaojian_, other->majiangbaojian_);
    std::swap(jinhuabaojian_, other->jinhuabaojian_);
    std::swap(vip_, other->vip_);
    std::swap(nickname_, other->nickname_);
    std::swap(qqhead_, other->qqhead_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Comon_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Comon_role_info_descriptor_;
  metadata.reflection = GM_Comon_role_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
