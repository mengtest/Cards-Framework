// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: astrology.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "astrology.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_AstrologyHis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AstrologyHis_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Astrology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Astrology_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_astrology_2etxt() {
  protobuf_AddDesc_astrology_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "astrology.txt");
  GOOGLE_CHECK(file != NULL);
  GM_AstrologyHis_descriptor_ = file->message_type(0);
  static const int GM_AstrologyHis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AstrologyHis, m_hisstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AstrologyHis, m_own_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AstrologyHis, m_data_),
  };
  GM_AstrologyHis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AstrologyHis_descriptor_,
      GM_AstrologyHis::default_instance_,
      GM_AstrologyHis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AstrologyHis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AstrologyHis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AstrologyHis));
  GM_Astrology_descriptor_ = file->message_type(1);
  static const int GM_Astrology_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Astrology, m_enumid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Astrology, m_enumtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Astrology, m_value_),
  };
  GM_Astrology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Astrology_descriptor_,
      GM_Astrology::default_instance_,
      GM_Astrology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Astrology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Astrology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Astrology));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_astrology_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AstrologyHis_descriptor_, &GM_AstrologyHis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Astrology_descriptor_, &GM_Astrology::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_astrology_2etxt() {
  delete GM_AstrologyHis::default_instance_;
  delete GM_AstrologyHis_reflection_;
  delete GM_Astrology::default_instance_;
  delete GM_Astrology_reflection_;
}

void protobuf_AddDesc_astrology_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rastrology.txt\"R\n\017GM_AstrologyHis\022\021\n\tm_"
    "hisStar\030\001 \002(\005\022\r\n\005m_own\030\002 \001(\005\022\035\n\006m_data\030\003"
    " \003(\0132\r.GM_Astrology\"E\n\014GM_Astrology\022\020\n\010m"
    "_enumId\030\001 \002(\005\022\022\n\nm_enumtype\030\002 \001(\005\022\017\n\007m_v"
    "alue\030\003 \001(\005", 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "astrology.txt", &protobuf_RegisterTypes);
  GM_AstrologyHis::default_instance_ = new GM_AstrologyHis();
  GM_Astrology::default_instance_ = new GM_Astrology();
  GM_AstrologyHis::default_instance_->InitAsDefaultInstance();
  GM_Astrology::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_astrology_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_astrology_2etxt {
  StaticDescriptorInitializer_astrology_2etxt() {
    protobuf_AddDesc_astrology_2etxt();
  }
} static_descriptor_initializer_astrology_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_AstrologyHis::kMHisStarFieldNumber;
const int GM_AstrologyHis::kMOwnFieldNumber;
const int GM_AstrologyHis::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_AstrologyHis::GM_AstrologyHis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AstrologyHis::InitAsDefaultInstance() {
}

GM_AstrologyHis::GM_AstrologyHis(const GM_AstrologyHis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AstrologyHis::SharedCtor() {
  _cached_size_ = 0;
  m_hisstar_ = 0;
  m_own_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AstrologyHis::~GM_AstrologyHis() {
  SharedDtor();
}

void GM_AstrologyHis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AstrologyHis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AstrologyHis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AstrologyHis_descriptor_;
}

const GM_AstrologyHis& GM_AstrologyHis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_astrology_2etxt();
  return *default_instance_;
}

GM_AstrologyHis* GM_AstrologyHis::default_instance_ = NULL;

GM_AstrologyHis* GM_AstrologyHis::New() const {
  return new GM_AstrologyHis;
}

void GM_AstrologyHis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_hisstar_ = 0;
    m_own_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AstrologyHis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_hisStar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_hisstar_)));
          set_has_m_hisstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_own;
        break;
      }

      // optional int32 m_own = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_own:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_own_)));
          set_has_m_own();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_data;
        break;
      }

      // repeated .GM_Astrology m_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AstrologyHis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_hisStar = 1;
  if (has_m_hisstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_hisstar(), output);
  }

  // optional int32 m_own = 2;
  if (has_m_own()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_own(), output);
  }

  // repeated .GM_Astrology m_data = 3;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AstrologyHis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_hisStar = 1;
  if (has_m_hisstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_hisstar(), target);
  }

  // optional int32 m_own = 2;
  if (has_m_own()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_own(), target);
  }

  // repeated .GM_Astrology m_data = 3;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AstrologyHis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_hisStar = 1;
    if (has_m_hisstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_hisstar());
    }

    // optional int32 m_own = 2;
    if (has_m_own()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_own());
    }

  }
  // repeated .GM_Astrology m_data = 3;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AstrologyHis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AstrologyHis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AstrologyHis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AstrologyHis::MergeFrom(const GM_AstrologyHis& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_hisstar()) {
      set_m_hisstar(from.m_hisstar());
    }
    if (from.has_m_own()) {
      set_m_own(from.m_own());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AstrologyHis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AstrologyHis::CopyFrom(const GM_AstrologyHis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AstrologyHis::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AstrologyHis::Swap(GM_AstrologyHis* other) {
  if (other != this) {
    std::swap(m_hisstar_, other->m_hisstar_);
    std::swap(m_own_, other->m_own_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AstrologyHis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AstrologyHis_descriptor_;
  metadata.reflection = GM_AstrologyHis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Astrology::kMEnumIdFieldNumber;
const int GM_Astrology::kMEnumtypeFieldNumber;
const int GM_Astrology::kMValueFieldNumber;
#endif  // !_MSC_VER

GM_Astrology::GM_Astrology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Astrology::InitAsDefaultInstance() {
}

GM_Astrology::GM_Astrology(const GM_Astrology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Astrology::SharedCtor() {
  _cached_size_ = 0;
  m_enumid_ = 0;
  m_enumtype_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Astrology::~GM_Astrology() {
  SharedDtor();
}

void GM_Astrology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Astrology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Astrology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Astrology_descriptor_;
}

const GM_Astrology& GM_Astrology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_astrology_2etxt();
  return *default_instance_;
}

GM_Astrology* GM_Astrology::default_instance_ = NULL;

GM_Astrology* GM_Astrology::New() const {
  return new GM_Astrology;
}

void GM_Astrology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_enumid_ = 0;
    m_enumtype_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Astrology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_enumId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enumid_)));
          set_has_m_enumid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_enumtype;
        break;
      }

      // optional int32 m_enumtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_enumtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enumtype_)));
          set_has_m_enumtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Astrology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_enumId = 1;
  if (has_m_enumid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_enumid(), output);
  }

  // optional int32 m_enumtype = 2;
  if (has_m_enumtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_enumtype(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Astrology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_enumId = 1;
  if (has_m_enumid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_enumid(), target);
  }

  // optional int32 m_enumtype = 2;
  if (has_m_enumtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_enumtype(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Astrology::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_enumId = 1;
    if (has_m_enumid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enumid());
    }

    // optional int32 m_enumtype = 2;
    if (has_m_enumtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enumtype());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Astrology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Astrology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Astrology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Astrology::MergeFrom(const GM_Astrology& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_enumid()) {
      set_m_enumid(from.m_enumid());
    }
    if (from.has_m_enumtype()) {
      set_m_enumtype(from.m_enumtype());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Astrology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Astrology::CopyFrom(const GM_Astrology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Astrology::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Astrology::Swap(GM_Astrology* other) {
  if (other != this) {
    std::swap(m_enumid_, other->m_enumid_);
    std::swap(m_enumtype_, other->m_enumtype_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Astrology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Astrology_descriptor_;
  metadata.reflection = GM_Astrology_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
