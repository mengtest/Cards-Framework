// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_package.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_package.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_PackageGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PackageGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_PackageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_PackageData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fpackage_2etxt() {
  protobuf_AddDesc_SP_5fpackage_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_package.txt");
  GOOGLE_CHECK(file != NULL);
  SM_PackageGrid_descriptor_ = file->message_type(0);
  static const int SM_PackageGrid_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_packid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_seal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, m_indate_),
  };
  SM_PackageGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PackageGrid_descriptor_,
      SM_PackageGrid::default_instance_,
      SM_PackageGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PackageGrid));
  SM_PackageData_descriptor_ = file->message_type(1);
  static const int SM_PackageData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageData, grid_),
  };
  SM_PackageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_PackageData_descriptor_,
      SM_PackageData::default_instance_,
      SM_PackageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_PackageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_PackageData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fpackage_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PackageGrid_descriptor_, &SM_PackageGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_PackageData_descriptor_, &SM_PackageData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fpackage_2etxt() {
  delete SM_PackageGrid::default_instance_;
  delete SM_PackageGrid_reflection_;
  delete SM_PackageData::default_instance_;
  delete SM_PackageData_reflection_;
}

void protobuf_AddDesc_SP_5fpackage_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SP_package.txt\"\251\001\n\016SM_PackageGrid\022\020\n\010m"
    "_RoleID\030\001 \002(\005\022\016\n\006m_GMID\030\002 \002(\003\022\020\n\010m_TypeI"
    "D\030\003 \002(\005\022\020\n\010m_PackID\030\004 \002(\005\022\016\n\006m_Grid\030\005 \002("
    "\005\022\017\n\007m_Count\030\006 \002(\005\022\016\n\006m_Bind\030\007 \002(\005\022\016\n\006m_"
    "Seal\030\010 \002(\005\022\020\n\010m_Indate\030\t \002(\005\">\n\016SM_Packa"
    "geData\022\r\n\005count\030\001 \002(\005\022\035\n\004grid\030\002 \003(\0132\017.SM"
    "_PackageGrid", 252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_package.txt", &protobuf_RegisterTypes);
  SM_PackageGrid::default_instance_ = new SM_PackageGrid();
  SM_PackageData::default_instance_ = new SM_PackageData();
  SM_PackageGrid::default_instance_->InitAsDefaultInstance();
  SM_PackageData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fpackage_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fpackage_2etxt {
  StaticDescriptorInitializer_SP_5fpackage_2etxt() {
    protobuf_AddDesc_SP_5fpackage_2etxt();
  }
} static_descriptor_initializer_SP_5fpackage_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_PackageGrid::kMRoleIDFieldNumber;
const int SM_PackageGrid::kMGMIDFieldNumber;
const int SM_PackageGrid::kMTypeIDFieldNumber;
const int SM_PackageGrid::kMPackIDFieldNumber;
const int SM_PackageGrid::kMGridFieldNumber;
const int SM_PackageGrid::kMCountFieldNumber;
const int SM_PackageGrid::kMBindFieldNumber;
const int SM_PackageGrid::kMSealFieldNumber;
const int SM_PackageGrid::kMIndateFieldNumber;
#endif  // !_MSC_VER

SM_PackageGrid::SM_PackageGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PackageGrid::InitAsDefaultInstance() {
}

SM_PackageGrid::SM_PackageGrid(const SM_PackageGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PackageGrid::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_gmid_ = GOOGLE_LONGLONG(0);
  m_typeid_ = 0;
  m_packid_ = 0;
  m_grid_ = 0;
  m_count_ = 0;
  m_bind_ = 0;
  m_seal_ = 0;
  m_indate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PackageGrid::~SM_PackageGrid() {
  SharedDtor();
}

void SM_PackageGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_PackageGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PackageGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PackageGrid_descriptor_;
}

const SM_PackageGrid& SM_PackageGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpackage_2etxt();
  return *default_instance_;
}

SM_PackageGrid* SM_PackageGrid::default_instance_ = NULL;

SM_PackageGrid* SM_PackageGrid::New() const {
  return new SM_PackageGrid;
}

void SM_PackageGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_gmid_ = GOOGLE_LONGLONG(0);
    m_typeid_ = 0;
    m_packid_ = 0;
    m_grid_ = 0;
    m_count_ = 0;
    m_bind_ = 0;
    m_seal_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_indate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PackageGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_GMID;
        break;
      }

      // required int64 m_GMID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_gmid_)));
          set_has_m_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_TypeID;
        break;
      }

      // required int32 m_TypeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_PackID;
        break;
      }

      // required int32 m_PackID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packid_)));
          set_has_m_packid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Grid;
        break;
      }

      // required int32 m_Grid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grid_)));
          set_has_m_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_Count;
        break;
      }

      // required int32 m_Count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_Bind;
        break;
      }

      // required int32 m_Bind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bind_)));
          set_has_m_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_Seal;
        break;
      }

      // required int32 m_Seal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Seal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seal_)));
          set_has_m_seal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_Indate;
        break;
      }

      // required int32 m_Indate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Indate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_indate_)));
          set_has_m_indate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PackageGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // required int64 m_GMID = 2;
  if (has_m_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_gmid(), output);
  }

  // required int32 m_TypeID = 3;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_typeid(), output);
  }

  // required int32 m_PackID = 4;
  if (has_m_packid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_packid(), output);
  }

  // required int32 m_Grid = 5;
  if (has_m_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_grid(), output);
  }

  // required int32 m_Count = 6;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_count(), output);
  }

  // required int32 m_Bind = 7;
  if (has_m_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_bind(), output);
  }

  // required int32 m_Seal = 8;
  if (has_m_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_seal(), output);
  }

  // required int32 m_Indate = 9;
  if (has_m_indate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_indate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PackageGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_RoleID = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // required int64 m_GMID = 2;
  if (has_m_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_gmid(), target);
  }

  // required int32 m_TypeID = 3;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_typeid(), target);
  }

  // required int32 m_PackID = 4;
  if (has_m_packid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_packid(), target);
  }

  // required int32 m_Grid = 5;
  if (has_m_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_grid(), target);
  }

  // required int32 m_Count = 6;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_count(), target);
  }

  // required int32 m_Bind = 7;
  if (has_m_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_bind(), target);
  }

  // required int32 m_Seal = 8;
  if (has_m_seal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_seal(), target);
  }

  // required int32 m_Indate = 9;
  if (has_m_indate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_indate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PackageGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_RoleID = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // required int64 m_GMID = 2;
    if (has_m_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_gmid());
    }

    // required int32 m_TypeID = 3;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // required int32 m_PackID = 4;
    if (has_m_packid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packid());
    }

    // required int32 m_Grid = 5;
    if (has_m_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grid());
    }

    // required int32 m_Count = 6;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // required int32 m_Bind = 7;
    if (has_m_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bind());
    }

    // required int32 m_Seal = 8;
    if (has_m_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 m_Indate = 9;
    if (has_m_indate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_indate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PackageGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PackageGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PackageGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PackageGrid::MergeFrom(const SM_PackageGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_gmid()) {
      set_m_gmid(from.m_gmid());
    }
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_packid()) {
      set_m_packid(from.m_packid());
    }
    if (from.has_m_grid()) {
      set_m_grid(from.m_grid());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_bind()) {
      set_m_bind(from.m_bind());
    }
    if (from.has_m_seal()) {
      set_m_seal(from.m_seal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_indate()) {
      set_m_indate(from.m_indate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PackageGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PackageGrid::CopyFrom(const SM_PackageGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PackageGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void SM_PackageGrid::Swap(SM_PackageGrid* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_gmid_, other->m_gmid_);
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_packid_, other->m_packid_);
    std::swap(m_grid_, other->m_grid_);
    std::swap(m_count_, other->m_count_);
    std::swap(m_bind_, other->m_bind_);
    std::swap(m_seal_, other->m_seal_);
    std::swap(m_indate_, other->m_indate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PackageGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PackageGrid_descriptor_;
  metadata.reflection = SM_PackageGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_PackageData::kCountFieldNumber;
const int SM_PackageData::kGridFieldNumber;
#endif  // !_MSC_VER

SM_PackageData::SM_PackageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_PackageData::InitAsDefaultInstance() {
}

SM_PackageData::SM_PackageData(const SM_PackageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_PackageData::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_PackageData::~SM_PackageData() {
  SharedDtor();
}

void SM_PackageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_PackageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_PackageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_PackageData_descriptor_;
}

const SM_PackageData& SM_PackageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fpackage_2etxt();
  return *default_instance_;
}

SM_PackageData* SM_PackageData::default_instance_ = NULL;

SM_PackageData* SM_PackageData::New() const {
  return new SM_PackageData;
}

void SM_PackageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  grid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_PackageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grid;
        break;
      }

      // repeated .SM_PackageGrid grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_PackageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SM_PackageGrid grid = 2;
  for (int i = 0; i < this->grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_PackageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SM_PackageGrid grid = 2;
  for (int i = 0; i < this->grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_PackageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SM_PackageGrid grid = 2;
  total_size += 1 * this->grid_size();
  for (int i = 0; i < this->grid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_PackageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_PackageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_PackageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_PackageData::MergeFrom(const SM_PackageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_.MergeFrom(from.grid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_PackageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_PackageData::CopyFrom(const SM_PackageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_PackageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < grid_size(); i++) {
    if (!this->grid(i).IsInitialized()) return false;
  }
  return true;
}

void SM_PackageData::Swap(SM_PackageData* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    grid_.Swap(&other->grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_PackageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_PackageData_descriptor_;
  metadata.reflection = SM_PackageData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
