// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: challenge.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "challenge.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Challenge_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Choose_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Choose_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Choose_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Choose_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Reset_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Reset_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Fortune_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Fortune_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Reset_Fortune_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Reset_Fortune_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Fortune_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Fortune_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Start_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Start_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Ready_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Ready_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Pet_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Pet_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Proof_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Proof_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Store_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Store_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Store_Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Store_Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Store_Reset_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Store_Reset_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Store_Buy_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Store_Buy_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_Store_Buy_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_Store_Buy_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_OnBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_OnBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_OnBattle_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_OnBattle_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Rent_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Rent_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Rent_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Rent_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Hire_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Hire_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Hire_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_RentPet_Hire_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_SwitchCardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_SwitchCardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_SwitchCard_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_SwitchCard_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Challenge_SwitchCard_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Challenge_SwitchCard_Return_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_challenge_2etxt() {
  protobuf_AddDesc_challenge_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "challenge.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Challenge_Open_Return_descriptor_ = file->message_type(0);
  static const int GM_Challenge_Open_Return_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, rolehp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, matchname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, matchlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, matchfightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, matchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, matchprofession_),
  };
  GM_Challenge_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Open_Return_descriptor_,
      GM_Challenge_Open_Return::default_instance_,
      GM_Challenge_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Open_Return));
  GM_Challenge_Choose_Request_descriptor_ = file->message_type(1);
  static const int GM_Challenge_Choose_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Choose_Request, degree_),
  };
  GM_Challenge_Choose_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Choose_Request_descriptor_,
      GM_Challenge_Choose_Request::default_instance_,
      GM_Challenge_Choose_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Choose_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Choose_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Choose_Request));
  GM_Challenge_Choose_Return_descriptor_ = file->message_type(2);
  static const int GM_Challenge_Choose_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Choose_Return, result_),
  };
  GM_Challenge_Choose_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Choose_Return_descriptor_,
      GM_Challenge_Choose_Return::default_instance_,
      GM_Challenge_Choose_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Choose_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Choose_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Choose_Return));
  GM_Challenge_Reset_Return_descriptor_ = file->message_type(3);
  static const int GM_Challenge_Reset_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Return, result_),
  };
  GM_Challenge_Reset_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Reset_Return_descriptor_,
      GM_Challenge_Reset_Return::default_instance_,
      GM_Challenge_Reset_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Reset_Return));
  GM_Challenge_Fortune_Open_Return_descriptor_ = file->message_type(4);
  static const int GM_Challenge_Fortune_Open_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Open_Return, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Open_Return, fortuneinfo_),
  };
  GM_Challenge_Fortune_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Fortune_Open_Return_descriptor_,
      GM_Challenge_Fortune_Open_Return::default_instance_,
      GM_Challenge_Fortune_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Fortune_Open_Return));
  GM_Challenge_Reset_Fortune_Return_descriptor_ = file->message_type(5);
  static const int GM_Challenge_Reset_Fortune_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Fortune_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Fortune_Return, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Fortune_Return, fortuneinfo_),
  };
  GM_Challenge_Reset_Fortune_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Reset_Fortune_Return_descriptor_,
      GM_Challenge_Reset_Fortune_Return::default_instance_,
      GM_Challenge_Reset_Fortune_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Fortune_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Reset_Fortune_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Reset_Fortune_Return));
  GM_Challenge_Fortune_Info_descriptor_ = file->message_type(6);
  static const int GM_Challenge_Fortune_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Info, fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Info, role_fortune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Info, pet_fortune_),
  };
  GM_Challenge_Fortune_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Fortune_Info_descriptor_,
      GM_Challenge_Fortune_Info::default_instance_,
      GM_Challenge_Fortune_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Fortune_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Fortune_Info));
  GM_Challenge_Start_Return_descriptor_ = file->message_type(7);
  static const int GM_Challenge_Start_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Start_Return, result_),
  };
  GM_Challenge_Start_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Start_Return_descriptor_,
      GM_Challenge_Start_Return::default_instance_,
      GM_Challenge_Start_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Start_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Start_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Start_Return));
  GM_Challenge_Ready_Return_descriptor_ = file->message_type(8);
  static const int GM_Challenge_Ready_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Ready_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Ready_Return, data_),
  };
  GM_Challenge_Ready_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Ready_Return_descriptor_,
      GM_Challenge_Ready_Return::default_instance_,
      GM_Challenge_Ready_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Ready_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Ready_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Ready_Return));
  GM_Challenge_Pet_Info_descriptor_ = file->message_type(9);
  static const int GM_Challenge_Pet_Info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, hpdecrease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, onbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, petid_),
  };
  GM_Challenge_Pet_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Pet_Info_descriptor_,
      GM_Challenge_Pet_Info::default_instance_,
      GM_Challenge_Pet_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Pet_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Pet_Info));
  GM_Challenge_Proof_Notify_descriptor_ = file->message_type(10);
  static const int GM_Challenge_Proof_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Proof_Notify, proof_),
  };
  GM_Challenge_Proof_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Proof_Notify_descriptor_,
      GM_Challenge_Proof_Notify::default_instance_,
      GM_Challenge_Proof_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Proof_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Proof_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Proof_Notify));
  GM_Challenge_Store_Open_Return_descriptor_ = file->message_type(11);
  static const int GM_Challenge_Store_Open_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Open_Return, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Open_Return, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Open_Return, resetcost_),
  };
  GM_Challenge_Store_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Store_Open_Return_descriptor_,
      GM_Challenge_Store_Open_Return::default_instance_,
      GM_Challenge_Store_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Store_Open_Return));
  GM_Challenge_Store_Object_descriptor_ = file->message_type(12);
  static const int GM_Challenge_Store_Object_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Object, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Object, remaindercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Object, costnum_),
  };
  GM_Challenge_Store_Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Store_Object_descriptor_,
      GM_Challenge_Store_Object::default_instance_,
      GM_Challenge_Store_Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Store_Object));
  GM_Challenge_Store_Reset_Return_descriptor_ = file->message_type(13);
  static const int GM_Challenge_Store_Reset_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Reset_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Reset_Return, proof_),
  };
  GM_Challenge_Store_Reset_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Store_Reset_Return_descriptor_,
      GM_Challenge_Store_Reset_Return::default_instance_,
      GM_Challenge_Store_Reset_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Reset_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Reset_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Store_Reset_Return));
  GM_Challenge_Store_Buy_Return_descriptor_ = file->message_type(14);
  static const int GM_Challenge_Store_Buy_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Return, objectid_),
  };
  GM_Challenge_Store_Buy_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Store_Buy_Return_descriptor_,
      GM_Challenge_Store_Buy_Return::default_instance_,
      GM_Challenge_Store_Buy_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Store_Buy_Return));
  GM_Challenge_Store_Buy_Result_descriptor_ = file->message_type(15);
  static const int GM_Challenge_Store_Buy_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Result, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Result, proof_),
  };
  GM_Challenge_Store_Buy_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_Store_Buy_Result_descriptor_,
      GM_Challenge_Store_Buy_Result::default_instance_,
      GM_Challenge_Store_Buy_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_Store_Buy_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_Store_Buy_Result));
  GM_Challenge_OnBattle_descriptor_ = file->message_type(16);
  static const int GM_Challenge_OnBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle, battlehole_),
  };
  GM_Challenge_OnBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_OnBattle_descriptor_,
      GM_Challenge_OnBattle::default_instance_,
      GM_Challenge_OnBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_OnBattle));
  GM_Challenge_OnBattle_Return_descriptor_ = file->message_type(17);
  static const int GM_Challenge_OnBattle_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle_Return, battlehole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle_Return, datainfo_),
  };
  GM_Challenge_OnBattle_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_OnBattle_Return_descriptor_,
      GM_Challenge_OnBattle_Return::default_instance_,
      GM_Challenge_OnBattle_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_OnBattle_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_OnBattle_Return));
  GM_Challenge_RentPet_Return_descriptor_ = file->message_type(18);
  static const int GM_Challenge_RentPet_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Return, money_),
  };
  GM_Challenge_RentPet_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Return_descriptor_,
      GM_Challenge_RentPet_Return::default_instance_,
      GM_Challenge_RentPet_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Return));
  GM_Challenge_RentPet_Rent_Request_descriptor_ = file->message_type(19);
  static const int GM_Challenge_RentPet_Rent_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Request, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Request, operate_),
  };
  GM_Challenge_RentPet_Rent_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Rent_Request_descriptor_,
      GM_Challenge_RentPet_Rent_Request::default_instance_,
      GM_Challenge_RentPet_Rent_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Rent_Request));
  GM_Challenge_RentPet_Rent_Return_descriptor_ = file->message_type(20);
  static const int GM_Challenge_RentPet_Rent_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Return, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Return, money_),
  };
  GM_Challenge_RentPet_Rent_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Rent_Return_descriptor_,
      GM_Challenge_RentPet_Rent_Return::default_instance_,
      GM_Challenge_RentPet_Rent_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Rent_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Rent_Return));
  GM_Challenge_RentPet_Open_Return_descriptor_ = file->message_type(21);
  static const int GM_Challenge_RentPet_Open_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Open_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Open_Return, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Open_Return, data_),
  };
  GM_Challenge_RentPet_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Open_Return_descriptor_,
      GM_Challenge_RentPet_Open_Return::default_instance_,
      GM_Challenge_RentPet_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Open_Return));
  GM_Challenge_RentPet_Info_descriptor_ = file->message_type(22);
  static const int GM_Challenge_RentPet_Info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, evolve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, ownername_),
  };
  GM_Challenge_RentPet_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Info_descriptor_,
      GM_Challenge_RentPet_Info::default_instance_,
      GM_Challenge_RentPet_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Info));
  GM_Challenge_RentPet_Hire_Request_descriptor_ = file->message_type(23);
  static const int GM_Challenge_RentPet_Hire_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Request, gmid_),
  };
  GM_Challenge_RentPet_Hire_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Hire_Request_descriptor_,
      GM_Challenge_RentPet_Hire_Request::default_instance_,
      GM_Challenge_RentPet_Hire_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Hire_Request));
  GM_Challenge_RentPet_Hire_Return_descriptor_ = file->message_type(24);
  static const int GM_Challenge_RentPet_Hire_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Return, data_),
  };
  GM_Challenge_RentPet_Hire_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_RentPet_Hire_Return_descriptor_,
      GM_Challenge_RentPet_Hire_Return::default_instance_,
      GM_Challenge_RentPet_Hire_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_RentPet_Hire_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_RentPet_Hire_Return));
  GM_Challenge_SwitchCardItem_descriptor_ = file->message_type(25);
  static const int GM_Challenge_SwitchCardItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCardItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCardItem, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCardItem, objectnum_),
  };
  GM_Challenge_SwitchCardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_SwitchCardItem_descriptor_,
      GM_Challenge_SwitchCardItem::default_instance_,
      GM_Challenge_SwitchCardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_SwitchCardItem));
  GM_Challenge_SwitchCard_Request_descriptor_ = file->message_type(26);
  static const int GM_Challenge_SwitchCard_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Request, pos_),
  };
  GM_Challenge_SwitchCard_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_SwitchCard_Request_descriptor_,
      GM_Challenge_SwitchCard_Request::default_instance_,
      GM_Challenge_SwitchCard_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_SwitchCard_Request));
  GM_Challenge_SwitchCard_Return_descriptor_ = file->message_type(27);
  static const int GM_Challenge_SwitchCard_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Return, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Return, item_),
  };
  GM_Challenge_SwitchCard_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Challenge_SwitchCard_Return_descriptor_,
      GM_Challenge_SwitchCard_Return::default_instance_,
      GM_Challenge_SwitchCard_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Challenge_SwitchCard_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Challenge_SwitchCard_Return));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_challenge_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Open_Return_descriptor_, &GM_Challenge_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Choose_Request_descriptor_, &GM_Challenge_Choose_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Choose_Return_descriptor_, &GM_Challenge_Choose_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Reset_Return_descriptor_, &GM_Challenge_Reset_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Fortune_Open_Return_descriptor_, &GM_Challenge_Fortune_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Reset_Fortune_Return_descriptor_, &GM_Challenge_Reset_Fortune_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Fortune_Info_descriptor_, &GM_Challenge_Fortune_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Start_Return_descriptor_, &GM_Challenge_Start_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Ready_Return_descriptor_, &GM_Challenge_Ready_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Pet_Info_descriptor_, &GM_Challenge_Pet_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Proof_Notify_descriptor_, &GM_Challenge_Proof_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Store_Open_Return_descriptor_, &GM_Challenge_Store_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Store_Object_descriptor_, &GM_Challenge_Store_Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Store_Reset_Return_descriptor_, &GM_Challenge_Store_Reset_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Store_Buy_Return_descriptor_, &GM_Challenge_Store_Buy_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_Store_Buy_Result_descriptor_, &GM_Challenge_Store_Buy_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_OnBattle_descriptor_, &GM_Challenge_OnBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_OnBattle_Return_descriptor_, &GM_Challenge_OnBattle_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Return_descriptor_, &GM_Challenge_RentPet_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Rent_Request_descriptor_, &GM_Challenge_RentPet_Rent_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Rent_Return_descriptor_, &GM_Challenge_RentPet_Rent_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Open_Return_descriptor_, &GM_Challenge_RentPet_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Info_descriptor_, &GM_Challenge_RentPet_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Hire_Request_descriptor_, &GM_Challenge_RentPet_Hire_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_RentPet_Hire_Return_descriptor_, &GM_Challenge_RentPet_Hire_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_SwitchCardItem_descriptor_, &GM_Challenge_SwitchCardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_SwitchCard_Request_descriptor_, &GM_Challenge_SwitchCard_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Challenge_SwitchCard_Return_descriptor_, &GM_Challenge_SwitchCard_Return::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_challenge_2etxt() {
  delete GM_Challenge_Open_Return::default_instance_;
  delete GM_Challenge_Open_Return_reflection_;
  delete GM_Challenge_Choose_Request::default_instance_;
  delete GM_Challenge_Choose_Request_reflection_;
  delete GM_Challenge_Choose_Return::default_instance_;
  delete GM_Challenge_Choose_Return_reflection_;
  delete GM_Challenge_Reset_Return::default_instance_;
  delete GM_Challenge_Reset_Return_reflection_;
  delete GM_Challenge_Fortune_Open_Return::default_instance_;
  delete GM_Challenge_Fortune_Open_Return_reflection_;
  delete GM_Challenge_Reset_Fortune_Return::default_instance_;
  delete GM_Challenge_Reset_Fortune_Return_reflection_;
  delete GM_Challenge_Fortune_Info::default_instance_;
  delete GM_Challenge_Fortune_Info_reflection_;
  delete GM_Challenge_Start_Return::default_instance_;
  delete GM_Challenge_Start_Return_reflection_;
  delete GM_Challenge_Ready_Return::default_instance_;
  delete GM_Challenge_Ready_Return_reflection_;
  delete GM_Challenge_Pet_Info::default_instance_;
  delete GM_Challenge_Pet_Info_reflection_;
  delete GM_Challenge_Proof_Notify::default_instance_;
  delete GM_Challenge_Proof_Notify_reflection_;
  delete GM_Challenge_Store_Open_Return::default_instance_;
  delete GM_Challenge_Store_Open_Return_reflection_;
  delete GM_Challenge_Store_Object::default_instance_;
  delete GM_Challenge_Store_Object_reflection_;
  delete GM_Challenge_Store_Reset_Return::default_instance_;
  delete GM_Challenge_Store_Reset_Return_reflection_;
  delete GM_Challenge_Store_Buy_Return::default_instance_;
  delete GM_Challenge_Store_Buy_Return_reflection_;
  delete GM_Challenge_Store_Buy_Result::default_instance_;
  delete GM_Challenge_Store_Buy_Result_reflection_;
  delete GM_Challenge_OnBattle::default_instance_;
  delete GM_Challenge_OnBattle_reflection_;
  delete GM_Challenge_OnBattle_Return::default_instance_;
  delete GM_Challenge_OnBattle_Return_reflection_;
  delete GM_Challenge_RentPet_Return::default_instance_;
  delete GM_Challenge_RentPet_Return_reflection_;
  delete GM_Challenge_RentPet_Rent_Request::default_instance_;
  delete GM_Challenge_RentPet_Rent_Request_reflection_;
  delete GM_Challenge_RentPet_Rent_Return::default_instance_;
  delete GM_Challenge_RentPet_Rent_Return_reflection_;
  delete GM_Challenge_RentPet_Open_Return::default_instance_;
  delete GM_Challenge_RentPet_Open_Return_reflection_;
  delete GM_Challenge_RentPet_Info::default_instance_;
  delete GM_Challenge_RentPet_Info_reflection_;
  delete GM_Challenge_RentPet_Hire_Request::default_instance_;
  delete GM_Challenge_RentPet_Hire_Request_reflection_;
  delete GM_Challenge_RentPet_Hire_Return::default_instance_;
  delete GM_Challenge_RentPet_Hire_Return_reflection_;
  delete GM_Challenge_SwitchCardItem::default_instance_;
  delete GM_Challenge_SwitchCardItem_reflection_;
  delete GM_Challenge_SwitchCard_Request::default_instance_;
  delete GM_Challenge_SwitchCard_Request_reflection_;
  delete GM_Challenge_SwitchCard_Return::default_instance_;
  delete GM_Challenge_SwitchCard_Return_reflection_;
}

void protobuf_AddDesc_challenge_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rchallenge.txt\"\246\001\n\030GM_Challenge_Open_Re"
    "turn\022\016\n\006result\030\001 \002(\005\022\016\n\006roleHP\030\002 \001(\005\022\021\n\t"
    "matchName\030\003 \001(\t\022\022\n\nmatchlevel\030\004 \001(\005\022\027\n\017m"
    "atchfightvalue\030\005 \001(\005\022\021\n\tmatchtime\030\006 \001(\005\022"
    "\027\n\017matchprofession\030\007 \001(\005\"-\n\033GM_Challenge"
    "_Choose_Request\022\016\n\006degree\030\001 \002(\005\",\n\032GM_Ch"
    "allenge_Choose_Return\022\016\n\006result\030\001 \002(\005\"+\n"
    "\031GM_Challenge_Reset_Return\022\016\n\006result\030\001 \002"
    "(\005\"g\n GM_Challenge_Fortune_Open_Return\022\022"
    "\n\nremaintime\030\001 \002(\005\022/\n\013fortuneInfo\030\002 \001(\0132"
    "\032.GM_Challenge_Fortune_Info\"x\n!GM_Challe"
    "nge_Reset_Fortune_Return\022\016\n\006result\030\001 \002(\005"
    "\022\022\n\nremaintime\030\002 \001(\005\022/\n\013fortuneInfo\030\010 \001("
    "\0132\032.GM_Challenge_Fortune_Info\"X\n\031GM_Chal"
    "lenge_Fortune_Info\022\020\n\010fbtypeid\030\001 \002(\005\022\024\n\014"
    "role_fortune\030\002 \002(\005\022\023\n\013pet_fortune\030\003 \002(\005\""
    "+\n\031GM_Challenge_Start_Return\022\016\n\006result\030\001"
    " \002(\005\"Q\n\031GM_Challenge_Ready_Return\022\016\n\006res"
    "ult\030\001 \002(\005\022$\n\004data\030\002 \003(\0132\026.GM_Challenge_P"
    "et_Info\"{\n\025GM_Challenge_Pet_Info\022\016\n\006role"
    "id\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022\022\n\nhpdecrease\030\003 \001"
    "(\005\022\017\n\007ownerid\030\004 \001(\005\022\020\n\010onbattle\030\005 \001(\005\022\r\n"
    "\005petid\030\006 \001(\005\"*\n\031GM_Challenge_Proof_Notif"
    "y\022\r\n\005proof\030\001 \002(\005\"l\n\036GM_Challenge_Store_O"
    "pen_Return\022\r\n\005proof\030\001 \002(\005\022(\n\004data\030\002 \003(\0132"
    "\032.GM_Challenge_Store_Object\022\021\n\tresetcost"
    "\030\003 \001(\005\"V\n\031GM_Challenge_Store_Object\022\020\n\010o"
    "bjectid\030\001 \002(\005\022\026\n\016remaindercount\030\002 \002(\005\022\017\n"
    "\007costnum\030\003 \002(\005\"@\n\037GM_Challenge_Store_Res"
    "et_Return\022\016\n\006result\030\001 \002(\005\022\r\n\005proof\030\002 \002(\005"
    "\"1\n\035GM_Challenge_Store_Buy_Return\022\020\n\010obj"
    "ectid\030\001 \002(\005\"P\n\035GM_Challenge_Store_Buy_Re"
    "sult\022\016\n\006result\030\001 \002(\005\022\020\n\010objectid\030\002 \002(\005\022\r"
    "\n\005proof\030\003 \002(\005\"9\n\025GM_Challenge_OnBattle\022\014"
    "\n\004gmid\030\001 \002(\003\022\022\n\nbattleHole\030\002 \001(\005\"l\n\034GM_C"
    "hallenge_OnBattle_Return\022\016\n\006result\030\001 \002(\005"
    "\022\022\n\nbattleHole\030\002 \001(\005\022(\n\010dataInfo\030\003 \003(\0132\026"
    ".GM_Challenge_OnBattle\"J\n\033GM_Challenge_R"
    "entPet_Return\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid\030\002 "
    "\001(\003\022\r\n\005money\030\004 \001(\005\"B\n!GM_Challenge_RentP"
    "et_Rent_Request\022\014\n\004gmid\030\001 \002(\003\022\017\n\007operate"
    "\030\002 \002(\005\"`\n GM_Challenge_RentPet_Rent_Retu"
    "rn\022\016\n\006result\030\001 \002(\005\022\014\n\004gmid\030\002 \001(\003\022\017\n\007oper"
    "ate\030\003 \002(\005\022\r\n\005money\030\004 \001(\005\"k\n GM_Challenge"
    "_RentPet_Open_Return\022\016\n\006result\030\001 \002(\005\022\r\n\005"
    "count\030\002 \002(\005\022(\n\004data\030\003 \003(\0132\032.GM_Challenge"
    "_RentPet_Info\"y\n\031GM_Challenge_RentPet_In"
    "fo\022\014\n\004gmid\030\001 \002(\003\022\r\n\005petid\030\002 \001(\005\022\r\n\005level"
    "\030\003 \001(\005\022\016\n\006evolve\030\004 \001(\005\022\r\n\005money\030\005 \001(\005\022\021\n"
    "\townerName\030\006 \001(\t\"1\n!GM_Challenge_RentPet"
    "_Hire_Request\022\014\n\004gmid\030\001 \002(\003\"f\n GM_Challe"
    "nge_RentPet_Hire_Return\022\016\n\006result\030\001 \002(\005\022"
    "\014\n\004gmid\030\002 \001(\003\022$\n\004data\030\003 \001(\0132\026.GM_Challen"
    "ge_Pet_Info\"O\n\033GM_Challenge_SwitchCardIt"
    "em\022\013\n\003pos\030\001 \002(\005\022\020\n\010objectid\030\002 \002(\005\022\021\n\tobj"
    "ectnum\030\003 \002(\005\".\n\037GM_Challenge_SwitchCard_"
    "Request\022\013\n\003pos\030\001 \002(\005\"i\n\036GM_Challenge_Swi"
    "tchCard_Return\022\016\n\006result\030\001 \002(\005\022\013\n\003pos\030\002 "
    "\002(\005\022*\n\004item\030\003 \003(\0132\034.GM_Challenge_SwitchC"
    "ardItem", 2367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "challenge.txt", &protobuf_RegisterTypes);
  GM_Challenge_Open_Return::default_instance_ = new GM_Challenge_Open_Return();
  GM_Challenge_Choose_Request::default_instance_ = new GM_Challenge_Choose_Request();
  GM_Challenge_Choose_Return::default_instance_ = new GM_Challenge_Choose_Return();
  GM_Challenge_Reset_Return::default_instance_ = new GM_Challenge_Reset_Return();
  GM_Challenge_Fortune_Open_Return::default_instance_ = new GM_Challenge_Fortune_Open_Return();
  GM_Challenge_Reset_Fortune_Return::default_instance_ = new GM_Challenge_Reset_Fortune_Return();
  GM_Challenge_Fortune_Info::default_instance_ = new GM_Challenge_Fortune_Info();
  GM_Challenge_Start_Return::default_instance_ = new GM_Challenge_Start_Return();
  GM_Challenge_Ready_Return::default_instance_ = new GM_Challenge_Ready_Return();
  GM_Challenge_Pet_Info::default_instance_ = new GM_Challenge_Pet_Info();
  GM_Challenge_Proof_Notify::default_instance_ = new GM_Challenge_Proof_Notify();
  GM_Challenge_Store_Open_Return::default_instance_ = new GM_Challenge_Store_Open_Return();
  GM_Challenge_Store_Object::default_instance_ = new GM_Challenge_Store_Object();
  GM_Challenge_Store_Reset_Return::default_instance_ = new GM_Challenge_Store_Reset_Return();
  GM_Challenge_Store_Buy_Return::default_instance_ = new GM_Challenge_Store_Buy_Return();
  GM_Challenge_Store_Buy_Result::default_instance_ = new GM_Challenge_Store_Buy_Result();
  GM_Challenge_OnBattle::default_instance_ = new GM_Challenge_OnBattle();
  GM_Challenge_OnBattle_Return::default_instance_ = new GM_Challenge_OnBattle_Return();
  GM_Challenge_RentPet_Return::default_instance_ = new GM_Challenge_RentPet_Return();
  GM_Challenge_RentPet_Rent_Request::default_instance_ = new GM_Challenge_RentPet_Rent_Request();
  GM_Challenge_RentPet_Rent_Return::default_instance_ = new GM_Challenge_RentPet_Rent_Return();
  GM_Challenge_RentPet_Open_Return::default_instance_ = new GM_Challenge_RentPet_Open_Return();
  GM_Challenge_RentPet_Info::default_instance_ = new GM_Challenge_RentPet_Info();
  GM_Challenge_RentPet_Hire_Request::default_instance_ = new GM_Challenge_RentPet_Hire_Request();
  GM_Challenge_RentPet_Hire_Return::default_instance_ = new GM_Challenge_RentPet_Hire_Return();
  GM_Challenge_SwitchCardItem::default_instance_ = new GM_Challenge_SwitchCardItem();
  GM_Challenge_SwitchCard_Request::default_instance_ = new GM_Challenge_SwitchCard_Request();
  GM_Challenge_SwitchCard_Return::default_instance_ = new GM_Challenge_SwitchCard_Return();
  GM_Challenge_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Choose_Request::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Choose_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Reset_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Fortune_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Reset_Fortune_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Fortune_Info::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Start_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Ready_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Pet_Info::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Proof_Notify::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Store_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Store_Object::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Store_Reset_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Store_Buy_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_Store_Buy_Result::default_instance_->InitAsDefaultInstance();
  GM_Challenge_OnBattle::default_instance_->InitAsDefaultInstance();
  GM_Challenge_OnBattle_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Rent_Request::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Rent_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Info::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Hire_Request::default_instance_->InitAsDefaultInstance();
  GM_Challenge_RentPet_Hire_Return::default_instance_->InitAsDefaultInstance();
  GM_Challenge_SwitchCardItem::default_instance_->InitAsDefaultInstance();
  GM_Challenge_SwitchCard_Request::default_instance_->InitAsDefaultInstance();
  GM_Challenge_SwitchCard_Return::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_challenge_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_challenge_2etxt {
  StaticDescriptorInitializer_challenge_2etxt() {
    protobuf_AddDesc_challenge_2etxt();
  }
} static_descriptor_initializer_challenge_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Open_Return::kResultFieldNumber;
const int GM_Challenge_Open_Return::kRoleHPFieldNumber;
const int GM_Challenge_Open_Return::kMatchNameFieldNumber;
const int GM_Challenge_Open_Return::kMatchlevelFieldNumber;
const int GM_Challenge_Open_Return::kMatchfightvalueFieldNumber;
const int GM_Challenge_Open_Return::kMatchtimeFieldNumber;
const int GM_Challenge_Open_Return::kMatchprofessionFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Open_Return::GM_Challenge_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Open_Return::InitAsDefaultInstance() {
}

GM_Challenge_Open_Return::GM_Challenge_Open_Return(const GM_Challenge_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  rolehp_ = 0;
  matchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchlevel_ = 0;
  matchfightvalue_ = 0;
  matchtime_ = 0;
  matchprofession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Open_Return::~GM_Challenge_Open_Return() {
  SharedDtor();
}

void GM_Challenge_Open_Return::SharedDtor() {
  if (matchname_ != &::google::protobuf::internal::kEmptyString) {
    delete matchname_;
  }
  if (this != default_instance_) {
  }
}

void GM_Challenge_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Open_Return_descriptor_;
}

const GM_Challenge_Open_Return& GM_Challenge_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Open_Return* GM_Challenge_Open_Return::default_instance_ = NULL;

GM_Challenge_Open_Return* GM_Challenge_Open_Return::New() const {
  return new GM_Challenge_Open_Return;
}

void GM_Challenge_Open_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    rolehp_ = 0;
    if (has_matchname()) {
      if (matchname_ != &::google::protobuf::internal::kEmptyString) {
        matchname_->clear();
      }
    }
    matchlevel_ = 0;
    matchfightvalue_ = 0;
    matchtime_ = 0;
    matchprofession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleHP;
        break;
      }

      // optional int32 roleHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolehp_)));
          set_has_rolehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matchName;
        break;
      }

      // optional string matchName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matchname().data(), this->matchname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchlevel;
        break;
      }

      // optional int32 matchlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchlevel_)));
          set_has_matchlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_matchfightvalue;
        break;
      }

      // optional int32 matchfightvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchfightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchfightvalue_)));
          set_has_matchfightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_matchtime;
        break;
      }

      // optional int32 matchtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtime_)));
          set_has_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_matchprofession;
        break;
      }

      // optional int32 matchprofession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchprofession_)));
          set_has_matchprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roleHP = 2;
  if (has_rolehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rolehp(), output);
  }

  // optional string matchName = 3;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchname().data(), this->matchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->matchname(), output);
  }

  // optional int32 matchlevel = 4;
  if (has_matchlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matchlevel(), output);
  }

  // optional int32 matchfightvalue = 5;
  if (has_matchfightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->matchfightvalue(), output);
  }

  // optional int32 matchtime = 6;
  if (has_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->matchtime(), output);
  }

  // optional int32 matchprofession = 7;
  if (has_matchprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->matchprofession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roleHP = 2;
  if (has_rolehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rolehp(), target);
  }

  // optional string matchName = 3;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchname().data(), this->matchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matchname(), target);
  }

  // optional int32 matchlevel = 4;
  if (has_matchlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matchlevel(), target);
  }

  // optional int32 matchfightvalue = 5;
  if (has_matchfightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->matchfightvalue(), target);
  }

  // optional int32 matchtime = 6;
  if (has_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->matchtime(), target);
  }

  // optional int32 matchprofession = 7;
  if (has_matchprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->matchprofession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roleHP = 2;
    if (has_rolehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolehp());
    }

    // optional string matchName = 3;
    if (has_matchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchname());
    }

    // optional int32 matchlevel = 4;
    if (has_matchlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchlevel());
    }

    // optional int32 matchfightvalue = 5;
    if (has_matchfightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchfightvalue());
    }

    // optional int32 matchtime = 6;
    if (has_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchtime());
    }

    // optional int32 matchprofession = 7;
    if (has_matchprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchprofession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Open_Return::MergeFrom(const GM_Challenge_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rolehp()) {
      set_rolehp(from.rolehp());
    }
    if (from.has_matchname()) {
      set_matchname(from.matchname());
    }
    if (from.has_matchlevel()) {
      set_matchlevel(from.matchlevel());
    }
    if (from.has_matchfightvalue()) {
      set_matchfightvalue(from.matchfightvalue());
    }
    if (from.has_matchtime()) {
      set_matchtime(from.matchtime());
    }
    if (from.has_matchprofession()) {
      set_matchprofession(from.matchprofession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Open_Return::CopyFrom(const GM_Challenge_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Open_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Open_Return::Swap(GM_Challenge_Open_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rolehp_, other->rolehp_);
    std::swap(matchname_, other->matchname_);
    std::swap(matchlevel_, other->matchlevel_);
    std::swap(matchfightvalue_, other->matchfightvalue_);
    std::swap(matchtime_, other->matchtime_);
    std::swap(matchprofession_, other->matchprofession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Open_Return_descriptor_;
  metadata.reflection = GM_Challenge_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Choose_Request::kDegreeFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Choose_Request::GM_Challenge_Choose_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Choose_Request::InitAsDefaultInstance() {
}

GM_Challenge_Choose_Request::GM_Challenge_Choose_Request(const GM_Challenge_Choose_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Choose_Request::SharedCtor() {
  _cached_size_ = 0;
  degree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Choose_Request::~GM_Challenge_Choose_Request() {
  SharedDtor();
}

void GM_Challenge_Choose_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Choose_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Choose_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Choose_Request_descriptor_;
}

const GM_Challenge_Choose_Request& GM_Challenge_Choose_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Choose_Request* GM_Challenge_Choose_Request::default_instance_ = NULL;

GM_Challenge_Choose_Request* GM_Challenge_Choose_Request::New() const {
  return new GM_Challenge_Choose_Request;
}

void GM_Challenge_Choose_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    degree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Choose_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 degree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Choose_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 degree = 1;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->degree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Choose_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 degree = 1;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->degree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Choose_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 degree = 1;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Choose_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Choose_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Choose_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Choose_Request::MergeFrom(const GM_Challenge_Choose_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_degree()) {
      set_degree(from.degree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Choose_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Choose_Request::CopyFrom(const GM_Challenge_Choose_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Choose_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Choose_Request::Swap(GM_Challenge_Choose_Request* other) {
  if (other != this) {
    std::swap(degree_, other->degree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Choose_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Choose_Request_descriptor_;
  metadata.reflection = GM_Challenge_Choose_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Choose_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Choose_Return::GM_Challenge_Choose_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Choose_Return::InitAsDefaultInstance() {
}

GM_Challenge_Choose_Return::GM_Challenge_Choose_Return(const GM_Challenge_Choose_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Choose_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Choose_Return::~GM_Challenge_Choose_Return() {
  SharedDtor();
}

void GM_Challenge_Choose_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Choose_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Choose_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Choose_Return_descriptor_;
}

const GM_Challenge_Choose_Return& GM_Challenge_Choose_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Choose_Return* GM_Challenge_Choose_Return::default_instance_ = NULL;

GM_Challenge_Choose_Return* GM_Challenge_Choose_Return::New() const {
  return new GM_Challenge_Choose_Return;
}

void GM_Challenge_Choose_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Choose_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Choose_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Choose_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Choose_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Choose_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Choose_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Choose_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Choose_Return::MergeFrom(const GM_Challenge_Choose_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Choose_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Choose_Return::CopyFrom(const GM_Challenge_Choose_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Choose_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Choose_Return::Swap(GM_Challenge_Choose_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Choose_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Choose_Return_descriptor_;
  metadata.reflection = GM_Challenge_Choose_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Reset_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Reset_Return::GM_Challenge_Reset_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Reset_Return::InitAsDefaultInstance() {
}

GM_Challenge_Reset_Return::GM_Challenge_Reset_Return(const GM_Challenge_Reset_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Reset_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Reset_Return::~GM_Challenge_Reset_Return() {
  SharedDtor();
}

void GM_Challenge_Reset_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Reset_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Reset_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Reset_Return_descriptor_;
}

const GM_Challenge_Reset_Return& GM_Challenge_Reset_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Reset_Return* GM_Challenge_Reset_Return::default_instance_ = NULL;

GM_Challenge_Reset_Return* GM_Challenge_Reset_Return::New() const {
  return new GM_Challenge_Reset_Return;
}

void GM_Challenge_Reset_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Reset_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Reset_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Reset_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Reset_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Reset_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Reset_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Reset_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Reset_Return::MergeFrom(const GM_Challenge_Reset_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Reset_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Reset_Return::CopyFrom(const GM_Challenge_Reset_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Reset_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Reset_Return::Swap(GM_Challenge_Reset_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Reset_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Reset_Return_descriptor_;
  metadata.reflection = GM_Challenge_Reset_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Fortune_Open_Return::kRemaintimeFieldNumber;
const int GM_Challenge_Fortune_Open_Return::kFortuneInfoFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Fortune_Open_Return::GM_Challenge_Fortune_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Fortune_Open_Return::InitAsDefaultInstance() {
  fortuneinfo_ = const_cast< ::GM_Challenge_Fortune_Info*>(&::GM_Challenge_Fortune_Info::default_instance());
}

GM_Challenge_Fortune_Open_Return::GM_Challenge_Fortune_Open_Return(const GM_Challenge_Fortune_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Fortune_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0;
  fortuneinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Fortune_Open_Return::~GM_Challenge_Fortune_Open_Return() {
  SharedDtor();
}

void GM_Challenge_Fortune_Open_Return::SharedDtor() {
  if (this != default_instance_) {
    delete fortuneinfo_;
  }
}

void GM_Challenge_Fortune_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Fortune_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Fortune_Open_Return_descriptor_;
}

const GM_Challenge_Fortune_Open_Return& GM_Challenge_Fortune_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Fortune_Open_Return* GM_Challenge_Fortune_Open_Return::default_instance_ = NULL;

GM_Challenge_Fortune_Open_Return* GM_Challenge_Fortune_Open_Return::New() const {
  return new GM_Challenge_Fortune_Open_Return;
}

void GM_Challenge_Fortune_Open_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0;
    if (has_fortuneinfo()) {
      if (fortuneinfo_ != NULL) fortuneinfo_->::GM_Challenge_Fortune_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Fortune_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 remaintime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fortuneInfo;
        break;
      }

      // optional .GM_Challenge_Fortune_Info fortuneInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fortuneInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fortuneinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Fortune_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 remaintime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remaintime(), output);
  }

  // optional .GM_Challenge_Fortune_Info fortuneInfo = 2;
  if (has_fortuneinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fortuneinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Fortune_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 remaintime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remaintime(), target);
  }

  // optional .GM_Challenge_Fortune_Info fortuneInfo = 2;
  if (has_fortuneinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fortuneinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Fortune_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 remaintime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // optional .GM_Challenge_Fortune_Info fortuneInfo = 2;
    if (has_fortuneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fortuneinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Fortune_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Fortune_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Fortune_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Fortune_Open_Return::MergeFrom(const GM_Challenge_Fortune_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_fortuneinfo()) {
      mutable_fortuneinfo()->::GM_Challenge_Fortune_Info::MergeFrom(from.fortuneinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Fortune_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Fortune_Open_Return::CopyFrom(const GM_Challenge_Fortune_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Fortune_Open_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fortuneinfo()) {
    if (!this->fortuneinfo().IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_Fortune_Open_Return::Swap(GM_Challenge_Fortune_Open_Return* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(fortuneinfo_, other->fortuneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Fortune_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Fortune_Open_Return_descriptor_;
  metadata.reflection = GM_Challenge_Fortune_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Reset_Fortune_Return::kResultFieldNumber;
const int GM_Challenge_Reset_Fortune_Return::kRemaintimeFieldNumber;
const int GM_Challenge_Reset_Fortune_Return::kFortuneInfoFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Reset_Fortune_Return::GM_Challenge_Reset_Fortune_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Reset_Fortune_Return::InitAsDefaultInstance() {
  fortuneinfo_ = const_cast< ::GM_Challenge_Fortune_Info*>(&::GM_Challenge_Fortune_Info::default_instance());
}

GM_Challenge_Reset_Fortune_Return::GM_Challenge_Reset_Fortune_Return(const GM_Challenge_Reset_Fortune_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Reset_Fortune_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  remaintime_ = 0;
  fortuneinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Reset_Fortune_Return::~GM_Challenge_Reset_Fortune_Return() {
  SharedDtor();
}

void GM_Challenge_Reset_Fortune_Return::SharedDtor() {
  if (this != default_instance_) {
    delete fortuneinfo_;
  }
}

void GM_Challenge_Reset_Fortune_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Reset_Fortune_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Reset_Fortune_Return_descriptor_;
}

const GM_Challenge_Reset_Fortune_Return& GM_Challenge_Reset_Fortune_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Reset_Fortune_Return* GM_Challenge_Reset_Fortune_Return::default_instance_ = NULL;

GM_Challenge_Reset_Fortune_Return* GM_Challenge_Reset_Fortune_Return::New() const {
  return new GM_Challenge_Reset_Fortune_Return;
}

void GM_Challenge_Reset_Fortune_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    remaintime_ = 0;
    if (has_fortuneinfo()) {
      if (fortuneinfo_ != NULL) fortuneinfo_->::GM_Challenge_Fortune_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Reset_Fortune_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remaintime;
        break;
      }

      // optional int32 remaintime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fortuneInfo;
        break;
      }

      // optional .GM_Challenge_Fortune_Info fortuneInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fortuneInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fortuneinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Reset_Fortune_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 remaintime = 2;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaintime(), output);
  }

  // optional .GM_Challenge_Fortune_Info fortuneInfo = 8;
  if (has_fortuneinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fortuneinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Reset_Fortune_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 remaintime = 2;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaintime(), target);
  }

  // optional .GM_Challenge_Fortune_Info fortuneInfo = 8;
  if (has_fortuneinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fortuneinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Reset_Fortune_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 remaintime = 2;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // optional .GM_Challenge_Fortune_Info fortuneInfo = 8;
    if (has_fortuneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fortuneinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Reset_Fortune_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Reset_Fortune_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Reset_Fortune_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Reset_Fortune_Return::MergeFrom(const GM_Challenge_Reset_Fortune_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_fortuneinfo()) {
      mutable_fortuneinfo()->::GM_Challenge_Fortune_Info::MergeFrom(from.fortuneinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Reset_Fortune_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Reset_Fortune_Return::CopyFrom(const GM_Challenge_Reset_Fortune_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Reset_Fortune_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fortuneinfo()) {
    if (!this->fortuneinfo().IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_Reset_Fortune_Return::Swap(GM_Challenge_Reset_Fortune_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(fortuneinfo_, other->fortuneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Reset_Fortune_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Reset_Fortune_Return_descriptor_;
  metadata.reflection = GM_Challenge_Reset_Fortune_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Fortune_Info::kFbtypeidFieldNumber;
const int GM_Challenge_Fortune_Info::kRoleFortuneFieldNumber;
const int GM_Challenge_Fortune_Info::kPetFortuneFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Fortune_Info::GM_Challenge_Fortune_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Fortune_Info::InitAsDefaultInstance() {
}

GM_Challenge_Fortune_Info::GM_Challenge_Fortune_Info(const GM_Challenge_Fortune_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Fortune_Info::SharedCtor() {
  _cached_size_ = 0;
  fbtypeid_ = 0;
  role_fortune_ = 0;
  pet_fortune_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Fortune_Info::~GM_Challenge_Fortune_Info() {
  SharedDtor();
}

void GM_Challenge_Fortune_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Fortune_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Fortune_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Fortune_Info_descriptor_;
}

const GM_Challenge_Fortune_Info& GM_Challenge_Fortune_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Fortune_Info* GM_Challenge_Fortune_Info::default_instance_ = NULL;

GM_Challenge_Fortune_Info* GM_Challenge_Fortune_Info::New() const {
  return new GM_Challenge_Fortune_Info;
}

void GM_Challenge_Fortune_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fbtypeid_ = 0;
    role_fortune_ = 0;
    pet_fortune_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Fortune_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fbtypeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fbtypeid_)));
          set_has_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_fortune;
        break;
      }

      // required int32 role_fortune = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_fortune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_fortune_)));
          set_has_role_fortune();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_fortune;
        break;
      }

      // required int32 pet_fortune = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_fortune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_fortune_)));
          set_has_pet_fortune();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Fortune_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fbtypeid = 1;
  if (has_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fbtypeid(), output);
  }

  // required int32 role_fortune = 2;
  if (has_role_fortune()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_fortune(), output);
  }

  // required int32 pet_fortune = 3;
  if (has_pet_fortune()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pet_fortune(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Fortune_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fbtypeid = 1;
  if (has_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fbtypeid(), target);
  }

  // required int32 role_fortune = 2;
  if (has_role_fortune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_fortune(), target);
  }

  // required int32 pet_fortune = 3;
  if (has_pet_fortune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pet_fortune(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Fortune_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fbtypeid = 1;
    if (has_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fbtypeid());
    }

    // required int32 role_fortune = 2;
    if (has_role_fortune()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_fortune());
    }

    // required int32 pet_fortune = 3;
    if (has_pet_fortune()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_fortune());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Fortune_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Fortune_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Fortune_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Fortune_Info::MergeFrom(const GM_Challenge_Fortune_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fbtypeid()) {
      set_fbtypeid(from.fbtypeid());
    }
    if (from.has_role_fortune()) {
      set_role_fortune(from.role_fortune());
    }
    if (from.has_pet_fortune()) {
      set_pet_fortune(from.pet_fortune());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Fortune_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Fortune_Info::CopyFrom(const GM_Challenge_Fortune_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Fortune_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Challenge_Fortune_Info::Swap(GM_Challenge_Fortune_Info* other) {
  if (other != this) {
    std::swap(fbtypeid_, other->fbtypeid_);
    std::swap(role_fortune_, other->role_fortune_);
    std::swap(pet_fortune_, other->pet_fortune_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Fortune_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Fortune_Info_descriptor_;
  metadata.reflection = GM_Challenge_Fortune_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Start_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Start_Return::GM_Challenge_Start_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Start_Return::InitAsDefaultInstance() {
}

GM_Challenge_Start_Return::GM_Challenge_Start_Return(const GM_Challenge_Start_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Start_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Start_Return::~GM_Challenge_Start_Return() {
  SharedDtor();
}

void GM_Challenge_Start_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Start_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Start_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Start_Return_descriptor_;
}

const GM_Challenge_Start_Return& GM_Challenge_Start_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Start_Return* GM_Challenge_Start_Return::default_instance_ = NULL;

GM_Challenge_Start_Return* GM_Challenge_Start_Return::New() const {
  return new GM_Challenge_Start_Return;
}

void GM_Challenge_Start_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Start_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Start_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Start_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Start_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Start_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Start_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Start_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Start_Return::MergeFrom(const GM_Challenge_Start_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Start_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Start_Return::CopyFrom(const GM_Challenge_Start_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Start_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Start_Return::Swap(GM_Challenge_Start_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Start_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Start_Return_descriptor_;
  metadata.reflection = GM_Challenge_Start_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Ready_Return::kResultFieldNumber;
const int GM_Challenge_Ready_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Ready_Return::GM_Challenge_Ready_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Ready_Return::InitAsDefaultInstance() {
}

GM_Challenge_Ready_Return::GM_Challenge_Ready_Return(const GM_Challenge_Ready_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Ready_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Ready_Return::~GM_Challenge_Ready_Return() {
  SharedDtor();
}

void GM_Challenge_Ready_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Ready_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Ready_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Ready_Return_descriptor_;
}

const GM_Challenge_Ready_Return& GM_Challenge_Ready_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Ready_Return* GM_Challenge_Ready_Return::default_instance_ = NULL;

GM_Challenge_Ready_Return* GM_Challenge_Ready_Return::New() const {
  return new GM_Challenge_Ready_Return;
}

void GM_Challenge_Ready_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Ready_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_Challenge_Pet_Info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Ready_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_Challenge_Pet_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Ready_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_Challenge_Pet_Info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Ready_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_Challenge_Pet_Info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Ready_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Ready_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Ready_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Ready_Return::MergeFrom(const GM_Challenge_Ready_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Ready_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Ready_Return::CopyFrom(const GM_Challenge_Ready_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Ready_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_Ready_Return::Swap(GM_Challenge_Ready_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Ready_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Ready_Return_descriptor_;
  metadata.reflection = GM_Challenge_Ready_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Pet_Info::kRoleidFieldNumber;
const int GM_Challenge_Pet_Info::kGmidFieldNumber;
const int GM_Challenge_Pet_Info::kHpdecreaseFieldNumber;
const int GM_Challenge_Pet_Info::kOwneridFieldNumber;
const int GM_Challenge_Pet_Info::kOnbattleFieldNumber;
const int GM_Challenge_Pet_Info::kPetidFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Pet_Info::GM_Challenge_Pet_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Pet_Info::InitAsDefaultInstance() {
}

GM_Challenge_Pet_Info::GM_Challenge_Pet_Info(const GM_Challenge_Pet_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Pet_Info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  hpdecrease_ = 0;
  ownerid_ = 0;
  onbattle_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Pet_Info::~GM_Challenge_Pet_Info() {
  SharedDtor();
}

void GM_Challenge_Pet_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Pet_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Pet_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Pet_Info_descriptor_;
}

const GM_Challenge_Pet_Info& GM_Challenge_Pet_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Pet_Info* GM_Challenge_Pet_Info::default_instance_ = NULL;

GM_Challenge_Pet_Info* GM_Challenge_Pet_Info::New() const {
  return new GM_Challenge_Pet_Info;
}

void GM_Challenge_Pet_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    hpdecrease_ = 0;
    ownerid_ = 0;
    onbattle_ = 0;
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Pet_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hpdecrease;
        break;
      }

      // optional int32 hpdecrease = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpdecrease:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpdecrease_)));
          set_has_hpdecrease();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onbattle;
        break;
      }

      // optional int32 onbattle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onbattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onbattle_)));
          set_has_onbattle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_petid;
        break;
      }

      // optional int32 petid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Pet_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 hpdecrease = 3;
  if (has_hpdecrease()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hpdecrease(), output);
  }

  // optional int32 ownerid = 4;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ownerid(), output);
  }

  // optional int32 onbattle = 5;
  if (has_onbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onbattle(), output);
  }

  // optional int32 petid = 6;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Pet_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 hpdecrease = 3;
  if (has_hpdecrease()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hpdecrease(), target);
  }

  // optional int32 ownerid = 4;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ownerid(), target);
  }

  // optional int32 onbattle = 5;
  if (has_onbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onbattle(), target);
  }

  // optional int32 petid = 6;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Pet_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 hpdecrease = 3;
    if (has_hpdecrease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpdecrease());
    }

    // optional int32 ownerid = 4;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // optional int32 onbattle = 5;
    if (has_onbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onbattle());
    }

    // optional int32 petid = 6;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Pet_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Pet_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Pet_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Pet_Info::MergeFrom(const GM_Challenge_Pet_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_hpdecrease()) {
      set_hpdecrease(from.hpdecrease());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_onbattle()) {
      set_onbattle(from.onbattle());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Pet_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Pet_Info::CopyFrom(const GM_Challenge_Pet_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Pet_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Pet_Info::Swap(GM_Challenge_Pet_Info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(gmid_, other->gmid_);
    std::swap(hpdecrease_, other->hpdecrease_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(onbattle_, other->onbattle_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Pet_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Pet_Info_descriptor_;
  metadata.reflection = GM_Challenge_Pet_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Proof_Notify::kProofFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Proof_Notify::GM_Challenge_Proof_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Proof_Notify::InitAsDefaultInstance() {
}

GM_Challenge_Proof_Notify::GM_Challenge_Proof_Notify(const GM_Challenge_Proof_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Proof_Notify::SharedCtor() {
  _cached_size_ = 0;
  proof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Proof_Notify::~GM_Challenge_Proof_Notify() {
  SharedDtor();
}

void GM_Challenge_Proof_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Proof_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Proof_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Proof_Notify_descriptor_;
}

const GM_Challenge_Proof_Notify& GM_Challenge_Proof_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Proof_Notify* GM_Challenge_Proof_Notify::default_instance_ = NULL;

GM_Challenge_Proof_Notify* GM_Challenge_Proof_Notify::New() const {
  return new GM_Challenge_Proof_Notify;
}

void GM_Challenge_Proof_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Proof_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 proof = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Proof_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 proof = 1;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Proof_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 proof = 1;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Proof_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 proof = 1;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Proof_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Proof_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Proof_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Proof_Notify::MergeFrom(const GM_Challenge_Proof_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proof()) {
      set_proof(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Proof_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Proof_Notify::CopyFrom(const GM_Challenge_Proof_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Proof_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Proof_Notify::Swap(GM_Challenge_Proof_Notify* other) {
  if (other != this) {
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Proof_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Proof_Notify_descriptor_;
  metadata.reflection = GM_Challenge_Proof_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Store_Open_Return::kProofFieldNumber;
const int GM_Challenge_Store_Open_Return::kDataFieldNumber;
const int GM_Challenge_Store_Open_Return::kResetcostFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Store_Open_Return::GM_Challenge_Store_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Store_Open_Return::InitAsDefaultInstance() {
}

GM_Challenge_Store_Open_Return::GM_Challenge_Store_Open_Return(const GM_Challenge_Store_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Store_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  proof_ = 0;
  resetcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Store_Open_Return::~GM_Challenge_Store_Open_Return() {
  SharedDtor();
}

void GM_Challenge_Store_Open_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Store_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Store_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Store_Open_Return_descriptor_;
}

const GM_Challenge_Store_Open_Return& GM_Challenge_Store_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Store_Open_Return* GM_Challenge_Store_Open_Return::default_instance_ = NULL;

GM_Challenge_Store_Open_Return* GM_Challenge_Store_Open_Return::New() const {
  return new GM_Challenge_Store_Open_Return;
}

void GM_Challenge_Store_Open_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proof_ = 0;
    resetcost_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Store_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 proof = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GM_Challenge_Store_Object data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_resetcost;
        break;
      }

      // optional int32 resetcost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetcost_)));
          set_has_resetcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Store_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 proof = 1;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->proof(), output);
  }

  // repeated .GM_Challenge_Store_Object data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional int32 resetcost = 3;
  if (has_resetcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resetcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Store_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 proof = 1;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->proof(), target);
  }

  // repeated .GM_Challenge_Store_Object data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // optional int32 resetcost = 3;
  if (has_resetcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resetcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Store_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 proof = 1;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

    // optional int32 resetcost = 3;
    if (has_resetcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetcost());
    }

  }
  // repeated .GM_Challenge_Store_Object data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Store_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Store_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Store_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Store_Open_Return::MergeFrom(const GM_Challenge_Store_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proof()) {
      set_proof(from.proof());
    }
    if (from.has_resetcost()) {
      set_resetcost(from.resetcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Store_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Store_Open_Return::CopyFrom(const GM_Challenge_Store_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Store_Open_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_Store_Open_Return::Swap(GM_Challenge_Store_Open_Return* other) {
  if (other != this) {
    std::swap(proof_, other->proof_);
    data_.Swap(&other->data_);
    std::swap(resetcost_, other->resetcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Store_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Store_Open_Return_descriptor_;
  metadata.reflection = GM_Challenge_Store_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Store_Object::kObjectidFieldNumber;
const int GM_Challenge_Store_Object::kRemaindercountFieldNumber;
const int GM_Challenge_Store_Object::kCostnumFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Store_Object::GM_Challenge_Store_Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Store_Object::InitAsDefaultInstance() {
}

GM_Challenge_Store_Object::GM_Challenge_Store_Object(const GM_Challenge_Store_Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Store_Object::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  remaindercount_ = 0;
  costnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Store_Object::~GM_Challenge_Store_Object() {
  SharedDtor();
}

void GM_Challenge_Store_Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Store_Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Store_Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Store_Object_descriptor_;
}

const GM_Challenge_Store_Object& GM_Challenge_Store_Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Store_Object* GM_Challenge_Store_Object::default_instance_ = NULL;

GM_Challenge_Store_Object* GM_Challenge_Store_Object::New() const {
  return new GM_Challenge_Store_Object;
}

void GM_Challenge_Store_Object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    remaindercount_ = 0;
    costnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Store_Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remaindercount;
        break;
      }

      // required int32 remaindercount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaindercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindercount_)));
          set_has_remaindercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costnum;
        break;
      }

      // required int32 costnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costnum_)));
          set_has_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Store_Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // required int32 remaindercount = 2;
  if (has_remaindercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaindercount(), output);
  }

  // required int32 costnum = 3;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->costnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Store_Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // required int32 remaindercount = 2;
  if (has_remaindercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaindercount(), target);
  }

  // required int32 costnum = 3;
  if (has_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->costnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Store_Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 remaindercount = 2;
    if (has_remaindercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindercount());
    }

    // required int32 costnum = 3;
    if (has_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Store_Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Store_Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Store_Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Store_Object::MergeFrom(const GM_Challenge_Store_Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_remaindercount()) {
      set_remaindercount(from.remaindercount());
    }
    if (from.has_costnum()) {
      set_costnum(from.costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Store_Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Store_Object::CopyFrom(const GM_Challenge_Store_Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Store_Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Challenge_Store_Object::Swap(GM_Challenge_Store_Object* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(remaindercount_, other->remaindercount_);
    std::swap(costnum_, other->costnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Store_Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Store_Object_descriptor_;
  metadata.reflection = GM_Challenge_Store_Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Store_Reset_Return::kResultFieldNumber;
const int GM_Challenge_Store_Reset_Return::kProofFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Store_Reset_Return::GM_Challenge_Store_Reset_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Store_Reset_Return::InitAsDefaultInstance() {
}

GM_Challenge_Store_Reset_Return::GM_Challenge_Store_Reset_Return(const GM_Challenge_Store_Reset_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Store_Reset_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  proof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Store_Reset_Return::~GM_Challenge_Store_Reset_Return() {
  SharedDtor();
}

void GM_Challenge_Store_Reset_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Store_Reset_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Store_Reset_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Store_Reset_Return_descriptor_;
}

const GM_Challenge_Store_Reset_Return& GM_Challenge_Store_Reset_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Store_Reset_Return* GM_Challenge_Store_Reset_Return::default_instance_ = NULL;

GM_Challenge_Store_Reset_Return* GM_Challenge_Store_Reset_Return::New() const {
  return new GM_Challenge_Store_Reset_Return;
}

void GM_Challenge_Store_Reset_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    proof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Store_Reset_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proof;
        break;
      }

      // required int32 proof = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Store_Reset_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 proof = 2;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Store_Reset_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 proof = 2;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Store_Reset_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 proof = 2;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Store_Reset_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Store_Reset_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Store_Reset_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Store_Reset_Return::MergeFrom(const GM_Challenge_Store_Reset_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_proof()) {
      set_proof(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Store_Reset_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Store_Reset_Return::CopyFrom(const GM_Challenge_Store_Reset_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Store_Reset_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Challenge_Store_Reset_Return::Swap(GM_Challenge_Store_Reset_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Store_Reset_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Store_Reset_Return_descriptor_;
  metadata.reflection = GM_Challenge_Store_Reset_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Store_Buy_Return::kObjectidFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Store_Buy_Return::GM_Challenge_Store_Buy_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Store_Buy_Return::InitAsDefaultInstance() {
}

GM_Challenge_Store_Buy_Return::GM_Challenge_Store_Buy_Return(const GM_Challenge_Store_Buy_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Store_Buy_Return::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Store_Buy_Return::~GM_Challenge_Store_Buy_Return() {
  SharedDtor();
}

void GM_Challenge_Store_Buy_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Store_Buy_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Store_Buy_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Store_Buy_Return_descriptor_;
}

const GM_Challenge_Store_Buy_Return& GM_Challenge_Store_Buy_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Store_Buy_Return* GM_Challenge_Store_Buy_Return::default_instance_ = NULL;

GM_Challenge_Store_Buy_Return* GM_Challenge_Store_Buy_Return::New() const {
  return new GM_Challenge_Store_Buy_Return;
}

void GM_Challenge_Store_Buy_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Store_Buy_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Store_Buy_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Store_Buy_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Store_Buy_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Store_Buy_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Store_Buy_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Store_Buy_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Store_Buy_Return::MergeFrom(const GM_Challenge_Store_Buy_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Store_Buy_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Store_Buy_Return::CopyFrom(const GM_Challenge_Store_Buy_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Store_Buy_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_Store_Buy_Return::Swap(GM_Challenge_Store_Buy_Return* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Store_Buy_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Store_Buy_Return_descriptor_;
  metadata.reflection = GM_Challenge_Store_Buy_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_Store_Buy_Result::kResultFieldNumber;
const int GM_Challenge_Store_Buy_Result::kObjectidFieldNumber;
const int GM_Challenge_Store_Buy_Result::kProofFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_Store_Buy_Result::GM_Challenge_Store_Buy_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_Store_Buy_Result::InitAsDefaultInstance() {
}

GM_Challenge_Store_Buy_Result::GM_Challenge_Store_Buy_Result(const GM_Challenge_Store_Buy_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_Store_Buy_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  objectid_ = 0;
  proof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_Store_Buy_Result::~GM_Challenge_Store_Buy_Result() {
  SharedDtor();
}

void GM_Challenge_Store_Buy_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_Store_Buy_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_Store_Buy_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_Store_Buy_Result_descriptor_;
}

const GM_Challenge_Store_Buy_Result& GM_Challenge_Store_Buy_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_Store_Buy_Result* GM_Challenge_Store_Buy_Result::default_instance_ = NULL;

GM_Challenge_Store_Buy_Result* GM_Challenge_Store_Buy_Result::New() const {
  return new GM_Challenge_Store_Buy_Result;
}

void GM_Challenge_Store_Buy_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    objectid_ = 0;
    proof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_Store_Buy_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proof;
        break;
      }

      // required int32 proof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proof_)));
          set_has_proof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_Store_Buy_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // required int32 proof = 3;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_Store_Buy_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // required int32 proof = 3;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_Store_Buy_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 proof = 3;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_Store_Buy_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_Store_Buy_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_Store_Buy_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_Store_Buy_Result::MergeFrom(const GM_Challenge_Store_Buy_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_proof()) {
      set_proof(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_Store_Buy_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_Store_Buy_Result::CopyFrom(const GM_Challenge_Store_Buy_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_Store_Buy_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Challenge_Store_Buy_Result::Swap(GM_Challenge_Store_Buy_Result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(objectid_, other->objectid_);
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_Store_Buy_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_Store_Buy_Result_descriptor_;
  metadata.reflection = GM_Challenge_Store_Buy_Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_OnBattle::kGmidFieldNumber;
const int GM_Challenge_OnBattle::kBattleHoleFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_OnBattle::GM_Challenge_OnBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_OnBattle::InitAsDefaultInstance() {
}

GM_Challenge_OnBattle::GM_Challenge_OnBattle(const GM_Challenge_OnBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_OnBattle::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  battlehole_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_OnBattle::~GM_Challenge_OnBattle() {
  SharedDtor();
}

void GM_Challenge_OnBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_OnBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_OnBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_OnBattle_descriptor_;
}

const GM_Challenge_OnBattle& GM_Challenge_OnBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_OnBattle* GM_Challenge_OnBattle::default_instance_ = NULL;

GM_Challenge_OnBattle* GM_Challenge_OnBattle::New() const {
  return new GM_Challenge_OnBattle;
}

void GM_Challenge_OnBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    battlehole_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_OnBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleHole;
        break;
      }

      // optional int32 battleHole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleHole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlehole_)));
          set_has_battlehole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_OnBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 battleHole = 2;
  if (has_battlehole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battlehole(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_OnBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 battleHole = 2;
  if (has_battlehole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battlehole(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_OnBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 battleHole = 2;
    if (has_battlehole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlehole());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_OnBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_OnBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_OnBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_OnBattle::MergeFrom(const GM_Challenge_OnBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_battlehole()) {
      set_battlehole(from.battlehole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_OnBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_OnBattle::CopyFrom(const GM_Challenge_OnBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_OnBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_OnBattle::Swap(GM_Challenge_OnBattle* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(battlehole_, other->battlehole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_OnBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_OnBattle_descriptor_;
  metadata.reflection = GM_Challenge_OnBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_OnBattle_Return::kResultFieldNumber;
const int GM_Challenge_OnBattle_Return::kBattleHoleFieldNumber;
const int GM_Challenge_OnBattle_Return::kDataInfoFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_OnBattle_Return::GM_Challenge_OnBattle_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_OnBattle_Return::InitAsDefaultInstance() {
}

GM_Challenge_OnBattle_Return::GM_Challenge_OnBattle_Return(const GM_Challenge_OnBattle_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_OnBattle_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  battlehole_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_OnBattle_Return::~GM_Challenge_OnBattle_Return() {
  SharedDtor();
}

void GM_Challenge_OnBattle_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_OnBattle_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_OnBattle_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_OnBattle_Return_descriptor_;
}

const GM_Challenge_OnBattle_Return& GM_Challenge_OnBattle_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_OnBattle_Return* GM_Challenge_OnBattle_Return::default_instance_ = NULL;

GM_Challenge_OnBattle_Return* GM_Challenge_OnBattle_Return::New() const {
  return new GM_Challenge_OnBattle_Return;
}

void GM_Challenge_OnBattle_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    battlehole_ = 0;
  }
  datainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_OnBattle_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleHole;
        break;
      }

      // optional int32 battleHole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleHole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlehole_)));
          set_has_battlehole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dataInfo;
        break;
      }

      // repeated .GM_Challenge_OnBattle dataInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dataInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_OnBattle_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 battleHole = 2;
  if (has_battlehole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battlehole(), output);
  }

  // repeated .GM_Challenge_OnBattle dataInfo = 3;
  for (int i = 0; i < this->datainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datainfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_OnBattle_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 battleHole = 2;
  if (has_battlehole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battlehole(), target);
  }

  // repeated .GM_Challenge_OnBattle dataInfo = 3;
  for (int i = 0; i < this->datainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datainfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_OnBattle_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 battleHole = 2;
    if (has_battlehole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlehole());
    }

  }
  // repeated .GM_Challenge_OnBattle dataInfo = 3;
  total_size += 1 * this->datainfo_size();
  for (int i = 0; i < this->datainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_OnBattle_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_OnBattle_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_OnBattle_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_OnBattle_Return::MergeFrom(const GM_Challenge_OnBattle_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  datainfo_.MergeFrom(from.datainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_battlehole()) {
      set_battlehole(from.battlehole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_OnBattle_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_OnBattle_Return::CopyFrom(const GM_Challenge_OnBattle_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_OnBattle_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < datainfo_size(); i++) {
    if (!this->datainfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_OnBattle_Return::Swap(GM_Challenge_OnBattle_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(battlehole_, other->battlehole_);
    datainfo_.Swap(&other->datainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_OnBattle_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_OnBattle_Return_descriptor_;
  metadata.reflection = GM_Challenge_OnBattle_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Return::kResultFieldNumber;
const int GM_Challenge_RentPet_Return::kGmidFieldNumber;
const int GM_Challenge_RentPet_Return::kMoneyFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Return::GM_Challenge_RentPet_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Return::InitAsDefaultInstance() {
}

GM_Challenge_RentPet_Return::GM_Challenge_RentPet_Return(const GM_Challenge_RentPet_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Return::~GM_Challenge_RentPet_Return() {
  SharedDtor();
}

void GM_Challenge_RentPet_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_RentPet_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Return_descriptor_;
}

const GM_Challenge_RentPet_Return& GM_Challenge_RentPet_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Return* GM_Challenge_RentPet_Return::default_instance_ = NULL;

GM_Challenge_RentPet_Return* GM_Challenge_RentPet_Return::New() const {
  return new GM_Challenge_RentPet_Return;
}

void GM_Challenge_RentPet_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Return::MergeFrom(const GM_Challenge_RentPet_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Return::CopyFrom(const GM_Challenge_RentPet_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_RentPet_Return::Swap(GM_Challenge_RentPet_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Return_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Rent_Request::kGmidFieldNumber;
const int GM_Challenge_RentPet_Rent_Request::kOperateFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Rent_Request::GM_Challenge_RentPet_Rent_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Rent_Request::InitAsDefaultInstance() {
}

GM_Challenge_RentPet_Rent_Request::GM_Challenge_RentPet_Rent_Request(const GM_Challenge_RentPet_Rent_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Rent_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Rent_Request::~GM_Challenge_RentPet_Rent_Request() {
  SharedDtor();
}

void GM_Challenge_RentPet_Rent_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_RentPet_Rent_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Rent_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Rent_Request_descriptor_;
}

const GM_Challenge_RentPet_Rent_Request& GM_Challenge_RentPet_Rent_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Rent_Request* GM_Challenge_RentPet_Rent_Request::default_instance_ = NULL;

GM_Challenge_RentPet_Rent_Request* GM_Challenge_RentPet_Rent_Request::New() const {
  return new GM_Challenge_RentPet_Rent_Request;
}

void GM_Challenge_RentPet_Rent_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    operate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Rent_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required int32 operate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Rent_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // required int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Rent_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // required int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Rent_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // required int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Rent_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Rent_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Rent_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Rent_Request::MergeFrom(const GM_Challenge_RentPet_Rent_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Rent_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Rent_Request::CopyFrom(const GM_Challenge_RentPet_Rent_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Rent_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_Challenge_RentPet_Rent_Request::Swap(GM_Challenge_RentPet_Rent_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Rent_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Rent_Request_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Rent_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Rent_Return::kResultFieldNumber;
const int GM_Challenge_RentPet_Rent_Return::kGmidFieldNumber;
const int GM_Challenge_RentPet_Rent_Return::kOperateFieldNumber;
const int GM_Challenge_RentPet_Rent_Return::kMoneyFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Rent_Return::GM_Challenge_RentPet_Rent_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Rent_Return::InitAsDefaultInstance() {
}

GM_Challenge_RentPet_Rent_Return::GM_Challenge_RentPet_Rent_Return(const GM_Challenge_RentPet_Rent_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Rent_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  operate_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Rent_Return::~GM_Challenge_RentPet_Rent_Return() {
  SharedDtor();
}

void GM_Challenge_RentPet_Rent_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_RentPet_Rent_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Rent_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Rent_Return_descriptor_;
}

const GM_Challenge_RentPet_Rent_Return& GM_Challenge_RentPet_Rent_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Rent_Return* GM_Challenge_RentPet_Rent_Return::default_instance_ = NULL;

GM_Challenge_RentPet_Rent_Return* GM_Challenge_RentPet_Rent_Return::New() const {
  return new GM_Challenge_RentPet_Rent_Return;
}

void GM_Challenge_RentPet_Rent_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    operate_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Rent_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // required int32 operate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Rent_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // required int32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operate(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Rent_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // required int32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operate(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Rent_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // required int32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Rent_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Rent_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Rent_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Rent_Return::MergeFrom(const GM_Challenge_RentPet_Rent_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Rent_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Rent_Return::CopyFrom(const GM_Challenge_RentPet_Rent_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Rent_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void GM_Challenge_RentPet_Rent_Return::Swap(GM_Challenge_RentPet_Rent_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(operate_, other->operate_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Rent_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Rent_Return_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Rent_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Open_Return::kResultFieldNumber;
const int GM_Challenge_RentPet_Open_Return::kCountFieldNumber;
const int GM_Challenge_RentPet_Open_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Open_Return::GM_Challenge_RentPet_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Open_Return::InitAsDefaultInstance() {
}

GM_Challenge_RentPet_Open_Return::GM_Challenge_RentPet_Open_Return(const GM_Challenge_RentPet_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Open_Return::~GM_Challenge_RentPet_Open_Return() {
  SharedDtor();
}

void GM_Challenge_RentPet_Open_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_RentPet_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Open_Return_descriptor_;
}

const GM_Challenge_RentPet_Open_Return& GM_Challenge_RentPet_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Open_Return* GM_Challenge_RentPet_Open_Return::default_instance_ = NULL;

GM_Challenge_RentPet_Open_Return* GM_Challenge_RentPet_Open_Return::New() const {
  return new GM_Challenge_RentPet_Open_Return;
}

void GM_Challenge_RentPet_Open_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .GM_Challenge_RentPet_Info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated .GM_Challenge_RentPet_Info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated .GM_Challenge_RentPet_Info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .GM_Challenge_RentPet_Info data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Open_Return::MergeFrom(const GM_Challenge_RentPet_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Open_Return::CopyFrom(const GM_Challenge_RentPet_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Open_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_RentPet_Open_Return::Swap(GM_Challenge_RentPet_Open_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Open_Return_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Info::kGmidFieldNumber;
const int GM_Challenge_RentPet_Info::kPetidFieldNumber;
const int GM_Challenge_RentPet_Info::kLevelFieldNumber;
const int GM_Challenge_RentPet_Info::kEvolveFieldNumber;
const int GM_Challenge_RentPet_Info::kMoneyFieldNumber;
const int GM_Challenge_RentPet_Info::kOwnerNameFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Info::GM_Challenge_RentPet_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Info::InitAsDefaultInstance() {
}

GM_Challenge_RentPet_Info::GM_Challenge_RentPet_Info(const GM_Challenge_RentPet_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Info::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  petid_ = 0;
  level_ = 0;
  evolve_ = 0;
  money_ = 0;
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Info::~GM_Challenge_RentPet_Info() {
  SharedDtor();
}

void GM_Challenge_RentPet_Info::SharedDtor() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (this != default_instance_) {
  }
}

void GM_Challenge_RentPet_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Info_descriptor_;
}

const GM_Challenge_RentPet_Info& GM_Challenge_RentPet_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Info* GM_Challenge_RentPet_Info::default_instance_ = NULL;

GM_Challenge_RentPet_Info* GM_Challenge_RentPet_Info::New() const {
  return new GM_Challenge_RentPet_Info;
}

void GM_Challenge_RentPet_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
    petid_ = 0;
    level_ = 0;
    evolve_ = 0;
    money_ = 0;
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_evolve;
        break;
      }

      // optional int32 evolve = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolve_)));
          set_has_evolve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // optional int32 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ownerName;
        break;
      }

      // optional string ownerName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 evolve = 4;
  if (has_evolve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->evolve(), output);
  }

  // optional int32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money(), output);
  }

  // optional string ownerName = 6;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ownername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 evolve = 4;
  if (has_evolve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->evolve(), target);
  }

  // optional int32 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money(), target);
  }

  // optional string ownerName = 6;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ownername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 evolve = 4;
    if (has_evolve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolve());
    }

    // optional int32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string ownerName = 6;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Info::MergeFrom(const GM_Challenge_RentPet_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_evolve()) {
      set_evolve(from.evolve());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Info::CopyFrom(const GM_Challenge_RentPet_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_RentPet_Info::Swap(GM_Challenge_RentPet_Info* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(petid_, other->petid_);
    std::swap(level_, other->level_);
    std::swap(evolve_, other->evolve_);
    std::swap(money_, other->money_);
    std::swap(ownername_, other->ownername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Info_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Hire_Request::kGmidFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Hire_Request::GM_Challenge_RentPet_Hire_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Hire_Request::InitAsDefaultInstance() {
}

GM_Challenge_RentPet_Hire_Request::GM_Challenge_RentPet_Hire_Request(const GM_Challenge_RentPet_Hire_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Hire_Request::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Hire_Request::~GM_Challenge_RentPet_Hire_Request() {
  SharedDtor();
}

void GM_Challenge_RentPet_Hire_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_RentPet_Hire_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Hire_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Hire_Request_descriptor_;
}

const GM_Challenge_RentPet_Hire_Request& GM_Challenge_RentPet_Hire_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Hire_Request* GM_Challenge_RentPet_Hire_Request::default_instance_ = NULL;

GM_Challenge_RentPet_Hire_Request* GM_Challenge_RentPet_Hire_Request::New() const {
  return new GM_Challenge_RentPet_Hire_Request;
}

void GM_Challenge_RentPet_Hire_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gmid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Hire_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Hire_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Hire_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Hire_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Hire_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Hire_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Hire_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Hire_Request::MergeFrom(const GM_Challenge_RentPet_Hire_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Hire_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Hire_Request::CopyFrom(const GM_Challenge_RentPet_Hire_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Hire_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_RentPet_Hire_Request::Swap(GM_Challenge_RentPet_Hire_Request* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Hire_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Hire_Request_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Hire_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_RentPet_Hire_Return::kResultFieldNumber;
const int GM_Challenge_RentPet_Hire_Return::kGmidFieldNumber;
const int GM_Challenge_RentPet_Hire_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_RentPet_Hire_Return::GM_Challenge_RentPet_Hire_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_RentPet_Hire_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_Challenge_Pet_Info*>(&::GM_Challenge_Pet_Info::default_instance());
}

GM_Challenge_RentPet_Hire_Return::GM_Challenge_RentPet_Hire_Return(const GM_Challenge_RentPet_Hire_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Hire_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_RentPet_Hire_Return::~GM_Challenge_RentPet_Hire_Return() {
  SharedDtor();
}

void GM_Challenge_RentPet_Hire_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_Challenge_RentPet_Hire_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_RentPet_Hire_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_RentPet_Hire_Return_descriptor_;
}

const GM_Challenge_RentPet_Hire_Return& GM_Challenge_RentPet_Hire_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_RentPet_Hire_Return* GM_Challenge_RentPet_Hire_Return::default_instance_ = NULL;

GM_Challenge_RentPet_Hire_Return* GM_Challenge_RentPet_Hire_Return::New() const {
  return new GM_Challenge_RentPet_Hire_Return;
}

void GM_Challenge_RentPet_Hire_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::GM_Challenge_Pet_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_RentPet_Hire_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .GM_Challenge_Pet_Info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_RentPet_Hire_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gmid(), output);
  }

  // optional .GM_Challenge_Pet_Info data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_RentPet_Hire_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gmid(), target);
  }

  // optional .GM_Challenge_Pet_Info data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_RentPet_Hire_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional .GM_Challenge_Pet_Info data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_RentPet_Hire_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_RentPet_Hire_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_RentPet_Hire_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_RentPet_Hire_Return::MergeFrom(const GM_Challenge_RentPet_Hire_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_data()) {
      mutable_data()->::GM_Challenge_Pet_Info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_RentPet_Hire_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_RentPet_Hire_Return::CopyFrom(const GM_Challenge_RentPet_Hire_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_RentPet_Hire_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_RentPet_Hire_Return::Swap(GM_Challenge_RentPet_Hire_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gmid_, other->gmid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_RentPet_Hire_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_RentPet_Hire_Return_descriptor_;
  metadata.reflection = GM_Challenge_RentPet_Hire_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_SwitchCardItem::kPosFieldNumber;
const int GM_Challenge_SwitchCardItem::kObjectidFieldNumber;
const int GM_Challenge_SwitchCardItem::kObjectnumFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_SwitchCardItem::GM_Challenge_SwitchCardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_SwitchCardItem::InitAsDefaultInstance() {
}

GM_Challenge_SwitchCardItem::GM_Challenge_SwitchCardItem(const GM_Challenge_SwitchCardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_SwitchCardItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  objectid_ = 0;
  objectnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_SwitchCardItem::~GM_Challenge_SwitchCardItem() {
  SharedDtor();
}

void GM_Challenge_SwitchCardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_SwitchCardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_SwitchCardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_SwitchCardItem_descriptor_;
}

const GM_Challenge_SwitchCardItem& GM_Challenge_SwitchCardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_SwitchCardItem* GM_Challenge_SwitchCardItem::default_instance_ = NULL;

GM_Challenge_SwitchCardItem* GM_Challenge_SwitchCardItem::New() const {
  return new GM_Challenge_SwitchCardItem;
}

void GM_Challenge_SwitchCardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    objectid_ = 0;
    objectnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_SwitchCardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        break;
      }

      // required int32 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objectnum;
        break;
      }

      // required int32 objectnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectnum_)));
          set_has_objectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_SwitchCardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // required int32 objectnum = 3;
  if (has_objectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_SwitchCardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required int32 objectid = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // required int32 objectnum = 3;
  if (has_objectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_SwitchCardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 objectid = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // required int32 objectnum = 3;
    if (has_objectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_SwitchCardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_SwitchCardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_SwitchCardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_SwitchCardItem::MergeFrom(const GM_Challenge_SwitchCardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_objectnum()) {
      set_objectnum(from.objectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_SwitchCardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_SwitchCardItem::CopyFrom(const GM_Challenge_SwitchCardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_SwitchCardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_Challenge_SwitchCardItem::Swap(GM_Challenge_SwitchCardItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(objectid_, other->objectid_);
    std::swap(objectnum_, other->objectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_SwitchCardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_SwitchCardItem_descriptor_;
  metadata.reflection = GM_Challenge_SwitchCardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_SwitchCard_Request::kPosFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_SwitchCard_Request::GM_Challenge_SwitchCard_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_SwitchCard_Request::InitAsDefaultInstance() {
}

GM_Challenge_SwitchCard_Request::GM_Challenge_SwitchCard_Request(const GM_Challenge_SwitchCard_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_SwitchCard_Request::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_SwitchCard_Request::~GM_Challenge_SwitchCard_Request() {
  SharedDtor();
}

void GM_Challenge_SwitchCard_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_SwitchCard_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_SwitchCard_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_SwitchCard_Request_descriptor_;
}

const GM_Challenge_SwitchCard_Request& GM_Challenge_SwitchCard_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_SwitchCard_Request* GM_Challenge_SwitchCard_Request::default_instance_ = NULL;

GM_Challenge_SwitchCard_Request* GM_Challenge_SwitchCard_Request::New() const {
  return new GM_Challenge_SwitchCard_Request;
}

void GM_Challenge_SwitchCard_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_SwitchCard_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_SwitchCard_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_SwitchCard_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_SwitchCard_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_SwitchCard_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_SwitchCard_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_SwitchCard_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_SwitchCard_Request::MergeFrom(const GM_Challenge_SwitchCard_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_SwitchCard_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_SwitchCard_Request::CopyFrom(const GM_Challenge_SwitchCard_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_SwitchCard_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Challenge_SwitchCard_Request::Swap(GM_Challenge_SwitchCard_Request* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_SwitchCard_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_SwitchCard_Request_descriptor_;
  metadata.reflection = GM_Challenge_SwitchCard_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Challenge_SwitchCard_Return::kResultFieldNumber;
const int GM_Challenge_SwitchCard_Return::kPosFieldNumber;
const int GM_Challenge_SwitchCard_Return::kItemFieldNumber;
#endif  // !_MSC_VER

GM_Challenge_SwitchCard_Return::GM_Challenge_SwitchCard_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Challenge_SwitchCard_Return::InitAsDefaultInstance() {
}

GM_Challenge_SwitchCard_Return::GM_Challenge_SwitchCard_Return(const GM_Challenge_SwitchCard_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Challenge_SwitchCard_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Challenge_SwitchCard_Return::~GM_Challenge_SwitchCard_Return() {
  SharedDtor();
}

void GM_Challenge_SwitchCard_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Challenge_SwitchCard_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Challenge_SwitchCard_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Challenge_SwitchCard_Return_descriptor_;
}

const GM_Challenge_SwitchCard_Return& GM_Challenge_SwitchCard_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_2etxt();
  return *default_instance_;
}

GM_Challenge_SwitchCard_Return* GM_Challenge_SwitchCard_Return::default_instance_ = NULL;

GM_Challenge_SwitchCard_Return* GM_Challenge_SwitchCard_Return::New() const {
  return new GM_Challenge_SwitchCard_Return;
}

void GM_Challenge_SwitchCard_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    pos_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Challenge_SwitchCard_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .GM_Challenge_SwitchCardItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Challenge_SwitchCard_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // repeated .GM_Challenge_SwitchCardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Challenge_SwitchCard_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // repeated .GM_Challenge_SwitchCardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Challenge_SwitchCard_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated .GM_Challenge_SwitchCardItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Challenge_SwitchCard_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Challenge_SwitchCard_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Challenge_SwitchCard_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Challenge_SwitchCard_Return::MergeFrom(const GM_Challenge_SwitchCard_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Challenge_SwitchCard_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Challenge_SwitchCard_Return::CopyFrom(const GM_Challenge_SwitchCard_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Challenge_SwitchCard_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Challenge_SwitchCard_Return::Swap(GM_Challenge_SwitchCard_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pos_, other->pos_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Challenge_SwitchCard_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Challenge_SwitchCard_Return_descriptor_;
  metadata.reflection = GM_Challenge_SwitchCard_Return_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
