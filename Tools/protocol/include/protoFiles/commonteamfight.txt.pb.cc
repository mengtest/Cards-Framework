// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonteamfight.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commonteamfight.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMFirstBloodPerson_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFirstBloodPerson_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFirstBloodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFirstBloodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFirstBloodResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFirstBloodResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFightMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFightMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMMatchOperResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMatchOperResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMMatchingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMMatchingNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_commonteamfight_2etxt() {
  protobuf_AddDesc_commonteamfight_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commonteamfight.txt");
  GOOGLE_CHECK(file != NULL);
  GMFirstBloodPerson_descriptor_ = file->message_type(0);
  static const int GMFirstBloodPerson_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, killtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, profession_),
  };
  GMFirstBloodPerson_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFirstBloodPerson_descriptor_,
      GMFirstBloodPerson::default_instance_,
      GMFirstBloodPerson_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodPerson, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFirstBloodPerson));
  GMFirstBloodRequest_descriptor_ = file->message_type(1);
  static const int GMFirstBloodRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodRequest, m_fbtypeid_),
  };
  GMFirstBloodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFirstBloodRequest_descriptor_,
      GMFirstBloodRequest::default_instance_,
      GMFirstBloodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFirstBloodRequest));
  GMFirstBloodResult_descriptor_ = file->message_type(2);
  static const int GMFirstBloodResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodResult, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodResult, m_fbtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodResult, m_person_),
  };
  GMFirstBloodResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFirstBloodResult_descriptor_,
      GMFirstBloodResult::default_instance_,
      GMFirstBloodResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFirstBloodResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFirstBloodResult));
  GMFightMatch_descriptor_ = file->message_type(3);
  static const int GMFightMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightMatch, m_teamid_),
  };
  GMFightMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFightMatch_descriptor_,
      GMFightMatch::default_instance_,
      GMFightMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFightMatch));
  GMMatchOperResult_descriptor_ = file->message_type(4);
  static const int GMMatchOperResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchOperResult, m_result_),
  };
  GMMatchOperResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMatchOperResult_descriptor_,
      GMMatchOperResult::default_instance_,
      GMMatchOperResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchOperResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchOperResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMatchOperResult));
  GMMatchingNotify_descriptor_ = file->message_type(5);
  static const int GMMatchingNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchingNotify, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchingNotify, m_teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchingNotify, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchingNotify, m_time_),
  };
  GMMatchingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMMatchingNotify_descriptor_,
      GMMatchingNotify::default_instance_,
      GMMatchingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMMatchingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMMatchingNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commonteamfight_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFirstBloodPerson_descriptor_, &GMFirstBloodPerson::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFirstBloodRequest_descriptor_, &GMFirstBloodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFirstBloodResult_descriptor_, &GMFirstBloodResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFightMatch_descriptor_, &GMFightMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMatchOperResult_descriptor_, &GMMatchOperResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMMatchingNotify_descriptor_, &GMMatchingNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commonteamfight_2etxt() {
  delete GMFirstBloodPerson::default_instance_;
  delete GMFirstBloodPerson_reflection_;
  delete GMFirstBloodRequest::default_instance_;
  delete GMFirstBloodRequest_reflection_;
  delete GMFirstBloodResult::default_instance_;
  delete GMFirstBloodResult_reflection_;
  delete GMFightMatch::default_instance_;
  delete GMFightMatch_reflection_;
  delete GMMatchOperResult::default_instance_;
  delete GMMatchOperResult_reflection_;
  delete GMMatchingNotify::default_instance_;
  delete GMMatchingNotify_reflection_;
}

void protobuf_AddDesc_commonteamfight_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023commonteamfight.txt\"p\n\022GMFirstBloodPer"
    "son\022\020\n\010rolename\030\001 \002(\t\022\016\n\006rolelv\030\002 \002(\005\022\022\n"
    "\nfightvalue\030\003 \002(\005\022\020\n\010killtime\030\004 \002(\003\022\022\n\np"
    "rofession\030\005 \002(\005\")\n\023GMFirstBloodRequest\022\022"
    "\n\nm_fbtypeid\030\001 \002(\005\"a\n\022GMFirstBloodResult"
    "\022\020\n\010m_result\030\001 \002(\005\022\022\n\nm_fbtypeid\030\002 \002(\005\022%"
    "\n\010m_person\030\003 \003(\0132\023.GMFirstBloodPerson\" \n"
    "\014GMFightMatch\022\020\n\010m_teamid\030\001 \002(\005\"%\n\021GMMat"
    "chOperResult\022\020\n\010m_result\030\001 \002(\005\"V\n\020GMMatc"
    "hingNotify\022\020\n\010m_result\030\001 \002(\005\022\020\n\010m_teamid"
    "\030\002 \002(\005\022\016\n\006m_name\030\003 \002(\t\022\016\n\006m_time\030\004 \001(\005", 438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commonteamfight.txt", &protobuf_RegisterTypes);
  GMFirstBloodPerson::default_instance_ = new GMFirstBloodPerson();
  GMFirstBloodRequest::default_instance_ = new GMFirstBloodRequest();
  GMFirstBloodResult::default_instance_ = new GMFirstBloodResult();
  GMFightMatch::default_instance_ = new GMFightMatch();
  GMMatchOperResult::default_instance_ = new GMMatchOperResult();
  GMMatchingNotify::default_instance_ = new GMMatchingNotify();
  GMFirstBloodPerson::default_instance_->InitAsDefaultInstance();
  GMFirstBloodRequest::default_instance_->InitAsDefaultInstance();
  GMFirstBloodResult::default_instance_->InitAsDefaultInstance();
  GMFightMatch::default_instance_->InitAsDefaultInstance();
  GMMatchOperResult::default_instance_->InitAsDefaultInstance();
  GMMatchingNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commonteamfight_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commonteamfight_2etxt {
  StaticDescriptorInitializer_commonteamfight_2etxt() {
    protobuf_AddDesc_commonteamfight_2etxt();
  }
} static_descriptor_initializer_commonteamfight_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GMFirstBloodPerson::kRolenameFieldNumber;
const int GMFirstBloodPerson::kRolelvFieldNumber;
const int GMFirstBloodPerson::kFightvalueFieldNumber;
const int GMFirstBloodPerson::kKilltimeFieldNumber;
const int GMFirstBloodPerson::kProfessionFieldNumber;
#endif  // !_MSC_VER

GMFirstBloodPerson::GMFirstBloodPerson()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFirstBloodPerson::InitAsDefaultInstance() {
}

GMFirstBloodPerson::GMFirstBloodPerson(const GMFirstBloodPerson& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFirstBloodPerson::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelv_ = 0;
  fightvalue_ = 0;
  killtime_ = GOOGLE_LONGLONG(0);
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFirstBloodPerson::~GMFirstBloodPerson() {
  SharedDtor();
}

void GMFirstBloodPerson::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void GMFirstBloodPerson::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFirstBloodPerson::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFirstBloodPerson_descriptor_;
}

const GMFirstBloodPerson& GMFirstBloodPerson::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonteamfight_2etxt();
  return *default_instance_;
}

GMFirstBloodPerson* GMFirstBloodPerson::default_instance_ = NULL;

GMFirstBloodPerson* GMFirstBloodPerson::New() const {
  return new GMFirstBloodPerson;
}

void GMFirstBloodPerson::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelv_ = 0;
    fightvalue_ = 0;
    killtime_ = GOOGLE_LONGLONG(0);
    profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFirstBloodPerson::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rolename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rolelv;
        break;
      }

      // required int32 rolelv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightvalue;
        break;
      }

      // required int32 fightvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killtime;
        break;
      }

      // required int64 killtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killtime_)));
          set_has_killtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // required int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFirstBloodPerson::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // required int32 rolelv = 2;
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rolelv(), output);
  }

  // required int32 fightvalue = 3;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightvalue(), output);
  }

  // required int64 killtime = 4;
  if (has_killtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->killtime(), output);
  }

  // required int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFirstBloodPerson::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rolename = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // required int32 rolelv = 2;
  if (has_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rolelv(), target);
  }

  // required int32 fightvalue = 3;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightvalue(), target);
  }

  // required int64 killtime = 4;
  if (has_killtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->killtime(), target);
  }

  // required int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFirstBloodPerson::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rolename = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 rolelv = 2;
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelv());
    }

    // required int32 fightvalue = 3;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // required int64 killtime = 4;
    if (has_killtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killtime());
    }

    // required int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFirstBloodPerson::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFirstBloodPerson* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFirstBloodPerson*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFirstBloodPerson::MergeFrom(const GMFirstBloodPerson& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_killtime()) {
      set_killtime(from.killtime());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFirstBloodPerson::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFirstBloodPerson::CopyFrom(const GMFirstBloodPerson& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFirstBloodPerson::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GMFirstBloodPerson::Swap(GMFirstBloodPerson* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(fightvalue_, other->fightvalue_);
    std::swap(killtime_, other->killtime_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFirstBloodPerson::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFirstBloodPerson_descriptor_;
  metadata.reflection = GMFirstBloodPerson_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMFirstBloodRequest::kMFbtypeidFieldNumber;
#endif  // !_MSC_VER

GMFirstBloodRequest::GMFirstBloodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFirstBloodRequest::InitAsDefaultInstance() {
}

GMFirstBloodRequest::GMFirstBloodRequest(const GMFirstBloodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFirstBloodRequest::SharedCtor() {
  _cached_size_ = 0;
  m_fbtypeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFirstBloodRequest::~GMFirstBloodRequest() {
  SharedDtor();
}

void GMFirstBloodRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMFirstBloodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFirstBloodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFirstBloodRequest_descriptor_;
}

const GMFirstBloodRequest& GMFirstBloodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonteamfight_2etxt();
  return *default_instance_;
}

GMFirstBloodRequest* GMFirstBloodRequest::default_instance_ = NULL;

GMFirstBloodRequest* GMFirstBloodRequest::New() const {
  return new GMFirstBloodRequest;
}

void GMFirstBloodRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fbtypeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFirstBloodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fbtypeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFirstBloodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fbtypeid = 1;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fbtypeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFirstBloodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fbtypeid = 1;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fbtypeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFirstBloodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fbtypeid = 1;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFirstBloodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFirstBloodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFirstBloodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFirstBloodRequest::MergeFrom(const GMFirstBloodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFirstBloodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFirstBloodRequest::CopyFrom(const GMFirstBloodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFirstBloodRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMFirstBloodRequest::Swap(GMFirstBloodRequest* other) {
  if (other != this) {
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFirstBloodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFirstBloodRequest_descriptor_;
  metadata.reflection = GMFirstBloodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMFirstBloodResult::kMResultFieldNumber;
const int GMFirstBloodResult::kMFbtypeidFieldNumber;
const int GMFirstBloodResult::kMPersonFieldNumber;
#endif  // !_MSC_VER

GMFirstBloodResult::GMFirstBloodResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFirstBloodResult::InitAsDefaultInstance() {
}

GMFirstBloodResult::GMFirstBloodResult(const GMFirstBloodResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFirstBloodResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_fbtypeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFirstBloodResult::~GMFirstBloodResult() {
  SharedDtor();
}

void GMFirstBloodResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMFirstBloodResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFirstBloodResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFirstBloodResult_descriptor_;
}

const GMFirstBloodResult& GMFirstBloodResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonteamfight_2etxt();
  return *default_instance_;
}

GMFirstBloodResult* GMFirstBloodResult::default_instance_ = NULL;

GMFirstBloodResult* GMFirstBloodResult::New() const {
  return new GMFirstBloodResult;
}

void GMFirstBloodResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_fbtypeid_ = 0;
  }
  m_person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFirstBloodResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fbtypeid;
        break;
      }

      // required int32 m_fbtypeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fbtypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fbtypeid_)));
          set_has_m_fbtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_person;
        break;
      }

      // repeated .GMFirstBloodPerson m_person = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_person()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_person;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFirstBloodResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_fbtypeid = 2;
  if (has_m_fbtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fbtypeid(), output);
  }

  // repeated .GMFirstBloodPerson m_person = 3;
  for (int i = 0; i < this->m_person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFirstBloodResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_fbtypeid = 2;
  if (has_m_fbtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fbtypeid(), target);
  }

  // repeated .GMFirstBloodPerson m_person = 3;
  for (int i = 0; i < this->m_person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFirstBloodResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_fbtypeid = 2;
    if (has_m_fbtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fbtypeid());
    }

  }
  // repeated .GMFirstBloodPerson m_person = 3;
  total_size += 1 * this->m_person_size();
  for (int i = 0; i < this->m_person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFirstBloodResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFirstBloodResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFirstBloodResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFirstBloodResult::MergeFrom(const GMFirstBloodResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_person_.MergeFrom(from.m_person_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_fbtypeid()) {
      set_m_fbtypeid(from.m_fbtypeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFirstBloodResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFirstBloodResult::CopyFrom(const GMFirstBloodResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFirstBloodResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < m_person_size(); i++) {
    if (!this->m_person(i).IsInitialized()) return false;
  }
  return true;
}

void GMFirstBloodResult::Swap(GMFirstBloodResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_fbtypeid_, other->m_fbtypeid_);
    m_person_.Swap(&other->m_person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFirstBloodResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFirstBloodResult_descriptor_;
  metadata.reflection = GMFirstBloodResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMFightMatch::kMTeamidFieldNumber;
#endif  // !_MSC_VER

GMFightMatch::GMFightMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFightMatch::InitAsDefaultInstance() {
}

GMFightMatch::GMFightMatch(const GMFightMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFightMatch::SharedCtor() {
  _cached_size_ = 0;
  m_teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFightMatch::~GMFightMatch() {
  SharedDtor();
}

void GMFightMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMFightMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFightMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightMatch_descriptor_;
}

const GMFightMatch& GMFightMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonteamfight_2etxt();
  return *default_instance_;
}

GMFightMatch* GMFightMatch::default_instance_ = NULL;

GMFightMatch* GMFightMatch::New() const {
  return new GMFightMatch;
}

void GMFightMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFightMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamid_)));
          set_has_m_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFightMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_teamid = 1;
  if (has_m_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFightMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_teamid = 1;
  if (has_m_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFightMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_teamid = 1;
    if (has_m_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFightMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFightMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFightMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFightMatch::MergeFrom(const GMFightMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_teamid()) {
      set_m_teamid(from.m_teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFightMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFightMatch::CopyFrom(const GMFightMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFightMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMFightMatch::Swap(GMFightMatch* other) {
  if (other != this) {
    std::swap(m_teamid_, other->m_teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFightMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFightMatch_descriptor_;
  metadata.reflection = GMFightMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMMatchOperResult::kMResultFieldNumber;
#endif  // !_MSC_VER

GMMatchOperResult::GMMatchOperResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMatchOperResult::InitAsDefaultInstance() {
}

GMMatchOperResult::GMMatchOperResult(const GMMatchOperResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMatchOperResult::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMatchOperResult::~GMMatchOperResult() {
  SharedDtor();
}

void GMMatchOperResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMMatchOperResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMatchOperResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMatchOperResult_descriptor_;
}

const GMMatchOperResult& GMMatchOperResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonteamfight_2etxt();
  return *default_instance_;
}

GMMatchOperResult* GMMatchOperResult::default_instance_ = NULL;

GMMatchOperResult* GMMatchOperResult::New() const {
  return new GMMatchOperResult;
}

void GMMatchOperResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMatchOperResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMatchOperResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMatchOperResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMatchOperResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMatchOperResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMatchOperResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMatchOperResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMatchOperResult::MergeFrom(const GMMatchOperResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMatchOperResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMatchOperResult::CopyFrom(const GMMatchOperResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMatchOperResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMMatchOperResult::Swap(GMMatchOperResult* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMatchOperResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMatchOperResult_descriptor_;
  metadata.reflection = GMMatchOperResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMMatchingNotify::kMResultFieldNumber;
const int GMMatchingNotify::kMTeamidFieldNumber;
const int GMMatchingNotify::kMNameFieldNumber;
const int GMMatchingNotify::kMTimeFieldNumber;
#endif  // !_MSC_VER

GMMatchingNotify::GMMatchingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMMatchingNotify::InitAsDefaultInstance() {
}

GMMatchingNotify::GMMatchingNotify(const GMMatchingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMMatchingNotify::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_teamid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMMatchingNotify::~GMMatchingNotify() {
  SharedDtor();
}

void GMMatchingNotify::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void GMMatchingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMMatchingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMMatchingNotify_descriptor_;
}

const GMMatchingNotify& GMMatchingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonteamfight_2etxt();
  return *default_instance_;
}

GMMatchingNotify* GMMatchingNotify::default_instance_ = NULL;

GMMatchingNotify* GMMatchingNotify::New() const {
  return new GMMatchingNotify;
}

void GMMatchingNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_teamid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMMatchingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_teamid;
        break;
      }

      // required int32 m_teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamid_)));
          set_has_m_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_name;
        break;
      }

      // required string m_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMMatchingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 m_teamid = 2;
  if (has_m_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_teamid(), output);
  }

  // required string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // optional int32 m_time = 4;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMMatchingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 m_teamid = 2;
  if (has_m_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_teamid(), target);
  }

  // required string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // optional int32 m_time = 4;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMMatchingNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 m_teamid = 2;
    if (has_m_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamid());
    }

    // required string m_name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_time = 4;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMMatchingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMMatchingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMMatchingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMMatchingNotify::MergeFrom(const GMMatchingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_teamid()) {
      set_m_teamid(from.m_teamid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMMatchingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMMatchingNotify::CopyFrom(const GMMatchingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMMatchingNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMMatchingNotify::Swap(GMMatchingNotify* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_teamid_, other->m_teamid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMMatchingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMMatchingNotify_descriptor_;
  metadata.reflection = GMMatchingNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
