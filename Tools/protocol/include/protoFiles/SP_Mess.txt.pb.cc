// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_Mess.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SP_Mess.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SM_Room_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Room_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Room_roleVec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Room_roleVec_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Room_db_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Room_db_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Room_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Room_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Room_commonVec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Room_commonVec_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Mj_protocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Mj_protocol_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Mj_RoomCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Mj_RoomCommon_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SP_5fMess_2etxt() {
  protobuf_AddDesc_SP_5fMess_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SP_Mess.txt");
  GOOGLE_CHECK(file != NULL);
  SM_Room_role_descriptor_ = file->message_type(0);
  static const int SM_Room_role_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_role, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_role, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_role, increid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_role, score_),
  };
  SM_Room_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Room_role_descriptor_,
      SM_Room_role::default_instance_,
      SM_Room_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Room_role));
  SM_Room_roleVec_descriptor_ = file->message_type(1);
  static const int SM_Room_roleVec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_roleVec, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_roleVec, data_),
  };
  SM_Room_roleVec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Room_roleVec_descriptor_,
      SM_Room_roleVec::default_instance_,
      SM_Room_roleVec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_roleVec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_roleVec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Room_roleVec));
  SM_Room_db_request_descriptor_ = file->message_type(2);
  static const int SM_Room_db_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_db_request, roleid_),
  };
  SM_Room_db_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Room_db_request_descriptor_,
      SM_Room_db_request::default_instance_,
      SM_Room_db_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_db_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_db_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Room_db_request));
  SM_Room_common_descriptor_ = file->message_type(3);
  static const int SM_Room_common_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, increid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, protol_),
  };
  SM_Room_common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Room_common_descriptor_,
      SM_Room_common::default_instance_,
      SM_Room_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Room_common));
  SM_Room_commonVec_descriptor_ = file->message_type(4);
  static const int SM_Room_commonVec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_commonVec, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_commonVec, data_),
  };
  SM_Room_commonVec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Room_commonVec_descriptor_,
      SM_Room_commonVec::default_instance_,
      SM_Room_commonVec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_commonVec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Room_commonVec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Room_commonVec));
  SM_Mj_protocol_descriptor_ = file->message_type(5);
  static const int SM_Mj_protocol_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, avoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, nowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, increidproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, length_),
  };
  SM_Mj_protocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Mj_protocol_descriptor_,
      SM_Mj_protocol::default_instance_,
      SM_Mj_protocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_protocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Mj_protocol));
  SM_Mj_RoomCommon_descriptor_ = file->message_type(6);
  static const int SM_Mj_RoomCommon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_RoomCommon, increid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_RoomCommon, playercout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_RoomCommon, roleidvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_RoomCommon, proto_),
  };
  SM_Mj_RoomCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Mj_RoomCommon_descriptor_,
      SM_Mj_RoomCommon::default_instance_,
      SM_Mj_RoomCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_RoomCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Mj_RoomCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Mj_RoomCommon));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SP_5fMess_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Room_role_descriptor_, &SM_Room_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Room_roleVec_descriptor_, &SM_Room_roleVec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Room_db_request_descriptor_, &SM_Room_db_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Room_common_descriptor_, &SM_Room_common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Room_commonVec_descriptor_, &SM_Room_commonVec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Mj_protocol_descriptor_, &SM_Mj_protocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Mj_RoomCommon_descriptor_, &SM_Mj_RoomCommon::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SP_5fMess_2etxt() {
  delete SM_Room_role::default_instance_;
  delete SM_Room_role_reflection_;
  delete SM_Room_roleVec::default_instance_;
  delete SM_Room_roleVec_reflection_;
  delete SM_Room_db_request::default_instance_;
  delete SM_Room_db_request_reflection_;
  delete SM_Room_common::default_instance_;
  delete SM_Room_common_reflection_;
  delete SM_Room_commonVec::default_instance_;
  delete SM_Room_commonVec_reflection_;
  delete SM_Mj_protocol::default_instance_;
  delete SM_Mj_protocol_reflection_;
  delete SM_Mj_RoomCommon::default_instance_;
  delete SM_Mj_RoomCommon_reflection_;
}

void protobuf_AddDesc_SP_5fMess_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SP_Mess.txt\"R\n\014SM_Room_role\022\016\n\006roleid\030"
    "\001 \002(\005\022\022\n\ncreatetime\030\002 \001(\005\022\017\n\007increid\030\003 \001"
    "(\003\022\r\n\005score\030\004 \001(\005\">\n\017SM_Room_roleVec\022\016\n\006"
    "roleid\030\001 \002(\005\022\033\n\004data\030\002 \003(\0132\r.SM_Room_rol"
    "e\"$\n\022SM_Room_db_request\022\016\n\006roleid\030\001 \002(\005\""
    "\226\001\n\016SM_Room_common\022\017\n\007increid\030\001 \002(\003\022\016\n\006r"
    "oleid\030\002 \001(\t\022\021\n\tbegintime\030\003 \001(\005\022\017\n\007endtim"
    "e\030\004 \001(\005\022\021\n\tmonsterid\030\005 \001(\005\022\014\n\004rate\030\006 \001(\005"
    "\022\016\n\006roomid\030\007 \001(\005\022\016\n\006protol\030\010 \001(\t\"B\n\021SM_R"
    "oom_commonVec\022\016\n\006roleid\030\001 \002(\005\022\035\n\004data\030\002 "
    "\003(\0132\017.SM_Room_common\"\213\001\n\016SM_Mj_protocol\022"
    "\016\n\006roleid\030\001 \002(\005\022\r\n\005avoid\030\002 \001(\005\022\021\n\tmessag"
    "eid\030\003 \001(\005\022\017\n\007nowtime\030\004 \001(\005\022\020\n\010protocol\030\005"
    " \001(\014\022\024\n\014increidproto\030\006 \001(\005\022\016\n\006length\030\007 \001"
    "(\005\"j\n\020SM_Mj_RoomCommon\022\017\n\007increid\030\001 \002(\003\022"
    "\022\n\nplayercout\030\002 \001(\005\022\021\n\troleidvec\030\003 \003(\005\022\036"
    "\n\005proto\030\004 \003(\0132\017.SM_Mj_protocol", 670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SP_Mess.txt", &protobuf_RegisterTypes);
  SM_Room_role::default_instance_ = new SM_Room_role();
  SM_Room_roleVec::default_instance_ = new SM_Room_roleVec();
  SM_Room_db_request::default_instance_ = new SM_Room_db_request();
  SM_Room_common::default_instance_ = new SM_Room_common();
  SM_Room_commonVec::default_instance_ = new SM_Room_commonVec();
  SM_Mj_protocol::default_instance_ = new SM_Mj_protocol();
  SM_Mj_RoomCommon::default_instance_ = new SM_Mj_RoomCommon();
  SM_Room_role::default_instance_->InitAsDefaultInstance();
  SM_Room_roleVec::default_instance_->InitAsDefaultInstance();
  SM_Room_db_request::default_instance_->InitAsDefaultInstance();
  SM_Room_common::default_instance_->InitAsDefaultInstance();
  SM_Room_commonVec::default_instance_->InitAsDefaultInstance();
  SM_Mj_protocol::default_instance_->InitAsDefaultInstance();
  SM_Mj_RoomCommon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SP_5fMess_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SP_5fMess_2etxt {
  StaticDescriptorInitializer_SP_5fMess_2etxt() {
    protobuf_AddDesc_SP_5fMess_2etxt();
  }
} static_descriptor_initializer_SP_5fMess_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int SM_Room_role::kRoleidFieldNumber;
const int SM_Room_role::kCreatetimeFieldNumber;
const int SM_Room_role::kIncreidFieldNumber;
const int SM_Room_role::kScoreFieldNumber;
#endif  // !_MSC_VER

SM_Room_role::SM_Room_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Room_role::InitAsDefaultInstance() {
}

SM_Room_role::SM_Room_role(const SM_Room_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Room_role::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  createtime_ = 0;
  increid_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Room_role::~SM_Room_role() {
  SharedDtor();
}

void SM_Room_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Room_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Room_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Room_role_descriptor_;
}

const SM_Room_role& SM_Room_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Room_role* SM_Room_role::default_instance_ = NULL;

SM_Room_role* SM_Room_role::New() const {
  return new SM_Room_role;
}

void SM_Room_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    createtime_ = 0;
    increid_ = GOOGLE_LONGLONG(0);
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Room_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createtime;
        break;
      }

      // optional int32 createtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_increid;
        break;
      }

      // optional int64 increid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increid_)));
          set_has_increid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Room_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 createtime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->createtime(), output);
  }

  // optional int64 increid = 3;
  if (has_increid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->increid(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Room_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 createtime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->createtime(), target);
  }

  // optional int64 increid = 3;
  if (has_increid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->increid(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Room_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 createtime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int64 increid = 3;
    if (has_increid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->increid());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Room_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Room_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Room_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Room_role::MergeFrom(const SM_Room_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_increid()) {
      set_increid(from.increid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Room_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Room_role::CopyFrom(const SM_Room_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Room_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Room_role::Swap(SM_Room_role* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(createtime_, other->createtime_);
    std::swap(increid_, other->increid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Room_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Room_role_descriptor_;
  metadata.reflection = SM_Room_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Room_roleVec::kRoleidFieldNumber;
const int SM_Room_roleVec::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Room_roleVec::SM_Room_roleVec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Room_roleVec::InitAsDefaultInstance() {
}

SM_Room_roleVec::SM_Room_roleVec(const SM_Room_roleVec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Room_roleVec::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Room_roleVec::~SM_Room_roleVec() {
  SharedDtor();
}

void SM_Room_roleVec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Room_roleVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Room_roleVec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Room_roleVec_descriptor_;
}

const SM_Room_roleVec& SM_Room_roleVec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Room_roleVec* SM_Room_roleVec::default_instance_ = NULL;

SM_Room_roleVec* SM_Room_roleVec::New() const {
  return new SM_Room_roleVec;
}

void SM_Room_roleVec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Room_roleVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Room_role data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Room_roleVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .SM_Room_role data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Room_roleVec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .SM_Room_role data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Room_roleVec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .SM_Room_role data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Room_roleVec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Room_roleVec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Room_roleVec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Room_roleVec::MergeFrom(const SM_Room_roleVec& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Room_roleVec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Room_roleVec::CopyFrom(const SM_Room_roleVec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Room_roleVec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Room_roleVec::Swap(SM_Room_roleVec* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Room_roleVec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Room_roleVec_descriptor_;
  metadata.reflection = SM_Room_roleVec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Room_db_request::kRoleidFieldNumber;
#endif  // !_MSC_VER

SM_Room_db_request::SM_Room_db_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Room_db_request::InitAsDefaultInstance() {
}

SM_Room_db_request::SM_Room_db_request(const SM_Room_db_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Room_db_request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Room_db_request::~SM_Room_db_request() {
  SharedDtor();
}

void SM_Room_db_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Room_db_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Room_db_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Room_db_request_descriptor_;
}

const SM_Room_db_request& SM_Room_db_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Room_db_request* SM_Room_db_request::default_instance_ = NULL;

SM_Room_db_request* SM_Room_db_request::New() const {
  return new SM_Room_db_request;
}

void SM_Room_db_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Room_db_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Room_db_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Room_db_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Room_db_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Room_db_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Room_db_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Room_db_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Room_db_request::MergeFrom(const SM_Room_db_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Room_db_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Room_db_request::CopyFrom(const SM_Room_db_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Room_db_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Room_db_request::Swap(SM_Room_db_request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Room_db_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Room_db_request_descriptor_;
  metadata.reflection = SM_Room_db_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Room_common::kIncreidFieldNumber;
const int SM_Room_common::kRoleidFieldNumber;
const int SM_Room_common::kBegintimeFieldNumber;
const int SM_Room_common::kEndtimeFieldNumber;
const int SM_Room_common::kMonsteridFieldNumber;
const int SM_Room_common::kRateFieldNumber;
const int SM_Room_common::kRoomidFieldNumber;
const int SM_Room_common::kProtolFieldNumber;
#endif  // !_MSC_VER

SM_Room_common::SM_Room_common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Room_common::InitAsDefaultInstance() {
}

SM_Room_common::SM_Room_common(const SM_Room_common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Room_common::SharedCtor() {
  _cached_size_ = 0;
  increid_ = GOOGLE_LONGLONG(0);
  roleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = 0;
  endtime_ = 0;
  monsterid_ = 0;
  rate_ = 0;
  roomid_ = 0;
  protol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Room_common::~SM_Room_common() {
  SharedDtor();
}

void SM_Room_common::SharedDtor() {
  if (roleid_ != &::google::protobuf::internal::kEmptyString) {
    delete roleid_;
  }
  if (protol_ != &::google::protobuf::internal::kEmptyString) {
    delete protol_;
  }
  if (this != default_instance_) {
  }
}

void SM_Room_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Room_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Room_common_descriptor_;
}

const SM_Room_common& SM_Room_common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Room_common* SM_Room_common::default_instance_ = NULL;

SM_Room_common* SM_Room_common::New() const {
  return new SM_Room_common;
}

void SM_Room_common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    increid_ = GOOGLE_LONGLONG(0);
    if (has_roleid()) {
      if (roleid_ != &::google::protobuf::internal::kEmptyString) {
        roleid_->clear();
      }
    }
    begintime_ = 0;
    endtime_ = 0;
    monsterid_ = 0;
    rate_ = 0;
    roomid_ = 0;
    if (has_protol()) {
      if (protol_ != &::google::protobuf::internal::kEmptyString) {
        protol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Room_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 increid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increid_)));
          set_has_increid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleid;
        break;
      }

      // optional string roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleid().data(), this->roleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begintime;
        break;
      }

      // optional int32 begintime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monsterid;
        break;
      }

      // optional int32 monsterid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rate;
        break;
      }

      // optional int32 rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_protol;
        break;
      }

      // optional string protol = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protol().data(), this->protol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Room_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 increid = 1;
  if (has_increid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->increid(), output);
  }

  // optional string roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roleid(), output);
  }

  // optional int32 begintime = 3;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->begintime(), output);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtime(), output);
  }

  // optional int32 monsterid = 5;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->monsterid(), output);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rate(), output);
  }

  // optional int32 roomid = 7;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomid(), output);
  }

  // optional string protol = 8;
  if (has_protol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protol().data(), this->protol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->protol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Room_common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 increid = 1;
  if (has_increid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->increid(), target);
  }

  // optional string roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleid().data(), this->roleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roleid(), target);
  }

  // optional int32 begintime = 3;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->begintime(), target);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtime(), target);
  }

  // optional int32 monsterid = 5;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->monsterid(), target);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rate(), target);
  }

  // optional int32 roomid = 7;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomid(), target);
  }

  // optional string protol = 8;
  if (has_protol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protol().data(), this->protol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->protol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Room_common::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 increid = 1;
    if (has_increid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->increid());
    }

    // optional string roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleid());
    }

    // optional int32 begintime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begintime());
    }

    // optional int32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional int32 monsterid = 5;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 rate = 6;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 roomid = 7;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string protol = 8;
    if (has_protol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Room_common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Room_common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Room_common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Room_common::MergeFrom(const SM_Room_common& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_increid()) {
      set_increid(from.increid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_protol()) {
      set_protol(from.protol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Room_common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Room_common::CopyFrom(const SM_Room_common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Room_common::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Room_common::Swap(SM_Room_common* other) {
  if (other != this) {
    std::swap(increid_, other->increid_);
    std::swap(roleid_, other->roleid_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(rate_, other->rate_);
    std::swap(roomid_, other->roomid_);
    std::swap(protol_, other->protol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Room_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Room_common_descriptor_;
  metadata.reflection = SM_Room_common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Room_commonVec::kRoleidFieldNumber;
const int SM_Room_commonVec::kDataFieldNumber;
#endif  // !_MSC_VER

SM_Room_commonVec::SM_Room_commonVec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Room_commonVec::InitAsDefaultInstance() {
}

SM_Room_commonVec::SM_Room_commonVec(const SM_Room_commonVec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Room_commonVec::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Room_commonVec::~SM_Room_commonVec() {
  SharedDtor();
}

void SM_Room_commonVec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Room_commonVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Room_commonVec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Room_commonVec_descriptor_;
}

const SM_Room_commonVec& SM_Room_commonVec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Room_commonVec* SM_Room_commonVec::default_instance_ = NULL;

SM_Room_commonVec* SM_Room_commonVec::New() const {
  return new SM_Room_commonVec;
}

void SM_Room_commonVec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Room_commonVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SM_Room_common data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Room_commonVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .SM_Room_common data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Room_commonVec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .SM_Room_common data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Room_commonVec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .SM_Room_common data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Room_commonVec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Room_commonVec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Room_commonVec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Room_commonVec::MergeFrom(const SM_Room_commonVec& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Room_commonVec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Room_commonVec::CopyFrom(const SM_Room_commonVec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Room_commonVec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Room_commonVec::Swap(SM_Room_commonVec* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Room_commonVec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Room_commonVec_descriptor_;
  metadata.reflection = SM_Room_commonVec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Mj_protocol::kRoleidFieldNumber;
const int SM_Mj_protocol::kAvoidFieldNumber;
const int SM_Mj_protocol::kMessageidFieldNumber;
const int SM_Mj_protocol::kNowtimeFieldNumber;
const int SM_Mj_protocol::kProtocolFieldNumber;
const int SM_Mj_protocol::kIncreidprotoFieldNumber;
const int SM_Mj_protocol::kLengthFieldNumber;
#endif  // !_MSC_VER

SM_Mj_protocol::SM_Mj_protocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Mj_protocol::InitAsDefaultInstance() {
}

SM_Mj_protocol::SM_Mj_protocol(const SM_Mj_protocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Mj_protocol::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  avoid_ = 0;
  messageid_ = 0;
  nowtime_ = 0;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  increidproto_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Mj_protocol::~SM_Mj_protocol() {
  SharedDtor();
}

void SM_Mj_protocol::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (this != default_instance_) {
  }
}

void SM_Mj_protocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Mj_protocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Mj_protocol_descriptor_;
}

const SM_Mj_protocol& SM_Mj_protocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Mj_protocol* SM_Mj_protocol::default_instance_ = NULL;

SM_Mj_protocol* SM_Mj_protocol::New() const {
  return new SM_Mj_protocol;
}

void SM_Mj_protocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    avoid_ = 0;
    messageid_ = 0;
    nowtime_ = 0;
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
    increidproto_ = 0;
    length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Mj_protocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avoid;
        break;
      }

      // optional int32 avoid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoid_)));
          set_has_avoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_messageid;
        break;
      }

      // optional int32 messageid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nowtime;
        break;
      }

      // optional int32 nowtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowtime_)));
          set_has_nowtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_protocol;
        break;
      }

      // optional bytes protocol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_increidproto;
        break;
      }

      // optional int32 increidproto = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increidproto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increidproto_)));
          set_has_increidproto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_length;
        break;
      }

      // optional int32 length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Mj_protocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 avoid = 2;
  if (has_avoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avoid(), output);
  }

  // optional int32 messageid = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messageid(), output);
  }

  // optional int32 nowtime = 4;
  if (has_nowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nowtime(), output);
  }

  // optional bytes protocol = 5;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->protocol(), output);
  }

  // optional int32 increidproto = 6;
  if (has_increidproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->increidproto(), output);
  }

  // optional int32 length = 7;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Mj_protocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 avoid = 2;
  if (has_avoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avoid(), target);
  }

  // optional int32 messageid = 3;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messageid(), target);
  }

  // optional int32 nowtime = 4;
  if (has_nowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nowtime(), target);
  }

  // optional bytes protocol = 5;
  if (has_protocol()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->protocol(), target);
  }

  // optional int32 increidproto = 6;
  if (has_increidproto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->increidproto(), target);
  }

  // optional int32 length = 7;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Mj_protocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 avoid = 2;
    if (has_avoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoid());
    }

    // optional int32 messageid = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional int32 nowtime = 4;
    if (has_nowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowtime());
    }

    // optional bytes protocol = 5;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protocol());
    }

    // optional int32 increidproto = 6;
    if (has_increidproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increidproto());
    }

    // optional int32 length = 7;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Mj_protocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Mj_protocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Mj_protocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Mj_protocol::MergeFrom(const SM_Mj_protocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_avoid()) {
      set_avoid(from.avoid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_nowtime()) {
      set_nowtime(from.nowtime());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_increidproto()) {
      set_increidproto(from.increidproto());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Mj_protocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Mj_protocol::CopyFrom(const SM_Mj_protocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Mj_protocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Mj_protocol::Swap(SM_Mj_protocol* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(avoid_, other->avoid_);
    std::swap(messageid_, other->messageid_);
    std::swap(nowtime_, other->nowtime_);
    std::swap(protocol_, other->protocol_);
    std::swap(increidproto_, other->increidproto_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Mj_protocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Mj_protocol_descriptor_;
  metadata.reflection = SM_Mj_protocol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Mj_RoomCommon::kIncreidFieldNumber;
const int SM_Mj_RoomCommon::kPlayercoutFieldNumber;
const int SM_Mj_RoomCommon::kRoleidvecFieldNumber;
const int SM_Mj_RoomCommon::kProtoFieldNumber;
#endif  // !_MSC_VER

SM_Mj_RoomCommon::SM_Mj_RoomCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Mj_RoomCommon::InitAsDefaultInstance() {
}

SM_Mj_RoomCommon::SM_Mj_RoomCommon(const SM_Mj_RoomCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Mj_RoomCommon::SharedCtor() {
  _cached_size_ = 0;
  increid_ = GOOGLE_LONGLONG(0);
  playercout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Mj_RoomCommon::~SM_Mj_RoomCommon() {
  SharedDtor();
}

void SM_Mj_RoomCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Mj_RoomCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Mj_RoomCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Mj_RoomCommon_descriptor_;
}

const SM_Mj_RoomCommon& SM_Mj_RoomCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SP_5fMess_2etxt();
  return *default_instance_;
}

SM_Mj_RoomCommon* SM_Mj_RoomCommon::default_instance_ = NULL;

SM_Mj_RoomCommon* SM_Mj_RoomCommon::New() const {
  return new SM_Mj_RoomCommon;
}

void SM_Mj_RoomCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    increid_ = GOOGLE_LONGLONG(0);
    playercout_ = 0;
  }
  roleidvec_.Clear();
  proto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Mj_RoomCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 increid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &increid_)));
          set_has_increid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playercout;
        break;
      }

      // optional int32 playercout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playercout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercout_)));
          set_has_playercout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleidvec;
        break;
      }

      // repeated int32 roleidvec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleidvec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_roleidvec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roleidvec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleidvec;
        if (input->ExpectTag(34)) goto parse_proto;
        break;
      }

      // repeated .SM_Mj_protocol proto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proto;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Mj_RoomCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 increid = 1;
  if (has_increid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->increid(), output);
  }

  // optional int32 playercout = 2;
  if (has_playercout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playercout(), output);
  }

  // repeated int32 roleidvec = 3;
  for (int i = 0; i < this->roleidvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->roleidvec(i), output);
  }

  // repeated .SM_Mj_protocol proto = 4;
  for (int i = 0; i < this->proto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->proto(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Mj_RoomCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 increid = 1;
  if (has_increid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->increid(), target);
  }

  // optional int32 playercout = 2;
  if (has_playercout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playercout(), target);
  }

  // repeated int32 roleidvec = 3;
  for (int i = 0; i < this->roleidvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->roleidvec(i), target);
  }

  // repeated .SM_Mj_protocol proto = 4;
  for (int i = 0; i < this->proto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->proto(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Mj_RoomCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 increid = 1;
    if (has_increid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->increid());
    }

    // optional int32 playercout = 2;
    if (has_playercout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercout());
    }

  }
  // repeated int32 roleidvec = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleidvec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roleidvec(i));
    }
    total_size += 1 * this->roleidvec_size() + data_size;
  }

  // repeated .SM_Mj_protocol proto = 4;
  total_size += 1 * this->proto_size();
  for (int i = 0; i < this->proto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proto(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Mj_RoomCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Mj_RoomCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Mj_RoomCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Mj_RoomCommon::MergeFrom(const SM_Mj_RoomCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleidvec_.MergeFrom(from.roleidvec_);
  proto_.MergeFrom(from.proto_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_increid()) {
      set_increid(from.increid());
    }
    if (from.has_playercout()) {
      set_playercout(from.playercout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Mj_RoomCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Mj_RoomCommon::CopyFrom(const SM_Mj_RoomCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Mj_RoomCommon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < proto_size(); i++) {
    if (!this->proto(i).IsInitialized()) return false;
  }
  return true;
}

void SM_Mj_RoomCommon::Swap(SM_Mj_RoomCommon* other) {
  if (other != this) {
    std::swap(increid_, other->increid_);
    std::swap(playercout_, other->playercout_);
    roleidvec_.Swap(&other->roleidvec_);
    proto_.Swap(&other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Mj_RoomCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Mj_RoomCommon_descriptor_;
  metadata.reflection = SM_Mj_RoomCommon_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
