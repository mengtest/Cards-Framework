// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spiritArean.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spiritArean.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_AreanReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreanReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AreanData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreanData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RankReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RankReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AreanShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreanShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_ShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_ShopData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spiritArean_2etxt() {
  protobuf_AddDesc_spiritArean_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spiritArean.txt");
  GOOGLE_CHECK(file != NULL);
  GM_AreanReturn_descriptor_ = file->message_type(0);
  static const int GM_AreanReturn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, m_costexper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, m_lasttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, m_currank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, m_toprank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, m_areandata_),
  };
  GM_AreanReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreanReturn_descriptor_,
      GM_AreanReturn::default_instance_,
      GM_AreanReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreanReturn));
  GM_AreanData_descriptor_ = file->message_type(1);
  static const int GM_AreanData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_rewardprest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_rewardgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_fightval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, m_equiptypeid_),
  };
  GM_AreanData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreanData_descriptor_,
      GM_AreanData::default_instance_,
      GM_AreanData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreanData));
  GM_RankReturn_descriptor_ = file->message_type(2);
  static const int GM_RankReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankReturn, m_pagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankReturn, m_areandata_),
  };
  GM_RankReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RankReturn_descriptor_,
      GM_RankReturn::default_instance_,
      GM_RankReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RankReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RankReturn));
  GM_AreanShop_descriptor_ = file->message_type(3);
  static const int GM_AreanShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanShop, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanShop, m_shopdata_),
  };
  GM_AreanShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreanShop_descriptor_,
      GM_AreanShop::default_instance_,
      GM_AreanShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreanShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreanShop));
  GM_ShopData_descriptor_ = file->message_type(4);
  static const int GM_ShopData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, m_objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, m_showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, m_buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, m_exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, m_exchangenum_),
  };
  GM_ShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_ShopData_descriptor_,
      GM_ShopData::default_instance_,
      GM_ShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_ShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_ShopData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spiritArean_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreanReturn_descriptor_, &GM_AreanReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreanData_descriptor_, &GM_AreanData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RankReturn_descriptor_, &GM_RankReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreanShop_descriptor_, &GM_AreanShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_ShopData_descriptor_, &GM_ShopData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spiritArean_2etxt() {
  delete GM_AreanReturn::default_instance_;
  delete GM_AreanReturn_reflection_;
  delete GM_AreanData::default_instance_;
  delete GM_AreanData_reflection_;
  delete GM_RankReturn::default_instance_;
  delete GM_RankReturn_reflection_;
  delete GM_AreanShop::default_instance_;
  delete GM_AreanShop_reflection_;
  delete GM_ShopData::default_instance_;
  delete GM_ShopData_reflection_;
}

void protobuf_AddDesc_spiritArean_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017spiritArean.txt\"\204\001\n\016GM_AreanReturn\022\023\n\013"
    "m_costExper\030\001 \002(\005\022\023\n\013m_lasttimes\030\002 \001(\005\022\021"
    "\n\tm_curRank\030\003 \001(\005\022\021\n\tm_toprank\030\004 \001(\005\022\"\n\013"
    "m_areandata\030\005 \003(\0132\r.GM_AreanData\"\304\001\n\014GM_"
    "AreanData\022\020\n\010m_roleId\030\001 \002(\005\022\020\n\010m_roleLv\030"
    "\002 \001(\005\022\022\n\nm_rolename\030\003 \001(\t\022\024\n\014m_professio"
    "n\030\004 \001(\005\022\016\n\006m_rank\030\005 \001(\005\022\025\n\rm_rewardPrest"
    "\030\006 \001(\005\022\024\n\014m_rewardGold\030\007 \001(\005\022\022\n\nm_fightv"
    "al\030\010 \001(\005\022\025\n\rm_equiptypeid\030\t \003(\005\"H\n\rGM_Ra"
    "nkReturn\022\023\n\013m_pagecount\030\001 \002(\005\022\"\n\013m_arean"
    "data\030\002 \003(\0132\r.GM_AreanData\"B\n\014GM_AreanSho"
    "p\022\020\n\010m_roleid\030\001 \002(\005\022 \n\nm_shopdata\030\002 \003(\0132"
    "\014.GM_ShopData\"v\n\013GM_ShopData\022\022\n\nm_object"
    "id\030\001 \002(\005\022\022\n\nm_showtype\030\002 \001(\005\022\022\n\nm_buycou"
    "nt\030\003 \001(\005\022\024\n\014m_exchangeid\030\004 \001(\005\022\025\n\rm_exch"
    "angenum\030\005 \001(\005", 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spiritArean.txt", &protobuf_RegisterTypes);
  GM_AreanReturn::default_instance_ = new GM_AreanReturn();
  GM_AreanData::default_instance_ = new GM_AreanData();
  GM_RankReturn::default_instance_ = new GM_RankReturn();
  GM_AreanShop::default_instance_ = new GM_AreanShop();
  GM_ShopData::default_instance_ = new GM_ShopData();
  GM_AreanReturn::default_instance_->InitAsDefaultInstance();
  GM_AreanData::default_instance_->InitAsDefaultInstance();
  GM_RankReturn::default_instance_->InitAsDefaultInstance();
  GM_AreanShop::default_instance_->InitAsDefaultInstance();
  GM_ShopData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spiritArean_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spiritArean_2etxt {
  StaticDescriptorInitializer_spiritArean_2etxt() {
    protobuf_AddDesc_spiritArean_2etxt();
  }
} static_descriptor_initializer_spiritArean_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_AreanReturn::kMCostExperFieldNumber;
const int GM_AreanReturn::kMLasttimesFieldNumber;
const int GM_AreanReturn::kMCurRankFieldNumber;
const int GM_AreanReturn::kMToprankFieldNumber;
const int GM_AreanReturn::kMAreandataFieldNumber;
#endif  // !_MSC_VER

GM_AreanReturn::GM_AreanReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreanReturn::InitAsDefaultInstance() {
}

GM_AreanReturn::GM_AreanReturn(const GM_AreanReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreanReturn::SharedCtor() {
  _cached_size_ = 0;
  m_costexper_ = 0;
  m_lasttimes_ = 0;
  m_currank_ = 0;
  m_toprank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreanReturn::~GM_AreanReturn() {
  SharedDtor();
}

void GM_AreanReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AreanReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreanReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreanReturn_descriptor_;
}

const GM_AreanReturn& GM_AreanReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spiritArean_2etxt();
  return *default_instance_;
}

GM_AreanReturn* GM_AreanReturn::default_instance_ = NULL;

GM_AreanReturn* GM_AreanReturn::New() const {
  return new GM_AreanReturn;
}

void GM_AreanReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_costexper_ = 0;
    m_lasttimes_ = 0;
    m_currank_ = 0;
    m_toprank_ = 0;
  }
  m_areandata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreanReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_costExper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costexper_)));
          set_has_m_costexper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lasttimes;
        break;
      }

      // optional int32 m_lasttimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lasttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lasttimes_)));
          set_has_m_lasttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_curRank;
        break;
      }

      // optional int32 m_curRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_curRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_currank_)));
          set_has_m_currank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_toprank;
        break;
      }

      // optional int32 m_toprank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_toprank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toprank_)));
          set_has_m_toprank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_areandata;
        break;
      }

      // repeated .GM_AreanData m_areandata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_areandata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_areandata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_areandata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreanReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_costExper = 1;
  if (has_m_costexper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_costexper(), output);
  }

  // optional int32 m_lasttimes = 2;
  if (has_m_lasttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lasttimes(), output);
  }

  // optional int32 m_curRank = 3;
  if (has_m_currank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_currank(), output);
  }

  // optional int32 m_toprank = 4;
  if (has_m_toprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_toprank(), output);
  }

  // repeated .GM_AreanData m_areandata = 5;
  for (int i = 0; i < this->m_areandata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_areandata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreanReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_costExper = 1;
  if (has_m_costexper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_costexper(), target);
  }

  // optional int32 m_lasttimes = 2;
  if (has_m_lasttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lasttimes(), target);
  }

  // optional int32 m_curRank = 3;
  if (has_m_currank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_currank(), target);
  }

  // optional int32 m_toprank = 4;
  if (has_m_toprank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_toprank(), target);
  }

  // repeated .GM_AreanData m_areandata = 5;
  for (int i = 0; i < this->m_areandata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_areandata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreanReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_costExper = 1;
    if (has_m_costexper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costexper());
    }

    // optional int32 m_lasttimes = 2;
    if (has_m_lasttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lasttimes());
    }

    // optional int32 m_curRank = 3;
    if (has_m_currank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_currank());
    }

    // optional int32 m_toprank = 4;
    if (has_m_toprank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toprank());
    }

  }
  // repeated .GM_AreanData m_areandata = 5;
  total_size += 1 * this->m_areandata_size();
  for (int i = 0; i < this->m_areandata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_areandata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreanReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreanReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreanReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreanReturn::MergeFrom(const GM_AreanReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_areandata_.MergeFrom(from.m_areandata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_costexper()) {
      set_m_costexper(from.m_costexper());
    }
    if (from.has_m_lasttimes()) {
      set_m_lasttimes(from.m_lasttimes());
    }
    if (from.has_m_currank()) {
      set_m_currank(from.m_currank());
    }
    if (from.has_m_toprank()) {
      set_m_toprank(from.m_toprank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreanReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreanReturn::CopyFrom(const GM_AreanReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreanReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_areandata_size(); i++) {
    if (!this->m_areandata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AreanReturn::Swap(GM_AreanReturn* other) {
  if (other != this) {
    std::swap(m_costexper_, other->m_costexper_);
    std::swap(m_lasttimes_, other->m_lasttimes_);
    std::swap(m_currank_, other->m_currank_);
    std::swap(m_toprank_, other->m_toprank_);
    m_areandata_.Swap(&other->m_areandata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreanReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreanReturn_descriptor_;
  metadata.reflection = GM_AreanReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AreanData::kMRoleIdFieldNumber;
const int GM_AreanData::kMRoleLvFieldNumber;
const int GM_AreanData::kMRolenameFieldNumber;
const int GM_AreanData::kMProfessionFieldNumber;
const int GM_AreanData::kMRankFieldNumber;
const int GM_AreanData::kMRewardPrestFieldNumber;
const int GM_AreanData::kMRewardGoldFieldNumber;
const int GM_AreanData::kMFightvalFieldNumber;
const int GM_AreanData::kMEquiptypeidFieldNumber;
#endif  // !_MSC_VER

GM_AreanData::GM_AreanData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreanData::InitAsDefaultInstance() {
}

GM_AreanData::GM_AreanData(const GM_AreanData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreanData::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  m_rolelv_ = 0;
  m_rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_profession_ = 0;
  m_rank_ = 0;
  m_rewardprest_ = 0;
  m_rewardgold_ = 0;
  m_fightval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreanData::~GM_AreanData() {
  SharedDtor();
}

void GM_AreanData::SharedDtor() {
  if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rolename_;
  }
  if (this != default_instance_) {
  }
}

void GM_AreanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreanData_descriptor_;
}

const GM_AreanData& GM_AreanData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spiritArean_2etxt();
  return *default_instance_;
}

GM_AreanData* GM_AreanData::default_instance_ = NULL;

GM_AreanData* GM_AreanData::New() const {
  return new GM_AreanData;
}

void GM_AreanData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
    m_rolelv_ = 0;
    if (has_m_rolename()) {
      if (m_rolename_ != &::google::protobuf::internal::kEmptyString) {
        m_rolename_->clear();
      }
    }
    m_profession_ = 0;
    m_rank_ = 0;
    m_rewardprest_ = 0;
    m_rewardgold_ = 0;
    m_fightval_ = 0;
  }
  m_equiptypeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roleLv;
        break;
      }

      // optional int32 m_roleLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roleLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rolelv_)));
          set_has_m_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_rolename;
        break;
      }

      // optional string m_rolename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rolename().data(), this->m_rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_profession;
        break;
      }

      // optional int32 m_profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_profession_)));
          set_has_m_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_rewardPrest;
        break;
      }

      // optional int32 m_rewardPrest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardPrest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardprest_)));
          set_has_m_rewardprest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_rewardGold;
        break;
      }

      // optional int32 m_rewardGold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardgold_)));
          set_has_m_rewardgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_fightval;
        break;
      }

      // optional int32 m_fightval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fightval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightval_)));
          set_has_m_fightval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_equiptypeid;
        break;
      }

      // repeated int32 m_equiptypeid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equiptypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_m_equiptypeid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_equiptypeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_equiptypeid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // optional int32 m_roleLv = 2;
  if (has_m_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rolelv(), output);
  }

  // optional string m_rolename = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_rolename(), output);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_profession(), output);
  }

  // optional int32 m_rank = 5;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rank(), output);
  }

  // optional int32 m_rewardPrest = 6;
  if (has_m_rewardprest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_rewardprest(), output);
  }

  // optional int32 m_rewardGold = 7;
  if (has_m_rewardgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_rewardgold(), output);
  }

  // optional int32 m_fightval = 8;
  if (has_m_fightval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_fightval(), output);
  }

  // repeated int32 m_equiptypeid = 9;
  for (int i = 0; i < this->m_equiptypeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->m_equiptypeid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreanData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleId = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // optional int32 m_roleLv = 2;
  if (has_m_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rolelv(), target);
  }

  // optional string m_rolename = 3;
  if (has_m_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rolename().data(), this->m_rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_rolename(), target);
  }

  // optional int32 m_profession = 4;
  if (has_m_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_profession(), target);
  }

  // optional int32 m_rank = 5;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rank(), target);
  }

  // optional int32 m_rewardPrest = 6;
  if (has_m_rewardprest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_rewardprest(), target);
  }

  // optional int32 m_rewardGold = 7;
  if (has_m_rewardgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_rewardgold(), target);
  }

  // optional int32 m_fightval = 8;
  if (has_m_fightval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_fightval(), target);
  }

  // repeated int32 m_equiptypeid = 9;
  for (int i = 0; i < this->m_equiptypeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->m_equiptypeid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreanData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleId = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

    // optional int32 m_roleLv = 2;
    if (has_m_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rolelv());
    }

    // optional string m_rolename = 3;
    if (has_m_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rolename());
    }

    // optional int32 m_profession = 4;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_profession());
    }

    // optional int32 m_rank = 5;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // optional int32 m_rewardPrest = 6;
    if (has_m_rewardprest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardprest());
    }

    // optional int32 m_rewardGold = 7;
    if (has_m_rewardgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardgold());
    }

    // optional int32 m_fightval = 8;
    if (has_m_fightval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightval());
    }

  }
  // repeated int32 m_equiptypeid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_equiptypeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_equiptypeid(i));
    }
    total_size += 1 * this->m_equiptypeid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreanData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreanData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreanData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreanData::MergeFrom(const GM_AreanData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_equiptypeid_.MergeFrom(from.m_equiptypeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_rolelv()) {
      set_m_rolelv(from.m_rolelv());
    }
    if (from.has_m_rolename()) {
      set_m_rolename(from.m_rolename());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_rewardprest()) {
      set_m_rewardprest(from.m_rewardprest());
    }
    if (from.has_m_rewardgold()) {
      set_m_rewardgold(from.m_rewardgold());
    }
    if (from.has_m_fightval()) {
      set_m_fightval(from.m_fightval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreanData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreanData::CopyFrom(const GM_AreanData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreanData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AreanData::Swap(GM_AreanData* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_rolelv_, other->m_rolelv_);
    std::swap(m_rolename_, other->m_rolename_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_rewardprest_, other->m_rewardprest_);
    std::swap(m_rewardgold_, other->m_rewardgold_);
    std::swap(m_fightval_, other->m_fightval_);
    m_equiptypeid_.Swap(&other->m_equiptypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreanData_descriptor_;
  metadata.reflection = GM_AreanData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RankReturn::kMPagecountFieldNumber;
const int GM_RankReturn::kMAreandataFieldNumber;
#endif  // !_MSC_VER

GM_RankReturn::GM_RankReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RankReturn::InitAsDefaultInstance() {
}

GM_RankReturn::GM_RankReturn(const GM_RankReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RankReturn::SharedCtor() {
  _cached_size_ = 0;
  m_pagecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RankReturn::~GM_RankReturn() {
  SharedDtor();
}

void GM_RankReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RankReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RankReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RankReturn_descriptor_;
}

const GM_RankReturn& GM_RankReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spiritArean_2etxt();
  return *default_instance_;
}

GM_RankReturn* GM_RankReturn::default_instance_ = NULL;

GM_RankReturn* GM_RankReturn::New() const {
  return new GM_RankReturn;
}

void GM_RankReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_pagecount_ = 0;
  }
  m_areandata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RankReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_pagecount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pagecount_)));
          set_has_m_pagecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_areandata;
        break;
      }

      // repeated .GM_AreanData m_areandata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_areandata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_areandata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_areandata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RankReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_pagecount = 1;
  if (has_m_pagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_pagecount(), output);
  }

  // repeated .GM_AreanData m_areandata = 2;
  for (int i = 0; i < this->m_areandata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_areandata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RankReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_pagecount = 1;
  if (has_m_pagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_pagecount(), target);
  }

  // repeated .GM_AreanData m_areandata = 2;
  for (int i = 0; i < this->m_areandata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_areandata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RankReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_pagecount = 1;
    if (has_m_pagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pagecount());
    }

  }
  // repeated .GM_AreanData m_areandata = 2;
  total_size += 1 * this->m_areandata_size();
  for (int i = 0; i < this->m_areandata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_areandata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RankReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RankReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RankReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RankReturn::MergeFrom(const GM_RankReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_areandata_.MergeFrom(from.m_areandata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pagecount()) {
      set_m_pagecount(from.m_pagecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RankReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RankReturn::CopyFrom(const GM_RankReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RankReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_areandata_size(); i++) {
    if (!this->m_areandata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_RankReturn::Swap(GM_RankReturn* other) {
  if (other != this) {
    std::swap(m_pagecount_, other->m_pagecount_);
    m_areandata_.Swap(&other->m_areandata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RankReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RankReturn_descriptor_;
  metadata.reflection = GM_RankReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AreanShop::kMRoleidFieldNumber;
const int GM_AreanShop::kMShopdataFieldNumber;
#endif  // !_MSC_VER

GM_AreanShop::GM_AreanShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreanShop::InitAsDefaultInstance() {
}

GM_AreanShop::GM_AreanShop(const GM_AreanShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreanShop::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreanShop::~GM_AreanShop() {
  SharedDtor();
}

void GM_AreanShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AreanShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreanShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreanShop_descriptor_;
}

const GM_AreanShop& GM_AreanShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spiritArean_2etxt();
  return *default_instance_;
}

GM_AreanShop* GM_AreanShop::default_instance_ = NULL;

GM_AreanShop* GM_AreanShop::New() const {
  return new GM_AreanShop;
}

void GM_AreanShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_roleid_ = 0;
  }
  m_shopdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreanShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_shopdata;
        break;
      }

      // repeated .GM_ShopData m_shopdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_shopdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_shopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_shopdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreanShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roleid(), output);
  }

  // repeated .GM_ShopData m_shopdata = 2;
  for (int i = 0; i < this->m_shopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_shopdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreanShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_roleid = 1;
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roleid(), target);
  }

  // repeated .GM_ShopData m_shopdata = 2;
  for (int i = 0; i < this->m_shopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_shopdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreanShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_roleid = 1;
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roleid());
    }

  }
  // repeated .GM_ShopData m_shopdata = 2;
  total_size += 1 * this->m_shopdata_size();
  for (int i = 0; i < this->m_shopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_shopdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreanShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreanShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreanShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreanShop::MergeFrom(const GM_AreanShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_shopdata_.MergeFrom(from.m_shopdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreanShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreanShop::CopyFrom(const GM_AreanShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreanShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_shopdata_size(); i++) {
    if (!this->m_shopdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AreanShop::Swap(GM_AreanShop* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    m_shopdata_.Swap(&other->m_shopdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreanShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreanShop_descriptor_;
  metadata.reflection = GM_AreanShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_ShopData::kMObjectidFieldNumber;
const int GM_ShopData::kMShowtypeFieldNumber;
const int GM_ShopData::kMBuycountFieldNumber;
const int GM_ShopData::kMExchangeidFieldNumber;
const int GM_ShopData::kMExchangenumFieldNumber;
#endif  // !_MSC_VER

GM_ShopData::GM_ShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_ShopData::InitAsDefaultInstance() {
}

GM_ShopData::GM_ShopData(const GM_ShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_ShopData::SharedCtor() {
  _cached_size_ = 0;
  m_objectid_ = 0;
  m_showtype_ = 0;
  m_buycount_ = 0;
  m_exchangeid_ = 0;
  m_exchangenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_ShopData::~GM_ShopData() {
  SharedDtor();
}

void GM_ShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_ShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_ShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_ShopData_descriptor_;
}

const GM_ShopData& GM_ShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spiritArean_2etxt();
  return *default_instance_;
}

GM_ShopData* GM_ShopData::default_instance_ = NULL;

GM_ShopData* GM_ShopData::New() const {
  return new GM_ShopData;
}

void GM_ShopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objectid_ = 0;
    m_showtype_ = 0;
    m_buycount_ = 0;
    m_exchangeid_ = 0;
    m_exchangenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_ShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objectid_)));
          set_has_m_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_showtype;
        break;
      }

      // optional int32 m_showtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showtype_)));
          set_has_m_showtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_buycount;
        break;
      }

      // optional int32 m_buycount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buycount_)));
          set_has_m_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_exchangeid;
        break;
      }

      // optional int32 m_exchangeid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exchangeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exchangeid_)));
          set_has_m_exchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_exchangenum;
        break;
      }

      // optional int32 m_exchangenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exchangenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exchangenum_)));
          set_has_m_exchangenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_ShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objectid(), output);
  }

  // optional int32 m_showtype = 2;
  if (has_m_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_showtype(), output);
  }

  // optional int32 m_buycount = 3;
  if (has_m_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_buycount(), output);
  }

  // optional int32 m_exchangeid = 4;
  if (has_m_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_exchangeid(), output);
  }

  // optional int32 m_exchangenum = 5;
  if (has_m_exchangenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_exchangenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_ShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objectid = 1;
  if (has_m_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objectid(), target);
  }

  // optional int32 m_showtype = 2;
  if (has_m_showtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_showtype(), target);
  }

  // optional int32 m_buycount = 3;
  if (has_m_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_buycount(), target);
  }

  // optional int32 m_exchangeid = 4;
  if (has_m_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_exchangeid(), target);
  }

  // optional int32 m_exchangenum = 5;
  if (has_m_exchangenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_exchangenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_ShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objectid = 1;
    if (has_m_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objectid());
    }

    // optional int32 m_showtype = 2;
    if (has_m_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showtype());
    }

    // optional int32 m_buycount = 3;
    if (has_m_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buycount());
    }

    // optional int32 m_exchangeid = 4;
    if (has_m_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exchangeid());
    }

    // optional int32 m_exchangenum = 5;
    if (has_m_exchangenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exchangenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_ShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_ShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_ShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_ShopData::MergeFrom(const GM_ShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objectid()) {
      set_m_objectid(from.m_objectid());
    }
    if (from.has_m_showtype()) {
      set_m_showtype(from.m_showtype());
    }
    if (from.has_m_buycount()) {
      set_m_buycount(from.m_buycount());
    }
    if (from.has_m_exchangeid()) {
      set_m_exchangeid(from.m_exchangeid());
    }
    if (from.has_m_exchangenum()) {
      set_m_exchangenum(from.m_exchangenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_ShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_ShopData::CopyFrom(const GM_ShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_ShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_ShopData::Swap(GM_ShopData* other) {
  if (other != this) {
    std::swap(m_objectid_, other->m_objectid_);
    std::swap(m_showtype_, other->m_showtype_);
    std::swap(m_buycount_, other->m_buycount_);
    std::swap(m_exchangeid_, other->m_exchangeid_);
    std::swap(m_exchangenum_, other->m_exchangenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_ShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_ShopData_descriptor_;
  metadata.reflection = GM_ShopData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
