// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fish.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Fish.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_CREATEROOM_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CREATEROOM_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_CREATEROOM_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_CREATEROOM_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINROOM_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINROOM_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINROOM_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINROOM_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINCOPY_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_LOGINCOPY_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FishData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FishData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_RoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_RoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AreaAllinfoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreaAllinfoReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_AreaAllinfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_AreaAllinfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_All_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_All_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_IsKilled_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_IsKilled_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Killer_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Killer_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Kill_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Kill_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_leaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_leaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_leaveReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_leaveReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_RoleAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_RoleAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_Gun_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_Gun_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_Gun_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_Gun_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* SM_Fish_Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SM_Fish_Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FishMoney_return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FishMoney_return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FishGun_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FishGun_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_Gun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_Gun_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_FishGun_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_FishGun_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_attack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_attack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_RoleAttack_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_RoleAttack_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_Kill_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_Kill_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_power_set_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_power_set_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Fish_power_set_rturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Fish_power_set_rturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Fish_2etxt() {
  protobuf_AddDesc_Fish_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Fish.txt");
  GOOGLE_CHECK(file != NULL);
  GM_CREATEROOM_Return_descriptor_ = file->message_type(0);
  static const int GM_CREATEROOM_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Return, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Return, areaid_),
  };
  GM_CREATEROOM_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CREATEROOM_Return_descriptor_,
      GM_CREATEROOM_Return::default_instance_,
      GM_CREATEROOM_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CREATEROOM_Return));
  GM_CREATEROOM_Request_descriptor_ = file->message_type(1);
  static const int GM_CREATEROOM_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Request, areaid_),
  };
  GM_CREATEROOM_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_CREATEROOM_Request_descriptor_,
      GM_CREATEROOM_Request::default_instance_,
      GM_CREATEROOM_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_CREATEROOM_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_CREATEROOM_Request));
  GM_LOGINROOM_Return_descriptor_ = file->message_type(2);
  static const int GM_LOGINROOM_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Return, id_),
  };
  GM_LOGINROOM_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINROOM_Return_descriptor_,
      GM_LOGINROOM_Return::default_instance_,
      GM_LOGINROOM_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINROOM_Return));
  GM_LOGINROOM_Request_descriptor_ = file->message_type(3);
  static const int GM_LOGINROOM_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Request, areaid_),
  };
  GM_LOGINROOM_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINROOM_Request_descriptor_,
      GM_LOGINROOM_Request::default_instance_,
      GM_LOGINROOM_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINROOM_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINROOM_Request));
  GM_LOGINCOPY_Request_descriptor_ = file->message_type(4);
  static const int GM_LOGINCOPY_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Request, areaid_),
  };
  GM_LOGINCOPY_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINCOPY_Request_descriptor_,
      GM_LOGINCOPY_Request::default_instance_,
      GM_LOGINCOPY_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINCOPY_Request));
  GM_LOGINCOPY_Return_descriptor_ = file->message_type(5);
  static const int GM_LOGINCOPY_Return_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Return, result_),
  };
  GM_LOGINCOPY_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_LOGINCOPY_Return_descriptor_,
      GM_LOGINCOPY_Return::default_instance_,
      GM_LOGINCOPY_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_LOGINCOPY_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_LOGINCOPY_Return));
  GM_FishData_descriptor_ = file->message_type(6);
  static const int GM_FishData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishData, place_),
  };
  GM_FishData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FishData_descriptor_,
      GM_FishData::default_instance_,
      GM_FishData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FishData));
  GM_RoomData_descriptor_ = file->message_type(7);
  static const int GM_RoomData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoomData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoomData, ownid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoomData, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoomData, m_fishman_),
  };
  GM_RoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_RoomData_descriptor_,
      GM_RoomData::default_instance_,
      GM_RoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_RoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_RoomData));
  GM_AreaAllinfoReturn_descriptor_ = file->message_type(8);
  static const int GM_AreaAllinfoReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoReturn, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoReturn, m_data_),
  };
  GM_AreaAllinfoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreaAllinfoReturn_descriptor_,
      GM_AreaAllinfoReturn::default_instance_,
      GM_AreaAllinfoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreaAllinfoReturn));
  GM_AreaAllinfoRequest_descriptor_ = file->message_type(9);
  static const int GM_AreaAllinfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoRequest, areaid_),
  };
  GM_AreaAllinfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_AreaAllinfoRequest_descriptor_,
      GM_AreaAllinfoRequest::default_instance_,
      GM_AreaAllinfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_AreaAllinfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_AreaAllinfoRequest));
  GM_Fish_All_request_descriptor_ = file->message_type(10);
  static const int GM_Fish_All_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_All_request, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_All_request, id_),
  };
  GM_Fish_All_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_All_request_descriptor_,
      GM_Fish_All_request::default_instance_,
      GM_Fish_All_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_All_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_All_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_All_request));
  GM_IsKilled_info_descriptor_ = file->message_type(11);
  static const int GM_IsKilled_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_IsKilled_info, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_IsKilled_info, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_IsKilled_info, monclassification_),
  };
  GM_IsKilled_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_IsKilled_info_descriptor_,
      GM_IsKilled_info::default_instance_,
      GM_IsKilled_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_IsKilled_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_IsKilled_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_IsKilled_info));
  GM_Killer_info_descriptor_ = file->message_type(12);
  static const int GM_Killer_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Killer_info, roleid_),
  };
  GM_Killer_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Killer_info_descriptor_,
      GM_Killer_info::default_instance_,
      GM_Killer_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Killer_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Killer_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Killer_info));
  GM_Kill_Return_descriptor_ = file->message_type(13);
  static const int GM_Kill_Return_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, m_iskiller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, m_killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, m_is_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, data_),
  };
  GM_Kill_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Kill_Return_descriptor_,
      GM_Kill_Return::default_instance_,
      GM_Kill_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Kill_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Kill_Return));
  GM_leaveRequest_descriptor_ = file->message_type(14);
  static const int GM_leaveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveRequest, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveRequest, roomid_),
  };
  GM_leaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_leaveRequest_descriptor_,
      GM_leaveRequest::default_instance_,
      GM_leaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_leaveRequest));
  GM_leaveReturn_descriptor_ = file->message_type(15);
  static const int GM_leaveReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveReturn, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveReturn, roleid_),
  };
  GM_leaveReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_leaveReturn_descriptor_,
      GM_leaveReturn::default_instance_,
      GM_leaveReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_leaveReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_leaveReturn));
  GM_Fish_RoleAttack_descriptor_ = file->message_type(16);
  static const int GM_Fish_RoleAttack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, guntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, gunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, iscan_),
  };
  GM_Fish_RoleAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_RoleAttack_descriptor_,
      GM_Fish_RoleAttack::default_instance_,
      GM_Fish_RoleAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_RoleAttack));
  GM_Fish_Gun_request_descriptor_ = file->message_type(17);
  static const int GM_Fish_Gun_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_request, gunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_request, gunrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_request, buy_),
  };
  GM_Fish_Gun_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_Gun_request_descriptor_,
      GM_Fish_Gun_request::default_instance_,
      GM_Fish_Gun_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_Gun_request));
  GM_Fish_Gun_return_descriptor_ = file->message_type(18);
  static const int GM_Fish_Gun_return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_return, gunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_return, gunrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_return, roleid_),
  };
  GM_Fish_Gun_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_Gun_return_descriptor_,
      GM_Fish_Gun_return::default_instance_,
      GM_Fish_Gun_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_Gun_return));
  SM_Fish_Object_descriptor_ = file->message_type(19);
  static const int SM_Fish_Object_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Object, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Object, num_),
  };
  SM_Fish_Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SM_Fish_Object_descriptor_,
      SM_Fish_Object::default_instance_,
      SM_Fish_Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SM_Fish_Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SM_Fish_Object));
  GM_FishMoney_return_descriptor_ = file->message_type(20);
  static const int GM_FishMoney_return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishMoney_return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishMoney_return, money_),
  };
  GM_FishMoney_return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FishMoney_return_descriptor_,
      GM_FishMoney_return::default_instance_,
      GM_FishMoney_return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishMoney_return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishMoney_return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FishMoney_return));
  GM_FishGun_Request_descriptor_ = file->message_type(21);
  static const int GM_FishGun_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Request, roleid_),
  };
  GM_FishGun_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FishGun_Request_descriptor_,
      GM_FishGun_Request::default_instance_,
      GM_FishGun_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FishGun_Request));
  GM_Fish_Gun_descriptor_ = file->message_type(22);
  static const int GM_Fish_Gun_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun, gunid_),
  };
  GM_Fish_Gun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_Gun_descriptor_,
      GM_Fish_Gun::default_instance_,
      GM_Fish_Gun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Gun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_Gun));
  GM_FishGun_Return_descriptor_ = file->message_type(23);
  static const int GM_FishGun_Return_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, selfgunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, selfgunrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, guntate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, data_),
  };
  GM_FishGun_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_FishGun_Return_descriptor_,
      GM_FishGun_Return::default_instance_,
      GM_FishGun_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_FishGun_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_FishGun_Return));
  GM_Fish_attack_descriptor_ = file->message_type(24);
  static const int GM_Fish_attack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_attack, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_attack, fishid_),
  };
  GM_Fish_attack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_attack_descriptor_,
      GM_Fish_attack::default_instance_,
      GM_Fish_attack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_attack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_attack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_attack));
  GM_Fish_RoleAttack_request_descriptor_ = file->message_type(25);
  static const int GM_Fish_RoleAttack_request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, guntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, iscan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, firetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, firelast_),
  };
  GM_Fish_RoleAttack_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_RoleAttack_request_descriptor_,
      GM_Fish_RoleAttack_request::default_instance_,
      GM_Fish_RoleAttack_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_RoleAttack_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_RoleAttack_request));
  GM_Fish_Kill_Return_descriptor_ = file->message_type(26);
  static const int GM_Fish_Kill_Return_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, m_killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, m_deadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, m_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, data_),
  };
  GM_Fish_Kill_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_Kill_Return_descriptor_,
      GM_Fish_Kill_Return::default_instance_,
      GM_Fish_Kill_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_Kill_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_Kill_Return));
  GM_Fish_power_set_request_descriptor_ = file->message_type(27);
  static const int GM_Fish_power_set_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_power_set_request, power_),
  };
  GM_Fish_power_set_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_power_set_request_descriptor_,
      GM_Fish_power_set_request::default_instance_,
      GM_Fish_power_set_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_power_set_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_power_set_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_power_set_request));
  GM_Fish_power_set_rturn_descriptor_ = file->message_type(28);
  static const int GM_Fish_power_set_rturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_power_set_rturn, errorid_),
  };
  GM_Fish_power_set_rturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Fish_power_set_rturn_descriptor_,
      GM_Fish_power_set_rturn::default_instance_,
      GM_Fish_power_set_rturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_power_set_rturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Fish_power_set_rturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Fish_power_set_rturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Fish_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CREATEROOM_Return_descriptor_, &GM_CREATEROOM_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_CREATEROOM_Request_descriptor_, &GM_CREATEROOM_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINROOM_Return_descriptor_, &GM_LOGINROOM_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINROOM_Request_descriptor_, &GM_LOGINROOM_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINCOPY_Request_descriptor_, &GM_LOGINCOPY_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_LOGINCOPY_Return_descriptor_, &GM_LOGINCOPY_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FishData_descriptor_, &GM_FishData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_RoomData_descriptor_, &GM_RoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreaAllinfoReturn_descriptor_, &GM_AreaAllinfoReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_AreaAllinfoRequest_descriptor_, &GM_AreaAllinfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_All_request_descriptor_, &GM_Fish_All_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_IsKilled_info_descriptor_, &GM_IsKilled_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Killer_info_descriptor_, &GM_Killer_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Kill_Return_descriptor_, &GM_Kill_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_leaveRequest_descriptor_, &GM_leaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_leaveReturn_descriptor_, &GM_leaveReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_RoleAttack_descriptor_, &GM_Fish_RoleAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_Gun_request_descriptor_, &GM_Fish_Gun_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_Gun_return_descriptor_, &GM_Fish_Gun_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SM_Fish_Object_descriptor_, &SM_Fish_Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FishMoney_return_descriptor_, &GM_FishMoney_return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FishGun_Request_descriptor_, &GM_FishGun_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_Gun_descriptor_, &GM_Fish_Gun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_FishGun_Return_descriptor_, &GM_FishGun_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_attack_descriptor_, &GM_Fish_attack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_RoleAttack_request_descriptor_, &GM_Fish_RoleAttack_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_Kill_Return_descriptor_, &GM_Fish_Kill_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_power_set_request_descriptor_, &GM_Fish_power_set_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Fish_power_set_rturn_descriptor_, &GM_Fish_power_set_rturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Fish_2etxt() {
  delete GM_CREATEROOM_Return::default_instance_;
  delete GM_CREATEROOM_Return_reflection_;
  delete GM_CREATEROOM_Request::default_instance_;
  delete GM_CREATEROOM_Request_reflection_;
  delete GM_LOGINROOM_Return::default_instance_;
  delete GM_LOGINROOM_Return_reflection_;
  delete GM_LOGINROOM_Request::default_instance_;
  delete GM_LOGINROOM_Request_reflection_;
  delete GM_LOGINCOPY_Request::default_instance_;
  delete GM_LOGINCOPY_Request_reflection_;
  delete GM_LOGINCOPY_Return::default_instance_;
  delete GM_LOGINCOPY_Return_reflection_;
  delete GM_FishData::default_instance_;
  delete GM_FishData_reflection_;
  delete GM_RoomData::default_instance_;
  delete GM_RoomData_reflection_;
  delete GM_AreaAllinfoReturn::default_instance_;
  delete GM_AreaAllinfoReturn_reflection_;
  delete GM_AreaAllinfoRequest::default_instance_;
  delete GM_AreaAllinfoRequest_reflection_;
  delete GM_Fish_All_request::default_instance_;
  delete GM_Fish_All_request_reflection_;
  delete GM_IsKilled_info::default_instance_;
  delete GM_IsKilled_info_reflection_;
  delete GM_Killer_info::default_instance_;
  delete GM_Killer_info_reflection_;
  delete GM_Kill_Return::default_instance_;
  delete GM_Kill_Return_reflection_;
  delete GM_leaveRequest::default_instance_;
  delete GM_leaveRequest_reflection_;
  delete GM_leaveReturn::default_instance_;
  delete GM_leaveReturn_reflection_;
  delete GM_Fish_RoleAttack::default_instance_;
  delete GM_Fish_RoleAttack_reflection_;
  delete GM_Fish_Gun_request::default_instance_;
  delete GM_Fish_Gun_request_reflection_;
  delete GM_Fish_Gun_return::default_instance_;
  delete GM_Fish_Gun_return_reflection_;
  delete SM_Fish_Object::default_instance_;
  delete SM_Fish_Object_reflection_;
  delete GM_FishMoney_return::default_instance_;
  delete GM_FishMoney_return_reflection_;
  delete GM_FishGun_Request::default_instance_;
  delete GM_FishGun_Request_reflection_;
  delete GM_Fish_Gun::default_instance_;
  delete GM_Fish_Gun_reflection_;
  delete GM_FishGun_Return::default_instance_;
  delete GM_FishGun_Return_reflection_;
  delete GM_Fish_attack::default_instance_;
  delete GM_Fish_attack_reflection_;
  delete GM_Fish_RoleAttack_request::default_instance_;
  delete GM_Fish_RoleAttack_request_reflection_;
  delete GM_Fish_Kill_Return::default_instance_;
  delete GM_Fish_Kill_Return_reflection_;
  delete GM_Fish_power_set_request::default_instance_;
  delete GM_Fish_power_set_request_reflection_;
  delete GM_Fish_power_set_rturn::default_instance_;
  delete GM_Fish_power_set_rturn_reflection_;
}

void protobuf_AddDesc_Fish_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010Fish.txt\"B\n\024GM_CREATEROOM_Return\022\016\n\006re"
    "sult\030\001 \002(\005\022\n\n\002ID\030\002 \002(\005\022\016\n\006areaid\030\003 \002(\005\"\'"
    "\n\025GM_CREATEROOM_Request\022\016\n\006areaid\030\001 \002(\005\""
    "3\n\023GM_LOGINROOM_Return\022\020\n\010m_result\030\001 \002(\005"
    "\022\n\n\002ID\030\002 \002(\005\"2\n\024GM_LOGINROOM_Request\022\n\n\002"
    "ID\030\001 \002(\005\022\016\n\006areaid\030\002 \002(\005\"2\n\024GM_LOGINCOPY"
    "_Request\022\n\n\002ID\030\001 \002(\005\022\016\n\006areaid\030\002 \002(\005\"%\n\023"
    "GM_LOGINCOPY_Return\022\016\n\006result\030\001 \002(\005\"<\n\013G"
    "M_FishData\022\020\n\010playerid\030\001 \002(\005\022\014\n\004name\030\002 \001"
    "(\t\022\r\n\005place\030\003 \001(\005\"X\n\013GM_RoomData\022\n\n\002ID\030\001"
    " \002(\005\022\r\n\005ownid\030\002 \001(\005\022\r\n\005place\030\003 \001(\005\022\037\n\tm_"
    "fishman\030\004 \003(\0132\014.GM_FishData\"D\n\024GM_AreaAl"
    "linfoReturn\022\016\n\006areaid\030\001 \002(\005\022\034\n\006m_data\030\002 "
    "\003(\0132\014.GM_RoomData\"\'\n\025GM_AreaAllinfoReque"
    "st\022\016\n\006areaid\030\001 \002(\005\"1\n\023GM_Fish_All_reques"
    "t\022\016\n\006areaid\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\"P\n\020GM_IsKi"
    "lled_info\022\016\n\006roleid\030\001 \002(\005\022\021\n\tmonsterid\030\002"
    " \001(\005\022\031\n\021monclassification\030\003 \001(\005\" \n\016GM_Ki"
    "ller_info\022\016\n\006roleid\030\001 \002(\005\"t\n\016GM_Kill_Ret"
    "urn\022\022\n\nm_iskiller\030\001 \002(\005\022\020\n\010m_killer\030\002 \002("
    "\005\022\014\n\004m_is\030\003 \002(\005\022\017\n\007m_state\030\004 \001(\005\022\035\n\004data"
    "\030\005 \003(\0132\017.SM_Fish_Object\"1\n\017GM_leaveReque"
    "st\022\016\n\006areaid\030\001 \002(\005\022\016\n\006roomid\030\002 \002(\005\"1\n\016GM"
    "_leaveReturn\022\017\n\007errorid\030\001 \002(\005\022\016\n\006roleid\030"
    "\002 \001(\005\"}\n\022GM_Fish_RoleAttack\022\016\n\006roleid\030\001 "
    "\002(\005\022\014\n\004posX\030\002 \001(\002\022\014\n\004posZ\030\003 \001(\002\022\014\n\004time\030"
    "\004 \001(\005\022\017\n\007guntype\030\005 \001(\005\022\r\n\005gunid\030\006 \001(\005\022\r\n"
    "\005iscan\030\007 \001(\005\"B\n\023GM_Fish_Gun_request\022\r\n\005g"
    "unid\030\001 \002(\005\022\017\n\007gunrate\030\002 \001(\005\022\013\n\003buy\030\003 \001(\005"
    "\"U\n\022GM_Fish_Gun_return\022\017\n\007errorid\030\001 \002(\005\022"
    "\r\n\005gunid\030\002 \001(\005\022\017\n\007gunrate\030\003 \001(\005\022\016\n\006rolei"
    "d\030\004 \001(\005\"/\n\016SM_Fish_Object\022\020\n\010objectid\030\001 "
    "\002(\005\022\013\n\003num\030\002 \001(\005\"4\n\023GM_FishMoney_return\022"
    "\016\n\006roleid\030\001 \002(\005\022\r\n\005money\030\002 \001(\005\"$\n\022GM_Fis"
    "hGun_Request\022\016\n\006roleid\030\001 \002(\005\"\034\n\013GM_Fish_"
    "Gun\022\r\n\005gunid\030\001 \002(\005\"\207\001\n\021GM_FishGun_Return"
    "\022\021\n\tselfgunid\030\001 \002(\005\022\023\n\013selfgunrate\030\002 \001(\005"
    "\022\017\n\007guntate\030\003 \001(\005\022\016\n\006roleid\030\004 \001(\005\022\r\n\005pow"
    "er\030\005 \001(\005\022\032\n\004data\030\006 \003(\0132\014.GM_Fish_Gun\"0\n\016"
    "GM_Fish_attack\022\016\n\006roleid\030\001 \002(\005\022\016\n\006fishid"
    "\030\002 \003(\005\"~\n\032GM_Fish_RoleAttack_request\022\016\n\006"
    "roleid\030\001 \002(\005\022\014\n\004time\030\002 \001(\005\022\017\n\007guntype\030\003 "
    "\001(\005\022\r\n\005iscan\030\004 \001(\005\022\020\n\010firetime\030\005 \001(\005\022\020\n\010"
    "firelast\030\006 \001(\005\"z\n\023GM_Fish_Kill_Return\022\020\n"
    "\010m_killer\030\001 \002(\005\022\020\n\010m_deadid\030\002 \003(\005\022\017\n\007err"
    "orid\030\003 \001(\005\022\017\n\007m_state\030\004 \001(\005\022\035\n\004data\030\005 \003("
    "\0132\017.SM_Fish_Object\"*\n\031GM_Fish_power_set_"
    "request\022\r\n\005power\030\001 \002(\005\"*\n\027GM_Fish_power_"
    "set_rturn\022\017\n\007errorid\030\001 \002(\005", 1946);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Fish.txt", &protobuf_RegisterTypes);
  GM_CREATEROOM_Return::default_instance_ = new GM_CREATEROOM_Return();
  GM_CREATEROOM_Request::default_instance_ = new GM_CREATEROOM_Request();
  GM_LOGINROOM_Return::default_instance_ = new GM_LOGINROOM_Return();
  GM_LOGINROOM_Request::default_instance_ = new GM_LOGINROOM_Request();
  GM_LOGINCOPY_Request::default_instance_ = new GM_LOGINCOPY_Request();
  GM_LOGINCOPY_Return::default_instance_ = new GM_LOGINCOPY_Return();
  GM_FishData::default_instance_ = new GM_FishData();
  GM_RoomData::default_instance_ = new GM_RoomData();
  GM_AreaAllinfoReturn::default_instance_ = new GM_AreaAllinfoReturn();
  GM_AreaAllinfoRequest::default_instance_ = new GM_AreaAllinfoRequest();
  GM_Fish_All_request::default_instance_ = new GM_Fish_All_request();
  GM_IsKilled_info::default_instance_ = new GM_IsKilled_info();
  GM_Killer_info::default_instance_ = new GM_Killer_info();
  GM_Kill_Return::default_instance_ = new GM_Kill_Return();
  GM_leaveRequest::default_instance_ = new GM_leaveRequest();
  GM_leaveReturn::default_instance_ = new GM_leaveReturn();
  GM_Fish_RoleAttack::default_instance_ = new GM_Fish_RoleAttack();
  GM_Fish_Gun_request::default_instance_ = new GM_Fish_Gun_request();
  GM_Fish_Gun_return::default_instance_ = new GM_Fish_Gun_return();
  SM_Fish_Object::default_instance_ = new SM_Fish_Object();
  GM_FishMoney_return::default_instance_ = new GM_FishMoney_return();
  GM_FishGun_Request::default_instance_ = new GM_FishGun_Request();
  GM_Fish_Gun::default_instance_ = new GM_Fish_Gun();
  GM_FishGun_Return::default_instance_ = new GM_FishGun_Return();
  GM_Fish_attack::default_instance_ = new GM_Fish_attack();
  GM_Fish_RoleAttack_request::default_instance_ = new GM_Fish_RoleAttack_request();
  GM_Fish_Kill_Return::default_instance_ = new GM_Fish_Kill_Return();
  GM_Fish_power_set_request::default_instance_ = new GM_Fish_power_set_request();
  GM_Fish_power_set_rturn::default_instance_ = new GM_Fish_power_set_rturn();
  GM_CREATEROOM_Return::default_instance_->InitAsDefaultInstance();
  GM_CREATEROOM_Request::default_instance_->InitAsDefaultInstance();
  GM_LOGINROOM_Return::default_instance_->InitAsDefaultInstance();
  GM_LOGINROOM_Request::default_instance_->InitAsDefaultInstance();
  GM_LOGINCOPY_Request::default_instance_->InitAsDefaultInstance();
  GM_LOGINCOPY_Return::default_instance_->InitAsDefaultInstance();
  GM_FishData::default_instance_->InitAsDefaultInstance();
  GM_RoomData::default_instance_->InitAsDefaultInstance();
  GM_AreaAllinfoReturn::default_instance_->InitAsDefaultInstance();
  GM_AreaAllinfoRequest::default_instance_->InitAsDefaultInstance();
  GM_Fish_All_request::default_instance_->InitAsDefaultInstance();
  GM_IsKilled_info::default_instance_->InitAsDefaultInstance();
  GM_Killer_info::default_instance_->InitAsDefaultInstance();
  GM_Kill_Return::default_instance_->InitAsDefaultInstance();
  GM_leaveRequest::default_instance_->InitAsDefaultInstance();
  GM_leaveReturn::default_instance_->InitAsDefaultInstance();
  GM_Fish_RoleAttack::default_instance_->InitAsDefaultInstance();
  GM_Fish_Gun_request::default_instance_->InitAsDefaultInstance();
  GM_Fish_Gun_return::default_instance_->InitAsDefaultInstance();
  SM_Fish_Object::default_instance_->InitAsDefaultInstance();
  GM_FishMoney_return::default_instance_->InitAsDefaultInstance();
  GM_FishGun_Request::default_instance_->InitAsDefaultInstance();
  GM_Fish_Gun::default_instance_->InitAsDefaultInstance();
  GM_FishGun_Return::default_instance_->InitAsDefaultInstance();
  GM_Fish_attack::default_instance_->InitAsDefaultInstance();
  GM_Fish_RoleAttack_request::default_instance_->InitAsDefaultInstance();
  GM_Fish_Kill_Return::default_instance_->InitAsDefaultInstance();
  GM_Fish_power_set_request::default_instance_->InitAsDefaultInstance();
  GM_Fish_power_set_rturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Fish_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Fish_2etxt {
  StaticDescriptorInitializer_Fish_2etxt() {
    protobuf_AddDesc_Fish_2etxt();
  }
} static_descriptor_initializer_Fish_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_CREATEROOM_Return::kResultFieldNumber;
const int GM_CREATEROOM_Return::kIDFieldNumber;
const int GM_CREATEROOM_Return::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_CREATEROOM_Return::GM_CREATEROOM_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CREATEROOM_Return::InitAsDefaultInstance() {
}

GM_CREATEROOM_Return::GM_CREATEROOM_Return(const GM_CREATEROOM_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CREATEROOM_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CREATEROOM_Return::~GM_CREATEROOM_Return() {
  SharedDtor();
}

void GM_CREATEROOM_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CREATEROOM_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CREATEROOM_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CREATEROOM_Return_descriptor_;
}

const GM_CREATEROOM_Return& GM_CREATEROOM_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_CREATEROOM_Return* GM_CREATEROOM_Return::default_instance_ = NULL;

GM_CREATEROOM_Return* GM_CREATEROOM_Return::New() const {
  return new GM_CREATEROOM_Return;
}

void GM_CREATEROOM_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CREATEROOM_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaid;
        break;
      }

      // required int32 areaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CREATEROOM_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 areaid = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CREATEROOM_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 areaid = 3;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CREATEROOM_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 areaid = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CREATEROOM_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CREATEROOM_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CREATEROOM_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CREATEROOM_Return::MergeFrom(const GM_CREATEROOM_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CREATEROOM_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CREATEROOM_Return::CopyFrom(const GM_CREATEROOM_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CREATEROOM_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_CREATEROOM_Return::Swap(GM_CREATEROOM_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CREATEROOM_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CREATEROOM_Return_descriptor_;
  metadata.reflection = GM_CREATEROOM_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_CREATEROOM_Request::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_CREATEROOM_Request::GM_CREATEROOM_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_CREATEROOM_Request::InitAsDefaultInstance() {
}

GM_CREATEROOM_Request::GM_CREATEROOM_Request(const GM_CREATEROOM_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_CREATEROOM_Request::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_CREATEROOM_Request::~GM_CREATEROOM_Request() {
  SharedDtor();
}

void GM_CREATEROOM_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_CREATEROOM_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_CREATEROOM_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_CREATEROOM_Request_descriptor_;
}

const GM_CREATEROOM_Request& GM_CREATEROOM_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_CREATEROOM_Request* GM_CREATEROOM_Request::default_instance_ = NULL;

GM_CREATEROOM_Request* GM_CREATEROOM_Request::New() const {
  return new GM_CREATEROOM_Request;
}

void GM_CREATEROOM_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_CREATEROOM_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_CREATEROOM_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_CREATEROOM_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_CREATEROOM_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_CREATEROOM_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_CREATEROOM_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_CREATEROOM_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_CREATEROOM_Request::MergeFrom(const GM_CREATEROOM_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_CREATEROOM_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_CREATEROOM_Request::CopyFrom(const GM_CREATEROOM_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_CREATEROOM_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_CREATEROOM_Request::Swap(GM_CREATEROOM_Request* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_CREATEROOM_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_CREATEROOM_Request_descriptor_;
  metadata.reflection = GM_CREATEROOM_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINROOM_Return::kMResultFieldNumber;
const int GM_LOGINROOM_Return::kIDFieldNumber;
#endif  // !_MSC_VER

GM_LOGINROOM_Return::GM_LOGINROOM_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINROOM_Return::InitAsDefaultInstance() {
}

GM_LOGINROOM_Return::GM_LOGINROOM_Return(const GM_LOGINROOM_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINROOM_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINROOM_Return::~GM_LOGINROOM_Return() {
  SharedDtor();
}

void GM_LOGINROOM_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINROOM_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINROOM_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINROOM_Return_descriptor_;
}

const GM_LOGINROOM_Return& GM_LOGINROOM_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_LOGINROOM_Return* GM_LOGINROOM_Return::default_instance_ = NULL;

GM_LOGINROOM_Return* GM_LOGINROOM_Return::New() const {
  return new GM_LOGINROOM_Return;
}

void GM_LOGINROOM_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINROOM_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINROOM_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // required int32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINROOM_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // required int32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINROOM_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // required int32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINROOM_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINROOM_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINROOM_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINROOM_Return::MergeFrom(const GM_LOGINROOM_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINROOM_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINROOM_Return::CopyFrom(const GM_LOGINROOM_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINROOM_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LOGINROOM_Return::Swap(GM_LOGINROOM_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINROOM_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINROOM_Return_descriptor_;
  metadata.reflection = GM_LOGINROOM_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINROOM_Request::kIDFieldNumber;
const int GM_LOGINROOM_Request::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_LOGINROOM_Request::GM_LOGINROOM_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINROOM_Request::InitAsDefaultInstance() {
}

GM_LOGINROOM_Request::GM_LOGINROOM_Request(const GM_LOGINROOM_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINROOM_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINROOM_Request::~GM_LOGINROOM_Request() {
  SharedDtor();
}

void GM_LOGINROOM_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINROOM_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINROOM_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINROOM_Request_descriptor_;
}

const GM_LOGINROOM_Request& GM_LOGINROOM_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_LOGINROOM_Request* GM_LOGINROOM_Request::default_instance_ = NULL;

GM_LOGINROOM_Request* GM_LOGINROOM_Request::New() const {
  return new GM_LOGINROOM_Request;
}

void GM_LOGINROOM_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINROOM_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaid;
        break;
      }

      // required int32 areaid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINROOM_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINROOM_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINROOM_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 areaid = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINROOM_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINROOM_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINROOM_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINROOM_Request::MergeFrom(const GM_LOGINROOM_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINROOM_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINROOM_Request::CopyFrom(const GM_LOGINROOM_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINROOM_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LOGINROOM_Request::Swap(GM_LOGINROOM_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINROOM_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINROOM_Request_descriptor_;
  metadata.reflection = GM_LOGINROOM_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINCOPY_Request::kIDFieldNumber;
const int GM_LOGINCOPY_Request::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_LOGINCOPY_Request::GM_LOGINCOPY_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINCOPY_Request::InitAsDefaultInstance() {
}

GM_LOGINCOPY_Request::GM_LOGINCOPY_Request(const GM_LOGINCOPY_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINCOPY_Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINCOPY_Request::~GM_LOGINCOPY_Request() {
  SharedDtor();
}

void GM_LOGINCOPY_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINCOPY_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINCOPY_Request_descriptor_;
}

const GM_LOGINCOPY_Request& GM_LOGINCOPY_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_LOGINCOPY_Request* GM_LOGINCOPY_Request::default_instance_ = NULL;

GM_LOGINCOPY_Request* GM_LOGINCOPY_Request::New() const {
  return new GM_LOGINCOPY_Request;
}

void GM_LOGINCOPY_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINCOPY_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaid;
        break;
      }

      // required int32 areaid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINCOPY_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINCOPY_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 areaid = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINCOPY_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 areaid = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINCOPY_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINCOPY_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINCOPY_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINCOPY_Request::MergeFrom(const GM_LOGINCOPY_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINCOPY_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINCOPY_Request::CopyFrom(const GM_LOGINCOPY_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINCOPY_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_LOGINCOPY_Request::Swap(GM_LOGINCOPY_Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINCOPY_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINCOPY_Request_descriptor_;
  metadata.reflection = GM_LOGINCOPY_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_LOGINCOPY_Return::kResultFieldNumber;
#endif  // !_MSC_VER

GM_LOGINCOPY_Return::GM_LOGINCOPY_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_LOGINCOPY_Return::InitAsDefaultInstance() {
}

GM_LOGINCOPY_Return::GM_LOGINCOPY_Return(const GM_LOGINCOPY_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_LOGINCOPY_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_LOGINCOPY_Return::~GM_LOGINCOPY_Return() {
  SharedDtor();
}

void GM_LOGINCOPY_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_LOGINCOPY_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_LOGINCOPY_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_LOGINCOPY_Return_descriptor_;
}

const GM_LOGINCOPY_Return& GM_LOGINCOPY_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_LOGINCOPY_Return* GM_LOGINCOPY_Return::default_instance_ = NULL;

GM_LOGINCOPY_Return* GM_LOGINCOPY_Return::New() const {
  return new GM_LOGINCOPY_Return;
}

void GM_LOGINCOPY_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_LOGINCOPY_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_LOGINCOPY_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_LOGINCOPY_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_LOGINCOPY_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_LOGINCOPY_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_LOGINCOPY_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_LOGINCOPY_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_LOGINCOPY_Return::MergeFrom(const GM_LOGINCOPY_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_LOGINCOPY_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_LOGINCOPY_Return::CopyFrom(const GM_LOGINCOPY_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_LOGINCOPY_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_LOGINCOPY_Return::Swap(GM_LOGINCOPY_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_LOGINCOPY_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_LOGINCOPY_Return_descriptor_;
  metadata.reflection = GM_LOGINCOPY_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FishData::kPlayeridFieldNumber;
const int GM_FishData::kNameFieldNumber;
const int GM_FishData::kPlaceFieldNumber;
#endif  // !_MSC_VER

GM_FishData::GM_FishData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FishData::InitAsDefaultInstance() {
}

GM_FishData::GM_FishData(const GM_FishData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FishData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  place_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FishData::~GM_FishData() {
  SharedDtor();
}

void GM_FishData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GM_FishData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FishData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FishData_descriptor_;
}

const GM_FishData& GM_FishData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_FishData* GM_FishData::default_instance_ = NULL;

GM_FishData* GM_FishData::New() const {
  return new GM_FishData;
}

void GM_FishData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    place_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_place;
        break;
      }

      // optional int32 place = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 place = 3;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->place(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FishData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 place = 3;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->place(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FishData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 place = 3;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FishData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FishData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FishData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FishData::MergeFrom(const GM_FishData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FishData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FishData::CopyFrom(const GM_FishData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FishData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FishData::Swap(GM_FishData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(place_, other->place_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FishData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FishData_descriptor_;
  metadata.reflection = GM_FishData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_RoomData::kIDFieldNumber;
const int GM_RoomData::kOwnidFieldNumber;
const int GM_RoomData::kPlaceFieldNumber;
const int GM_RoomData::kMFishmanFieldNumber;
#endif  // !_MSC_VER

GM_RoomData::GM_RoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_RoomData::InitAsDefaultInstance() {
}

GM_RoomData::GM_RoomData(const GM_RoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_RoomData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ownid_ = 0;
  place_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_RoomData::~GM_RoomData() {
  SharedDtor();
}

void GM_RoomData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_RoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_RoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_RoomData_descriptor_;
}

const GM_RoomData& GM_RoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_RoomData* GM_RoomData::default_instance_ = NULL;

GM_RoomData* GM_RoomData::New() const {
  return new GM_RoomData;
}

void GM_RoomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ownid_ = 0;
    place_ = 0;
  }
  m_fishman_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_RoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownid;
        break;
      }

      // optional int32 ownid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownid_)));
          set_has_ownid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_place;
        break;
      }

      // optional int32 place = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_fishman;
        break;
      }

      // repeated .GM_FishData m_fishman = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fishman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_fishman()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_fishman;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_RoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 ownid = 2;
  if (has_ownid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ownid(), output);
  }

  // optional int32 place = 3;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->place(), output);
  }

  // repeated .GM_FishData m_fishman = 4;
  for (int i = 0; i < this->m_fishman_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_fishman(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_RoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 ownid = 2;
  if (has_ownid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ownid(), target);
  }

  // optional int32 place = 3;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->place(), target);
  }

  // repeated .GM_FishData m_fishman = 4;
  for (int i = 0; i < this->m_fishman_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_fishman(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_RoomData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 ownid = 2;
    if (has_ownid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownid());
    }

    // optional int32 place = 3;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place());
    }

  }
  // repeated .GM_FishData m_fishman = 4;
  total_size += 1 * this->m_fishman_size();
  for (int i = 0; i < this->m_fishman_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_fishman(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_RoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_RoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_RoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_RoomData::MergeFrom(const GM_RoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_fishman_.MergeFrom(from.m_fishman_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ownid()) {
      set_ownid(from.ownid());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_RoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_RoomData::CopyFrom(const GM_RoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_RoomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_fishman_size(); i++) {
    if (!this->m_fishman(i).IsInitialized()) return false;
  }
  return true;
}

void GM_RoomData::Swap(GM_RoomData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ownid_, other->ownid_);
    std::swap(place_, other->place_);
    m_fishman_.Swap(&other->m_fishman_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_RoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_RoomData_descriptor_;
  metadata.reflection = GM_RoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AreaAllinfoReturn::kAreaidFieldNumber;
const int GM_AreaAllinfoReturn::kMDataFieldNumber;
#endif  // !_MSC_VER

GM_AreaAllinfoReturn::GM_AreaAllinfoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreaAllinfoReturn::InitAsDefaultInstance() {
}

GM_AreaAllinfoReturn::GM_AreaAllinfoReturn(const GM_AreaAllinfoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreaAllinfoReturn::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreaAllinfoReturn::~GM_AreaAllinfoReturn() {
  SharedDtor();
}

void GM_AreaAllinfoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AreaAllinfoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreaAllinfoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreaAllinfoReturn_descriptor_;
}

const GM_AreaAllinfoReturn& GM_AreaAllinfoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_AreaAllinfoReturn* GM_AreaAllinfoReturn::default_instance_ = NULL;

GM_AreaAllinfoReturn* GM_AreaAllinfoReturn::New() const {
  return new GM_AreaAllinfoReturn;
}

void GM_AreaAllinfoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
  }
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreaAllinfoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // repeated .GM_RoomData m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreaAllinfoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // repeated .GM_RoomData m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreaAllinfoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // repeated .GM_RoomData m_data = 2;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreaAllinfoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  // repeated .GM_RoomData m_data = 2;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreaAllinfoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreaAllinfoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreaAllinfoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreaAllinfoReturn::MergeFrom(const GM_AreaAllinfoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreaAllinfoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreaAllinfoReturn::CopyFrom(const GM_AreaAllinfoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreaAllinfoReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_AreaAllinfoReturn::Swap(GM_AreaAllinfoReturn* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreaAllinfoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreaAllinfoReturn_descriptor_;
  metadata.reflection = GM_AreaAllinfoReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_AreaAllinfoRequest::kAreaidFieldNumber;
#endif  // !_MSC_VER

GM_AreaAllinfoRequest::GM_AreaAllinfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_AreaAllinfoRequest::InitAsDefaultInstance() {
}

GM_AreaAllinfoRequest::GM_AreaAllinfoRequest(const GM_AreaAllinfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_AreaAllinfoRequest::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_AreaAllinfoRequest::~GM_AreaAllinfoRequest() {
  SharedDtor();
}

void GM_AreaAllinfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_AreaAllinfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_AreaAllinfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_AreaAllinfoRequest_descriptor_;
}

const GM_AreaAllinfoRequest& GM_AreaAllinfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_AreaAllinfoRequest* GM_AreaAllinfoRequest::default_instance_ = NULL;

GM_AreaAllinfoRequest* GM_AreaAllinfoRequest::New() const {
  return new GM_AreaAllinfoRequest;
}

void GM_AreaAllinfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_AreaAllinfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_AreaAllinfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_AreaAllinfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_AreaAllinfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_AreaAllinfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_AreaAllinfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_AreaAllinfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_AreaAllinfoRequest::MergeFrom(const GM_AreaAllinfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_AreaAllinfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_AreaAllinfoRequest::CopyFrom(const GM_AreaAllinfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_AreaAllinfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_AreaAllinfoRequest::Swap(GM_AreaAllinfoRequest* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_AreaAllinfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_AreaAllinfoRequest_descriptor_;
  metadata.reflection = GM_AreaAllinfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_All_request::kAreaidFieldNumber;
const int GM_Fish_All_request::kIdFieldNumber;
#endif  // !_MSC_VER

GM_Fish_All_request::GM_Fish_All_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_All_request::InitAsDefaultInstance() {
}

GM_Fish_All_request::GM_Fish_All_request(const GM_Fish_All_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_All_request::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_All_request::~GM_Fish_All_request() {
  SharedDtor();
}

void GM_Fish_All_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_All_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_All_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_All_request_descriptor_;
}

const GM_Fish_All_request& GM_Fish_All_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_All_request* GM_Fish_All_request::default_instance_ = NULL;

GM_Fish_All_request* GM_Fish_All_request::New() const {
  return new GM_Fish_All_request;
}

void GM_Fish_All_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_All_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_All_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_All_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_All_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_All_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_All_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_All_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_All_request::MergeFrom(const GM_Fish_All_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_All_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_All_request::CopyFrom(const GM_Fish_All_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_All_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_All_request::Swap(GM_Fish_All_request* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_All_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_All_request_descriptor_;
  metadata.reflection = GM_Fish_All_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_IsKilled_info::kRoleidFieldNumber;
const int GM_IsKilled_info::kMonsteridFieldNumber;
const int GM_IsKilled_info::kMonclassificationFieldNumber;
#endif  // !_MSC_VER

GM_IsKilled_info::GM_IsKilled_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_IsKilled_info::InitAsDefaultInstance() {
}

GM_IsKilled_info::GM_IsKilled_info(const GM_IsKilled_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_IsKilled_info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  monsterid_ = 0;
  monclassification_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_IsKilled_info::~GM_IsKilled_info() {
  SharedDtor();
}

void GM_IsKilled_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_IsKilled_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_IsKilled_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_IsKilled_info_descriptor_;
}

const GM_IsKilled_info& GM_IsKilled_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_IsKilled_info* GM_IsKilled_info::default_instance_ = NULL;

GM_IsKilled_info* GM_IsKilled_info::New() const {
  return new GM_IsKilled_info;
}

void GM_IsKilled_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    monsterid_ = 0;
    monclassification_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_IsKilled_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterid;
        break;
      }

      // optional int32 monsterid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monclassification;
        break;
      }

      // optional int32 monclassification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monclassification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monclassification_)));
          set_has_monclassification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_IsKilled_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 monsterid = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monsterid(), output);
  }

  // optional int32 monclassification = 3;
  if (has_monclassification()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monclassification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_IsKilled_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 monsterid = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monsterid(), target);
  }

  // optional int32 monclassification = 3;
  if (has_monclassification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monclassification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_IsKilled_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 monsterid = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 monclassification = 3;
    if (has_monclassification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monclassification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_IsKilled_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_IsKilled_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_IsKilled_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_IsKilled_info::MergeFrom(const GM_IsKilled_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monclassification()) {
      set_monclassification(from.monclassification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_IsKilled_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_IsKilled_info::CopyFrom(const GM_IsKilled_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_IsKilled_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_IsKilled_info::Swap(GM_IsKilled_info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(monclassification_, other->monclassification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_IsKilled_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_IsKilled_info_descriptor_;
  metadata.reflection = GM_IsKilled_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Killer_info::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Killer_info::GM_Killer_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Killer_info::InitAsDefaultInstance() {
}

GM_Killer_info::GM_Killer_info(const GM_Killer_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Killer_info::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Killer_info::~GM_Killer_info() {
  SharedDtor();
}

void GM_Killer_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Killer_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Killer_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Killer_info_descriptor_;
}

const GM_Killer_info& GM_Killer_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Killer_info* GM_Killer_info::default_instance_ = NULL;

GM_Killer_info* GM_Killer_info::New() const {
  return new GM_Killer_info;
}

void GM_Killer_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Killer_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Killer_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Killer_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Killer_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Killer_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Killer_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Killer_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Killer_info::MergeFrom(const GM_Killer_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Killer_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Killer_info::CopyFrom(const GM_Killer_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Killer_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Killer_info::Swap(GM_Killer_info* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Killer_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Killer_info_descriptor_;
  metadata.reflection = GM_Killer_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Kill_Return::kMIskillerFieldNumber;
const int GM_Kill_Return::kMKillerFieldNumber;
const int GM_Kill_Return::kMIsFieldNumber;
const int GM_Kill_Return::kMStateFieldNumber;
const int GM_Kill_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Kill_Return::GM_Kill_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Kill_Return::InitAsDefaultInstance() {
}

GM_Kill_Return::GM_Kill_Return(const GM_Kill_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Kill_Return::SharedCtor() {
  _cached_size_ = 0;
  m_iskiller_ = 0;
  m_killer_ = 0;
  m_is_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Kill_Return::~GM_Kill_Return() {
  SharedDtor();
}

void GM_Kill_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Kill_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Kill_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Kill_Return_descriptor_;
}

const GM_Kill_Return& GM_Kill_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Kill_Return* GM_Kill_Return::default_instance_ = NULL;

GM_Kill_Return* GM_Kill_Return::New() const {
  return new GM_Kill_Return;
}

void GM_Kill_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_iskiller_ = 0;
    m_killer_ = 0;
    m_is_ = 0;
    m_state_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Kill_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_iskiller = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iskiller_)));
          set_has_m_iskiller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_killer;
        break;
      }

      // required int32 m_killer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killer_)));
          set_has_m_killer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_is;
        break;
      }

      // required int32 m_is = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_is:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_is_)));
          set_has_m_is();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .SM_Fish_Object data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Kill_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_iskiller = 1;
  if (has_m_iskiller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_iskiller(), output);
  }

  // required int32 m_killer = 2;
  if (has_m_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_killer(), output);
  }

  // required int32 m_is = 3;
  if (has_m_is()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_is(), output);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_state(), output);
  }

  // repeated .SM_Fish_Object data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Kill_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_iskiller = 1;
  if (has_m_iskiller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_iskiller(), target);
  }

  // required int32 m_killer = 2;
  if (has_m_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_killer(), target);
  }

  // required int32 m_is = 3;
  if (has_m_is()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_is(), target);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_state(), target);
  }

  // repeated .SM_Fish_Object data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Kill_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_iskiller = 1;
    if (has_m_iskiller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iskiller());
    }

    // required int32 m_killer = 2;
    if (has_m_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killer());
    }

    // required int32 m_is = 3;
    if (has_m_is()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_is());
    }

    // optional int32 m_state = 4;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  // repeated .SM_Fish_Object data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Kill_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Kill_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Kill_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Kill_Return::MergeFrom(const GM_Kill_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_iskiller()) {
      set_m_iskiller(from.m_iskiller());
    }
    if (from.has_m_killer()) {
      set_m_killer(from.m_killer());
    }
    if (from.has_m_is()) {
      set_m_is(from.m_is());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Kill_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Kill_Return::CopyFrom(const GM_Kill_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Kill_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Kill_Return::Swap(GM_Kill_Return* other) {
  if (other != this) {
    std::swap(m_iskiller_, other->m_iskiller_);
    std::swap(m_killer_, other->m_killer_);
    std::swap(m_is_, other->m_is_);
    std::swap(m_state_, other->m_state_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Kill_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Kill_Return_descriptor_;
  metadata.reflection = GM_Kill_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_leaveRequest::kAreaidFieldNumber;
const int GM_leaveRequest::kRoomidFieldNumber;
#endif  // !_MSC_VER

GM_leaveRequest::GM_leaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_leaveRequest::InitAsDefaultInstance() {
}

GM_leaveRequest::GM_leaveRequest(const GM_leaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_leaveRequest::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_leaveRequest::~GM_leaveRequest() {
  SharedDtor();
}

void GM_leaveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_leaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_leaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_leaveRequest_descriptor_;
}

const GM_leaveRequest& GM_leaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_leaveRequest* GM_leaveRequest::default_instance_ = NULL;

GM_leaveRequest* GM_leaveRequest::New() const {
  return new GM_leaveRequest;
}

void GM_leaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    areaid_ = 0;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_leaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_leaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // required int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_leaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 areaid = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // required int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_leaveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 areaid = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // required int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_leaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_leaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_leaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_leaveRequest::MergeFrom(const GM_leaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_leaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_leaveRequest::CopyFrom(const GM_leaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_leaveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_leaveRequest::Swap(GM_leaveRequest* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_leaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_leaveRequest_descriptor_;
  metadata.reflection = GM_leaveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_leaveReturn::kErroridFieldNumber;
const int GM_leaveReturn::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_leaveReturn::GM_leaveReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_leaveReturn::InitAsDefaultInstance() {
}

GM_leaveReturn::GM_leaveReturn(const GM_leaveReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_leaveReturn::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_leaveReturn::~GM_leaveReturn() {
  SharedDtor();
}

void GM_leaveReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_leaveReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_leaveReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_leaveReturn_descriptor_;
}

const GM_leaveReturn& GM_leaveReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_leaveReturn* GM_leaveReturn::default_instance_ = NULL;

GM_leaveReturn* GM_leaveReturn::New() const {
  return new GM_leaveReturn;
}

void GM_leaveReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_leaveReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_leaveReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_leaveReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_leaveReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_leaveReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_leaveReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_leaveReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_leaveReturn::MergeFrom(const GM_leaveReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_leaveReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_leaveReturn::CopyFrom(const GM_leaveReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_leaveReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_leaveReturn::Swap(GM_leaveReturn* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_leaveReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_leaveReturn_descriptor_;
  metadata.reflection = GM_leaveReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_RoleAttack::kRoleidFieldNumber;
const int GM_Fish_RoleAttack::kPosXFieldNumber;
const int GM_Fish_RoleAttack::kPosZFieldNumber;
const int GM_Fish_RoleAttack::kTimeFieldNumber;
const int GM_Fish_RoleAttack::kGuntypeFieldNumber;
const int GM_Fish_RoleAttack::kGunidFieldNumber;
const int GM_Fish_RoleAttack::kIscanFieldNumber;
#endif  // !_MSC_VER

GM_Fish_RoleAttack::GM_Fish_RoleAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_RoleAttack::InitAsDefaultInstance() {
}

GM_Fish_RoleAttack::GM_Fish_RoleAttack(const GM_Fish_RoleAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_RoleAttack::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  posx_ = 0;
  posz_ = 0;
  time_ = 0;
  guntype_ = 0;
  gunid_ = 0;
  iscan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_RoleAttack::~GM_Fish_RoleAttack() {
  SharedDtor();
}

void GM_Fish_RoleAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_RoleAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_RoleAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_RoleAttack_descriptor_;
}

const GM_Fish_RoleAttack& GM_Fish_RoleAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_RoleAttack* GM_Fish_RoleAttack::default_instance_ = NULL;

GM_Fish_RoleAttack* GM_Fish_RoleAttack::New() const {
  return new GM_Fish_RoleAttack;
}

void GM_Fish_RoleAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    posx_ = 0;
    posz_ = 0;
    time_ = 0;
    guntype_ = 0;
    gunid_ = 0;
    iscan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_RoleAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posX;
        break;
      }

      // optional float posX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posZ;
        break;
      }

      // optional float posZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guntype;
        break;
      }

      // optional int32 guntype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guntype_)));
          set_has_guntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gunid;
        break;
      }

      // optional int32 gunid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iscan;
        break;
      }

      // optional int32 iscan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscan_)));
          set_has_iscan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_RoleAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional float posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }

  // optional float posZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posz(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 guntype = 5;
  if (has_guntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guntype(), output);
  }

  // optional int32 gunid = 6;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gunid(), output);
  }

  // optional int32 iscan = 7;
  if (has_iscan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iscan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_RoleAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional float posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posx(), target);
  }

  // optional float posZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posz(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 guntype = 5;
  if (has_guntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guntype(), target);
  }

  // optional int32 gunid = 6;
  if (has_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gunid(), target);
  }

  // optional int32 iscan = 7;
  if (has_iscan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iscan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_RoleAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional float posX = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // optional float posZ = 3;
    if (has_posz()) {
      total_size += 1 + 4;
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 guntype = 5;
    if (has_guntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guntype());
    }

    // optional int32 gunid = 6;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

    // optional int32 iscan = 7;
    if (has_iscan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_RoleAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_RoleAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_RoleAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_RoleAttack::MergeFrom(const GM_Fish_RoleAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_guntype()) {
      set_guntype(from.guntype());
    }
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
    if (from.has_iscan()) {
      set_iscan(from.iscan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_RoleAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_RoleAttack::CopyFrom(const GM_Fish_RoleAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_RoleAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_RoleAttack::Swap(GM_Fish_RoleAttack* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(time_, other->time_);
    std::swap(guntype_, other->guntype_);
    std::swap(gunid_, other->gunid_);
    std::swap(iscan_, other->iscan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_RoleAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_RoleAttack_descriptor_;
  metadata.reflection = GM_Fish_RoleAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_Gun_request::kGunidFieldNumber;
const int GM_Fish_Gun_request::kGunrateFieldNumber;
const int GM_Fish_Gun_request::kBuyFieldNumber;
#endif  // !_MSC_VER

GM_Fish_Gun_request::GM_Fish_Gun_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_Gun_request::InitAsDefaultInstance() {
}

GM_Fish_Gun_request::GM_Fish_Gun_request(const GM_Fish_Gun_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_Gun_request::SharedCtor() {
  _cached_size_ = 0;
  gunid_ = 0;
  gunrate_ = 0;
  buy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_Gun_request::~GM_Fish_Gun_request() {
  SharedDtor();
}

void GM_Fish_Gun_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_Gun_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_Gun_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_Gun_request_descriptor_;
}

const GM_Fish_Gun_request& GM_Fish_Gun_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_Gun_request* GM_Fish_Gun_request::default_instance_ = NULL;

GM_Fish_Gun_request* GM_Fish_Gun_request::New() const {
  return new GM_Fish_Gun_request;
}

void GM_Fish_Gun_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gunid_ = 0;
    gunrate_ = 0;
    buy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_Gun_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gunid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gunrate;
        break;
      }

      // optional int32 gunrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunrate_)));
          set_has_gunrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy;
        break;
      }

      // optional int32 buy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_)));
          set_has_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_Gun_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gunid = 1;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gunid(), output);
  }

  // optional int32 gunrate = 2;
  if (has_gunrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gunrate(), output);
  }

  // optional int32 buy = 3;
  if (has_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_Gun_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gunid = 1;
  if (has_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gunid(), target);
  }

  // optional int32 gunrate = 2;
  if (has_gunrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gunrate(), target);
  }

  // optional int32 buy = 3;
  if (has_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_Gun_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gunid = 1;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

    // optional int32 gunrate = 2;
    if (has_gunrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunrate());
    }

    // optional int32 buy = 3;
    if (has_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_Gun_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_Gun_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_Gun_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_Gun_request::MergeFrom(const GM_Fish_Gun_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
    if (from.has_gunrate()) {
      set_gunrate(from.gunrate());
    }
    if (from.has_buy()) {
      set_buy(from.buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_Gun_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_Gun_request::CopyFrom(const GM_Fish_Gun_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_Gun_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_Gun_request::Swap(GM_Fish_Gun_request* other) {
  if (other != this) {
    std::swap(gunid_, other->gunid_);
    std::swap(gunrate_, other->gunrate_);
    std::swap(buy_, other->buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_Gun_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_Gun_request_descriptor_;
  metadata.reflection = GM_Fish_Gun_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_Gun_return::kErroridFieldNumber;
const int GM_Fish_Gun_return::kGunidFieldNumber;
const int GM_Fish_Gun_return::kGunrateFieldNumber;
const int GM_Fish_Gun_return::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_Fish_Gun_return::GM_Fish_Gun_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_Gun_return::InitAsDefaultInstance() {
}

GM_Fish_Gun_return::GM_Fish_Gun_return(const GM_Fish_Gun_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_Gun_return::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  gunid_ = 0;
  gunrate_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_Gun_return::~GM_Fish_Gun_return() {
  SharedDtor();
}

void GM_Fish_Gun_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_Gun_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_Gun_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_Gun_return_descriptor_;
}

const GM_Fish_Gun_return& GM_Fish_Gun_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_Gun_return* GM_Fish_Gun_return::default_instance_ = NULL;

GM_Fish_Gun_return* GM_Fish_Gun_return::New() const {
  return new GM_Fish_Gun_return;
}

void GM_Fish_Gun_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    gunid_ = 0;
    gunrate_ = 0;
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_Gun_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gunid;
        break;
      }

      // optional int32 gunid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gunrate;
        break;
      }

      // optional int32 gunrate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunrate_)));
          set_has_gunrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_Gun_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  // optional int32 gunid = 2;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gunid(), output);
  }

  // optional int32 gunrate = 3;
  if (has_gunrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gunrate(), output);
  }

  // optional int32 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_Gun_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  // optional int32 gunid = 2;
  if (has_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gunid(), target);
  }

  // optional int32 gunrate = 3;
  if (has_gunrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gunrate(), target);
  }

  // optional int32 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_Gun_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 gunid = 2;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

    // optional int32 gunrate = 3;
    if (has_gunrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunrate());
    }

    // optional int32 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_Gun_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_Gun_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_Gun_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_Gun_return::MergeFrom(const GM_Fish_Gun_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
    if (from.has_gunrate()) {
      set_gunrate(from.gunrate());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_Gun_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_Gun_return::CopyFrom(const GM_Fish_Gun_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_Gun_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_Gun_return::Swap(GM_Fish_Gun_return* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(gunid_, other->gunid_);
    std::swap(gunrate_, other->gunrate_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_Gun_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_Gun_return_descriptor_;
  metadata.reflection = GM_Fish_Gun_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SM_Fish_Object::kObjectidFieldNumber;
const int SM_Fish_Object::kNumFieldNumber;
#endif  // !_MSC_VER

SM_Fish_Object::SM_Fish_Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SM_Fish_Object::InitAsDefaultInstance() {
}

SM_Fish_Object::SM_Fish_Object(const SM_Fish_Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SM_Fish_Object::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SM_Fish_Object::~SM_Fish_Object() {
  SharedDtor();
}

void SM_Fish_Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SM_Fish_Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SM_Fish_Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SM_Fish_Object_descriptor_;
}

const SM_Fish_Object& SM_Fish_Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

SM_Fish_Object* SM_Fish_Object::default_instance_ = NULL;

SM_Fish_Object* SM_Fish_Object::New() const {
  return new SM_Fish_Object;
}

void SM_Fish_Object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SM_Fish_Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SM_Fish_Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SM_Fish_Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SM_Fish_Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SM_Fish_Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SM_Fish_Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SM_Fish_Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SM_Fish_Object::MergeFrom(const SM_Fish_Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SM_Fish_Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SM_Fish_Object::CopyFrom(const SM_Fish_Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SM_Fish_Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SM_Fish_Object::Swap(SM_Fish_Object* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SM_Fish_Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SM_Fish_Object_descriptor_;
  metadata.reflection = SM_Fish_Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FishMoney_return::kRoleidFieldNumber;
const int GM_FishMoney_return::kMoneyFieldNumber;
#endif  // !_MSC_VER

GM_FishMoney_return::GM_FishMoney_return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FishMoney_return::InitAsDefaultInstance() {
}

GM_FishMoney_return::GM_FishMoney_return(const GM_FishMoney_return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FishMoney_return::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FishMoney_return::~GM_FishMoney_return() {
  SharedDtor();
}

void GM_FishMoney_return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FishMoney_return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FishMoney_return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FishMoney_return_descriptor_;
}

const GM_FishMoney_return& GM_FishMoney_return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_FishMoney_return* GM_FishMoney_return::default_instance_ = NULL;

GM_FishMoney_return* GM_FishMoney_return::New() const {
  return new GM_FishMoney_return;
}

void GM_FishMoney_return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FishMoney_return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FishMoney_return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FishMoney_return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FishMoney_return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FishMoney_return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FishMoney_return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FishMoney_return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FishMoney_return::MergeFrom(const GM_FishMoney_return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FishMoney_return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FishMoney_return::CopyFrom(const GM_FishMoney_return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FishMoney_return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FishMoney_return::Swap(GM_FishMoney_return* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FishMoney_return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FishMoney_return_descriptor_;
  metadata.reflection = GM_FishMoney_return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FishGun_Request::kRoleidFieldNumber;
#endif  // !_MSC_VER

GM_FishGun_Request::GM_FishGun_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FishGun_Request::InitAsDefaultInstance() {
}

GM_FishGun_Request::GM_FishGun_Request(const GM_FishGun_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FishGun_Request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FishGun_Request::~GM_FishGun_Request() {
  SharedDtor();
}

void GM_FishGun_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FishGun_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FishGun_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FishGun_Request_descriptor_;
}

const GM_FishGun_Request& GM_FishGun_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_FishGun_Request* GM_FishGun_Request::default_instance_ = NULL;

GM_FishGun_Request* GM_FishGun_Request::New() const {
  return new GM_FishGun_Request;
}

void GM_FishGun_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FishGun_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FishGun_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FishGun_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FishGun_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FishGun_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FishGun_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FishGun_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FishGun_Request::MergeFrom(const GM_FishGun_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FishGun_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FishGun_Request::CopyFrom(const GM_FishGun_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FishGun_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_FishGun_Request::Swap(GM_FishGun_Request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FishGun_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FishGun_Request_descriptor_;
  metadata.reflection = GM_FishGun_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_Gun::kGunidFieldNumber;
#endif  // !_MSC_VER

GM_Fish_Gun::GM_Fish_Gun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_Gun::InitAsDefaultInstance() {
}

GM_Fish_Gun::GM_Fish_Gun(const GM_Fish_Gun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_Gun::SharedCtor() {
  _cached_size_ = 0;
  gunid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_Gun::~GM_Fish_Gun() {
  SharedDtor();
}

void GM_Fish_Gun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_Gun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_Gun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_Gun_descriptor_;
}

const GM_Fish_Gun& GM_Fish_Gun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_Gun* GM_Fish_Gun::default_instance_ = NULL;

GM_Fish_Gun* GM_Fish_Gun::New() const {
  return new GM_Fish_Gun;
}

void GM_Fish_Gun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gunid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_Gun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gunid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_Gun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gunid = 1;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gunid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_Gun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gunid = 1;
  if (has_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gunid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_Gun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gunid = 1;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_Gun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_Gun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_Gun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_Gun::MergeFrom(const GM_Fish_Gun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_Gun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_Gun::CopyFrom(const GM_Fish_Gun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_Gun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_Gun::Swap(GM_Fish_Gun* other) {
  if (other != this) {
    std::swap(gunid_, other->gunid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_Gun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_Gun_descriptor_;
  metadata.reflection = GM_Fish_Gun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_FishGun_Return::kSelfgunidFieldNumber;
const int GM_FishGun_Return::kSelfgunrateFieldNumber;
const int GM_FishGun_Return::kGuntateFieldNumber;
const int GM_FishGun_Return::kRoleidFieldNumber;
const int GM_FishGun_Return::kPowerFieldNumber;
const int GM_FishGun_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_FishGun_Return::GM_FishGun_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_FishGun_Return::InitAsDefaultInstance() {
}

GM_FishGun_Return::GM_FishGun_Return(const GM_FishGun_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_FishGun_Return::SharedCtor() {
  _cached_size_ = 0;
  selfgunid_ = 0;
  selfgunrate_ = 0;
  guntate_ = 0;
  roleid_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_FishGun_Return::~GM_FishGun_Return() {
  SharedDtor();
}

void GM_FishGun_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_FishGun_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_FishGun_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_FishGun_Return_descriptor_;
}

const GM_FishGun_Return& GM_FishGun_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_FishGun_Return* GM_FishGun_Return::default_instance_ = NULL;

GM_FishGun_Return* GM_FishGun_Return::New() const {
  return new GM_FishGun_Return;
}

void GM_FishGun_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfgunid_ = 0;
    selfgunrate_ = 0;
    guntate_ = 0;
    roleid_ = 0;
    power_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_FishGun_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 selfgunid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfgunid_)));
          set_has_selfgunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selfgunrate;
        break;
      }

      // optional int32 selfgunrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfgunrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfgunrate_)));
          set_has_selfgunrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guntate;
        break;
      }

      // optional int32 guntate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guntate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guntate_)));
          set_has_guntate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleid;
        break;
      }

      // optional int32 roleid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .GM_Fish_Gun data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_FishGun_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 selfgunid = 1;
  if (has_selfgunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selfgunid(), output);
  }

  // optional int32 selfgunrate = 2;
  if (has_selfgunrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfgunrate(), output);
  }

  // optional int32 guntate = 3;
  if (has_guntate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guntate(), output);
  }

  // optional int32 roleid = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roleid(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // repeated .GM_Fish_Gun data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_FishGun_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 selfgunid = 1;
  if (has_selfgunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selfgunid(), target);
  }

  // optional int32 selfgunrate = 2;
  if (has_selfgunrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfgunrate(), target);
  }

  // optional int32 guntate = 3;
  if (has_guntate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guntate(), target);
  }

  // optional int32 roleid = 4;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roleid(), target);
  }

  // optional int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }

  // repeated .GM_Fish_Gun data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_FishGun_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 selfgunid = 1;
    if (has_selfgunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfgunid());
    }

    // optional int32 selfgunrate = 2;
    if (has_selfgunrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfgunrate());
    }

    // optional int32 guntate = 3;
    if (has_guntate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guntate());
    }

    // optional int32 roleid = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  // repeated .GM_Fish_Gun data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_FishGun_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_FishGun_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_FishGun_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_FishGun_Return::MergeFrom(const GM_FishGun_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfgunid()) {
      set_selfgunid(from.selfgunid());
    }
    if (from.has_selfgunrate()) {
      set_selfgunrate(from.selfgunrate());
    }
    if (from.has_guntate()) {
      set_guntate(from.guntate());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_FishGun_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_FishGun_Return::CopyFrom(const GM_FishGun_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_FishGun_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_FishGun_Return::Swap(GM_FishGun_Return* other) {
  if (other != this) {
    std::swap(selfgunid_, other->selfgunid_);
    std::swap(selfgunrate_, other->selfgunrate_);
    std::swap(guntate_, other->guntate_);
    std::swap(roleid_, other->roleid_);
    std::swap(power_, other->power_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_FishGun_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_FishGun_Return_descriptor_;
  metadata.reflection = GM_FishGun_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_attack::kRoleidFieldNumber;
const int GM_Fish_attack::kFishidFieldNumber;
#endif  // !_MSC_VER

GM_Fish_attack::GM_Fish_attack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_attack::InitAsDefaultInstance() {
}

GM_Fish_attack::GM_Fish_attack(const GM_Fish_attack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_attack::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_attack::~GM_Fish_attack() {
  SharedDtor();
}

void GM_Fish_attack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_attack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_attack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_attack_descriptor_;
}

const GM_Fish_attack& GM_Fish_attack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_attack* GM_Fish_attack::default_instance_ = NULL;

GM_Fish_attack* GM_Fish_attack::New() const {
  return new GM_Fish_attack;
}

void GM_Fish_attack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  fishid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_attack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishid;
        break;
      }

      // repeated int32 fishid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fishid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_attack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated int32 fishid = 2;
  for (int i = 0; i < this->fishid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fishid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_attack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated int32 fishid = 2;
  for (int i = 0; i < this->fishid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fishid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_attack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated int32 fishid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishid(i));
    }
    total_size += 1 * this->fishid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_attack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_attack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_attack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_attack::MergeFrom(const GM_Fish_attack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishid_.MergeFrom(from.fishid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_attack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_attack::CopyFrom(const GM_Fish_attack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_attack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_attack::Swap(GM_Fish_attack* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    fishid_.Swap(&other->fishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_attack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_attack_descriptor_;
  metadata.reflection = GM_Fish_attack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_RoleAttack_request::kRoleidFieldNumber;
const int GM_Fish_RoleAttack_request::kTimeFieldNumber;
const int GM_Fish_RoleAttack_request::kGuntypeFieldNumber;
const int GM_Fish_RoleAttack_request::kIscanFieldNumber;
const int GM_Fish_RoleAttack_request::kFiretimeFieldNumber;
const int GM_Fish_RoleAttack_request::kFirelastFieldNumber;
#endif  // !_MSC_VER

GM_Fish_RoleAttack_request::GM_Fish_RoleAttack_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_RoleAttack_request::InitAsDefaultInstance() {
}

GM_Fish_RoleAttack_request::GM_Fish_RoleAttack_request(const GM_Fish_RoleAttack_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_RoleAttack_request::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  time_ = 0;
  guntype_ = 0;
  iscan_ = 0;
  firetime_ = 0;
  firelast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_RoleAttack_request::~GM_Fish_RoleAttack_request() {
  SharedDtor();
}

void GM_Fish_RoleAttack_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_RoleAttack_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_RoleAttack_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_RoleAttack_request_descriptor_;
}

const GM_Fish_RoleAttack_request& GM_Fish_RoleAttack_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_RoleAttack_request* GM_Fish_RoleAttack_request::default_instance_ = NULL;

GM_Fish_RoleAttack_request* GM_Fish_RoleAttack_request::New() const {
  return new GM_Fish_RoleAttack_request;
}

void GM_Fish_RoleAttack_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    time_ = 0;
    guntype_ = 0;
    iscan_ = 0;
    firetime_ = 0;
    firelast_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_RoleAttack_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guntype;
        break;
      }

      // optional int32 guntype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guntype_)));
          set_has_guntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iscan;
        break;
      }

      // optional int32 iscan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscan_)));
          set_has_iscan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_firetime;
        break;
      }

      // optional int32 firetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firetime_)));
          set_has_firetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_firelast;
        break;
      }

      // optional int32 firelast = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firelast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firelast_)));
          set_has_firelast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_RoleAttack_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 guntype = 3;
  if (has_guntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guntype(), output);
  }

  // optional int32 iscan = 4;
  if (has_iscan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iscan(), output);
  }

  // optional int32 firetime = 5;
  if (has_firetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->firetime(), output);
  }

  // optional int32 firelast = 6;
  if (has_firelast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->firelast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_RoleAttack_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 guntype = 3;
  if (has_guntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guntype(), target);
  }

  // optional int32 iscan = 4;
  if (has_iscan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iscan(), target);
  }

  // optional int32 firetime = 5;
  if (has_firetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->firetime(), target);
  }

  // optional int32 firelast = 6;
  if (has_firelast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->firelast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_RoleAttack_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 guntype = 3;
    if (has_guntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guntype());
    }

    // optional int32 iscan = 4;
    if (has_iscan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscan());
    }

    // optional int32 firetime = 5;
    if (has_firetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firetime());
    }

    // optional int32 firelast = 6;
    if (has_firelast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firelast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_RoleAttack_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_RoleAttack_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_RoleAttack_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_RoleAttack_request::MergeFrom(const GM_Fish_RoleAttack_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_guntype()) {
      set_guntype(from.guntype());
    }
    if (from.has_iscan()) {
      set_iscan(from.iscan());
    }
    if (from.has_firetime()) {
      set_firetime(from.firetime());
    }
    if (from.has_firelast()) {
      set_firelast(from.firelast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_RoleAttack_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_RoleAttack_request::CopyFrom(const GM_Fish_RoleAttack_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_RoleAttack_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_RoleAttack_request::Swap(GM_Fish_RoleAttack_request* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(time_, other->time_);
    std::swap(guntype_, other->guntype_);
    std::swap(iscan_, other->iscan_);
    std::swap(firetime_, other->firetime_);
    std::swap(firelast_, other->firelast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_RoleAttack_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_RoleAttack_request_descriptor_;
  metadata.reflection = GM_Fish_RoleAttack_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_Kill_Return::kMKillerFieldNumber;
const int GM_Fish_Kill_Return::kMDeadidFieldNumber;
const int GM_Fish_Kill_Return::kErroridFieldNumber;
const int GM_Fish_Kill_Return::kMStateFieldNumber;
const int GM_Fish_Kill_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Fish_Kill_Return::GM_Fish_Kill_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_Kill_Return::InitAsDefaultInstance() {
}

GM_Fish_Kill_Return::GM_Fish_Kill_Return(const GM_Fish_Kill_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_Kill_Return::SharedCtor() {
  _cached_size_ = 0;
  m_killer_ = 0;
  errorid_ = 0;
  m_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_Kill_Return::~GM_Fish_Kill_Return() {
  SharedDtor();
}

void GM_Fish_Kill_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_Kill_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_Kill_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_Kill_Return_descriptor_;
}

const GM_Fish_Kill_Return& GM_Fish_Kill_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_Kill_Return* GM_Fish_Kill_Return::default_instance_ = NULL;

GM_Fish_Kill_Return* GM_Fish_Kill_Return::New() const {
  return new GM_Fish_Kill_Return;
}

void GM_Fish_Kill_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_killer_ = 0;
    errorid_ = 0;
    m_state_ = 0;
  }
  m_deadid_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_Kill_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_killer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killer_)));
          set_has_m_killer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_deadid;
        break;
      }

      // repeated int32 m_deadid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_deadid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_deadid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_deadid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_deadid;
        if (input->ExpectTag(24)) goto parse_errorid;
        break;
      }

      // optional int32 errorid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_state;
        break;
      }

      // optional int32 m_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_state_)));
          set_has_m_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .SM_Fish_Object data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_Kill_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_killer = 1;
  if (has_m_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_killer(), output);
  }

  // repeated int32 m_deadid = 2;
  for (int i = 0; i < this->m_deadid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_deadid(i), output);
  }

  // optional int32 errorid = 3;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorid(), output);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_state(), output);
  }

  // repeated .SM_Fish_Object data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_Kill_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_killer = 1;
  if (has_m_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_killer(), target);
  }

  // repeated int32 m_deadid = 2;
  for (int i = 0; i < this->m_deadid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_deadid(i), target);
  }

  // optional int32 errorid = 3;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorid(), target);
  }

  // optional int32 m_state = 4;
  if (has_m_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_state(), target);
  }

  // repeated .SM_Fish_Object data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_Kill_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_killer = 1;
    if (has_m_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killer());
    }

    // optional int32 errorid = 3;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

    // optional int32 m_state = 4;
    if (has_m_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_state());
    }

  }
  // repeated int32 m_deadid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_deadid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_deadid(i));
    }
    total_size += 1 * this->m_deadid_size() + data_size;
  }

  // repeated .SM_Fish_Object data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_Kill_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_Kill_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_Kill_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_Kill_Return::MergeFrom(const GM_Fish_Kill_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_deadid_.MergeFrom(from.m_deadid_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_killer()) {
      set_m_killer(from.m_killer());
    }
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_m_state()) {
      set_m_state(from.m_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_Kill_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_Kill_Return::CopyFrom(const GM_Fish_Kill_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_Kill_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Fish_Kill_Return::Swap(GM_Fish_Kill_Return* other) {
  if (other != this) {
    std::swap(m_killer_, other->m_killer_);
    m_deadid_.Swap(&other->m_deadid_);
    std::swap(errorid_, other->errorid_);
    std::swap(m_state_, other->m_state_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_Kill_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_Kill_Return_descriptor_;
  metadata.reflection = GM_Fish_Kill_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_power_set_request::kPowerFieldNumber;
#endif  // !_MSC_VER

GM_Fish_power_set_request::GM_Fish_power_set_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_power_set_request::InitAsDefaultInstance() {
}

GM_Fish_power_set_request::GM_Fish_power_set_request(const GM_Fish_power_set_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_power_set_request::SharedCtor() {
  _cached_size_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_power_set_request::~GM_Fish_power_set_request() {
  SharedDtor();
}

void GM_Fish_power_set_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_power_set_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_power_set_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_power_set_request_descriptor_;
}

const GM_Fish_power_set_request& GM_Fish_power_set_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_power_set_request* GM_Fish_power_set_request::default_instance_ = NULL;

GM_Fish_power_set_request* GM_Fish_power_set_request::New() const {
  return new GM_Fish_power_set_request;
}

void GM_Fish_power_set_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_power_set_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 power = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_power_set_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 power = 1;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_power_set_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 power = 1;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_power_set_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 power = 1;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_power_set_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_power_set_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_power_set_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_power_set_request::MergeFrom(const GM_Fish_power_set_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_power_set_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_power_set_request::CopyFrom(const GM_Fish_power_set_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_power_set_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_power_set_request::Swap(GM_Fish_power_set_request* other) {
  if (other != this) {
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_power_set_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_power_set_request_descriptor_;
  metadata.reflection = GM_Fish_power_set_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Fish_power_set_rturn::kErroridFieldNumber;
#endif  // !_MSC_VER

GM_Fish_power_set_rturn::GM_Fish_power_set_rturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Fish_power_set_rturn::InitAsDefaultInstance() {
}

GM_Fish_power_set_rturn::GM_Fish_power_set_rturn(const GM_Fish_power_set_rturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Fish_power_set_rturn::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Fish_power_set_rturn::~GM_Fish_power_set_rturn() {
  SharedDtor();
}

void GM_Fish_power_set_rturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Fish_power_set_rturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Fish_power_set_rturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Fish_power_set_rturn_descriptor_;
}

const GM_Fish_power_set_rturn& GM_Fish_power_set_rturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2etxt();
  return *default_instance_;
}

GM_Fish_power_set_rturn* GM_Fish_power_set_rturn::default_instance_ = NULL;

GM_Fish_power_set_rturn* GM_Fish_power_set_rturn::New() const {
  return new GM_Fish_power_set_rturn;
}

void GM_Fish_power_set_rturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Fish_power_set_rturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Fish_power_set_rturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Fish_power_set_rturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorid = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Fish_power_set_rturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorid = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Fish_power_set_rturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Fish_power_set_rturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Fish_power_set_rturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Fish_power_set_rturn::MergeFrom(const GM_Fish_power_set_rturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Fish_power_set_rturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Fish_power_set_rturn::CopyFrom(const GM_Fish_power_set_rturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Fish_power_set_rturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Fish_power_set_rturn::Swap(GM_Fish_power_set_rturn* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Fish_power_set_rturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Fish_power_set_rturn_descriptor_;
  metadata.reflection = GM_Fish_power_set_rturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
