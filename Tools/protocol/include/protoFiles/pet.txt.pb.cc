// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pet.txt.pb.h"
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GM_Pet_UI_Open_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_UI_Open_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_OnBattle_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_OnBattle_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_OnBattle_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_OnBattle_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_OnBattle_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_OnBattle_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Info_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Info_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Info_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Info_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Realize_Skill_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Realize_Skill_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Normal_Skill_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Normal_Skill_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Detail_Property_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Detail_Property_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Detail_Property_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Detail_Property_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Property_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Property_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Summon_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Summon_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Summon_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Summon_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Upgrade_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Upgrade_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Upgrade_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Upgrade_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Evolve_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Evolve_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Evolve_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Evolve_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Property_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Property_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Fate_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Fate_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Pet_Fate_Pet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Pet_Fate_Pet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_UI_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_UI_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_UI_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_UI_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Hole_Detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Hole_Detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Upgrade_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Upgrade_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Obtain_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Obtain_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Obtain_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Obtain_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_AddSwap_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_AddSwap_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_AddSwap_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_AddSwap_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Store_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Store_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Store_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Store_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Refine_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Refine_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Refine_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Refine_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Unlock_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Unlock_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Unlock_Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Unlock_Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Upgrade_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetEquip_Upgrade_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_Notify_FragmentChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_Notify_FragmentChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetSkillCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetSkillCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_PetSkillCountReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_PetSkillCountReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GM_EquipPetSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM_EquipPetSkillRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pet_2etxt() {
  protobuf_AddDesc_pet_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pet.txt");
  GOOGLE_CHECK(file != NULL);
  GM_Pet_UI_Open_Return_descriptor_ = file->message_type(0);
  static const int GM_Pet_UI_Open_Return_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_UI_Open_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_UI_Open_Return, m_petinfos_),
  };
  GM_Pet_UI_Open_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_UI_Open_Return_descriptor_,
      GM_Pet_UI_Open_Return::default_instance_,
      GM_Pet_UI_Open_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_UI_Open_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_UI_Open_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_UI_Open_Return));
  GM_Pet_info_descriptor_ = file->message_type(1);
  static const int GM_Pet_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_bhadsummon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_petlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_petevolvelvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_onbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, fightig_),
  };
  GM_Pet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_info_descriptor_,
      GM_Pet_info::default_instance_,
      GM_Pet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_info));
  GM_Pet_OnBattle_Request_descriptor_ = file->message_type(2);
  static const int GM_Pet_OnBattle_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Request, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Request, m_battlehole_),
  };
  GM_Pet_OnBattle_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_OnBattle_Request_descriptor_,
      GM_Pet_OnBattle_Request::default_instance_,
      GM_Pet_OnBattle_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_OnBattle_Request));
  GM_Pet_OnBattle_Return_descriptor_ = file->message_type(3);
  static const int GM_Pet_OnBattle_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Return, m_fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Return, m_datainfo_),
  };
  GM_Pet_OnBattle_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_OnBattle_Return_descriptor_,
      GM_Pet_OnBattle_Return::default_instance_,
      GM_Pet_OnBattle_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_OnBattle_Return));
  GM_Pet_OnBattle_Info_descriptor_ = file->message_type(4);
  static const int GM_Pet_OnBattle_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Info, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Info, m_battlehole_),
  };
  GM_Pet_OnBattle_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_OnBattle_Info_descriptor_,
      GM_Pet_OnBattle_Info::default_instance_,
      GM_Pet_OnBattle_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_OnBattle_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_OnBattle_Info));
  GM_Pet_Info_Request_descriptor_ = file->message_type(5);
  static const int GM_Pet_Info_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Request, m_petid_),
  };
  GM_Pet_Info_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Info_Request_descriptor_,
      GM_Pet_Info_Request::default_instance_,
      GM_Pet_Info_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Info_Request));
  GM_Pet_Info_Return_descriptor_ = file->message_type(6);
  static const int GM_Pet_Info_Return_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_petlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_petevolvelvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_petskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, m_petrealskills_),
  };
  GM_Pet_Info_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Info_Return_descriptor_,
      GM_Pet_Info_Return::default_instance_,
      GM_Pet_Info_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Info_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Info_Return));
  GM_Pet_Realize_Skill_Info_descriptor_ = file->message_type(7);
  static const int GM_Pet_Realize_Skill_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Realize_Skill_Info, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Realize_Skill_Info, m_skilllvl_),
  };
  GM_Pet_Realize_Skill_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Realize_Skill_Info_descriptor_,
      GM_Pet_Realize_Skill_Info::default_instance_,
      GM_Pet_Realize_Skill_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Realize_Skill_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Realize_Skill_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Realize_Skill_Info));
  GM_Pet_Normal_Skill_Info_descriptor_ = file->message_type(8);
  static const int GM_Pet_Normal_Skill_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Normal_Skill_Info, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Normal_Skill_Info, m_skilllvl_),
  };
  GM_Pet_Normal_Skill_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Normal_Skill_Info_descriptor_,
      GM_Pet_Normal_Skill_Info::default_instance_,
      GM_Pet_Normal_Skill_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Normal_Skill_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Normal_Skill_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Normal_Skill_Info));
  GM_Pet_Detail_Property_Request_descriptor_ = file->message_type(9);
  static const int GM_Pet_Detail_Property_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Request, m_petid_),
  };
  GM_Pet_Detail_Property_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Detail_Property_Request_descriptor_,
      GM_Pet_Detail_Property_Request::default_instance_,
      GM_Pet_Detail_Property_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Detail_Property_Request));
  GM_Pet_Detail_Property_Return_descriptor_ = file->message_type(10);
  static const int GM_Pet_Detail_Property_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Return, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Return, data_),
  };
  GM_Pet_Detail_Property_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Detail_Property_Return_descriptor_,
      GM_Pet_Detail_Property_Return::default_instance_,
      GM_Pet_Detail_Property_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Detail_Property_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Detail_Property_Return));
  GM_Pet_Property_Info_descriptor_ = file->message_type(11);
  static const int GM_Pet_Property_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Property_Info, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Property_Info, propertyvalue_),
  };
  GM_Pet_Property_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Property_Info_descriptor_,
      GM_Pet_Property_Info::default_instance_,
      GM_Pet_Property_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Property_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Property_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Property_Info));
  GM_Pet_Summon_Request_descriptor_ = file->message_type(12);
  static const int GM_Pet_Summon_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Request, m_petid_),
  };
  GM_Pet_Summon_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Summon_Request_descriptor_,
      GM_Pet_Summon_Request::default_instance_,
      GM_Pet_Summon_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Summon_Request));
  GM_Pet_Summon_Return_descriptor_ = file->message_type(13);
  static const int GM_Pet_Summon_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Return, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Return, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Return, fightig_),
  };
  GM_Pet_Summon_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Summon_Return_descriptor_,
      GM_Pet_Summon_Return::default_instance_,
      GM_Pet_Summon_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Summon_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Summon_Return));
  GM_Pet_Upgrade_Request_descriptor_ = file->message_type(14);
  static const int GM_Pet_Upgrade_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Request, m_petid_),
  };
  GM_Pet_Upgrade_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Upgrade_Request_descriptor_,
      GM_Pet_Upgrade_Request::default_instance_,
      GM_Pet_Upgrade_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Upgrade_Request));
  GM_Pet_Upgrade_Return_descriptor_ = file->message_type(15);
  static const int GM_Pet_Upgrade_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Return, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Return, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Return, data_),
  };
  GM_Pet_Upgrade_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Upgrade_Return_descriptor_,
      GM_Pet_Upgrade_Return::default_instance_,
      GM_Pet_Upgrade_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Upgrade_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Upgrade_Return));
  GM_Pet_Evolve_Request_descriptor_ = file->message_type(16);
  static const int GM_Pet_Evolve_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Request, m_petid_),
  };
  GM_Pet_Evolve_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Evolve_Request_descriptor_,
      GM_Pet_Evolve_Request::default_instance_,
      GM_Pet_Evolve_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Evolve_Request));
  GM_Pet_Evolve_Return_descriptor_ = file->message_type(17);
  static const int GM_Pet_Evolve_Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Return, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Return, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Return, m_evolvelvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Return, data_),
  };
  GM_Pet_Evolve_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Evolve_Return_descriptor_,
      GM_Pet_Evolve_Return::default_instance_,
      GM_Pet_Evolve_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Evolve_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Evolve_Return));
  GM_Property_Info_descriptor_ = file->message_type(18);
  static const int GM_Property_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Property_Info, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Property_Info, hp_),
  };
  GM_Property_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Property_Info_descriptor_,
      GM_Property_Info::default_instance_,
      GM_Property_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Property_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Property_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Property_Info));
  GM_Pet_Fate_Info_descriptor_ = file->message_type(19);
  static const int GM_Pet_Fate_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Info, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Info, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Info, info_),
  };
  GM_Pet_Fate_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Fate_Info_descriptor_,
      GM_Pet_Fate_Info::default_instance_,
      GM_Pet_Fate_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Fate_Info));
  GM_Pet_Fate_Pet_descriptor_ = file->message_type(20);
  static const int GM_Pet_Fate_Pet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Pet, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Pet, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Pet, unlock_),
  };
  GM_Pet_Fate_Pet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Pet_Fate_Pet_descriptor_,
      GM_Pet_Fate_Pet::default_instance_,
      GM_Pet_Fate_Pet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Pet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Pet_Fate_Pet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Pet_Fate_Pet));
  GM_PetEquip_UI_Request_descriptor_ = file->message_type(21);
  static const int GM_PetEquip_UI_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Request, petid_),
  };
  GM_PetEquip_UI_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_UI_Request_descriptor_,
      GM_PetEquip_UI_Request::default_instance_,
      GM_PetEquip_UI_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_UI_Request));
  GM_PetEquip_UI_Return_descriptor_ = file->message_type(22);
  static const int GM_PetEquip_UI_Return_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, pillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, diamondtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, diamondneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, data_),
  };
  GM_PetEquip_UI_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_UI_Return_descriptor_,
      GM_PetEquip_UI_Return::default_instance_,
      GM_PetEquip_UI_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_UI_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_UI_Return));
  GM_PetEquip_Hole_Detail_descriptor_ = file->message_type(23);
  static const int GM_PetEquip_Hole_Detail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, propertylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, state_),
  };
  GM_PetEquip_Hole_Detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Hole_Detail_descriptor_,
      GM_PetEquip_Hole_Detail::default_instance_,
      GM_PetEquip_Hole_Detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Hole_Detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Hole_Detail));
  GM_PetEquip_Upgrade_Request_descriptor_ = file->message_type(24);
  static const int GM_PetEquip_Upgrade_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Request, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Request, holenum_),
  };
  GM_PetEquip_Upgrade_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Upgrade_Request_descriptor_,
      GM_PetEquip_Upgrade_Request::default_instance_,
      GM_PetEquip_Upgrade_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Upgrade_Request));
  GM_PetEquip_Upgrade_Return_descriptor_ = file->message_type(25);
  static const int GM_PetEquip_Upgrade_Return_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, propertylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, canupgrade_),
  };
  GM_PetEquip_Upgrade_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Upgrade_Return_descriptor_,
      GM_PetEquip_Upgrade_Return::default_instance_,
      GM_PetEquip_Upgrade_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Upgrade_Return));
  GM_PetEquip_Obtain_Request_descriptor_ = file->message_type(26);
  static const int GM_PetEquip_Obtain_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Request, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Request, obtaintype_),
  };
  GM_PetEquip_Obtain_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Obtain_Request_descriptor_,
      GM_PetEquip_Obtain_Request::default_instance_,
      GM_PetEquip_Obtain_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Obtain_Request));
  GM_PetEquip_Obtain_Return_descriptor_ = file->message_type(27);
  static const int GM_PetEquip_Obtain_Return_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, obtaintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, pillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, diamondtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, diamondneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, getexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, data_),
  };
  GM_PetEquip_Obtain_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Obtain_Return_descriptor_,
      GM_PetEquip_Obtain_Return::default_instance_,
      GM_PetEquip_Obtain_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Obtain_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Obtain_Return));
  GM_PetEquip_AddSwap_Request_descriptor_ = file->message_type(28);
  static const int GM_PetEquip_AddSwap_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Request, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Request, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Request, replaceholenum_),
  };
  GM_PetEquip_AddSwap_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_AddSwap_Request_descriptor_,
      GM_PetEquip_AddSwap_Request::default_instance_,
      GM_PetEquip_AddSwap_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_AddSwap_Request));
  GM_PetEquip_AddSwap_Return_descriptor_ = file->message_type(29);
  static const int GM_PetEquip_AddSwap_Return_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, replaceholenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, getexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, data_),
  };
  GM_PetEquip_AddSwap_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_AddSwap_Return_descriptor_,
      GM_PetEquip_AddSwap_Return::default_instance_,
      GM_PetEquip_AddSwap_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_AddSwap_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_AddSwap_Return));
  GM_PetEquip_Store_Request_descriptor_ = file->message_type(30);
  static const int GM_PetEquip_Store_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Request, petid_),
  };
  GM_PetEquip_Store_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Store_Request_descriptor_,
      GM_PetEquip_Store_Request::default_instance_,
      GM_PetEquip_Store_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Store_Request));
  GM_PetEquip_Store_Return_descriptor_ = file->message_type(31);
  static const int GM_PetEquip_Store_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Return, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Return, data_),
  };
  GM_PetEquip_Store_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Store_Return_descriptor_,
      GM_PetEquip_Store_Return::default_instance_,
      GM_PetEquip_Store_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Store_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Store_Return));
  GM_PetEquip_Refine_Request_descriptor_ = file->message_type(32);
  static const int GM_PetEquip_Refine_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Request, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Request, holenum_),
  };
  GM_PetEquip_Refine_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Refine_Request_descriptor_,
      GM_PetEquip_Refine_Request::default_instance_,
      GM_PetEquip_Refine_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Refine_Request));
  GM_PetEquip_Refine_Return_descriptor_ = file->message_type(33);
  static const int GM_PetEquip_Refine_Return_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, getexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, data_),
  };
  GM_PetEquip_Refine_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Refine_Return_descriptor_,
      GM_PetEquip_Refine_Return::default_instance_,
      GM_PetEquip_Refine_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Refine_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Refine_Return));
  GM_PetEquip_Unlock_Request_descriptor_ = file->message_type(34);
  static const int GM_PetEquip_Unlock_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Request, petid_),
  };
  GM_PetEquip_Unlock_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Unlock_Request_descriptor_,
      GM_PetEquip_Unlock_Request::default_instance_,
      GM_PetEquip_Unlock_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Unlock_Request));
  GM_PetEquip_Unlock_Return_descriptor_ = file->message_type(35);
  static const int GM_PetEquip_Unlock_Return_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Return, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Return, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Return, petid_),
  };
  GM_PetEquip_Unlock_Return_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Unlock_Return_descriptor_,
      GM_PetEquip_Unlock_Return::default_instance_,
      GM_PetEquip_Unlock_Return_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Return, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Unlock_Return, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Unlock_Return));
  GM_PetEquip_Upgrade_Change_descriptor_ = file->message_type(36);
  static const int GM_PetEquip_Upgrade_Change_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Change, data_),
  };
  GM_PetEquip_Upgrade_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Upgrade_Change_descriptor_,
      GM_PetEquip_Upgrade_Change::default_instance_,
      GM_PetEquip_Upgrade_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Upgrade_Change));
  GM_PetEquip_Upgrade_Info_descriptor_ = file->message_type(37);
  static const int GM_PetEquip_Upgrade_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Info, holenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Info, state_),
  };
  GM_PetEquip_Upgrade_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetEquip_Upgrade_Info_descriptor_,
      GM_PetEquip_Upgrade_Info::default_instance_,
      GM_PetEquip_Upgrade_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetEquip_Upgrade_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetEquip_Upgrade_Info));
  GM_Notify_FragmentChange_descriptor_ = file->message_type(38);
  static const int GM_Notify_FragmentChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_FragmentChange, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_FragmentChange, fragmentnum_),
  };
  GM_Notify_FragmentChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_Notify_FragmentChange_descriptor_,
      GM_Notify_FragmentChange::default_instance_,
      GM_Notify_FragmentChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_FragmentChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_Notify_FragmentChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_Notify_FragmentChange));
  GM_PetSkillCount_descriptor_ = file->message_type(39);
  static const int GM_PetSkillCount_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, isfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, level_),
  };
  GM_PetSkillCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetSkillCount_descriptor_,
      GM_PetSkillCount::default_instance_,
      GM_PetSkillCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetSkillCount));
  GM_PetSkillCountReturn_descriptor_ = file->message_type(40);
  static const int GM_PetSkillCountReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCountReturn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCountReturn, petdata_),
  };
  GM_PetSkillCountReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_PetSkillCountReturn_descriptor_,
      GM_PetSkillCountReturn::default_instance_,
      GM_PetSkillCountReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCountReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_PetSkillCountReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_PetSkillCountReturn));
  GM_EquipPetSkillRequest_descriptor_ = file->message_type(41);
  static const int GM_EquipPetSkillRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipPetSkillRequest, equipgmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipPetSkillRequest, idskilledpetid_),
  };
  GM_EquipPetSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM_EquipPetSkillRequest_descriptor_,
      GM_EquipPetSkillRequest::default_instance_,
      GM_EquipPetSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipPetSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM_EquipPetSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM_EquipPetSkillRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pet_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_UI_Open_Return_descriptor_, &GM_Pet_UI_Open_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_info_descriptor_, &GM_Pet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_OnBattle_Request_descriptor_, &GM_Pet_OnBattle_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_OnBattle_Return_descriptor_, &GM_Pet_OnBattle_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_OnBattle_Info_descriptor_, &GM_Pet_OnBattle_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Info_Request_descriptor_, &GM_Pet_Info_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Info_Return_descriptor_, &GM_Pet_Info_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Realize_Skill_Info_descriptor_, &GM_Pet_Realize_Skill_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Normal_Skill_Info_descriptor_, &GM_Pet_Normal_Skill_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Detail_Property_Request_descriptor_, &GM_Pet_Detail_Property_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Detail_Property_Return_descriptor_, &GM_Pet_Detail_Property_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Property_Info_descriptor_, &GM_Pet_Property_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Summon_Request_descriptor_, &GM_Pet_Summon_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Summon_Return_descriptor_, &GM_Pet_Summon_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Upgrade_Request_descriptor_, &GM_Pet_Upgrade_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Upgrade_Return_descriptor_, &GM_Pet_Upgrade_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Evolve_Request_descriptor_, &GM_Pet_Evolve_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Evolve_Return_descriptor_, &GM_Pet_Evolve_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Property_Info_descriptor_, &GM_Property_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Fate_Info_descriptor_, &GM_Pet_Fate_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Pet_Fate_Pet_descriptor_, &GM_Pet_Fate_Pet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_UI_Request_descriptor_, &GM_PetEquip_UI_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_UI_Return_descriptor_, &GM_PetEquip_UI_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Hole_Detail_descriptor_, &GM_PetEquip_Hole_Detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Upgrade_Request_descriptor_, &GM_PetEquip_Upgrade_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Upgrade_Return_descriptor_, &GM_PetEquip_Upgrade_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Obtain_Request_descriptor_, &GM_PetEquip_Obtain_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Obtain_Return_descriptor_, &GM_PetEquip_Obtain_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_AddSwap_Request_descriptor_, &GM_PetEquip_AddSwap_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_AddSwap_Return_descriptor_, &GM_PetEquip_AddSwap_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Store_Request_descriptor_, &GM_PetEquip_Store_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Store_Return_descriptor_, &GM_PetEquip_Store_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Refine_Request_descriptor_, &GM_PetEquip_Refine_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Refine_Return_descriptor_, &GM_PetEquip_Refine_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Unlock_Request_descriptor_, &GM_PetEquip_Unlock_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Unlock_Return_descriptor_, &GM_PetEquip_Unlock_Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Upgrade_Change_descriptor_, &GM_PetEquip_Upgrade_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetEquip_Upgrade_Info_descriptor_, &GM_PetEquip_Upgrade_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_Notify_FragmentChange_descriptor_, &GM_Notify_FragmentChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetSkillCount_descriptor_, &GM_PetSkillCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_PetSkillCountReturn_descriptor_, &GM_PetSkillCountReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM_EquipPetSkillRequest_descriptor_, &GM_EquipPetSkillRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pet_2etxt() {
  delete GM_Pet_UI_Open_Return::default_instance_;
  delete GM_Pet_UI_Open_Return_reflection_;
  delete GM_Pet_info::default_instance_;
  delete GM_Pet_info_reflection_;
  delete GM_Pet_OnBattle_Request::default_instance_;
  delete GM_Pet_OnBattle_Request_reflection_;
  delete GM_Pet_OnBattle_Return::default_instance_;
  delete GM_Pet_OnBattle_Return_reflection_;
  delete GM_Pet_OnBattle_Info::default_instance_;
  delete GM_Pet_OnBattle_Info_reflection_;
  delete GM_Pet_Info_Request::default_instance_;
  delete GM_Pet_Info_Request_reflection_;
  delete GM_Pet_Info_Return::default_instance_;
  delete GM_Pet_Info_Return_reflection_;
  delete GM_Pet_Realize_Skill_Info::default_instance_;
  delete GM_Pet_Realize_Skill_Info_reflection_;
  delete GM_Pet_Normal_Skill_Info::default_instance_;
  delete GM_Pet_Normal_Skill_Info_reflection_;
  delete GM_Pet_Detail_Property_Request::default_instance_;
  delete GM_Pet_Detail_Property_Request_reflection_;
  delete GM_Pet_Detail_Property_Return::default_instance_;
  delete GM_Pet_Detail_Property_Return_reflection_;
  delete GM_Pet_Property_Info::default_instance_;
  delete GM_Pet_Property_Info_reflection_;
  delete GM_Pet_Summon_Request::default_instance_;
  delete GM_Pet_Summon_Request_reflection_;
  delete GM_Pet_Summon_Return::default_instance_;
  delete GM_Pet_Summon_Return_reflection_;
  delete GM_Pet_Upgrade_Request::default_instance_;
  delete GM_Pet_Upgrade_Request_reflection_;
  delete GM_Pet_Upgrade_Return::default_instance_;
  delete GM_Pet_Upgrade_Return_reflection_;
  delete GM_Pet_Evolve_Request::default_instance_;
  delete GM_Pet_Evolve_Request_reflection_;
  delete GM_Pet_Evolve_Return::default_instance_;
  delete GM_Pet_Evolve_Return_reflection_;
  delete GM_Property_Info::default_instance_;
  delete GM_Property_Info_reflection_;
  delete GM_Pet_Fate_Info::default_instance_;
  delete GM_Pet_Fate_Info_reflection_;
  delete GM_Pet_Fate_Pet::default_instance_;
  delete GM_Pet_Fate_Pet_reflection_;
  delete GM_PetEquip_UI_Request::default_instance_;
  delete GM_PetEquip_UI_Request_reflection_;
  delete GM_PetEquip_UI_Return::default_instance_;
  delete GM_PetEquip_UI_Return_reflection_;
  delete GM_PetEquip_Hole_Detail::default_instance_;
  delete GM_PetEquip_Hole_Detail_reflection_;
  delete GM_PetEquip_Upgrade_Request::default_instance_;
  delete GM_PetEquip_Upgrade_Request_reflection_;
  delete GM_PetEquip_Upgrade_Return::default_instance_;
  delete GM_PetEquip_Upgrade_Return_reflection_;
  delete GM_PetEquip_Obtain_Request::default_instance_;
  delete GM_PetEquip_Obtain_Request_reflection_;
  delete GM_PetEquip_Obtain_Return::default_instance_;
  delete GM_PetEquip_Obtain_Return_reflection_;
  delete GM_PetEquip_AddSwap_Request::default_instance_;
  delete GM_PetEquip_AddSwap_Request_reflection_;
  delete GM_PetEquip_AddSwap_Return::default_instance_;
  delete GM_PetEquip_AddSwap_Return_reflection_;
  delete GM_PetEquip_Store_Request::default_instance_;
  delete GM_PetEquip_Store_Request_reflection_;
  delete GM_PetEquip_Store_Return::default_instance_;
  delete GM_PetEquip_Store_Return_reflection_;
  delete GM_PetEquip_Refine_Request::default_instance_;
  delete GM_PetEquip_Refine_Request_reflection_;
  delete GM_PetEquip_Refine_Return::default_instance_;
  delete GM_PetEquip_Refine_Return_reflection_;
  delete GM_PetEquip_Unlock_Request::default_instance_;
  delete GM_PetEquip_Unlock_Request_reflection_;
  delete GM_PetEquip_Unlock_Return::default_instance_;
  delete GM_PetEquip_Unlock_Return_reflection_;
  delete GM_PetEquip_Upgrade_Change::default_instance_;
  delete GM_PetEquip_Upgrade_Change_reflection_;
  delete GM_PetEquip_Upgrade_Info::default_instance_;
  delete GM_PetEquip_Upgrade_Info_reflection_;
  delete GM_Notify_FragmentChange::default_instance_;
  delete GM_Notify_FragmentChange_reflection_;
  delete GM_PetSkillCount::default_instance_;
  delete GM_PetSkillCount_reflection_;
  delete GM_PetSkillCountReturn::default_instance_;
  delete GM_PetSkillCountReturn_reflection_;
  delete GM_EquipPetSkillRequest::default_instance_;
  delete GM_EquipPetSkillRequest_reflection_;
}

void protobuf_AddDesc_pet_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007pet.txt\"K\n\025GM_Pet_UI_Open_Return\022\020\n\010m_"
    "Result\030\001 \002(\005\022 \n\nm_PetInfos\030\002 \003(\0132\014.GM_Pe"
    "t_info\"\272\001\n\013GM_Pet_info\022\017\n\007m_PetId\030\001 \002(\005\022"
    "\024\n\014m_bHadSummon\030\002 \001(\005\022\022\n\nm_Fragment\030\003 \001("
    "\005\022\022\n\nm_PetLevel\030\004 \001(\005\022\026\n\016m_PetEvolveLvl\030"
    "\005 \001(\005\022\022\n\nm_OnBattle\030\006 \001(\005\022\021\n\tm_quality\030\007"
    " \001(\005\022\014\n\004gmid\030\010 \001(\003\022\017\n\007fightig\030\t \001(\005\"@\n\027G"
    "M_Pet_OnBattle_Request\022\017\n\007m_PetId\030\001 \002(\005\022"
    "\024\n\014m_BattleHole\030\002 \001(\005\"k\n\026GM_Pet_OnBattle"
    "_Return\022\020\n\010m_Result\030\001 \002(\005\022\024\n\014m_Fightvalu"
    "e\030\002 \001(\005\022)\n\nm_DataInfo\030\003 \003(\0132\025.GM_Pet_OnB"
    "attle_Info\"=\n\024GM_Pet_OnBattle_Info\022\017\n\007m_"
    "PetId\030\001 \002(\005\022\024\n\014m_BattleHole\030\002 \001(\005\"&\n\023GM_"
    "Pet_Info_Request\022\017\n\007m_PetId\030\001 \002(\005\"\246\002\n\022GM"
    "_Pet_Info_Return\022\020\n\010m_Result\030\001 \002(\005\022\017\n\007m_"
    "PetId\030\002 \001(\005\022\022\n\nm_PetLevel\030\003 \001(\005\022\026\n\016m_Pet"
    "EvolveLvl\030\004 \001(\005\022\024\n\014m_Fightvalue\030\005 \001(\005\022\021\n"
    "\tm_Quality\030\006 \001(\005\022\022\n\nm_fragment\030\007 \001(\005\022\037\n\004"
    "data\030\010 \001(\0132\021.GM_Property_Info\022.\n\013m_PetSk"
    "ills\030\t \003(\0132\031.GM_Pet_Normal_Skill_Info\0223\n"
    "\017m_PetRealSkills\030\n \003(\0132\032.GM_Pet_Realize_"
    "Skill_Info\"B\n\031GM_Pet_Realize_Skill_Info\022"
    "\021\n\tm_SkillId\030\001 \002(\005\022\022\n\nm_SkillLvl\030\002 \001(\005\"A"
    "\n\030GM_Pet_Normal_Skill_Info\022\021\n\tm_SkillId\030"
    "\001 \002(\005\022\022\n\nm_SkillLvl\030\002 \001(\005\"1\n\036GM_Pet_Deta"
    "il_Property_Request\022\017\n\007m_PetId\030\001 \002(\005\"g\n\035"
    "GM_Pet_Detail_Property_Return\022\020\n\010m_Resul"
    "t\030\001 \002(\005\022\017\n\007m_PetId\030\002 \001(\005\022#\n\004data\030\003 \003(\0132\025"
    ".GM_Pet_Property_Info\"A\n\024GM_Pet_Property"
    "_Info\022\022\n\npropertyId\030\001 \002(\005\022\025\n\rpropertyVal"
    "ue\030\002 \001(\005\"(\n\025GM_Pet_Summon_Request\022\017\n\007m_P"
    "etId\030\001 \002(\005\"X\n\024GM_Pet_Summon_Return\022\020\n\010m_"
    "Result\030\001 \002(\005\022\017\n\007m_PetId\030\002 \001(\005\022\014\n\004gmid\030\003 "
    "\001(\003\022\017\n\007fightig\030\004 \001(\005\")\n\026GM_Pet_Upgrade_R"
    "equest\022\017\n\007m_PetId\030\001 \002(\005\"l\n\025GM_Pet_Upgrad"
    "e_Return\022\020\n\010m_Result\030\001 \002(\005\022\017\n\007m_PetId\030\002 "
    "\001(\005\022\017\n\007m_Level\030\003 \001(\005\022\037\n\004data\030\004 \001(\0132\021.GM_"
    "Property_Info\"(\n\025GM_Pet_Evolve_Request\022\017"
    "\n\007m_PetId\030\001 \002(\005\"o\n\024GM_Pet_Evolve_Return\022"
    "\020\n\010m_Result\030\001 \002(\005\022\017\n\007m_PetId\030\002 \001(\005\022\023\n\013m_"
    "EvolveLvl\030\003 \001(\005\022\037\n\004data\030\004 \001(\0132\021.GM_Prope"
    "rty_Info\".\n\020GM_Property_Info\022\016\n\006attack\030\001"
    " \002(\005\022\n\n\002hp\030\002 \001(\005\"Q\n\020GM_Pet_Fate_Info\022\016\n\006"
    "result\030\001 \002(\005\022\r\n\005petid\030\002 \002(\005\022\036\n\004info\030\005 \003("
    "\0132\020.GM_Pet_Fate_Pet\"\?\n\017GM_Pet_Fate_Pet\022\r"
    "\n\005petid\030\001 \002(\005\022\r\n\005level\030\002 \001(\005\022\016\n\006unlock\030\003"
    " \001(\005\"\'\n\026GM_PetEquip_UI_Request\022\r\n\005petid\030"
    "\001 \002(\005\"\300\001\n\025GM_PetEquip_UI_Return\022\016\n\006resul"
    "t\030\001 \002(\005\022\r\n\005petid\030\002 \001(\005\022\022\n\nexperience\030\003 \001"
    "(\005\022\017\n\007pillNum\030\004 \001(\005\022\024\n\014diamondTotal\030\005 \001("
    "\005\022\023\n\013diamondNeed\030\006 \001(\005\022\020\n\010discount\030\007 \001(\002"
    "\022&\n\004data\030\010 \003(\0132\030.GM_PetEquip_Hole_Detail"
    "\"v\n\027GM_PetEquip_Hole_Detail\022\017\n\007holenum\030\001"
    " \002(\005\022\022\n\npropertyId\030\002 \001(\005\022\025\n\rpropertyLeve"
    "l\030\003 \001(\005\022\020\n\010maxlevel\030\004 \001(\005\022\r\n\005state\030\005 \001(\005"
    "\"=\n\033GM_PetEquip_Upgrade_Request\022\r\n\005petid"
    "\030\001 \002(\005\022\017\n\007holenum\030\002 \001(\005\"\237\001\n\032GM_PetEquip_"
    "Upgrade_Return\022\016\n\006result\030\001 \002(\005\022\r\n\005petid\030"
    "\002 \001(\005\022\017\n\007holenum\030\003 \001(\005\022\022\n\npropertyId\030\004 \001"
    "(\005\022\025\n\rpropertyLevel\030\005 \001(\005\022\022\n\nexperience\030"
    "\006 \001(\005\022\022\n\ncanupgrade\030\007 \001(\005\"\?\n\032GM_PetEquip"
    "_Obtain_Request\022\r\n\005petid\030\001 \002(\005\022\022\n\nobtain"
    "Type\030\002 \001(\005\"\326\001\n\031GM_PetEquip_Obtain_Return"
    "\022\016\n\006result\030\001 \002(\005\022\r\n\005petid\030\002 \001(\005\022\022\n\nobtai"
    "nType\030\003 \001(\005\022\017\n\007pillNum\030\004 \001(\005\022\024\n\014diamondT"
    "otal\030\005 \001(\005\022\023\n\013diamondNeed\030\006 \001(\005\022\016\n\006getex"
    "p\030\007 \001(\005\022\022\n\nexperience\030\010 \001(\005\022&\n\004data\030\t \001("
    "\0132\030.GM_PetEquip_Hole_Detail\"U\n\033GM_PetEqu"
    "ip_AddSwap_Request\022\r\n\005petid\030\001 \002(\005\022\017\n\007hol"
    "enum\030\002 \002(\005\022\026\n\016replaceholenum\030\003 \002(\005\"\260\001\n\032G"
    "M_PetEquip_AddSwap_Return\022\016\n\006result\030\001 \002("
    "\005\022\r\n\005petid\030\002 \001(\005\022\017\n\007holenum\030\003 \001(\005\022\026\n\016rep"
    "laceholenum\030\004 \001(\005\022\016\n\006getexp\030\005 \001(\005\022\022\n\nexp"
    "erience\030\006 \001(\005\022&\n\004data\030\007 \003(\0132\030.GM_PetEqui"
    "p_Hole_Detail\"*\n\031GM_PetEquip_Store_Reque"
    "st\022\r\n\005petid\030\001 \002(\005\"a\n\030GM_PetEquip_Store_R"
    "eturn\022\016\n\006result\030\001 \002(\005\022\r\n\005petid\030\002 \001(\005\022&\n\004"
    "data\030\003 \001(\0132\030.GM_PetEquip_Hole_Detail\"<\n\032"
    "GM_PetEquip_Refine_Request\022\r\n\005petid\030\001 \002("
    "\005\022\017\n\007holenum\030\003 \001(\005\"\227\001\n\031GM_PetEquip_Refin"
    "e_Return\022\016\n\006result\030\001 \002(\005\022\r\n\005petid\030\002 \001(\005\022"
    "\017\n\007holenum\030\003 \001(\005\022\016\n\006getexp\030\004 \001(\005\022\022\n\nexpe"
    "rience\030\005 \001(\005\022&\n\004data\030\006 \003(\0132\030.GM_PetEquip"
    "_Hole_Detail\"+\n\032GM_PetEquip_Unlock_Reque"
    "st\022\r\n\005petid\030\001 \002(\005\"K\n\031GM_PetEquip_Unlock_"
    "Return\022\016\n\006result\030\001 \002(\005\022\017\n\007holenum\030\002 \001(\005\022"
    "\r\n\005petid\030\003 \001(\005\"E\n\032GM_PetEquip_Upgrade_Ch"
    "ange\022\'\n\004data\030\001 \003(\0132\031.GM_PetEquip_Upgrade"
    "_Info\":\n\030GM_PetEquip_Upgrade_Info\022\017\n\007hol"
    "enum\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\">\n\030GM_Notify_F"
    "ragmentChange\022\r\n\005petid\030\001 \002(\005\022\023\n\013fragment"
    "num\030\002 \001(\005\"V\n\020GM_PetSkillCount\022\r\n\005petid\030\001"
    " \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\016\n\006isfull\030\004 \002"
    "(\005\022\r\n\005level\030\005 \001(\005\"L\n\026GM_PetSkillCountRet"
    "urn\022\016\n\006result\030\001 \002(\005\022\"\n\007petdata\030\002 \003(\0132\021.G"
    "M_PetSkillCount\"D\n\027GM_EquipPetSkillReque"
    "st\022\021\n\tequipGmid\030\001 \002(\003\022\026\n\016idskilledpetid\030"
    "\002 \002(\005", 3885);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pet.txt", &protobuf_RegisterTypes);
  GM_Pet_UI_Open_Return::default_instance_ = new GM_Pet_UI_Open_Return();
  GM_Pet_info::default_instance_ = new GM_Pet_info();
  GM_Pet_OnBattle_Request::default_instance_ = new GM_Pet_OnBattle_Request();
  GM_Pet_OnBattle_Return::default_instance_ = new GM_Pet_OnBattle_Return();
  GM_Pet_OnBattle_Info::default_instance_ = new GM_Pet_OnBattle_Info();
  GM_Pet_Info_Request::default_instance_ = new GM_Pet_Info_Request();
  GM_Pet_Info_Return::default_instance_ = new GM_Pet_Info_Return();
  GM_Pet_Realize_Skill_Info::default_instance_ = new GM_Pet_Realize_Skill_Info();
  GM_Pet_Normal_Skill_Info::default_instance_ = new GM_Pet_Normal_Skill_Info();
  GM_Pet_Detail_Property_Request::default_instance_ = new GM_Pet_Detail_Property_Request();
  GM_Pet_Detail_Property_Return::default_instance_ = new GM_Pet_Detail_Property_Return();
  GM_Pet_Property_Info::default_instance_ = new GM_Pet_Property_Info();
  GM_Pet_Summon_Request::default_instance_ = new GM_Pet_Summon_Request();
  GM_Pet_Summon_Return::default_instance_ = new GM_Pet_Summon_Return();
  GM_Pet_Upgrade_Request::default_instance_ = new GM_Pet_Upgrade_Request();
  GM_Pet_Upgrade_Return::default_instance_ = new GM_Pet_Upgrade_Return();
  GM_Pet_Evolve_Request::default_instance_ = new GM_Pet_Evolve_Request();
  GM_Pet_Evolve_Return::default_instance_ = new GM_Pet_Evolve_Return();
  GM_Property_Info::default_instance_ = new GM_Property_Info();
  GM_Pet_Fate_Info::default_instance_ = new GM_Pet_Fate_Info();
  GM_Pet_Fate_Pet::default_instance_ = new GM_Pet_Fate_Pet();
  GM_PetEquip_UI_Request::default_instance_ = new GM_PetEquip_UI_Request();
  GM_PetEquip_UI_Return::default_instance_ = new GM_PetEquip_UI_Return();
  GM_PetEquip_Hole_Detail::default_instance_ = new GM_PetEquip_Hole_Detail();
  GM_PetEquip_Upgrade_Request::default_instance_ = new GM_PetEquip_Upgrade_Request();
  GM_PetEquip_Upgrade_Return::default_instance_ = new GM_PetEquip_Upgrade_Return();
  GM_PetEquip_Obtain_Request::default_instance_ = new GM_PetEquip_Obtain_Request();
  GM_PetEquip_Obtain_Return::default_instance_ = new GM_PetEquip_Obtain_Return();
  GM_PetEquip_AddSwap_Request::default_instance_ = new GM_PetEquip_AddSwap_Request();
  GM_PetEquip_AddSwap_Return::default_instance_ = new GM_PetEquip_AddSwap_Return();
  GM_PetEquip_Store_Request::default_instance_ = new GM_PetEquip_Store_Request();
  GM_PetEquip_Store_Return::default_instance_ = new GM_PetEquip_Store_Return();
  GM_PetEquip_Refine_Request::default_instance_ = new GM_PetEquip_Refine_Request();
  GM_PetEquip_Refine_Return::default_instance_ = new GM_PetEquip_Refine_Return();
  GM_PetEquip_Unlock_Request::default_instance_ = new GM_PetEquip_Unlock_Request();
  GM_PetEquip_Unlock_Return::default_instance_ = new GM_PetEquip_Unlock_Return();
  GM_PetEquip_Upgrade_Change::default_instance_ = new GM_PetEquip_Upgrade_Change();
  GM_PetEquip_Upgrade_Info::default_instance_ = new GM_PetEquip_Upgrade_Info();
  GM_Notify_FragmentChange::default_instance_ = new GM_Notify_FragmentChange();
  GM_PetSkillCount::default_instance_ = new GM_PetSkillCount();
  GM_PetSkillCountReturn::default_instance_ = new GM_PetSkillCountReturn();
  GM_EquipPetSkillRequest::default_instance_ = new GM_EquipPetSkillRequest();
  GM_Pet_UI_Open_Return::default_instance_->InitAsDefaultInstance();
  GM_Pet_info::default_instance_->InitAsDefaultInstance();
  GM_Pet_OnBattle_Request::default_instance_->InitAsDefaultInstance();
  GM_Pet_OnBattle_Return::default_instance_->InitAsDefaultInstance();
  GM_Pet_OnBattle_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Info_Request::default_instance_->InitAsDefaultInstance();
  GM_Pet_Info_Return::default_instance_->InitAsDefaultInstance();
  GM_Pet_Realize_Skill_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Normal_Skill_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Detail_Property_Request::default_instance_->InitAsDefaultInstance();
  GM_Pet_Detail_Property_Return::default_instance_->InitAsDefaultInstance();
  GM_Pet_Property_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Summon_Request::default_instance_->InitAsDefaultInstance();
  GM_Pet_Summon_Return::default_instance_->InitAsDefaultInstance();
  GM_Pet_Upgrade_Request::default_instance_->InitAsDefaultInstance();
  GM_Pet_Upgrade_Return::default_instance_->InitAsDefaultInstance();
  GM_Pet_Evolve_Request::default_instance_->InitAsDefaultInstance();
  GM_Pet_Evolve_Return::default_instance_->InitAsDefaultInstance();
  GM_Property_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Fate_Info::default_instance_->InitAsDefaultInstance();
  GM_Pet_Fate_Pet::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_UI_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_UI_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Hole_Detail::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Upgrade_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Upgrade_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Obtain_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Obtain_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_AddSwap_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_AddSwap_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Store_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Store_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Refine_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Refine_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Unlock_Request::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Unlock_Return::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Upgrade_Change::default_instance_->InitAsDefaultInstance();
  GM_PetEquip_Upgrade_Info::default_instance_->InitAsDefaultInstance();
  GM_Notify_FragmentChange::default_instance_->InitAsDefaultInstance();
  GM_PetSkillCount::default_instance_->InitAsDefaultInstance();
  GM_PetSkillCountReturn::default_instance_->InitAsDefaultInstance();
  GM_EquipPetSkillRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pet_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pet_2etxt {
  StaticDescriptorInitializer_pet_2etxt() {
    protobuf_AddDesc_pet_2etxt();
  }
} static_descriptor_initializer_pet_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_UI_Open_Return::kMResultFieldNumber;
const int GM_Pet_UI_Open_Return::kMPetInfosFieldNumber;
#endif  // !_MSC_VER

GM_Pet_UI_Open_Return::GM_Pet_UI_Open_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_UI_Open_Return::InitAsDefaultInstance() {
}

GM_Pet_UI_Open_Return::GM_Pet_UI_Open_Return(const GM_Pet_UI_Open_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_UI_Open_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_UI_Open_Return::~GM_Pet_UI_Open_Return() {
  SharedDtor();
}

void GM_Pet_UI_Open_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_UI_Open_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_UI_Open_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_UI_Open_Return_descriptor_;
}

const GM_Pet_UI_Open_Return& GM_Pet_UI_Open_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_UI_Open_Return* GM_Pet_UI_Open_Return::default_instance_ = NULL;

GM_Pet_UI_Open_Return* GM_Pet_UI_Open_Return::New() const {
  return new GM_Pet_UI_Open_Return;
}

void GM_Pet_UI_Open_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
  }
  m_petinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_UI_Open_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_PetInfos;
        break;
      }

      // repeated .GM_Pet_info m_PetInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_petinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_PetInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_UI_Open_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // repeated .GM_Pet_info m_PetInfos = 2;
  for (int i = 0; i < this->m_petinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_petinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_UI_Open_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // repeated .GM_Pet_info m_PetInfos = 2;
  for (int i = 0; i < this->m_petinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_petinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_UI_Open_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

  }
  // repeated .GM_Pet_info m_PetInfos = 2;
  total_size += 1 * this->m_petinfos_size();
  for (int i = 0; i < this->m_petinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_petinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_UI_Open_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_UI_Open_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_UI_Open_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_UI_Open_Return::MergeFrom(const GM_Pet_UI_Open_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_petinfos_.MergeFrom(from.m_petinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_UI_Open_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_UI_Open_Return::CopyFrom(const GM_Pet_UI_Open_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_UI_Open_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_petinfos_size(); i++) {
    if (!this->m_petinfos(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_UI_Open_Return::Swap(GM_Pet_UI_Open_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    m_petinfos_.Swap(&other->m_petinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_UI_Open_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_UI_Open_Return_descriptor_;
  metadata.reflection = GM_Pet_UI_Open_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_info::kMPetIdFieldNumber;
const int GM_Pet_info::kMBHadSummonFieldNumber;
const int GM_Pet_info::kMFragmentFieldNumber;
const int GM_Pet_info::kMPetLevelFieldNumber;
const int GM_Pet_info::kMPetEvolveLvlFieldNumber;
const int GM_Pet_info::kMOnBattleFieldNumber;
const int GM_Pet_info::kMQualityFieldNumber;
const int GM_Pet_info::kGmidFieldNumber;
const int GM_Pet_info::kFightigFieldNumber;
#endif  // !_MSC_VER

GM_Pet_info::GM_Pet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_info::InitAsDefaultInstance() {
}

GM_Pet_info::GM_Pet_info(const GM_Pet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_info::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  m_bhadsummon_ = 0;
  m_fragment_ = 0;
  m_petlevel_ = 0;
  m_petevolvelvl_ = 0;
  m_onbattle_ = 0;
  m_quality_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  fightig_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_info::~GM_Pet_info() {
  SharedDtor();
}

void GM_Pet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_info_descriptor_;
}

const GM_Pet_info& GM_Pet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_info* GM_Pet_info::default_instance_ = NULL;

GM_Pet_info* GM_Pet_info::New() const {
  return new GM_Pet_info;
}

void GM_Pet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
    m_bhadsummon_ = 0;
    m_fragment_ = 0;
    m_petlevel_ = 0;
    m_petevolvelvl_ = 0;
    m_onbattle_ = 0;
    m_quality_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fightig_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_bHadSummon;
        break;
      }

      // optional int32 m_bHadSummon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bHadSummon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bhadsummon_)));
          set_has_m_bhadsummon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Fragment;
        break;
      }

      // optional int32 m_Fragment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fragment_)));
          set_has_m_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_PetLevel;
        break;
      }

      // optional int32 m_PetLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petlevel_)));
          set_has_m_petlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_PetEvolveLvl;
        break;
      }

      // optional int32 m_PetEvolveLvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetEvolveLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petevolvelvl_)));
          set_has_m_petevolvelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_OnBattle;
        break;
      }

      // optional int32 m_OnBattle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_OnBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_onbattle_)));
          set_has_m_onbattle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fightig;
        break;
      }

      // optional int32 fightig = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightig_)));
          set_has_fightig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  // optional int32 m_bHadSummon = 2;
  if (has_m_bhadsummon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_bhadsummon(), output);
  }

  // optional int32 m_Fragment = 3;
  if (has_m_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_fragment(), output);
  }

  // optional int32 m_PetLevel = 4;
  if (has_m_petlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_petlevel(), output);
  }

  // optional int32 m_PetEvolveLvl = 5;
  if (has_m_petevolvelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_petevolvelvl(), output);
  }

  // optional int32 m_OnBattle = 6;
  if (has_m_onbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_onbattle(), output);
  }

  // optional int32 m_quality = 7;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_quality(), output);
  }

  // optional int64 gmid = 8;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->gmid(), output);
  }

  // optional int32 fightig = 9;
  if (has_fightig()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fightig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  // optional int32 m_bHadSummon = 2;
  if (has_m_bhadsummon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_bhadsummon(), target);
  }

  // optional int32 m_Fragment = 3;
  if (has_m_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_fragment(), target);
  }

  // optional int32 m_PetLevel = 4;
  if (has_m_petlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_petlevel(), target);
  }

  // optional int32 m_PetEvolveLvl = 5;
  if (has_m_petevolvelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_petevolvelvl(), target);
  }

  // optional int32 m_OnBattle = 6;
  if (has_m_onbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_onbattle(), target);
  }

  // optional int32 m_quality = 7;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_quality(), target);
  }

  // optional int64 gmid = 8;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->gmid(), target);
  }

  // optional int32 fightig = 9;
  if (has_fightig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fightig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int32 m_bHadSummon = 2;
    if (has_m_bhadsummon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bhadsummon());
    }

    // optional int32 m_Fragment = 3;
    if (has_m_fragment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fragment());
    }

    // optional int32 m_PetLevel = 4;
    if (has_m_petlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petlevel());
    }

    // optional int32 m_PetEvolveLvl = 5;
    if (has_m_petevolvelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petevolvelvl());
    }

    // optional int32 m_OnBattle = 6;
    if (has_m_onbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_onbattle());
    }

    // optional int32 m_quality = 7;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int64 gmid = 8;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fightig = 9;
    if (has_fightig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_info::MergeFrom(const GM_Pet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_m_bhadsummon()) {
      set_m_bhadsummon(from.m_bhadsummon());
    }
    if (from.has_m_fragment()) {
      set_m_fragment(from.m_fragment());
    }
    if (from.has_m_petlevel()) {
      set_m_petlevel(from.m_petlevel());
    }
    if (from.has_m_petevolvelvl()) {
      set_m_petevolvelvl(from.m_petevolvelvl());
    }
    if (from.has_m_onbattle()) {
      set_m_onbattle(from.m_onbattle());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightig()) {
      set_fightig(from.fightig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_info::CopyFrom(const GM_Pet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_info::Swap(GM_Pet_info* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(m_bhadsummon_, other->m_bhadsummon_);
    std::swap(m_fragment_, other->m_fragment_);
    std::swap(m_petlevel_, other->m_petlevel_);
    std::swap(m_petevolvelvl_, other->m_petevolvelvl_);
    std::swap(m_onbattle_, other->m_onbattle_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(gmid_, other->gmid_);
    std::swap(fightig_, other->fightig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_info_descriptor_;
  metadata.reflection = GM_Pet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_OnBattle_Request::kMPetIdFieldNumber;
const int GM_Pet_OnBattle_Request::kMBattleHoleFieldNumber;
#endif  // !_MSC_VER

GM_Pet_OnBattle_Request::GM_Pet_OnBattle_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_OnBattle_Request::InitAsDefaultInstance() {
}

GM_Pet_OnBattle_Request::GM_Pet_OnBattle_Request(const GM_Pet_OnBattle_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_OnBattle_Request::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  m_battlehole_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_OnBattle_Request::~GM_Pet_OnBattle_Request() {
  SharedDtor();
}

void GM_Pet_OnBattle_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_OnBattle_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_OnBattle_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_OnBattle_Request_descriptor_;
}

const GM_Pet_OnBattle_Request& GM_Pet_OnBattle_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_OnBattle_Request* GM_Pet_OnBattle_Request::default_instance_ = NULL;

GM_Pet_OnBattle_Request* GM_Pet_OnBattle_Request::New() const {
  return new GM_Pet_OnBattle_Request;
}

void GM_Pet_OnBattle_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
    m_battlehole_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_OnBattle_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_BattleHole;
        break;
      }

      // optional int32 m_BattleHole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BattleHole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battlehole_)));
          set_has_m_battlehole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_OnBattle_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  // optional int32 m_BattleHole = 2;
  if (has_m_battlehole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_battlehole(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_OnBattle_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  // optional int32 m_BattleHole = 2;
  if (has_m_battlehole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_battlehole(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_OnBattle_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int32 m_BattleHole = 2;
    if (has_m_battlehole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battlehole());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_OnBattle_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_OnBattle_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_OnBattle_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_OnBattle_Request::MergeFrom(const GM_Pet_OnBattle_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_m_battlehole()) {
      set_m_battlehole(from.m_battlehole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_OnBattle_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_OnBattle_Request::CopyFrom(const GM_Pet_OnBattle_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_OnBattle_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_OnBattle_Request::Swap(GM_Pet_OnBattle_Request* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(m_battlehole_, other->m_battlehole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_OnBattle_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_OnBattle_Request_descriptor_;
  metadata.reflection = GM_Pet_OnBattle_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_OnBattle_Return::kMResultFieldNumber;
const int GM_Pet_OnBattle_Return::kMFightvalueFieldNumber;
const int GM_Pet_OnBattle_Return::kMDataInfoFieldNumber;
#endif  // !_MSC_VER

GM_Pet_OnBattle_Return::GM_Pet_OnBattle_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_OnBattle_Return::InitAsDefaultInstance() {
}

GM_Pet_OnBattle_Return::GM_Pet_OnBattle_Return(const GM_Pet_OnBattle_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_OnBattle_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_fightvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_OnBattle_Return::~GM_Pet_OnBattle_Return() {
  SharedDtor();
}

void GM_Pet_OnBattle_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_OnBattle_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_OnBattle_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_OnBattle_Return_descriptor_;
}

const GM_Pet_OnBattle_Return& GM_Pet_OnBattle_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_OnBattle_Return* GM_Pet_OnBattle_Return::default_instance_ = NULL;

GM_Pet_OnBattle_Return* GM_Pet_OnBattle_Return::New() const {
  return new GM_Pet_OnBattle_Return;
}

void GM_Pet_OnBattle_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_fightvalue_ = 0;
  }
  m_datainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_OnBattle_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Fightvalue;
        break;
      }

      // optional int32 m_Fightvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Fightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightvalue_)));
          set_has_m_fightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_DataInfo;
        break;
      }

      // repeated .GM_Pet_OnBattle_Info m_DataInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_DataInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_datainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_DataInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_OnBattle_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_Fightvalue = 2;
  if (has_m_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fightvalue(), output);
  }

  // repeated .GM_Pet_OnBattle_Info m_DataInfo = 3;
  for (int i = 0; i < this->m_datainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_datainfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_OnBattle_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_Fightvalue = 2;
  if (has_m_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fightvalue(), target);
  }

  // repeated .GM_Pet_OnBattle_Info m_DataInfo = 3;
  for (int i = 0; i < this->m_datainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_datainfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_OnBattle_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_Fightvalue = 2;
    if (has_m_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightvalue());
    }

  }
  // repeated .GM_Pet_OnBattle_Info m_DataInfo = 3;
  total_size += 1 * this->m_datainfo_size();
  for (int i = 0; i < this->m_datainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_datainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_OnBattle_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_OnBattle_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_OnBattle_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_OnBattle_Return::MergeFrom(const GM_Pet_OnBattle_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_datainfo_.MergeFrom(from.m_datainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_fightvalue()) {
      set_m_fightvalue(from.m_fightvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_OnBattle_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_OnBattle_Return::CopyFrom(const GM_Pet_OnBattle_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_OnBattle_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_datainfo_size(); i++) {
    if (!this->m_datainfo(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_OnBattle_Return::Swap(GM_Pet_OnBattle_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_fightvalue_, other->m_fightvalue_);
    m_datainfo_.Swap(&other->m_datainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_OnBattle_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_OnBattle_Return_descriptor_;
  metadata.reflection = GM_Pet_OnBattle_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_OnBattle_Info::kMPetIdFieldNumber;
const int GM_Pet_OnBattle_Info::kMBattleHoleFieldNumber;
#endif  // !_MSC_VER

GM_Pet_OnBattle_Info::GM_Pet_OnBattle_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_OnBattle_Info::InitAsDefaultInstance() {
}

GM_Pet_OnBattle_Info::GM_Pet_OnBattle_Info(const GM_Pet_OnBattle_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_OnBattle_Info::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  m_battlehole_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_OnBattle_Info::~GM_Pet_OnBattle_Info() {
  SharedDtor();
}

void GM_Pet_OnBattle_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_OnBattle_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_OnBattle_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_OnBattle_Info_descriptor_;
}

const GM_Pet_OnBattle_Info& GM_Pet_OnBattle_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_OnBattle_Info* GM_Pet_OnBattle_Info::default_instance_ = NULL;

GM_Pet_OnBattle_Info* GM_Pet_OnBattle_Info::New() const {
  return new GM_Pet_OnBattle_Info;
}

void GM_Pet_OnBattle_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
    m_battlehole_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_OnBattle_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_BattleHole;
        break;
      }

      // optional int32 m_BattleHole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BattleHole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_battlehole_)));
          set_has_m_battlehole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_OnBattle_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  // optional int32 m_BattleHole = 2;
  if (has_m_battlehole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_battlehole(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_OnBattle_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  // optional int32 m_BattleHole = 2;
  if (has_m_battlehole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_battlehole(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_OnBattle_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int32 m_BattleHole = 2;
    if (has_m_battlehole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_battlehole());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_OnBattle_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_OnBattle_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_OnBattle_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_OnBattle_Info::MergeFrom(const GM_Pet_OnBattle_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_m_battlehole()) {
      set_m_battlehole(from.m_battlehole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_OnBattle_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_OnBattle_Info::CopyFrom(const GM_Pet_OnBattle_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_OnBattle_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_OnBattle_Info::Swap(GM_Pet_OnBattle_Info* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(m_battlehole_, other->m_battlehole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_OnBattle_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_OnBattle_Info_descriptor_;
  metadata.reflection = GM_Pet_OnBattle_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Info_Request::kMPetIdFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Info_Request::GM_Pet_Info_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Info_Request::InitAsDefaultInstance() {
}

GM_Pet_Info_Request::GM_Pet_Info_Request(const GM_Pet_Info_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Info_Request::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Info_Request::~GM_Pet_Info_Request() {
  SharedDtor();
}

void GM_Pet_Info_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Info_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Info_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Info_Request_descriptor_;
}

const GM_Pet_Info_Request& GM_Pet_Info_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Info_Request* GM_Pet_Info_Request::default_instance_ = NULL;

GM_Pet_Info_Request* GM_Pet_Info_Request::New() const {
  return new GM_Pet_Info_Request;
}

void GM_Pet_Info_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Info_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Info_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Info_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Info_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Info_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Info_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Info_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Info_Request::MergeFrom(const GM_Pet_Info_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Info_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Info_Request::CopyFrom(const GM_Pet_Info_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Info_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Info_Request::Swap(GM_Pet_Info_Request* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Info_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Info_Request_descriptor_;
  metadata.reflection = GM_Pet_Info_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Info_Return::kMResultFieldNumber;
const int GM_Pet_Info_Return::kMPetIdFieldNumber;
const int GM_Pet_Info_Return::kMPetLevelFieldNumber;
const int GM_Pet_Info_Return::kMPetEvolveLvlFieldNumber;
const int GM_Pet_Info_Return::kMFightvalueFieldNumber;
const int GM_Pet_Info_Return::kMQualityFieldNumber;
const int GM_Pet_Info_Return::kMFragmentFieldNumber;
const int GM_Pet_Info_Return::kDataFieldNumber;
const int GM_Pet_Info_Return::kMPetSkillsFieldNumber;
const int GM_Pet_Info_Return::kMPetRealSkillsFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Info_Return::GM_Pet_Info_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Info_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_Property_Info*>(&::GM_Property_Info::default_instance());
}

GM_Pet_Info_Return::GM_Pet_Info_Return(const GM_Pet_Info_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Info_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_petid_ = 0;
  m_petlevel_ = 0;
  m_petevolvelvl_ = 0;
  m_fightvalue_ = 0;
  m_quality_ = 0;
  m_fragment_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Info_Return::~GM_Pet_Info_Return() {
  SharedDtor();
}

void GM_Pet_Info_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_Pet_Info_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Info_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Info_Return_descriptor_;
}

const GM_Pet_Info_Return& GM_Pet_Info_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Info_Return* GM_Pet_Info_Return::default_instance_ = NULL;

GM_Pet_Info_Return* GM_Pet_Info_Return::New() const {
  return new GM_Pet_Info_Return;
}

void GM_Pet_Info_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_petid_ = 0;
    m_petlevel_ = 0;
    m_petevolvelvl_ = 0;
    m_fightvalue_ = 0;
    m_quality_ = 0;
    m_fragment_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GM_Property_Info::Clear();
    }
  }
  m_petskills_.Clear();
  m_petrealskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Info_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PetId;
        break;
      }

      // optional int32 m_PetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_PetLevel;
        break;
      }

      // optional int32 m_PetLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petlevel_)));
          set_has_m_petlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_PetEvolveLvl;
        break;
      }

      // optional int32 m_PetEvolveLvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetEvolveLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petevolvelvl_)));
          set_has_m_petevolvelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Fightvalue;
        break;
      }

      // optional int32 m_Fightvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Fightvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fightvalue_)));
          set_has_m_fightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_Quality;
        break;
      }

      // optional int32 m_Quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_fragment;
        break;
      }

      // optional int32 m_fragment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fragment_)));
          set_has_m_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional .GM_Property_Info data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_PetSkills;
        break;
      }

      // repeated .GM_Pet_Normal_Skill_Info m_PetSkills = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PetSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_petskills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_PetSkills;
        if (input->ExpectTag(82)) goto parse_m_PetRealSkills;
        break;
      }

      // repeated .GM_Pet_Realize_Skill_Info m_PetRealSkills = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_PetRealSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_petrealskills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_PetRealSkills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Info_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_petid(), output);
  }

  // optional int32 m_PetLevel = 3;
  if (has_m_petlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_petlevel(), output);
  }

  // optional int32 m_PetEvolveLvl = 4;
  if (has_m_petevolvelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_petevolvelvl(), output);
  }

  // optional int32 m_Fightvalue = 5;
  if (has_m_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_fightvalue(), output);
  }

  // optional int32 m_Quality = 6;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_quality(), output);
  }

  // optional int32 m_fragment = 7;
  if (has_m_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_fragment(), output);
  }

  // optional .GM_Property_Info data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(), output);
  }

  // repeated .GM_Pet_Normal_Skill_Info m_PetSkills = 9;
  for (int i = 0; i < this->m_petskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_petskills(i), output);
  }

  // repeated .GM_Pet_Realize_Skill_Info m_PetRealSkills = 10;
  for (int i = 0; i < this->m_petrealskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_petrealskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Info_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_petid(), target);
  }

  // optional int32 m_PetLevel = 3;
  if (has_m_petlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_petlevel(), target);
  }

  // optional int32 m_PetEvolveLvl = 4;
  if (has_m_petevolvelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_petevolvelvl(), target);
  }

  // optional int32 m_Fightvalue = 5;
  if (has_m_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_fightvalue(), target);
  }

  // optional int32 m_Quality = 6;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_quality(), target);
  }

  // optional int32 m_fragment = 7;
  if (has_m_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_fragment(), target);
  }

  // optional .GM_Property_Info data = 8;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(), target);
  }

  // repeated .GM_Pet_Normal_Skill_Info m_PetSkills = 9;
  for (int i = 0; i < this->m_petskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_petskills(i), target);
  }

  // repeated .GM_Pet_Realize_Skill_Info m_PetRealSkills = 10;
  for (int i = 0; i < this->m_petrealskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_petrealskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Info_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_PetId = 2;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int32 m_PetLevel = 3;
    if (has_m_petlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petlevel());
    }

    // optional int32 m_PetEvolveLvl = 4;
    if (has_m_petevolvelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petevolvelvl());
    }

    // optional int32 m_Fightvalue = 5;
    if (has_m_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fightvalue());
    }

    // optional int32 m_Quality = 6;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_fragment = 7;
    if (has_m_fragment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fragment());
    }

    // optional .GM_Property_Info data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated .GM_Pet_Normal_Skill_Info m_PetSkills = 9;
  total_size += 1 * this->m_petskills_size();
  for (int i = 0; i < this->m_petskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_petskills(i));
  }

  // repeated .GM_Pet_Realize_Skill_Info m_PetRealSkills = 10;
  total_size += 1 * this->m_petrealskills_size();
  for (int i = 0; i < this->m_petrealskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_petrealskills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Info_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Info_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Info_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Info_Return::MergeFrom(const GM_Pet_Info_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_petskills_.MergeFrom(from.m_petskills_);
  m_petrealskills_.MergeFrom(from.m_petrealskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_m_petlevel()) {
      set_m_petlevel(from.m_petlevel());
    }
    if (from.has_m_petevolvelvl()) {
      set_m_petevolvelvl(from.m_petevolvelvl());
    }
    if (from.has_m_fightvalue()) {
      set_m_fightvalue(from.m_fightvalue());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_fragment()) {
      set_m_fragment(from.m_fragment());
    }
    if (from.has_data()) {
      mutable_data()->::GM_Property_Info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Info_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Info_Return::CopyFrom(const GM_Pet_Info_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Info_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  for (int i = 0; i < m_petskills_size(); i++) {
    if (!this->m_petskills(i).IsInitialized()) return false;
  }
  for (int i = 0; i < m_petrealskills_size(); i++) {
    if (!this->m_petrealskills(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_Info_Return::Swap(GM_Pet_Info_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_petid_, other->m_petid_);
    std::swap(m_petlevel_, other->m_petlevel_);
    std::swap(m_petevolvelvl_, other->m_petevolvelvl_);
    std::swap(m_fightvalue_, other->m_fightvalue_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_fragment_, other->m_fragment_);
    std::swap(data_, other->data_);
    m_petskills_.Swap(&other->m_petskills_);
    m_petrealskills_.Swap(&other->m_petrealskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Info_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Info_Return_descriptor_;
  metadata.reflection = GM_Pet_Info_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Realize_Skill_Info::kMSkillIdFieldNumber;
const int GM_Pet_Realize_Skill_Info::kMSkillLvlFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Realize_Skill_Info::GM_Pet_Realize_Skill_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Realize_Skill_Info::InitAsDefaultInstance() {
}

GM_Pet_Realize_Skill_Info::GM_Pet_Realize_Skill_Info(const GM_Pet_Realize_Skill_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Realize_Skill_Info::SharedCtor() {
  _cached_size_ = 0;
  m_skillid_ = 0;
  m_skilllvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Realize_Skill_Info::~GM_Pet_Realize_Skill_Info() {
  SharedDtor();
}

void GM_Pet_Realize_Skill_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Realize_Skill_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Realize_Skill_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Realize_Skill_Info_descriptor_;
}

const GM_Pet_Realize_Skill_Info& GM_Pet_Realize_Skill_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Realize_Skill_Info* GM_Pet_Realize_Skill_Info::default_instance_ = NULL;

GM_Pet_Realize_Skill_Info* GM_Pet_Realize_Skill_Info::New() const {
  return new GM_Pet_Realize_Skill_Info;
}

void GM_Pet_Realize_Skill_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_skillid_ = 0;
    m_skilllvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Realize_Skill_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_SkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_SkillLvl;
        break;
      }

      // optional int32 m_SkillLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SkillLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skilllvl_)));
          set_has_m_skilllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Realize_Skill_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_SkillId = 1;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_skillid(), output);
  }

  // optional int32 m_SkillLvl = 2;
  if (has_m_skilllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skilllvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Realize_Skill_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_SkillId = 1;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_skillid(), target);
  }

  // optional int32 m_SkillLvl = 2;
  if (has_m_skilllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skilllvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Realize_Skill_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_SkillId = 1;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_SkillLvl = 2;
    if (has_m_skilllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skilllvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Realize_Skill_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Realize_Skill_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Realize_Skill_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Realize_Skill_Info::MergeFrom(const GM_Pet_Realize_Skill_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_skilllvl()) {
      set_m_skilllvl(from.m_skilllvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Realize_Skill_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Realize_Skill_Info::CopyFrom(const GM_Pet_Realize_Skill_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Realize_Skill_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Realize_Skill_Info::Swap(GM_Pet_Realize_Skill_Info* other) {
  if (other != this) {
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_skilllvl_, other->m_skilllvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Realize_Skill_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Realize_Skill_Info_descriptor_;
  metadata.reflection = GM_Pet_Realize_Skill_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Normal_Skill_Info::kMSkillIdFieldNumber;
const int GM_Pet_Normal_Skill_Info::kMSkillLvlFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Normal_Skill_Info::GM_Pet_Normal_Skill_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Normal_Skill_Info::InitAsDefaultInstance() {
}

GM_Pet_Normal_Skill_Info::GM_Pet_Normal_Skill_Info(const GM_Pet_Normal_Skill_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Normal_Skill_Info::SharedCtor() {
  _cached_size_ = 0;
  m_skillid_ = 0;
  m_skilllvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Normal_Skill_Info::~GM_Pet_Normal_Skill_Info() {
  SharedDtor();
}

void GM_Pet_Normal_Skill_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Normal_Skill_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Normal_Skill_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Normal_Skill_Info_descriptor_;
}

const GM_Pet_Normal_Skill_Info& GM_Pet_Normal_Skill_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Normal_Skill_Info* GM_Pet_Normal_Skill_Info::default_instance_ = NULL;

GM_Pet_Normal_Skill_Info* GM_Pet_Normal_Skill_Info::New() const {
  return new GM_Pet_Normal_Skill_Info;
}

void GM_Pet_Normal_Skill_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_skillid_ = 0;
    m_skilllvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Normal_Skill_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_SkillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_SkillLvl;
        break;
      }

      // optional int32 m_SkillLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SkillLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skilllvl_)));
          set_has_m_skilllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Normal_Skill_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_SkillId = 1;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_skillid(), output);
  }

  // optional int32 m_SkillLvl = 2;
  if (has_m_skilllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skilllvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Normal_Skill_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_SkillId = 1;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_skillid(), target);
  }

  // optional int32 m_SkillLvl = 2;
  if (has_m_skilllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skilllvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Normal_Skill_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_SkillId = 1;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_SkillLvl = 2;
    if (has_m_skilllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skilllvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Normal_Skill_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Normal_Skill_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Normal_Skill_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Normal_Skill_Info::MergeFrom(const GM_Pet_Normal_Skill_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_skilllvl()) {
      set_m_skilllvl(from.m_skilllvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Normal_Skill_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Normal_Skill_Info::CopyFrom(const GM_Pet_Normal_Skill_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Normal_Skill_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Normal_Skill_Info::Swap(GM_Pet_Normal_Skill_Info* other) {
  if (other != this) {
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_skilllvl_, other->m_skilllvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Normal_Skill_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Normal_Skill_Info_descriptor_;
  metadata.reflection = GM_Pet_Normal_Skill_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Detail_Property_Request::kMPetIdFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Detail_Property_Request::GM_Pet_Detail_Property_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Detail_Property_Request::InitAsDefaultInstance() {
}

GM_Pet_Detail_Property_Request::GM_Pet_Detail_Property_Request(const GM_Pet_Detail_Property_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Detail_Property_Request::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Detail_Property_Request::~GM_Pet_Detail_Property_Request() {
  SharedDtor();
}

void GM_Pet_Detail_Property_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Detail_Property_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Detail_Property_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Detail_Property_Request_descriptor_;
}

const GM_Pet_Detail_Property_Request& GM_Pet_Detail_Property_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Detail_Property_Request* GM_Pet_Detail_Property_Request::default_instance_ = NULL;

GM_Pet_Detail_Property_Request* GM_Pet_Detail_Property_Request::New() const {
  return new GM_Pet_Detail_Property_Request;
}

void GM_Pet_Detail_Property_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Detail_Property_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Detail_Property_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Detail_Property_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Detail_Property_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Detail_Property_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Detail_Property_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Detail_Property_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Detail_Property_Request::MergeFrom(const GM_Pet_Detail_Property_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Detail_Property_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Detail_Property_Request::CopyFrom(const GM_Pet_Detail_Property_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Detail_Property_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Detail_Property_Request::Swap(GM_Pet_Detail_Property_Request* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Detail_Property_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Detail_Property_Request_descriptor_;
  metadata.reflection = GM_Pet_Detail_Property_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Detail_Property_Return::kMResultFieldNumber;
const int GM_Pet_Detail_Property_Return::kMPetIdFieldNumber;
const int GM_Pet_Detail_Property_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Detail_Property_Return::GM_Pet_Detail_Property_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Detail_Property_Return::InitAsDefaultInstance() {
}

GM_Pet_Detail_Property_Return::GM_Pet_Detail_Property_Return(const GM_Pet_Detail_Property_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Detail_Property_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Detail_Property_Return::~GM_Pet_Detail_Property_Return() {
  SharedDtor();
}

void GM_Pet_Detail_Property_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Detail_Property_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Detail_Property_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Detail_Property_Return_descriptor_;
}

const GM_Pet_Detail_Property_Return& GM_Pet_Detail_Property_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Detail_Property_Return* GM_Pet_Detail_Property_Return::default_instance_ = NULL;

GM_Pet_Detail_Property_Return* GM_Pet_Detail_Property_Return::New() const {
  return new GM_Pet_Detail_Property_Return;
}

void GM_Pet_Detail_Property_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_petid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Detail_Property_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PetId;
        break;
      }

      // optional int32 m_PetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .GM_Pet_Property_Info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Detail_Property_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_petid(), output);
  }

  // repeated .GM_Pet_Property_Info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Detail_Property_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_petid(), target);
  }

  // repeated .GM_Pet_Property_Info data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Detail_Property_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_PetId = 2;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

  }
  // repeated .GM_Pet_Property_Info data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Detail_Property_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Detail_Property_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Detail_Property_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Detail_Property_Return::MergeFrom(const GM_Pet_Detail_Property_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Detail_Property_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Detail_Property_Return::CopyFrom(const GM_Pet_Detail_Property_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Detail_Property_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_Detail_Property_Return::Swap(GM_Pet_Detail_Property_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_petid_, other->m_petid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Detail_Property_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Detail_Property_Return_descriptor_;
  metadata.reflection = GM_Pet_Detail_Property_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Property_Info::kPropertyIdFieldNumber;
const int GM_Pet_Property_Info::kPropertyValueFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Property_Info::GM_Pet_Property_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Property_Info::InitAsDefaultInstance() {
}

GM_Pet_Property_Info::GM_Pet_Property_Info(const GM_Pet_Property_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Property_Info::SharedCtor() {
  _cached_size_ = 0;
  propertyid_ = 0;
  propertyvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Property_Info::~GM_Pet_Property_Info() {
  SharedDtor();
}

void GM_Pet_Property_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Property_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Property_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Property_Info_descriptor_;
}

const GM_Pet_Property_Info& GM_Pet_Property_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Property_Info* GM_Pet_Property_Info::default_instance_ = NULL;

GM_Pet_Property_Info* GM_Pet_Property_Info::New() const {
  return new GM_Pet_Property_Info;
}

void GM_Pet_Property_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propertyid_ = 0;
    propertyvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Property_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 propertyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propertyValue;
        break;
      }

      // optional int32 propertyValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyvalue_)));
          set_has_propertyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Property_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 propertyId = 1;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propertyid(), output);
  }

  // optional int32 propertyValue = 2;
  if (has_propertyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propertyvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Property_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 propertyId = 1;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propertyid(), target);
  }

  // optional int32 propertyValue = 2;
  if (has_propertyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propertyvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Property_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 propertyId = 1;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 propertyValue = 2;
    if (has_propertyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Property_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Property_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Property_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Property_Info::MergeFrom(const GM_Pet_Property_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_propertyvalue()) {
      set_propertyvalue(from.propertyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Property_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Property_Info::CopyFrom(const GM_Pet_Property_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Property_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Property_Info::Swap(GM_Pet_Property_Info* other) {
  if (other != this) {
    std::swap(propertyid_, other->propertyid_);
    std::swap(propertyvalue_, other->propertyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Property_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Property_Info_descriptor_;
  metadata.reflection = GM_Pet_Property_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Summon_Request::kMPetIdFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Summon_Request::GM_Pet_Summon_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Summon_Request::InitAsDefaultInstance() {
}

GM_Pet_Summon_Request::GM_Pet_Summon_Request(const GM_Pet_Summon_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Summon_Request::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Summon_Request::~GM_Pet_Summon_Request() {
  SharedDtor();
}

void GM_Pet_Summon_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Summon_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Summon_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Summon_Request_descriptor_;
}

const GM_Pet_Summon_Request& GM_Pet_Summon_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Summon_Request* GM_Pet_Summon_Request::default_instance_ = NULL;

GM_Pet_Summon_Request* GM_Pet_Summon_Request::New() const {
  return new GM_Pet_Summon_Request;
}

void GM_Pet_Summon_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Summon_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Summon_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Summon_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Summon_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Summon_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Summon_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Summon_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Summon_Request::MergeFrom(const GM_Pet_Summon_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Summon_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Summon_Request::CopyFrom(const GM_Pet_Summon_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Summon_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Summon_Request::Swap(GM_Pet_Summon_Request* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Summon_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Summon_Request_descriptor_;
  metadata.reflection = GM_Pet_Summon_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Summon_Return::kMResultFieldNumber;
const int GM_Pet_Summon_Return::kMPetIdFieldNumber;
const int GM_Pet_Summon_Return::kGmidFieldNumber;
const int GM_Pet_Summon_Return::kFightigFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Summon_Return::GM_Pet_Summon_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Summon_Return::InitAsDefaultInstance() {
}

GM_Pet_Summon_Return::GM_Pet_Summon_Return(const GM_Pet_Summon_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Summon_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_petid_ = 0;
  gmid_ = GOOGLE_LONGLONG(0);
  fightig_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Summon_Return::~GM_Pet_Summon_Return() {
  SharedDtor();
}

void GM_Pet_Summon_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Summon_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Summon_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Summon_Return_descriptor_;
}

const GM_Pet_Summon_Return& GM_Pet_Summon_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Summon_Return* GM_Pet_Summon_Return::default_instance_ = NULL;

GM_Pet_Summon_Return* GM_Pet_Summon_Return::New() const {
  return new GM_Pet_Summon_Return;
}

void GM_Pet_Summon_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_petid_ = 0;
    gmid_ = GOOGLE_LONGLONG(0);
    fightig_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Summon_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PetId;
        break;
      }

      // optional int32 m_PetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional int64 gmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightig;
        break;
      }

      // optional int32 fightig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightig_)));
          set_has_fightig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Summon_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_petid(), output);
  }

  // optional int64 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gmid(), output);
  }

  // optional int32 fightig = 4;
  if (has_fightig()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fightig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Summon_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_petid(), target);
  }

  // optional int64 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gmid(), target);
  }

  // optional int32 fightig = 4;
  if (has_fightig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fightig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Summon_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_PetId = 2;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int64 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmid());
    }

    // optional int32 fightig = 4;
    if (has_fightig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Summon_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Summon_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Summon_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Summon_Return::MergeFrom(const GM_Pet_Summon_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_fightig()) {
      set_fightig(from.fightig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Summon_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Summon_Return::CopyFrom(const GM_Pet_Summon_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Summon_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Summon_Return::Swap(GM_Pet_Summon_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_petid_, other->m_petid_);
    std::swap(gmid_, other->gmid_);
    std::swap(fightig_, other->fightig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Summon_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Summon_Return_descriptor_;
  metadata.reflection = GM_Pet_Summon_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Upgrade_Request::kMPetIdFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Upgrade_Request::GM_Pet_Upgrade_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Upgrade_Request::InitAsDefaultInstance() {
}

GM_Pet_Upgrade_Request::GM_Pet_Upgrade_Request(const GM_Pet_Upgrade_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Upgrade_Request::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Upgrade_Request::~GM_Pet_Upgrade_Request() {
  SharedDtor();
}

void GM_Pet_Upgrade_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Upgrade_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Upgrade_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Upgrade_Request_descriptor_;
}

const GM_Pet_Upgrade_Request& GM_Pet_Upgrade_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Upgrade_Request* GM_Pet_Upgrade_Request::default_instance_ = NULL;

GM_Pet_Upgrade_Request* GM_Pet_Upgrade_Request::New() const {
  return new GM_Pet_Upgrade_Request;
}

void GM_Pet_Upgrade_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Upgrade_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Upgrade_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Upgrade_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Upgrade_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Upgrade_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Upgrade_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Upgrade_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Upgrade_Request::MergeFrom(const GM_Pet_Upgrade_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Upgrade_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Upgrade_Request::CopyFrom(const GM_Pet_Upgrade_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Upgrade_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Upgrade_Request::Swap(GM_Pet_Upgrade_Request* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Upgrade_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Upgrade_Request_descriptor_;
  metadata.reflection = GM_Pet_Upgrade_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Upgrade_Return::kMResultFieldNumber;
const int GM_Pet_Upgrade_Return::kMPetIdFieldNumber;
const int GM_Pet_Upgrade_Return::kMLevelFieldNumber;
const int GM_Pet_Upgrade_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Upgrade_Return::GM_Pet_Upgrade_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Upgrade_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_Property_Info*>(&::GM_Property_Info::default_instance());
}

GM_Pet_Upgrade_Return::GM_Pet_Upgrade_Return(const GM_Pet_Upgrade_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Upgrade_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_petid_ = 0;
  m_level_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Upgrade_Return::~GM_Pet_Upgrade_Return() {
  SharedDtor();
}

void GM_Pet_Upgrade_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_Pet_Upgrade_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Upgrade_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Upgrade_Return_descriptor_;
}

const GM_Pet_Upgrade_Return& GM_Pet_Upgrade_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Upgrade_Return* GM_Pet_Upgrade_Return::default_instance_ = NULL;

GM_Pet_Upgrade_Return* GM_Pet_Upgrade_Return::New() const {
  return new GM_Pet_Upgrade_Return;
}

void GM_Pet_Upgrade_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_petid_ = 0;
    m_level_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GM_Property_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Upgrade_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PetId;
        break;
      }

      // optional int32 m_PetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_Level;
        break;
      }

      // optional int32 m_Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .GM_Property_Info data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Upgrade_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_petid(), output);
  }

  // optional int32 m_Level = 3;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_level(), output);
  }

  // optional .GM_Property_Info data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Upgrade_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_petid(), target);
  }

  // optional int32 m_Level = 3;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_level(), target);
  }

  // optional .GM_Property_Info data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Upgrade_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_PetId = 2;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int32 m_Level = 3;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional .GM_Property_Info data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Upgrade_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Upgrade_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Upgrade_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Upgrade_Return::MergeFrom(const GM_Pet_Upgrade_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_data()) {
      mutable_data()->::GM_Property_Info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Upgrade_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Upgrade_Return::CopyFrom(const GM_Pet_Upgrade_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Upgrade_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_Upgrade_Return::Swap(GM_Pet_Upgrade_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_petid_, other->m_petid_);
    std::swap(m_level_, other->m_level_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Upgrade_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Upgrade_Return_descriptor_;
  metadata.reflection = GM_Pet_Upgrade_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Evolve_Request::kMPetIdFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Evolve_Request::GM_Pet_Evolve_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Evolve_Request::InitAsDefaultInstance() {
}

GM_Pet_Evolve_Request::GM_Pet_Evolve_Request(const GM_Pet_Evolve_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Evolve_Request::SharedCtor() {
  _cached_size_ = 0;
  m_petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Evolve_Request::~GM_Pet_Evolve_Request() {
  SharedDtor();
}

void GM_Pet_Evolve_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Evolve_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Evolve_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Evolve_Request_descriptor_;
}

const GM_Pet_Evolve_Request& GM_Pet_Evolve_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Evolve_Request* GM_Pet_Evolve_Request::default_instance_ = NULL;

GM_Pet_Evolve_Request* GM_Pet_Evolve_Request::New() const {
  return new GM_Pet_Evolve_Request;
}

void GM_Pet_Evolve_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Evolve_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_PetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Evolve_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Evolve_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_PetId = 1;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Evolve_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_PetId = 1;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Evolve_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Evolve_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Evolve_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Evolve_Request::MergeFrom(const GM_Pet_Evolve_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Evolve_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Evolve_Request::CopyFrom(const GM_Pet_Evolve_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Evolve_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Evolve_Request::Swap(GM_Pet_Evolve_Request* other) {
  if (other != this) {
    std::swap(m_petid_, other->m_petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Evolve_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Evolve_Request_descriptor_;
  metadata.reflection = GM_Pet_Evolve_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Evolve_Return::kMResultFieldNumber;
const int GM_Pet_Evolve_Return::kMPetIdFieldNumber;
const int GM_Pet_Evolve_Return::kMEvolveLvlFieldNumber;
const int GM_Pet_Evolve_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Evolve_Return::GM_Pet_Evolve_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Evolve_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_Property_Info*>(&::GM_Property_Info::default_instance());
}

GM_Pet_Evolve_Return::GM_Pet_Evolve_Return(const GM_Pet_Evolve_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Evolve_Return::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 0;
  m_petid_ = 0;
  m_evolvelvl_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Evolve_Return::~GM_Pet_Evolve_Return() {
  SharedDtor();
}

void GM_Pet_Evolve_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_Pet_Evolve_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Evolve_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Evolve_Return_descriptor_;
}

const GM_Pet_Evolve_Return& GM_Pet_Evolve_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Evolve_Return* GM_Pet_Evolve_Return::default_instance_ = NULL;

GM_Pet_Evolve_Return* GM_Pet_Evolve_Return::New() const {
  return new GM_Pet_Evolve_Return;
}

void GM_Pet_Evolve_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_result_ = 0;
    m_petid_ = 0;
    m_evolvelvl_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GM_Property_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Evolve_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_result_)));
          set_has_m_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_PetId;
        break;
      }

      // optional int32 m_PetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_PetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_petid_)));
          set_has_m_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_EvolveLvl;
        break;
      }

      // optional int32 m_EvolveLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_EvolveLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_evolvelvl_)));
          set_has_m_evolvelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .GM_Property_Info data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Evolve_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_result(), output);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_petid(), output);
  }

  // optional int32 m_EvolveLvl = 3;
  if (has_m_evolvelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_evolvelvl(), output);
  }

  // optional .GM_Property_Info data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Evolve_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Result = 1;
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_result(), target);
  }

  // optional int32 m_PetId = 2;
  if (has_m_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_petid(), target);
  }

  // optional int32 m_EvolveLvl = 3;
  if (has_m_evolvelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_evolvelvl(), target);
  }

  // optional .GM_Property_Info data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Evolve_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Result = 1;
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_result());
    }

    // optional int32 m_PetId = 2;
    if (has_m_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_petid());
    }

    // optional int32 m_EvolveLvl = 3;
    if (has_m_evolvelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_evolvelvl());
    }

    // optional .GM_Property_Info data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Evolve_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Evolve_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Evolve_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Evolve_Return::MergeFrom(const GM_Pet_Evolve_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_petid()) {
      set_m_petid(from.m_petid());
    }
    if (from.has_m_evolvelvl()) {
      set_m_evolvelvl(from.m_evolvelvl());
    }
    if (from.has_data()) {
      mutable_data()->::GM_Property_Info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Evolve_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Evolve_Return::CopyFrom(const GM_Pet_Evolve_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Evolve_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_Evolve_Return::Swap(GM_Pet_Evolve_Return* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_petid_, other->m_petid_);
    std::swap(m_evolvelvl_, other->m_evolvelvl_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Evolve_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Evolve_Return_descriptor_;
  metadata.reflection = GM_Pet_Evolve_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Property_Info::kAttackFieldNumber;
const int GM_Property_Info::kHpFieldNumber;
#endif  // !_MSC_VER

GM_Property_Info::GM_Property_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Property_Info::InitAsDefaultInstance() {
}

GM_Property_Info::GM_Property_Info(const GM_Property_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Property_Info::SharedCtor() {
  _cached_size_ = 0;
  attack_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Property_Info::~GM_Property_Info() {
  SharedDtor();
}

void GM_Property_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Property_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Property_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Property_Info_descriptor_;
}

const GM_Property_Info& GM_Property_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Property_Info* GM_Property_Info::default_instance_ = NULL;

GM_Property_Info* GM_Property_Info::New() const {
  return new GM_Property_Info;
}

void GM_Property_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Property_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Property_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attack(), output);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Property_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attack(), target);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Property_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 attack = 1;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Property_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Property_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Property_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Property_Info::MergeFrom(const GM_Property_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Property_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Property_Info::CopyFrom(const GM_Property_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Property_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Property_Info::Swap(GM_Property_Info* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Property_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Property_Info_descriptor_;
  metadata.reflection = GM_Property_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Fate_Info::kResultFieldNumber;
const int GM_Pet_Fate_Info::kPetidFieldNumber;
const int GM_Pet_Fate_Info::kInfoFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Fate_Info::GM_Pet_Fate_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Fate_Info::InitAsDefaultInstance() {
}

GM_Pet_Fate_Info::GM_Pet_Fate_Info(const GM_Pet_Fate_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Fate_Info::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Fate_Info::~GM_Pet_Fate_Info() {
  SharedDtor();
}

void GM_Pet_Fate_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Fate_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Fate_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Fate_Info_descriptor_;
}

const GM_Pet_Fate_Info& GM_Pet_Fate_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Fate_Info* GM_Pet_Fate_Info::default_instance_ = NULL;

GM_Pet_Fate_Info* GM_Pet_Fate_Info::New() const {
  return new GM_Pet_Fate_Info;
}

void GM_Pet_Fate_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Fate_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // required int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // repeated .GM_Pet_Fate_Pet info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Fate_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // repeated .GM_Pet_Fate_Pet info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Fate_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // repeated .GM_Pet_Fate_Pet info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Fate_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  // repeated .GM_Pet_Fate_Pet info = 5;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Fate_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Fate_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Fate_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Fate_Info::MergeFrom(const GM_Pet_Fate_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Fate_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Fate_Info::CopyFrom(const GM_Pet_Fate_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Fate_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GM_Pet_Fate_Info::Swap(GM_Pet_Fate_Info* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Fate_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Fate_Info_descriptor_;
  metadata.reflection = GM_Pet_Fate_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Pet_Fate_Pet::kPetidFieldNumber;
const int GM_Pet_Fate_Pet::kLevelFieldNumber;
const int GM_Pet_Fate_Pet::kUnlockFieldNumber;
#endif  // !_MSC_VER

GM_Pet_Fate_Pet::GM_Pet_Fate_Pet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Pet_Fate_Pet::InitAsDefaultInstance() {
}

GM_Pet_Fate_Pet::GM_Pet_Fate_Pet(const GM_Pet_Fate_Pet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Pet_Fate_Pet::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  level_ = 0;
  unlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Pet_Fate_Pet::~GM_Pet_Fate_Pet() {
  SharedDtor();
}

void GM_Pet_Fate_Pet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Pet_Fate_Pet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Pet_Fate_Pet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Pet_Fate_Pet_descriptor_;
}

const GM_Pet_Fate_Pet& GM_Pet_Fate_Pet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Pet_Fate_Pet* GM_Pet_Fate_Pet::default_instance_ = NULL;

GM_Pet_Fate_Pet* GM_Pet_Fate_Pet::New() const {
  return new GM_Pet_Fate_Pet;
}

void GM_Pet_Fate_Pet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    level_ = 0;
    unlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Pet_Fate_Pet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Pet_Fate_Pet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 unlock = 3;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Pet_Fate_Pet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 unlock = 3;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Pet_Fate_Pet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 unlock = 3;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Pet_Fate_Pet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Pet_Fate_Pet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Pet_Fate_Pet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Pet_Fate_Pet::MergeFrom(const GM_Pet_Fate_Pet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Pet_Fate_Pet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Pet_Fate_Pet::CopyFrom(const GM_Pet_Fate_Pet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Pet_Fate_Pet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Pet_Fate_Pet::Swap(GM_Pet_Fate_Pet* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(level_, other->level_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Pet_Fate_Pet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Pet_Fate_Pet_descriptor_;
  metadata.reflection = GM_Pet_Fate_Pet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_UI_Request::kPetidFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_UI_Request::GM_PetEquip_UI_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_UI_Request::InitAsDefaultInstance() {
}

GM_PetEquip_UI_Request::GM_PetEquip_UI_Request(const GM_PetEquip_UI_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_UI_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_UI_Request::~GM_PetEquip_UI_Request() {
  SharedDtor();
}

void GM_PetEquip_UI_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_UI_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_UI_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_UI_Request_descriptor_;
}

const GM_PetEquip_UI_Request& GM_PetEquip_UI_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_UI_Request* GM_PetEquip_UI_Request::default_instance_ = NULL;

GM_PetEquip_UI_Request* GM_PetEquip_UI_Request::New() const {
  return new GM_PetEquip_UI_Request;
}

void GM_PetEquip_UI_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_UI_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_UI_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_UI_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_UI_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_UI_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_UI_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_UI_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_UI_Request::MergeFrom(const GM_PetEquip_UI_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_UI_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_UI_Request::CopyFrom(const GM_PetEquip_UI_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_UI_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_UI_Request::Swap(GM_PetEquip_UI_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_UI_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_UI_Request_descriptor_;
  metadata.reflection = GM_PetEquip_UI_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_UI_Return::kResultFieldNumber;
const int GM_PetEquip_UI_Return::kPetidFieldNumber;
const int GM_PetEquip_UI_Return::kExperienceFieldNumber;
const int GM_PetEquip_UI_Return::kPillNumFieldNumber;
const int GM_PetEquip_UI_Return::kDiamondTotalFieldNumber;
const int GM_PetEquip_UI_Return::kDiamondNeedFieldNumber;
const int GM_PetEquip_UI_Return::kDiscountFieldNumber;
const int GM_PetEquip_UI_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_UI_Return::GM_PetEquip_UI_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_UI_Return::InitAsDefaultInstance() {
}

GM_PetEquip_UI_Return::GM_PetEquip_UI_Return(const GM_PetEquip_UI_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_UI_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  experience_ = 0;
  pillnum_ = 0;
  diamondtotal_ = 0;
  diamondneed_ = 0;
  discount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_UI_Return::~GM_PetEquip_UI_Return() {
  SharedDtor();
}

void GM_PetEquip_UI_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_UI_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_UI_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_UI_Return_descriptor_;
}

const GM_PetEquip_UI_Return& GM_PetEquip_UI_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_UI_Return* GM_PetEquip_UI_Return::default_instance_ = NULL;

GM_PetEquip_UI_Return* GM_PetEquip_UI_Return::New() const {
  return new GM_PetEquip_UI_Return;
}

void GM_PetEquip_UI_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
    experience_ = 0;
    pillnum_ = 0;
    diamondtotal_ = 0;
    diamondneed_ = 0;
    discount_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_UI_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // optional int32 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pillNum;
        break;
      }

      // optional int32 pillNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pillnum_)));
          set_has_pillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamondTotal;
        break;
      }

      // optional int32 diamondTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondtotal_)));
          set_has_diamondtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamondNeed;
        break;
      }

      // optional int32 diamondNeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondneed_)));
          set_has_diamondneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_discount;
        break;
      }

      // optional float discount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .GM_PetEquip_Hole_Detail data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_UI_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->experience(), output);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pillnum(), output);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamondtotal(), output);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamondneed(), output);
  }

  // optional float discount = 7;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->discount(), output);
  }

  // repeated .GM_PetEquip_Hole_Detail data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_UI_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->experience(), target);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pillnum(), target);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamondtotal(), target);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->diamondneed(), target);
  }

  // optional float discount = 7;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->discount(), target);
  }

  // repeated .GM_PetEquip_Hole_Detail data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_UI_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional int32 pillNum = 4;
    if (has_pillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pillnum());
    }

    // optional int32 diamondTotal = 5;
    if (has_diamondtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondtotal());
    }

    // optional int32 diamondNeed = 6;
    if (has_diamondneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondneed());
    }

    // optional float discount = 7;
    if (has_discount()) {
      total_size += 1 + 4;
    }

  }
  // repeated .GM_PetEquip_Hole_Detail data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_UI_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_UI_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_UI_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_UI_Return::MergeFrom(const GM_PetEquip_UI_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_pillnum()) {
      set_pillnum(from.pillnum());
    }
    if (from.has_diamondtotal()) {
      set_diamondtotal(from.diamondtotal());
    }
    if (from.has_diamondneed()) {
      set_diamondneed(from.diamondneed());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_UI_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_UI_Return::CopyFrom(const GM_PetEquip_UI_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_UI_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PetEquip_UI_Return::Swap(GM_PetEquip_UI_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    std::swap(experience_, other->experience_);
    std::swap(pillnum_, other->pillnum_);
    std::swap(diamondtotal_, other->diamondtotal_);
    std::swap(diamondneed_, other->diamondneed_);
    std::swap(discount_, other->discount_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_UI_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_UI_Return_descriptor_;
  metadata.reflection = GM_PetEquip_UI_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Hole_Detail::kHolenumFieldNumber;
const int GM_PetEquip_Hole_Detail::kPropertyIdFieldNumber;
const int GM_PetEquip_Hole_Detail::kPropertyLevelFieldNumber;
const int GM_PetEquip_Hole_Detail::kMaxlevelFieldNumber;
const int GM_PetEquip_Hole_Detail::kStateFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Hole_Detail::GM_PetEquip_Hole_Detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Hole_Detail::InitAsDefaultInstance() {
}

GM_PetEquip_Hole_Detail::GM_PetEquip_Hole_Detail(const GM_PetEquip_Hole_Detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Hole_Detail::SharedCtor() {
  _cached_size_ = 0;
  holenum_ = 0;
  propertyid_ = 0;
  propertylevel_ = 0;
  maxlevel_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Hole_Detail::~GM_PetEquip_Hole_Detail() {
  SharedDtor();
}

void GM_PetEquip_Hole_Detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Hole_Detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Hole_Detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Hole_Detail_descriptor_;
}

const GM_PetEquip_Hole_Detail& GM_PetEquip_Hole_Detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Hole_Detail* GM_PetEquip_Hole_Detail::default_instance_ = NULL;

GM_PetEquip_Hole_Detail* GM_PetEquip_Hole_Detail::New() const {
  return new GM_PetEquip_Hole_Detail;
}

void GM_PetEquip_Hole_Detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    holenum_ = 0;
    propertyid_ = 0;
    propertylevel_ = 0;
    maxlevel_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Hole_Detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 holenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propertyId;
        break;
      }

      // optional int32 propertyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_propertyLevel;
        break;
      }

      // optional int32 propertyLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertylevel_)));
          set_has_propertylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxlevel;
        break;
      }

      // optional int32 maxlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Hole_Detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holenum(), output);
  }

  // optional int32 propertyId = 2;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propertyid(), output);
  }

  // optional int32 propertyLevel = 3;
  if (has_propertylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->propertylevel(), output);
  }

  // optional int32 maxlevel = 4;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxlevel(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Hole_Detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holenum(), target);
  }

  // optional int32 propertyId = 2;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propertyid(), target);
  }

  // optional int32 propertyLevel = 3;
  if (has_propertylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->propertylevel(), target);
  }

  // optional int32 maxlevel = 4;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxlevel(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Hole_Detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 holenum = 1;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 propertyId = 2;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 propertyLevel = 3;
    if (has_propertylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertylevel());
    }

    // optional int32 maxlevel = 4;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Hole_Detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Hole_Detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Hole_Detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Hole_Detail::MergeFrom(const GM_PetEquip_Hole_Detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_propertylevel()) {
      set_propertylevel(from.propertylevel());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Hole_Detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Hole_Detail::CopyFrom(const GM_PetEquip_Hole_Detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Hole_Detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Hole_Detail::Swap(GM_PetEquip_Hole_Detail* other) {
  if (other != this) {
    std::swap(holenum_, other->holenum_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(propertylevel_, other->propertylevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Hole_Detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Hole_Detail_descriptor_;
  metadata.reflection = GM_PetEquip_Hole_Detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Upgrade_Request::kPetidFieldNumber;
const int GM_PetEquip_Upgrade_Request::kHolenumFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Upgrade_Request::GM_PetEquip_Upgrade_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Upgrade_Request::InitAsDefaultInstance() {
}

GM_PetEquip_Upgrade_Request::GM_PetEquip_Upgrade_Request(const GM_PetEquip_Upgrade_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  holenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Upgrade_Request::~GM_PetEquip_Upgrade_Request() {
  SharedDtor();
}

void GM_PetEquip_Upgrade_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Upgrade_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Upgrade_Request_descriptor_;
}

const GM_PetEquip_Upgrade_Request& GM_PetEquip_Upgrade_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Upgrade_Request* GM_PetEquip_Upgrade_Request::default_instance_ = NULL;

GM_PetEquip_Upgrade_Request* GM_PetEquip_Upgrade_Request::New() const {
  return new GM_PetEquip_Upgrade_Request;
}

void GM_PetEquip_Upgrade_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    holenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Upgrade_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Upgrade_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Upgrade_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Upgrade_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Upgrade_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Upgrade_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Upgrade_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Upgrade_Request::MergeFrom(const GM_PetEquip_Upgrade_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Upgrade_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Request::CopyFrom(const GM_PetEquip_Upgrade_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Upgrade_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Upgrade_Request::Swap(GM_PetEquip_Upgrade_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(holenum_, other->holenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Upgrade_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Upgrade_Request_descriptor_;
  metadata.reflection = GM_PetEquip_Upgrade_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Upgrade_Return::kResultFieldNumber;
const int GM_PetEquip_Upgrade_Return::kPetidFieldNumber;
const int GM_PetEquip_Upgrade_Return::kHolenumFieldNumber;
const int GM_PetEquip_Upgrade_Return::kPropertyIdFieldNumber;
const int GM_PetEquip_Upgrade_Return::kPropertyLevelFieldNumber;
const int GM_PetEquip_Upgrade_Return::kExperienceFieldNumber;
const int GM_PetEquip_Upgrade_Return::kCanupgradeFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Upgrade_Return::GM_PetEquip_Upgrade_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Upgrade_Return::InitAsDefaultInstance() {
}

GM_PetEquip_Upgrade_Return::GM_PetEquip_Upgrade_Return(const GM_PetEquip_Upgrade_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  holenum_ = 0;
  propertyid_ = 0;
  propertylevel_ = 0;
  experience_ = 0;
  canupgrade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Upgrade_Return::~GM_PetEquip_Upgrade_Return() {
  SharedDtor();
}

void GM_PetEquip_Upgrade_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Upgrade_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Upgrade_Return_descriptor_;
}

const GM_PetEquip_Upgrade_Return& GM_PetEquip_Upgrade_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Upgrade_Return* GM_PetEquip_Upgrade_Return::default_instance_ = NULL;

GM_PetEquip_Upgrade_Return* GM_PetEquip_Upgrade_Return::New() const {
  return new GM_PetEquip_Upgrade_Return;
}

void GM_PetEquip_Upgrade_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
    holenum_ = 0;
    propertyid_ = 0;
    propertylevel_ = 0;
    experience_ = 0;
    canupgrade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Upgrade_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propertyId;
        break;
      }

      // optional int32 propertyId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_propertyLevel;
        break;
      }

      // optional int32 propertyLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertylevel_)));
          set_has_propertylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_experience;
        break;
      }

      // optional int32 experience = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_canupgrade;
        break;
      }

      // optional int32 canupgrade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canupgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canupgrade_)));
          set_has_canupgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Upgrade_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 propertyId = 4;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->propertyid(), output);
  }

  // optional int32 propertyLevel = 5;
  if (has_propertylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->propertylevel(), output);
  }

  // optional int32 experience = 6;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->experience(), output);
  }

  // optional int32 canupgrade = 7;
  if (has_canupgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->canupgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Upgrade_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 propertyId = 4;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->propertyid(), target);
  }

  // optional int32 propertyLevel = 5;
  if (has_propertylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->propertylevel(), target);
  }

  // optional int32 experience = 6;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->experience(), target);
  }

  // optional int32 canupgrade = 7;
  if (has_canupgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->canupgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Upgrade_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 propertyId = 4;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 propertyLevel = 5;
    if (has_propertylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertylevel());
    }

    // optional int32 experience = 6;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional int32 canupgrade = 7;
    if (has_canupgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canupgrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Upgrade_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Upgrade_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Upgrade_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Upgrade_Return::MergeFrom(const GM_PetEquip_Upgrade_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_propertylevel()) {
      set_propertylevel(from.propertylevel());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_canupgrade()) {
      set_canupgrade(from.canupgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Upgrade_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Return::CopyFrom(const GM_PetEquip_Upgrade_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Upgrade_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Upgrade_Return::Swap(GM_PetEquip_Upgrade_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    std::swap(holenum_, other->holenum_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(propertylevel_, other->propertylevel_);
    std::swap(experience_, other->experience_);
    std::swap(canupgrade_, other->canupgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Upgrade_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Upgrade_Return_descriptor_;
  metadata.reflection = GM_PetEquip_Upgrade_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Obtain_Request::kPetidFieldNumber;
const int GM_PetEquip_Obtain_Request::kObtainTypeFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Obtain_Request::GM_PetEquip_Obtain_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Obtain_Request::InitAsDefaultInstance() {
}

GM_PetEquip_Obtain_Request::GM_PetEquip_Obtain_Request(const GM_PetEquip_Obtain_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Obtain_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  obtaintype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Obtain_Request::~GM_PetEquip_Obtain_Request() {
  SharedDtor();
}

void GM_PetEquip_Obtain_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Obtain_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Obtain_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Obtain_Request_descriptor_;
}

const GM_PetEquip_Obtain_Request& GM_PetEquip_Obtain_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Obtain_Request* GM_PetEquip_Obtain_Request::default_instance_ = NULL;

GM_PetEquip_Obtain_Request* GM_PetEquip_Obtain_Request::New() const {
  return new GM_PetEquip_Obtain_Request;
}

void GM_PetEquip_Obtain_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    obtaintype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Obtain_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obtainType;
        break;
      }

      // optional int32 obtainType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obtaintype_)));
          set_has_obtaintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Obtain_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // optional int32 obtainType = 2;
  if (has_obtaintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obtaintype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Obtain_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // optional int32 obtainType = 2;
  if (has_obtaintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obtaintype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Obtain_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 obtainType = 2;
    if (has_obtaintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obtaintype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Obtain_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Obtain_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Obtain_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Obtain_Request::MergeFrom(const GM_PetEquip_Obtain_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_obtaintype()) {
      set_obtaintype(from.obtaintype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Obtain_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Obtain_Request::CopyFrom(const GM_PetEquip_Obtain_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Obtain_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Obtain_Request::Swap(GM_PetEquip_Obtain_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(obtaintype_, other->obtaintype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Obtain_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Obtain_Request_descriptor_;
  metadata.reflection = GM_PetEquip_Obtain_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Obtain_Return::kResultFieldNumber;
const int GM_PetEquip_Obtain_Return::kPetidFieldNumber;
const int GM_PetEquip_Obtain_Return::kObtainTypeFieldNumber;
const int GM_PetEquip_Obtain_Return::kPillNumFieldNumber;
const int GM_PetEquip_Obtain_Return::kDiamondTotalFieldNumber;
const int GM_PetEquip_Obtain_Return::kDiamondNeedFieldNumber;
const int GM_PetEquip_Obtain_Return::kGetexpFieldNumber;
const int GM_PetEquip_Obtain_Return::kExperienceFieldNumber;
const int GM_PetEquip_Obtain_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Obtain_Return::GM_PetEquip_Obtain_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Obtain_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_PetEquip_Hole_Detail*>(&::GM_PetEquip_Hole_Detail::default_instance());
}

GM_PetEquip_Obtain_Return::GM_PetEquip_Obtain_Return(const GM_PetEquip_Obtain_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Obtain_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  obtaintype_ = 0;
  pillnum_ = 0;
  diamondtotal_ = 0;
  diamondneed_ = 0;
  getexp_ = 0;
  experience_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Obtain_Return::~GM_PetEquip_Obtain_Return() {
  SharedDtor();
}

void GM_PetEquip_Obtain_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_PetEquip_Obtain_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Obtain_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Obtain_Return_descriptor_;
}

const GM_PetEquip_Obtain_Return& GM_PetEquip_Obtain_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Obtain_Return* GM_PetEquip_Obtain_Return::default_instance_ = NULL;

GM_PetEquip_Obtain_Return* GM_PetEquip_Obtain_Return::New() const {
  return new GM_PetEquip_Obtain_Return;
}

void GM_PetEquip_Obtain_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
    obtaintype_ = 0;
    pillnum_ = 0;
    diamondtotal_ = 0;
    diamondneed_ = 0;
    getexp_ = 0;
    experience_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::GM_PetEquip_Hole_Detail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Obtain_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obtainType;
        break;
      }

      // optional int32 obtainType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obtaintype_)));
          set_has_obtaintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pillNum;
        break;
      }

      // optional int32 pillNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pillnum_)));
          set_has_pillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamondTotal;
        break;
      }

      // optional int32 diamondTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondtotal_)));
          set_has_diamondtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamondNeed;
        break;
      }

      // optional int32 diamondNeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondneed_)));
          set_has_diamondneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getexp;
        break;
      }

      // optional int32 getexp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getexp_)));
          set_has_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_experience;
        break;
      }

      // optional int32 experience = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional .GM_PetEquip_Hole_Detail data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Obtain_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 obtainType = 3;
  if (has_obtaintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obtaintype(), output);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pillnum(), output);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamondtotal(), output);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamondneed(), output);
  }

  // optional int32 getexp = 7;
  if (has_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->getexp(), output);
  }

  // optional int32 experience = 8;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->experience(), output);
  }

  // optional .GM_PetEquip_Hole_Detail data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Obtain_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 obtainType = 3;
  if (has_obtaintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obtaintype(), target);
  }

  // optional int32 pillNum = 4;
  if (has_pillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pillnum(), target);
  }

  // optional int32 diamondTotal = 5;
  if (has_diamondtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamondtotal(), target);
  }

  // optional int32 diamondNeed = 6;
  if (has_diamondneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->diamondneed(), target);
  }

  // optional int32 getexp = 7;
  if (has_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->getexp(), target);
  }

  // optional int32 experience = 8;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->experience(), target);
  }

  // optional .GM_PetEquip_Hole_Detail data = 9;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Obtain_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 obtainType = 3;
    if (has_obtaintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obtaintype());
    }

    // optional int32 pillNum = 4;
    if (has_pillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pillnum());
    }

    // optional int32 diamondTotal = 5;
    if (has_diamondtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondtotal());
    }

    // optional int32 diamondNeed = 6;
    if (has_diamondneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondneed());
    }

    // optional int32 getexp = 7;
    if (has_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getexp());
    }

    // optional int32 experience = 8;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GM_PetEquip_Hole_Detail data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Obtain_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Obtain_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Obtain_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Obtain_Return::MergeFrom(const GM_PetEquip_Obtain_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_obtaintype()) {
      set_obtaintype(from.obtaintype());
    }
    if (from.has_pillnum()) {
      set_pillnum(from.pillnum());
    }
    if (from.has_diamondtotal()) {
      set_diamondtotal(from.diamondtotal());
    }
    if (from.has_diamondneed()) {
      set_diamondneed(from.diamondneed());
    }
    if (from.has_getexp()) {
      set_getexp(from.getexp());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      mutable_data()->::GM_PetEquip_Hole_Detail::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Obtain_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Obtain_Return::CopyFrom(const GM_PetEquip_Obtain_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Obtain_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_PetEquip_Obtain_Return::Swap(GM_PetEquip_Obtain_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    std::swap(obtaintype_, other->obtaintype_);
    std::swap(pillnum_, other->pillnum_);
    std::swap(diamondtotal_, other->diamondtotal_);
    std::swap(diamondneed_, other->diamondneed_);
    std::swap(getexp_, other->getexp_);
    std::swap(experience_, other->experience_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Obtain_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Obtain_Return_descriptor_;
  metadata.reflection = GM_PetEquip_Obtain_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_AddSwap_Request::kPetidFieldNumber;
const int GM_PetEquip_AddSwap_Request::kHolenumFieldNumber;
const int GM_PetEquip_AddSwap_Request::kReplaceholenumFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_AddSwap_Request::GM_PetEquip_AddSwap_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_AddSwap_Request::InitAsDefaultInstance() {
}

GM_PetEquip_AddSwap_Request::GM_PetEquip_AddSwap_Request(const GM_PetEquip_AddSwap_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_AddSwap_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  holenum_ = 0;
  replaceholenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_AddSwap_Request::~GM_PetEquip_AddSwap_Request() {
  SharedDtor();
}

void GM_PetEquip_AddSwap_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_AddSwap_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_AddSwap_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_AddSwap_Request_descriptor_;
}

const GM_PetEquip_AddSwap_Request& GM_PetEquip_AddSwap_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_AddSwap_Request* GM_PetEquip_AddSwap_Request::default_instance_ = NULL;

GM_PetEquip_AddSwap_Request* GM_PetEquip_AddSwap_Request::New() const {
  return new GM_PetEquip_AddSwap_Request;
}

void GM_PetEquip_AddSwap_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    holenum_ = 0;
    replaceholenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_AddSwap_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // required int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replaceholenum;
        break;
      }

      // required int32 replaceholenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replaceholenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replaceholenum_)));
          set_has_replaceholenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_AddSwap_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // required int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  // required int32 replaceholenum = 3;
  if (has_replaceholenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replaceholenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_AddSwap_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // required int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  // required int32 replaceholenum = 3;
  if (has_replaceholenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replaceholenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_AddSwap_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // required int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // required int32 replaceholenum = 3;
    if (has_replaceholenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replaceholenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_AddSwap_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_AddSwap_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_AddSwap_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_AddSwap_Request::MergeFrom(const GM_PetEquip_AddSwap_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_replaceholenum()) {
      set_replaceholenum(from.replaceholenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_AddSwap_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_AddSwap_Request::CopyFrom(const GM_PetEquip_AddSwap_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_AddSwap_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GM_PetEquip_AddSwap_Request::Swap(GM_PetEquip_AddSwap_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(holenum_, other->holenum_);
    std::swap(replaceholenum_, other->replaceholenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_AddSwap_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_AddSwap_Request_descriptor_;
  metadata.reflection = GM_PetEquip_AddSwap_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_AddSwap_Return::kResultFieldNumber;
const int GM_PetEquip_AddSwap_Return::kPetidFieldNumber;
const int GM_PetEquip_AddSwap_Return::kHolenumFieldNumber;
const int GM_PetEquip_AddSwap_Return::kReplaceholenumFieldNumber;
const int GM_PetEquip_AddSwap_Return::kGetexpFieldNumber;
const int GM_PetEquip_AddSwap_Return::kExperienceFieldNumber;
const int GM_PetEquip_AddSwap_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_AddSwap_Return::GM_PetEquip_AddSwap_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_AddSwap_Return::InitAsDefaultInstance() {
}

GM_PetEquip_AddSwap_Return::GM_PetEquip_AddSwap_Return(const GM_PetEquip_AddSwap_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_AddSwap_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  holenum_ = 0;
  replaceholenum_ = 0;
  getexp_ = 0;
  experience_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_AddSwap_Return::~GM_PetEquip_AddSwap_Return() {
  SharedDtor();
}

void GM_PetEquip_AddSwap_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_AddSwap_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_AddSwap_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_AddSwap_Return_descriptor_;
}

const GM_PetEquip_AddSwap_Return& GM_PetEquip_AddSwap_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_AddSwap_Return* GM_PetEquip_AddSwap_Return::default_instance_ = NULL;

GM_PetEquip_AddSwap_Return* GM_PetEquip_AddSwap_Return::New() const {
  return new GM_PetEquip_AddSwap_Return;
}

void GM_PetEquip_AddSwap_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
    holenum_ = 0;
    replaceholenum_ = 0;
    getexp_ = 0;
    experience_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_AddSwap_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_replaceholenum;
        break;
      }

      // optional int32 replaceholenum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replaceholenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replaceholenum_)));
          set_has_replaceholenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getexp;
        break;
      }

      // optional int32 getexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getexp_)));
          set_has_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_experience;
        break;
      }

      // optional int32 experience = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .GM_PetEquip_Hole_Detail data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_AddSwap_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 replaceholenum = 4;
  if (has_replaceholenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replaceholenum(), output);
  }

  // optional int32 getexp = 5;
  if (has_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->getexp(), output);
  }

  // optional int32 experience = 6;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->experience(), output);
  }

  // repeated .GM_PetEquip_Hole_Detail data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_AddSwap_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 replaceholenum = 4;
  if (has_replaceholenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replaceholenum(), target);
  }

  // optional int32 getexp = 5;
  if (has_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->getexp(), target);
  }

  // optional int32 experience = 6;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->experience(), target);
  }

  // repeated .GM_PetEquip_Hole_Detail data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_AddSwap_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 replaceholenum = 4;
    if (has_replaceholenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replaceholenum());
    }

    // optional int32 getexp = 5;
    if (has_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getexp());
    }

    // optional int32 experience = 6;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

  }
  // repeated .GM_PetEquip_Hole_Detail data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_AddSwap_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_AddSwap_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_AddSwap_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_AddSwap_Return::MergeFrom(const GM_PetEquip_AddSwap_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_replaceholenum()) {
      set_replaceholenum(from.replaceholenum());
    }
    if (from.has_getexp()) {
      set_getexp(from.getexp());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_AddSwap_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_AddSwap_Return::CopyFrom(const GM_PetEquip_AddSwap_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_AddSwap_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PetEquip_AddSwap_Return::Swap(GM_PetEquip_AddSwap_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    std::swap(holenum_, other->holenum_);
    std::swap(replaceholenum_, other->replaceholenum_);
    std::swap(getexp_, other->getexp_);
    std::swap(experience_, other->experience_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_AddSwap_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_AddSwap_Return_descriptor_;
  metadata.reflection = GM_PetEquip_AddSwap_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Store_Request::kPetidFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Store_Request::GM_PetEquip_Store_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Store_Request::InitAsDefaultInstance() {
}

GM_PetEquip_Store_Request::GM_PetEquip_Store_Request(const GM_PetEquip_Store_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Store_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Store_Request::~GM_PetEquip_Store_Request() {
  SharedDtor();
}

void GM_PetEquip_Store_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Store_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Store_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Store_Request_descriptor_;
}

const GM_PetEquip_Store_Request& GM_PetEquip_Store_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Store_Request* GM_PetEquip_Store_Request::default_instance_ = NULL;

GM_PetEquip_Store_Request* GM_PetEquip_Store_Request::New() const {
  return new GM_PetEquip_Store_Request;
}

void GM_PetEquip_Store_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Store_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Store_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Store_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Store_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Store_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Store_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Store_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Store_Request::MergeFrom(const GM_PetEquip_Store_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Store_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Store_Request::CopyFrom(const GM_PetEquip_Store_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Store_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Store_Request::Swap(GM_PetEquip_Store_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Store_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Store_Request_descriptor_;
  metadata.reflection = GM_PetEquip_Store_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Store_Return::kResultFieldNumber;
const int GM_PetEquip_Store_Return::kPetidFieldNumber;
const int GM_PetEquip_Store_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Store_Return::GM_PetEquip_Store_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Store_Return::InitAsDefaultInstance() {
  data_ = const_cast< ::GM_PetEquip_Hole_Detail*>(&::GM_PetEquip_Hole_Detail::default_instance());
}

GM_PetEquip_Store_Return::GM_PetEquip_Store_Return(const GM_PetEquip_Store_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Store_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Store_Return::~GM_PetEquip_Store_Return() {
  SharedDtor();
}

void GM_PetEquip_Store_Return::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GM_PetEquip_Store_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Store_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Store_Return_descriptor_;
}

const GM_PetEquip_Store_Return& GM_PetEquip_Store_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Store_Return* GM_PetEquip_Store_Return::default_instance_ = NULL;

GM_PetEquip_Store_Return* GM_PetEquip_Store_Return::New() const {
  return new GM_PetEquip_Store_Return;
}

void GM_PetEquip_Store_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GM_PetEquip_Hole_Detail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Store_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .GM_PetEquip_Hole_Detail data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Store_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional .GM_PetEquip_Hole_Detail data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Store_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional .GM_PetEquip_Hole_Detail data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Store_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional .GM_PetEquip_Hole_Detail data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Store_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Store_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Store_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Store_Return::MergeFrom(const GM_PetEquip_Store_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_data()) {
      mutable_data()->::GM_PetEquip_Hole_Detail::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Store_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Store_Return::CopyFrom(const GM_PetEquip_Store_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Store_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GM_PetEquip_Store_Return::Swap(GM_PetEquip_Store_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Store_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Store_Return_descriptor_;
  metadata.reflection = GM_PetEquip_Store_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Refine_Request::kPetidFieldNumber;
const int GM_PetEquip_Refine_Request::kHolenumFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Refine_Request::GM_PetEquip_Refine_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Refine_Request::InitAsDefaultInstance() {
}

GM_PetEquip_Refine_Request::GM_PetEquip_Refine_Request(const GM_PetEquip_Refine_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Refine_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  holenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Refine_Request::~GM_PetEquip_Refine_Request() {
  SharedDtor();
}

void GM_PetEquip_Refine_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Refine_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Refine_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Refine_Request_descriptor_;
}

const GM_PetEquip_Refine_Request& GM_PetEquip_Refine_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Refine_Request* GM_PetEquip_Refine_Request::default_instance_ = NULL;

GM_PetEquip_Refine_Request* GM_PetEquip_Refine_Request::New() const {
  return new GM_PetEquip_Refine_Request;
}

void GM_PetEquip_Refine_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    holenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Refine_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Refine_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Refine_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Refine_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Refine_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Refine_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Refine_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Refine_Request::MergeFrom(const GM_PetEquip_Refine_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Refine_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Refine_Request::CopyFrom(const GM_PetEquip_Refine_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Refine_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Refine_Request::Swap(GM_PetEquip_Refine_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(holenum_, other->holenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Refine_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Refine_Request_descriptor_;
  metadata.reflection = GM_PetEquip_Refine_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Refine_Return::kResultFieldNumber;
const int GM_PetEquip_Refine_Return::kPetidFieldNumber;
const int GM_PetEquip_Refine_Return::kHolenumFieldNumber;
const int GM_PetEquip_Refine_Return::kGetexpFieldNumber;
const int GM_PetEquip_Refine_Return::kExperienceFieldNumber;
const int GM_PetEquip_Refine_Return::kDataFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Refine_Return::GM_PetEquip_Refine_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Refine_Return::InitAsDefaultInstance() {
}

GM_PetEquip_Refine_Return::GM_PetEquip_Refine_Return(const GM_PetEquip_Refine_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Refine_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  petid_ = 0;
  holenum_ = 0;
  getexp_ = 0;
  experience_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Refine_Return::~GM_PetEquip_Refine_Return() {
  SharedDtor();
}

void GM_PetEquip_Refine_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Refine_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Refine_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Refine_Return_descriptor_;
}

const GM_PetEquip_Refine_Return& GM_PetEquip_Refine_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Refine_Return* GM_PetEquip_Refine_Return::default_instance_ = NULL;

GM_PetEquip_Refine_Return* GM_PetEquip_Refine_Return::New() const {
  return new GM_PetEquip_Refine_Return;
}

void GM_PetEquip_Refine_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    petid_ = 0;
    holenum_ = 0;
    getexp_ = 0;
    experience_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Refine_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int32 petid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getexp;
        break;
      }

      // optional int32 getexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getexp_)));
          set_has_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_experience;
        break;
      }

      // optional int32 experience = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .GM_PetEquip_Hole_Detail data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Refine_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->petid(), output);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->holenum(), output);
  }

  // optional int32 getexp = 4;
  if (has_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getexp(), output);
  }

  // optional int32 experience = 5;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->experience(), output);
  }

  // repeated .GM_PetEquip_Hole_Detail data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Refine_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->petid(), target);
  }

  // optional int32 holenum = 3;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->holenum(), target);
  }

  // optional int32 getexp = 4;
  if (has_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getexp(), target);
  }

  // optional int32 experience = 5;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->experience(), target);
  }

  // repeated .GM_PetEquip_Hole_Detail data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Refine_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 holenum = 3;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 getexp = 4;
    if (has_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getexp());
    }

    // optional int32 experience = 5;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

  }
  // repeated .GM_PetEquip_Hole_Detail data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Refine_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Refine_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Refine_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Refine_Return::MergeFrom(const GM_PetEquip_Refine_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_getexp()) {
      set_getexp(from.getexp());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Refine_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Refine_Return::CopyFrom(const GM_PetEquip_Refine_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Refine_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PetEquip_Refine_Return::Swap(GM_PetEquip_Refine_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(petid_, other->petid_);
    std::swap(holenum_, other->holenum_);
    std::swap(getexp_, other->getexp_);
    std::swap(experience_, other->experience_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Refine_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Refine_Return_descriptor_;
  metadata.reflection = GM_PetEquip_Refine_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Unlock_Request::kPetidFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Unlock_Request::GM_PetEquip_Unlock_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Unlock_Request::InitAsDefaultInstance() {
}

GM_PetEquip_Unlock_Request::GM_PetEquip_Unlock_Request(const GM_PetEquip_Unlock_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Unlock_Request::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Unlock_Request::~GM_PetEquip_Unlock_Request() {
  SharedDtor();
}

void GM_PetEquip_Unlock_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Unlock_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Unlock_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Unlock_Request_descriptor_;
}

const GM_PetEquip_Unlock_Request& GM_PetEquip_Unlock_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Unlock_Request* GM_PetEquip_Unlock_Request::default_instance_ = NULL;

GM_PetEquip_Unlock_Request* GM_PetEquip_Unlock_Request::New() const {
  return new GM_PetEquip_Unlock_Request;
}

void GM_PetEquip_Unlock_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Unlock_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Unlock_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Unlock_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Unlock_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Unlock_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Unlock_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Unlock_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Unlock_Request::MergeFrom(const GM_PetEquip_Unlock_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Unlock_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Unlock_Request::CopyFrom(const GM_PetEquip_Unlock_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Unlock_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Unlock_Request::Swap(GM_PetEquip_Unlock_Request* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Unlock_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Unlock_Request_descriptor_;
  metadata.reflection = GM_PetEquip_Unlock_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Unlock_Return::kResultFieldNumber;
const int GM_PetEquip_Unlock_Return::kHolenumFieldNumber;
const int GM_PetEquip_Unlock_Return::kPetidFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Unlock_Return::GM_PetEquip_Unlock_Return()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Unlock_Return::InitAsDefaultInstance() {
}

GM_PetEquip_Unlock_Return::GM_PetEquip_Unlock_Return(const GM_PetEquip_Unlock_Return& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Unlock_Return::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  holenum_ = 0;
  petid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Unlock_Return::~GM_PetEquip_Unlock_Return() {
  SharedDtor();
}

void GM_PetEquip_Unlock_Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Unlock_Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Unlock_Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Unlock_Return_descriptor_;
}

const GM_PetEquip_Unlock_Return& GM_PetEquip_Unlock_Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Unlock_Return* GM_PetEquip_Unlock_Return::default_instance_ = NULL;

GM_PetEquip_Unlock_Return* GM_PetEquip_Unlock_Return::New() const {
  return new GM_PetEquip_Unlock_Return;
}

void GM_PetEquip_Unlock_Return::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    holenum_ = 0;
    petid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Unlock_Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_holenum;
        break;
      }

      // optional int32 holenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional int32 petid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Unlock_Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->holenum(), output);
  }

  // optional int32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Unlock_Return::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 holenum = 2;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->holenum(), target);
  }

  // optional int32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Unlock_Return::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 holenum = 2;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Unlock_Return::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Unlock_Return* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Unlock_Return*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Unlock_Return::MergeFrom(const GM_PetEquip_Unlock_Return& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Unlock_Return::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Unlock_Return::CopyFrom(const GM_PetEquip_Unlock_Return& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Unlock_Return::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Unlock_Return::Swap(GM_PetEquip_Unlock_Return* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(holenum_, other->holenum_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Unlock_Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Unlock_Return_descriptor_;
  metadata.reflection = GM_PetEquip_Unlock_Return_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Upgrade_Change::kDataFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Upgrade_Change::GM_PetEquip_Upgrade_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Upgrade_Change::InitAsDefaultInstance() {
}

GM_PetEquip_Upgrade_Change::GM_PetEquip_Upgrade_Change(const GM_PetEquip_Upgrade_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Change::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Upgrade_Change::~GM_PetEquip_Upgrade_Change() {
  SharedDtor();
}

void GM_PetEquip_Upgrade_Change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Upgrade_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Upgrade_Change_descriptor_;
}

const GM_PetEquip_Upgrade_Change& GM_PetEquip_Upgrade_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Upgrade_Change* GM_PetEquip_Upgrade_Change::default_instance_ = NULL;

GM_PetEquip_Upgrade_Change* GM_PetEquip_Upgrade_Change::New() const {
  return new GM_PetEquip_Upgrade_Change;
}

void GM_PetEquip_Upgrade_Change::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Upgrade_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GM_PetEquip_Upgrade_Info data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Upgrade_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GM_PetEquip_Upgrade_Info data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Upgrade_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GM_PetEquip_Upgrade_Info data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Upgrade_Change::ByteSize() const {
  int total_size = 0;

  // repeated .GM_PetEquip_Upgrade_Info data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Upgrade_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Upgrade_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Upgrade_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Upgrade_Change::MergeFrom(const GM_PetEquip_Upgrade_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Upgrade_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Change::CopyFrom(const GM_PetEquip_Upgrade_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Upgrade_Change::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PetEquip_Upgrade_Change::Swap(GM_PetEquip_Upgrade_Change* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Upgrade_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Upgrade_Change_descriptor_;
  metadata.reflection = GM_PetEquip_Upgrade_Change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetEquip_Upgrade_Info::kHolenumFieldNumber;
const int GM_PetEquip_Upgrade_Info::kStateFieldNumber;
#endif  // !_MSC_VER

GM_PetEquip_Upgrade_Info::GM_PetEquip_Upgrade_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetEquip_Upgrade_Info::InitAsDefaultInstance() {
}

GM_PetEquip_Upgrade_Info::GM_PetEquip_Upgrade_Info(const GM_PetEquip_Upgrade_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Info::SharedCtor() {
  _cached_size_ = 0;
  holenum_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetEquip_Upgrade_Info::~GM_PetEquip_Upgrade_Info() {
  SharedDtor();
}

void GM_PetEquip_Upgrade_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetEquip_Upgrade_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetEquip_Upgrade_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetEquip_Upgrade_Info_descriptor_;
}

const GM_PetEquip_Upgrade_Info& GM_PetEquip_Upgrade_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetEquip_Upgrade_Info* GM_PetEquip_Upgrade_Info::default_instance_ = NULL;

GM_PetEquip_Upgrade_Info* GM_PetEquip_Upgrade_Info::New() const {
  return new GM_PetEquip_Upgrade_Info;
}

void GM_PetEquip_Upgrade_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    holenum_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetEquip_Upgrade_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 holenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holenum_)));
          set_has_holenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetEquip_Upgrade_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->holenum(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetEquip_Upgrade_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 holenum = 1;
  if (has_holenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->holenum(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetEquip_Upgrade_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 holenum = 1;
    if (has_holenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holenum());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetEquip_Upgrade_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetEquip_Upgrade_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetEquip_Upgrade_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetEquip_Upgrade_Info::MergeFrom(const GM_PetEquip_Upgrade_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_holenum()) {
      set_holenum(from.holenum());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetEquip_Upgrade_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetEquip_Upgrade_Info::CopyFrom(const GM_PetEquip_Upgrade_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetEquip_Upgrade_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_PetEquip_Upgrade_Info::Swap(GM_PetEquip_Upgrade_Info* other) {
  if (other != this) {
    std::swap(holenum_, other->holenum_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetEquip_Upgrade_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetEquip_Upgrade_Info_descriptor_;
  metadata.reflection = GM_PetEquip_Upgrade_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_Notify_FragmentChange::kPetidFieldNumber;
const int GM_Notify_FragmentChange::kFragmentnumFieldNumber;
#endif  // !_MSC_VER

GM_Notify_FragmentChange::GM_Notify_FragmentChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_Notify_FragmentChange::InitAsDefaultInstance() {
}

GM_Notify_FragmentChange::GM_Notify_FragmentChange(const GM_Notify_FragmentChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_Notify_FragmentChange::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  fragmentnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_Notify_FragmentChange::~GM_Notify_FragmentChange() {
  SharedDtor();
}

void GM_Notify_FragmentChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_Notify_FragmentChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_Notify_FragmentChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_Notify_FragmentChange_descriptor_;
}

const GM_Notify_FragmentChange& GM_Notify_FragmentChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_Notify_FragmentChange* GM_Notify_FragmentChange::default_instance_ = NULL;

GM_Notify_FragmentChange* GM_Notify_FragmentChange::New() const {
  return new GM_Notify_FragmentChange;
}

void GM_Notify_FragmentChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    fragmentnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_Notify_FragmentChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fragmentnum;
        break;
      }

      // optional int32 fragmentnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentnum_)));
          set_has_fragmentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_Notify_FragmentChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // optional int32 fragmentnum = 2;
  if (has_fragmentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fragmentnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_Notify_FragmentChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // optional int32 fragmentnum = 2;
  if (has_fragmentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fragmentnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_Notify_FragmentChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional int32 fragmentnum = 2;
    if (has_fragmentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragmentnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_Notify_FragmentChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_Notify_FragmentChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_Notify_FragmentChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_Notify_FragmentChange::MergeFrom(const GM_Notify_FragmentChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_fragmentnum()) {
      set_fragmentnum(from.fragmentnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_Notify_FragmentChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_Notify_FragmentChange::CopyFrom(const GM_Notify_FragmentChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_Notify_FragmentChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM_Notify_FragmentChange::Swap(GM_Notify_FragmentChange* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(fragmentnum_, other->fragmentnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_Notify_FragmentChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_Notify_FragmentChange_descriptor_;
  metadata.reflection = GM_Notify_FragmentChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetSkillCount::kPetidFieldNumber;
const int GM_PetSkillCount::kXFieldNumber;
const int GM_PetSkillCount::kYFieldNumber;
const int GM_PetSkillCount::kIsfullFieldNumber;
const int GM_PetSkillCount::kLevelFieldNumber;
#endif  // !_MSC_VER

GM_PetSkillCount::GM_PetSkillCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetSkillCount::InitAsDefaultInstance() {
}

GM_PetSkillCount::GM_PetSkillCount(const GM_PetSkillCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetSkillCount::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0;
  x_ = 0;
  y_ = 0;
  isfull_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetSkillCount::~GM_PetSkillCount() {
  SharedDtor();
}

void GM_PetSkillCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetSkillCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetSkillCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetSkillCount_descriptor_;
}

const GM_PetSkillCount& GM_PetSkillCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetSkillCount* GM_PetSkillCount::default_instance_ = NULL;

GM_PetSkillCount* GM_PetSkillCount::New() const {
  return new GM_PetSkillCount;
}

void GM_PetSkillCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0;
    x_ = 0;
    y_ = 0;
    isfull_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetSkillCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 petid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isfull;
        break;
      }

      // required int32 isfull = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetSkillCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required int32 isfull = 4;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isfull(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetSkillCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required int32 isfull = 4;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isfull(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetSkillCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 isfull = 4;
    if (has_isfull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfull());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetSkillCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetSkillCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetSkillCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetSkillCount::MergeFrom(const GM_PetSkillCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetSkillCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetSkillCount::CopyFrom(const GM_PetSkillCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetSkillCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GM_PetSkillCount::Swap(GM_PetSkillCount* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(isfull_, other->isfull_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetSkillCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetSkillCount_descriptor_;
  metadata.reflection = GM_PetSkillCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_PetSkillCountReturn::kResultFieldNumber;
const int GM_PetSkillCountReturn::kPetdataFieldNumber;
#endif  // !_MSC_VER

GM_PetSkillCountReturn::GM_PetSkillCountReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_PetSkillCountReturn::InitAsDefaultInstance() {
}

GM_PetSkillCountReturn::GM_PetSkillCountReturn(const GM_PetSkillCountReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_PetSkillCountReturn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_PetSkillCountReturn::~GM_PetSkillCountReturn() {
  SharedDtor();
}

void GM_PetSkillCountReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_PetSkillCountReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_PetSkillCountReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_PetSkillCountReturn_descriptor_;
}

const GM_PetSkillCountReturn& GM_PetSkillCountReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_PetSkillCountReturn* GM_PetSkillCountReturn::default_instance_ = NULL;

GM_PetSkillCountReturn* GM_PetSkillCountReturn::New() const {
  return new GM_PetSkillCountReturn;
}

void GM_PetSkillCountReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  petdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_PetSkillCountReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_petdata;
        break;
      }

      // repeated .GM_PetSkillCount petdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_petdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_PetSkillCountReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .GM_PetSkillCount petdata = 2;
  for (int i = 0; i < this->petdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_PetSkillCountReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .GM_PetSkillCount petdata = 2;
  for (int i = 0; i < this->petdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_PetSkillCountReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .GM_PetSkillCount petdata = 2;
  total_size += 1 * this->petdata_size();
  for (int i = 0; i < this->petdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_PetSkillCountReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_PetSkillCountReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_PetSkillCountReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_PetSkillCountReturn::MergeFrom(const GM_PetSkillCountReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  petdata_.MergeFrom(from.petdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_PetSkillCountReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_PetSkillCountReturn::CopyFrom(const GM_PetSkillCountReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_PetSkillCountReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < petdata_size(); i++) {
    if (!this->petdata(i).IsInitialized()) return false;
  }
  return true;
}

void GM_PetSkillCountReturn::Swap(GM_PetSkillCountReturn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    petdata_.Swap(&other->petdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_PetSkillCountReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_PetSkillCountReturn_descriptor_;
  metadata.reflection = GM_PetSkillCountReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM_EquipPetSkillRequest::kEquipGmidFieldNumber;
const int GM_EquipPetSkillRequest::kIdskilledpetidFieldNumber;
#endif  // !_MSC_VER

GM_EquipPetSkillRequest::GM_EquipPetSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM_EquipPetSkillRequest::InitAsDefaultInstance() {
}

GM_EquipPetSkillRequest::GM_EquipPetSkillRequest(const GM_EquipPetSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM_EquipPetSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  equipgmid_ = GOOGLE_LONGLONG(0);
  idskilledpetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM_EquipPetSkillRequest::~GM_EquipPetSkillRequest() {
  SharedDtor();
}

void GM_EquipPetSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM_EquipPetSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM_EquipPetSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM_EquipPetSkillRequest_descriptor_;
}

const GM_EquipPetSkillRequest& GM_EquipPetSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2etxt();
  return *default_instance_;
}

GM_EquipPetSkillRequest* GM_EquipPetSkillRequest::default_instance_ = NULL;

GM_EquipPetSkillRequest* GM_EquipPetSkillRequest::New() const {
  return new GM_EquipPetSkillRequest;
}

void GM_EquipPetSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipgmid_ = GOOGLE_LONGLONG(0);
    idskilledpetid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM_EquipPetSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 equipGmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipgmid_)));
          set_has_equipgmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idskilledpetid;
        break;
      }

      // required int32 idskilledpetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idskilledpetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idskilledpetid_)));
          set_has_idskilledpetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM_EquipPetSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 equipGmid = 1;
  if (has_equipgmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equipgmid(), output);
  }

  // required int32 idskilledpetid = 2;
  if (has_idskilledpetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idskilledpetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM_EquipPetSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 equipGmid = 1;
  if (has_equipgmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equipgmid(), target);
  }

  // required int32 idskilledpetid = 2;
  if (has_idskilledpetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idskilledpetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM_EquipPetSkillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 equipGmid = 1;
    if (has_equipgmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipgmid());
    }

    // required int32 idskilledpetid = 2;
    if (has_idskilledpetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idskilledpetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM_EquipPetSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM_EquipPetSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM_EquipPetSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM_EquipPetSkillRequest::MergeFrom(const GM_EquipPetSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipgmid()) {
      set_equipgmid(from.equipgmid());
    }
    if (from.has_idskilledpetid()) {
      set_idskilledpetid(from.idskilledpetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM_EquipPetSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM_EquipPetSkillRequest::CopyFrom(const GM_EquipPetSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM_EquipPetSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM_EquipPetSkillRequest::Swap(GM_EquipPetSkillRequest* other) {
  if (other != this) {
    std::swap(equipgmid_, other->equipgmid_);
    std::swap(idskilledpetid_, other->idskilledpetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM_EquipPetSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM_EquipPetSkillRequest_descriptor_;
  metadata.reflection = GM_EquipPetSkillRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
