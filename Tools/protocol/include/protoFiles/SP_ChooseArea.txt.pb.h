// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SP_ChooseArea.txt

#ifndef PROTOBUF_SP_5fChooseArea_2etxt__INCLUDED
#define PROTOBUF_SP_5fChooseArea_2etxt__INCLUDED

#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267 4996)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

class GM_EnsureChooseArea;
class GM_RequestGameServerConnect;
class GM_GameServerIpReturn;
class SM_ServerInfoProto;
class GM_DeleteRoleNotify;
class GM_LevelChange;
class GM_ChooseAreaToGate;

// ===================================================================

class GM_EnsureChooseArea : public ::google::protobuf::Message {
 public:
  GM_EnsureChooseArea();
  virtual ~GM_EnsureChooseArea();

  GM_EnsureChooseArea(const GM_EnsureChooseArea& from);

  inline GM_EnsureChooseArea& operator=(const GM_EnsureChooseArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_EnsureChooseArea& default_instance();

  void Swap(GM_EnsureChooseArea* other);

  // implements Message ----------------------------------------------

  GM_EnsureChooseArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_EnsureChooseArea& from);
  void MergeFrom(const GM_EnsureChooseArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Account = 1;
  inline bool has_m_account() const;
  inline void clear_m_account();
  static const int kMAccountFieldNumber = 1;
  inline ::google::protobuf::int32 m_account() const;
  inline void set_m_account(::google::protobuf::int32 value);

  // required int32 m_AreaID = 2;
  inline bool has_m_areaid() const;
  inline void clear_m_areaid();
  static const int kMAreaIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_areaid() const;
  inline void set_m_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_EnsureChooseArea)
 private:
  inline void set_has_m_account();
  inline void clear_has_m_account();
  inline void set_has_m_areaid();
  inline void clear_has_m_areaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_account_;
  ::google::protobuf::int32 m_areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_EnsureChooseArea* default_instance_;
};
// -------------------------------------------------------------------

class GM_RequestGameServerConnect : public ::google::protobuf::Message {
 public:
  GM_RequestGameServerConnect();
  virtual ~GM_RequestGameServerConnect();

  GM_RequestGameServerConnect(const GM_RequestGameServerConnect& from);

  inline GM_RequestGameServerConnect& operator=(const GM_RequestGameServerConnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_RequestGameServerConnect& default_instance();

  void Swap(GM_RequestGameServerConnect* other);

  // implements Message ----------------------------------------------

  GM_RequestGameServerConnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_RequestGameServerConnect& from);
  void MergeFrom(const GM_RequestGameServerConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Account = 1;
  inline bool has_m_account() const;
  inline void clear_m_account();
  static const int kMAccountFieldNumber = 1;
  inline ::google::protobuf::int32 m_account() const;
  inline void set_m_account(::google::protobuf::int32 value);

  // required string m_RandStr = 2;
  inline bool has_m_randstr() const;
  inline void clear_m_randstr();
  static const int kMRandStrFieldNumber = 2;
  inline const ::std::string& m_randstr() const;
  inline void set_m_randstr(const ::std::string& value);
  inline void set_m_randstr(const char* value);
  inline void set_m_randstr(const char* value, size_t size);
  inline ::std::string* mutable_m_randstr();
  inline ::std::string* release_m_randstr();
  inline void set_allocated_m_randstr(::std::string* m_randstr);

  // @@protoc_insertion_point(class_scope:GM_RequestGameServerConnect)
 private:
  inline void set_has_m_account();
  inline void clear_has_m_account();
  inline void set_has_m_randstr();
  inline void clear_has_m_randstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_randstr_;
  ::google::protobuf::int32 m_account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_RequestGameServerConnect* default_instance_;
};
// -------------------------------------------------------------------

class GM_GameServerIpReturn : public ::google::protobuf::Message {
 public:
  GM_GameServerIpReturn();
  virtual ~GM_GameServerIpReturn();

  GM_GameServerIpReturn(const GM_GameServerIpReturn& from);

  inline GM_GameServerIpReturn& operator=(const GM_GameServerIpReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_GameServerIpReturn& default_instance();

  void Swap(GM_GameServerIpReturn* other);

  // implements Message ----------------------------------------------

  GM_GameServerIpReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_GameServerIpReturn& from);
  void MergeFrom(const GM_GameServerIpReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Result = 1;
  inline bool has_m_result() const;
  inline void clear_m_result();
  static const int kMResultFieldNumber = 1;
  inline ::google::protobuf::int32 m_result() const;
  inline void set_m_result(::google::protobuf::int32 value);

  // required string m_ServerIP = 2;
  inline bool has_m_serverip() const;
  inline void clear_m_serverip();
  static const int kMServerIPFieldNumber = 2;
  inline const ::std::string& m_serverip() const;
  inline void set_m_serverip(const ::std::string& value);
  inline void set_m_serverip(const char* value);
  inline void set_m_serverip(const char* value, size_t size);
  inline ::std::string* mutable_m_serverip();
  inline ::std::string* release_m_serverip();
  inline void set_allocated_m_serverip(::std::string* m_serverip);

  // required string m_Password = 3;
  inline bool has_m_password() const;
  inline void clear_m_password();
  static const int kMPasswordFieldNumber = 3;
  inline const ::std::string& m_password() const;
  inline void set_m_password(const ::std::string& value);
  inline void set_m_password(const char* value);
  inline void set_m_password(const char* value, size_t size);
  inline ::std::string* mutable_m_password();
  inline ::std::string* release_m_password();
  inline void set_allocated_m_password(::std::string* m_password);

  // required int32 m_PortNumber = 4;
  inline bool has_m_portnumber() const;
  inline void clear_m_portnumber();
  static const int kMPortNumberFieldNumber = 4;
  inline ::google::protobuf::int32 m_portnumber() const;
  inline void set_m_portnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_GameServerIpReturn)
 private:
  inline void set_has_m_result();
  inline void clear_has_m_result();
  inline void set_has_m_serverip();
  inline void clear_has_m_serverip();
  inline void set_has_m_password();
  inline void clear_has_m_password();
  inline void set_has_m_portnumber();
  inline void clear_has_m_portnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_serverip_;
  ::google::protobuf::int32 m_result_;
  ::google::protobuf::int32 m_portnumber_;
  ::std::string* m_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_GameServerIpReturn* default_instance_;
};
// -------------------------------------------------------------------

class SM_ServerInfoProto : public ::google::protobuf::Message {
 public:
  SM_ServerInfoProto();
  virtual ~SM_ServerInfoProto();

  SM_ServerInfoProto(const SM_ServerInfoProto& from);

  inline SM_ServerInfoProto& operator=(const SM_ServerInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SM_ServerInfoProto& default_instance();

  void Swap(SM_ServerInfoProto* other);

  // implements Message ----------------------------------------------

  SM_ServerInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SM_ServerInfoProto& from);
  void MergeFrom(const SM_ServerInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverState = 1;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerStateFieldNumber = 1;
  inline ::google::protobuf::int32 serverstate() const;
  inline void set_serverstate(::google::protobuf::int32 value);

  // optional int32 serverFlag = 2;
  inline bool has_serverflag() const;
  inline void clear_serverflag();
  static const int kServerFlagFieldNumber = 2;
  inline ::google::protobuf::int32 serverflag() const;
  inline void set_serverflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SM_ServerInfoProto)
 private:
  inline void set_has_serverstate();
  inline void clear_has_serverstate();
  inline void set_has_serverflag();
  inline void clear_has_serverflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverstate_;
  ::google::protobuf::int32 serverflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static SM_ServerInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class GM_DeleteRoleNotify : public ::google::protobuf::Message {
 public:
  GM_DeleteRoleNotify();
  virtual ~GM_DeleteRoleNotify();

  GM_DeleteRoleNotify(const GM_DeleteRoleNotify& from);

  inline GM_DeleteRoleNotify& operator=(const GM_DeleteRoleNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_DeleteRoleNotify& default_instance();

  void Swap(GM_DeleteRoleNotify* other);

  // implements Message ----------------------------------------------

  GM_DeleteRoleNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_DeleteRoleNotify& from);
  void MergeFrom(const GM_DeleteRoleNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_accountID = 1;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_accountid() const;
  inline void set_m_accountid(::google::protobuf::int32 value);

  // required int32 m_roleID = 2;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // optional int32 m_areaid = 3;
  inline bool has_m_areaid() const;
  inline void clear_m_areaid();
  static const int kMAreaidFieldNumber = 3;
  inline ::google::protobuf::int32 m_areaid() const;
  inline void set_m_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_DeleteRoleNotify)
 private:
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_areaid();
  inline void clear_has_m_areaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_accountid_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_DeleteRoleNotify* default_instance_;
};
// -------------------------------------------------------------------

class GM_LevelChange : public ::google::protobuf::Message {
 public:
  GM_LevelChange();
  virtual ~GM_LevelChange();

  GM_LevelChange(const GM_LevelChange& from);

  inline GM_LevelChange& operator=(const GM_LevelChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_LevelChange& default_instance();

  void Swap(GM_LevelChange* other);

  // implements Message ----------------------------------------------

  GM_LevelChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_LevelChange& from);
  void MergeFrom(const GM_LevelChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_accountId = 1;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_accountid() const;
  inline void set_m_accountid(::google::protobuf::int32 value);

  // required int32 m_roleId = 2;
  inline bool has_m_roleid() const;
  inline void clear_m_roleid();
  static const int kMRoleIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_roleid() const;
  inline void set_m_roleid(::google::protobuf::int32 value);

  // required int32 m_level = 3;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_areaid = 4;
  inline bool has_m_areaid() const;
  inline void clear_m_areaid();
  static const int kMAreaidFieldNumber = 4;
  inline ::google::protobuf::int32 m_areaid() const;
  inline void set_m_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GM_LevelChange)
 private:
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_roleid();
  inline void clear_has_m_roleid();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_areaid();
  inline void clear_has_m_areaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_accountid_;
  ::google::protobuf::int32 m_roleid_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_LevelChange* default_instance_;
};
// -------------------------------------------------------------------

class GM_ChooseAreaToGate : public ::google::protobuf::Message {
 public:
  GM_ChooseAreaToGate();
  virtual ~GM_ChooseAreaToGate();

  GM_ChooseAreaToGate(const GM_ChooseAreaToGate& from);

  inline GM_ChooseAreaToGate& operator=(const GM_ChooseAreaToGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM_ChooseAreaToGate& default_instance();

  void Swap(GM_ChooseAreaToGate* other);

  // implements Message ----------------------------------------------

  GM_ChooseAreaToGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM_ChooseAreaToGate& from);
  void MergeFrom(const GM_ChooseAreaToGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_account = 1;
  inline bool has_m_account() const;
  inline void clear_m_account();
  static const int kMAccountFieldNumber = 1;
  inline ::google::protobuf::uint32 m_account() const;
  inline void set_m_account(::google::protobuf::uint32 value);

  // required uint32 m_area = 2;
  inline bool has_m_area() const;
  inline void clear_m_area();
  static const int kMAreaFieldNumber = 2;
  inline ::google::protobuf::uint32 m_area() const;
  inline void set_m_area(::google::protobuf::uint32 value);

  // required string m_randstr = 3;
  inline bool has_m_randstr() const;
  inline void clear_m_randstr();
  static const int kMRandstrFieldNumber = 3;
  inline const ::std::string& m_randstr() const;
  inline void set_m_randstr(const ::std::string& value);
  inline void set_m_randstr(const char* value);
  inline void set_m_randstr(const char* value, size_t size);
  inline ::std::string* mutable_m_randstr();
  inline ::std::string* release_m_randstr();
  inline void set_allocated_m_randstr(::std::string* m_randstr);

  // required string m_clientip = 4;
  inline bool has_m_clientip() const;
  inline void clear_m_clientip();
  static const int kMClientipFieldNumber = 4;
  inline const ::std::string& m_clientip() const;
  inline void set_m_clientip(const ::std::string& value);
  inline void set_m_clientip(const char* value);
  inline void set_m_clientip(const char* value, size_t size);
  inline ::std::string* mutable_m_clientip();
  inline ::std::string* release_m_clientip();
  inline void set_allocated_m_clientip(::std::string* m_clientip);

  // optional string m_gateserverip = 5;
  inline bool has_m_gateserverip() const;
  inline void clear_m_gateserverip();
  static const int kMGateserveripFieldNumber = 5;
  inline const ::std::string& m_gateserverip() const;
  inline void set_m_gateserverip(const ::std::string& value);
  inline void set_m_gateserverip(const char* value);
  inline void set_m_gateserverip(const char* value, size_t size);
  inline ::std::string* mutable_m_gateserverip();
  inline ::std::string* release_m_gateserverip();
  inline void set_allocated_m_gateserverip(::std::string* m_gateserverip);

  // optional uint32 m_gateserverport = 6;
  inline bool has_m_gateserverport() const;
  inline void clear_m_gateserverport();
  static const int kMGateserverportFieldNumber = 6;
  inline ::google::protobuf::uint32 m_gateserverport() const;
  inline void set_m_gateserverport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GM_ChooseAreaToGate)
 private:
  inline void set_has_m_account();
  inline void clear_has_m_account();
  inline void set_has_m_area();
  inline void clear_has_m_area();
  inline void set_has_m_randstr();
  inline void clear_has_m_randstr();
  inline void set_has_m_clientip();
  inline void clear_has_m_clientip();
  inline void set_has_m_gateserverip();
  inline void clear_has_m_gateserverip();
  inline void set_has_m_gateserverport();
  inline void clear_has_m_gateserverport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_account_;
  ::google::protobuf::uint32 m_area_;
  ::std::string* m_randstr_;
  ::std::string* m_clientip_;
  ::std::string* m_gateserverip_;
  ::google::protobuf::uint32 m_gateserverport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_AssignDesc_SP_5fChooseArea_2etxt();
  friend void protobuf_ShutdownFile_SP_5fChooseArea_2etxt();

  void InitAsDefaultInstance();
  static GM_ChooseAreaToGate* default_instance_;
};
// ===================================================================


// ===================================================================

// GM_EnsureChooseArea

// required int32 m_Account = 1;
inline bool GM_EnsureChooseArea::has_m_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_EnsureChooseArea::set_has_m_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_EnsureChooseArea::clear_has_m_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_EnsureChooseArea::clear_m_account() {
  m_account_ = 0;
  clear_has_m_account();
}
inline ::google::protobuf::int32 GM_EnsureChooseArea::m_account() const {
  return m_account_;
}
inline void GM_EnsureChooseArea::set_m_account(::google::protobuf::int32 value) {
  set_has_m_account();
  m_account_ = value;
}

// required int32 m_AreaID = 2;
inline bool GM_EnsureChooseArea::has_m_areaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_EnsureChooseArea::set_has_m_areaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_EnsureChooseArea::clear_has_m_areaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_EnsureChooseArea::clear_m_areaid() {
  m_areaid_ = 0;
  clear_has_m_areaid();
}
inline ::google::protobuf::int32 GM_EnsureChooseArea::m_areaid() const {
  return m_areaid_;
}
inline void GM_EnsureChooseArea::set_m_areaid(::google::protobuf::int32 value) {
  set_has_m_areaid();
  m_areaid_ = value;
}

// -------------------------------------------------------------------

// GM_RequestGameServerConnect

// required int32 m_Account = 1;
inline bool GM_RequestGameServerConnect::has_m_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_RequestGameServerConnect::set_has_m_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_RequestGameServerConnect::clear_has_m_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_RequestGameServerConnect::clear_m_account() {
  m_account_ = 0;
  clear_has_m_account();
}
inline ::google::protobuf::int32 GM_RequestGameServerConnect::m_account() const {
  return m_account_;
}
inline void GM_RequestGameServerConnect::set_m_account(::google::protobuf::int32 value) {
  set_has_m_account();
  m_account_ = value;
}

// required string m_RandStr = 2;
inline bool GM_RequestGameServerConnect::has_m_randstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_RequestGameServerConnect::set_has_m_randstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_RequestGameServerConnect::clear_has_m_randstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_RequestGameServerConnect::clear_m_randstr() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    m_randstr_->clear();
  }
  clear_has_m_randstr();
}
inline const ::std::string& GM_RequestGameServerConnect::m_randstr() const {
  return *m_randstr_;
}
inline void GM_RequestGameServerConnect::set_m_randstr(const ::std::string& value) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(value);
}
inline void GM_RequestGameServerConnect::set_m_randstr(const char* value) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(value);
}
inline void GM_RequestGameServerConnect::set_m_randstr(const char* value, size_t size) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_RequestGameServerConnect::mutable_m_randstr() {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  return m_randstr_;
}
inline ::std::string* GM_RequestGameServerConnect::release_m_randstr() {
  clear_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_randstr_;
    m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_RequestGameServerConnect::set_allocated_m_randstr(::std::string* m_randstr) {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (m_randstr) {
    set_has_m_randstr();
    m_randstr_ = m_randstr;
  } else {
    clear_has_m_randstr();
    m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GM_GameServerIpReturn

// required int32 m_Result = 1;
inline bool GM_GameServerIpReturn::has_m_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_GameServerIpReturn::set_has_m_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_GameServerIpReturn::clear_has_m_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_GameServerIpReturn::clear_m_result() {
  m_result_ = 0;
  clear_has_m_result();
}
inline ::google::protobuf::int32 GM_GameServerIpReturn::m_result() const {
  return m_result_;
}
inline void GM_GameServerIpReturn::set_m_result(::google::protobuf::int32 value) {
  set_has_m_result();
  m_result_ = value;
}

// required string m_ServerIP = 2;
inline bool GM_GameServerIpReturn::has_m_serverip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_GameServerIpReturn::set_has_m_serverip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_GameServerIpReturn::clear_has_m_serverip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_GameServerIpReturn::clear_m_serverip() {
  if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
    m_serverip_->clear();
  }
  clear_has_m_serverip();
}
inline const ::std::string& GM_GameServerIpReturn::m_serverip() const {
  return *m_serverip_;
}
inline void GM_GameServerIpReturn::set_m_serverip(const ::std::string& value) {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  m_serverip_->assign(value);
}
inline void GM_GameServerIpReturn::set_m_serverip(const char* value) {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  m_serverip_->assign(value);
}
inline void GM_GameServerIpReturn::set_m_serverip(const char* value, size_t size) {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  m_serverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GameServerIpReturn::mutable_m_serverip() {
  set_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    m_serverip_ = new ::std::string;
  }
  return m_serverip_;
}
inline ::std::string* GM_GameServerIpReturn::release_m_serverip() {
  clear_has_m_serverip();
  if (m_serverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_serverip_;
    m_serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GameServerIpReturn::set_allocated_m_serverip(::std::string* m_serverip) {
  if (m_serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_serverip_;
  }
  if (m_serverip) {
    set_has_m_serverip();
    m_serverip_ = m_serverip;
  } else {
    clear_has_m_serverip();
    m_serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_Password = 3;
inline bool GM_GameServerIpReturn::has_m_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_GameServerIpReturn::set_has_m_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_GameServerIpReturn::clear_has_m_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_GameServerIpReturn::clear_m_password() {
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    m_password_->clear();
  }
  clear_has_m_password();
}
inline const ::std::string& GM_GameServerIpReturn::m_password() const {
  return *m_password_;
}
inline void GM_GameServerIpReturn::set_m_password(const ::std::string& value) {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  m_password_->assign(value);
}
inline void GM_GameServerIpReturn::set_m_password(const char* value) {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  m_password_->assign(value);
}
inline void GM_GameServerIpReturn::set_m_password(const char* value, size_t size) {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  m_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_GameServerIpReturn::mutable_m_password() {
  set_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    m_password_ = new ::std::string;
  }
  return m_password_;
}
inline ::std::string* GM_GameServerIpReturn::release_m_password() {
  clear_has_m_password();
  if (m_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_password_;
    m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_GameServerIpReturn::set_allocated_m_password(::std::string* m_password) {
  if (m_password_ != &::google::protobuf::internal::kEmptyString) {
    delete m_password_;
  }
  if (m_password) {
    set_has_m_password();
    m_password_ = m_password;
  } else {
    clear_has_m_password();
    m_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_PortNumber = 4;
inline bool GM_GameServerIpReturn::has_m_portnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_GameServerIpReturn::set_has_m_portnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_GameServerIpReturn::clear_has_m_portnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_GameServerIpReturn::clear_m_portnumber() {
  m_portnumber_ = 0;
  clear_has_m_portnumber();
}
inline ::google::protobuf::int32 GM_GameServerIpReturn::m_portnumber() const {
  return m_portnumber_;
}
inline void GM_GameServerIpReturn::set_m_portnumber(::google::protobuf::int32 value) {
  set_has_m_portnumber();
  m_portnumber_ = value;
}

// -------------------------------------------------------------------

// SM_ServerInfoProto

// required int32 serverState = 1;
inline bool SM_ServerInfoProto::has_serverstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SM_ServerInfoProto::set_has_serverstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SM_ServerInfoProto::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SM_ServerInfoProto::clear_serverstate() {
  serverstate_ = 0;
  clear_has_serverstate();
}
inline ::google::protobuf::int32 SM_ServerInfoProto::serverstate() const {
  return serverstate_;
}
inline void SM_ServerInfoProto::set_serverstate(::google::protobuf::int32 value) {
  set_has_serverstate();
  serverstate_ = value;
}

// optional int32 serverFlag = 2;
inline bool SM_ServerInfoProto::has_serverflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SM_ServerInfoProto::set_has_serverflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SM_ServerInfoProto::clear_has_serverflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SM_ServerInfoProto::clear_serverflag() {
  serverflag_ = 0;
  clear_has_serverflag();
}
inline ::google::protobuf::int32 SM_ServerInfoProto::serverflag() const {
  return serverflag_;
}
inline void SM_ServerInfoProto::set_serverflag(::google::protobuf::int32 value) {
  set_has_serverflag();
  serverflag_ = value;
}

// -------------------------------------------------------------------

// GM_DeleteRoleNotify

// required int32 m_accountID = 1;
inline bool GM_DeleteRoleNotify::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_DeleteRoleNotify::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_DeleteRoleNotify::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_DeleteRoleNotify::clear_m_accountid() {
  m_accountid_ = 0;
  clear_has_m_accountid();
}
inline ::google::protobuf::int32 GM_DeleteRoleNotify::m_accountid() const {
  return m_accountid_;
}
inline void GM_DeleteRoleNotify::set_m_accountid(::google::protobuf::int32 value) {
  set_has_m_accountid();
  m_accountid_ = value;
}

// required int32 m_roleID = 2;
inline bool GM_DeleteRoleNotify::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_DeleteRoleNotify::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_DeleteRoleNotify::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_DeleteRoleNotify::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_DeleteRoleNotify::m_roleid() const {
  return m_roleid_;
}
inline void GM_DeleteRoleNotify::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// optional int32 m_areaid = 3;
inline bool GM_DeleteRoleNotify::has_m_areaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_DeleteRoleNotify::set_has_m_areaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_DeleteRoleNotify::clear_has_m_areaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_DeleteRoleNotify::clear_m_areaid() {
  m_areaid_ = 0;
  clear_has_m_areaid();
}
inline ::google::protobuf::int32 GM_DeleteRoleNotify::m_areaid() const {
  return m_areaid_;
}
inline void GM_DeleteRoleNotify::set_m_areaid(::google::protobuf::int32 value) {
  set_has_m_areaid();
  m_areaid_ = value;
}

// -------------------------------------------------------------------

// GM_LevelChange

// required int32 m_accountId = 1;
inline bool GM_LevelChange::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_LevelChange::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_LevelChange::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_LevelChange::clear_m_accountid() {
  m_accountid_ = 0;
  clear_has_m_accountid();
}
inline ::google::protobuf::int32 GM_LevelChange::m_accountid() const {
  return m_accountid_;
}
inline void GM_LevelChange::set_m_accountid(::google::protobuf::int32 value) {
  set_has_m_accountid();
  m_accountid_ = value;
}

// required int32 m_roleId = 2;
inline bool GM_LevelChange::has_m_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_LevelChange::set_has_m_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_LevelChange::clear_has_m_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_LevelChange::clear_m_roleid() {
  m_roleid_ = 0;
  clear_has_m_roleid();
}
inline ::google::protobuf::int32 GM_LevelChange::m_roleid() const {
  return m_roleid_;
}
inline void GM_LevelChange::set_m_roleid(::google::protobuf::int32 value) {
  set_has_m_roleid();
  m_roleid_ = value;
}

// required int32 m_level = 3;
inline bool GM_LevelChange::has_m_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_LevelChange::set_has_m_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_LevelChange::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_LevelChange::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 GM_LevelChange::m_level() const {
  return m_level_;
}
inline void GM_LevelChange::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_areaid = 4;
inline bool GM_LevelChange::has_m_areaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_LevelChange::set_has_m_areaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_LevelChange::clear_has_m_areaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_LevelChange::clear_m_areaid() {
  m_areaid_ = 0;
  clear_has_m_areaid();
}
inline ::google::protobuf::int32 GM_LevelChange::m_areaid() const {
  return m_areaid_;
}
inline void GM_LevelChange::set_m_areaid(::google::protobuf::int32 value) {
  set_has_m_areaid();
  m_areaid_ = value;
}

// -------------------------------------------------------------------

// GM_ChooseAreaToGate

// required uint32 m_account = 1;
inline bool GM_ChooseAreaToGate::has_m_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM_ChooseAreaToGate::set_has_m_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM_ChooseAreaToGate::clear_has_m_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM_ChooseAreaToGate::clear_m_account() {
  m_account_ = 0u;
  clear_has_m_account();
}
inline ::google::protobuf::uint32 GM_ChooseAreaToGate::m_account() const {
  return m_account_;
}
inline void GM_ChooseAreaToGate::set_m_account(::google::protobuf::uint32 value) {
  set_has_m_account();
  m_account_ = value;
}

// required uint32 m_area = 2;
inline bool GM_ChooseAreaToGate::has_m_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM_ChooseAreaToGate::set_has_m_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM_ChooseAreaToGate::clear_has_m_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM_ChooseAreaToGate::clear_m_area() {
  m_area_ = 0u;
  clear_has_m_area();
}
inline ::google::protobuf::uint32 GM_ChooseAreaToGate::m_area() const {
  return m_area_;
}
inline void GM_ChooseAreaToGate::set_m_area(::google::protobuf::uint32 value) {
  set_has_m_area();
  m_area_ = value;
}

// required string m_randstr = 3;
inline bool GM_ChooseAreaToGate::has_m_randstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GM_ChooseAreaToGate::set_has_m_randstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GM_ChooseAreaToGate::clear_has_m_randstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GM_ChooseAreaToGate::clear_m_randstr() {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    m_randstr_->clear();
  }
  clear_has_m_randstr();
}
inline const ::std::string& GM_ChooseAreaToGate::m_randstr() const {
  return *m_randstr_;
}
inline void GM_ChooseAreaToGate::set_m_randstr(const ::std::string& value) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(value);
}
inline void GM_ChooseAreaToGate::set_m_randstr(const char* value) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(value);
}
inline void GM_ChooseAreaToGate::set_m_randstr(const char* value, size_t size) {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  m_randstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChooseAreaToGate::mutable_m_randstr() {
  set_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    m_randstr_ = new ::std::string;
  }
  return m_randstr_;
}
inline ::std::string* GM_ChooseAreaToGate::release_m_randstr() {
  clear_has_m_randstr();
  if (m_randstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_randstr_;
    m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChooseAreaToGate::set_allocated_m_randstr(::std::string* m_randstr) {
  if (m_randstr_ != &::google::protobuf::internal::kEmptyString) {
    delete m_randstr_;
  }
  if (m_randstr) {
    set_has_m_randstr();
    m_randstr_ = m_randstr;
  } else {
    clear_has_m_randstr();
    m_randstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_clientip = 4;
inline bool GM_ChooseAreaToGate::has_m_clientip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GM_ChooseAreaToGate::set_has_m_clientip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GM_ChooseAreaToGate::clear_has_m_clientip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GM_ChooseAreaToGate::clear_m_clientip() {
  if (m_clientip_ != &::google::protobuf::internal::kEmptyString) {
    m_clientip_->clear();
  }
  clear_has_m_clientip();
}
inline const ::std::string& GM_ChooseAreaToGate::m_clientip() const {
  return *m_clientip_;
}
inline void GM_ChooseAreaToGate::set_m_clientip(const ::std::string& value) {
  set_has_m_clientip();
  if (m_clientip_ == &::google::protobuf::internal::kEmptyString) {
    m_clientip_ = new ::std::string;
  }
  m_clientip_->assign(value);
}
inline void GM_ChooseAreaToGate::set_m_clientip(const char* value) {
  set_has_m_clientip();
  if (m_clientip_ == &::google::protobuf::internal::kEmptyString) {
    m_clientip_ = new ::std::string;
  }
  m_clientip_->assign(value);
}
inline void GM_ChooseAreaToGate::set_m_clientip(const char* value, size_t size) {
  set_has_m_clientip();
  if (m_clientip_ == &::google::protobuf::internal::kEmptyString) {
    m_clientip_ = new ::std::string;
  }
  m_clientip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChooseAreaToGate::mutable_m_clientip() {
  set_has_m_clientip();
  if (m_clientip_ == &::google::protobuf::internal::kEmptyString) {
    m_clientip_ = new ::std::string;
  }
  return m_clientip_;
}
inline ::std::string* GM_ChooseAreaToGate::release_m_clientip() {
  clear_has_m_clientip();
  if (m_clientip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_clientip_;
    m_clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChooseAreaToGate::set_allocated_m_clientip(::std::string* m_clientip) {
  if (m_clientip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_clientip_;
  }
  if (m_clientip) {
    set_has_m_clientip();
    m_clientip_ = m_clientip;
  } else {
    clear_has_m_clientip();
    m_clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_gateserverip = 5;
inline bool GM_ChooseAreaToGate::has_m_gateserverip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GM_ChooseAreaToGate::set_has_m_gateserverip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GM_ChooseAreaToGate::clear_has_m_gateserverip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GM_ChooseAreaToGate::clear_m_gateserverip() {
  if (m_gateserverip_ != &::google::protobuf::internal::kEmptyString) {
    m_gateserverip_->clear();
  }
  clear_has_m_gateserverip();
}
inline const ::std::string& GM_ChooseAreaToGate::m_gateserverip() const {
  return *m_gateserverip_;
}
inline void GM_ChooseAreaToGate::set_m_gateserverip(const ::std::string& value) {
  set_has_m_gateserverip();
  if (m_gateserverip_ == &::google::protobuf::internal::kEmptyString) {
    m_gateserverip_ = new ::std::string;
  }
  m_gateserverip_->assign(value);
}
inline void GM_ChooseAreaToGate::set_m_gateserverip(const char* value) {
  set_has_m_gateserverip();
  if (m_gateserverip_ == &::google::protobuf::internal::kEmptyString) {
    m_gateserverip_ = new ::std::string;
  }
  m_gateserverip_->assign(value);
}
inline void GM_ChooseAreaToGate::set_m_gateserverip(const char* value, size_t size) {
  set_has_m_gateserverip();
  if (m_gateserverip_ == &::google::protobuf::internal::kEmptyString) {
    m_gateserverip_ = new ::std::string;
  }
  m_gateserverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM_ChooseAreaToGate::mutable_m_gateserverip() {
  set_has_m_gateserverip();
  if (m_gateserverip_ == &::google::protobuf::internal::kEmptyString) {
    m_gateserverip_ = new ::std::string;
  }
  return m_gateserverip_;
}
inline ::std::string* GM_ChooseAreaToGate::release_m_gateserverip() {
  clear_has_m_gateserverip();
  if (m_gateserverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_gateserverip_;
    m_gateserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM_ChooseAreaToGate::set_allocated_m_gateserverip(::std::string* m_gateserverip) {
  if (m_gateserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gateserverip_;
  }
  if (m_gateserverip) {
    set_has_m_gateserverip();
    m_gateserverip_ = m_gateserverip;
  } else {
    clear_has_m_gateserverip();
    m_gateserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 m_gateserverport = 6;
inline bool GM_ChooseAreaToGate::has_m_gateserverport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GM_ChooseAreaToGate::set_has_m_gateserverport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GM_ChooseAreaToGate::clear_has_m_gateserverport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GM_ChooseAreaToGate::clear_m_gateserverport() {
  m_gateserverport_ = 0u;
  clear_has_m_gateserverport();
}
inline ::google::protobuf::uint32 GM_ChooseAreaToGate::m_gateserverport() const {
  return m_gateserverport_;
}
inline void GM_ChooseAreaToGate::set_m_gateserverport(::google::protobuf::uint32 value) {
  set_has_m_gateserverport();
  m_gateserverport_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#ifdef _MSC_VER
#  pragma warning(pop)
#endif

#endif  // PROTOBUF_SP_5fChooseArea_2etxt__INCLUDED
